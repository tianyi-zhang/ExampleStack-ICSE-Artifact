<p>Why? Why oh why oh why would you have written that code to start with? It's just wrong on so many levels, as covered by probably every third Apache POI question on Stackoverflow :( Oh, and it's <a href="https://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/Cell.html#setCellType%28int%29" rel="nofollow">explicitly advised against in the JavaDocs</a>....</p>

<p>You have two options available to you. If you want to have full control of reading the values, then follow the <a href="http://poi.apache.org/spreadsheet/quick-guide.html#CellContents" rel="nofollow">instructions in the Apache POI documentation on reading cell values</a>, and write code something like:</p>

<pre><code>for (Row row : sheet1) {
    for (Cell cell : row) {
        CellReference cellRef = new CellReference(row.getRowNum(), cell.getColumnIndex());
        System.out.print(cellRef.formatAsString());
        System.out.print(" - ");

        switch (cell.getCellType()) {
            case Cell.CELL_TYPE_STRING:
                System.out.println(cell.getRichStringCellValue().getString());
                break;
            case Cell.CELL_TYPE_NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    System.out.println(cell.getDateCellValue());
                } else {
                    System.out.println(cell.getNumericCellValue());
                }
                break;
            case Cell.CELL_TYPE_BOOLEAN:
                System.out.println(cell.getBooleanCellValue());
                break;
            case Cell.CELL_TYPE_FORMULA:
                System.out.println(cell.getCellFormula());
                break;
            default:
                System.out.println();
        }
    }
}
</code></pre>

<p>Alternately, if you just want "give me the closest string you can to what this cell looks like in Excel", then you need to use the <a href="http://poi.apache.org/apidocs/org/apache/poi/ss/usermodel/DataFormatter.html" rel="nofollow">DataFormatter class</a>, which provides methods which read the Excel format rules applied to a cell, then re-creates (as best it can) those in Java</p>

<p>Your code should be:</p>

<pre><code>DataFormatter fmt = new DataFormatter();

String valueAsInExcel = fmt.formatCellValue(cell);
</code></pre>

<p>That will format the number based on the formatting rules applied in Excel, so should return it looking as you expect</p>

<p>Finally, Dates in excel are stored as floating point numbers since 1900 or 1904, which is why you see the number you do in the date cell.</p>
