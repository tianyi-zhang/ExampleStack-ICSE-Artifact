<p>You first need to override <code>equals()</code> and <code>hashCode()</code>. Then you can implement an <code>intersection()</code> method.</p>

<pre><code>Number of identical values: 2
------------------------------
- { 'firstname': 'Bob', 'lastname': 'Smith', 'age': 30 }
- { 'firstname': 'Robert', 'lastname': 'Brown', 'age': 51 }
</code></pre>

<h3>Main</h3>

<pre><code>import java.util.*;

public class Main {
    public static void main(String[] args) {
        List&lt;User&gt; oldUsers = new ArrayList&lt;User&gt;();
        List&lt;User&gt; newUsers = new ArrayList&lt;User&gt;();
        List&lt;User&gt; intersect;

        oldUsers.addAll(Arrays.asList(
            new User("Bob", "Smith", 30),
            new User("Tom", "Jones", 42),
            new User("Robert", "Brown", 51),
            new User("James", "Jones", 28)
        ));

        newUsers.addAll(Arrays.asList(
            new User("Robert", "Brown", 51), // Same
            new User("Bob", "Smith", 30),    // Same
            new User("Tom", "Jones", 21),
            new User("James", "Hendrix", 28)
        ));

        intersect = intersection(oldUsers, newUsers);

        System.out.printf("Number of identical values: %d%n%s%n",
                intersect.size(), "------------------------------");
        for (User user : intersect) {
            System.out.printf("- %s%n", user);
        }
    }

    // http://stackoverflow.com/a/5283123/1762224
    public static &lt;T&gt; List&lt;T&gt; intersection(List&lt;T&gt; list1, List&lt;T&gt; list2) {
        List&lt;T&gt; list = new ArrayList&lt;T&gt;();
        for (T t : list1) {
            if (list2.contains(t)) {
                list.add(t);
            }
        }
        return list;
    }
}
</code></pre>

<h3>User</h3>

<pre><code>public class User {
    private String firstname;
    private String lastname;
    private int age;

    public String getFirstname() { return firstname; }
    public void setFirstname(String firstname) { this.firstname = firstname; }

    public String getLastname() { return lastname; }
    public void setLastname(String lastname) { this.lastname = lastname; }

    public int getAge() { return age; }
    public void setAge(int age) { this.age = age; }

    public User(String firstname, String lastname, int age) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.age = age;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + age;
        result = prime * result + ((firstname == null) ? 0 : firstname.hashCode());
        result = prime * result + ((lastname == null) ? 0 : lastname.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        User other = (User) obj;

        if (age != other.age) return false;

        if (firstname == null) {
            if (other.firstname != null) return false;
        } else if (!firstname.equals(other.firstname)) return false;

        if (lastname == null) {
            if (other.lastname != null) return false;
        } else if (!lastname.equals(other.lastname)) return false;

        return true;
    }

    @Override
    public String toString() {
        return String.format("{ 'firstname': '%s', 'lastname': '%s', 'age': %d }",
                firstname, lastname, age);
    }
}
</code></pre>

<hr>

<h1>Alternative Methods</h1>

<h3>Set :: Retain All</h3>

<pre><code>public static &lt;T&gt; List&lt;T&gt; intersection(List&lt;T&gt; list1, List&lt;T&gt; list2) {
    Set&lt;T&gt; set = new HashSet&lt;T&gt;(list1);
    set.retainAll(new HashSet&lt;T&gt;(list2));
    return new ArrayList&lt;T&gt;(set);
}
</code></pre>

<h3>List :: Java 8 Filter Stream</h3>

<pre><code>public static &lt;T&gt; List&lt;T&gt; intersection(Collection&lt;T&gt; list1, Collection&lt;T&gt; list2) {
    return list1.stream().filter(item -&gt; list2.contains(item)).collect(Collectors.toList()); 
}
</code></pre>
