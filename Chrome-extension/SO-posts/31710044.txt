<p>I believe that the issue is due to the hashmap.
A hashmap is made of key and value. However, you are not saving a key to the value specified. ("resultp = data.get(position);").</p>

<p>Therefore, when you try to access a value of the hashmap with the key : "TAG_IMG", the app is crashing with null pointer because this will return a null value.</p>

<p>The correct way of fixing this issue would be :  resultp.put(TAG_IMG, data.get(position)); </p>

<pre><code>public class JSONImageViewer extends Activity {

JSONObject jsonobject;
JSONArray jsonarray;
ListViewAdapter adapter;
ProgressDialog mProgressDialog;
ArrayList&lt;HashMap&lt;String, String&gt;&gt; arraylist;

static String TAG_IMG = "CarImageLink";
GridView gridview;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    setContentView(R.layout.activity_main);
    gridview = (GridView) findViewById(R.id.gridview);
    new DownloadJSON().execute();
}

// DownloadJSON AsyncTask
private class DownloadJSON extends AsyncTask&lt;Void, Void, Void&gt; {

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        // Create a progressdialog
        mProgressDialog = new ProgressDialog(JSONImageViewer.this);

        // Set progressdialog message
        mProgressDialog.setMessage("Loading...");
        mProgressDialog.setIndeterminate(false);

        // Show progressdialog
        mProgressDialog.show();
    }

    @Override
    protected Void doInBackground(Void... params) {
        //Create an array
        arraylist = new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();

        //Retrieve JSON Objects from the given URL address
        jsonobject = JSONfunctions
                .getJSONfromURL("......");


        try {
            //Locate the array name in JSON
            jsonarray = jsonobject.getJSONArray("car_images");
            HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
            for (int i = 0; i &lt; jsonarray.length(); i++) {
                jsonobject = jsonarray.getJSONObject(i);

                //Retrieve JSON Object
                map.put("CarImageLink" + i,                        jsonobject.getString("CarImageLink"));

                //Set the JSON Objects into the array
                arraylist.add(map);
            }
        } catch (JSONException e) {
            Log.e("Error", e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    @Override
    protected void onPostExecute(Void args) {

        if (arraylist != null &amp;&amp; arraylist.size() &gt; 0) {
            adapter = new ListViewAdapter(getApplicationContext(), arraylist);

            //Set the adapter to the GridView
            gridview.setAdapter(adapter);
        } else Toast.makeText(getApplicationContext(), "List is null", Toast.LENGTH_SHORT);
        //Close the progressdialog
        mProgressDialog.dismiss();
    }
}

public static class JSONfunctions {

    public static JSONObject getJSONfromURL(String url) {
        InputStream is = null;
        String result = "";
        JSONObject jArray = null;

        //Download JSON data from URL
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(url);
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();

        } catch (Exception e) {
            Log.e("log_tag", "Error in http connection " + e.toString());
        }

        //Convert response to string
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
            Log.e("log_tag", "Error converting result " + e.toString());
        }

        try {

            jArray = new JSONObject(result);
        } catch (JSONException e) {
            Log.e("log_tag", "Error parsing data " + e.toString());
        }

        return jArray;
    }
}

public class ListViewAdapter extends BaseAdapter {

    Context context;
    LayoutInflater inflater;
    ArrayList&lt;HashMap&lt;String, String&gt;&gt; data;
    ImageLoader imageLoader;
    HashMap&lt;String, String&gt; resultp = new HashMap&lt;String, String&gt;();

    public ListViewAdapter(Context context, ArrayList&lt;HashMap&lt;String, String&gt;&gt; arraylist) {
        this.context = context;
        this.data = arraylist;
        imageLoader = new ImageLoader(context);
    }

    @Override
    public int getCount() {
        return data.size();
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    public View getView(final int position, View convertView, ViewGroup parent) {

        ImageView carimg;

        inflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        View itemView = inflater.inflate(R.layout.gridview_item, parent, false);

        //Get the position
        resultp = data.get(position);
        //resultp.put(TAG_IMG,data.get(position).get("CarImageLink"));
        //resultp.put(TAG_IMG,data.get(position).get("CarImageLink))"));
        Log.v("resultp", resultp.toString());
        //Locate the ImageView in gridview_item.xml
        carimg = (ImageView) itemView.findViewById(R.id.car_img);
        //Capture position and set results to the ImageView
        //Passes images URL into ImageLoader.class
        int loader = R.drawable.temp_img;
        int stub_id = loader;
        if (carimg == null) {
            Toast.makeText(getApplicationContext(), "A crash is going to happen due to error in xml", Toast.LENGTH_SHORT);
        }
        if (resultp.get(TAG_IMG) == null) {
            Toast.makeText(getApplicationContext(), "A crash is going to happen due to hashma error", Toast.LENGTH_SHORT).show();
        }
        imageLoader.DisplayImage(resultp.get(TAG_IMG) + position, stub_id, carimg);


        Log.v("resultp e1", (resultp.get(TAG_IMG).toString()));
        //Log.v("carimg", carimg.toString());
        Log.v("resultp e2", resultp.toString());


        //Capture ListView item click
        /*itemView.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                //Get the position
                resultp = data.get(position);
                //resultp.put(TAG_IMG,data.get(position).get("CarImageLink"));

                Intent intent = new Intent(context, SingleItemView.class);

                // Pass all data
                intent.putExtra("CarImageLink", resultp.get(JSONImageViewer.TAG_IMG));

                //Start SingleItemView Class
                context.startActivity(intent);

            }
        });*/
        return itemView;
    }
}

public class ImageLoader {

    MemoryCache memoryCache = new MemoryCache();
    FileCache fileCache;
    private Map&lt;ImageView, String&gt; imageViews = Collections.synchronizedMap(new WeakHashMap&lt;ImageView, String&gt;());
    ExecutorService executorService;

    // Handler to display images in UI thread
    Handler handler = new Handler();

    public ImageLoader(Context context) {
        fileCache = new FileCache(context);
        executorService = Executors.newFixedThreadPool(5);
    }

    int stub_id = R.drawable.temp_img;

    public void DisplayImage(String url, int loader, ImageView imageView) {
        try {

            stub_id = loader;
            imageViews.put(imageView, url);
            Bitmap bitmap = memoryCache.get(url);
            if (bitmap != null) {
                imageView.setImageBitmap(bitmap);
                Log.v("Bitmap 3", bitmap.toString());
            } else {
                queuePhoto(url, imageView);
                imageView.setImageResource(stub_id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void queuePhoto(String url, ImageView imageView) {
        PhotoToLoad p = new PhotoToLoad(url, imageView);
        executorService.submit(new PhotosLoader(p));
    }

    private Bitmap getBitmap(String url) {
        File f = fileCache.getFile(url);

        Bitmap b = decodeFile(f);
        if (b != null) {
            Log.v("bitmap 4", b.toString());
            return b;
        }
        //Download Images from the Internet
        try {
            Bitmap bitmap;
            // Log.v("Bitmap 5", bitmap.toString());
            Uri.Builder uri = Uri.parse("....").buildUpon();
            uri.appendPath(url);
            uri.build();
            Log.v("Build", uri.build().toString());
            Log.v("Uri", uri.toString());

            URL imageUrl = new URL("http://" + "....com" + url);
            Log.v("URL 3", imageUrl.toString());

            HttpURLConnection conn = (HttpURLConnection) imageUrl
                    .openConnection();
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(30000);
            conn.setInstanceFollowRedirects(true);
            InputStream is = conn.getInputStream();
            OutputStream os = new FileOutputStream(f);
            Utils.CopyStream(is, os);
            os.close();
            conn.disconnect();
            bitmap = decodeFile(f);
            //Log.v("bitmap 6", bitmap.toString());
            return bitmap;
        } catch (Throwable ex) {
            ex.printStackTrace();
            if (ex instanceof OutOfMemoryError)
                memoryCache.clear();
            return null;
        }
    }

    //Decodes image and scales it to reduce memory consumption
    private Bitmap decodeFile(File f) {
        try {
            //Decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            FileInputStream stream1 = new FileInputStream(f);
            BitmapFactory.decodeStream(stream1, null, o);
            stream1.close();

            //Find the correct scale value. It should be the power of 2.
            final int REQUIRED_SIZE = 70;
            int width_tmp = o.outWidth, height_tmp = o.outHeight;
            int scale = 1;
            while (true) {
                if (width_tmp / 2 &lt; REQUIRED_SIZE
                        || height_tmp / 2 &lt; REQUIRED_SIZE)
                    break;
                width_tmp /= 2;
                height_tmp /= 2;
                scale *= 2;
            }

            //Decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize = scale;
            FileInputStream stream2 = new FileInputStream(f);
            Bitmap bitmap = BitmapFactory.decodeStream(stream2, null, o2);
            stream2.close();
            Log.v("bitmap 7", bitmap.toString());
            return bitmap;
        } catch (FileNotFoundException e) {
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    //Task for the queue
    private class PhotoToLoad {

        public String url;
        public ImageView imageView;

        public PhotoToLoad(String u, ImageView i) {
            url = u;
            imageView = i;
        }
    }

    class PhotosLoader implements Runnable {
        PhotoToLoad photoToLoad;

        PhotosLoader(PhotoToLoad photoToLoad) {
            this.photoToLoad = photoToLoad;
        }

        @Override
        public void run() {
            try {
                //if (imageViewReused(photoToLoad))
                // return;
                Bitmap bmp = getBitmap(photoToLoad.url);
                Log.v("URL 2", photoToLoad.url.toString());
                Log.v("Bitmap  bmp", bmp.toString());
                memoryCache.put(photoToLoad.url, bmp);

                //if (imageViewReused(photoToLoad))
                //return;
                //BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
                //handler.post(bd);
                //Log.v("bd", bd.toString());

            } catch (Throwable th) {
                th.printStackTrace();
            }
        }
    }

    /* boolean imageViewReused(PhotoToLoad photoToLoad) {
         String tag = imageViews.get(photoToLoad.imageView);
         if (tag == null || !tag.equals(photoToLoad.url))
             return true;
         return false;
     }
   */
             class BitmapDisplayer implements Runnable {
        Bitmap bitmap;
        PhotoToLoad photoToLoad;

        public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
            bitmap = b;
            Log.v("bitmap b", b.toString());
            photoToLoad = p;
        }

        public void run() {
            // if(imageViewReused(photoToLoad)) {
            //Log.v("BITMAP", bitmap.toString());
            // return;
            //}
            Log.v("BITMAP", bitmap.toString());
            if (bitmap != null) {
                photoToLoad.imageView.setImageBitmap(bitmap);
                Log.v("bitmap 2", bitmap.toString());
            } else {
                photoToLoad.imageView.setImageResource(stub_id);
            }
        }
    }


    public void clearCache() {
        memoryCache.clear();
        fileCache.clear();
    }

}

public class MemoryCache {

    private static final String TAG = "MemoryCache";

    //Last argument true for LRU ordering
    private Map&lt;String, Bitmap&gt; cache = Collections
            .synchronizedMap(new LinkedHashMap&lt;String, Bitmap&gt;(10, 1.5f, true));

    //Current allocated size
    private long size = 0;

    //Max memory in bytes
    private long limit = 1000000;

    public MemoryCache() {
        //Use 25% of available heap size
        setLimit(Runtime.getRuntime().maxMemory() / 4);
    }

    public void setLimit(long new_limit) {
        limit = new_limit;
    }

    public Bitmap get(String id) {
        try {
            if (!cache.containsKey(id))
                return null;
            return cache.get(id);
        } catch (NullPointerException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public void put(String id, Bitmap bitmap) {
        try {
            if (cache.containsKey(id))
                size -= getSizeInBytes(cache.get(id));
            cache.put(id, bitmap);
            size += getSizeInBytes(bitmap);
            checkSize();
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }

    private void checkSize() {
        Log.i(TAG, "cache size=" + size + " length=" + cache.size());
        if (size &gt; limit) {

            //Least recently accessed item will be the first one iterated
            Iterator&lt;Map.Entry&lt;String, Bitmap&gt;&gt; iter = cache.entrySet().iterator();

            while (iter.hasNext()) {
                Map.Entry&lt;String, Bitmap&gt; entry = iter.next();
                size -= getSizeInBytes(entry.getValue());
                iter.remove();
                if (size &lt;= limit)
                    break;
            }
            Log.i(TAG, "Clean cache. New size " + cache.size());
        }
    }

    public void clear() {
        try {
            cache.clear();
            size = 0;
        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }
    }

    long getSizeInBytes(Bitmap bitmap) {
        if (bitmap == null)
            return 0;
        return bitmap.getRowBytes() * bitmap.getHeight();
    }
}

public class FileCache {

    private File cacheDir;

    public FileCache(Context context) {

        //Find the dir to save cached images
        if (android.os.Environment.getExternalStorageState().equals(
                android.os.Environment.MEDIA_MOUNTED))
            cacheDir = new File(
                    android.os.Environment.getExternalStorageDirectory(),
                    "");
        else
            cacheDir = context.getCacheDir();
        if (!cacheDir.exists())
            cacheDir.mkdirs();
    }

    public File getFile(String url) {
        String filename = String.valueOf(url.hashCode());
        //String filename = URLEncoder.encode(url);
        File f = new File(cacheDir, filename);
        return f;

    }

    public void clear() {
        File[] files = cacheDir.listFiles();
        if (files == null)
            return;
        for (File f : files)
            f.delete();
    }

}

public static class Utils {
    public static void CopyStream(InputStream is, OutputStream os) {
        final int buffer_size = 1024;
        try {
            byte[] bytes = new byte[buffer_size];
            for (; ; ) {
                int count = is.read(bytes, 0, buffer_size);
                if (count == -1)
                    break;
                os.write(bytes, 0, count);
            }
        } catch (Exception ex) {
        }
    }
}

     /* public class SingleItemView extends Activity {

    String carimg;
    ImageLoader imageLoader = new ImageLoader(this);

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //Get the view from singleitemview.xml
        setContentView(R.layout.singleitemview);

        Intent i = getIntent();
        //Get the result of CarImageLink
        carimg = i.getStringExtra("CarImageLink");
        Log.v("carimg", i.getStringExtra("CarImageLink").toString());

        int loader = R.drawable.temp_img;
        int stub_id = loader;
        //Locate the ImageView in singleitemview.xml
        ImageView img_car = (ImageView) findViewById(R.id.car_img);
        Log.v("Imageview img_car", img_car.toString());

        //Capture position and set results to the ImageView
        //Passes carimg images URL into ImageLoader.class
        imageLoader.DisplayImage(carimg, stub_id, img_car);
    }
   }*/
 }
</code></pre>
