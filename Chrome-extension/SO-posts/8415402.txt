<p>I just implemented something similar to this from List6 of API Demos as well. Mine is working perfectly (all be it I had trouble with having focus from an ImageButton). I used a SimpleCursorAdapter however I suppose you could use a CursorAdapter. I modified your code quite a bit. </p>

<p>Not sure why you also added the View parameter so I took that out.</p>

<pre><code>private ArrayList&lt;Boolean&gt; mExpanded;

@Override
    protected void onListItemClick(ListView l, View v, int position, long id) {
        super.onListItemClick(l, v, position, id);
        ((NotesCursorAdapter) getListAdapter()).toggle(position);
    }
</code></pre>

<p>Your ViewHolder. Pretty simple, just that the constructor receives parameters from your getView.</p>

<pre><code>private class ViewHolder {
private TextView title;
private TextView body;

public ViewHolder(View convertView, boolean expanded) {

title = (TextView) convertView.findViewById(R.id.title);
body = (TextView) convertView.findViewById(R.id.body);

//not sure if you need this...
//body.setVisibility(expanded ? View.VISIBLE : View.GONE);
}

public void setTitle(int position) {
    cursor.moveToPosition(position);
    title.setText(cursor.getString(cursor
        .getColumnIndexOrThrow(PowersDbAdapter.KEY_TITLE)));
}

public void setBody(int position) {
    cursor.moveToPosition(position);
    body.setText(cursor.getString(cursor
                .getColumnIndexOrThrow(PowersDbAdapter.KEY_BODY)));
}

public void setExpanded(boolean expanded) {
    body.setVisibility(expanded ? View.VISIBLE : View.GONE);
    }       
}
</code></pre>

<p>Here is your custom ListAdapter. I am not sure why you wanted to use bindView and newView with a ViewHolder, Android takes care of that with bindView and newViews. But you need to use a ViewHolder in this case so getView is necessary.</p>

<pre><code>private class NotesCursorAdapter extends SimpleCursorAdapter {

private Cursor cursor;
private LayoutInflater inflater;

public NotesCursorAdapter(Context context, int layout, Cursor cursor, String[] from, int[] to) {
    super(context, layout, cursor, from, to);
    this.cursor = cursor;
    inflater = LayoutInflater.from(context);
    mExpanded = new ArrayList&lt;Boolean&gt;();
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder holder;          
    if (convertView == null) {
        convertView = inflater.inflate(R.layout.row, parent, false);

        populateExpanded();

        holder = new ViewHolder(convertView, mExpanded.get(position));

        convertView.setTag(holder);
    }
    else {
        holder = (ViewHolder) convertView.getTag();
    }
        holder.setTitle(position);
        holder.setBody(position);
        holder.setExpanded(mExpanded.get(position));

        return rowView;
}

private void populateExpanded() {
    // We want our hidden TextView to not be expanded initially
    for (int i = 0; i &lt; cursor.getCount(); i++) {
        mExpanded.add(false);
    }
}

public void toggle(int position) {
if (mExpanded.get(position) == false) {
    mExpanded.set(position, true);
}
else {
    mExpanded.set(position, false);
}
    notifyDataSetChanged();
    }
}
</code></pre>

<p>Here is how you can map it with a SimpleCursorAdapter</p>

<pre><code>setListAdapter(new NotesCursorAdapter(MyClass.this, R.layout.row, cursor,
            new String[] { "my_title", "my_body" }, new int[] { R.id.MyTitleTextView, R.id.MyBodyTextView }));
</code></pre>
