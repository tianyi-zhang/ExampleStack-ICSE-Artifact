<p>The valid value of android:fontFamily is defined in /system/etc/system_fonts.xml(4.x) or /system/etc/fonts.xml(5.x). But Device Manufacturer might modify it, so the actual font used by setting fontFamily value depends on the above-mentioned file of the specified device.</p>

<p>In AOSP, the Arial font is valid but must be defined using "arial" not "Arial", for example <strong>android:fontFamily="arial"</strong>. Have a qucik look at Kitkat's system_fonts.xml</p>

<pre><code>    &lt;family&gt;
    &lt;nameset&gt;
        &lt;name&gt;sans-serif&lt;/name&gt;
        &lt;name&gt;arial&lt;/name&gt;
        &lt;name&gt;helvetica&lt;/name&gt;
        &lt;name&gt;tahoma&lt;/name&gt;
        &lt;name&gt;verdana&lt;/name&gt;
    &lt;/nameset&gt;
    &lt;fileset&gt;
        &lt;file&gt;Roboto-Regular.ttf&lt;/file&gt;
        &lt;file&gt;Roboto-Bold.ttf&lt;/file&gt;
        &lt;file&gt;Roboto-Italic.ttf&lt;/file&gt;
        &lt;file&gt;Roboto-BoldItalic.ttf&lt;/file&gt;
    &lt;/fileset&gt;
&lt;/family&gt;
</code></pre>

<p>//////////////////////////////////////////////////////////////////////////</p>

<p>There are three relevant xml-attributes for defining a "font" in layout--<strong>android:fontFamily</strong>, <strong>android:typeface</strong> and <strong>android:textStyle</strong>. The combination of "fontFamily" and "textStyle" or "typeface" and "textStyle" can be used to change the appearance of font in text, so does used alone. Code snippet in <strong>TextView.java</strong> like this:</p>

<pre><code>    private void setTypefaceFromAttrs(String familyName, int typefaceIndex, int styleIndex) {
    Typeface tf = null;
    if (familyName != null) {
        tf = Typeface.create(familyName, styleIndex);
        if (tf != null) {
            setTypeface(tf);
            return;
        }
    }
    switch (typefaceIndex) {
        case SANS:
            tf = Typeface.SANS_SERIF;
            break;

        case SERIF:
            tf = Typeface.SERIF;
            break;

        case MONOSPACE:
            tf = Typeface.MONOSPACE;
            break;
    }
    setTypeface(tf, styleIndex);
}


    public void setTypeface(Typeface tf, int style) {
    if (style &gt; 0) {
        if (tf == null) {
            tf = Typeface.defaultFromStyle(style);
        } else {
            tf = Typeface.create(tf, style);
        }

        setTypeface(tf);
        // now compute what (if any) algorithmic styling is needed
        int typefaceStyle = tf != null ? tf.getStyle() : 0;
        int need = style &amp; ~typefaceStyle;
        mTextPaint.setFakeBoldText((need &amp; Typeface.BOLD) != 0);
        mTextPaint.setTextSkewX((need &amp; Typeface.ITALIC) != 0 ? -0.25f : 0);
    } else {
        mTextPaint.setFakeBoldText(false);
        mTextPaint.setTextSkewX(0);
        setTypeface(tf);
    }
}
</code></pre>

<p>From the code We can see:</p>

<ol>
<li>if "fontFamily" is set, then the "typeface" will be ignored. </li>
<li>"typeface" has standard and limited valid values. In fact, the values are "normal" "sans" "serif" and "monospace", they can be found in system_fonts.xml(4.x) or fonts.xml(5.x). Actually both "normal" and "sans" are the default font of system.</li>
<li>"fontFamily" can be used to set all fonts of build-in fonts, while "typeface"  only provide the typical fonts of "sans-serif" "serif" and "monospace"(the three main category of font type in the world).</li>
<li>When only set "textStyle", We actually set the default font and the specified style. The effective value are "normal" "bold" "italic" and "bold | italic".</li>
</ol>
