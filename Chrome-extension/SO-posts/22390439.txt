<p>OK, since I have solved it, and I know it is kind of hard to get good examples and answers on this subject, I will share the solution here:</p>

<p>Add this line as global declaration:</p>

<pre><code>//Array to hold the correct order of tiles so we can compare..
private ArrayList&lt;Tile&gt; tilesCompleted = new ArrayList&lt;Tile&gt;();
</code></pre>

<p>and change this method:</p>

<pre><code>public void generateTiles(){

    //We create a Node element to hold all our tiles
    tilesNode.setTag(TILE_NODE_TAG);
    addChild(tilesNode);        
    float scalefactor ;   // a value we compute to help scale our tiles
    int useableheight  ;    
    int tileIndex = 0 ;

    //We attempt to calculate the right size for the tiles given the screen size and 
    //space left after adding the status label at the top
    int nextval ;

    //{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};//
    int[] tileNumbers = {12,1,10,2,7,11,4,14,5,0,9,15,8,13,6,3};  //random but solvable sequence of numbers

    //TILE_SQUARE_SIZE = (int) ((screenSize.height  *generalscalefactor)/NUM_ROWS) ;
    int useablewidth = (int) (screenSize.width - statusLabel.getContentSize().width*generalscalefactor ) ;
    useableheight =  (int) (screenSize.height  - 40*generalscalefactor - statusLabel.getContentSize().height * 1.3f*generalscalefactor) ;

    TILE_SQUARE_SIZE = (int) Math.min((useableheight/NUM_ROWS) , (useablewidth/NUM_COLUMNS)) ;

    toppoint = (int) (useableheight  - (TILE_SQUARE_SIZE / 2) + 30*generalscalefactor)   ;
    scalefactor = TILE_SQUARE_SIZE / 125.0f ;

    topleft = (int) ((TILE_SQUARE_SIZE / 2) + 15*generalscalefactor) ;

    for (int j = toppoint ; j &gt; toppoint - (TILE_SQUARE_SIZE * NUM_ROWS); j-= TILE_SQUARE_SIZE){
        for (int i = topleft ; i &lt; (topleft - 5*generalscalefactor) + (TILE_SQUARE_SIZE * NUM_COLUMNS); i+= TILE_SQUARE_SIZE){

            if (tileIndex &gt;= (NUM_ROWS * NUM_COLUMNS)) {
                break ;
            }
            nextval = tileNumbers[tileIndex ];

            //Generate tile by it's number and it's subfolder
            Tile tile = new Tile();
            tile.setIndex(nextval);
            tile.setSprite(CCSprite.sprite(subFolder+"/"+subFolder+"_tile_"+String.valueOf(nextval+1)+".jpg"));
            tiles.add(tile);

                           //This is the solution
            if(tileIndex &gt; 0)
            {
                tile.setPositionX(i);
                tile.setPositionY(j);
                tile.setIndex(tileIndex);
                tilesCompleted.add(tile);
            }
            else
                tilesCompleted.add(tile);
            //CCSprite tile = CCSprite.sprite(subFolder+"/"+subFolder+"_tile_"+String.valueOf(nextval+1)+".jpg");

            CCNodeExt eachNode =  new  CCNodeExt(); 
            eachNode.setContentSize(tile.getSprite().getContentSize());
            //
            //Layout Node based on calculated postion
            eachNode.setPosition(i, j);
            eachNode.setNodeText(nextval + "");

            //Add Tile number
            if(showNumbers == true)
            {
                CCBitmapFontAtlas tileNumber = CCBitmapFontAtlas.bitmapFontAtlas ("00", "bionic.fnt");
                tileNumber.setScale(1.4f);               
                eachNode.setScale(scalefactor);
                eachNode.addChild(tile.getSprite(),1,1);
                tileNumber.setString(nextval + ""); 
                eachNode.addChild(tileNumber,2 );
            }
            else
            {
                eachNode.setScale(scalefactor);
                eachNode.addChild(tile.getSprite(),1,1);
            }


            if( nextval != 0){
                tilesNode.addChild(eachNode,1,nextval);
            }else {
                emptyPosition = CGPoint.ccp(i, j);
            }

            //Add each Node to a HashMap to note its location
            tileIndex++;
        }
    } 

}
</code></pre>

<p>And now change this:</p>

<pre><code>//This method checks if the puzzle has been correctly solved.
public boolean checkCorrect(){
    //CCNode tileNodes = (CCNode) getChildByTag(TILE_NODE_TAG);
    int nodeindex = 0 ;
    boolean result = false;

    int rowindex = 0 ;
    for (int j = toppoint ; j &gt; toppoint - (TILE_SQUARE_SIZE * NUM_ROWS); j-= TILE_SQUARE_SIZE){

        if(nodeindex &gt; 0)
        {
            //Log.d("y", String.valueOf(tilesNode.getChildByTag(nodeindex).getPosition().y));
            //Log.d("J", String.valueOf(tilesCompleted.get(nodeindex).getPositionY()));
        }
        for (int i = topleft ; i &lt; (topleft - 5*generalscalefactor) + (TILE_SQUARE_SIZE * NUM_COLUMNS); i+= TILE_SQUARE_SIZE){
            if(nodeindex &gt; 0)
            {
                //Log.d("x", String.valueOf(tilesNode.getChildByTag(nodeindex).getPosition().x));
                //Log.d("i", String.valueOf(tilesCompleted.get(nodeindex).getPositionX()));
            }
            if(nodeindex&gt;0)
            {
            if(tilesNode.getChildByTag(nodeindex).getPosition().x == tilesCompleted.get(nodeindex).getPositionX()
                    &amp;&amp; tilesNode.getChildByTag(nodeindex).getPosition().y == tilesCompleted.get(nodeindex).getPositionY()){
                //Log.d(String.valueOf(tileNode.getChildByTag(nodeindex).getPosition().x), String.valueOf(tileNode.getChildByTag(nodeindex).getPosition().y));
                //Log.d(String.valueOf(i), String.valueOf(j));
                result = true ; 
                Log.d("Game "+String.valueOf(result), "result");

            }else{ 
                //Log.d("Game "+String.valueOf(false), "result");
                return false ;
            }
            }
            nodeindex++ ;
            //Log.d("nodeindex "+String.valueOf(nodeindex), "index total");
            if(nodeindex == (NUM_ROWS * NUM_COLUMNS)){
                Log.d("Game "+String.valueOf(result), "result");
                return result ;
            }
        }


    }
    rowindex = 0 ;
    Log.d("Game "+String.valueOf(result), "result");
    return result ;
}
</code></pre>

<p>}</p>

<p>GOOD LUCK :)</p>
