<ol>
<li>I'm not sure but I think so. And it's hard to me to find this
functionality in the sources.</li>
<li><p>There is a function in PowerManager.java goToSleep(time). This
function simply calls method of PowerManagerService goToSleepLocked:</p>

<pre><code>private void goToSleepLocked(long time, int reason) {

if (mLastEventTime &lt;= time) {
mLastEventTime = time;
// cancel all of the wake locks
mWakeLockState = SCREEN_OFF;
int N = mLocks.size();
int numCleared = 0;
boolean proxLock = false;

for (int i=0; i&lt;N; i++) {
    WakeLock wl = mLocks.get(i);
    if (isScreenLock(wl.flags)) {
        if (((wl.flags &amp; LOCK_MASK) == PowerManager.PROXIMITY_SCREEN_OFF_WAKE_LOCK)
             &amp;&amp; reason == WindowManagerPolicy.OFF_BECAUSE_OF_PROX_SENSOR) {
        proxLock = true;
        } else {
            mLocks.get(i).activated = false;
            numCleared++;
        }
    }
}
if (!proxLock) {
    mProxIgnoredBecauseScreenTurnedOff = true;
    if (mDebugProximitySensor) {
        Slog.d(TAG, "setting mProxIgnoredBecauseScreenTurnedOff");
    }
}
EventLog.writeEvent(EventLogTags.POWER_SLEEP_REQUESTED, numCleared);
mStillNeedSleepNotification = true;
mUserState = SCREEN_OFF;
setPowerState(SCREEN_OFF, false, reason);
cancelTimerLocked();
}
}
</code></pre></li>
</ol>

<p>So you can see that all wakelocks are shutdowned in this method.</p>

<p>The method goToSleep can be called only by system components (protected with signature permission). And I think that it is called during the press of your power button. So it rewrites all the wakelocks.</p>
