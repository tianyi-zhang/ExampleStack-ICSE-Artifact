<p>Here's updated code that uses HashMap&lt;Node,Node&gt;. I also changed the equals() method to include the count field but left it out of the hashCode() method. This successfully creates a collision and if you look at the HashMap with a debugger you can see the list it is building in the bucket that had a collision:</p>

<pre><code>public class HashMapTest {

public static void main(String[] args) {
    HashMapTest test = new HashMapTest();
    test.execute();
}

public void execute() {
    HashMap&lt;Node, Node&gt; nodeMap = new HashMap&lt;Node, Node&gt;();
    Node node1 = new Node("data1", 1);
    Node node2 = new Node("data2", 2);
    Node node3 = new Node("data1", 2);
    Node node4 = new Node("data1", 1);

    System.out.println("node1 hash: " + node1.hashCode());
    System.out.println("node2 hash: " + node2.hashCode());
    System.out.println("node3 hash: " + node3.hashCode());
    System.out.println("node1 hash == node2 hash? " + (node1.hashCode() == node2.hashCode() ? "true" : "false"));
    System.out.println("node2 hash == node3 hash? " + (node2.hashCode() == node3.hashCode() ? "true" : "false"));
    System.out.println("node1 hash == node3 hash? " + (node1.hashCode() == node3.hashCode() ? "true" : "false"));
    System.out.println("node1.equals(node2)? " + (node1.equals(node2) ? "true" : "false"));
    System.out.println("node2.equals(node3)? " + (node2.equals(node3) ? "true" : "false"));
    System.out.println("node1.equals(node3)? " + (node1.equals(node3) ? "true" : "false"));
    System.out.println("");

    nodeMap.put(node1, node1);
    System.out.println("added node1 to hash map");
    System.out.println("hash map size: " + nodeMap.size());
    System.out.println("hash map entry set size: " + nodeMap.entrySet().size());
    System.out.println("hash map contains node1? " + (nodeMap.containsValue(node1) ? "true" : "false"));
    System.out.println("hash map contains node2? " + (nodeMap.containsValue(node2) ? "true" : "false"));
    System.out.println("hash map contains node3? " + (nodeMap.containsValue(node3) ? "true" : "false"));
    System.out.println("node1's count from map: " + nodeMap.get(node1).getCount());
    System.out.println("");

    nodeMap.put(node2, node2);
    System.out.println("added node2 to hash map");
    System.out.println("hash map size: " + nodeMap.size());
    System.out.println("hash map entry set size: " + nodeMap.entrySet().size());
    System.out.println("hash map contains node1? " + (nodeMap.containsValue(node1) ? "true" : "false"));
    System.out.println("hash map contains node2? " + (nodeMap.containsValue(node2) ? "true" : "false"));
    System.out.println("hash map contains node3? " + (nodeMap.containsValue(node3) ? "true" : "false"));
    System.out.println("node1's count from map: " + nodeMap.get(node1).getCount());
    System.out.println("");

    // note that if node4 is used then it replaces the value that stored node1
    nodeMap.put(node3, node3);
    System.out.println("added node3 to hash map");
    System.out.println("hash map size: " + nodeMap.size());
    System.out.println("hash map entry set size: " + nodeMap.entrySet().size());
    System.out.println("hash map contains node1? " + (nodeMap.containsValue(node1) ? "true" : "false"));
    System.out.println("hash map contains node2? " + (nodeMap.containsValue(node2) ? "true" : "false"));
    System.out.println("hash map contains node3? " + (nodeMap.containsValue(node3) ? "true" : "false"));
    System.out.println("node1's count from map: " + nodeMap.get(node1).getCount());
}

protected class Node {

    private String data;

    private Integer count;

    public Node(String data, Integer count) {
        this.data = data;
        this.count = count;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + getOuterType().hashCode();
        result = prime * result + ((data == null) ? 0 : data.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Node other = (Node) obj;
        if (!getOuterType().equals(other.getOuterType()))
            return false;
        if (count == null) {
            if (other.count != null)
                return false;
        }
        else
            if (!count.equals(other.count))
                return false;
        if (data == null) {
            if (other.data != null)
                return false;
        }
        else
            if (!data.equals(other.data))
                return false;
        return true;
    }


    public String getData() {
        return data;
    }


    public void setData(String data) {
        this.data = data;
    }


    public Integer getCount() {
        return count;
    }


    public void setCount(Integer count) {
        this.count = count;
    }

    private HashMapTest getOuterType() {
        return HashMapTest.this;
    }

}
</code></pre>

<p>}</p>

<p>It outputs:</p>

<pre><code>node1 hash: 1077170390
node2 hash: 1077170391
node3 hash: 1077170390
node1 hash == node2 hash? false
node2 hash == node3 hash? false
node1 hash == node3 hash? true
node1.equals(node2)? false
node2.equals(node3)? false
node1.equals(node3)? false

added node1 to hash map
hash map size: 1
hash map entry set size: 1
hash map contains node1? true
hash map contains node2? false
hash map contains node3? false
node1's count from map: 1

added node2 to hash map
hash map size: 2
hash map entry set size: 2
hash map contains node1? true
hash map contains node2? true
hash map contains node3? false
node1's count from map: 1

added node3 to hash map
hash map size: 3
hash map entry set size: 3
hash map contains node1? true
hash map contains node2? true
hash map contains node3? true
node1's count from map: 1
</code></pre>
