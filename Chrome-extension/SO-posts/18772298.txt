<p>Computes the number of primes less than or equal to N using
   the Sieve of Eratosthenes.</p>

<p>% java PrimeSieve 25
   The number of primes &lt;= 25 is 9</p>

<p>% java PrimeSieve 100
   The number of primes &lt;= 100 is 25</p>

<p>% java -Xmx100m PrimeSieve 100000000
   The number of primes &lt;= 100000000 is 5761455</p>

<p>% java PrimeSieve -Xmx1100m 1000000000 
   The number of primes &lt;= 1000000000 is 50847534</p>

<p>The 110MB and 1100MB is the amount of memory you want to allocate
   to the program. If your computer has less, make this number smaller,
   but it may prevent you from solving the problem for very large
   values of N.</p>

<pre><code>class PrimeSieve {
    public static void main(String[] args) { 
        int N = Integer.parseInt(args[0]);

        // initially assume all integers are prime
        boolean[] isPrime = new boolean[N + 1];
        for (int i = 2; i &lt;= N; i++) {
            isPrime[i] = true;
        }

        // mark non-primes &lt;= N using Sieve of Eratosthenes
        for (int i = 2; i*i &lt;= N; i++) {

            // if i is prime, then mark multiples of i as nonprime
            // suffices to consider mutiples i, i+1, ..., N/i
            if (isPrime[i]) {
                for (int j = i; i*j &lt;= N; j++) {
                    isPrime[i*j] = false;
                }
            }
        }

        // count primes
        int primes = 0;
        for (int i = 2; i &lt;= N; i++) {
            if (isPrime[i]){ primes++; System.out.print(i+", ");}
        }
        System.out.println("\nThe number of primes &lt;= " + N + " is " + primes);
    }
}
</code></pre>
