<p>You shouldnt expect an array of views from this method, since the method signature itself tells that it will return a single view.</p>

<pre><code>public final View findViewWithTag (Object tag) 
</code></pre>

<p>However, what you may do is to get your layout as <code>ViewGroup</code> and then iterate through all the child views to find out your desired view by doing a look-up on their tag. For example:</p>

<pre><code>/**
 * Get all the views which matches the given Tag recursively
 * @param root parent view. for e.g. Layouts
 * @param tag tag to look for
 * @return List of views
 */
public static List&lt;View&gt; findViewWithTagRecursively(ViewGroup root, Object tag){
    List&lt;View&gt; allViews = new ArrayList&lt;View&gt;();

    final int childCount = root.getChildCount();
    for(int i=0; i&lt;childCount; i++){
        final View childView = root.getChildAt(i);

        if(childView instanceof ViewGroup){
          allViews.addAll(findViewWithTagRecursively((ViewGroup)childView, tag));
        }
        else{
            final Object tagView = childView.getTag();
            if(tagView != null &amp;&amp; tagView.equals(tag))
                allViews.add(childView);
        }
    }

    return allViews;
}
</code></pre>
