<p>Assuming you're asking if there's a nicer way of expanding/hiding an area with input, I'll share my implementation using your variables as best I can. I'll make some necessary notes as well. </p>

<pre><code>//consider changing imageButtonToggle to a container view with an image in it
//in this example I'll use carrotImage as the image contained within imageButtonToggle
//formContainer contains all the views you're toggling from GONE to VISIBLE.
imageButtonToggle.setOnClickListener(new OnClickListener() {

        @Override
        public void onClick(View v) {
                if (!isExpanded) {
                    ViewAnimationHelper
                            .expand(formContainer, 300, false);
                } else {
                    ViewAnimationHelper.collapse(formContainer, 300);
                }

                carrotImage.animate().rotation(ROTATION_COUNT);

                ROTATION_COUNT += 180f;
                //Silly check.. but better safe than sorry.
                if (ROTATION_COUNT &gt;= Float.MAX_VALUE)
                    ROTATION_COUNT = 0f;

                isExpanded= !isExpanded;
            }
    });


public class ViewAnimationHelper {

/**
 * Easy way to expand a given view after measuring with
 * v.measure(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
 * 
 * @param v
 * @param duration
 */
public static void expand(final View v, int duration,
        boolean bStartFromZeroHeight) {
    v.measure(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
    final int targetHeight = v.getMeasuredHeight();

    if (bStartFromZeroHeight)
        v.getLayoutParams().height = 0;

    v.setVisibility(View.VISIBLE);
    Animation a = new Animation() {
        @Override
        protected void applyTransformation(float interpolatedTime,
                Transformation t) {
            v.getLayoutParams().height = interpolatedTime == 1 ? LayoutParams.WRAP_CONTENT
                    : (int) (targetHeight * interpolatedTime);
            v.requestLayout();
        }

        @Override
        public boolean willChangeBounds() {
            return true;
        }
    };

    // 1dp/ms
    a.setDuration(duration);
    v.startAnimation(a);
}

/**
 * Easy way to just collapse any given view and any given speed
 * 
 * @param v
 * @param duration
 */
public static void collapse(final View v, int duration) {
    final int initialHeight = v.getMeasuredHeight();

    Animation a = new Animation() {
        @Override
        protected void applyTransformation(float interpolatedTime,
                Transformation t) {
            if (interpolatedTime == 1) {
                v.setVisibility(View.GONE);
            } else {
                v.getLayoutParams().height = initialHeight
                        - (int) (initialHeight * interpolatedTime);
                v.requestLayout();
            }
        }

        @Override
        public boolean willChangeBounds() {
            return true;
        }
    };

    // 1dp/ms
    a.setDuration(duration);
    v.startAnimation(a);
}
}
</code></pre>
