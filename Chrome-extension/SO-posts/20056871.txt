<p>Looking at the source, it appears that the default implementation of <code>skip()</code> is actually reading through (and discarding) the stream content until it reaches the target position:</p>

<pre><code>public long skip(long n) throws IOException {
    long remaining = n;
    int nr;

    if (n &lt;= 0) {
        return 0;
    }

    int size = (int)Math.min(MAX_SKIP_BUFFER_SIZE, remaining);
    byte[] skipBuffer = new byte[size];
    while (remaining &gt; 0) {
        nr = read(skipBuffer, 0, (int)Math.min(size, remaining));
        if (nr &lt; 0) {
            break;
        }
        remaining -= nr;
    }

    return n - remaining;
}
</code></pre>

<p>The <code>SeekableByteChannel#position()</code> method probably just updates an offset pointer, which doesn't actually require any I/O.  Presumably, <code>FileInputStream</code> overrides the <code>skip()</code> method with a similar optimization.  The documentation supports this theory:</p>

<blockquote>
  <p>This method may skip more bytes than are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.</p>
</blockquote>

<p>On platter disks or network storage, this could have a significant impact.  </p>
