<p>I figured out a way to do this:</p>

<pre><code>// Convert RGB to CMYK w/o alpha
public static byte[] RGB2CMYK(ICC_ColorSpace cmykColorSpace, int[] rgb, int imageWidth, int imageHeight, boolean hasAlpha) {
    DataBuffer db = new DataBufferInt(rgb, rgb.length);
    int[] bandMasks = new int[]{0x00ff0000, 0x0000ff00, 0x000000ff};
    ColorSpace sRGB = ColorSpace.getInstance(ColorSpace.CS_sRGB);
    ColorConvertOp cco = new ColorConvertOp(sRGB, cmykColorSpace, null);
    ColorModel cm = null;
    WritableRaster cmykRaster = null;       
    if(hasAlpha) {
        cm = ColorModel.getRGBdefault();
        bandMasks = new int[]{0x00ff0000, 0x0000ff00, 0x000000ff, 0xff000000};  
    } else 
        cm = new DirectColorModel(24, 0x00ff0000, 0x0000ff00, 0x000000ff);
    WritableRaster raster = Raster.createPackedRaster(db, imageWidth, imageHeight, imageWidth, bandMasks, null);
    BufferedImage rgbImage = new BufferedImage(cm, raster, false, null);
    BufferedImage cmykImage = cco.filter(rgbImage, null);
    cmykRaster = cmykImage.getRaster();

    return (byte[])cmykRaster.getDataElements(0, 0, imageWidth, imageHeight, null);
}
</code></pre>

<p>I also found out it's <strong>much faster</strong> to do filter on a BufferedImage instead of a Raster. Might be some hardware acceleration.</p>
