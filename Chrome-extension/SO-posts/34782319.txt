<p>One solution is to keep attendance records in a Set; this has the same effect as a constraint (because .equals() uses the three key fields which the constraint is based on - Date, studentId, classId).  Use the 'contains' method to validate duplicate entries.  It is important to note that Date must not contain the time.  The details follow:</p>

<pre><code>public class Attendance {

private Date date;   // MUST NOT CONTAIN TIME!
private String studentId;
private String classId;
private String remark;  // Absent, present, late

public Attendance(Date date, String studentId, String classId, String remark) {
    super();
    this.date = date;
    this.studentId = studentId;
    this.classId = classId;
    this.remark = remark;
}

public Date getDate() {
    return date;
}
public void setDate(Date date) {
    this.date = date;
}
public String getStudentId() {
    return studentId;
}
public void setStudentId(String studentId) {
    this.studentId = studentId;
}
public String getClassId() {
    return classId;
}
public void setClassId(String classId) {
    this.classId = classId;
}
public String getRemark() {
    return remark;
}
public void setRemark(String remark) {
    this.remark = remark;
}
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((classId == null) ? 0 : classId.hashCode());
    result = prime * result + ((date == null) ? 0 : date.hashCode());
    result = prime * result + ((studentId == null) ? 0 : studentId.hashCode());
    return result;
}
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Attendance other = (Attendance) obj;
    if (classId == null) {
        if (other.classId != null)
            return false;
    } else if (!classId.equals(other.classId))
        return false;
    if (date == null) {
        if (other.date != null)
            return false;
    } else if (!date.equals(other.date))
        return false;
    if (studentId == null) {
        if (other.studentId != null)
            return false;
    } else if (!studentId.equals(other.studentId))
        return false;
    return true;
}

}
</code></pre>

<p>Now here is how it works in principle. You build an Attendance record, and see if exists (Set.contains) in the set.  If it does, flag it.  If not, add.  If your records are all in a file, you need to read that file into the Set, but presumably you can manage the set in cache?</p>

<pre><code>public class Tracker {

public static void main(String[] args) {

Set&lt;Attendance&gt; attendance = new HashSet&lt;Attendance&gt;();

Date jan14 = DateTimeUtils.convertStringToDate("2016-01-14"); // A helper class of mine to strip out any time value
String student1 = "S142";
String student2 = "S143";
String classId1 = "A10";
String classId2 = "A11";

Attendance a1 = new Attendance(jan14, student1, classId1, "Present");
Attendance a2 = new Attendance(jan14, student2, classId1, "Present");
Attendance a3 = new Attendance(jan14, student1, classId1, "Present");
Attendance a4 = new Attendance(jan14, student2, classId1, "Present");

attendance.add(a1);   // Add record to seed the Set
attendance.add(a2);   // Add another

System.out.println(attendance.contains(a3)); // True!

}
</code></pre>
