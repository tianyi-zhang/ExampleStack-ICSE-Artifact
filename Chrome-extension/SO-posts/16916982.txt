<p>For your first question: <code>AndroidGame</code> is an <em>abstract</em> class. This means it doesn't have to implement all methods of <code>Game</code>, as long as one of the classes extending <code>AndroidGame</code> does this. As you can see from the code, this is done in <code>MrNomGame</code>:</p>

<pre><code>public class MrNomGame extends AndroidGame {
    public Screen getStartScreen() {
        return new LoadingScreen(this); 
    }
} 
</code></pre>

<p>Now for your big question:</p>

<p>In <code>onCreate</code>, a renderer is created:</p>

<pre><code>renderView = new AndroidFastRenderView(this, frameBuffer);
</code></pre>

<p>If you have a look at that class, you see that <code>onResume</code> creates a new thread that runs the following code:</p>

<pre><code>public void run() {
    Rect dstRect = new Rect();
    long startTime = System.nanoTime();
    while(running) {  
        if(!holder.getSurface().isValid())
            continue;           

        float deltaTime = (System.nanoTime()-startTime) / 1000000000.0f;
        startTime = System.nanoTime();

        game.getCurrentScreen().update(deltaTime);
        game.getCurrentScreen().present(deltaTime);

        Canvas canvas = holder.lockCanvas();
        canvas.getClipBounds(dstRect);
        canvas.drawBitmap(framebuffer, null, dstRect, null);
        holder.unlockCanvasAndPost(canvas);
    }
}
</code></pre>

<p>So, it repetitively calls <code>update</code> on the current screen, which is the instance of <code>LoadingScreen</code>.</p>
