<p>See this answer - <a href="http://stackoverflow.com/questions/16783177/set-expiration-policy-for-cache-using-googles-volley">Set expiration policy for cache using Google&#39;s Volley</a></p>

<p>This means Volley decides whether to cache response or not based only on headers "Cache-Control" and then "Expires", "maxAge".</p>

<p>What you could do is change this method
<code>com.android.volley.toolbox.HttpHeaderParser.parseCacheHeaders(NetworkResponse response)</code>
and ignore these headers, set <code>entry.softTtl</code> and <code>entry.ttl</code> fields to whatever value works for you and use your method in your request class. Here is an example:</p>

<pre><code>/**
 * Extracts a {@link Cache.Entry} from a {@link NetworkResponse}.
 * Cache-control headers are ignored. SoftTtl == 3 mins, ttl == 24 hours.
 * @param response The network response to parse headers from
 * @return a cache entry for the given response, or null if the response is not cacheable.
 */
public static Cache.Entry parseIgnoreCacheHeaders(NetworkResponse response) {
    long now = System.currentTimeMillis();

    Map&lt;String, String&gt; headers = response.headers;
    long serverDate = 0;
    String serverEtag = null;
    String headerValue;

    headerValue = headers.get("Date");
    if (headerValue != null) {
        serverDate = HttpHeaderParser.parseDateAsEpoch(headerValue);
    }

    serverEtag = headers.get("ETag");

    final long cacheHitButRefreshed = 3 * 60 * 1000; // in 3 minutes cache will be hit, but also refreshed on background
    final long cacheExpired = 24 * 60 * 60 * 1000; // in 24 hours this cache entry expires completely
    final long softExpire = now + cacheHitButRefreshed;
    final long ttl = now + cacheExpired;

    Cache.Entry entry = new Cache.Entry();
    entry.data = response.data;
    entry.etag = serverEtag;
    entry.softTtl = softExpire;
    entry.ttl = ttl;
    entry.serverDate = serverDate;
    entry.responseHeaders = headers;

    return entry;
}
</code></pre>

<p>Use this method in your Request class like this:</p>

<pre><code>public class MyRequest extends com.android.volley.Request&lt;MyResponse&gt; {

    ...

    @Override
    protected Response&lt;MyResponse&gt; parseNetworkResponse(NetworkResponse response) {
        String jsonString = new String(response.data);
        MyResponse MyResponse = gson.fromJson(jsonString, MyResponse.class);
        return Response.success(MyResponse, HttpHeaderParser.parseIgnoreCacheHeaders(response));
    }

}
</code></pre>
