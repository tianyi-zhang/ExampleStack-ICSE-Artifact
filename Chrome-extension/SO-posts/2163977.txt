<p>Check ImageViewTouchBase in the Android source code's Camera app; its "zoomTo" method does this:</p>

<pre><code>protected void zoomTo(float scale, float centerX, float centerY) {
    if (scale &gt; mMaxZoom) {
        scale = mMaxZoom;
    }

    float oldScale = getScale();
    float deltaScale = scale / oldScale;

    mSuppMatrix.postScale(deltaScale, deltaScale, centerX, centerY);
    setImageMatrix(getImageViewMatrix());
    center(true, true);
}
</code></pre>

<p>That center method is probably the bit you'll really care about:</p>

<pre><code>    protected void center(boolean horizontal, boolean vertical) {
    if (mBitmapDisplayed.getBitmap() == null) {
        return;
    }

    Matrix m = getImageViewMatrix();

    RectF rect = new RectF(0, 0,
            mBitmapDisplayed.getBitmap().getWidth(),
            mBitmapDisplayed.getBitmap().getHeight());

    m.mapRect(rect);

    float height = rect.height();
    float width  = rect.width();

    float deltaX = 0, deltaY = 0;

    if (vertical) {
        int viewHeight = getHeight();
        if (height &lt; viewHeight) {
            deltaY = (viewHeight - height) / 2 - rect.top;
        } else if (rect.top &gt; 0) {
            deltaY = -rect.top;
        } else if (rect.bottom &lt; viewHeight) {
            deltaY = getHeight() - rect.bottom;
        }
    }

    if (horizontal) {
        int viewWidth = getWidth();
        if (width &lt; viewWidth) {
            deltaX = (viewWidth - width) / 2 - rect.left;
        } else if (rect.left &gt; 0) {
            deltaX = -rect.left;
        } else if (rect.right &lt; viewWidth) {
            deltaX = viewWidth - rect.right;
        }
    }

    postTranslate(deltaX, deltaY);
    setImageMatrix(getImageViewMatrix());
}
</code></pre>
