<p><strong>I have found the solution to the Question I had asked above.</strong></p>

<p>Apparently there is a simple way of allowing the files from a particular folder to not show up in your app...</p>

<p>The mistake that I did earlier was that I used <code>Environment.getExternalStorageDirectory();</code> to write all the app files directly to sd card, and they showed up in my List.</p>

<p>I had to use <code>Context.getExternalFilesDir("FolderName");</code> and the files now do not show up in the List, the reason being, the folder now is local to your app and cannot be accessed by the Media.</p>

<p>Please read this full Java documentation of getExternalFilesDir to get yourself ACQUAINTED with the class. </p>

<p><strong><code>public File getExternalFilesDir</code></strong> (String type) </p>

<p>Since: API Level 8 </p>

<p>Returns the absolute path to the directory on the external filesystem (that is somewhere on Environment.getExternalStorageDirectory()) where the application can place persistent files it owns. <strong>These files are private to the applications, and not typically visible to the user as media.</strong> </p>

<p><strong>This is like getFilesDir() in that these files will be deleted when the application is uninstalled</strong>, however there are some important differences: </p>

<p>External files are not always available: they will disappear if the user mounts the external storage on a computer or removes it. See the APIs on Environment for information in the storage state. 
There is no security enforced with these files. All applications can read and write files placed here. 
Here is an example of typical code to manipulate a file in an application's private storage:</p>

<pre><code>void createExternalStoragePrivateFile() {
    // Create a path where we will place our private file on external
    // storage.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");

try {
    // Very simple code to copy a picture from the application's
    // resource into the external file.  Note that this code does
    // no error checking, and assumes the picture is small (does not
    // try to copy it in chunks).  Note that if external storage is
    // not currently mounted this will silently fail.
    InputStream is = getResources().openRawResource(R.drawable.balloons);
    OutputStream os = new FileOutputStream(file);
    byte[] data = new byte[is.available()];
    is.read(data);
    os.write(data);
    is.close();
    os.close();
} catch (IOException e) {
    // Unable to create file, likely because external storage is
    // not currently mounted.
    Log.w("ExternalStorage", "Error writing " + file, e);
}
}

void deleteExternalStoragePrivateFile() {
    // Get path for the file on external storage.  If external
    // storage is not currently mounted this will fail.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");
    if (file != null) {
        file.delete();
    }
}

boolean hasExternalStoragePrivateFile() {
    // Get path for the file on external storage.  If external
    // storage is not currently mounted this will fail.
    File file = new File(getExternalFilesDir(null), "DemoFile.jpg");
    if (file != null) {
        return file.exists();
    }
    return false;
}
</code></pre>

<p>If you supply a non-null type to this function, the returned file will be a path to a sub-directory of the given type. Though these files are not automatically scanned by the media scanner, you can explicitly add them to the media database with <code>MediaScannerConnection.scanFile</code>. Note that this is not the same as <code>Environment.getExternalStoragePublicDirectory()</code>, which provides directories of media shared by all applications. The directories returned here are owned by the application, and their contents will be removed when the application is uninstalled. Unlike Environment.getExternalStoragePublicDirectory(), the directory returned here will be automatically created for you. </p>

<p>Here is an example of typical code to manipulate a picture in an application's private storage and add it to the media database:</p>

<pre><code>void createExternalStoragePrivatePicture() {
    // Create a path where we will place our picture in our own private
    // pictures directory.  Note that we don't really need to place a
    // picture in DIRECTORY_PICTURES, since the media scanner will see
    // all media in these directories; this may be useful with other
    // media types such as DIRECTORY_MUSIC however to help it classify
    // your media for display to the user.
    File path = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
    File file = new File(path, "DemoPicture.jpg");
try {
    // Very simple code to copy a picture from the application's
    // resource into the external file.  Note that this code does
    // no error checking, and assumes the picture is small (does not
    // try to copy it in chunks).  Note that if external storage is
    // not currently mounted this will silently fail.
    InputStream is = getResources().openRawResource(R.drawable.balloons);
    OutputStream os = new FileOutputStream(file);
    byte[] data = new byte[is.available()];
    is.read(data);
    os.write(data);
    is.close();
    os.close();

    // Tell the media scanner about the new file so that it is
    // immediately available to the user.
    MediaScannerConnection.scanFile(this,
            new String[] { file.toString() }, null,
            new MediaScannerConnection.OnScanCompletedListener() {
        public void onScanCompleted(String path, Uri uri) {
            Log.i("ExternalStorage", "Scanned " + path + ":");
            Log.i("ExternalStorage", "-&gt; uri=" + uri);
        }
    });
} catch (IOException e) {
    // Unable to create file, likely because external storage is
    // not currently mounted.
    Log.w("ExternalStorage", "Error writing " + file, e);
}
}

void deleteExternalStoragePrivatePicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory and delete the file.  If external
    // storage is not currently mounted this will fail.
    File path = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
    if (path != null) {
        File file = new File(path, "DemoPicture.jpg");
        file.delete();
    }
}

boolean hasExternalStoragePrivatePicture() {
    // Create a path where we will place our picture in the user's
    // public pictures directory and check if the file exists.  If
    // external storage is not currently mounted this will think the
    // picture doesn't exist.
    File path = getExternalFilesDir(Environment.DIRECTORY_PICTURES);
    if (path != null) {
        File file = new File(path, "DemoPicture.jpg");
        return file.exists();
    }
    return false;
}
</code></pre>

<p>Parameters
type  The type of files directory to return. May be null for the root of the files directory or one of the following Environment constants for a subdirectory: DIRECTORY_MUSIC, DIRECTORY_PODCASTS, DIRECTORY_RINGTONES, DIRECTORY_ALARMS, DIRECTORY_NOTIFICATIONS, DIRECTORY_PICTURES, or DIRECTORY_MOVIES. </p>

<p>Returns
Returns the path of the directory holding application files on external storage. Returns null if external storage is not currently mounted so it could not ensure the path exists; you will need to call this method again when it is available.</p>
