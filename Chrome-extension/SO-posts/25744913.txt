<p>The problem here is in performFiltering.</p>

<p>You have defined filterItems in that method as </p>

<pre><code>ArrayList&lt;String&gt; filterItems = new ArrayList&lt;String&gt;()
</code></pre>

<p>and you later add the filteritems to the filter result, like this:</p>

<pre><code>                result.count = filterItems.size();
                result.values = filterItems;
</code></pre>

<p>(where result is of type FilterResults). </p>

<p>However, later you cast the value from the filterResults to be of type List &lt; Company > in publishResults:</p>

<pre><code>List&lt;Company&gt; filtered = (List&lt;Company&gt;) results.values;
</code></pre>

<p>This causes a runtime exception in doInBackground, when the runtime system discovers that the object that you passed it, purporting to be a List &lt; Company > is actually a List &lt; String ></p>

<p>The solution to your problem is to change filterItems to be a List of Company, not String,
and to add the mItems[i] element to it when the company name matches the constraintStr in the loop inside performFiltering.</p>

<p>For instance: </p>

<pre><code>    protected FilterResults performFiltering(CharSequence constraint) {
        // NOTE: this function is *always* called from a background thread,
        // and
        // not the UI thread.
        String constraintStr = constraint.toString().toLowerCase();
        FilterResults result = new FilterResults();

        if (constraint != null &amp;&amp; constraint.toString().length() &gt; 0) {
            ArrayList&lt;Company&gt; filterItems = new ArrayList&lt;Company&gt;();

            synchronized (this) {
                for (int i = 0; i &lt; mItems.size(); i++) {
                    Company company=mItems.get(i);
                    String companyName= company.companyName;
                    if (companyName.toLowerCase().startsWith(constraintStr)) {
                        filterItems.add(company);
                    }
                }
                result.count = filterItems.size();
                result.values = filterItems;
            }
        } else {
            synchronized (this) {
                result.count = mItems.size();
                result.values = mItems;
            }
        }
        return result;
    }
</code></pre>
