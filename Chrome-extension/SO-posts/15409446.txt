<p>It seems impossible without little hacking (i.e. accessing private fields of the ClassLoader class)</p>

<p>This <a href="http://fahdshariff.blogspot.be/2011/08/changing-java-library-path-at-runtime.html">blog</a> provide 2 ways of doing it.</p>

<p>For the record, here is the short version.</p>

<p><strong>Option 1:</strong> fully replace java.library.path with the new value)</p>

<pre><code>public static void setLibraryPath(String path) throws Exception {
    System.setProperty("java.library.path", path);

    //set sys_paths to null so that java.library.path will be reevalueted next time it is needed
    final Field sysPathsField = ClassLoader.class.getDeclaredField("sys_paths");
    sysPathsField.setAccessible(true);
    sysPathsField.set(null, null);
}
</code></pre>

<p><strong>Option 2:</strong> add a new path to the current java.library.path</p>

<pre><code>/**
* Adds the specified path to the java library path
*
* @param pathToAdd the path to add
* @throws Exception
*/
public static void addLibraryPath(String pathToAdd) throws Exception{
    final Field usrPathsField = ClassLoader.class.getDeclaredField("usr_paths");
    usrPathsField.setAccessible(true);

    //get array of paths
    final String[] paths = (String[])usrPathsField.get(null);

    //check if the path to add is already present
    for(String path : paths) {
        if(path.equals(pathToAdd)) {
            return;
        }
    }

    //add the new path
    final String[] newPaths = Arrays.copyOf(paths, paths.length + 1);
    newPaths[newPaths.length-1] = pathToAdd;
    usrPathsField.set(null, newPaths);
}
</code></pre>
