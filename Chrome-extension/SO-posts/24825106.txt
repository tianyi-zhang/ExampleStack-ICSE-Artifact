<p>As I mentioned in the comment you can use custom baseadapter for your gridview and take the number of images as an argument in the constructor of the adapter class. Below is the code snippet that you can use to achieve this.</p>

<p><b>Custom BaseAdapter</b></p>

<pre><code>public class Adapter extends BaseAdapter {

private final Context context;
private final LayoutInflater inflater;
private final int numbers;

public Adapter(Context context, int numberOfImages) {
    this.context = context;
    this.numbers = numberOfImages;
    this.inflater = (LayoutInflater) this.context
            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

}

@Override
public int getCount() {
    //You need to return the numberOfImages here for 
    //the adapter to determine how many view you need to create.
    return numbers;
}

private class viewHolder {
    ImageView image;
    TextView image_desc;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {

    viewHolder holder;

    if (convertView == null) {
        convertView = inflater.inflate(R.layout.grid_item, null);
        holder = new viewHolder();
        holder.image = (ImageView) convertView.findViewById(R.id.image);
        holder.image_desc = (TextView) convertView
                .findViewById(R.id.img_desc);
        convertView.setTag(holder);
    }
    holder = (viewHolder) convertView.getTag();
    if (position % 2 == 0) {
        holder.image.setImageResource(R.drawable.ic_action_add_person);
        holder.image_desc.setText("change");
    }

    return convertView;
}

@Override
public Object getItem(int position) {
    // TODO Auto-generated method stub
    return null;
}

@Override
public long getItemId(int position) {
    // TODO Auto-generated method stub
    return 0;
}

}
</code></pre>

<p><b>Your main activity: </b> In this activity you need to ask the user to enter the number of images they want to see. I have not added any kind of validation or error message when user does not enter a value but instead I have catched the possible error and used it to assign default value. You can apply other kind of logics here according to your requirement.</p>

<pre><code>public class MainActivity extends Activity implements OnClickListener {

EditText text;
Button button;
int number;
private static final String NUMBER_OF_IMAGES = "numbers";

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    text = (EditText) findViewById(R.id.text);
    button = (Button) findViewById(R.id.button);
    button.setOnClickListener(this);
}

@Override
public void onClick(View v) {

    try {
        number = Integer.parseInt(text.getText().toString());

        // if user enters 0 or negative number then the default value is set
        // to 2
        if (number &lt; 1) {
            number = 2;
        }
    } catch (Exception e) {
        e.printStackTrace();
        // if user doesn't enter anything then code will catch 
        // classCastException and assign 2 as default value here
        number = 2;
    }
    // start this intent by putting this number in the bundle
    Intent i = new Intent(getApplicationContext(), SecondActivity.class);
    Bundle bundle = new Bundle();
    bundle.putInt(NUMBER_OF_IMAGES, number);
    i.putExtras(bundle);
    startActivity(i);
}
}
</code></pre>

<p><b>Second Activity: </b> this is the activity where you define and initialise your gridview and adapter. make sure you retrieve the bundle from previous activity and retrieve the number entered by user properly.</p>

<pre><code>public class SecondActivity extends Activity {
GridView grid;
Adapter adapter;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.grids);

    Bundle bundle = getIntent().getExtras();
    int numbers = bundle.getInt(MainActivity.NUMBER_OF_IMAGES);

    grid = (GridView) findViewById(R.id.gridview);
    // depending upon your requirement you can also add logic here to set
    // the number of columns based on the number entered by the user
    setColumns(numbers);
    adapter = new Adapter(getApplicationContext(), numbers);
    grid.setAdapter(adapter);
}

@Override
protected void onResume() {
    super.onResume();
    adapter.notifyDataSetChanged();
}

/**
 * Method to set the number of columns depending upon user input for desired
 * grids. other attributes for the grid view can also be set her such as
 * width, height, background etc.
 * 
 * @param number
 */
public void setColumns(int number) {
    if (number &gt; 0 &amp;&amp; number &lt; 10) {
        grid.setNumColumns(2);
    } else if (number &gt;= 10 &amp;&amp; number &lt; 20) {
        grid.setNumColumns(4);
    } else {
        grid.setNumColumns(5);
    }
}
}
</code></pre>

<p><b>NOTE: </b> This is not highly optimised code for performance but just provides an example of how the required functionality can be achieved. </p>
