<p>First of all you want to reuse <code>convertView</code> that has been passed as one of the argument. This way you can avoid inflating the item <code>View</code>.</p>

<p>Secondly, you could use something as <code>ViewHolder</code> to store references to your inner <code>View</code>s. Using <code>ViewHolder</code> will increase performance whether you are inflating view or finding them by id as both methods are very expensive.</p>

<p>Set the <code>ViewHolder</code> as a Tag on item <code>View</code>.</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View view;
    ViewHolder viewHolder;

    // if possible reuse view
    if (convertView == null) {
        final LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        view = inflater.inflate(resource, parent, false);
        viewHolder = new ViewHolder(mInflater.inflate(R.layout.post_header_layout, null));
        view.setTag(viewHolder);
    } else {
        // reuse view
        view = convertView;
        viewHolder = (ViewHolder) view.getTag();
    }

    //set text, listeners, icon, etc.

    return view;
}
</code></pre>

<p>The <code>ViewHolder</code> is just private inner class storing referenced to view.</p>

<p>private static class ViewHolder {</p>

<pre><code>    private final View view;

    private ViewHolder(View view) {
        this.view = view;
    }
}
</code></pre>

<p>Talk about <code>ListView</code> usage was given at <a href="http://www.youtube.com/watch?feature=player_detailpage&amp;v=wDBM6wVEO70#t=708s" rel="nofollow">Google IO 2010</a>.</p>
