<p>Your SSCCE helps me to see everything -- thanks! I've voted to open your question and have up-voted it. You're killing yourself with your unrealistic JTextArea row numbers, and then setting the size of your GUI. Get rid of all <code>setSize(...)</code> and <code>setPreferredSize(...)</code> method calls. Make your JTextArea row counts 5 or 10, not 50, not 100. Call <code>pack()</code> before <code>setVisible(true)</code>.</p>

<p>For example, please see the changes I've made below as well as comments with <code>!!</code> in them. Note that I've tried to get rid of <em>most</em> of your magic numbers, but you still need to do the same with the column counts. I've also added text to your text components for the sake of debugging, so that I can see at a glance which text component goes with which variable. You'll of course not want to have this text present in the presentation code, but again, it's a useful debugging tool:</p>

<pre><code>import javax.swing.*;
import javax.swing.border.BevelBorder;
import java.awt.*;

public class SSCE {
   private static final int SMALL_ROWS = 5; // !! was 20!
   private static final int BIG_ROWS = 10; // !! was 50!

   SSCE() {
      JFrame f1 = new JFrame();
      GridBagLayout gbl = new GridBagLayout();
      JButton btnAddAcc = new JButton("Add Acount");
      JButton insertId = new JButton("Insert");
      JButton insertTweet = new JButton("Insert2");
      JButton tweetButton = new JButton("TweetButton");
      JLabel accountStatusHeader = new JLabel("account  status Header");
      JLabel accountDisplayNameHeader = new JLabel(
            "account  displayname Header");
      JLabel enterInterval = new JLabel("enter Interval!!");
      final JTextArea accountDispName = new JTextArea("accountDispName JTA",
            BIG_ROWS, 50);
      final JTextArea statusDisplay = new JTextArea("statusDisplay JTA",
            BIG_ROWS, 50);
      final JTextArea jTextAreaId = new JTextArea("jTextAreaId JTA",
            SMALL_ROWS, 50);
      final JTextArea jTextAreaTweets = new JTextArea("jTextAreaTweets JTA",
            SMALL_ROWS, 50);
      jTextAreaId.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED,
            Color.PINK, Color.GREEN));
      final JTextArea tweetLog = new JTextArea("tweetLog JTA", BIG_ROWS, 100); // was
                                                                               // 100!
      // !! tweetLog.setPreferredSize(new Dimension(1000, 5000));
      JScrollPane tweetLogPaneScroll = new JScrollPane(tweetLog);
      JScrollPane idScrollPane = new JScrollPane(jTextAreaId);
      JScrollPane tweetScrollPane = new JScrollPane(jTextAreaTweets);
      final JTextField timeIntervalInput = new JTextField(
            "timeIntervalInput JTF", 20);
      final JTextField tagIdInsertTextBox = new JTextField(
            "tagIdInsertTextBox JTF", 50);
      final JTextField tweetInsertTextBox = new JTextField(
            "tweetInsertTextBox JTF", 50);
      f1.setLayout(gbl);
      f1.add(btnAddAcc, makeGbc(0, 0, 1, 2));
      f1.add(accountDisplayNameHeader, makeGbc(1, 0));
      f1.add(accountStatusHeader, makeGbc(1, 1));
      f1.add(accountDispName, makeGbc(2, 0));
      f1.add(statusDisplay, makeGbc(2, 1));
      f1.add(enterInterval, makeGbc(3, 0));
      f1.add(timeIntervalInput, makeGbc(3, 1));
      f1.add(new JLabel("Twitter Ids"), makeGbc(4, 0));
      f1.add(new JLabel("Tweets"), makeGbc(4, 1));
      f1.add(idScrollPane, makeGbc(5, 0, 5));
      f1.add(tweetScrollPane, makeGbc(5, 1, 5));
      f1.add(tagIdInsertTextBox, makeGbc(10, 0));
      f1.add(tweetInsertTextBox, makeGbc(10, 1));
      f1.add(insertId, makeGbc(11, 0));
      f1.add(insertTweet, makeGbc(11, 1));
      f1.add(tweetButton, makeGbc(12, 0, 1, 2));
      f1.add(tweetLogPaneScroll, makeGbc(13, 0, 6, 2));
      // !! f1.setSize(800, 400);
      f1.pack(); // !!
      f1.setVisible(true);
      f1.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      accountDispName.setVisible(false);
      statusDisplay.setVisible(false);
   }

   private GridBagConstraints makeGbc(int y, int x) {
      GridBagConstraints gbc = new GridBagConstraints();
      // gbc.gridwidth = 1;
      // gbc.gridheight = 1;
      gbc.gridx = x;
      gbc.gridy = y;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.insets = new Insets(2, 2, 2, 2);
      gbc.anchor = (y == 0) ? GridBagConstraints.LINE_START
            : GridBagConstraints.LINE_END;
      gbc.fill = GridBagConstraints.BOTH;
      System.out.printf("gridwidth, gridheight: [%d, %d]%n", gbc.gridwidth,
            gbc.gridheight);
      return gbc;
   }

   private GridBagConstraints makeGbc(int y, int x, int gridheight) {
      GridBagConstraints gbc = new GridBagConstraints();
      // gbc.gridwidth = 1;
      gbc.gridheight = gridheight;
      gbc.gridx = x;
      gbc.gridy = y;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.insets = new Insets(2, 2, 2, 2);
      gbc.anchor = (y == 0) ? GridBagConstraints.LINE_START
            : GridBagConstraints.LINE_END;
      gbc.fill = GridBagConstraints.BOTH;
      return gbc;
   }

   private GridBagConstraints makeGbc(int y, int x, int gridheight,
         int gridwidth) {
      GridBagConstraints gbc = new GridBagConstraints();
      gbc.gridwidth = gridwidth;
      gbc.gridheight = gridheight;
      gbc.gridx = x;
      gbc.gridy = y;
      gbc.insets = new Insets(2, 2, 2, 2);
      gbc.anchor = (y == 0) ? GridBagConstraints.LINE_START
            : GridBagConstraints.LINE_END;
      gbc.fill = GridBagConstraints.BOTH;
      return gbc;
   }

   public static void main(String args[]) {
      javax.swing.SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            SSCE a1;
            a1 = new SSCE();
         }
      });
   }
}
</code></pre>

<p>This results in a GUI that looks like so:</p>

<p><img src="http://i.stack.imgur.com/kiLnF.jpg" alt="enter image description here"></p>

<p>Note, I would also change the GridBagConstraints for JTextFields from BOTH to HORIZONTAL.</p>

<hr>

<p><strong>Edit</strong><br>
You state in comment:</p>

<blockquote>
  <p>One more question if u dont mind answering.the TimeIntervalInput is appearing so wide although I have defined it to hold at max 20 chars.Any solution to that?</p>
</blockquote>

<p>You need to continue to play with your grid bag constraints as the ones you're using are quite restrictive. For example, note what happens when I use more exacting constraints on the GBC for that JTextField:</p>

<pre><code>  GridBagConstraints gbc = makeGbc(3, 1);
  gbc.fill = GridBagConstraints.NONE;
  gbc.anchor = GridBagConstraints.WEST;
  f1.add(timeIntervalInput, gbc);
</code></pre>
