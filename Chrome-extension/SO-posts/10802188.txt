<p>The Apache URIUtils should work. If you don't want to pull in an external library, here's a simple implementation of a method that should correctly resolve relative URIs for the case that <code>java.net.URI</code> can't handle (i.e. where the base URI path is not a prefix of the child URI path).</p>

<pre><code>public static URI relativize(URI base, URI child) {
  // Normalize paths to remove . and .. segments
  base = base.normalize();
  child = child.normalize();

  // Split paths into segments
  String[] bParts = base.getPath().split("\\/");
  String[] cParts = child.getPath().split("\\/");

  // Discard trailing segment of base path
  if (bParts.length &gt; 0 &amp;&amp; !base.getPath().endsWith("/")) {
    bParts = Arrays.copyOf(bParts, bParts.length - 1);
  }

  // Remove common prefix segments
  int i = 0;
  while (i &lt; bParts.length &amp;&amp; i &lt; cParts.length &amp;&amp; bParts[i].equals(cParts[i])) {
    i++;
  }

  // Construct the relative path
  StringBuilder sb = new StringBuilder();
  for (int j = 0; j &lt; (bParts.length - i); j++) {
    sb.append("../");
  }
  for (int j = i; j &lt; cParts.length; j++) {
    if (j != i) {
      sb.append("/");
    }
    sb.append(cParts[j]);
  }

  return URI.create(sb.toString());
}
</code></pre>

<p>Note that this doesn't enforce that the base and child have the same scheme and authority -- you'll have to add that if you want it to handle the general case. This might not work against all boundary cases, but it works against you example.</p>
