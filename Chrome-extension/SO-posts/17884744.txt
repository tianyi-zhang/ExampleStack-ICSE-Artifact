<p>The basic idea is to do something like:</p>

<pre><code>try{
    element.isDisplayed();
    return true;
} catch(ElementNotFoundException e){
    return false;
}
</code></pre>

<p>I've found two places for this code:</p>

<p>The first is in your page class that all of your pages inherit.  If you don't have such a class, then a Utils class will work.  Your function call will then look something like <code>page.exists(page.getSaveButton())</code>.</p>

<p>However, my favorite way (that will require a little more setup), is to write a wrapper class around WebElement (I call it EnhancedWebElement).  It's constructor accepts a normal WebElement, and it redirects each function call to the WebElement, and has an exists() function.</p>

<p>Finally, to make every element have the exists() function, you will need to extend DefaultFieldDecorator, and override these functions:</p>

<pre><code>@Override
public Object decorate(ClassLoader loader, Field field) {
  if (!(WebElement.class.isAssignableFrom(field.getType())
      || isDecoratableList(field))) {
    return null;
  }

  ElementLocator locator = factory.createLocator(field);
  if (locator == null) {
    return null;
  }

  if (EnhancedWebElement.class.isAssignableFrom(field.getType())) {
    return proxyForLocator(loader, locator);
  } else if (List.class.isAssignableFrom(field.getType())) {
    return proxyForListLocator(loader, locator);
  } else {
    return null;
  }
}
@Override
protected EnhancedWebElement proxyForLocator(ClassLoader loader, ElementLocator locator) {
  InvocationHandler handler = new LocatingElementHandler(locator);

  WebElement proxy= (WebElement) Proxy.newProxyInstance(
    loader, new Class[] {WebElement.class, WrapsElement.class, Locatable.class}, handler);

  return new EnhancedWebElement(proxy);
}
</code></pre>

<p>To implement it, wherever you call initElements, call this:</p>

<pre><code>PageFactory.initElements(new EnhancedFieldDecorator(new DefaultElementLocatorFactory(driver)), this);
//Replace EnhancedFieldDecorator with the name of your decorator
</code></pre>

<p>This may be more than you are asking for, and if it is, that top function is what you are looking for.</p>
