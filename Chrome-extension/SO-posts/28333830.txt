<p>Here is the whole code for anyone that is interested, had to implement this also in my own app. Thanks to <a href="http://stackoverflow.com/a/5811789/">answer from @Haphazard</a>.</p>

<pre><code>@Override
public int findTokenStart(CharSequence text, int cursor) {
    int i = cursor; 
    while (i &gt; 0 &amp;&amp; (text.charAt(i - 1) != ' ' &amp;&amp; text.charAt(i - 1) != '\n')) {
        i--;
    }
    while (i &lt; cursor &amp;&amp; (text.charAt(i) == ' ' || text.charAt(i) == '\n')) {
        i++;
    }   
    return i;
}

@Override
public int findTokenEnd(CharSequence text, int cursor) {
    int i = cursor;
    int len = text.length();

    while (i &lt; len) {
        if (text.charAt(i) == ' ' || text.charAt(i) == '\n') {
            return i;
        } else {
            i++;
        }
    }   
    return len;
}

@Override
public CharSequence terminateToken(CharSequence text) {
    int i = text.length();

    while (i &gt; 0 &amp;&amp; (text.charAt(i - 1) == ' ' || text.charAt(i - 1) == '\n')) {
        i--;
    }   
    if (i &gt; 0 &amp;&amp; (text.charAt(i - 1) == ' ' || text.charAt(i - 1) == '\n')) {
        return text;
    } else {
        if (text instanceof Spanned) {
            SpannableString sp = new SpannableString(text + " ");
            TextUtils.copySpansFrom((Spanned) text, 0, text.length(),
                    Object.class, sp, 0);
            return sp;
        } else {
            return text + " ";
        }
    }
}
</code></pre>
