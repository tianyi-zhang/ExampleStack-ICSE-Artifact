<p>A more elegant and scalable approach would be to use a priority queue where the size is limited to N. Using a min-heap priority queue, we can keep adding entries to the queue till the size reaches N. For each entry after the size of the priority queue has reached N, add it to the queue and then remove the element at the head of the queue (which will have the minimum value). After we have exhausted all the entries from the HashMap, the queue will contain the Top N entries. </p>

<p>The advantage of this approach is that even if the entire HashMap cannot fit in memory, we can break it into smaller blocks and use this approach. Also, if we have a concurrent priority queue we can simultaneously add entries to the queue from different HashMaps as well.</p>

<pre><code>public static List&lt;String&gt; topNKeys(final HashMap&lt;String, Double&gt; map, int n) {
    PriorityQueue&lt;String&gt; topN = new PriorityQueue&lt;String&gt;(n, new Comparator&lt;String&gt;() {
        public int compare(String s1, String s2) {
            return Double.compare(map.get(s1), map.get(s2));
        }
    });

    for(String key:map.keySet()){
        if (topN.size() &lt; n)
            topN.add(key);
        else if (map.get(topN.peek()) &lt; map.get(key)) {
            topN.poll();
            topN.add(key);
        }
    }
    return (List) Arrays.asList(topN.toArray());
}
</code></pre>
