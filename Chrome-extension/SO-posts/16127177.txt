<p>Default constructor only accepts an Array of String. You can passing an Array of "Incident" hence that error.</p>

<p>You will have to implement your own ArrayAdapter that accepts array of object type "Incident". </p>

<p>A sample extended ArrayAdapter will look something like this.</p>

<pre><code>public class MyArrayAdapter extends ArrayAdapter&lt;Incident&gt; { // changed from Item to Incident
    ArrayList&lt;Incident&gt; items;
    Context context;
    public MyArrayAdapter(Context context, int textViewResourceId,
            ArrayList&lt;Incident&gt; items) {
        super(context, textViewResourceId, items);

        this.context = context;
        this.items = items; 
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent)
    {
        View row = convertView;
        ViewHolder holder = new ViewHolder();
        Incident item = items.get(position); // item is your accident

        if(row == null)
        {
            LayoutInflater inflater = ((Activity)context).getLayoutInflater();
            row = inflater.inflate(R.layout.list_item, parent, false);
            holder.name = (TextView) row.findViewById(R.id.name); // updated it is name from holder class
            row.setTag(holder);
        }
        else
        {
            holder = (ViewHolder) row.getTag();
        }

        holder.name.setText(item.getName()); // this is just example item is your Incident, you have to get it's name function whatever that is in your class
        return row;
    }

    public static class ViewHolder
    {
        TextView name;
    }

    public int getCount() {
        return items.size();
    }

}
</code></pre>

<p>You will have to create your own layout for this. For above example create list_item.xml and just add one TextView with id name and it will work.</p>
