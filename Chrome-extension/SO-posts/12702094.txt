<p>You can use this SimpleMultipartEntity class for sending Multipart data :</p>

<pre><code>public class SimpleMultipartEntity implements HttpEntity {

private final static char[] MULTIPART_CHARS = "-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        .toCharArray();

private String boundary = null;
ByteArrayOutputStream out = new ByteArrayOutputStream();
boolean isSetLast = false;
boolean isSetFirst = false;

public SimpleMultipartEntity() {
    final StringBuffer buf = new StringBuffer();
    final Random rand = new Random();
    for (int i = 0; i &lt; 30; i++) {
        buf.append(MULTIPART_CHARS[rand.nextInt(MULTIPART_CHARS.length)]);
    }
    this.boundary = buf.toString();

}

public void writeFirstBoundaryIfNeeds() {
    if (!isSetFirst) {
        try {
            out.write(("--" + boundary + "\r\n").getBytes());
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }
    isSetFirst = true;
}

public void writeLastBoundaryIfNeeds() {
    if (isSetLast) {
        return;
    }
    try {
        out.write(("\r\n--" + boundary + "--\r\n").getBytes());
    } catch (final IOException e) {
        e.printStackTrace();
    }
    isSetLast = true;
}

public void addPart(final String key, final String value) {
    writeFirstBoundaryIfNeeds();
    try {
        out.write(("Content-Disposition: form-data; name=\"" + key + "\"\r\n")
                .getBytes());
        out.write("Content-Type: text/plain; charset=UTF-8\r\n".getBytes());
        out.write("Content-Transfer-Encoding: 8bit\r\n\r\n".getBytes());
        out.write(value.getBytes());
        out.write(("\r\n--" + boundary + "\r\n").getBytes());
    } catch (final IOException e) {
        e.printStackTrace();
    }
}

public void addPart(final String key, final String fileName,
        final InputStream fin) {
    addPart(key, fileName, fin, "application/octet-stream");
}

public void addPart(final String key, final String fileName,
        final InputStream fin, String type) {
    writeFirstBoundaryIfNeeds();
    try {
        type = "Content-Type: " + type + "\r\n";
        out.write(("Content-Disposition: form-data; name=\"" + key
                + "\"; filename=\"" + fileName + "\"\r\n").getBytes());
        out.write(type.getBytes());
        out.write("Content-Transfer-Encoding: binary\r\n\r\n".getBytes());

        final byte[] tmp = new byte[4096];
        int l = 0;
        while ((l = fin.read(tmp)) != -1) {
            out.write(tmp, 0, l);
        }
        out.flush();
    } catch (final IOException e) {
        e.printStackTrace();
    } finally {
        try {
            fin.close();
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }
}

public void addPart(final String key, final File value) {
    try {
        addPart(key, value.getName(), new FileInputStream(value));
    } catch (final FileNotFoundException e) {
        e.printStackTrace();
    }
}

public String getBoundary() {
    return boundary;
}

public void setBoundary(String boundary) {
    this.boundary = boundary;
}

@Override
public long getContentLength() {
    writeLastBoundaryIfNeeds();
    return out.toByteArray().length;
}

@Override
public Header getContentType() {
    return new BasicHeader("Content-Type", "multipart/form-data; boundary="
            + boundary);
}

@Override
public boolean isChunked() {
    return false;
}

@Override
public boolean isRepeatable() {
    return false;
}

@Override
public boolean isStreaming() {
    return false;
}

@Override
public void writeTo(final OutputStream outstream) throws IOException {
    outstream.write(out.toByteArray());
}

@Override
public Header getContentEncoding() {
    return null;
}

@Override
public void consumeContent() throws IOException,
        UnsupportedOperationException {
    if (isStreaming()) {
        throw new UnsupportedOperationException(
                "Streaming entity does not implement #consumeContent()");
    }
}

@Override
public InputStream getContent() throws IOException,
        UnsupportedOperationException {
    return new ByteArrayInputStream(out.toByteArray());
}

} 
</code></pre>

<p>Usage : </p>

<pre><code>String serviceUri = "service url";
    InputStream fileInputStream = mInputStream; //Your file stream
    String fileName = "your file name";
    String fileKey = "Key name what server is looking for"
    HashMap&lt;String, String&gt; headerparts = mHeaderParts; //Other header parts that you need to send along.

    HttpClient httpClient = new DefaultHttpClient();
    HttpPost httpPost = new HttpPost(serviceUri);
    SimpleMultipartEntity entity = new SimpleMultipartEntity();
    httpPost.setHeader("Accept", "application/json");
    httpPost.setHeader("Content-type", "multipart/form-data; boundary="
            + entity.getBoundary());
    entity.writeFirstBoundaryIfNeeds();

    if (headerparts != null) {
        Object[] keySet = headerparts.keySet().toArray();
        for (int i = 0; i &lt; keySet.length; i++) {
            String key = keySet[i].toString();
            String value = headerparts.get(key);
            entity.addPart(key, value);
        }
    }

    entity.addPart(fileKey, fileName, fileInputStream);
    entity.writeLastBoundaryIfNeeds();
    httpPost.setEntity(entity);

    try {
        mResponse = httpClient.execute(httpPost);
    } catch (Exception e) {
        e.printStackTrace();
    }
</code></pre>
