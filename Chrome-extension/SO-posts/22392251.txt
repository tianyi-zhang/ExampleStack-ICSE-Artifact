<p>I misunderstood the question. I took a look on the documentation of Jsch and this was the easiest way for me to make it work:</p>

<pre><code>import java.io.IOException;
import java.io.InputStream;

import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

public class Main {

    public static void main(String[] args) {
        String host = "theAddress";
        String user = "root";
        String password = "thePassword";

        JSch jsch = new JSch();
        Session session = null;
        try {
            session = jsch.getSession(user, host, 22);
            session.setPassword(password);
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect(10000);
            System.out.println("--&gt;" + runCommand("echo 'hello'", session)); // --&gt;hello
            System.out.println("--&gt;" + runCommand("whoami", session)); // --&gt;root
            System.out.println("--&gt;" + runCommand("date", session)); // --&gt;Thu Mar 13 23:45:39 CET 2014
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (session != null) {
                session.disconnect();
            }
        }

    }

    private static String runCommand(String string, Session session) {
        ChannelExec channel = null;
        try {
            channel = (ChannelExec) session.openChannel("exec");
            channel.setCommand(string);
            channel.connect();
            return readOutput(channel);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (channel != null) {
                channel.disconnect();
            }
        }
        return null;
    }

    private static String readOutput(ChannelExec channel) throws IOException {
        // code from: http://www.jcraft.com/jsch/examples/Exec.java.html
        StringBuilder sb = new StringBuilder();
        InputStream in = channel.getInputStream();
        byte[] tmp = new byte[1024];
        while (true) {
            while (in.available() &gt; 0) {
                int i = in.read(tmp, 0, 1024);
                if (i &lt; 0)
                    break;
                sb.append(new String(tmp, 0, i));
            }
            if (channel.isClosed()) {
                break;
            }
            try {
                Thread.sleep(1000);
            } catch (Exception e) {}
        }
        return sb.toString();
    }

}
</code></pre>
