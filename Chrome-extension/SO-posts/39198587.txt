<p>A better readable solution could be </p>

<pre><code>public class MergeSort {

    private int[] array;
    private int[] tempMergArr;
    private int length;

    public static void main(String a[]){

        int[] inputArr = {5,4,3,5,7,5,1,5,96};
        System.out.print("Before: ");
        printList(inputArr);
        MergeSort mms = new MergeSort();
        mms.sort(inputArr);
        System.out.print("After: ");
        printList(inputArr);
    }

    public static void printList(int[] test){
        for (int i= 0; i &lt; test.length; i++){
            System.out.print(test[i] + " ");
        }
        System.out.println();
    }
    public void sort(int inputArr[]) {
        this.array = inputArr;
        this.length = inputArr.length;
        this.tempMergArr = new int[length];
        mergeSort(0, length - 1);
    }

    private void mergeSort(int lowerIndex, int higherIndex) {

        if (lowerIndex &lt; higherIndex) {
            int middle = lowerIndex + (higherIndex - lowerIndex) / 2;
            // Below step sorts the left side of the array
            mergeSort(lowerIndex, middle);
            // Below step sorts the right side of the array
            mergeSort(middle + 1, higherIndex);
            // Now merge both sides
            merge(lowerIndex, middle, higherIndex);
        }
    }

    private void merge(int lowerIndex, int middle, int higherIndex) {

        for (int i = lowerIndex; i &lt;= higherIndex; i++) {
            tempMergArr[i] = array[i];
        }
        int i = lowerIndex;
        int j = middle + 1;
        int k = lowerIndex;
        while (i &lt;= middle &amp;&amp; j &lt;= higherIndex) {
            if (tempMergArr[i] &lt;= tempMergArr[j]) {
                array[k] = tempMergArr[i];
                i++;
            } else {
                array[k] = tempMergArr[j];
                j++;
            }
            k++;
        }
        while (i &lt;= middle) {
            array[k] = tempMergArr[i];
            k++;
            i++;
        }

    }
}
</code></pre>
