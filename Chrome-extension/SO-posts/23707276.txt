<p>Probably the best explanation is in the Developer Docs (here: <a href="https://developer.android.com/guide/components/fragments.html" rel="nofollow">https://developer.android.com/guide/components/fragments.html</a>)</p>

<p>Here's something from the "QuickView"</p>

<blockquote>
<pre><code>Fragments decompose application functionality and UI into reusable modules
Add multiple fragments to a screen to avoid switching activities
Fragments have their own lifecycle, state, and back stack
Fragments require API Level 11 or greater
</code></pre>
</blockquote>

<p>The way I paraphrase it, is that its a reusable component of the UI with it's own lifecycle. It is used to decompose your UI into (multiple), more self contained, and logical "sections".</p>

<p>In your case, I think your IDE has auto generated the code for you and generated the <code>PlaceholderFragment</code>. It is as it says, an autogenerated placeholder. You can get rid of it if you're only working with <code>Activities</code> for now. But its best to look up Fragment tutorials later as they are used quite frequently with newer versions of android (Fragments are not necessary, but they're sorta 'better practice', depending on your application architecture).</p>

<p>The reason you're getting an error with:</p>

<blockquote>
  <p>ERROR: "Toast.makeText(MainActivity.this, "toast", Toast.LENGTH_SHORT);"</p>
  
  <p>Message: "No enclosing instance of the type MainActivity is accessible in scope"</p>
</blockquote>

<p>is actually explained in the message. You've declared your <code>OnClickListener</code> into an anonymous, <code>static</code>, attribute. Because it is <code>static</code>, it cannot access the current instance of the class (it is "not in scope", it has no access to the non-static methods and attributes). To fix it, just remove the <code>static</code> keyword:</p>

<pre><code>private OnClickListener listener = new OnClickListener() //... etc
</code></pre>

<p>For an explanation about the <code>static</code> keyword in Java, look here: <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html" rel="nofollow">http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html</a> or <a href="https://stackoverflow.com/questions/413898/what-does-the-static-keyword-do-in-a-class">What does the &#39;static&#39; keyword do in a class?</a></p>

<p>EDIT (A neater way of implementing OnClickListener)</p>

<p>A better idea would be to put your <code>OnClickListener</code> within your <code>PlaceholderFragment</code> (since that's where it's used), or have your <code>PlaceholderFragment</code> implement <code>View.OnClickListener</code> (I prefer this way, less anonymous types, it code formats better, but its a matter of preference). An example (look for the comments):</p>

<pre><code>// note, doesn't matter if it is static
// I got rid of the OnClickListener attribute and made PlaceholderFragment implement OnClickListener like so
public static class PlaceholderFragment extends Fragment implements OnClickListener
{
    // No need to provide a constructor. Fragments by default should have an empty constructor. If you want to add data to it, you need to create a "newInstance" method which calls fragment.setArguments (SomeBundleWithValuesInIt)
    @ Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState)
    {
        View rootView = inflater.inflate (R.layout.fragment_main, container, false);

        button1 = (Button) rootView.findViewById (R.id.button1);
        button2 = (Button) rootView.findViewById (R.id.button2);
        button3 = (Button) rootView.findViewById (R.id.button3);

        // I set the OnClickListener to the PlaceholderFragment itself, because it implements OnClickListener (which is an interface), you can use it this way.
        button1.setOnClickListener (this);
        button2.setOnClickListener (this);
        button3.setOnClickListener (this);

        return rootView;
    }

    // OnClickListener.onClick(View) moved here.
    @ Override
    public void onClick(View v)
    {
        int id = v.getId ();

        switch (id) {
            case R.id.button1 :
                // getActivity() can be used instead of Context (Activity is one of the subclasses of Context), but only within a Fragment in this case
                Toast.makeText (getActivity (), "toast", Toast.LENGTH_SHORT);
                break;
            case R.id.button2 :
                break;
            case R.id.button3 :
                break;
            default :
                break;
        }
    }
}
</code></pre>
