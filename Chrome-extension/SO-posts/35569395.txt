<p>hello i think you should switch over to httpURlConnection. just visit <a href="http://aiyazparmar.blogspot.in/2016/02/call-web-service-andorid-wihout-using.html" rel="nofollow">this</a>
link here i have added global class for calling webservice and getting response in json.</p>

<p>replace this code in your CallWebService file you will get response in string.</p>

<pre><code>public class CallWebService {

    private static final String GET="GET";
    private static final String POST="POST";
    private HashMap&lt;String,String&gt; apiParameters;
    private static String WebService;

    public CallWebService(String MethodType, String WebService, HashMap&lt;String, String&gt; apiParameters) throws MethodNotDefinedException {
            if(MethodType!=null) {
                if (MethodType.equalsIgnoreCase(GET)) {
                    if(WebService!=null){
                        this.WebService=WebService;
                        new ExecuteAsyncTask(GET).execute();
                    }else{
                       throw new NullPointerException("Please define webservice url.");
                    }
                } else if(MethodType.equalsIgnoreCase(POST)){
                    if(WebService!=null){
                        if(apiParameters!=null)this.apiParameters=apiParameters;
                        this.WebService=WebService;
                        new ExecuteAsyncTask(POST).execute(apiParameters);
                    }else{
                        throw new NullPointerException("Please define webservice url.");
                    }
                }else{
                    throw new MethodNotDefinedException("Define method for webservice.");
                }
            }else{
                throw new MethodNotDefinedException("Define method for webservice.");
            }
    }

    private class ExecuteAsyncTask extends AsyncTask&lt;HashMap&lt;String,String&gt;,Void,String&gt;{
        String MethodType;
        public ExecuteAsyncTask(String MethodType){
            this.MethodType=MethodType;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            OnStartingService();
        }

        @Override
        protected void onPostExecute(String string) {
            super.onPostExecute(string);
            try {
                OnGettingResult(string);
            } catch (JSONException e) {
                e.printStackTrace();
            } catch (MethodNotDefinedException e) {
                e.printStackTrace();
            }
        }

        @Override
        protected String doInBackground(HashMap&lt;String, String&gt;... params) {
            if(MethodType.equalsIgnoreCase(GET))
            return getJSON(WebService,15000);
            else try {
                return getJSONPOST(WebService,params[0]);
            } catch (IOException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            }
            return null;
        }
    }

    public void OnStartingService(){
    }
    public void OnGettingResult(String jsonObject) throws JSONException, MethodNotDefinedException {
    }





    private String getJSON(String url, int timeout) {
        HttpURLConnection c = null;
        try {
            URL u = new URL(url);
            c = (HttpURLConnection) u.openConnection();
            c.setRequestMethod("GET");
            c.setRequestProperty("Content-length", "0");
            c.setUseCaches(false);
            c.setAllowUserInteraction(false);
            c.setConnectTimeout(timeout);
            c.setReadTimeout(timeout);
            c.connect();
            int status = c.getResponseCode();

            switch (status) {
                case 200:
                case 201:
                    BufferedReader br = new BufferedReader(new InputStreamReader(c.getInputStream()));
                    StringBuilder sb = new StringBuilder();
                    String line;
                    while ((line = br.readLine()) != null) {
                        sb.append(line+"\n");
                    }
                    br.close();
                    System.out.println(sb.toString());
                    return sb.toString();
            }

        } catch (MalformedURLException ex) {
        } catch (IOException ex) {
        }  finally {
            if (c != null) {
                try {
                    c.disconnect();
                } catch (Exception ex) {
                }
            }
        }
        return null;
    }


    private String getJSONPOST(String url1, HashMap&lt;String,String&gt; apiParams) throws IOException, JSONException {
        URL url = new URL(url1);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setDoInput(true);
        conn.setDoOutput(true);

        String getParams=getQuery(apiParams);

        OutputStream os = conn.getOutputStream();
        BufferedWriter writer = new BufferedWriter(
                new OutputStreamWriter(os, "UTF-8"));
        writer.write(getParams);
        writer.flush();
        writer.close();
        os.close();
        conn.connect();

        int status = conn.getResponseCode();

        switch (status) {
            case 200:
            case 201:
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder sb = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    sb.append(line+"\n");
                }
                br.close();
                System.out.println(sb.toString());
                return sb.toString();
        }


        if (conn != null) {
            try {
                conn.disconnect();
            } catch (Exception ex) {
            }
        }
        return null;
    }




    private String getQuery(HashMap&lt;String,String&gt; params) throws UnsupportedEncodingException
    {
        StringBuilder result = new StringBuilder();
        boolean first = true;


        for(Map.Entry&lt;String, String&gt; entry : params.entrySet()) {
            if (first)
                first = false;
            else
                result.append("&amp;");

            result.append(URLEncoder.encode(entry.getKey(), "UTF-8"));
            result.append("=");
            result.append(URLEncoder.encode(entry.getValue(), "UTF-8"));
        }
        return result.toString();
    }
}
</code></pre>
