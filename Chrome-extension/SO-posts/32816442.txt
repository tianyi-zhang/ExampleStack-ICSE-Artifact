<p>When you scroll through the list, the items/views in the <code>ListView</code> will get reused to optimize the memory.So when you set a selected state to a list item, you will see that selected state in multiple list items as you scroll through. The best way to prevent this is to preserve the state in your <strong>Data Model</strong> and set the state in <code>getView</code> function of the <code>Adapter</code>.</p>

<p>Here is what you can do - </p>

<pre><code> @Override
 public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position,long id) {
   VictoriaListAdapter adapter = (VictoriaListAdapter) parent.getAdapter();

   //reverse the selected state in data model
   for (int i = 0; i &lt; adapter.getCount(); i++) {
     Victoria victoria = (Victoria)adapter.getItem(i);
     victoria.setSelected(i == position ? true : false);
   }
   Victoria victoria = (Victoria)adapter.getItem(position);

   ---
   ---
</code></pre>

<p>And in adapter -       </p>

<pre><code>@Override
public Object getItem(int position) {
    //Return full object, coz we need to access other 
    //member variables too
    return mData.get(position);
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {

    ViewHolder holder;

    if (convertView == null) {
        convertView = mInflater.inflate(R.layout.list_item_dualline, parent, false);
        holder = new ViewHolder();

        holder.title = (TextView) convertView.findViewById(R.id.item_station);
        holder.description = (TextView) convertView.findViewById(R.id.item_zone);

        convertView.setTag(holder);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }

    Victoria victoria = (Victoria)getItem(position);
    holder.title.setText(victoria.getStation());
    holder.description.setText(victoria.getZone());
    if (victoria.isSelected()) {
        setItemSelected(convertView);
    } else {
        setItemNormal(convertView);
    }

    return convertView;
}

 public void setItemSelected(View view) {
    View rowView = view;
    view.setBackgroundColor(Color.parseColor("#868F98"));

    TextView tv0 = (TextView) rowView.findViewById(R.id.item_station);
    tv0.setTextColor(Color.WHITE);

    TextView tv1 = (TextView) rowView.findViewById(R.id.item_zone);
    tv1.setTextColor(Color.WHITE);
 }

public void setItemNormal(View v) {

    v.setBackgroundColor(Color.TRANSPARENT);

    TextView tv0 = ((TextView) v.findViewById(R.id.item_station));
    tv0.setTextColor(Color.WHITE);

    TextView tv1 = ((TextView) v.findViewById(R.id.item_zone));
    tv1.setTextColor(Color.parseColor("#B5B5B5"));

 }
</code></pre>

<p>Hope it helps!</p>
