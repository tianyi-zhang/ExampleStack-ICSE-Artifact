<p>If I understand you correctly, you wish to find the total size of all the files in the directory and then copy them.
I would create another function, something like:</p>

<pre><code>public void beginCopy(File source, File destination)
{
    ArrayList&lt;PendingFile&gt; filesToCopy = new ArrayList&lt;PendingFile&gt;();
    long totalSize = copyDirectory(source, destination, filesToCopy);
    // totalsize now contains the size of all the files
    // files to copy now contains a list of source and destination files

    // now modifying your copy method we can copy all the files
    long totalThusFar = 0;
    for (PendingFile pending : filesToCopy)
    {
        FileInputStream in = new FileInputStream(pending.source);
        FileOutputStream out = new FileOutputStream(pending.destination);

        long fileLength = sourceLocation.length();

        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) &gt; 0) {
            out.write(buf, 0, len);
            totalThusFar += len;
            publishProgress((int) (total * 100 / totalsize));
        }
        in.close();
        out.close();
    }
}
</code></pre>

<p>you would need a PendingFile class/structure just to hold both source and destinations. You will add them to the ArrayList in your copy method like this:</p>

<pre><code>public long copyDirectory(File sourceLocation , File targetLocation, ArrayList list) throws IOException {
    if (sourceLocation.isDirectory()) {
        if (!targetLocation.exists() &amp;&amp; !targetLocation.mkdirs()) {
            throw new IOException("Cannot create directory: " + targetLocation.getAbsolutePath());
        }

        String[] children = sourceLocation.list();
        long totalSize = 0;
        for (int i = 0; i &lt; children.length; i++) {
            totalSize += copyDirectory(new File(sourceLocation, children[i]),
                    new File(targetLocation, children[i]), list);
            return totalSize;
        }
    } else {                
        File directory = targetLocation.getParentFile();
        if (directory != null &amp;&amp; !directory.exists() &amp;&amp; !directory.mkdirs()) {
            throw new IOException("Cannot create directory: " + directory.getAbsolutePath());
        }

        list.add(new PendingFile(sourceLocation, targetLocation));
        return sourceLocation.length;
    }
}
</code></pre>

<p>I wrote all this just now so It probably won't work straight away but I think you should be able to get it working with this. Goodluck!</p>
