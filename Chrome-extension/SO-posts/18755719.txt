<p>Thanks for posting the video. This is a parallax effect. The following library can help you achieve it:</p>

<blockquote>
  <p>ParallaxScrollView: A Parallax ScrollView which takes a background and
  foreground view, in the ParallexScrollView.</p>
</blockquote>

<p><a href="https://github.com/chrisjenx/ParallaxScrollView">Link</a></p>

<p>So, I went ahead and modified the demo offered on the link. If this is what you are after, let me know and I'll add details on the modifications I did to get this working.</p>

<p><a href="http://ge.tt/3MSwMzr/v/0?c">APK Link</a></p>

<p><strong>How to get this:</strong></p>

<p>If there was anything but a ListView in the scrollable part, the effect would have been easy to achieve. Because the container holding the ListView is an extended ScrollView, things get complicated. The following modifications were made:</p>

<p>In the activity, inflate the following layout: </p>

<pre><code>&lt;couk.jenxsol.parallaxscrollview.views.ParallaxScrollView xmlns:tools="http://schemas.android.com/tools"
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/scroll_view"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".DemoActivity" &gt;

&lt;!-- Top Image: Here, the height is set to 300dp. You can set this in code --&gt;
&lt;!-- depending on screen dimensions --&gt;

    &lt;ImageView
        android:id="@+id/iv"
        android:layout_width="match_parent"
        android:layout_height="300dp"
        android:gravity="center"
        android:scaleType="fitXY"
        android:src="@drawable/image_to_use" /&gt;

&lt;!-- Foreground --&gt;
&lt;!-- You can place any of the items below as the foreground,  --&gt;
&lt;!-- but for most control, add the scroll view yourself. --&gt;

&lt;!-- This is the area that will hold the ListView --&gt;
&lt;!-- Also note that the LinearLayout's top margin will 
&lt;!-- depend on ImageView's height. Here, there's an overalp of 100dp --&gt;
&lt;!-- between the ImageView and the LinearLayout --&gt;
&lt;!-- Reason: The first TextView(with a transparent background) inside the 
&lt;!-- LinearLayout is displayed over the ImageView. --&gt;
&lt;!-- So, the overlapping height should be equal to first TextView's height --&gt;
&lt;!-- LinearLayout's top margin = ImageView's height - firstTextView's height --&gt;

&lt;!-- AnotherView is an extended LinearLayout that I added to the library --&gt;

    &lt;couk.jenxsol.parallaxscrollview.views.AnotherView
        android:id="@+id/anotherView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" &gt;

        &lt;LinearLayout
            android:id="@+id/llMainHolder"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginTop="200dp"
            android:orientation="vertical" &gt;

            &lt;TextView
                android:id="@+id/tvTitle"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:background="@android:color/transparent"
                android:gravity="center"
                android:padding="@dimen/spacing"
                android:text="Parallax Effect"
                android:textColor="@android:color/white"
                android:textSize="21sp"
                tools:ignore="NewApi" /&gt;

            &lt;!-- ListView --&gt;

            &lt;LinearLayout
                android:id="@+id/llMain"
                android:layout_width="match_parent"
                android:layout_height="wrap_content" &gt;

                &lt;ListView
                    android:id="@+id/lvMain"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:divider="@android:color/black"
                    android:dividerHeight="2px" &gt;

                &lt;/ListView&gt;

            &lt;/LinearLayout&gt;            

        &lt;/LinearLayout&gt;

    &lt;/couk.jenxsol.parallaxscrollview.views.AnotherView&gt;

&lt;/couk.jenxsol.parallaxscrollview.views.ParallaxScrollView&gt;
</code></pre>

<p>Activity code:</p>

<pre><code>public class DemoActivity extends Activity {

    private ParallaxScrollView mScrollView;
    private ListView lvMain;
    private LinearLayout llMain, llMainHolder;
    private AnotherView anotherView;
    private ImageView iv;
    private TextView tvTitle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        // Inflated layout
        View mContent = getLayoutInflater().inflate(R.layout.activity_demo, null);

        // Initialize components

        mScrollView = (ParallaxScrollView) mContent.findViewById(R.id.scroll_view);

        llMain = (LinearLayout) mContent.findViewById(R.id.llMain);

        llMainHolder = (LinearLayout) mContent.findViewById(R.id.llMainHolder);

        lvMain = (ListView) mContent.findViewById(R.id.lvMain);

        iv = (ImageView) mContent.findViewById(R.id.iv);

        tvTitle = (TextView) mContent.findViewById(R.id.tvTitle);

        anotherView = (AnotherView) mContent.findViewById(R.id.anotherView);

        String[] array = {"one", "two", "three", "four", "five", "six", "seven", "eight",
            "nine", "ten", "evelen", "twelve", "thirteen", "fourteen"};

        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, R.layout.text, array);

        lvMain.setAdapter(adapter);            

        // Set Content
        setContentView(mContent);

        lvMain.post(new Runnable() {

            @Override
            public void run() {

                // Adjusts llMain's height to match ListView's height
                setListViewHeight(lvMain, llMain);  

                // LayoutParams to set the top margin of LinearLayout holding
                // the content. 
                // topMargin = iv.getHeight() - tvTitle.getHeight()
                LinearLayout.LayoutParams p = 
                       (LinearLayout.LayoutParams)llMainHolder.getLayoutParams();
                p.topMargin = iv.getHeight() - tvTitle.getHeight(); 
                llMainHolder.setLayoutParams(p);
            }
        });
    }

    // Sets the ListView holder's height    
    public void setListViewHeight(ListView listView, LinearLayout llMain) {
        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter == null) {

            return;
        }

        int totalHeight = 0;
        int firstHeight = 0;
        int desiredWidth = MeasureSpec.makeMeasureSpec(
                             listView.getWidth(), MeasureSpec.AT_MOST);

        for (int i = 0; i &lt; listAdapter.getCount(); i++) {

            if (i == 0) {
                View listItem = listAdapter.getView(i, null, listView);
                listItem.measure(desiredWidth, MeasureSpec.UNSPECIFIED);
                firstHeight = listItem.getMeasuredHeight();
        }
            totalHeight += firstHeight; 
        }

        LinearLayout.LayoutParams params = 
                         (LinearLayout.LayoutParams)llMain.getLayoutParams();

        params.height = totalHeight + (listView.getDividerHeight() *
                                                (listAdapter.getCount() - 1));
        llMain.setLayoutParams(params);
        anotherView.requestLayout();    
    }
}
</code></pre>

<p>The view provided by the library that holds the content (ObservableScrollView) extends a ScrollView. this was causing problems with the ListView that you want to display. I added<code>AnotherView</code> that extends a LinearLayout instead:</p>

<pre><code>public class AnotherView extends LinearLayout {

private ScrollCallbacks mCallbacks;

    static interface ScrollCallbacks {
        public void onScrollChanged(int l, int t, int oldl, int oldt);
    }

    public void setCallbacks(ScrollCallbacks listener) {
        mCallbacks = listener;
    }

    public AnotherView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    @Override
    public void draw(Canvas canvas) {
        super.draw(canvas);
    } 

    @Override
    protected void onScrollChanged(int l, int t, int oldl, int oldt) {
        super.onScrollChanged(l, t, oldl, oldt);
        if (mCallbacks != null) {
            mCallbacks.onScrollChanged(l, t, oldl, oldt);
        }
    }

    @Override
    public int computeVerticalScrollRange() {
        return super.computeVerticalScrollRange();
    }              

}
</code></pre>

<p>At last: the library provides the parallax effect. The effect in your video is a reverse parallax effect. To get the desired result, a small change is required in <code>ParallaxScrollView.onLayout()</code>. In place of <code>final int scrollYCenterOffset = -mScrollView.getScrollY()</code>, use <code>final int scrollYCenterOffset = mScrollView.getScrollY()</code>.</p>

<p>Modified library: <a href="http://ge.tt/5TLxqzr/v/0?c">Link</a>.</p>

<p>Demo project: <a href="http://ge.tt/1bP9rzr/v/0?c">Link</a>.</p>

<p>APK (revised / with ListView): <a href="http://ge.tt/6Lhvrzr/v/0?c">Link</a>.</p>
