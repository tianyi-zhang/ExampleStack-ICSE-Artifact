<p>I have not tried the subscription in app billing but according to my knowledge check my answer below.
 Make sure two thing your product key that you given for the product is correct. and use IabHelper.ITEM_TYPE_SUBS in the item type.</p>

<pre><code>  1) static final String SKU_SUBSCRIPTION = "your product id should be here";

  2) mHelper.launchPurchaseFlow(youractivity.this,
                            SKU_SUBSCRIPTION, IabHelper.ITEM_TYPE_SUBS, 
                            RC_REQUEST, mPurchaseFinishedListener, payload); 
</code></pre>

<p>please let me infirm it is working for you. Hope it will help you.</p>

<p>check IabHelper method:</p>

<pre><code>     // The listener registered on launchPurchaseFlow, which we have to call back when
   // the purchase finishes
   OnIabPurchaseFinishedListener mPurchaseListener;

   public void launchPurchaseFlow(Activity act, String sku, int requestCode, OnIabPurchaseFinishedListener listener) {
       launchPurchaseFlow(act, sku, requestCode, listener, "");
   }

   public void launchPurchaseFlow(Activity act, String sku, int requestCode, 
           OnIabPurchaseFinishedListener listener, String extraData) {
       launchPurchaseFlow(act, sku, ITEM_TYPE_INAPP, requestCode, listener, extraData); 
   }

   public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode, 
           OnIabPurchaseFinishedListener listener) {
       launchSubscriptionPurchaseFlow(act, sku, requestCode, listener, "");
   }

   public void launchSubscriptionPurchaseFlow(Activity act, String sku, int requestCode, 
           OnIabPurchaseFinishedListener listener, String extraData) {
       launchPurchaseFlow(act, sku, ITEM_TYPE_SUBS, requestCode, listener, extraData); 
   }

   /**
    * Initiate the UI flow for an in-app purchase. Call this method to initiate an in-app purchase,
    * which will involve bringing up the Google Play screen. The calling activity will be paused while
    * the user interacts with Google Play, and the result will be delivered via the activity's
    * {@link android.app.Activity#onActivityResult} method, at which point you must call
    * this object's {@link #handleActivityResult} method to continue the purchase flow. This method
    * MUST be called from the UI thread of the Activity.
    *
    * @param act The calling activity.
    * @param sku The sku of the item to purchase.
    * @param itemType indicates if it's a product or a subscription (ITEM_TYPE_INAPP or ITEM_TYPE_SUBS)
    * @param requestCode A request code (to differentiate from other responses --
    *     as in {@link android.app.Activity#startActivityForResult}).
    * @param listener The listener to notify when the purchase process finishes
    * @param extraData Extra data (developer payload), which will be returned with the purchase data
    *     when the purchase completes. This extra data will be permanently bound to that purchase
    *     and will always be returned when the purchase is queried.
    */
   public void launchPurchaseFlow(Activity act, String sku, String itemType, int requestCode,
                       OnIabPurchaseFinishedListener listener, String extraData) {
       checkSetupDone("launchPurchaseFlow");
       flagStartAsync("launchPurchaseFlow");
       IabResult result;

       if (itemType.equals(ITEM_TYPE_SUBS) &amp;&amp; !mSubscriptionsSupported) {
           IabResult r = new IabResult(IABHELPER_SUBSCRIPTIONS_NOT_AVAILABLE, 
                   "Subscriptions are not available.");
           if (listener != null) listener.onIabPurchaseFinished(r, null);
           return;
       }

       try {
           logDebug("Constructing buy intent for " + sku + ", item type: " + itemType);
           Bundle buyIntentBundle = mService.getBuyIntent(3, mContext.getPackageName(), sku, itemType, extraData);
           int response = getResponseCodeFromBundle(buyIntentBundle);
           if (response != BILLING_RESPONSE_RESULT_OK) {
               logError("Unable to buy item, Error response: " + getResponseDesc(response));

               result = new IabResult(response, "Unable to buy item");
               if (listener != null) listener.onIabPurchaseFinished(result, null);
               return;
           }

           PendingIntent pendingIntent = buyIntentBundle.getParcelable(RESPONSE_BUY_INTENT);
           logDebug("Launching buy intent for " + sku + ". Request code: " + requestCode);
           mRequestCode = requestCode;
           mPurchaseListener = listener;
           mPurchasingItemType = itemType;
           act.startIntentSenderForResult(pendingIntent.getIntentSender(),
                                          requestCode, new Intent(),
                                          Integer.valueOf(0), Integer.valueOf(0),
                                          Integer.valueOf(0));
       }
       catch (SendIntentException e) {
           logError("SendIntentException while launching purchase flow for sku " + sku);
           e.printStackTrace();

           result = new IabResult(IABHELPER_SEND_INTENT_FAILED, "Failed to send intent.");
           if (listener != null) listener.onIabPurchaseFinished(result, null);
       }
       catch (RemoteException e) {
           logError("RemoteException while launching purchase flow for sku " + sku);
           e.printStackTrace();

           result = new IabResult(IABHELPER_REMOTE_EXCEPTION, "Remote exception while starting purchase flow");
           if (listener != null) listener.onIabPurchaseFinished(result, null);
       }
   }
</code></pre>
