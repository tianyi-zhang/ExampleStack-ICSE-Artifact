<p>Pretty easy. No extra library is needed. Do:</p>

<pre><code>    onView(withId(R.id.recycler_view))
            .check(matches(atPosition(0, withText("Test Text"))));
</code></pre>

<p>with method you may put into your <code>Utils</code> class.</p>

<pre><code>public static Matcher&lt;View&gt; atPosition(final int position, @NonNull final Matcher&lt;View&gt; itemMatcher) {
    checkNotNull(itemMatcher);
    return new BoundedMatcher&lt;View, RecyclerView&gt;(RecyclerView.class) {
        @Override
        public void describeTo(Description description) {
            description.appendText("has item at position " + position + ": ");
            itemMatcher.describeTo(description);
        }

        @Override
        protected boolean matchesSafely(final RecyclerView view) {
            RecyclerView.ViewHolder viewHolder = view.findViewHolderForAdapterPosition(position);
            if (viewHolder == null) {
                // has no item on such position
                return false;
            }
            return itemMatcher.matches(viewHolder.itemView);
        }
    };
}
</code></pre>

<p>If your item may be not visible on the screen at first, then scroll to it before:</p>

<pre><code>    onView(withId(R.id.recycler_view))
            .perform(scrollToPosition(87))
            .check(matches(atPosition(87, withText("Test Text"))));
</code></pre>
