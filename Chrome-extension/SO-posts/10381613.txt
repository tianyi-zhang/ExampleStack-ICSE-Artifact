<p>You can use below code to search all image from SD Card .</p>

<pre><code>            private String SD_CARD_ROOT;
            File mFile=Environment.getExternalStorageDirectory();
    SD_CARD_ROOT=mFile.toString();


private List&lt;String&gt; FindFiles() {
    final List&lt;String&gt; tFileList = new ArrayList&lt;String&gt;();
    Resources resources = getResources();
    // array of valid image file extensions
    String[] imageTypes = resources.getStringArray(R.array.image);
    FilenameFilter[] filter = new FilenameFilter[imageTypes.length];

    int i = 0;
    for (final String type : imageTypes) {
        filter[i] = new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith("." + type);
            }
        };
        i++;
    }

    FileUtils fileUtils = new FileUtils();
    File[] allMatchingFiles = fileUtils.listFilesAsArray(
            new File(SD_CARD_ROOT), filter, -1);
    for (File f : allMatchingFiles) {
        tFileList.add(f.getAbsolutePath());
    }
    return tFileList;
}
</code></pre>

<p>in Resource Array for Image types:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
&lt;string-array name="image"&gt;
&lt;item&gt;bmp&lt;/item&gt;
&lt;item&gt;cmx&lt;/item&gt;
&lt;item&gt;cod&lt;/item&gt;
&lt;item&gt;gif&lt;/item&gt;
&lt;item&gt;ico&lt;/item&gt;
&lt;item&gt;ief&lt;/item&gt;
&lt;item&gt;jpe&lt;/item&gt;
&lt;item&gt;jpeg&lt;/item&gt;
&lt;item&gt;jpg&lt;/item&gt;
&lt;item&gt;jfif&lt;/item&gt;
&lt;item&gt;pbm&lt;/item&gt;
&lt;item&gt;pgm&lt;/item&gt;
&lt;item&gt;png&lt;/item&gt;
&lt;item&gt;pnm&lt;/item&gt;
&lt;item&gt;ppm&lt;/item&gt;
&lt;item&gt;ras&lt;/item&gt;
&lt;item&gt;rgb&lt;/item&gt;
&lt;item&gt;svg&lt;/item&gt;
&lt;item&gt;tif&lt;/item&gt;
&lt;item&gt;tiff&lt;/item&gt;
&lt;item&gt;xbm&lt;/item&gt;
&lt;item&gt;xpm&lt;/item&gt;
&lt;item&gt;xwd&lt;/item&gt;
&lt;/string-array&gt;
&lt;/resources&gt;
</code></pre>

<p>Hope this will help you to find images.</p>

<p>Here is missing class </p>

<pre><code>public class FileUtils {

        public void saveArray(String filename, List&lt;String&gt; output_field) {
             try {
                FileOutputStream fos = new FileOutputStream(filename);
                GZIPOutputStream gzos = new GZIPOutputStream(fos);
                ObjectOutputStream out = new ObjectOutputStream(gzos);
                out.writeObject(output_field);
                out.flush();
                out.close();
             }
             catch (IOException e) {
                 e.getStackTrace(); 
             }
          }

          @SuppressWarnings("unchecked")
        public List&lt;String&gt; loadArray(String filename) {
              try {
                FileInputStream fis = new FileInputStream(filename);
                GZIPInputStream gzis = new GZIPInputStream(fis);
                ObjectInputStream in = new ObjectInputStream(gzis);
                List&lt;String&gt; read_field = (List&lt;String&gt;)in.readObject();
                in.close();
                return read_field;
              }
              catch (Exception e) {
                  e.getStackTrace();
              }
              return null;
          }

        public File[] listFilesAsArray(File directory, FilenameFilter[] filter,
                int recurse) {
            Collection&lt;File&gt; files = listFiles(directory, filter, recurse);

            File[] arr = new File[files.size()];
            return files.toArray(arr);
        }

        public Collection&lt;File&gt; listFiles(File directory,
                FilenameFilter[] filter, int recurse) {

            Vector&lt;File&gt; files = new Vector&lt;File&gt;();

            File[] entries = directory.listFiles();

            if (entries != null) {
                for (File entry : entries) {
                    for (FilenameFilter filefilter : filter) {
                        if (filter == null
                                || filefilter
                                        .accept(directory, entry.getName())) {
                            files.add(entry);
                            Log.v("ImageViewFlipper", "Added: "
                                    + entry.getName());
                        }
                    }
                    if ((recurse &lt;= -1) || (recurse &gt; 0 &amp;&amp; entry.isDirectory())) {
                        recurse--;
                        files.addAll(listFiles(entry, filter, recurse));
                        recurse++;
                    }
                }
            }
            return files;
        }
    }
</code></pre>
