<p>In the end I didn't find a way to do what I wanted to do with only Jackson annotations, I fixed it by implementing a custom converter for retrofit like so:</p>

<pre><code>JacksonConverter matchItemConverter = new JacksonConverter(Utils.getHwObjectMapper());
RestAdapter restAdapter = new RestAdapter.Builder()
    .setEndpoint(URL)
    .setConverter(matchItemConverter)
    .build();
</code></pre>

<p>When creating the objectmapper, make sure to add the date format:</p>

<pre><code>public static ObjectMapper getHwObjectMapper() {
    ObjectMapper hWObjectMapper = new ObjectMapper();
    hWObjectMapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ENGLISH));
    return hWObjectMapper;
}
</code></pre>

<p>And make this your converter based on Jackson:</p>

<pre><code>public class JacksonConverter implements Converter {
private final ObjectMapper mapper;

public JacksonConverter(ObjectMapper mapper) {
    this.mapper = mapper;
}

@Override public Object fromBody(TypedInput body, Type type) throws ConversionException
{
    String charset = "UTF-8";
    if (body.mimeType() != null) {
        charset = MimeUtil.parseCharset(body.mimeType());
    }

    InputStreamReader isr = null;
    try {
        isr = new InputStreamReader(body.in(), charset);
        return mapper.readValue(isr, TypeFactory.rawClass(type));
    } catch (IOException e) {
        throw new ConversionException(e);
    } finally {
        if (isr != null) {
            try {
                isr.close();
            } catch (IOException ignored) {
                ignored.printStackTrace();
            }
        }
    }
}

@Override public TypedOutput toBody(Object object) {
    try {
        return new JsonTypedOutput(mapper.writeValueAsBytes(object));
    } catch (JsonProcessingException e) {
        throw new AssertionError(e);
    }
}

private static class JsonTypedOutput implements TypedOutput {
    private final byte[] jsonBytes;

    JsonTypedOutput(byte[] jsonBytes) {
        this.jsonBytes = jsonBytes;
    }

    @Override public String fileName() {
        return null;
    }

    @Override public String mimeType() {
        return "application/json; charset=UTF-8";
    }

    @Override public long length() {
        return jsonBytes.length;
    }

    @Override public void writeTo(OutputStream out) throws IOException {
        out.write(jsonBytes);
    }
}
}
</code></pre>
