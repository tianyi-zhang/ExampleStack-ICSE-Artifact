<p>Start with two versions of your layout file:</p>

<p>/res/layout/grid.xml</p>

<pre><code>   ...

    &lt;!-- full width --&gt;
    &lt;com.example.MyGridView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        ...
        /&gt;

   ...
</code></pre>

<p>/res/layout-land/grid.xml</p>

<pre><code>   ...

    &lt;!-- full height --&gt;
    &lt;com.example.MyGridView
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        ...
        /&gt;

   ...
</code></pre>

<p>You probably already have something like this.</p>

<p>Now in your <code>onMeasure()</code> override, the <code>match_parent</code> dimension will have a <code>MeasureSpec</code> mode of <code>EXACTLY</code> and the <code>wrap_content</code> dimension will have a <code>MeasureSpec</code> mode of <code>AT_MOST</code>.  You can use this to achieve your desired layout.</p>

<pre><code>@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

    int width = MeasureSpec.getSize(widthMeasureSpec);
    int height = MeasureSpec.getSize(heightMeasureSpec);
    int widthMode = MeasureSpec.getMode(widthMeasureSpec);
    int heightMode = MeasureSpec.getMode(heightMeasureSpec);


    if (widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode == MeasureSpec.AT_MOST) {
        // portrait
        super.onMeasure(widthMeasureSpec, widthMeasureSpec);

    } else if (heightMode == MeasureSpec.EXACTLY &amp;&amp; widthMode == MeasureSpec.AT_MOST) {
        // landscape
        super.onMeasure(heightMeasureSpec, heightMeasureSpec);

    } else {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }
}
</code></pre>

<hr>

<p>EDIT:  I found out that both modes can be AT_MOST depending on the <code>ViewGroup</code> container.   Please see my other answer for updated measuring code.</p>
