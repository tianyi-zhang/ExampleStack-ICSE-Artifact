<p>Quoting docs</p>

<p>We recommend XmlPullParser, which is an efficient and maintainable way to parse XML on Android</p>

<p><a href="http://developer.android.com/training/basics/network-ops/xml.html" rel="nofollow">http://developer.android.com/training/basics/network-ops/xml.html</a></p>

<p>You can use a XmlPullParser</p>

<p>In Activity</p>

<pre><code>   InputStream is = MainActivity.this.getResources()
                 .getAssets().open("xmlparser.xml"); 
   // local xml file in assests folder            
   ArrayList&lt;Entry&gt; entries= (ArrayList&lt;Entry&gt;) new ParserParsing().parse(is);  
</code></pre>

<p>Then  </p>

<pre><code>public class ParserParsing {
    private static final String ns = null;
public ArrayList&lt;Entry&gt; parse(InputStream in)
{ 
    ArrayList&lt;Entry&gt; list = null;

    try {
        XmlPullParser parser = Xml.newPullParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
        parser.setInput(in, null);
        parser.nextTag();
          list=readFeed(parser);
         for(int i=0;i&lt;list.size();i++)
         {
             Log.i(".......",list.get(i).lat);
             Log.i(".......",list.get(i).lng);
             Log.i(".......",list.get(i).icon);
         }
    } catch(Exception e){

    }
     return list;
}
private  ArrayList&lt;Entry&gt; readFeed(XmlPullParser parser) throws XmlPullParserException, IOException {

    ArrayList&lt;Entry&gt; entry= new ArrayList&lt;Entry&gt;();
parser.require(XmlPullParser.START_TAG, ns, "markers");
    while (parser.next() != XmlPullParser.END_TAG) {
        if (parser.getEventType() != XmlPullParser.START_TAG) {
            continue;
        }
        String name = parser.getName();
        Log.i("............",name);
        // Starts by looking for the entry tag
        if (name.equals("marker")) {
            entry.add(readMarker(parser));
        } else {
            skip(parser);
        }
    }  
    return entry;
}
private Entry readMarker(XmlPullParser parser) throws XmlPullParserException, IOException {
    parser.require(XmlPullParser.START_TAG, ns, "marker");
    String lat = null;
    String lng = null;
    String icon =null;
    while (parser.next() != XmlPullParser.END_TAG) {
        if (parser.getEventType() != XmlPullParser.START_TAG) {
            continue;
        }
        String name = parser.getName();
        Log.i("............",name);
        if (name.equals("lat")) {
           lat = readLat(parser);
        } else if (name.equals("lng")) {
            lng = readLng(parser);
        } else if (name.equals("icon")) {
            icon = readIcon(parser);
        } 
        else {
            skip(parser);
        }
    }
    return new Entry(lat,lng,icon);
}
private String readLat(XmlPullParser parser) throws IOException, XmlPullParserException {
    parser.require(XmlPullParser.START_TAG, ns, "lat");
    String lat = readText(parser);
    parser.require(XmlPullParser.END_TAG, ns, "lat");
    return lat;
}
private String readLng(XmlPullParser parser) throws IOException, XmlPullParserException {
    parser.require(XmlPullParser.START_TAG, ns, "lng");
    String lng = readText(parser);
    parser.require(XmlPullParser.END_TAG, ns, "lng");
    return lng;
}
private String readIcon(XmlPullParser parser) throws IOException, XmlPullParserException {
    parser.require(XmlPullParser.START_TAG, ns, "icon");
    String icon = readText(parser);
    parser.require(XmlPullParser.END_TAG, ns, "icon");
    return icon;
}


     private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {
            String result = "";
            if (parser.next() == XmlPullParser.TEXT) {
                result = parser.getText();
                parser.nextTag();
            }
            return result;
        }
        private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                throw new IllegalStateException();
            }
            int depth = 1;
            while (depth != 0) {
                switch (parser.next()) {
                case XmlPullParser.END_TAG:
                    depth--;
                    break;
                case XmlPullParser.START_TAG:
                    depth++;
                    break;
                }
            }
         }    
}
</code></pre>

<p>Entry.java</p>

<pre><code>public  class Entry {
    public final String lat;
    public final String lng;
    public final String icon;


    public Entry(String lat, String lng,String icon) {
        this.lat = lat;
        this.lng = lng;
        this.icon =icon; 

}
}
</code></pre>

<p>The Log</p>

<pre><code>01-12 14:36:58.051: I/.......(2004): 51.60002
01-12 14:36:58.051: I/.......(2004): 0.518862
01-12 14:36:58.051: I/.......(2004): landmark
</code></pre>

<p>To dispaly marker</p>

<pre><code>    Double latitude = Double.valueOf(entries.get(0).lat);
    Double longitude = Double.valueOf(entries.get(0).lng);
    String icon = entries.get(0).icon;
    LatLng lng = new LatLng(latitude,longitude);

   Marker destination= googlemap.addMarker(new MarkerOptions()
                .position(lng)
                .title(icon)
                .snippet("My Location");
</code></pre>
