<p>I made a simple counter:</p>

<pre><code>public class SimpleChannel extends NioSocketChannel {
    protected static final AtomicLong nextId = new AtomicLong(0);

    protected long id = nextId.getAndIncrement();

    public SimpleChannel() {
    }

    public SimpleChannel(SocketChannel socket) {
        super(socket);
    }

    public SimpleChannel(Channel parent, Integer id, SocketChannel socket) {
        super(parent, id, socket);
    }

    public long getId() {
        return id;
    }

}
</code></pre>

<p>Setting custom class to Bootstrap:</p>

<pre><code>EventLoopGroup workerGroup = new NioEventLoopGroup();
Bootstrap clientFactory = new Bootstrap();
clientFactory.group(workerGroup);
clientFactory.channel(SimpleChannel.class);
</code></pre>

<p>For server a bit more difficult:</p>

<pre><code>public class SimpleServerChannel extends NioServerSocketChannel {
    private static final InternalLogger log = InternalLoggerFactory.getInstance(HttpServerChannel.class);

    @Override
    protected int doReadMessages(List&lt;Object&gt; buf) throws Exception {
        SocketChannel ch = javaChannel().accept();

        try {
            if (ch != null) {
                buf.add(new SimpleChannel(this, ch));
                return 1;
            }
        } catch (Throwable t) {
            log.warn("Failed to create a new channel from an accepted socket.", t);

            try {
                ch.close();
            } catch (Throwable t2) {
                log.warn("Failed to close a socket.", t2);
            }
        }

        return 0;
    }

}
</code></pre>

<p>Setting custom class to ServerBootstrap:</p>

<pre><code>EventLoopGroup bossGroup = new NioEventLoopGroup();
EventLoopGroup workerGroup = new NioEventLoopGroup();
ServerBootstrap b = new ServerBootstrap();
b.group(bossGroup, workerGroup);
b.channel(SimpleServerChannel.class);
</code></pre>
