<p>this is how java servlets parse the GET parameters</p>

<p><a href="http://grepcode.com/file/repo1.maven.org/maven2/javax.servlet/servlet-api/2.5/javax/servlet/http/HttpUtils.java#HttpUtils.parseQueryString%28java.lang.String%29" rel="nofollow">http://grepcode.com/file/repo1.maven.org/maven2/javax.servlet/servlet-api/2.5/javax/servlet/http/HttpUtils.java#HttpUtils.parseQueryString%28java.lang.String%29</a></p>

<pre><code>static public Hashtable parseQueryString(String s) {

    String valArray[] = null;

    if (s == null) {
        throw new IllegalArgumentException();
    }
    Hashtable ht = new Hashtable();
    StringBuffer sb = new StringBuffer();
    StringTokenizer st = new StringTokenizer(s, "&amp;");
    while (st.hasMoreTokens()) {
        String pair = (String)st.nextToken();
        int pos = pair.indexOf('=');
        if (pos == -1) {
        // XXX
        // should give more detail about the illegal argument
        throw new IllegalArgumentException();
        }
        String key = parseName(pair.substring(0, pos), sb);
        String val = parseName(pair.substring(pos+1, pair.length()), sb);
        if (ht.containsKey(key)) {
        String oldVals[] = (String []) ht.get(key);
        valArray = new String[oldVals.length + 1];
        for (int i = 0; i &lt; oldVals.length; i++) 
            valArray[i] = oldVals[i];
        valArray[oldVals.length] = val;
        } else {
        valArray = new String[1];
        valArray[0] = val;
        }
        ht.put(key, valArray);
    }
    return ht;
    }
</code></pre>

<p>of course, since this method is public, you may want just to use HttpUtils directly :-)</p>

<p>UPDATE: for other low-level http parsing, I suggest <a href="http://hc.apache.org/index.html" rel="nofollow">http://hc.apache.org/index.html</a> or <a href="http://www.java2s.com/Code/Java/Network-Protocol/HttpParser.htm" rel="nofollow">http://www.java2s.com/Code/Java/Network-Protocol/HttpParser.htm</a></p>
