<p>Here was my solution that incorporates some of the ideas in this thread and peiced together with code from around the net.
All I do call this function and it sets the default Trust Manager and HostName Verifier for HttpsURLConnection. This might be undesirable for some because it will effect all HttpsURLConnections but I'm just writing a simple proxy so it worked for me.</p>

<pre><code>private void setTrustAllCerts() throws Exception
{
 TrustManager[] trustAllCerts = new TrustManager[]{
  new X509TrustManager() {
   public java.security.cert.X509Certificate[] getAcceptedIssuers() {
    return null;
   }
   public void checkClientTrusted( java.security.cert.X509Certificate[] certs, String authType ) { }
   public void checkServerTrusted( java.security.cert.X509Certificate[] certs, String authType ) { }
  }
 };

 // Install the all-trusting trust manager
 try {
  SSLContext sc = SSLContext.getInstance( "SSL" );
  sc.init( null, trustAllCerts, new java.security.SecureRandom() );
  HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
  HttpsURLConnection.setDefaultHostnameVerifier( 
   new HostnameVerifier() {
    public boolean verify(String urlHostName, SSLSession session) {
     return true;
    }
   });
 }
 catch ( Exception e ) {
  //We can not recover from this exception.
  e.printStackTrace();
 }
}
</code></pre>
