<p>This is an old thread, but I just wanted to add the solution I'm using, in case someone might benefit from it. I experienced the <strong>weird scaling problem</strong> on certain pages when zoomed all the way out, and unfortunately, it's difficult to detect in JavaScript if the page is zoomed all the way out. The solution to this is to detect whether the scale change is large enough before resizing the page. </p>

<p>The following solution works on KitKat and Lollipop and <strong>doesn't have the annoying gradual zoom out</strong> that I was seeing on some websites.</p>

<pre><code>class MyWebViewClient extends WebViewClient {
    private boolean mIsRunning = false;
    private float mZoomScale = 0.0f;
    private static final String REFLOW_TEXT = "javascript:document.getElementsByTagName('body')[0].style.width=window.innerWidth+'px';"

    @Override
    public void onScaleChanged(final WebView view, final float oldScale, final float newScale) {
        if (view.isShown() &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) {
            if (mIsRunning)    // Don't run if there's a resize runnable in the queue
                return;
            if (Math.abs(mZoomScale - newScale) &gt; 0.01f) {    // This stops the gradual zoom
                mIsRunning = view.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mZoomScale = newScale;
                        view.evaluateJavascript(REFLOW_TEXT, null);
                        mIsRunning = false;
                    }
                }, 100);
            }
        }
    }
}
</code></pre>

<p>Thanks to marcin.kosiba and user3185518, whose solutions I combined and modified to build this answer.</p>
