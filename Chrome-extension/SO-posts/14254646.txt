<p>As @Janmejoy said, lazy loader is better choice, at least I think so. Because I had the same <a href="http://stackoverflow.com/questions/14027888/slow-scrolling-when-using-baseadapter-and-imageview-helper-for-downloading-image">issue</a> few weeks ago. What I did was use Lazy loader, and ViewHolder. For a start, I didn't have any problems with loading small images. However, I found that larger images seemed not to be scaled correctly, and shown badly. Then I made some changes to Lazy loader so it can scale images properly. My scaling code is based on <a href="https://github.com/koush/UrlImageViewHelper" rel="nofollow">this</a></p>

<p>In the ImageLoader class, I defined a variable <code>DisplayMetrics disMetrics;</code> and inside the constructor I did this: <code>disMetrics = new DisplayMetrics();</code></p>

<p>Next step was making some changes in <code>decodeFile(File file)</code> method:</p>

<pre><code>//decodes image and scales it to reduce memory consumption
private Bitmap decodeFile(File f){
    try {
        //decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        FileInputStream stream1=new FileInputStream(f);
        BitmapFactory.decodeStream(stream1,null,o);
        stream1.close();

                   // my custom scaling
        int tw = disMetrics.widthPixels;
        int th = disMetrics.heightPixels;
        int targetWidth = tw &lt;= 0 ? Integer.MAX_VALUE : tw;
        int targetHeight = th &lt;= 0 ? Integer.MAX_VALUE : th;

        int scale = 0;
        while ((o.outWidth &gt;&gt; scale) &gt; targetWidth || (o.outHeight &gt;&gt; scale) &gt; targetHeight) {
            scale++;
        }
                 // native scaling
        //Find the correct scale value. It should be the power of 2.
        //final int REQUIRED_SIZE=70;
        //int width_tmp=o.outWidth, height_tmp=o.outHeight;
        //int scale=1;
        //while(true){
        //  if(width_tmp/2&lt;REQUIRED_SIZE || height_tmp/2&lt;REQUIRED_SIZE)
        //      break;
        //  width_tmp/=2;
        //  height_tmp/=2;
        //  scale*=2;
        //}

        //decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize=scale;
        o2.inSampleSize = 1 &lt;&lt; scale;
        FileInputStream stream2=new FileInputStream(f);
        Bitmap bitmap=BitmapFactory.decodeStream(stream2, null, o2);
        stream2.close();
        return bitmap;
    } catch (FileNotFoundException e) {
    }
    catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>Eventually, I got the result I wanted. 
I hope it helps you too.</p>

<p>Cheers.</p>
