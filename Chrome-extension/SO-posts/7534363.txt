<p>i fixed this but forgot the fix.  this code does work properly though:</p>

<pre><code>import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.widget.TextView;

public class SqlLiteHelper extends SQLiteOpenHelper {

    private static final String DB_NAME = "tekkenmovelist";

    private static String DB_PATH = "/&lt;path deleted&gt;/";

    private Context context;

    private SQLiteDatabase DB;

    public SqlLiteHelper(Context context) {
        super(context, DB_NAME, null, 1);
        this.context = context;
    }

    public List&lt;TextView&gt; getTextViews(String charName, int consoleSwitch,
            int textSize, String moveCatagory, int filterEscape, int filterDmg,
            String catMask) {

        List&lt;TextView&gt; moveList = new ArrayList&lt;TextView&gt;();
        String movesSql = new String();

        movesSql = "SELECT * FROM Moves" + " WHERE charName = '" + charName
                + "' and moveCatagory = '" + moveCatagory + "'";

        DB = getWritableDatabase();

        String textviewText = new String();
        Cursor movesCursor = DB.rawQuery(movesSql, null);

        if (movesCursor.moveToFirst()) {
            do {
                String moveId = movesCursor.getString(movesCursor
                        .getColumnIndex("_id"));

                String moveCommand = new String("");
                if (!movesCursor.isNull(movesCursor.getColumnIndex("moveCommand"))){

                moveCommand = movesCursor.getString(movesCursor
                        .getColumnIndex("moveCommand"));
                }


                String moveName = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveName"))) {
                moveName = movesCursor.getString(movesCursor
                        .getColumnIndex("moveName"));
                }

                String moveType = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveType"))) {
                moveType = movesCursor.getString(movesCursor
                        .getColumnIndex("moveType"));
                }

                String moveDmg = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveDmg"))) {
                moveDmg = movesCursor.getString(movesCursor
                        .getColumnIndex("moveDmg"));
                }

                String moveEscape = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveEscape"))) {
                moveEscape = movesCursor.getString(movesCursor
                        .getColumnIndex("moveEscape"));
                }

                String moveProperties = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveProperties"))) {
                moveProperties = movesCursor.getString(movesCursor
                        .getColumnIndex("moveProperties"));
                }

                String moveStance = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveStance"))) {
                    moveStance = movesCursor.getString(movesCursor
                            .getColumnIndex("moveStance"));
                }

                String moveHitRange = new String("");
                if (!movesCursor.isNull(movesCursor
                        .getColumnIndex("moveHitRange"))) {
                    moveHitRange = movesCursor.getString(movesCursor
                            .getColumnIndex("moveHitRange"));
                }

                String moveHits = new String("");
                if (!movesCursor.isNull(movesCursor.getColumnIndex("moveHits"))) {
                    moveHits = movesCursor.getString(movesCursor
                            .getColumnIndex("moveHits"));
                }

                if (consoleSwitch == 1) {
                    // PS3
                    moveCommand = moveCommand.replaceAll("1", "(?)");
                    moveCommand = moveCommand.replaceAll("2", "(?)");
                    moveCommand = moveCommand.replaceAll("3", "(X)");
                    moveCommand = moveCommand.replaceAll("4", "(O)");
                    moveEscape = moveEscape.replaceAll("1", "(?)");
                    moveEscape = moveEscape.replaceAll("2", "(?)");
                    moveEscape = moveEscape.replaceAll("3", "(X)");
                    moveEscape = moveEscape.replaceAll("4", "(O)");

                } else if (consoleSwitch == 0) {
                    // XBOX
                    moveCommand = moveCommand.replaceAll("1", "(X)");
                    moveCommand = moveCommand.replaceAll("2", "(Y)");
                    moveCommand = moveCommand.replaceAll("3", "(A)");
                    moveCommand = moveCommand.replaceAll("4", "(B)");
                    moveEscape = moveEscape.replaceAll("1", "(X)");
                    moveEscape = moveEscape.replaceAll("2", "(Y)");
                    moveEscape = moveEscape.replaceAll("3", "(A)");
                    moveEscape = moveEscape.replaceAll("4", "(B)");
                }

                    if (!moveCommand.equals("")) {
                        textviewText = "|" + moveCommand;
                    }
                    if (!moveName.equals("")) {
                        textviewText = textviewText + " |Name: " + moveName;
                    }
                    if (!moveHits.equals("")) {
                        textviewText = textviewText + " |Hits: " + moveHits;
                    }
                    if (!moveType.equals("")) {
                        textviewText = textviewText + " |Type: " + moveType;
                    }
                    if (!moveStance.equals("")) {
                        textviewText = textviewText + " |Stance: " + moveStance;
                    }
                    if (!moveDmg.equals("") &amp;&amp; filterDmg != 1) {
                        textviewText = textviewText + " |Dmg: " + moveDmg;
                    }
                    if (!moveHitRange.equals("")) {
                        textviewText = textviewText + " |Hit Range: "+ moveHitRange;
                    }
                    if (!moveEscape.equals("") &amp;&amp; !moveEscape.equals("None")
                            &amp;&amp; filterEscape != 1) {
                        textviewText = textviewText + " |Escape: " + moveEscape;
                    }
                    if (!moveProperties.equals("")) {
                        textviewText = textviewText + " |Properties: "+ moveProperties;
                    }

                TextView Move = new TextView(context);
                Move.setText(textviewText);
                textviewText="";
                if (textSize == 1) {
                    Move.setTextSize(20);
                }
                moveList.add(Move);
            } while (movesCursor.moveToNext());
        }
        movesCursor.close();

        String footnoteSql = "SELECT footnoteText FROM footnotes WHERE charname = '"
                + charName + "' and moveCatagory = '" + moveCatagory + "'";
        Cursor footnoteCursor = DB.rawQuery(footnoteSql, null);
        if (footnoteCursor.moveToFirst()) {
            do {
                TextView footnoteMove = new TextView(context);
                String footnoteBodyText = footnoteCursor
                        .getString(footnoteCursor
                                .getColumnIndex("footnoteText"));
                String footnoteText = String.format("\nFOOTNOTES: \n%s",
                        footnoteBodyText);
                footnoteMove.setText(footnoteText);
                moveList.add(footnoteMove);
            } while (footnoteCursor.moveToNext());
        }
        footnoteCursor.close();

        DB.close();
        return moveList;
    }



    public List&lt;String&gt; getCatagories(String charName) {
        DB = getWritableDatabase();
        List&lt;String&gt; catagories = new ArrayList&lt;String&gt;();
        String catagory = "SELECT moveCatagory FROM characters WHERE charname = '"
                + charName + "'";
        Cursor catagoriesCursor = DB.rawQuery(catagory, null);
        if (catagoriesCursor.moveToFirst()) {
            do {
                String currentCatagory = catagoriesCursor
                        .getString(catagoriesCursor
                                .getColumnIndex("moveCatagory"));
                catagories.add(currentCatagory);
            } while (catagoriesCursor.moveToNext());
        }
        catagoriesCursor.close();
        DB.close();
        return catagories;
    }


    @Override
    public void onCreate(SQLiteDatabase db) {

    }

    public boolean isDataBaseExist() {
        File dbFile = new File(DB_PATH+DB_NAME);
        return dbFile.exists();
        }
    public void copyDataBase() throws IOException {
        InputStream myInput = context.getAssets().open(DB_NAME);

        File f = new File( DB_PATH );
        if ( !f.exists() )
            f.mkdir();

        String outFileName = DB_PATH + DB_NAME;
        OutputStream myOutput = new FileOutputStream(outFileName);
        byte[] buffer = new byte[1024];
        int length;
        while ((length = myInput.read(buffer)) &gt; 0) {
                        myOutput.write(buffer, 0, length);
        }
                myOutput.flush();
                myOutput.close();
                myInput.close();
        }




    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        DB = getWritableDatabase();
        File f = new File( DB_PATH+DB_NAME );
        if ( !f.exists() )
            f.mkdir();
        f.delete();
        try {
            copyDataBase();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        DB.close();

    }

}
</code></pre>
