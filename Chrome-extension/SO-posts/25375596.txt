<p>As mentioned in a comment, your String comparisons in <code>makeHttpRequest</code> (for example, <code>if(method == "POST")</code>) are wrong.</p>

<p>Since they would always return false, <code>is</code> won't be initialized, so later passing it to <code>InputStreamReader</code> is the probable cause of your <code>NullPointerException</code> :</p>

<pre><code>BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "iso-8859-1"), 8);
</code></pre>

<p>If that's not the cause of the <code>NullPointerException</code>, the cause is probably calling :</p>

<pre><code>is.close();
</code></pre>

<p>when <code>is</code> is not initialized.</p>

<p>Use <code>if (method.equalsIgnoreCase("POST"))</code> to fix your problem. </p>

<p>In addition, I would add some null checks, just to be safe :</p>

<pre><code>// function get json from url
// by making HTTP POST or GET mehtod
public JSONObject makeHttpRequest(String url, String method,
                                  List&lt;NameValuePair&gt; params) {

    // Making HTTP request
    try {

        // check for request method
        if (method.equalsIgnoreCase("POST")) {
            // request method is POST
            // defaultHttpClient
            DefaultHttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params));

            HttpResponse httpResponse = httpClient.execute(httpPost);
            HttpEntity httpEntity = httpResponse.getEntity();
            is = httpEntity.getContent();

        } else if (method.equalsIgnoreCase("GET")) {
            // request method is GET
            DefaultHttpClient httpClient = new DefaultHttpClient();
            String paramString = URLEncodedUtils.format(params, "utf-8");
            url += "?" + paramString;
            HttpGet httpGet = new HttpGet(url);

            HttpResponse httpResponse = httpClient.execute(httpGet);
            HttpEntity httpEntity = httpResponse.getEntity();
            is = httpEntity.getContent();
        }

    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (ClientProtocolException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    if (is != null) {
      try {
        BufferedReader reader = new BufferedReader(new InputStreamReader(
                is, "iso-8859-1"), 8);
        StringBuilder sb = new StringBuilder();
        String line = null;
        while ((line = reader.readLine()) != null) {
            sb.append(line + "\n");
        }
        is.close();
        json = sb.toString();
      } catch (Exception e) {
        Log.e("Buffer Error", "Error converting result " + e.toString());
      }
    }
    // try parse the string to a JSON object
    if (json != null) {
      try {
        jObj = new JSONObject(json);
      } catch (JSONException e) {
        Log.e("JSON Parser", "Error parsing data " + e.toString());
      }
    }

    // return JSON String
    return jObj;

}
</code></pre>
