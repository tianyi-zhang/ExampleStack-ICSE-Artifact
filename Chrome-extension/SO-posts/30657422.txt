<p>What you have to do is to make a Custom <code>ListView</code> with your own <code>row_layout.xml</code> file, a <code>CustomListViewObject</code> that has a <code>boolean</code> to check if the element is clicked or not, and lastly, a <code>CustomListView</code> to check if the row element is selected or not.</p>

<p>Your row layout <code>row_layout.xml</code>:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="horizontal"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="5dp"&gt;

    &lt;TextView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:textSize="12dp"
        android:text="Large Text"
        android:id="@+id/textfield"/&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>This is how your row class should look like:</p>

<pre><code>public class CustomRowClass {

    private String input;
    private boolean selected;

    public BallotEntryClass() {
    }

    public BallotEntryClass(String input, boolean selected) {
        this.input = input;
        this.selected = selected;
    }

    //setters and getters here
}
</code></pre>

<p>And finally, your adapter:</p>

<pre><code>public class CustomListViewAdapter extends BaseAdapter {

    private ArrayList&lt;CustomRowClass&gt; listData;
    private LayoutInflater layoutInflater;
    private Context context;

    public CustomListViewAdapterBallot(Context context, ArrayList&lt;CustomRowClass&gt; listData) {
        this.listData = listData;
        layoutInflater = LayoutInflater.from(context);
        this.context = context;
    }

    @Override
    public int getCount() {
        return listData.size();
    }

    @Override
    public Object getItem(int position) {
        return listData.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;

        if (convertView == null) {

            convertView = layoutInflater.inflate(R.layout.row_layout, null);
            holder = new ViewHolder();

            holder.input = (TextView) convertView.findViewById(R.id.textfield);

            convertView.setTag(holder);
        }
        else {
            holder = (ViewHolder) convertView.getTag();
        }

        holder.textfield.setText(listData.get(position).getInput());

        //check here if state = 1 which means selected state
        if(listData.get(position).isSelected()){
            convertView.setBackgroundColor(Color.GREEN);
        }
        else{
            convertView.setBackgroundColor(Color.WHITE);
        }

        return convertView;
    }

    static class ViewHolder {
        TextView input;
    }
}
</code></pre>

<p>And that's it. To use this, do it as such:</p>

<pre><code>ListView sampleListView = (ListView) findViewById(R.id.listView);

//create your listView with your custom object
ArrayList&lt;CustomRowClass&gt; data = new ArrayList&lt;&gt;();


for(int i = 0 ; i &lt; 10 ; i ++){
    CustomRowClass entry = new CustomRowClass("Name " + i, false);
    data.add(entry);
}

//create your adapter, use the nameAndAgeList ArrayList
CustomListViewAdapter customAdapter = new CustomListViewAdapter(this, data);

//get your listView and use your adapter
listView.setAdapter(sampleListView);

listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        CustomRowClass selection = (CustomRowClass) listView.getItemAtPosition(position);
        selection.setSelected(true);
        adapter.notifyDataSetChanged();
    }
});
</code></pre>
