<p>The default (natural) ordering for <code>Java</code> <code>Strings</code> is <a href="https://en.wikipedia.org/wiki/Lexicographical_order" rel="nofollow">lexicographical</a>, which means <code>Strings</code> are ordered alphabetically of their <em>component letters</em> (character by character comparison). From <code>String.compareTo</code> docs:</p>

<blockquote>
  <p>[...] If they (Strings) have different characters at one or more index positions, 
  let k be the smallest such index; then the string whose character at position k has the<br>
  smaller value, as determined by using the &lt; operator, lexicographically
  precedes the other string.</p>
</blockquote>

<p>As ColinD suggests you will need an implementation of a <code>Comparator</code> that supports alphanumeric sorting of <code>Strings</code>. Here is an example:</p>

<pre><code>    List&lt;Bean&gt; lb = new ArrayList&lt;Bean&gt;() {{
            add(new Bean("This is 1"));
            add(new Bean("This is 10"));
            add(new Bean("This is 11"));
            add(new Bean("This is 2"));
        }};
    final AlphaNumericComparator comparator= new AlphaNumericComparator();
    Ordering&lt;Bean&gt; nameOrdering = new Ordering&lt;Bean&gt;() {
        @Override public int compare(Bean left, Bean right) {
            return comparator.compare(left.getShape(),right.getShape());
        }
    };
    ImmutableSortedSet&lt;Bean&gt; sortedShapes = ImmutableSortedSet.orderedBy(nameOrdering).addAll(lb).build();
    List&lt;Bean&gt; orderedList = new ArrayList&lt;&gt;();
    orderedList.addAll(sortedShapes);
    System.out.println("orderedList:" + orderedList);
</code></pre>

<p>The <code>AlphaNumericComparator</code> (by Pierre-Luc Paour):</p>

<pre><code>public class AlphaNumericComparator implements Comparator {
    int compareRight(String a, String b) {
        int bias = 0;
        int ia = 0;
        int ib = 0;
        for (; ; ia++, ib++) {
            char ca = charAt(a, ia);
            char cb = charAt(b, ib);
            if (!Character.isDigit(ca) &amp;&amp; !Character.isDigit(cb))
                return bias;
            else if (!Character.isDigit(ca))
                return -1;
            else if (!Character.isDigit(cb))
                return +1;
            else if (ca &lt; cb)
                if (bias == 0)
                    bias = -1;
                else if (ca &gt; cb)
                    if (bias == 0)
                        bias = +1;
                    else if (ca == 0 &amp;&amp; cb == 0)
                        return bias;
        }
    }

    public int compare(Object o1, Object o2) {
        String a = o1.toString();
        String b = o2.toString();
        int ia = 0, ib = 0;
        int nza = 0, nzb = 0;
        char ca, cb;
        int result;

        while (true) {
            nza = nzb = 0;
            ca = charAt(a, ia);
            cb = charAt(b, ib);
            while (Character.isSpaceChar(ca) || ca == '0') {
                if (ca == '0')
                    nza++;
                else
                    nza = 0;
                ca = charAt(a, ++ia);
            }

            while (Character.isSpaceChar(cb) || cb == '0') {
                if (cb == '0')
                    nzb++;
                else
                    nzb = 0;
                cb = charAt(b, ++ib);
            }
            if (Character.isDigit(ca) &amp;&amp; Character.isDigit(cb))
                if ((result = compareRight(a.substring(ia), b.substring(ib))) != 0)
                    return result;

            if (ca == 0 &amp;&amp; cb == 0)
                return nza - nzb;
            if (ca &lt; cb)
                return -1;
            else if (ca &gt; cb)
                return +1;
            ++ia;
            ++ib;
        }
    }

    static char charAt(String s, int i) {
        if (i &gt;= s.length()) {
            return 0;
        } else
            return s.charAt(i);
    }
}
</code></pre>
