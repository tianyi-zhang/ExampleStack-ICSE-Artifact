<p>Its support bluetooth chat</p>

<pre><code> package com.example.bluetoothchat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.UUID;
import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View.OnClickListener;
import android.view.View;
import android.view.View.OnKeyListener;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.AdapterView.OnItemClickListener;

public class MainActivity extends Activity {
private static int DISCOVERY_REQUEST = 1;
private Handler handler = new Handler();
 private ArrayList&lt;BluetoothDevice&gt; foundDevices;
private ArrayAdapter&lt;BluetoothDevice&gt; aa;
private ListView list;
private BluetoothAdapter bluetooth;
private BluetoothSocket socket;
private UUID uuid = UUID.fromString("a60f35f0-b93a-11de-8a39-08002009c666");

 @Override


 public void onCreate(Bundle savedInstanceState) {


super.onCreate(savedInstanceState);
setContentView(R.layout.main);
foundDevices=new ArrayList&lt;BluetoothDevice&gt;();


bluetooth = BluetoothAdapter.getDefaultAdapter();  


searchPairedDevice();


listenPairedDevice();

displayDeviceLists();

forExit();
  }
//---------------------------------------------------------------------------------------------------- 
 private void displayDeviceLists() {
     aa = new ArrayAdapter&lt;BluetoothDevice&gt;(this,android.R.layout.simple_list_item_1, foundDevices);

    list = (ListView)findViewById(R.id.list_discovered);    
    list.setAdapter(aa);

    list.setOnItemClickListener(new OnItemClickListener() {
      public void onItemClick(AdapterView&lt;?&gt; arg0, View view, int index, long arg3) {
        AsyncTask&lt;Integer, Void, Void&gt; connectTask =  new AsyncTask&lt;Integer, Void, Void&gt;() { 
            @Override
            protected Void doInBackground(Integer... params) {
              try {
                BluetoothDevice device = foundDevices.get(params[0]);
                socket = device.createRfcommSocketToServiceRecord(uuid);
                socket.connect();
                } catch (IOException e)
                { Log.d("BLUETOOTH_CLIENT", e.getMessage());
              }
              return null;
            }

            @Override
            protected void onPostExecute(Void result) {
              changeLayout();
            }
          };
        connectTask.execute(index);
      }      
    });

     }
    //------------------------------------------------------------------------------------------------------- 

 private void searchPairedDevice() {

     Button searchBtn = (Button)findViewById(R.id.button_search);

     searchBtn.setOnClickListener(new OnClickListener() {
       public void onClick(View view) {
         registerReceiver(discoveryResult, new IntentFilter(BluetoothDevice.ACTION_FOUND));

         if (!bluetooth.isDiscovering()) {

           foundDevices.clear();
           bluetooth.startDiscovery();
         }
       }
     });
      }
 BroadcastReceiver discoveryResult = new BroadcastReceiver() {
     @Override
      public void onReceive(Context context, Intent intent) {

         String action = intent.getAction();
            // When discovery finds a device  the if statement added later by MR.
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
        //added later by MR     
         bluetooth.cancelDiscovery();
     BluetoothDevice remoteDevice;
      remoteDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
      if (bluetooth.getBondedDevices().contains(remoteDevice)) {  
      foundDevices.add(remoteDevice);
      aa.notifyDataSetChanged();
      //added later by MR
      clearAbortBroadcast ();
      }
     }
     }
      };
 //-------------------------------------------------------------------------------------------------------
private void listenPairedDevice() {
Button listenBtn = (Button)findViewById(R.id.button_listen);
listenBtn.setOnClickListener(new OnClickListener() {
  public void onClick(View view) {
    Intent disc = new Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);
    startActivityForResult(disc, DISCOVERY_REQUEST);     
 }
 });
}
@Override
 protected void onActivityResult(int requestCode, int resultCode, Intent data) {
 if (requestCode == DISCOVERY_REQUEST) {
boolean isDiscoverable = resultCode &gt; 0;
 if (isDiscoverable) {
 String name = "bluetoothserver";
 try {
final BluetoothServerSocket btserver = bluetooth.listenUsingRfcommWithServiceRecord(name, uuid);


      AsyncTask&lt;Integer, Void, BluetoothSocket&gt; acceptThread = new AsyncTask&lt;Integer, Void, BluetoothSocket&gt;() {

        @Override
        protected BluetoothSocket doInBackground(Integer... params) {
          try {

             socket = btserver.accept();
            return socket;
             } catch (IOException e) {
            Log.d("BLUETOOTH", e.getMessage());            
          }
          finally {
            //close statement added later by MR
              try{
              btserver.close();
              } catch (IOException e){

              }
          }
          return null;
        }

        @Override
        protected void onPostExecute(BluetoothSocket result) {
          if (result != null)
            changeLayout();
        }            
      };          
      acceptThread.execute(resultCode);
    } catch (IOException e) {
      Log.d("BLUETOOTH", e.getMessage());            
    }
  }
}

//------------------------------------------------------------------------------------------------------
 }


private void changeLayout() { 

final TextView messageText = (TextView)findViewById(R.id.text_messages);
final EditText textEntry = (EditText)findViewById(R.id.text_message);
messageText.setEnabled(true);
messageText.setVisibility(View.VISIBLE);
list.setVisibility(View.GONE);
textEntry.setEnabled(true);

textEntry.setOnKeyListener(new OnKeyListener() {
  public boolean onKey(View view, int keyCode, KeyEvent keyEvent) {
    if ((keyEvent.getAction() == KeyEvent.ACTION_DOWN) &amp;&amp;
        (keyCode == KeyEvent.KEYCODE_ENTER)) {
      sendMessage(socket, textEntry.getText().toString());
      textEntry.setText("");
      return true;
    }
    return false;
  }      
});
BluetoothSocketListener bsl = new BluetoothSocketListener(socket, handler, messageText);
Thread messageListener = new Thread(bsl);
messageListener.start();

}

//----------------------------------------------------------------------------------------------------

 private void sendMessage(BluetoothSocket socket, String msg) {
 OutputStream outStream;
  try {

  outStream = socket.getOutputStream();
  byte[] byteString = (msg + " ").getBytes();
  byteString[byteString.length - 1] = 0;
  outStream.write(byteString);
} catch (IOException e) {
  Log.d("BLUETOOTH_COMMS", e.getMessage());
}    

 }

//----------------------------------------------------------------------------------------------------


private class MessagePoster implements Runnable {

private TextView textView;
private String message;

public MessagePoster(TextView textView, String message) {
  this.textView = textView;
  this.message = message;
}

public void run() {
  textView.setText(message);
}     

}
//-------------------------------------------------------------------------------
private class BluetoothSocketListener implements Runnable {

  private BluetoothSocket socket;
  private TextView textView;
  private Handler handler;

  public BluetoothSocketListener(BluetoothSocket socket, 
                                 Handler handler, TextView textView) {
    this.socket = socket;
    this.textView = textView;
    this.handler = handler;
  }

public void run() {
  int bufferSize = 1024;
  byte[] buffer = new byte[bufferSize];      
  try {
    InputStream instream = socket.getInputStream();
    int bytesRead = -1;
    String message = "";
    while (true) {
      message = "";
      bytesRead = instream.read(buffer);
      if (bytesRead != -1) {
        while ((bytesRead==bufferSize)&amp;&amp;(buffer[bufferSize-1] != 0)) {
          message = message + new String(buffer, 0, bytesRead);
          bytesRead = instream.read(buffer);
        }
        message = message + new String(buffer, 0, bytesRead - 1); 

        handler.post(new MessagePoster(textView, message));              
        socket.getInputStream();

      }
    }
  } catch (IOException e) {
    Log.d("BLUETOOTH_COMMS", e.getMessage());
  } 
}
}
//-----------------------------------------------------------------------------------------------------

private void forExit() {
Button stop = (Button)findViewById(R.id.stop);
stop.setOnClickListener(new OnClickListener() {
  public void onClick(View view) {

    onDestroy();     
 }
 });
}




  public void onDestroy(){
      super.onDestroy();
      try{
          if (socket!=null) {
      socket.close();
          }
      } catch (IOException e){

      }
     finish(); 
  }
 }
</code></pre>

<p>main.xml</p>

<pre><code>- &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="vertical" android:layout_width="fill_parent" android:layout_height="fill_parent"&gt;
  &lt;EditText android:id="@+id/text_message" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_alignParentBottom="true" android:enabled="false" /&gt; 
  &lt;Button android:id="@+id/button_search" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_above="@id/text_message" android:text="SearchDevice" /&gt; 
  &lt;Button android:id="@+id/button_listen" android:layout_width="fill_parent" android:layout_height="wrap_content" android:layout_above="@id/button_search" android:text="ListenToDevice" /&gt; 
  &lt;ListView android:id="@+id/list_discovered" android:layout_width="fill_parent" android:layout_height="fill_parent" android:layout_above="@id/button_listen" android:layout_alignParentTop="true" /&gt; 
  &lt;TextView android:id="@+id/text_messages" android:layout_width="fill_parent" android:layout_height="fill_parent" android:layout_above="@id/button_listen" android:layout_alignParentTop="true" android:visibility="gone" /&gt; 
  &lt;Button android:id="@+id/stop" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_alignParentRight="true" android:layout_alignParentTop="true" android:text="stop" /&gt; 
  &lt;/RelativeLayout&gt;
</code></pre>

<p>manifest.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8" ?&gt; 
- &lt;manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.example.bluetoothchat" android:versionCode="1" android:versionName="1.0"&gt;
  &lt;uses-sdk android:minSdkVersion="8" android:targetSdkVersion="16" /&gt; 
  &lt;uses-permission android:name="android.permission.BLUETOOTH" /&gt; 
  &lt;uses-permission android:name="android.permission.BLUETOOTH_ADMIN" /&gt; 
- &lt;application android:allowBackup="true" android:icon="@drawable/ic_launcher" android:label="@string/app_name" android:theme="@style/AppTheme"&gt;
- &lt;activity android:name="com.example.bluetoothchat.MainActivity" android:label="@string/app_name"&gt;
- &lt;intent-filter&gt;
  &lt;action android:name="android.intent.action.MAIN" /&gt; 
  &lt;category android:name="android.intent.category.LAUNCHER" /&gt; 
  &lt;/intent-filter&gt;
  &lt;/activity&gt;
  &lt;/application&gt;
  &lt;/manifest&gt;
</code></pre>
