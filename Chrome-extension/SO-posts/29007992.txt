<p>For the default scenarios I would suggest Pattern.split() as well but if you need maximum performance (especially on Android all solutions I tested are quite slow) and you only need to split by a single char, I now use my own method:</p>

<pre><code>public static ArrayList&lt;String&gt; splitBySingleChar(final char[] s,
        final char splitChar) {
    final ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;();
    final int length = s.length;
    int offset = 0;
    int count = 0;
    for (int i = 0; i &lt; length; i++) {
        if (s[i] == splitChar) {
            if (count &gt; 0) {
                result.add(new String(s, offset, count));
            }
            offset = i + 1;
            count = 0;
        } else {
            count++;
        }
    }
    if (count &gt; 0) {
        result.add(new String(s, offset, count));
    }
    return result;
}
</code></pre>

<p>Use "abc".toCharArray() to get the char array for a String. For example:</p>

<pre><code>String s = "     a bb   ccc  dddd eeeee  ffffff    ggggggg ";
ArrayList&lt;String&gt; result = splitBySingleChar(s.toCharArray(), ' ');
</code></pre>
