<p>You can use this class for write and read strings in files :</p>

<pre><code>import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

/**
 * The &lt;b&gt;FileManager&lt;/b&gt; class is a static class used to save &lt;b&gt;File&lt;/b&gt; from
 * &lt;b&gt;String&lt;/b&gt; and load &lt;b&gt;File&lt;/b&gt; as &lt;b&gt;String&lt;/b&gt;.
 * 
 * @version 1.0
 */
public class FileManager {

    /**
     * Load a &lt;b&gt;File&lt;/b&gt; as a &lt;b&gt;String&lt;/b&gt;.
     * 
     * @param file
     *            The file to load
     * @return The File as a String
     */
    public static String readFromFile(final File file) {
        String ret = "";

        try {
            FileInputStream inputStream = new FileInputStream(file);

            if (inputStream != null) {
                InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
                String receiveString = "";
                StringBuilder stringBuilder = new StringBuilder();

                while ((receiveString = bufferedReader.readLine()) != null) {
                    stringBuilder.append(receiveString);
                }

                inputStream.close();
                ret = stringBuilder.toString();
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return ret;
    }

    /**
     * Write a &lt;b&gt;String&lt;/b&gt; as a &lt;b&gt;File&lt;/b&gt;.
     * 
     * @param file
     *            The File where the data will be written
     * @param data
     *            The data to write
     */
    public static void writeToFile(final File file, final String data) {
        new Thread() {
            @Override
            public void run() {
                try {
                    FileOutputStream outputStream = new FileOutputStream(file);
                    OutputStreamWriter outputStreamWriter = new OutputStreamWriter(
                            outputStream);
                    outputStreamWriter.write(data);
                    outputStreamWriter.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }.run();
    }

    /**
     * Private constructor of &lt;b&gt;FileManager&lt;/b&gt;. &lt;i&gt;Static class should not be
     * instanced&lt;/i&gt;
     */
    private FileManager() {
    }
}
</code></pre>

<p>You can use it this way :</p>

<pre><code>FileManager.writeToFile(file, text);
text = FileManager.readFromFile(file);
</code></pre>

<p>For the <code>Array</code> of <code>int</code>, you should parse them to transform them in <code>String</code> :</p>

<p>Array of int to String :</p>

<pre><code>text = "" + intArray[0];
for (int i = 1; i &lt; intArray.length(); i++) {
    text += ","+intArray[i];
}
</code></pre>

<p>String to Array of int :</p>

<pre><code>String[] raw = text.split("[,]");
for (int i = 0; i &lt; raw.length(); i++) {
    intArray[i] = Integer.parseInt(raw[i]);
}
</code></pre>
