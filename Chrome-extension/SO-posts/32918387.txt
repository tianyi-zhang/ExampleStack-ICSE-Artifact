<p>Let's take a deep look to your code:</p>

<ol>
<li><p>Why do you have two double[][] inside the Matrix class? A Matrix is just one bidimensional array. You should delete the arrayB</p>

<pre><code>double[][] arrayA;
</code></pre>

<p><s></p>

<pre><code>double[][] arrayB;
</code></pre>

<p></s></p></li>
<li><p>What's the point of the private constructor? For you, it is useless right now.
<s></p>

<pre><code>private Matrix(double[][] a, double[][] b)
{
    arrayA = a;
    arrayB = b;
}
</code></pre></li>
</ol>

<p></s></p>

<ol start="3">
<li><p>In the public constructor, you are printing a Matrix, but you are not saving anywhere.</p>

<pre><code>public Matrix(double[][] array) //Create matrix values
{
    Random rand = new Random();

    for(int i = 0; i &lt; array.length; i++)
    {
        for(int j = 0; j &lt; array[i].length; j++)
        {
            array[i][j] = rand.nextInt(10);
            System.out.print(array[i][j] + " | ");
        }
        System.out.println();
    }
</code></pre>

<p><p><b></p>

<pre><code>    arrayA = array;
</code></pre>

<p></b></p>

<pre><code>}
</code></pre></li>
</ol>

<p>Anyway, I think it would be much better to make 2 constructors </p>

<pre><code>    public Matrix(double[][] array) //you just pass an array created outside the class
    {
        arrayA = array;
    }

    public Matrix(int rows, int columns) //Create matrix values
    {
        double[][] array = new double [rows][columns];
        Random rand = new Random();

        for(int i = 0; i &lt; array.length; i++)
        {
            for(int j = 0; j &lt; array[i].length; j++)
            {
                array[i][j] = rand.nextInt(10);
                System.out.print(array[i][j] + " | ");
            }
            System.out.println();
        }
        arrayA = array;
    }
</code></pre>

<ol start="4">
<li><p>Why your multiply method have 2 parameters? As it is inside the class Matrix (that have a double[][]variable). You only need a parameter (I think it is better to your example to have a Matrix parameter instead of a double[][]parameter and return also a Matrix). </p></li>
<li><p>I don't like printing when you are creating or multiplying. It's much better to create a method to print the Matrix, and calling it when you want to print them.</p></li>
</ol>

<p>So....the final code would be something like this:</p>

<p><b>Main</b>
        public class MatrixMultiplication 
        {
            public static void main(String[] args) 
            {
               Random rand = new Random();
               int rows = rand.nextInt(7) + 2;
               int columns = rand.nextInt(7) + 2;</p>

<pre><code>           System.out.println("The matrix has " + rows + " randomized rows");
           System.out.println("The matrix has " + columns + " randomized column");

           System.out.println();

           System.out.println("The first matrix has the values: ");
           Matrix m1 = new Matrix(rows,columns);
           m1.print();
           System.out.println("---------------------------------");
           System.out.println("The second matrix has the values: ");
           Matrix m2 = new Matrix(columns, rows);

           m2.print();
           System.out.println();
           System.out.println("Product of A and B is");
           Matrix productRegular = m1.multiply(m2);
           productRegular.print();
        }
    }
</code></pre>

<p><b>Matrix Class</b></p>

<pre><code>    import java.util.Random;

    class Matrix 
    { 
        double[][] arrayA;

        public Matrix(double[][] array) //Create matrix values
        {
            arrayA=array;
        }

        public Matrix(int rows, int columns) //Create matrix values
        {
            double[][]array= new double[rows][columns];
            Random rand = new Random();

            for(int i = 0; i &lt; array.length; i++)
            {
                for(int j = 0; j &lt; array[i].length; j++)
                {
                    array[i][j] = rand.nextInt(10);
                }
            }
            arrayA=array;
        }

        public Matrix multiply(Matrix m)
        {
            double[][]b=m.arrayA;
            double[][] c = new double[arrayA.length][b[0].length];

            for(int i = 0; i &lt; arrayA.length; i++)
            {
                for(int j = 0; j &lt; b[0].length; j++)
                {
                    for(int k = 0; k &lt; arrayA[0].length; k++)
                    {
                        c[i][j] += arrayA[i][k] * b[k][j];
                    }
                }
            }

            return new Matrix(c);
        }


        public void print(){
            for(int i=0;i&lt;arrayA.length;i++){
                for(int j=0;j&lt;arrayA[0].length;j++){
                    System.out.print(arrayA[i][j] + " | ");
                }
                System.out.println();
            }
        }
    }
</code></pre>
