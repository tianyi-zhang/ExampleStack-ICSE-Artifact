<p>try this:</p>

<pre><code>     public class Adptr extends BaseAdapter implements Filterable {
public ArrayList&lt;Model&gt; modelValues;

private Activity activity;
private LayoutInflater layoutinflater;
private List&lt;Model&gt; mOriginalValues;
private int PositionSelected = 0;

public Adptr (ArrayList&lt;Model&gt; modelValues, Activity activity) {
    super();
    this.modelValues = modelValues;
    this.activity = activity;


}

@Override
public int getCount() {

    return modelValues.size();
}

@Override
public Object getItem(int position) {

    return modelValues.get(position);
}

@Override
public long getItemId(int position) {

    return position;
}


@Override
public View getView(final int position, View convertView, ViewGroup parent) {

    layoutinflater = (LayoutInflater)  activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    ViewHolder holder = null;
    Model model = modelValues.get(position);

    if (convertView == null || !(convertView.getTag() instanceof ViewHolder)) {
        convertView = layoutinflater.inflate(R.layout.row_search, null);
        holder = new ViewHolder();
        holder.txtName = (TextView) convertView.findViewById(R.id.row_serch_txt_name);




        convertView.setTag(holder);
        convertView.setTag(R.id.row_serch_txt_name, holder.txtName);

    } else {
        holder = (ViewHolder) convertView.getTag();
    }

    holder.txtArtistName.setText("" + modelValue.get_NAME());




    return convertView;
}

class ViewHolder {
    TextView txtName;


}

@Override
public Filter getFilter() {

    Filter filter = new Filter() {

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {

            modelValues = (ArrayList&lt;ModelValueArtist&gt;) results.values; // has

            notifyDataSetChanged();
        }

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            FilterResults results = new FilterResults(); // Holds the
                                                            // results of a
                                                            // filtering
                                                            // operation in
                                                            // values
            // List&lt;String&gt; FilteredArrList = new ArrayList&lt;String&gt;();
            List&lt;Model&gt; FilteredArrList = new ArrayList&lt;Model&gt;();

            if (mOriginalValues == null) {
                mOriginalValues = new ArrayList&lt;Model&gt;(modelValues); // saves

            }

            /********
             * 
             * If constraint(CharSequence that is received) is null returns
             * the mOriginalValues(Original) values else does the Filtering
             * and returns FilteredArrList(Filtered)
             * 
             ********/
            if (constraint == null || constraint.length() == 0) {

                // set the Original result to return
                results.count = mOriginalValues.size();
                results.values = mOriginalValues;
            } else {
                Locale locale = Locale.getDefault();
                constraint = constraint.toString().toLowerCase(locale);
                for (int i = 0; i &lt; mOriginalValues.size(); i++) {
                    Model model = mOriginalValues.get(i);

                    String data = model.get_NAME();
                    if (data.toLowerCase(locale).contains(constraint.toString())) {

                        FilteredArrList.add(modelMyMall);
                    }
                }
                // set the Filtered result to return
                results.count = FilteredArrList.size();
                results.values = FilteredArrList;

            }
            return results;
        }
    };
    return filter;
  }

     }
</code></pre>
