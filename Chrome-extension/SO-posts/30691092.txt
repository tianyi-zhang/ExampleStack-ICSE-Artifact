<p>The problem is that when you add new item internal <code>EndlessRecyclerOnScrollListener</code> doesn't know about it and counters breaking.
As a matter of fact answer with <code>EndlessRecyclerOnScrollListener</code> has some limitations and possible problems, e.g. if you load 1 item at a time it will not work. So here is an enhanced version.</p>

<ol>
<li>Get rid of <code>EndlessRecyclerOnScrollListener</code> we don't need it anymore</li>
<li><p>Change your adapter to this which contains scroll listener</p>

<pre><code>public class MyAdapter&lt;T&gt; extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {

    private final int VIEW_ITEM = 1;
    private final int VIEW_PROG = 0;

    private List&lt;T&gt; mDataset;

    // The minimum amount of items to have below your current scroll position before loading more.
    private int visibleThreshold = 2;
    private int lastVisibleItem, totalItemCount;
    private boolean loading;
    private OnLoadMoreListener onLoadMoreListener;

    public MyAdapter(List&lt;T&gt; myDataSet, RecyclerView recyclerView) {
        mDataset = myDataSet;

        if (recyclerView.getLayoutManager() instanceof LinearLayoutManager) {

            final LinearLayoutManager linearLayoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
            recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
                @Override
                public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
                    super.onScrolled(recyclerView, dx, dy);

                    totalItemCount = linearLayoutManager.getItemCount();
                    lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();
                    if (!loading &amp;&amp; totalItemCount &lt;= (lastVisibleItem + visibleThreshold)) {
                        // End has been reached
                        // Do something
                        if (onLoadMoreListener != null) {
                            onLoadMoreListener.onLoadMore();
                        }
                        loading = true;
                    }
                }
            });
        }
    }

    @Override
    public int getItemViewType(int position) {
        return mDataset.get(position) != null ? VIEW_ITEM : VIEW_PROG;
    }

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        RecyclerView.ViewHolder vh;
        if (viewType == VIEW_ITEM) {
            View v = LayoutInflater.from(parent.getContext())
                    .inflate(android.R.layout.simple_list_item_1, parent, false);

            vh = new TextViewHolder(v);
        } else {
            View v = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.progress_item, parent, false);

            vh = new ProgressViewHolder(v);
        }
        return vh;
    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
        if (holder instanceof TextViewHolder) {
            ((TextViewHolder) holder).mTextView.setText(mDataset.get(position).toString());
        } else {
            ((ProgressViewHolder) holder).progressBar.setIndeterminate(true);
        }
    }

    public void setLoaded() {
        loading = false;
    }

    @Override
    public int getItemCount() {
        return mDataset.size();
    }

    public void setOnLoadMoreListener(OnLoadMoreListener onLoadMoreListener) {
        this.onLoadMoreListener = onLoadMoreListener;
    }

    public interface OnLoadMoreListener {
        void onLoadMore();
    }

    public static class TextViewHolder extends RecyclerView.ViewHolder {
        public TextView mTextView;

        public TextViewHolder(View v) {
            super(v);
            mTextView = (TextView) v.findViewById(android.R.id.text1);
        }
    }

    public static class ProgressViewHolder extends RecyclerView.ViewHolder {
        public ProgressBar progressBar;

        public ProgressViewHolder(View v) {
            super(v);
            progressBar = (ProgressBar) v.findViewById(R.id.progressBar);
        }
    }
}
</code></pre></li>
<li><p>Change code in Activity class</p>

<pre><code>mAdapter = new MyAdapter&lt;String&gt;(myDataset, mRecyclerView);
mRecyclerView.setAdapter(mAdapter);

mAdapter.setOnLoadMoreListener(new MyAdapter.OnLoadMoreListener() {
    @Override
    public void onLoadMore() {
        //add progress item
        myDataset.add(null);
        mAdapter.notifyItemInserted(myDataset.size() - 1);

        handler.postDelayed(new Runnable() {
            @Override
            public void run() {
                //remove progress item
                myDataset.remove(myDataset.size() - 1);
                mAdapter.notifyItemRemoved(myDataset.size());
                //add items one by one
                for (int i = 0; i &lt; 15; i++) {
                    myDataset.add("Item" + (myDataset.size() + 1));
                    mAdapter.notifyItemInserted(myDataset.size());
                }
                mAdapter.setLoaded();
                //or you can add all at once but do not forget to call mAdapter.notifyDataSetChanged();
            }
        }, 2000);
        System.out.println("load");
    }
});
</code></pre></li>
</ol>

<p>The rest remains unchanged, let me know if this works for you.</p>
