<p>Other posters are correct - ctrl-break in the console or jstack.</p>

<p>Otherwise, if you're using Java 1.5 or above, you can get hold of this information programmatically at runtime, via:</p>

<p><code>Thread.getAllStackTraces()</code> (<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Thread.html#getAllStackTraces%28%29" rel="nofollow">http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Thread.html#getAllStackTraces()</a>)</p>

<p>then iterate through the results.</p>

<p>A little long-winded, but something like this:</p>

<pre><code>Map&lt;Thread,StackTraceElement[]&gt; traces = Thread.getAllStackTraces();
Iterator&lt;Thread&gt; i = traces.keySet().iterator();
while (i.hasNext()) {
   Thread thd = i.next();
   System.out.println("*** Thread id"+thd.getId()+":"+thd.getName()+" ***");
   StackTraceElement[] trace = traces.get(thd);
   for (int j=0; j &lt; trace.length; ++j) {
      System.out.println(trace[j]);
   }
   System.out.println();
}
</code></pre>

<p>You can then choose whatever method you want to trap your program to cause this to happen, and format/direct the output.</p>

<p>A disadvantage of this method is that it isn't exact, in that the stacks of the different threads aren't guaranteed to have been taken at exactly the same time. However, there's an associated performance advantage in that your entire process won't be suspended while the snapshot is taken.</p>
