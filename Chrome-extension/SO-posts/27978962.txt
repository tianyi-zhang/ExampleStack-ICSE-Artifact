<p>Actually keys in <code>HashMap</code> is a similar thing to values in <code>HashSet</code>, there is no big difference between them. The only question what is unique constraints for your object, I would ask interviewer about that and suggest to use either <strong>name</strong> or add some additional unique identifier (e.g. <strong>id</strong>). If it is <strong>name + salary + job</strong> then you should use them to create <code>equals</code> and <code>hashCode</code> methods. Once these methods correctly defined - you can use <code>Employee</code> class itself as a HashMap key with no doubts.</p>

<p>Lets's say we decided that name + salary + job is our unique identificator, then we can define <strong>hashCode/equals</strong> as follows:</p>

<pre><code>public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    Employee employee = (Employee) o;

    if (job != null ? !job.equals(employee.job) : employee.job != null) return false;
    if (name != null ? !name.equals(employee.name) : employee.name != null) return false;
    if (salary != null ? !salary.equals(employee.salary) : employee.salary != null) return false;

    return true;
}

public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + (job != null ? job.hashCode() : 0);
    result = 31 * result + (salary != null ? salary.hashCode() : 0);
    return result;
}
</code></pre>

<p>Now we can use Employee as a key in a Hash based structures. We can create HashSet and HashMap:</p>

<pre><code>    List&lt;Employee&gt; employeeList = Arrays.asList(
            new Employee("name", "job", 100),
            new Employee("name", "job2", 300),
            new Employee("name2", "job", 200)
    );
    Set&lt;Employee&gt; hashSet = new HashSet&lt;Employee&gt;(employeeList);
    Map&lt;Employee, Employee&gt; hashMap = new HashMap&lt;Employee, Employee&gt;();
    for (Employee employee : employeeList) {
        hashMap.put(employee, employee);
    }
</code></pre>

<p>Going further to the source code of the HashSet - we see that it actually use a HashMap inside and add our values as a HashMap's keys with a dummy internal object as each Map's entry value, check the <strong>constructor</strong> and <strong>add</strong> method:</p>

<pre><code>public HashSet() {
map = new HashMap&lt;E,Object&gt;();
}

public boolean add(E e) {
return map.put(e, PRESENT)==null;
}
</code></pre>
