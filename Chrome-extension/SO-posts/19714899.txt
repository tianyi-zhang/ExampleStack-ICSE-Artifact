<p>Simple solution if arrays are already sorted</p>

<pre><code> public static void get_common_courses(Integer[] courses1, Integer[] courses2) {
        // Sort both arrays if input is not sorted 
        //Arrays.sort(courses1);
        //Arrays.sort(courses2);
        int i=0, j=0;
        while(i&lt;courses1.length &amp;&amp; j&lt;courses2.length) {
            if(courses1[i] &gt; courses2[j]) {
                j++;
            } else if(courses1[i] &lt; courses2[j]){
                i++;
            } else {
                System.out.println(courses1[i]);
                i++;j++;
            }
        }
}
</code></pre>

<p>Apache commons collections API has done this in efficient way without sorting</p>

<pre><code>    public static Collection intersection(final Collection a, final Collection b) {
    ArrayList list = new ArrayList();
    Map mapa = getCardinalityMap(a);
    Map mapb = getCardinalityMap(b);
    Set elts = new HashSet(a);
    elts.addAll(b);
    Iterator it = elts.iterator();
    while(it.hasNext()) {
        Object obj = it.next();
        for(int i=0,m=Math.min(getFreq(obj,mapa),getFreq(obj,mapb));i&lt;m;i++) {
            list.add(obj);
        }
    }
    return list;
}
</code></pre>
