<p>Try My code file</p>

<p>BitmapFactory.Options options = new BitmapFactory.Options();</p>

<pre><code>        // downsizing image as it throws OutOfMemory Exception for larger
        // images
        options.inSampleSize = 2;

        final Bitmap bitmap = BitmapFactory.decodeFile(fileUri.getPath(),
                options);
        poto.setImageBitmap(bitmap);

    }
    catch (NullPointerException e) 
    {
        //e.printStackTrace();
    }
</code></pre>

<p>}</p>

<pre><code> //------------ Helper Methods ---------------------- 

  // Creating file uri to store image/video
  public Uri getOutputMediaFileUri(int type) 
{
      return Uri.fromFile(getOutputMediaFile(type));
}

// returning image 
private static File getOutputMediaFile(int type)
</code></pre>

<p>{</p>

<pre><code>        // External sdcard location

        File mediaStorageDir = new File
                (
                Environment
                .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
                IMAGE_DIRECTORY_NAME
                );

        // Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()) 
        {
        if (!mediaStorageDir.mkdirs()) 
        {
        Log.d(IMAGE_DIRECTORY_NAME, "Oops! Failed create "
            + IMAGE_DIRECTORY_NAME + " directory");
        return null;
        }
        }

        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",
                Locale.getDefault()).format(new Date());
        File mediaFile;

        if (type ==MEDIA_TYPE_IMAGE)
        {
            mediaFile = new File (mediaStorageDir.getPath()+ File.separator + "IMG_" + timeStamp + ".jpg");
        }
        else 
        {
            return null;
        }
    // TODO Auto-generated method stub
        return mediaFile;
</code></pre>

<p>}</p>
