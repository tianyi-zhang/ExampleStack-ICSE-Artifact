<p>The following code loads all classes from a JAR file. It does not need to know anything about the classes. The names of the classes are extracted from the JarEntry.</p>

<pre><code>JarFile jarFile = new JarFile(pathToJar);
Enumeration&lt;JarEntry&gt; e = jarFile.entries();

URL[] urls = { new URL("jar:file:" + pathToJar+"!/") };
URLClassLoader cl = URLClassLoader.newInstance(urls);

while (e.hasMoreElements()) {
    JarEntry je = e.nextElement();
    if(je.isDirectory() || !je.getName().endsWith(".class")){
        continue;
    }
    // -6 because of .class
    String className = je.getName().substring(0,je.getName().length()-6);
    className = className.replace('/', '.');
    Class c = cl.loadClass(className);

}
</code></pre>

<p>edit:</p>

<p>As suggested in the comments above, javassist would also be a possibility. 
Initialize a ClassPool somewhere before the while loop form the code above, and instead of loading the class with the class loader, you could create a CtClass object:</p>

<pre><code>ClassPool cp = ClassPool.getDefault();
...
CtClass ctClass = cp.get(className);
</code></pre>

<p>From the ctClass, you can get all methods, fields, nested classes, ....
Take a look at the javassist api:
<a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/index.html">http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/html/index.html</a></p>
