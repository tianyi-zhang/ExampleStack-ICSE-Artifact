<p>There's a couple of ways to do this actually:</p>

<p><strong>Reflection</strong>:</p>

<pre><code>//I don't know this object so I'm using a default constructor
ObservableListView listView = new ObservableListView(); 
ObservableGridView gridView = new ObservableGridView();

Object obj;

if(condition)
{
    obj = listView;
}
else
{
    obj = gridView;
}

Method method = obj.getClass().getMethod("methodname", param1.getClass(), param2.getClass());
try
{
    method.invoke(obj, param1, param2);
}catch(Exception e){}
</code></pre>

<p><strong>Inheritance</strong>:</p>

<pre><code>//assuming that there is some parent class of both classes that contains methods that you would like to use
ObservableListView listView = new ObservableListView(); 
ObservableGridView gridView = new ObservableGridView();

ObservableView view;

if(condition)
{
    view = listView;
}
else
{
    view = gridView;
}

view.someMethod();
</code></pre>

<p><strong>Interface</strong>:</p>

<pre><code>//this assumes that both ObservableListView and ObservableGridView implement some interface 'IObservableView'
ObservableListView listView = new ObservableListView(); 
ObservableGridView gridView = new ObservableGridView();

IObservableView view;

if(condition)
{
    view = listView;
}
else
{
    view = gridView;
}

view.someMethod();
</code></pre>

<p><strong>Instanceof</strong>:</p>

<pre><code>//very flexible version. I think that this is the route I would choose
ObservableListView listView = new ObservableListView(); 
ObservableGridView gridView = new ObservableGridView();

Object obj;

if(condition)
{
    obj = listView;
}
else
{
    obj = gridView;
}

if(obj instanceof ObservableListView)
{
    ((ObservableListView)obj).someMethodOnlyInThisClass();
}
else if(obj instanceof ObservableGridView)
{
    ((ObservableGridView)obj).someOtherMethodOnlyInThisClass();
}
</code></pre>

<p>I would avoid using reflection.</p>

<p>Inheritance only works if the method you want to use is in both classes and inherited from a super class.</p>

<p>Interfaces work if the super class doesn't have the same method but both child classes do implement the interface.</p>

<p><code>instanceof</code> is probably the most flexible solution that doesn't use reflection though some look down upon its use.</p>

<hr>

<p>Since you updated your answer with a more clear objective. Here's what I would do.</p>

<pre><code>AdapterView view = (AdapterView) getActivity().findViewById(R.id.castdetailscredits);

if(view != null)
{
    view.setOnItemClickListener(this);
    ((Scrollable)view).setScrollViewCallbacks(activity.getCastDetailsFragment());
    ((Scrollable)view).setTouchInterceptionViewGroup((ViewGroup) activity.getCastDetailsFragment().getView().findViewById(R.id.containerLayout));
    Bundle save = activity.getCastDetailsCreditsBundle();

    if (save != null) {
        moviesList = save.getParcelableArrayList("moviesList");
        movieAdapter = new MovieAdapter(getActivity(), R.layout.row, this.moviesList);
        view.setAdapter(movieAdapter);
    }
}
</code></pre>

<p>We use a couple of techniques here that I mentioned above. Specifically the <em>Inheritance</em> (<code>AdapterView</code>) and <em>Interface</em> (<code>Scrollable</code>).</p>
