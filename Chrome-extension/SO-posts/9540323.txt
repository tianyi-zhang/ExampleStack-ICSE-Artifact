<p>the answer is to manage positioning by override onLayout of the containing ViewGroup, rather than the View itself.</p>

<p>E.g.,</p>

<pre><code>@Override
protected void onLayout(boolean changed, int l, int t, int r, int b) {
    int count = getChildCount();
    for (int i = 0; i &lt; count; i++) {
        View child = getChildAt(i);
        if (child.getVisibility() != GONE) {
            MyCustomLayout.LayoutParams lp = (MyCustomLayout.LayoutParams) child.getLayoutParams();
            int w = child.getMeasuredWidth();
            int h = child.getMeasuredHeight();
            int x = lp.left - (int) (w / 2f);
            int y = lp.top - h;
            child.layout(x, y, x + w, y + h);
        }
    }
}
</code></pre>

<p>(note that the above example specifically is untested, but i've tested the premise and it works)</p>
