<p>I've figured this out since asking the question. I have a Button Interface Activity where an <code>AsyncTask</code> is called that grabs the <code>JSON</code> data when a button is clicked. The AysncTask then bundles the data and sends it to my Gallery Grid Class. The AsyncTask is calling the above <code>JSON</code> Parsing Class. So here's the code:</p>

<pre><code>        // --- artwork button
    cartoon_BTN.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View arg0) {
            jsonFileStr = "artwork_json";
            new ArtworkJSON().execute();

        }
    });
    // --- end artwork button

    private class ArtworkJSON extends AsyncTask&lt;Void, Void, Void&gt; {

    JSONObject jsonobject;
    String TAG_ID = "id";
    String TAG_DESCR = "artworkdescr";
    String TAG_MEDIUM = "artworkmedium";
    String TAG_PRICE = "artworkprice";
    String TAG_URL = "artworkurl";
    ArrayList&lt;HashMap&lt;String, String&gt;&gt; hashArraylist;
    ArrayList&lt;String&gt; urlArrayList;
    ArrayList&lt;String&gt; idArrayList;
    ArrayList&lt;String&gt; descrArrayList;
    ArrayList&lt;String&gt; mediumArrayList;
    ArrayList&lt;String&gt; priceArrayList;
    String[] idStrArray, urlStrArray, descrStrArray, mediumStrArray,
            priceStrArray;
    String urlPathStr = "http://www.mysite.com/"
            + jsonFileStr + ".txt";
    JSONArray JSArrArtwork = null;
    String idStr, urlStr, descrStr, mediumStr, priceStr;

    ProgressDialog loadImagesDia;
    Intent bundleIn;

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        // Create a progressdialog
        loadImagesDia = new ProgressDialog(Main_Interface.this);
        loadImagesDia.setMessage("Loading Images...");
        loadImagesDia.setIndeterminate(false);
        // Show progressdialog
        loadImagesDia.show();
    }

    @Override
    protected Void doInBackground(Void... params) {
        hashArraylist = new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();//

        // Retrieve JSON Objects from the given URL address
        jsonobject = JSONforGallery.getJSONfromURL(urlPathStr);

        try {
            // Locate the array name in JSON
            JSArrArtwork = jsonobject.getJSONArray("artwork");
            idArrayList = new ArrayList&lt;String&gt;();
            urlArrayList = new ArrayList&lt;String&gt;();
            descrArrayList = new ArrayList&lt;String&gt;();
            mediumArrayList = new ArrayList&lt;String&gt;();
            priceArrayList = new ArrayList&lt;String&gt;();

            for (int i = 0; i &lt; JSArrArtwork.length(); i++) {
                HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();//
                JSONObject artworkJO = JSArrArtwork.getJSONObject(i);
                map.put("id", artworkJO.getString(TAG_ID));//
                map.put("url", artworkJO.getString(TAG_URL));//
                map.put("descr", artworkJO.getString(TAG_DESCR));//
                map.put("medium", artworkJO.getString(TAG_MEDIUM));//
                map.put("price", artworkJO.getString(TAG_PRICE));//
                idStr = artworkJO.getString(TAG_ID);
                urlStr = artworkJO.getString(TAG_URL);
                descrStr = artworkJO.getString(TAG_DESCR);
                mediumStr = artworkJO.getString(TAG_MEDIUM);
                priceStr = artworkJO.getString(TAG_PRICE);

                hashArraylist.add(map);//

                idArrayList.add(idStr);
                urlArrayList.add(urlStr);
                descrArrayList.add(descrStr);
                mediumArrayList.add(mediumStr);
                priceArrayList.add(priceStr);
                idStrArray = idArrayList.toArray(new String[idArrayList
                        .size()]);
                urlStrArray = urlArrayList.toArray(new String[urlArrayList
                        .size()]);
                descrStrArray = descrArrayList
                        .toArray(new String[descrArrayList.size()]);
                mediumStrArray = mediumArrayList
                        .toArray(new String[mediumArrayList.size()]);
                priceStrArray = priceArrayList
                        .toArray(new String[priceArrayList.size()]);
            }
        } catch (JSONException e) {
            Log.e("Error", e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    @Override
    protected void onPostExecute(Void args) {
        loadImagesDia.dismiss();
        bundleIn = new Intent("com.veedabugmedia.ktg.UILGRID");
        bundleIn.putExtra("idStrArrayKey", idStrArray);
        bundleIn.putExtra("hashARKey", hashArraylist);
        bundleIn.putExtra("urlStrArrayKey", urlStrArray);
        bundleIn.putExtra("descrStrArrayKey", descrStrArray);
        bundleIn.putExtra("mediumStrArrayKey", mediumStrArray);
        bundleIn.putExtra("priceStrArrayKey", priceStrArray);
        startActivity(bundleIn);

    }
}
</code></pre>

<p>My updated <strong>UILGrid Activity</strong>:</p>

<pre><code>    public class UILGrid extends AbsListViewBaseActivity {
String[] idStr, imageUrls, descrStrGrid, mediumStrGrid, priceStrGrid;
DisplayImageOptions options;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.uil_grid);

    // Retrieve data from About_Interface on item click event
    Intent getBundsIn = getIntent();
    idStr = getBundsIn.getStringArrayExtra("idStrArrayKey");
    imageUrls = getBundsIn.getStringArrayExtra("urlStrArrayKey");
    descrStrGrid = getBundsIn.getStringArrayExtra("descrStrArrayKey");
    mediumStrGrid = getBundsIn.getStringArrayExtra("mediumStrArrayKey");
    priceStrGrid = getBundsIn.getStringArrayExtra("priceStrArrayKey");



    options = new DisplayImageOptions.Builder()
            .showImageOnLoading(R.drawable.ic_stub)
            .showImageForEmptyUri(R.drawable.ic_empty)
            .showImageOnFail(R.drawable.ic_error).cacheInMemory(true)
            .cacheOnDisc(true).bitmapConfig(Bitmap.Config.RGB_565).build();

    listView = (GridView) findViewById(R.id.uil_gridview);
    ((GridView) listView).setAdapter(new ImageAdapter());
    listView.setOnItemClickListener(new OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view,
                int position, long id) {
            startImagePagerActivity(position);
        }
    });
}// --- END onCreate

private void startImagePagerActivity(int position) {

    Intent pagerIn = new Intent(this, UILPager.class);
    pagerIn.putExtra("pagerUrlStrKey", imageUrls);
    pagerIn.putExtra("pagerDescrStrKey", descrStrGrid);
    pagerIn.putExtra("pagerMediumStrKey", mediumStrGrid);
    pagerIn.putExtra("pagerPriceStrKey", priceStrGrid);
    pagerIn.putExtra("pagerPositionKey", position);


    startActivity(pagerIn);

}

public class ImageAdapter extends BaseAdapter {
    @Override
    public int getCount() {
        return imageUrls.length;
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final ImageView imageView;
        if (convertView == null) {
            imageView = (ImageView) getLayoutInflater().inflate(
                    R.layout.uil_grid_item, parent, false);
        } else {
            imageView = (ImageView) convertView;
        }
        imageLoader.displayImage(imageUrls[position], imageView, options);
        return imageView;
    }
}

@Override
protected void onPause() {
    super.onPause();
    overridePendingTransition(R.anim.fadein, R.anim.fadeout);
    UILGrid.this.finish();
}
}
</code></pre>
