<p>Although I'm not sure why using it as <code>Future&lt;? extends Optional&lt;?&gt;&gt;</code> should be a problem, there may be a solution, depending on how many contortions and "tricks" you are willing to accept.</p>

<p>It is not possible to compile it in the desired form, even when using the additonal type parameter <code>E</code>, simply because it is not type safe. At least, it is not possible (for the compiler) to make sure that it is type safe. The reason why it <em>could</em> not be type safe can be summarized as follows: Someone receiving the <code>Future&lt;Optional&lt;?&gt;&gt;</code> could modify the <code>Future</code>, and assign it any <code>Optional</code> - even one that has a different type than the one that it was originally created with. At a different location, someone could know the <code>Future</code> with its <em>original</em> type, and receive a <code>ClassCastException</code> when trying to use it. (I explained this with a simpler example in <a href="http://stackoverflow.com/a/22193221/3182664">http://stackoverflow.com/a/22193221/3182664</a> )</p>

<h2>But...</h2>

<p>... all this is not relevant here. The <code>Future</code> interface does not allow to "set" any new value. Thus, it is perfectly feasible to convert it into a <code>Future</code> with a supertype of its original type. </p>

<p>Note: This is similar to the fact that you can write</p>

<pre><code>List&lt;Integer&gt; integers = new ArrayList&lt;Integer&gt;();
List&lt;Number&gt; numbers = Collections.unmodifiableList(integers);
</code></pre>

<p>This is valid (meaning "type safe") because you can not pollute the <code>Integer</code>-list with invalid <code>Number</code> instances (like <code>Double</code>s), because it's not possible to modify the list anyhow!</p>

<p>So one type-safe, warning-free and valid solution could be to introduce a method that "wraps" a <code>Future&lt;? extends T&gt;</code> and returns it as a <code>Future&lt;T&gt;</code>. Again: This is not really pretty, and may not be worth the effort, but at least one option:</p>

<pre><code>import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class GenericOptionalFutureMethod
{
    void call()
    {
        Value&lt;?&gt; value = null;
        Future&lt;Optional&lt;?&gt;&gt; future = 
            FutureWrapper.&lt;Optional&lt;?&gt;&gt;wrap(submit(value));
    }

    &lt;T&gt; Future&lt;Optional&lt;T&gt;&gt; submit(Value&lt;T&gt; value) {
        return null;
    }
}

class FutureWrapper 
{
    static &lt;T&gt; Future&lt;T&gt; wrap(final Future&lt;? extends T&gt; future)
    {
        return new Future&lt;T&gt;()
        {
            @Override
            public boolean cancel(boolean mayInterruptIfRunning)
            {
                return future.cancel(mayInterruptIfRunning);
            }

            @Override
            public boolean isCancelled()
            {
                return future.isCancelled();
            }

            @Override
            public boolean isDone()
            {
                return future.isDone();
            }

            @Override
            public T get() throws InterruptedException, ExecutionException
            {
                return future.get();
            }

            @Override
            public T get(long timeout, TimeUnit unit)
                throws InterruptedException, ExecutionException,
                TimeoutException
            {
                return future.get();
            }
        };
    }

}
</code></pre>
