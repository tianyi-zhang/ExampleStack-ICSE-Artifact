<p>To archieve this, you would need to implement a custom <code>TabHost</code>that overrides the one from the Android framework.</p>

<pre><code>public class CustomTabHost extends TabHost {

    public CustomTabHost(Context context) {
        super(context);
    }

    public CustomTabHost(Context context, AttributeSet attrs) {
        super(context, attrs);
    }
}
</code></pre>

<p>Androids TabHost has an inner class called <code>TabSpec</code> that implements the following method: </p>

<pre><code>public TabSpec setIndicator(CharSequence label, Drawable icon) {
    mIndicatorStrategy = new LabelAndIconIndicatorStrategy(label, icon);
    return this;
}
</code></pre>

<p>so in order <strong>to add another TextView</strong> to the Tab, you need to <strong>overload this method like this</strong>:</p>

<pre><code>public TabSpec setIndicator(CharSequence label, Drawable icon, CharSequence text) {
        mIndicatorStrategy = new LabelIconTextIndicatorStrategy(label, icon, text);
        return this;
    }
</code></pre>

<p>To make this work, you also need to implement a <code>LabelIconTextIndicatorStrategy</code> that works similar to the <code>LabelAndIconIndicatorStrategy</code>, but has a text included.</p>

<pre><code>private class LabelIconTextIndicatorStrategy implements IndicatorStrategy {

    private final CharSequence mLabel;
    private final Drawable mIcon;
    private final CharSequence mText;

    private LabelIconTextIndicatorStrategy(CharSequence label, Drawable icon, CharSequence text) {
        mLabel = label;
        mIcon = icon;
        mText = text;
    }

    public View createIndicatorView() {
        final Context context = getContext();
        LayoutInflater inflater =
                (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View tabIndicator = inflater.inflate(mTabLayoutId,
                mTabWidget, // tab widget is the parent
                false); // no inflate params

        final TextView tv = (TextView) tabIndicator.findViewById(R.id.title);
        final ImageView iconView = (ImageView) tabIndicator.findViewById(R.id.icon);

        // when icon is gone by default, we're in exclusive mode
        final boolean exclusive = iconView.getVisibility() == View.GONE;
        final boolean bindIcon = !exclusive || TextUtils.isEmpty(mLabel);

        tv.setText(mLabel);

        if (bindIcon &amp;&amp; mIcon != null) {
            iconView.setImageDrawable(mIcon);
            iconView.setVisibility(VISIBLE);
        }

        if (context.getApplicationInfo().targetSdkVersion &lt;= Build.VERSION_CODES.DONUT) {
            // Donut apps get old color scheme
            tabIndicator.setBackgroundResource(R.drawable.tab_indicator_v4);
            tv.setTextColor(context.getResources().getColorStateList(R.color.tab_indicator_text_v4));
        }

        return tabIndicator;
    }
}
</code></pre>
