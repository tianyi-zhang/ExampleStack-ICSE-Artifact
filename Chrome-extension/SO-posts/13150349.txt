<p>Here is an example of what you might want. Learn why I am using a ViewHolder and other tricks by watching Android's Romain Guy <a href="http://www.google.com/events/io/2009/sessions/TurboChargeUiAndroidFast.html" rel="nofollow">discuss adapters and efficiency</a>:</p>

<pre><code>class ListArrayAdapter extends ArrayAdapter&lt;String&gt; 
{
    //  You only need one copy of LayoutInflater
    private final LayoutInflater inflater;

    //create the ArrayAdpater
    public ListArrayAdapter(Context context, String[] test) 
    {
        // The layout here doesn't really matter since we don't use it
        super(context, R.layout.childList, test);
        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) 
    {
        ViewHolder holder;
        if(convertView == null) {
            // Inflate the layout that you want for each row
            convertView = inflater.inflate(R.layout.childList, parent, false);

            holder = new ViewHolder();
            holder.code = (TextView) convertView.findViewById(R.id.labelModuleCode);
            holder.type = (TextView) convertView.findViewById(R.id.labelModuleType);

            // Add a reference in ViewHolder for your Button, find it like the TextViews and define its OnClickListener here too, eventually...

            convertView.setTag(holder);
        }
        else 
            holder = (ViewHolder) convertView.getTag();

        String module = getItem(position);
        //set the text to the string values based on position
        holder.code.setText(module);

        //return the layout
        return convertView;
    }

    class ViewHolder {
        TextView code;
        TextView type;
    }
}
</code></pre>
