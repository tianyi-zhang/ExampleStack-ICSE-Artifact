<p>This is the solution:</p>

<p>Add new class:</p>

<pre><code>import java.io.IOException;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLException;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.http.client.HttpClient;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.X509HostnameVerifier;
import org.apache.http.impl.client.DefaultHttpClient;

/*
 This code is public domain: you are free to use, link and/or modify it in any way you want, for all purposes including commercial applications.
 */
public class WebClientDevWrapper {

    @SuppressWarnings("deprecation")
    public static HttpClient wrapClient(HttpClient base) {
        try {
            SSLContext ctx = SSLContext.getInstance("TLS");
            X509TrustManager tm = new X509TrustManager() {

                public void checkClientTrusted(X509Certificate[] xcs,
                        String string) {
                }

                public void checkServerTrusted(X509Certificate[] xcs,
                        String string) {
                }

                public X509Certificate[] getAcceptedIssuers() {
                    return null;
                }
            };
            X509HostnameVerifier verifier = new X509HostnameVerifier() {

                @Override
                public void verify(String string, SSLSocket ssls)
                        throws IOException {
                }

                @Override
                public void verify(String string, X509Certificate xc)
                        throws SSLException {
                }

                @Override
                public void verify(String string, String[] strings,
                        String[] strings1) throws SSLException {
                }

                @Override
                public boolean verify(String string, SSLSession ssls) {
                    return true;
                }
            };
            ctx.init(null, new TrustManager[] { tm }, null);
            SSLSocketFactory ssf = new SSLSocketFactory(ctx);
            ssf.setHostnameVerifier(verifier);
            ClientConnectionManager ccm = base.getConnectionManager();
            SchemeRegistry sr = ccm.getSchemeRegistry();
            sr.register(new Scheme("https", ssf, 443));
            return new DefaultHttpClient(ccm, base.getParams());
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }
}
</code></pre>

<p>Now add the Wrapper around the httpClient:</p>

<pre><code>DefaultHttpClient httpclient = new DefaultHttpClient();
httpclient = (DefaultHttpClient) WebClientDevWrapper.wrapClient(httpclient);
</code></pre>

<p>Now how can you determine if the login was successful? </p>

<pre><code>    boolean loginSuccess = false;

    Header[] locationHeader = response.getHeaders("Location");
    if (locationHeader.length &gt; 0) {
            if (response.getStatusLine().toString().contains("302") &amp;&amp; locationHeader[0].toString().endsWith(requestURL)) {
                loginSuccess=true;
            }
    }
    System.out.println("Login Success: " + loginSuccess);
</code></pre>

<p>If the Location Header equals your requested URL and if Login Form Get contains 302, the login was successful. You can check this if you set a wrong user or password, the login will then fail.</p>

<p>Hope this helps. </p>
