<p><a href="http://rolandtapken.de/blog/2012-04/java-process-httpproxyuser-and-httpproxypassword">http://rolandtapken.de/blog/2012-04/java-process-httpproxyuser-and-httpproxypassword</a> says:</p>

<blockquote>
  <p>Other suggest to use a custom default Authenticator. But that's dangerous because this would send your password to anybody who asks.</p>
</blockquote>

<p>This is relevant if some http/https requests don't go through the proxy (which is quite possible depending on configuration). In that case, you would send your credentials directly to some http server, not to your proxy.</p>

<p>He suggests the following fix.</p>

<pre><code>// Java ignores http.proxyUser. Here come's the workaround.
Authenticator.setDefault(new Authenticator() {
    @Override
    protected PasswordAuthentication getPasswordAuthentication() {
        if (getRequestorType() == RequestorType.PROXY) {
            String prot = getRequestingProtocol().toLowerCase();
            String host = System.getProperty(prot + ".proxyHost", "");
            String port = System.getProperty(prot + ".proxyPort", "80");
            String user = System.getProperty(prot + ".proxyUser", "");
            String password = System.getProperty(prot + ".proxyPassword", "");

            if (getRequestingHost().equalsIgnoreCase(host)) {
                if (Integer.parseInt(port) == getRequestingPort()) {
                    // Seems to be OK.
                    return new PasswordAuthentication(user, password.toCharArray());  
                }
            }
        }
        return null;
    }  
});
</code></pre>

<p>I haven't tried it yet, but it looks good to me.</p>

<p>I modified the original version slightly to use equalsIgnoreCase() instead of equals(host.toLowerCase()) because of this: <a href="http://mattryall.net/blog/2009/02/the-infamous-turkish-locale-bug">http://mattryall.net/blog/2009/02/the-infamous-turkish-locale-bug</a> and I added "80" as the default value for port to avoid NumberFormatException in Integer.parseInt(port).</p>
