<p>You can have a look at my simple project <a href="https://github.com/mkottman/AndroLua" rel="nofollow">AndroLua</a>. It contains Lua and <a href="http://www.keplerproject.org/luajava/" rel="nofollow">LuaJava</a> compiled using the Android NDK.</p>

<p>Because it uses LuaJava, it allows to bind Java functions to Lua, in a similar way like you said, using userdata. Here is an example of how I override the <code>print</code> function to output text into a TextView:</p>

<pre><code>JavaFunction print = new JavaFunction(L) {
    @Override
    public int execute() throws LuaException {
        StringBuilder sb = new StringBuilder();
        for (int i = 2; i &lt;= L.getTop(); i++) {
            int type = L.type(i);
            String val = L.toString(i);
            if (val == null)
                val = L.typeName(type);
            sb.append(val);
            sb.append("\t");
        }
        sb.append("\n");
        status.append(sb.toString());
        return 0;
    }
};
print.register("print");
</code></pre>

<p>The downside is that sometimes you cannot pass the <code>print</code> as a function parameter (because it is a userdata, even though it has a <code>__call</code> metamethod). Fortunately, it can be solved in Lua by creating a pure Lua function, like this:</p>

<pre><code>do
    local oldprint = print
    function print(...) oldprint(...) end
end
</code></pre>
