<p>As you can see, there is no copy.</p>

<pre><code> /**
 * Copies all of the mappings from the specified map to this map.
 * These mappings will replace any mappings that this map had for
 * any of the keys currently in the specified map.
 *
 * @param m mappings to be stored in this map
 * @throws NullPointerException if the specified map is null
 */
public void putAll(Map&lt;? extends K, ? extends V&gt; m) {
    int numKeysToBeAdded = m.size();
    if (numKeysToBeAdded == 0)
        return;

    /*
     * Expand the map if the map if the number of mappings to be added
     * is greater than or equal to threshold.  This is conservative; the
     * obvious condition is (m.size() + size) &gt;= threshold, but this
     * condition could result in a map with twice the appropriate capacity,
     * if the keys to be added overlap with the keys already in this map.
     * By using the conservative calculation, we subject ourself
     * to at most one extra resize.
     */
    if (numKeysToBeAdded &gt; threshold) {
        int targetCapacity = (int)(numKeysToBeAdded / loadFactor + 1);
        if (targetCapacity &gt; MAXIMUM_CAPACITY)
            targetCapacity = MAXIMUM_CAPACITY;
        int newCapacity = table.length;
        while (newCapacity &lt; targetCapacity)
            newCapacity &lt;&lt;= 1;
        if (newCapacity &gt; table.length)
            resize(newCapacity);
    }

    for (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) {
        Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();
        put(e.getKey(), e.getValue());
    }
} 
</code></pre>

<p>This is original src from openjdk.</p>

<pre><code> for (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) {
        Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();
        put(e.getKey(), e.getValue());
    }
</code></pre>

<p>We just put each Key-Value to our map. </p>
