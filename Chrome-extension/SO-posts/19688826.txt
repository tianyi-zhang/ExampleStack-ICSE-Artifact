<p>You can directly use <code>Bitmap</code> like</p>

<pre><code>Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
imageView11.setImageBitmap(thumbnail); 
</code></pre>

<p><strong>Or</strong></p>

<p><strong>you can first decode the Image then use it like</strong></p>

<pre><code>Uri mImageCaptureUri = intent.getData();
                try {
                    thumbnail = decodeBitmap(mImageCaptureUri, this);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                imageView11.setImageBitmap(thumbnail);
</code></pre>

<p><strong>Image Decode</strong> </p>

<pre><code>public Bitmap decodeBitmap(Uri selectedImage, Context context)
            throws FileNotFoundException {
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(context.getContentResolver()
                .openInputStream(selectedImage), null, o);

        final int REQUIRED_SIZE = 100;

        int width_tmp = o.outWidth, height_tmp = o.outHeight;
        System.out.println("width_tmp" + width_tmp + "height_tmp" + height_tmp);
        int scale = 1;
        while (true) {
            if (width_tmp / 2 &lt; REQUIRED_SIZE || height_tmp / 2 &lt; REQUIRED_SIZE) {
                break;
            }
            width_tmp = 50;
            height_tmp = 50;
            scale *= 2;
        }

        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(context.getContentResolver()
                .openInputStream(selectedImage), null, o2);
    }
</code></pre>
