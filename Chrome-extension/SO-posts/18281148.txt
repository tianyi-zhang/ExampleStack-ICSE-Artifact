<p>If the base class is annotated with Jackson json annotations, then the fact that it is a proxy will not affect the marshalling.  Here is an example of marshalling a proxy object as JSON.</p>

<pre><code>import javassist.util.proxy.MethodHandler;
import javassist.util.proxy.ProxyFactory;
import javassist.util.proxy.ProxyObject;
import org.codehaus.jackson.annotate.JsonProperty;
import org.codehaus.jackson.map.ObjectMapper;

import java.lang.reflect.Method;

public class Main {

    public static void main(String[] args){
        try {
            Bar bar = create(Bar.class);
            bar.setBar("something");
            ObjectMapper mapper = new ObjectMapper();
            String out = mapper.writeValueAsString(bar);
            Bar inBar = mapper.readValue(out, bar.getClass());
            System.out.println("Unmarshalled: " + inBar.getClass().getName() + " , bar: " + inBar.getBar());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    public static &lt;T&gt; T create(Class&lt;T&gt; classs) throws Exception {
        ProxyFactory factory = new ProxyFactory();
        factory.setSuperclass(classs);
        Class clazz = factory.createClass();
        MethodHandler handler = new MethodHandler() {

            @Override
            public Object invoke(Object self, Method overridden, Method forwarder,
                                 Object[] args) throws Throwable {
                System.out.println("I could be used for AOP "+overridden.getName());
                return forwarder.invoke(self, args);
            }
        };
        Object instance = clazz.newInstance();
        ((ProxyObject) instance).setHandler(handler);
        return (T) instance;
    }
}

class Bar{
    @JsonProperty
    private String bar = "bar";

    String getBar() {
        return bar;
    }

    void setBar(String bar) {
        this.bar = bar;
    }
}
</code></pre>
