<p>Hope you got your answer or problem has been already solved.
But if not, you can try example from <a href="https://github.com/AndGitRepo/NavDrawer/tree/master/NavDrawer" rel="nofollow">https://github.com/AndGitRepo/NavDrawer/tree/master/NavDrawer</a></p>

<p>You can create interface for list items. Then implement that interface in two classes: one is for list item and second is for Section/Header item of list.</p>

<pre><code>public class NavMenuSection implements NavDrawerItem {

public static final int SECTION_TYPE = 0;
private int id;
private String label;

private NavMenuSection() {
}

public static NavMenuSection create( int id, String label ) {
    NavMenuSection section = new NavMenuSection();
    section.setLabel(label);
    return section;
}

@Override
public int getType() {
    return SECTION_TYPE;
}

public String getLabel() {
    return label;
}

public void setLabel(String label) {
    this.label = label;
}

@Override
public boolean isEnabled() {
    return false;
}

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

@Override
public boolean updateActionBarTitle() {
    return false;
}
</code></pre>

<p>}</p>

<p>And another class for list item is </p>

<pre><code>public static final int ITEM_TYPE = 1 ;

private int id ;
private String label ; 
private int icon ;
private boolean updateActionBarTitle ;

private NavMenuItem() {
}

public static NavMenuItem create( int id, String label, String icon, boolean updateActionBarTitle, Context context ) {
    NavMenuItem item = new NavMenuItem();
    item.setId(id);
    item.setLabel(label);
    item.setIcon(context.getResources().getIdentifier( icon, "drawable", context.getPackageName()));
    item.setUpdateActionBarTitle(updateActionBarTitle);
    return item;
}

@Override
public int getType() {
    return ITEM_TYPE;
}

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

public String getLabel() {
    return label;
}

public void setLabel(String label) {
    this.label = label;
}

public int getIcon() {
    return icon;
}

public void setIcon(int icon) {
    this.icon = icon;
}

@Override
public boolean isEnabled() {
    return true;
}

@Override
public boolean updateActionBarTitle() {
    return this.updateActionBarTitle;
}

public void setUpdateActionBarTitle(boolean updateActionBarTitle) {
    this.updateActionBarTitle = updateActionBarTitle;
}
</code></pre>

<p>Now update adapter code</p>

<pre><code>public class NavDrawerAdapter extends  ArrayAdapter&lt;NavDrawerItem&gt;{

private LayoutInflater inflater;

public NavDrawerAdapter(Context context, int textViewResourceId, NavDrawerItem[] objects ) {
    super(context, textViewResourceId, objects);
    this.inflater = LayoutInflater.from(context);
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View view = null ;
    NavDrawerItem menuItem = this.getItem(position);
    if ( menuItem.getType() == NavMenuItem.ITEM_TYPE ) {
        view = getItemView(convertView, parent, menuItem );
    }
    else {
        view = getSectionView(convertView, parent, menuItem);
    }
    return view ;
}

public View getItemView( View convertView, ViewGroup parentView, NavDrawerItem navDrawerItem ) {

    NavMenuItem menuItem = (NavMenuItem) navDrawerItem ;
    NavMenuItemHolder navMenuItemHolder = null;

    if (convertView == null) {
        convertView = inflater.inflate( R.layout.navdrawer_item, parentView, false);
        TextView labelView = (TextView) convertView
                .findViewById( R.id.navmenuitem_label );
        ImageView iconView = (ImageView) convertView
                .findViewById( R.id.navmenuitem_icon );

        navMenuItemHolder = new NavMenuItemHolder();
        navMenuItemHolder.labelView = labelView ;
        navMenuItemHolder.iconView = iconView ;

        convertView.setTag(navMenuItemHolder);
    }

    if ( navMenuItemHolder == null ) {
        navMenuItemHolder = (NavMenuItemHolder) convertView.getTag();
    }

    navMenuItemHolder.labelView.setText(menuItem.getLabel());
    navMenuItemHolder.iconView.setImageResource(menuItem.getIcon());

    return convertView ;
}

public View getSectionView(View convertView, ViewGroup parentView,
        NavDrawerItem navDrawerItem) {

    NavMenuSection menuSection = (NavMenuSection) navDrawerItem ;
    NavMenuSectionHolder navMenuItemHolder = null;

    if (convertView == null) {
        convertView = inflater.inflate( R.layout.navdrawer_section, parentView, false);
        TextView labelView = (TextView) convertView
                .findViewById( R.id.navmenusection_label );

        navMenuItemHolder = new NavMenuSectionHolder();
        navMenuItemHolder.labelView = labelView ;
        convertView.setTag(navMenuItemHolder);
    }

    if ( navMenuItemHolder == null ) {
        navMenuItemHolder = (NavMenuSectionHolder) convertView.getTag();
    }

    navMenuItemHolder.labelView.setText(menuSection.getLabel());

    return convertView ;
}

@Override
public int getViewTypeCount() {
    return 2;
}

@Override
public int getItemViewType(int position) {
    return this.getItem(position).getType();
}

@Override
public boolean isEnabled(int position) {
    return getItem(position).isEnabled();
}


private static class NavMenuItemHolder {
    private TextView labelView;
    private ImageView iconView;
}

private class NavMenuSectionHolder {
    private TextView labelView;
}}
</code></pre>

<p>Then from main activity add list items as section and/or items</p>

<pre><code> NavDrawerItem[] menu = new NavDrawerItem[] {
            NavMenuSection.create( 100, "Logged in user details"),
            //NavMenuItem.create(101,"List/Detail (Fragment)", "navdrawer_friends", true, this),
            //NavMenuItem.create(102, "Airport (AsyncTask)", "navdrawer_airport", false, this),
            //NavMenuSection.create(200, "General"),
            NavMenuItem.create(202, "Rate this app", "drawer_shadow", false, this),
            NavMenuItem.create(203, "Nav", "drawer_shadow", false, this),
            NavMenuItem.create(204, "Quit", "drawer_shadow", false, this)};

    NavDrawerActivityConfiguration navDrawerActivityConfiguration = new NavDrawerActivityConfiguration();
    navDrawerActivityConfiguration.setMainLayout(R.layout.activity_nav_drawer);
    navDrawerActivityConfiguration.setDrawerLayoutId(R.id.drawer_layout);
    navDrawerActivityConfiguration.setLeftDrawerId(R.id.left_drawer);
    navDrawerActivityConfiguration.setNavItems(menu);
    navDrawerActivityConfiguration.setDrawerShadow(R.drawable.drawer_shadow);     
    navDrawerActivityConfiguration.setDrawerOpenDesc(R.string.drawer_open);
    navDrawerActivityConfiguration.setDrawerCloseDesc(R.string.drawer_close);
    navDrawerActivityConfiguration.setBaseAdapter(
        new NavDrawerAdapter(this, R.layout.navdrawer_item, menu ));
</code></pre>

<p>For complete code you can use github link. because I can't paste complete code here.</p>
