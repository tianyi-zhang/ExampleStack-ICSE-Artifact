<p>Well, <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/util/TimSort.java#TimSort.binarySort%28java.lang.Object%5B%5D%2Cint%2Cint%2Cint%2Cjava.util.Comparator%29" rel="nofollow">here's the code</a>, not sure what more you want. Collections.sort seems to ultimately call this.</p>

<pre><code>private static &lt;T&gt; void binarySort(T[] a, int lo, int hi, int start, Comparator&lt;? super T&gt; c) {
    assert lo &lt;= start &amp;&amp; start &lt;= hi;
    if (start == lo)
        start++;
    for ( ; start &lt; hi; start++) {
        T pivot = a[start];
        // Set left (and right) to the index where a[start] (pivot) belongs
        int left = lo;
        int right = start;
        assert left &lt;= right;
        /*
         * Invariants:
         *   pivot &gt;= all in [lo, left).
         *   pivot &lt;  all in [right, start).
         */
        while (left &lt; right) {
            int mid = (left + right) &gt;&gt;&gt; 1;
            if (c.compare(pivot, a[mid]) &lt; 0)
                right = mid;
            else
                left = mid + 1;
        }
        assert left == right;
        /*
         * The invariants still hold: pivot &gt;= all in [lo, left) and
         * pivot &lt; all in [left, start), so pivot belongs at left.  Note
         * that if there are elements equal to pivot, left points to the
         * first slot after them -- that's why this sort is stable.
         * Slide elements over to make room for pivot.
         */
        int n = start - left;  // The number of elements to move
        // Switch is just an optimization for arraycopy in default case
        switch (n) {
            case 2:  a[left + 2] = a[left + 1];
            case 1:  a[left + 1] = a[left];
                     break;
            default: System.arraycopy(a, left, a, left + 1, n);
        }
        a[left] = pivot;
    }
}
</code></pre>
