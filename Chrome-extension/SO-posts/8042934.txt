<p>Now granted, this is just the Sun implementation, but below is the nextInt(int radix) implementation.</p>

<p>Note that it uses a special pattern (<code>integerPattern()</code>). This means if you use <code>next()</code> you'll be using your default pattern. Now if you just made a <code>new Scanner()</code> you'll be using a typical whitespace pattern. But if you used a different pattern, you can't be certain you'll be picking up a word. You might be picking up a line or something.</p>

<p>In the general case I would highly recommend <code>nextInt()</code>, since it provides you with an abstraction, giving you less that's likely to go wrong, and more information when something does.</p>

<p>Read this at your leisure:</p>

<pre><code>public int nextInt(int radix) {
    // Check cached result
    if ((typeCache != null) &amp;&amp; (typeCache instanceof Integer)
    &amp;&amp; this.radix == radix) {
        int val = ((Integer)typeCache).intValue();
        useTypeCache();
        return val;
    }
    setRadix(radix);
    clearCaches();
    // Search for next int
    try {
        String s = next(integerPattern());
        if (matcher.group(SIMPLE_GROUP_INDEX) == null)
            s = processIntegerToken(s);
        return Integer.parseInt(s, radix);
    } catch (NumberFormatException nfe) {
        position = matcher.start(); // don't skip bad token
        throw new InputMismatchException(nfe.getMessage());
    }
}
</code></pre>
