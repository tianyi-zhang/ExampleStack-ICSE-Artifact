<p>I believe the best solution to this problem is to try to keep it simple. Remember, beacause I'm reading from a stream, I want to keep the number of reads from the stream to a minimum (as network or disk latency may be an issue) while keeping the amount of memory used constant (as the stream may be very large in size). Actual efficiency of the string matching is not the number one goal (as that has been <a href="http://en.wikipedia.org/wiki/String_searching_algorithm" rel="nofollow">studied to death</a> already).</p>

<p>Based on AlbertoPL's suggestion, here's a simple solution that compares the buffer against the search string character by character. The key is that because the search is only done one character at a time, no back tracking is needed and therefore no circular buffers, or buffers of a particular size are needed.</p>

<p>Now, if someone can come up with a similar implementation based on <a href="http://en.wikipedia.org/wiki/KMP%5Falgorithm" rel="nofollow">Knuth-Morris-Pratt search algorithm</a> then we'd have a nice efficient solution ;)</p>

<pre><code>public boolean streamContainsString(Reader reader, String searchString) throws IOException {
    char[] buffer = new char[1024];
    int numCharsRead;
    int count = 0;
    while((numCharsRead = reader.read(buffer)) &gt; 0) {
        for (int c = 0; c &lt; numCharsRead; c++) {
            if (buffer[c] == searchString.charAt(count))
                count++;
            else
                count = 0;
            if (count == searchString.length()) return true;
        }
    }
    return false;
}
</code></pre>
