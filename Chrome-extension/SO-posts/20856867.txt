<p>You are assigning the filtered data to your original list and thats why you cant get your original list.
<img src="http://i.stack.imgur.com/YRINk.jpg" alt="enter image description here"></p>

<p>You should assign the filtered result list to your fitems.
e.g. </p>

<pre><code>   fitems = (ArrayList&lt;Item&gt;) results.values;
            notifyDataSetChanged();
</code></pre>

<p>ok just try this refined code:--</p>

<pre><code>public class EntryAdapter extends ArrayAdapter&lt;Item&gt; implements Filterable {

private Context context;
private ArrayList&lt;Item&gt; items;
private ArrayList&lt;Item&gt; fitems;
private LayoutInflater vi;
private contact contact;
 private ItemsFilter mFilter;
public EntryAdapter(Context context,ArrayList&lt;Item&gt; items) {
    super(context,0, items);
    this.context = context;
    this.contact=(contact) context;
    this.items = items;
    this.fitems = new ArrayList&lt;Item&gt;(); 
    vi = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
}

@Override
public int getCount() {
// TODO Auto-generated method stub

return items.size();
}

@Override
public Item getItem(int position) {
// TODO Auto-generated method stub
return super.getItem(position);
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View v = convertView;

    final Item i = fitems.get(position);

    if (i != null) {
        if(i.isSection()){
            SectionItem si = (SectionItem)i;
            v = vi.inflate(R.layout.list_item_section, null);

            v.setOnClickListener(null);
            v.setOnLongClickListener(null);
            v.setLongClickable(false);

            final TextView sectionView = (TextView) v.findViewById(R.id.list_item_section_text);
            sectionView.setText(si.getTitle());

        }else{
            EntryItem ei = (EntryItem)i;
            v = vi.inflate(R.layout.entrylist, null);
            final TextView title = (TextView)v.findViewById(R.id.list_item_entry_title);
            final TextView subtitle = (TextView)v.findViewById(R.id.list_item_entry_summary);


            if (title != null) 
                title.setText(ei.title);
            if(subtitle != null)
                subtitle.setText(ei.subtitle);
        }
    }
    return v;
}

 public Filter getFilter() {
        if (mFilter == null) {
            mFilter = new ItemsFilter();
        }
        return mFilter;

    }

  private class ItemsFilter extends Filter{

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        FilterResults results = new FilterResults();
       ArrayList&lt;Item&gt; FilteredArrList = new ArrayList&lt;Item&gt;();
        if (constraint == null || constraint.length() == 0){
            results.values = items;
            results.count = items.size();

        }
        else{
             constraint = constraint.toString().toUpperCase();
             ArrayList&lt;Item&gt; itemsList = new ArrayList&lt;Item&gt;();

             for (Item i : items){

                 if (i.toString().toUpperCase().startsWith(constraint))
                        FilteredArrList.add(i);
             }
             results.values = FilteredArrList;
                results.count = FilteredArrList.size();
        }

        return results;
    }

    @Override
    protected void publishResults(CharSequence constraint,
            FilterResults results) {
     fitems = (ArrayList&lt;Item&gt;) results.values;
                notifyDataSetChanged();
    }
 }

 }
</code></pre>
