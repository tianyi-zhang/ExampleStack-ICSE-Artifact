<p>If you're preparing HTML in the server side, you need to make sure that all reserved HTML characters in <strong>user-controlled input</strong> are properly escaped, else it may cause the JS code to become syntactically invalid (and make your website prone for <a href="http://en.wikipedia.org/wiki/Cross-site_scripting" rel="nofollow">XSS</a>). You need escape <em>at least</em> the reserved HTML characters <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>"</code> and <code>'</code> into HTML entities <code>&amp;lt;</code>, <code>&amp;gt;</code>, <code>&amp;amp;</code>, <code>&amp;quot;</code> and <code>&amp;apos;</code> respectively.</p>

<p>You mentioned that you're using Coldfusion, which is Java based. As the standard Java SE/EE API doesn't provide builtin facilities to escape them, you'll need to either write one yourself, e.g.</p>

<pre><code>public static final String escapeHTML(String string){
    StringBuilder builder = new StringBuilder();
    for (char c : string.toCharArray()) {
        switch (c) {
            case '&lt;': builder.append("&amp;lt;"); break;
            case '&gt;': builder.append("&amp;gt;"); break;
            case '&amp;': builder.append("&amp;amp;"); break;
            case '"': builder.append("&amp;quot;"); break;
            case '\'': builder.append("&amp;apos;"); break;
            default: builder.append(c); break;
        }
    }
    return builder.toString();
}
</code></pre>

<p>..which can be used as</p>

<pre><code>input = escapeHTML(input);
</code></pre>

<p>..or to grab for example <a href="http://commons.apache.org/lang" rel="nofollow">Apache Commons Lang</a> <a href="http://commons.apache.org/lang/api/org/apache/commons/lang/StringEscapeUtils.html#escapeHtml4%28java.lang.String%29" rel="nofollow"><code>StringEscapeUtils#escapeHtml4</code></a> which can be used as</p>

<pre><code>input = StringEscapeUtils.escapeHtml4(input);
</code></pre>

<p>Once again, only do this for user-controlled input. You don't need to do this for any HTML code which you hardcoded in the server side code (else it would get displayed plain as-is). Thus do something like:</p>

<pre><code>StringBuilder comment = new StringBuilder();
comment.append("&lt;div class=\"comment\"&gt;");
comment.append(escapeHTML(input));
comment.append("&lt;/div&gt;");
</code></pre>

<p>That said, I already commented in your question with the hint that you'd better to do this in jQuery, because that's after all much better for maintainability and reusability. You don't want to have raw HTML somewhere hidden in depths of Java code. You also don't want to make the JSON result dependent of the purpose. Just return a generic (and HTML-sanitized) JSON result and let jQuery build the HTML.</p>
