<p>Looking at <a href="http://grepcode.com/file/repo1.maven.org/maven2/net.sf.json-lib/json-lib/2.4/net/sf/json/JSONObject.java#JSONObject.toString%28%29" rel="nofollow"><code>toString</code> of <code>net.sf.json.JSONObject</code></a> it eventually calls the following method to translate the numbers to <code>String</code> (<a href="http://grepcode.com/file/repo1.maven.org/maven2/net.sf.json-lib/json-lib/2.4/net/sf/json/util/JSONUtils.java#JSONUtils.numberToString%28java.lang.Number%29" rel="nofollow">source code here</a>):</p>

<pre><code>public static String numberToString(Number n) {
        if (n == null) {
            throw new JSONException("Null pointer");
        }
        //testValidity(n);

        // Shave off trailing zeros and decimal point, if possible.

        String s = n.toString();
        if (s.indexOf('.') &gt; 0 &amp;&amp; s.indexOf('e') &lt; 0 &amp;&amp; s.indexOf('E') &lt; 0) {
            while (s.endsWith("0")) {
                s = s.substring(0, s.length() - 1);
            }
            if (s.endsWith(".")) {
                s = s.substring(0, s.length() - 1);
            }
        }
        return s;
    }
</code></pre>

<p>It clearly tries to get rid of the trailing zeroes when it can, (<code>s = s.substring(0, s.length() - 1)</code> if a String is ending in zero).</p>

<pre><code>System.out.println(numberToString(1.1) + " vs " + numberToString(1.0));
</code></pre>

<p>Gives,</p>

<pre><code>1.1 vs 1
</code></pre>
