<p>As you are using JOptionPane you can use html inside to give it format. Make an Employee class and make it's natural order by type, or you can use a Comparator if you don't want to use <code>Comparable</code></p>

<p>I made a complete example for you.</p>

<pre><code>import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.swing.JOptionPane;

public class Employee implements Comparable&lt;Employee&gt; {
    private String type;
    private String name;

    public Employee(String type, String name) {
        super();
        this.type = type;
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((type == null) ? 0 : type.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Employee other = (Employee) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (type == null) {
            if (other.type != null)
                return false;
        } else if (!type.equals(other.type))
            return false;
        return true;
    }

    public int compareTo(Employee o) {
        if (this.type.equals(o.type)) {
            return name.compareTo(o.name);
        }
        return type.compareTo(o.type);
    }

    public static void main(String[] args) {
        List&lt;Employee&gt; employees = new ArrayList&lt;Employee&gt;();
        employees.add(new Employee("CA","John"));
        employees.add(new Employee("CA", "Suzy"));
        employees.add(new Employee("TA","Malcom"));
        employees.add(new Employee("AA","Rose"));

        // Sort the list by type as its natural order or use proper Comparator
        Collections.sort(employees);

        StringBuilder sb = new StringBuilder();
        sb.append("&lt;html&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;Type&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;");
        for (Employee e : employees) {
            sb.append("&lt;tr&gt;");
            sb.append("&lt;td&gt; ").append(e.getType()).append("&lt;/td&gt;");
            sb.append("&lt;td&gt; ").append(e.getName()).append("&lt;/td&gt;");
            sb.append("&lt;/tr&gt;");
        }
        sb.append("&lt;/table&gt;&lt;/html&gt;");
        JOptionPane.showMessageDialog(null, sb);
  }
}
</code></pre>

<p>Output:</p>

<p><img src="http://i.stack.imgur.com/kdFG2.png" alt="enter image description here"></p>
