<p>From the <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/math/BigDecimal.java?av=f" rel="nofollow">OpenJDK implementation</a> of BigDecimal:</p>

<pre><code>/**
     * Compares this {@code BigDecimal} with the specified
     * {@code Object} for equality.  Unlike {@link
     * #compareTo(BigDecimal) compareTo}, this method considers two
     * {@code BigDecimal} objects equal only if they are equal in
     * value and scale (thus 2.0 is not equal to 2.00 when compared by
     * this method).
     *
     * @param  x {@code Object} to which this {@code BigDecimal} is 
     *         to be compared.
     * @return {@code true} if and only if the specified {@code Object} is a
     *         {@code BigDecimal} whose value and scale are equal to this 
     *         {@code BigDecimal}'s.
     * @see    #compareTo(java.math.BigDecimal)
     * @see    #hashCode
     */
    @Override
    public boolean equals(Object x) {
        if (!(x instanceof BigDecimal))
            return false;
        BigDecimal xDec = (BigDecimal) x;
        if (x == this)
            return true;
    if (scale != xDec.scale)
        return false;
        long s = this.intCompact;
        long xs = xDec.intCompact;
        if (s != INFLATED) {
            if (xs == INFLATED)
                xs = compactValFor(xDec.intVal);
            return xs == s;
        } else if (xs != INFLATED)
            return xs == compactValFor(this.intVal);

        return this.inflate().equals(xDec.inflate());
    }
</code></pre>

<p>More from the implementation:</p>

<pre><code> * &lt;p&gt;Since the same numerical value can have different
 * representations (with different scales), the rules of arithmetic
 * and rounding must specify both the numerical result and the scale
 * used in the result's representation.
</code></pre>

<p>Which is why the implementation of <code>equals</code> takes <code>scale</code> into consideration. The constructor that takes a string as a parameter is implemented like this:</p>

<pre><code>    public BigDecimal(String val) {
        this(val.toCharArray(), 0, val.length());
    }
</code></pre>

<p>where the third parameter will be used for the <code>scale</code> (in another constructor) which is why the strings <code>1.0</code> and <code>1.00</code> will create different BigDecimals (with different scales).</p>

<p>From <em><a href="http://rads.stackoverflow.com/amzn/click/0321356683" rel="nofollow">Effective Java</a></em> By Joshua Bloch:</p>

<blockquote>
  <p>The final paragraph of the compareTo contract, which is a strong
  suggestion rather than a true provision, simply states that the
  equality test imposed by the compareTo method should generally return
  the same results as the equals method. If this provision is obeyed,
  the ordering imposed by the compareTo method is said to be consistent
  with equals. If it’s violated, the ordering is said to be inconsistent
  with equals. A class whose compareTo method imposes an order that is
  inconsistent with equals will still work, but sorted collections
  containing elements of the class may not obey the general contract of
  the appropriate collection interfaces (Collection, Set, or Map). This
  is because the general contracts for these interfaces are defined in
  terms of the equals method, but sorted collections use the equality
  test imposed by compareTo in place of equals. It is not a catastrophe
  if this happens, but it’s something to be aware of.</p>
</blockquote>
