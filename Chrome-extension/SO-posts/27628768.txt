<p>Try to change component orientation by calling <code>setComponentOrientation()</code> method for each component you want to use arabic inside it, for combobox your should override its cell renderer to support right to left displaying, try the following code:</p>

<pre><code>public class Test extends JFrame
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable(){
            public void run()
            {
                try
                {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }
                catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e)
                {
                    e.printStackTrace();
                }
                new Test();
            }
        });
    }

    public Test()
    {
        setBounds(100,100,380,400);
        setTitle("????? ??????");
        getContentPane().setLayout(new FlowLayout(FlowLayout.RIGHT));
        JComboBox&lt;String&gt; comboBox = new JComboBox&lt;String&gt;(new String[]{"???????","???????","?????"});
        comboBox.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        comboBox.setPreferredSize(new Dimension(300,comboBox.getPreferredSize().height));
        comboBox.setRenderer(new CellRenderer());
        add(comboBox);

        JTextPane textPane = new JTextPane();
        textPane.setPreferredSize(new Dimension(300, 300));
        textPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        JScrollPane scroll = new JScrollPane(textPane);
        scroll.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        add(scroll);

        setVisible(true);
    }

}

class CellRenderer implements ListCellRenderer&lt;String&gt;
{
    @Override
    public Component getListCellRendererComponent(JList&lt;? extends String&gt; list, String value, int index, boolean isSelected, boolean cellHasFocus)
    {
        JLabel label = new JLabel(value);
        label.setOpaque(true);
        label.setFocusable(true);
        label.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        if (isSelected) {
            label.setBackground(list.getSelectionBackground());
            label.setForeground(list.getSelectionForeground());
        } else {
            label.setBackground(list.getBackground());
            label.setForeground(list.getForeground());
        }
        return label;
    }
}
</code></pre>

<p>Result:</p>

<p><img src="http://i.stack.imgur.com/N6ULh.png" alt="enter image description here"></p>

<p>For title bar orienation it will not work for you if you are using the host look and feel for title bar, but it works if you call <code>JFrame.setDefaultLookAndFeelDecorated(true)</code> then your app will use the provided look and feel and not the host one, next you should call <code>setComponentOrientation()</code> method on your frame to specify the desired orientation, try this code to activate right to left for title bar:</p>

<pre><code>public class Test extends JFrame
{
    public static void main(String[] args)
    {
        SwingUtilities.invokeLater(new Runnable(){
            public void run()
            {
                JFrame.setDefaultLookAndFeelDecorated(true);  
                new Test();
            }
        });
    }

    public Test()
    {
        setBounds(100,100,380,400);
        setTitle("????? ??????");
        setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        getContentPane().setLayout(new FlowLayout(FlowLayout.RIGHT));
        JComboBox&lt;String&gt; comboBox = new JComboBox&lt;String&gt;(new String[]{"???????","???????","?????"});
        comboBox.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        comboBox.setPreferredSize(new Dimension(300,comboBox.getPreferredSize().height));
        comboBox.setRenderer(new CellRenderer());
        add(comboBox);

        JTextPane textPane = new JTextPane();
        textPane.setPreferredSize(new Dimension(300, 300));
        textPane.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        JScrollPane scroll = new JScrollPane(textPane);
        scroll.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        add(scroll);

        setVisible(true);
    }

}

class CellRenderer implements ListCellRenderer&lt;String&gt;
{
    @Override
    public Component getListCellRendererComponent(JList&lt;? extends String&gt; list, String value, int index, boolean isSelected, boolean cellHasFocus)
    {
        JLabel label = new JLabel(value);
        label.setOpaque(true);
        label.setFocusable(true);
        label.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        if (isSelected) {
            label.setBackground(list.getSelectionBackground());
            label.setForeground(list.getSelectionForeground());
        } else {
            label.setBackground(list.getBackground());
            label.setForeground(list.getForeground());
        }
        return label;
    }
}
</code></pre>

<p>Result :</p>

<p><img src="http://i.stack.imgur.com/ycVVa.png" alt="enter image description here"></p>

<p>NB: </p>

<ul>
<li>Don't forget to save your source files using UTF-8 encoding to support arabic characters.</li>
<li><code>JFrame.setDefaultLookAndFeelDecorated(true)</code> must be called before creating any frame instance.</li>
</ul>
