<p>This is a synthesis of some of the other answers that have been provided.  The Java system properties provide enough information to come up with the path to the java command and the classpath in what, I think, is a platform independent way.</p>

<pre><code>public final class JavaProcess {

    private JavaProcess() {}        

    public static int exec(Class klass) throws IOException,
                                               InterruptedException {
        String javaHome = System.getProperty("java.home");
        String javaBin = javaHome +
                File.separator + "bin" +
                File.separator + "java";
        String classpath = System.getProperty("java.class.path");
        String className = klass.getCanonicalName();

        ProcessBuilder builder = new ProcessBuilder(
                javaBin, "-cp", classpath, className);

        Process process = builder.start();
        process.waitFor();
        return process.exitValue();
    }

}
</code></pre>

<p>You would run this method like so:</p>

<pre><code>int status = JavaProcess.exec(MyClass.class);
</code></pre>

<p>I thought it made sense to pass in the actual class rather than the String representation of the name since the class has to be in the classpath anyways for this to work.</p>
