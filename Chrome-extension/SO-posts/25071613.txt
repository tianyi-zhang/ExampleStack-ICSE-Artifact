<p>Building off Dan O's solution, here's a method that automatically takes into account the alpha channel and makes the optimization/ tradeoff of <code>getPixels</code> vs <code>getPixel</code>.</p>

<p>The cost is memory but the benefit is performance, invocation of a virtual method in a loop that could possibly be run several million times [i.e. an 8MP image has 3,456x2,304 = 7,962,624 pixels]). I've even taken things one step further by removing the looped <code>android.graphics.Color</code> method calls.</p>

<pre><code>public static int getDominantColor(Bitmap bitmap) {
   if (null == bitmap) return Color.TRANSPARENT;

   int redBucket = 0;
   int greenBucket = 0;
   int blueBucket = 0;
   int alphaBucket = 0;

   boolean hasAlpha = bitmap.hasAlpha();
   int pixelCount = bitmap.getWidth() * bitmap.getHeight();
   int[] pixels = new int[pixelCount];
   bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());

   for (int y = 0, h = bitmap.getHeight(); y &lt; h; y++)
   {
       for (int x = 0, w = bitmap.getWidth(); x &lt; w; x++)
       {
           int color = pixels[x + y * w]; // x + y * width
           redBucket += (color &gt;&gt; 16) &amp; 0xFF; // Color.red
           greenBucket += (color &gt;&gt; 8) &amp; 0xFF; // Color.greed
           blueBucket += (color &amp; 0xFF); // Color.blue
           if (hasAlpha) alphaBucket += (color &gt;&gt;&gt; 24); // Color.alpha
       }
   }

   return Color.argb(
           (hasAlpha) ? (alphaBucket / pixelCount) : 255,
           redBucket / pixelCount,
           greenBucket / pixelCount,
           blueBucket / pixelCount);
}
</code></pre>
