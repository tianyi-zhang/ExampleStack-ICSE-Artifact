<p>Take a look at your getView function:</p>

<pre><code>@Override
public View getView(final int position, View convertView, ViewGroup parent) {
   ViewHolder mainHolder = null;
    if (convertView == null) {
        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = inflater.inflate(resource, parent, false);
        Log.e("GET-VIEW", " Creating Views");
       final ViewHolder holder = new ViewHolder();
        holder.add = (Button) convertView.findViewById(R.id.add);
        holder.sub = (Button) convertView.findViewById(R.id.sub);
        holder.textView = (TextView) convertView.findViewById(R.id.numberTV);
        holder.add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                holder.textView.setText("HIII");
            }
        });
        convertView.setTag(holder);
    } else {
       mainHolder = (ViewHolder) convertView.getTag();
    }

    return convertView;
}
</code></pre>

<p>You edit the content of your holder <code>textView</code> and <code>add</code> Button only when you create a new Viewholder.
The first time your listview shows its items, there will be always a new view created (and a new Viewholder, too) for all visible cells.
As soon as you scroll down, the adapter will take a now-invisble cell (maybe the frist cell) and recycle it to show a now-visible cell. In this case, your <code>convertView</code> in getView won't be null anymore, as the view was recycled.
So you should handle all your text changes an Listener and so on outside of your <code>if</code> statement to manage both cases (recycled and new).
For example:</p>

<pre><code>    if (convertView == null) {
        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = inflater.inflate(resource, parent, false);
        Log.e("GET-VIEW", " Creating Views");
        final ViewHolder holder = new ViewHolder();
        holder.add = (Button) convertView.findViewById(R.id.add);
        holder.sub = (Button) convertView.findViewById(R.id.sub);
        holder.textView = (TextView) convertView.findViewById(R.id.numberTV);

        convertView.setTag(holder);
    } else {
       mainHolder = (ViewHolder) convertView.getTag();
    }

    holder.textView.setText("");
    holder.add.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                holder.textView.setText("HIII");
            }
        });
</code></pre>

<p><strong>Edit</strong>
To save your data in a sparse array like Yaroslav Mytkalyk suggested would be a better approach.
Anyway, you have to handle recycled views.</p>
