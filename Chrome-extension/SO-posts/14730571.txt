<p>I get it. Problem is: <code>img.setOnTouchListener(this);</code> This get event, process it and return true, which means this event was handlet.</p>

<p>You have 3 options:</p>

<p>1) Set <code>onTouchListener</code> to parent view and manually send touch event to childs
2) You could determine if user touch images <code>return true</code>, otherwise return false
3) write your own class and override <code>onTouchEvent(..)</code> method </p>

<p>I recommend 3 option. I rewrite for you:</p>

<pre><code>package com.example.paint_main;

import java.io.File;
import java.util.ArrayList;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.os.Bundle;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ToggleButton;

public class Paint_main extends Activity  {

    MyImageView img;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_paint_main);

        img = (MyImageView) findViewById(R.id.imageView1);
        img.init(getWindowManager().getDefaultDisplay().getWidth(), getWindowManager().getDefaultDisplay().getHeight());

        Button btn_undo = (Button) findViewById(R.id.undoButton);

        btn_undo.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) { img.onClickUndo(); }
        });

        Button btn_redo = (Button) findViewById(R.id.redoButton);

        btn_redo.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) { img.onClickRedo(); }
        });
    }

    static class MyImageView extends ImageView {

        static Paint p1;
        static Paint p2;
        Bitmap bm = null;
        Float startx;
        Float starty;
        Float endx;
        Float endy;
        Button b1;
        EditText et;
        File file; 
        File myDir;
        private static ToggleButton toggleButton;
        private Canvas mCanvas;
        private Path mPath;

        private ArrayList&lt;Path&gt; paths = new ArrayList&lt;Path&gt;();
        private ArrayList&lt;Path&gt; undonePaths = new ArrayList&lt;Path&gt;();

        static {
            p1 = new Paint();
            p1.setAntiAlias(true);
            p1.setDither(true);
            p1.setStyle(Paint.Style.STROKE);
            p1.setStrokeJoin(Paint.Join.ROUND);
            p1.setStrokeCap(Paint.Cap.ROUND);
            p1.setColor(Color.GREEN);
            p1.setStrokeWidth(6);
        }

        public MyImageView(Context context, AttributeSet attrs, int defStyle) {
            super(context, attrs, defStyle);
        }

        public MyImageView(Context context, AttributeSet attrs) {
            super(context, attrs);
        }

        public MyImageView(Context context) {
            super(context);
        }

        public void init(int width, int height) {
            bm = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
            mCanvas = new Canvas(bm);
            mPath = new Path();
        }

        @Override
        public boolean onTouchEvent(MotionEvent event) {
            float x = event.getX();
            float y = event.getY();

            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    touch_start(x, y);
                    this.invalidate();
                    onDraw(mCanvas);
                    break;
                case MotionEvent.ACTION_MOVE:
                    touch_move(x, y);
                    this.invalidate();
                    onDraw(mCanvas);
                    break;
                case MotionEvent.ACTION_UP:
                    touch_up();
                    this.invalidate();
                    onDraw(mCanvas);
                    break;
            }
            return true;
        }

        private float mX, mY;
        private static final float TOUCH_TOLERANCE = 4;

        private void touch_start(float x, float y) {
            mPath.reset();
            mPath.moveTo(x, y);
            mX = x;
            mY = y;
        }

        private void touch_move(float x, float y) {
            float dx = Math.abs(x - mX);
            float dy = Math.abs(y - mY);

            if (dx &gt;= TOUCH_TOLERANCE || dy &gt;= TOUCH_TOLERANCE) {
                mPath.quadTo(mX, mY, (x + mX)/2, (y + mY)/2);
                mX = x;
                mY = y;
            }
        }

        private void touch_up() {
            mPath.lineTo(mX, mY);
            // commit the path to our offscreen
            mCanvas.drawPath(mPath, p1);
            // kill this so we don't double draw            
            // mPath = new Path();
            // paths.add(mPath);
            paths.add(mPath);
            mPath = new Path();
        }

        public void onClickUndo () { 
            if (paths.size() &gt; 0) { 
                undonePaths.add(paths.remove(paths.size()-1));
                invalidate();
                onDraw(mCanvas);
            }
        }

        public void onClickRedo (){
            if (undonePaths.size() &gt; 0) { 
                paths.add(undonePaths.remove(undonePaths.size()-1)); 
                invalidate();
                onDraw(mCanvas);
            } 
        }

        protected void onDraw(Canvas canvas) {
            //mPath = new Path();
            //canvas.drawPath(mPath, mPaint);

            if (bm == null)
                return;

            for (Path p : paths) { 
                canvas.drawPath(p, p1); }
                canvas.drawPath(mPath, p1);
        }
    }
} 
</code></pre>

<p>Don't forget add your class into layout:</p>

<pre><code>&lt;view class="com.example.paint_main.Paint_main$MyImageView"
    android:id="@+id/imageView1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_above="@+id/redoButton"
    android:layout_alignParentLeft="true"
    android:layout_alignParentRight="true"
    android:layout_alignParentTop="true" /&gt;
</code></pre>

<p>In addition, you should use View instead of ImageView because you don't use any specific ImageView functions. I rewrite with ImageView for more easier understanding what I mean in third option.</p>
