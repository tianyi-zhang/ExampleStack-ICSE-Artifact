<p>You could instead loop and construct the string <code>"?, ?, ? ... , ?"</code>, just put as many question marks as ids you have to ask the DB for. Use <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html" rel="nofollow">StringBuilder</a> to construct the String</p>

<p>Here some sample code:</p>

<pre><code>@Test
public void genSqlInParameterString() {
    String select = "SELECT * FROM my_table WHERE ";
    System.out.println(select + genSqlInParameterString(null));
    System.out.println(select + genSqlInParameterString(new String[]{}));
    System.out.println(select + genSqlInParameterString(new String[]{"A"}));
    System.out.println(select + genSqlInParameterString(new String[]{"A", "B"}));
}


public String genSqlInParameterString(String[] args) {
    StringBuilder sb = new StringBuilder();
    if(args != null &amp;&amp; args.length &gt; 0) {
        sb.append("IN (");
        for(int i = 0; i &lt; args.length ; i++) {
            sb.append('\'').append(args[i]).append('\'');
            if(i &lt; args.length-1) {
                sb.append(", ");
            }
        }
        sb.append(")");
    }
    if(sb.length() == 0) {
        // condition evaluates to false, so that select returns nothing 
        // you may instead return 1=1 so that all records are returned
        // handling no-paramters case depends on your requirements
        sb.append("1=0"); 
    }
    return sb.toString();
}
</code></pre>

<p><strong>Output</strong></p>

<pre><code>SELECT * FROM my_table WHERE 1=0
SELECT * FROM my_table WHERE 1=0
SELECT * FROM my_table WHERE IN ('A')
SELECT * FROM my_table WHERE IN ('A', 'B')
</code></pre>
