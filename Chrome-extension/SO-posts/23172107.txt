<p>Android documentation says, that we should do it in this way.</p>

<pre><code>public Bitmap openPhoto(long contactId) {
        Uri contactUri = ContentUris.withAppendedId(ContactsContract.Contacts.CONTENT_URI, contactId);
        Uri photoUri = Uri.withAppendedPath(contactUri, ContactsContract.Contacts.Photo.CONTENT_DIRECTORY);
        Cursor cursor = getContentResolver().query(photoUri,
                new String[] {ContactsContract.Contacts.Photo.PHOTO}, null, null, null);
        if (cursor == null) {
            return null;
        }
        try {
            if (cursor.moveToFirst()) {
                byte[] data = cursor.getBlob(0);
                if (data != null) {
                    return BitmapFactory.decodeStream(new ByteArrayInputStream(data));
                }
            }
        } finally {
            cursor.close();
        }
        return null;

}
</code></pre>

<p>For <code>contactId</code> you can use:</p>

<pre><code> public static long getContactIDFromNumber(String contactNumber, Context context) {
    String UriContactNumber = Uri.encode(contactNumber);
    long phoneContactID = new Random().nextInt();
    Cursor contactLookupCursor = context.getContentResolver().query(Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, UriContactNumber),
            new String[]{ContactsContract.PhoneLookup.DISPLAY_NAME, ContactsContract.PhoneLookup._ID}, null, null, null);
    while (contactLookupCursor.moveToNext()) {
        phoneContactID = contactLookupCursor.getLong(contactLookupCursor.getColumnIndexOrThrow(ContactsContract.PhoneLookup._ID));
    }
    contactLookupCursor.close();

    return phoneContactID;
}
</code></pre>

<p>source: <a href="http://developer.android.com/intl/ru/reference/android/provider/ContactsContract.Contacts.Photo.html">http://developer.android.com/intl/ru/reference/android/provider/ContactsContract.Contacts.Photo.html</a></p>
