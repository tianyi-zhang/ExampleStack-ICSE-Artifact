<p>Fortunately, the Java standard libraries include <code>Arrays.binarySearch</code> which gives you the "insertion point" of an element if it is not included in an array: </p>

<blockquote>
  <p><strong>Returns:</strong>   index of the search key, if it is contained in the array;
  otherwise, (-(insertion point) - 1). The insertion point is defined as
  the point at which      the key would be inserted into the array: the
  index of the first element greater than the key, or a.length if all
  elements in the array are less than     the specified key. Note that
  this guarantees that the return value will be >= 0 if and only if the
  key is found.</p>
</blockquote>

<p>With that we can implement your requirement very concisely:</p>

<pre><code>import java.util.Arrays;

public class ClosestValue
{
    static long closestValue(long[] sorted, long key)
    {
        if(sorted.length==1) {return sorted[0];}    // trivial case
        if(key&lt;sorted[0]) {return sorted[0];} // lower boundary
        if(key&gt;sorted[sorted.length-1]) {return sorted[sorted.length-1];} // upper boundary
        int pos = Arrays.binarySearch(sorted, key);
        if(pos&gt;=0) {return sorted[pos];} // we found an exact match
        // we didn't find an exact match, now we have two candidates: insertion point and insertion point-1 (we excluded the trivial case before)
        // pos = -ip-1 | +ip -pos =&gt; ip = -pos-1
        int ip = -pos-1;
        long closest;
        if(sorted[ip]-key&lt;key-sorted[ip-1]) {closest=sorted[ip];} // &lt; can be &lt;= if smaller value is preferred
        else                            {closest=sorted[ip-1];}
        return closest;
    }

    public static void main(String[] args)
    {
        System.out.println(closestValue(new long[] {1,4,6,7,8,19},3));
        System.out.println(closestValue(new long[] {1,2,4,5},3));
        System.out.println(closestValue(new long[] {1,2,4,5},7));
        System.out.println(closestValue(new long[] {1,2,4,5},-5));
    }
}
</code></pre>
