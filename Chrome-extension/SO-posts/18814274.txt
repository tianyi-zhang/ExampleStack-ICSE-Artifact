<p>The dialog that is shown is created in the <code>performClick()</code> method. However, it doesn't look like you could change the layout of the list items here, as the <a href="http://developer.android.com/reference/android/app/AlertDialog.Builder.html#setMultiChoiceItems%28java.lang.CharSequence%5b%5d,%20boolean%5b%5d,%20android.content.DialogInterface.OnMultiChoiceClickListener%29" rel="nofollow"><code>setMultiChoiceItems(...)</code></a> method does not support it.</p>

<p>So you will need to implement a custom view for your dialog, which you can set in the <a href="http://developer.android.com/reference/android/app/AlertDialog.Builder.html#setView%28android.view.View%29" rel="nofollow"><code>setView(...)</code></a> method (<a href="http://developer.android.com/guide/topics/ui/dialogs.html#CustomLayout" rel="nofollow">example</a>). And you will also have to implement the <code>onClick()</code> method by yourself then.</p>

<p><strong>Update:</strong> Maybe the better way is using the <a href="http://developer.android.com/reference/android/app/AlertDialog.Builder.html#setAdapter%28android.widget.ListAdapter,%20android.content.DialogInterface.OnClickListener%29" rel="nofollow"><code>setAdapter(...)</code></a> method. This way you can just use your own list adapter, so you can style the items the way you want. And this method does also provide an onclick listener argument. So it may be simpler.</p>

<p><strong>Update 2:</strong> I tried a bit myself, and this is what I came up with. I added a comment, where you can insert your own view:</p>

<pre class="lang-csharp prettyprint-override"><code>public class MultiSpinner extends Spinner implements OnCancelListener,
        OnItemClickListener {
    public class MultiSpinnerListAdapter extends BaseAdapter {
        @Override
        public int getCount() {
            return items.size();
        }

        @Override
        public String getItem(int position) {
            return items.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            // TODO: Update the following to use your own custom view.

            if (convertView == null) {
                convertView = activity.getLayoutInflater().inflate(
                        android.R.layout.simple_list_item_multiple_choice,
                        parent, false);
            }

            CheckedTextView textView = (CheckedTextView) convertView;
            textView.setText(items.get(position));
            textView.setChecked(selected[position]);

            return convertView;
        }
    }

    private MultiSpinnerListAdapter adapter;
    private Activity activity;
    private List&lt;String&gt; items;
    private boolean[] selected;
    private String defaultText;
    private MultiSpinnerListener listener;

    public MultiSpinner(Context context) {
        super(context);
    }

    public MultiSpinner(Context arg0, AttributeSet arg1) {
        super(arg0, arg1);
    }

    public MultiSpinner(Context arg0, AttributeSet arg1, int arg2) {
        super(arg0, arg1, arg2);
    }

    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position,
            long id) {
        CheckedTextView textView = (CheckedTextView) view;

        textView.setChecked(!textView.isChecked());
        selected[position] = textView.isChecked();
    }

    @Override
    public void onCancel(DialogInterface dialog) {
        // refresh text on spinner
        StringBuffer spinnerBuffer = new StringBuffer();
        boolean someUnselected = false;
        for (int i = 0; i &lt; items.size(); i++) {
            if (selected[i] == true) {
                spinnerBuffer.append(items.get(i));
                spinnerBuffer.append(", ");
            } else {
                someUnselected = true;
            }
        }
        String spinnerText;
        if (someUnselected) {
            spinnerText = spinnerBuffer.toString();
            if (spinnerText.length() &gt; 2)
                spinnerText = spinnerText
                        .substring(0, spinnerText.length() - 2);
        } else {
            spinnerText = defaultText;
        }
        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(getContext(),
                android.R.layout.simple_spinner_item,
                new String[] { spinnerText });
        setAdapter(adapter);
        listener.onItemsSelected(selected);
    }

    @Override
    public boolean performClick() {
        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
        builder.setAdapter(adapter, null);
        builder.setPositiveButton(android.R.string.ok,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.cancel();
                    }
                });
        builder.setOnCancelListener(this);

        AlertDialog dialog = builder.create();
        dialog.getListView().setOnItemClickListener(this);

        dialog.show();
        return true;
    }

    public void setItems(Activity activity, List&lt;String&gt; items, String allText,
            MultiSpinnerListener listener) {
        this.adapter = new MultiSpinnerListAdapter();
        this.activity = activity;
        this.items = items;
        this.defaultText = allText;
        this.listener = listener;

        // all selected by default
        selected = new boolean[items.size()];
        for (int i = 0; i &lt; selected.length; i++)
            selected[i] = true;

        // all text on the spinner
        ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(getContext(),
                android.R.layout.simple_spinner_item, new String[] { allText });
        setAdapter(adapter);
    }

    public interface MultiSpinnerListener {
        public void onItemsSelected(boolean[] selected);
    }
}
</code></pre>
