<p>I struggled a while to find a straightforward solution to whitespace gobbling, so here the one I finally came up with. It is inspired from  and Vadzim's answer and this page <a href="http://wiki.apache.org/velocity/StructuredGlobbingResourceLoader" rel="nofollow">http://wiki.apache.org/velocity/StructuredGlobbingResourceLoader</a></p>

<p>The StructuredGlobbingResourceLoader we can find on the website has a complex behaviour and doesnâ€™t get rid of any kind of whitespace, so I modified it to get the simple behaviour: "Delete any whitespace at the beginning of the lines, and add a comment at the end of each line" (which prevents the linebreak evaluation). The filter is applied on the input stream at loading time.</p>

<p>This kind of velocity template</p>

<pre><code>#if($value)
    the value is $value
#end
</code></pre>

<p>is transformed to</p>

<pre><code>#if($value)##
the value is $value##
#end##
</code></pre>

<p>Then if you want to have linebreaks or beginning of line whitespaces, you'll have to put($br,"\n") and put($sp," ") in your context like Vadzim's explained and explicitly use them in your template. This way of doing will allow you to keep indented templates, with maximum control.</p>

<p>take the class from this page <a href="http://wiki.apache.org/velocity/StructuredGlobbingResourceLoader" rel="nofollow">http://wiki.apache.org/velocity/StructuredGlobbingResourceLoader</a>
change the extended class to the kind of loader your need (this one uses the webapp loader)
replace the read() method with the code I provide
use the class as your resource loader in your properties. Example for the webapp loader: webapp.resource.loader.class=...StructuredGlobbingResourceLoader</p>

<pre><code>public int read() throws IOException {        
    int ch;
    switch(state){
        case bol: //beginning of line, read until non-indentation character
            while(true){
                ch = in.read();
                if (ch!=(int)' ' &amp;&amp; ch!=(int)'\t'){
                    state = State.content;
                    return processChar(ch);
                }
            }

        case content:
            ch = in.read();
            return processChar(ch);

        //eol states replace all "\n" by "##\n"
        case eol1: 
            state = State.eol2;
            return (int)'#';

        case eol2:
            state = State.bol;
            return (int)'\n';

        case eof: 
            return -1;
    }
    return -1;
}

//Return the normal character if not end of file or \n
private int processChar(int ch){
    switch(ch){
    case -1:
        state = State.eof;
        return -1;
    case (int)'\n':
        state = State.eol1;
    return (int)'#';
    default:
        return ch;
    }
}
</code></pre>

<p>Any feedback on my implementation is welcome</p>
