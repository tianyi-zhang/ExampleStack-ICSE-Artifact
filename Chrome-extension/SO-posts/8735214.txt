<p>This is the code I use to convert a UTC time string to a localized time string. Note the key for conversion is to use the <code>TimeZone</code> methods <code>getRawOffset()</code>, <code>inDaylightTime(...)</code> and <code>getDSTSavings()</code>.</p>

<p>Note my date format is slightly different to what you are using so you'll need to change it.</p>

<pre><code>public String GetLocalDateStringFromUTCString(String utcLongDateTime) {
    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    String localDateString = null;

    long when = 0;
    try {
        when = dateFormat.parse(utcLongDateTime).getTime();
    } catch (ParseException e) {
        e.printStackTrace();
    }
    localDateString = dateFormat.format(new Date(when + TimeZone.getDefault().getRawOffset() + (TimeZone.getDefault().inDaylightTime(new Date()) ? TimeZone.getDefault().getDSTSavings() : 0)));

    return localDateString;
}
</code></pre>

<p>Obviously you want a <code>Date</code> object so you just need to change this line...</p>

<pre><code>localDateString = dateFormat.format(new Date(when + TimeZone.getDefault().getRawOffset() + (TimeZone.getDefault().inDaylightTime(new Date()) ? TimeZone.getDefault().getDSTSavings() : 0)));
</code></pre>

<p>...to...</p>

<pre><code>Date localDate = new Date(when + TimeZone.getDefault().getRawOffset() + (TimeZone.getDefault().inDaylightTime(new Date()) ? TimeZone.getDefault().getDSTSavings() : 0));
</code></pre>

<p>...then you just need to change the return type of the method and return <code>localDate</code>.</p>
