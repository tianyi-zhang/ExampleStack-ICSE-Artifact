<p>Thought I'd add a workaround method that works with foreach loops (<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=5003547" rel="nofollow">ref</a>), plus you can convert it to java 8's new String#codePoints method easily when you move to java 8:</p>

<pre><code>public static Iterable&lt;Integer&gt; codePoints(final String string) {
  return new Iterable&lt;Integer&gt;() {
    public Iterator&lt;Integer&gt; iterator() {
      return new Iterator&lt;Integer&gt;() {
        int nextIndex = 0;
        public boolean hasNext() {
          return nextIndex &lt; string.length();
        }
        public Integer next() {
          int result = string.codePointAt(nextIndex);
          nextIndex += Character.charCount(result);
          return result;
        }
        public void remove() {
          throw new UnsupportedOperationException();
        }
      };
    }
  };
}
</code></pre>

<p>Then you can use it with foreach like this:</p>

<pre><code> for(int codePoint : codePoints(myString)) {
   ....
 }
</code></pre>

<p>Or alternately if you just want to convert a string to an array of int (which might use more RAM than the above approach):</p>

<pre><code> public static List&lt;Integer&gt; stringToCodePoints(String in) {
    if( in == null)
      throw new NullPointerException("got null");
    List&lt;Integer&gt; out = new ArrayList&lt;Integer&gt;();
    final int length = in.length();
    for (int offset = 0; offset &lt; length; ) {
      final int codepoint = in.codePointAt(offset);
      out.add(codepoint);
      offset += Character.charCount(codepoint);
    }
    return out;
  }
</code></pre>
