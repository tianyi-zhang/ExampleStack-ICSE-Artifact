<p>I am not sure if you are trying to get the RGB from the camera in order to use it outside the phone. But maybe you can convert YUV to RGB in the android,a nd then pass the RGB pixel array?</p>

<p>Here is the code I used to convert to RGB:</p>

<p>For openning the camera I used:</p>

<pre><code>try {
    camera = Camera.open();
    cameraParam = camera.getParameters();
    cameraParam.setPreviewFormat(ImageFormat.NV21);
    List&lt;int[]&gt; fps = cameraParam.getSupportedPreviewFpsRange();
    camera.setDisplayOrientation(90);
    camera.setParameters(cameraParam);
    cameraParam = camera.getParameters();
    camera.startPreview();

    // wait for frames to come in
    camera.setPreviewCallback(new PreviewCallback() {
        @Override
        public void onPreviewFrame(byte[] data, Camera camera) {
            frameHeight = camera.getParameters().getPreviewSize().height;
             frameWidth = camera.getParameters().getPreviewSize().width;
             int rgb[] = new int[frameWidth * frameHeight]; // number of pixels
             // the following returns a pixel array in RGB format
             byte[] bytes = decodeYUV420SP(rgb, data, frameWidth, frameHeight);
        }
    });
} catch (Exception e) {
    Log.e("camera", "  error camera  ");
}
</code></pre>

<p>The <code>decodeYUV420SP</code> I got from a differnet post you can find it <a href="http://www.akeric.com/blog/?p=1342" rel="nofollow">here</a>.</p>

<p>And here is the code itself from the above post:</p>

<pre><code>//  Byte decoder : ---------------------------------------------------------------------
int[] decodeYUV420SP(int[] rgb, byte[] yuv420sp, int width, int height) {
    Log.e("camera", "   decodeYUV420SP  ");
    Log.e("camera", "   Clearing Sums and Pixel Arrays  ");
    sumRED = 0;
    sumGREEN = 0;
    sumBLUE = 0;
    rStandardDeviation.clear();
    gStandardDeviation.clear();
    bStandardDeviation.clear();
    // TODO Auto-generated method stub
    final int frameSize = width * height;

    for (int j = 0, yp = 0; j &lt; height; j++) {
        int uvp = frameSize + (j &gt;&gt; 1) * width, u = 0, v = 0;
        for (int i = 0; i &lt; width; i++, yp++) {
            int y = (0xff &amp; (yuv420sp[yp])) - 16;
            if (y &lt; 0)
                y = 0;
            if ((i &amp; 1) == 0) {
                v = (0xff &amp; yuv420sp[uvp++]) - 128;
                u = (0xff &amp; yuv420sp[uvp++]) - 128;
            }

            int y1192 = 1192 * y;
            int r = (y1192 + 1634 * v);
            int g = (y1192 - 833 * v - 400 * u);
            int b = (y1192 + 2066 * u);

            if (r &lt; 0)
                r = 0;
            else if (r &gt; 262143)
                r = 262143;
            if (g &lt; 0)
                g = 0;
            else if (g &gt; 262143)
                g = 262143;
            if (b &lt; 0)
                b = 0;
            else if (b &gt; 262143)
                b = 262143;

            rgb[yp] = 0xff000000 | ((r &lt;&lt; 6) &amp; 0xff0000) | ((g &gt;&gt; 2) &amp; 0xff00) | ((b &gt;&gt; 10) &amp; 0xff);

        }
    }
    return rgb;
} 
</code></pre>

<p>Then once you read back the return rgb pixel array by running <code>decodeYUV420SP</code> you can reconstruct the image by:</p>

<pre><code>Bitmap bitmap= BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
</code></pre>

<p>Hope it helps. My code might have errors, double check stuff, but in general it works for me.</p>
