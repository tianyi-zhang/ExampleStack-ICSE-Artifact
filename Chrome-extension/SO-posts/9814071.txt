<p>I have yet to find an example that actually uses the built-in layout, <code>android.R.layout.two_line_list_item</code> and a <code>ListView</code> insted of <code>ListActivity</code>.  So here goes.</p>

<p><strong>If you're in a hurry, the <code>TwoLineArrayAdapter.getView()</code> override below is the important part of using the default <code>two_line_list_item</code> layout.</strong></p>

<h1>Your data</h1>

<p>You have a class that defines your list items.  I'll assume you have an array of these.</p>

<pre><code>public class Employee {
    public String name;
    public String title;
}
</code></pre>

<h1>An abstract TwoLineArrayAdapter</h1>

<p>This abstract class can be reused, and makes defining a two-line <code>ListView</code> much easier later.  You <em>can</em> supply your own layout, but the two argument constructor uses the built-in <code>two_line_list_item</code> layout.  <strong>The only requirement for custom list item layouts is that they must use <code>@android:id/text1</code> and <code>@android:id/text2</code> to identify their <code>TextView</code> children, just as <code>two_line_list_item</code> does.</strong></p>

<pre><code>public abstract class TwoLineArrayAdapter&lt;T&gt; extends ArrayAdapter&lt;T&gt; {
        private int mListItemLayoutResId;

        public TwoLineArrayAdapter(Context context, T[] ts) {
            this(context, android.R.layout.two_line_list_item, ts);
        }

        public TwoLineArrayAdapter(
                Context context, 
                int listItemLayoutResourceId,
                T[] ts) {
            super(context, listItemLayoutResourceId, ts);
            mListItemLayoutResId = listItemLayoutResourceId;
        }

        @Override
        public android.view.View getView(
                int position, 
                View convertView,
                ViewGroup parent) {


            LayoutInflater inflater = (LayoutInflater)getContext()
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

            View listItemView = convertView;
            if (null == convertView) { 
                listItemView = inflater.inflate(
                    mListItemLayoutResId, 
                    parent, 
                    false);
            }

            // The ListItemLayout must use the standard text item IDs.
            TextView lineOneView = (TextView)listItemView.findViewById(
                android.R.id.text1);
            TextView lineTwoView = (TextView)listItemView.findViewById(
                android.R.id.text2);

            T t = (T)getItem(position); 
            lineOneView.setText(lineOneText(t));
            lineTwoView.setText(lineTwoText(t));

            return listItemView;
        }

        public abstract String lineOneText(T t);

        public abstract String lineTwoText(T t);
}
</code></pre>

<h1>A concrete TwoLineArrayAdapter</h1>

<p>Finally, here's the code you write specific to your Employee class so that it'll render in your <code>ListView</code>.</p>

<pre><code>public class EmployeeArrayAdapter extends TwoLineArrayAdapter&lt;Employee&gt; {
    public EmployeeArrayAdapter(Context context, Employee[] employees) {
        super(context, employees);
    }

    @Override
    public String lineOneText(Employee e) {
        return e.name;
    }

    @Override
    public String lineTwoText(Employee e) {
        return e.title;
    }
}
</code></pre>

<h1>Activity.onCreate()</h1>

<p>In your Activity's <code>onCreate()</code> method, you'll have code that looks like this:</p>

<pre><code>    employees = new Employee[...];
    //...populate the employee array...

    employeeLV = (ListView)findViewById(R.id.employee_list);
    employeeLV.setAdapter(new EmployeeArrayAdapter(this, employees);
</code></pre>
