<p>There seems to be a bug in the implementation of String.replace() in Android 2.2. I could not find the exact source code for Android 2.2, but I managed to find the source code for Android 2.1. The implementation of the replace method is:</p>

<pre><code>public String replace(CharSequence target, CharSequence replacement) {
    if (target == null) {
        throw new NullPointerException("target should not be null");
    }
    if (replacement == null) {
        throw new NullPointerException("replacement should not be null");
    }
    String ts = target.toString();
    int index = indexOf(ts, 0);

    if (index == -1)
        return this;

    String rs = replacement.toString();
    StringBuilder buffer = new StringBuilder(count);
    int tl = target.length();
    int tail = 0;
    do {
        buffer.append(value, offset + tail, index - tail);
        buffer.append(rs);
        tail = index + tl;
    } while ((index = indexOf(ts, tail)) != -1);
    //append trailing chars
    buffer.append(value, offset + tail, count - tail);

    return buffer.toString();
}
</code></pre>

<p>The do-while loop does not terminate if both <code>target</code> and <code>replacement</code> are the empty string. Both <code>index</code> and <code>tail</code> are initialized to zero. <code>indexOf(ts, tail)</code> returns the value of <code>tail</code>, which is zero. <code>tail = index + tl</code> does not increase <code>tail</code> because both <code>index</code> and <code>tl</code> are zero.</p>

<p>This explains the observed behavior. I assume that since user1256821 observed the same behavior in Android 2.2 this bug was still present in Android 2.2.</p>
