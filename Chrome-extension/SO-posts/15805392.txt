<p>here is sample code that you can use to ignore SSL certificate errors make a new java class named SimpleSSLSocketFactory </p>

<pre><code>  public class SimpleSSLSocketFactory extends org.apache.http.conn.ssl.SSLSocketFactory {
    private SSLSocketFactory sslFactory = HttpsURLConnection.getDefaultSSLSocketFactory();

    public SimpleSSLSocketFactory(KeyStore truststore) throws NoSuchAlgorithmException, KeyManagementException, KeyStoreException,
            UnrecoverableKeyException {
        super(null);

        try {
            SSLContext context = SSLContext.getInstance("TLS");

            // Create a trust manager that does not validate certificate chains and simply
            // accept all type of certificates
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return new java.security.cert.X509Certificate[] {};
                }

                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }

                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
                }
            } };

            // Initialize the socket factory
            context.init(null, trustAllCerts, new SecureRandom());
            sslFactory = context.getSocketFactory();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException, UnknownHostException {
        return sslFactory.createSocket(socket, host, port, autoClose);
    }

    @Override
    public Socket createSocket() throws IOException {
        return sslFactory.createSocket();
    }
}
</code></pre>

<p>and use following httpclient instead of default client</p>

<pre><code>// Setup a custom SSL Factory object which simply ignore the certificates
    // validation and accept all type of self signed certificates
    SSLSocketFactory sslFactory = new SimpleSSLSocketFactory(null);
    sslFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);

    // Enable HTTP parameters
    HttpParams paramsSecure = new BasicHttpParams();
    HttpProtocolParams.setVersion(paramsSecure, HttpVersion.HTTP_1_1);
    HttpProtocolParams.setContentCharset(paramsSecure, HTTP.UTF_8);

    // Register the HTTP and HTTPS Protocols. For HTTPS, register our custom SSL Factory object.
    SchemeRegistry registry = new SchemeRegistry();
    registry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
    registry.register(new Scheme("https", sslFactory, 443));

    // Create a new connection manager using the newly created registry and then create a new HTTP client
    // using this connection manager
    ClientConnectionManager ccm = new ThreadSafeClientConnManager(paramsSecure, registry);
    HttpClient httpclient = new DefaultHttpClient(ccm, paramsSecure);
</code></pre>

<p>cheers!!</p>
