<p><strong>Rewrite</strong></p>

<p>Have you implemented Item's toString() method?</p>

<pre><code>public class Item {
    ...

    // Define a method to return a String that describes each Item, preferably unique String
    public String toString() {
        return name + "  " + brand + "  " + model + "  " + type;
    }
}
</code></pre>

<p>When I use this method with every thing you have posted, the EditText filters the ListView just fine. Let me know if this simple change works for you.</p>

<p><strong>Efficiency</strong> </p>

<p>I want to point out a few tricks for your existing code to run faster.</p>

<p>Look at your database adapter's get_item_all() method. </p>

<ul>
<li>For a new Cursor you only need to call moveToNext(), this will return true while there is valid data to be read. </li>
<li>IDs in SQliteDatabases are <code>long</code> data types. You should change the id in Item from an <code>int</code> to a <code>long</code> and use Cursor.getLong(). </li>
<li>You search for each column's index for <em>every</em> item. Find the indices once and store them locally.</li>
</ul>

<p>All together, this is more efficient:</p>

<pre><code>int idIndex = cursor.getColumnIndex(items_id);
int nameIndex = cursor.getColumnIndex(items_item_name);
//etc.

while (cursor.moveToNext()) {
    Item dbitems = new Item();

    dbitems.setID(cursor.getLong(idIndex));
    dbitems.setName(cursor.getString(nameIndex));
    ...
    itemList.add(dbitems);              
}
</code></pre>

<p>Next, look at Item.getView().</p>

<ul>
<li>You only need to create one LayoutInflater and store it in the class. I suggest initializing it in your constructor. </li>
<li>You use findViewById() and <code>item.get(position)</code> multiple times every time getView() is called. Whenever the user scrolls the ListView the adapter uses getView() to display each row, you only need to call findViewById() when <code>convertView</code> is null. </li>
</ul>

<p>All together:</p>

<p>Create a variable called <code>LayoutInflater mInflater</code> and initialize it in your constructor:</p>

<pre><code>mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
</code></pre>

<p>In your ItemAdapter add this nested class: </p>

<pre><code>public class ViewHolder {
    TextView name;
    TextView brand;
    TextView purchase_date;
}
</code></pre>

<p>In getView():</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder viewHolder;
    Item item = (Item) getItem(position);
    if(convertView == null) {
        convertView = mInflater.inflate(R.layout.list_item, parent, false);

        viewHolder = new ViewHolder();
        viewHolder.name = (TextView) convertView.findViewById(R.id.tv_item_name);
        viewHolder.brand = (TextView) convertView.findViewById(R.id.tv_item_brand);
        viewHolder.purchase_date = (TextView) convertView.findViewById(R.id.tv_purchase_date);
        convertView.setTag(viewHolder);
    }
    else
        viewHolder = (ViewHolder) convertView.getTag();

    viewHolder.name.setText(item.getName());
    viewHolder.brand.setText("[" + item.getItemType() + "] " + item.getBrand() + " " + item.getModel());
    viewHolder.purchase_date.setText(item.getPurchasedDateStr());
    return convertView;
}
</code></pre>

<p>Do you see how much less work happens if convertView has already been created? Hope that helps.</p>
