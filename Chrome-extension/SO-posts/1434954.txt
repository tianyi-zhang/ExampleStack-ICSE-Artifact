<p>I ended up writing my own. It can be called like </p>

<pre><code>URIUtils.withQuery(uri, "param1", "value1", "param2", "value2");
</code></pre>

<p>which isn't so bad.</p>

<pre><code>/**
 * Concatenates &lt;code&gt;uri&lt;/code&gt; with a query string generated from
 * &lt;code&gt;params&lt;/code&gt;.
 *
 * @param uri the base URI
 * @param params a &lt;code&gt;Map&lt;/code&gt; of key/value pairs
 * @return a new &lt;code&gt;URI&lt;/code&gt;
 */

public static URI withQuery(URI uri, Map&lt;String, String&gt; params) {
    StringBuilder query = new StringBuilder();
    char separator = '?';
    for (Entry&lt;String, String&gt; param : params.entrySet()) {
        query.append(separator);
        separator = '&amp;';
        try {
            query.append(URLEncoder.encode(param.getKey(), "UTF-8"));
            if (!StringUtils.isEmpty(param.getValue())) {
                query.append('=');
                query.append(URLEncoder.encode(param.getValue(), "UTF-8"));
            }
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
    return URI.create(uri.toString() + query.toString());
}

/**
 * Concatenates &lt;code&gt;uri&lt;/code&gt; with a query string generated from
 * &lt;code&gt;params&lt;/code&gt;.  The members of &lt;code&gt;params&lt;/code&gt; will be
 * interpreted as {key1, val1, key2, val2}.  Empty values can be given
 * as &lt;code&gt;""&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.
 *
 * @param uri the base URI
 * @param params the key/value pairs in sequence
 * @return a new &lt;code&gt;URI&lt;/code&gt;
 */
public static URI withQuery(URI uri, String... params) {
    Map&lt;String, String&gt; map = new LinkedHashMap&lt;String, String&gt;();
    for (int i = 0; i &lt; params.length; i += 2) {
        String key = params[i];
        String val = i + 1 &lt; params.length ? params[i + 1] : "";
        map.put(key, val);
    }
    return withQuery(uri, map);
}
</code></pre>
