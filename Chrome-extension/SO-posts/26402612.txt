<pre><code>public class SingleContactActivity extends Activity implements OnClickListener {

private static final String TAG_ImageList = "CatList";
private static final String TAG_ImageID = "ID";
private static final String TAG_ImageUrl = "Name";

private static String url_MultiImage;
TextView uid, pid;
JSONArray contacts = null;
private ProgressDialog pDialog;
String details;
// String imagepath = "http://test2.sonasys.net/Content/WallPost/b3.jpg";
String imagepath = "";
String imagepath2;
Bitmap bitmap;
ImageView image;
SessionManager session;
TextView myprofileId;

TextView pending;
TextView Categories, visibleTo;
int count = 0;
ImageButton btn;

// -----------------------
ArrayList&lt;HashMap&lt;String, String&gt;&gt; ImageList;
JSONArray JsonArray = null;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_single_contact);

    url_MultiImage = "http://test2.sonasys.net/Android/GetpostImg?UserID=1&amp;PostId=80";

    new MultiImagePath().execute();

    ImageList = new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();

}

private class MultiImagePath extends AsyncTask&lt;Void, Void, Void&gt; {
    @Override
    protected void onPreExecute() {
        super.onPreExecute();

    }

    @Override
    protected Void doInBackground(Void... params) {
        // TODO Auto-generated method stub

        // Creating service handler class instance
        ServiceHandler sh = new ServiceHandler();

        // Making a request to url and getting response
        String jsonStr = sh.makeServiceCall(url_MultiImage,
                ServiceHandler.GET);

        Log.d("Response: ", "&gt; " + jsonStr);

        if (jsonStr != null) {
            try {
                JSONObject jsonObj = new JSONObject(jsonStr);

                // Getting JSON Array node
                JsonArray = jsonObj.getJSONArray(TAG_ImageList);
                if (JsonArray.length() != 0) {

                    for (int i = 0; i &lt; JsonArray.length(); i++) {
                        JSONObject c = JsonArray.getJSONObject(i);

                        String Img_ID = c.getString(TAG_ImageID);
                        String Img_Url = c.getString(TAG_ImageUrl);

                        // tmp hashmap for single contact
                        HashMap&lt;String, String&gt; contact = new HashMap&lt;String, String&gt;();

                        // adding each child node to HashMap key =&gt; value
                        contact.put(TAG_ImageID, Img_ID);
                        contact.put(TAG_ImageUrl, Img_Url);

                        // adding contact to contact list
                        ImageList.add(contact);
                    }
                }
                Log.e("JsonLength", "length is ZERO");

            } catch (JSONException e) {
                e.printStackTrace();
            }
        } else {
            Log.e("ServiceHandler", "Couldn't get any data from the url");
        }

        return null;
    }

    @Override
    protected void onPostExecute(Void result) {
        super.onPostExecute(result);

        AutoGenImgBtn();

    }

}

@SuppressWarnings("deprecation")
public void AutoGenImgBtn() {

    int count = ImageList.size();
    LinearLayout llimage = (LinearLayout) findViewById(R.id.llimage);

    ImageButton[] btn = new ImageButton[count];
    for (int i = 0; i &lt; count; i++) {
        btn[i] = new ImageButton(this);

        btn[i].setId(Integer.parseInt(ImageList.get(i).get(TAG_ImageID)));
        btn[i].setOnClickListener(this);
        btn[i].setTag("" + ImageList.get(i).get(TAG_ImageUrl));

        btn[i].setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,
                LayoutParams.WRAP_CONTENT));
        btn[i].setImageDrawable(getResources().getDrawable(drawable.di1));
        btn[i].setAdjustViewBounds(true);

        // btn[i].setTextColor(getResources().getColor(color.white));

        llimage.addView(btn[i]);

    }

}

@SuppressWarnings("deprecation")
@Override
public void onClick(View v) {
    // TODO Auto-generated method stub

    btn = (ImageButton) v;
    String s = btn.getTag().toString();

    new ImageDownloader().execute(s);

}

private class ImageDownloader extends AsyncTask&lt;String, Void, Bitmap&gt; {

    @Override
    protected Bitmap doInBackground(String... param) {
        // TODO Auto-generated method stub
        return downloadBitmap(param[0]);
    }

    @Override
    protected void onPreExecute() {
        Log.i("Async-Example", "onPreExecute Called");
        pDialog = new ProgressDialog(SingleContactActivity.this);
        pDialog.setMessage("Loading...");
        pDialog.setCancelable(true);
        pDialog.setTitle("In progress...");
        // pDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
        pDialog.setIcon(android.R.drawable.stat_sys_download);
        pDialog.setMax(100);
        // pDialog.setTitle("Post Details");
        pDialog.show();

    }

    @Override
    protected void onPostExecute(Bitmap result) {
        Log.i("Async-Example", "onPostExecute Called");

        if (bitmap != null) {
            btn.setImageBitmap(bitmap);

        }

        if (pDialog.isShowing())
            pDialog.dismiss();

    }

    private Bitmap downloadBitmap(String url) {
        // initilize the default HTTP client object
        final DefaultHttpClient client = new DefaultHttpClient();

        // forming a HttoGet request
        final HttpGet getRequest = new HttpGet(url);
        try {

            HttpResponse response = client.execute(getRequest);

            // check 200 OK for success
            final int statusCode = response.getStatusLine().getStatusCode();

            if (statusCode != HttpStatus.SC_OK) {
                Log.w("ImageDownloader", "Error " + statusCode
                        + " while retrieving bitmap from " + url);
                return null;

            }

            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    // getting contents from the stream
                    inputStream = entity.getContent();

                    // decoding stream data back into image Bitmap that
                    // android understands
                    bitmap = BitmapFactory.decodeStream(inputStream);

                    return bitmap;
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (Exception e) {
            // You Could provide a more explicit error message for
            // IOException
            getRequest.abort();
            Log.e("ImageDownloader", "Something went wrong while"
                    + " retrieving bitmap from " + url + e.toString());
        }

        return null;
    }
}



  #  Add Service Handler Class#

 public class ServiceHandler {

static String response = null;
public final static int GET = 1;
public final static int POST = 2;

public ServiceHandler() {

}

/*
 * Making service call
 * @url - url to make request
 * @method - http request method
 * */
public String makeServiceCall(String url, int method) {



    return this.makeServiceCall(url, method, null);
}

/*
 * Making service call
 * @url - url to make request
 * @method - http request method
 * @params - http request params
 * 

 * */

public String makeServiceCall(String url, int method,List&lt;NameValuePair&gt; params) {

    try {
        // http client

        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpEntity httpEntity = null;
        HttpResponse httpResponse = null;

        // Checking http request method type
        if (method == POST) {
            HttpPost httpPost = new HttpPost(url);
            // adding post params
            if (params != null) {               
                httpPost.setEntity(new UrlEncodedFormEntity(params));

            }

            httpResponse = httpClient.execute(httpPost);

        } else if (method == GET) {
            // appending params to url
            if (params != null) {
                String paramString = URLEncodedUtils.format(params, "utf-8");
                url += "?" + paramString;
            }
            HttpGet httpGet = new HttpGet(url);

            httpResponse = httpClient.execute(httpGet);

        }
        httpEntity = httpResponse.getEntity();
        response = EntityUtils.toString(httpEntity);

    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (ClientProtocolException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    return response;

}
</code></pre>
