<p>Okay I got it. Took me a long time though.</p>

<p>So first you have to create a custom TypeAdapterFactory like the following class:</p>

<pre><code>public class ItemTypeAdapterFactory implements TypeAdapterFactory {

    String name;

    public ItemTypeAdapterFactory(String name) {
        this.name = name;
    }

    public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, final TypeToken&lt;T&gt; type) {

        final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);
        final TypeAdapter&lt;JsonElement&gt; elementAdapter = gson.getAdapter(JsonElement.class);

        return new TypeAdapter&lt;T&gt;() {

            public void write(JsonWriter out, T value) throws IOException {
                delegate.write(out, value);
            }

            public T read(JsonReader in) throws IOException {

                JsonElement jsonElement = elementAdapter.read(in);
                if (jsonElement.isJsonObject()) {
                    JsonObject jsonObject = jsonElement.getAsJsonObject();
                    if (jsonObject.has(name) &amp;&amp; jsonObject.get(name).isJsonObject())
                    {
                        jsonElement = jsonObject.get(name);
                    }
                }

                return delegate.fromJsonTree(jsonElement);
            }
        }.nullSafe();
    }
}
</code></pre>

<p>For your usage you can actually just copy and paste that but please try and understand what happens.</p>

<p>Next you will have to implement a custom GsonBuilder like follows:</p>

<pre><code>Gson gson = new GsonBuilder().registerTypeAdapterFactory(new ItemTypeAdapterFactory("dyrus")).create();
</code></pre>

<p><strong>The important part is the "dyrus" which you can replace with the name you are looking for.</strong></p>

<p>Next add the gsonbuilder to your restadapter:</p>

<pre><code>RestAdapter restAdapter = new RestAdapter.Builder()
                    .setEndpoint("your endpoint")
                    .setConverter(new GsonConverter(gson))
                    .build();
</code></pre>

<p>Use the following method in your connection interface:</p>

<pre><code>public void getCurrentUser(Callback&lt;Summoner&gt; response);
</code></pre>

<p>And receive your POJO response as follows:</p>

<pre><code>    ConnectionInterface connectionInterface = restAdapter.create(**ConnectionInterface.class**);
    connectionInterface.getCurrentUser(new Callback&lt;Summoner&gt;() {
        @Override
        public void success(Summoner response, Response response2) {
        }

        @Override
        public void failure(RetrofitError error) {
            Log.e("Response", error.getLocalizedMessage().toString());
        }
    });
}
</code></pre>

<p>};</p>

<p><strong>Your POJO class is correct you can name it anything you want a long as the variables retain their names. You can call the class UserPOJO for clarity and just rename all instances of Summoner to UserPojo</strong></p>

<p>Hope this helps!</p>
