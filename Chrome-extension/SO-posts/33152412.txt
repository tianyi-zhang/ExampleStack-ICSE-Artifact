<p>I suggest to define a class Contact and compare an old contact with a new contact using the standard equals method</p>

<pre><code>import org.junit.Test;

public class MyTest {

@Test
public void myTest() {
    Contact oldContact= new Contact("A",1,"A");
    Contact newContact= new Contact("A",1,"A");
    System.out.println(oldContact.equals(newContact));
}   

}


class Contact{
String newAddress;
int newMobileNumber;
String newOfficeId;


public Contact(String newAddress, int newMobileNumber, String newOfficeId) {
    super();
    this.newAddress = newAddress;
    this.newMobileNumber = newMobileNumber;
    this.newOfficeId = newOfficeId;
}


@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Contact other = (Contact) obj;
    if (newAddress == null) {
        if (other.newAddress != null)
            return false;
    } else if (!newAddress.equals(other.newAddress))
        return false;
    if (newMobileNumber != other.newMobileNumber)
        return false;
    if (newOfficeId == null) {
        if (other.newOfficeId != null)
            return false;
    } else if (!newOfficeId.equals(other.newOfficeId))
        return false;
    return true;
}


 }
class Person{

Contact newContact;
Contact oldContact;
public Person(Contact newContact, Contact oldContact) {
    super();
    this.newContact = newContact;
    this.oldContact = oldContact;
}

}
</code></pre>
