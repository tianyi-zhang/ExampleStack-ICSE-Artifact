<pre><code>import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;


public class SudokuNrupen {

     public static int[][] p;
     public static int tmp[] ;
     public static int tmp2D[][] ;


    public static void main(String[] args){

        tmp = new int[9];
        tmp2D = new int[3][3];
        p = new int[9][9];

         System.out.print("Enter the name of he file below ");
         Scanner scan = new Scanner (System.in);
         String name = scan.nextLine();
         File file = new File( name );

         if ( file.exists()){   
            try {
                Scanner inFile = new Scanner( file );
                for(int i=0; i&lt;9; i++){
                     for(int j=0; j&lt;9; j++){
                         if(inFile.hasNextInt()){
                             p[i][j] = inFile.nextInt();
                         }
                     }
                 }   
            inFile.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SudokuNrupen.class.getName()).log(Level.SEVERE, null, ex);
            }
       }

      display(p);
      solve(p);
      System.out.println("Solved Sudoku is:");
      display(p);      


     }

     public static void display(int [][] p)
    {
        for(int i=0; i&lt;p.length;i++)
        {
            for(int j=0; j&lt;p[i].length;j++)
            {
                System.out.print("   ");
                if(p[i][j]&lt;10)     System.out.print(p[i][j] + " ");
                else                    System.out.print(p[i][j]);
                System.out.print("  ");
            }
            System.out.println();
        }    
    }  

    public static boolean solve(int [][] p)
    {
        if(!isValidSudoku(p))
        {
             return false;
        }
        if(isComplete(p)==true)
        {
            return true;
        }
        for(int i=0; i&lt;9; i++)
        {
            for(int j=0 ; j&lt;9 ; j++)
            {
                if(p[i][j]==0) 
                {
                    int k=1;
                    while(k&lt;=9)
                    {
                        p[i][j]=k;
                        if(solve(p))
                        {
                            return true;
                        }
                        else    k++;
                    }    
                    p[i][j]=0; 
                    return false; 
                }
            }
        }
        return true;
    }


    public static boolean isComplete(int [][]p)
    {
        for(int i=0; i&lt;9; i++)
        {
            for(int j=0 ; j&lt;9 ; j++)
            {
                if(p[i][j]==0){
                    return false;
                }
            }
        }
        return true;
    }    


    public static boolean isRepeated(int [] a)
    {
        for(int i=0; i&lt;8; i++)
        {
            if((a[i]!=0 || a[i+1]!=0))
            {
                     if(a[i]==a[i+1]){
                         return true;
                     }
            }  
        }
        return false;    
    }


 public static boolean isDuplicateEx0(int [][]p)
    {

        for(int i=0; i&lt;p[0].length; i++)
        {
            for(int j=0 ; j&lt;9 ; j++)
            {
                tmp[j]=p[i][j];
            }
            Arrays.sort(tmp);

            System.out.println(Arrays.toString(tmp));

            if(isRepeated(tmp)==true)
            {
                System.out.println("Duplicates are found in row");
                return true;
            }

        }

        display(p);
        for(int j=0; j&lt;p[0].length; j++)
        {
            for(int i=0 ; i&lt;9 ; i++)
            {
                tmp[i]=p[i][j];
            }
            Arrays.sort(tmp);

            if(isRepeated(tmp)==true)
            {
                System.out.println("Duplicates are found in columns");
                return true;
            }

        }

        display(p);

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }

        int x=0,y=0;

        for(int i=0; i&lt;3;i++)
        {   
            y=0;
            for(int j=0;j&lt;3;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=0; i&lt;3;i++)
        {   
            y=0;
            for(int j=3;j&lt;6;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }


        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=0; i&lt;3;i++)
        {   
            y=0;
            for(int j=6;j&lt;9;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=3; i&lt;6;i++)
        {   
            y=0;
            for(int j=0;j&lt;3;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=3; i&lt;6;i++)
        {   
            y=0;
            for(int j=3;j&lt;6;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=3; i&lt;6;i++)
        {   
            y=0;
            for(int j=6;j&lt;9;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=6; i&lt;9;i++)
        {   
            y=0;
            for(int j=0;j&lt;3;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=6; i&lt;9;i++)
        {   
            y=0;
            for(int j=3;j&lt;6;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }

        for(int z=0;z&lt;9;z++){
            tmp[z]=0;
        }
        x=0;
        y=0;

        for(int i=6; i&lt;9;i++)
        {   
            y=0;
            for(int j=6;j&lt;9;j++)
            {
                tmp2D[x][y]=p[i][j];
                y++;
            }
            x++;
        }
        for(int i=0; i&lt;3; i++)
        {
            for(int j=0; j&lt;3; j++)
            {
                tmp[(i*tmp2D.length) + j] = tmp2D[i][j];
            }
        }
        Arrays.sort(tmp);
        if(isRepeated(tmp)==true)
        {
            return true;
        }


        return false;
    }



     public static boolean isValidSudoku(int [][] p)
     {
           return (!isDuplicateEx0(p));  
     }
}
</code></pre>
