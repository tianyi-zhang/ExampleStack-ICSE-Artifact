<p>If you like the image to be 1bit black/white you can use a simple (&amp; slow) threshold algorithm</p>

<pre><code>public static Bitmap createBlackAndWhite(Bitmap src) {
    int width = src.getWidth();
    int height = src.getHeight();
    // create output bitmap
    Bitmap bmOut = Bitmap.createBitmap(width, height, src.getConfig());
    // color information
    int A, R, G, B;
    int pixel;

    // scan through all pixels
    for (int x = 0; x &lt; width; ++x) {
        for (int y = 0; y &lt; height; ++y) {
            // get pixel color
            pixel = src.getPixel(x, y);
            A = Color.alpha(pixel);
            R = Color.red(pixel);
            G = Color.green(pixel);
            B = Color.blue(pixel);
            int gray = (int) (0.2989 * R + 0.5870 * G + 0.1140 * B);

            // use 128 as threshold, above -&gt; white, below -&gt; black
            if (gray &gt; 128) 
                gray = 255;
            else
                gray = 0;
            // set new pixel color to output bitmap
            bmOut.setPixel(x, y, Color.argb(A, gray, gray, gray));
        }
    }
    return bmOut;
}
</code></pre>

<p>But depending on what that will not look good, for better results you need a dithering algorithm, see <a href="http://en.wikipedia.org/wiki/Dithering#Algorithms">Algorithm overview</a> - this one is the threshold method.</p>

<hr>

<p>For 256 levels of gray conversion:</p>

<p>according to <a href="http://www.mathworks.de/help/toolbox/images/ref/rgb2gray.html">http://www.mathworks.de/help/toolbox/images/ref/rgb2gray.html</a> you calculate the gray value of each pixel as <code>gray = 0.2989 * R + 0.5870 * G + 0.1140 * B</code> which would translate to</p>

<pre><code>public static Bitmap createGrayscale(Bitmap src) {
    int width = src.getWidth();
    int height = src.getHeight();
    // create output bitmap
    Bitmap bmOut = Bitmap.createBitmap(width, height, src.getConfig());
    // color information
    int A, R, G, B;
    int pixel;

    // scan through all pixels
    for (int x = 0; x &lt; width; ++x) {
        for (int y = 0; y &lt; height; ++y) {
            // get pixel color
            pixel = src.getPixel(x, y);
            A = Color.alpha(pixel);
            R = Color.red(pixel);
            G = Color.green(pixel);
            B = Color.blue(pixel);
            int gray = (int) (0.2989 * R + 0.5870 * G + 0.1140 * B);
            // set new pixel color to output bitmap
            bmOut.setPixel(x, y, Color.argb(A, gray, gray, gray));
        }
    }
    return bmOut;
}
</code></pre>

<p>But that is pretty slow since you have to do that for millions of pixels separately.</p>

<p><a href="http://stackoverflow.com/a/9377943/995891">http://stackoverflow.com/a/9377943/995891</a> has a much nicer way of achieving the same.</p>

<pre><code>// code from that answer put into method from above
public static Bitmap createGrayscale(Bitmap src) {
    int width = src.getWidth();
    int height = src.getHeight();
    Bitmap bmOut = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(bmOut);
    ColorMatrix ma = new ColorMatrix();
    ma.setSaturation(0);
    Paint paint = new Paint();
    paint.setColorFilter(new ColorMatrixColorFilter(ma));
    canvas.drawBitmap(src, 0, 0, paint);
    return bmOut;
}
</code></pre>
