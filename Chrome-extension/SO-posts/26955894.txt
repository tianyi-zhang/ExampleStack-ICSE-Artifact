<p>1) create the location listener class TrackLocation</p>

<pre><code>    public class TrackLocation extends Service implements LocationListener {

            private final Context mContext;

            // we can get location from gps or network

            // Flag for GPS status
            boolean isGPSEnabled = false;

            // Flag for network status
            boolean isNetworkEnabled = false;

            // Flag for GPS status
            boolean canGetLocation = false;

            Location location; // Location
            double latitude; // Latitude
            double longitude; // Longitude

            // distance to change Updates in meters
            private static final long MIN_DISTANCE = 10; // 10 meters

            // The minimum time between updates in milliseconds
            private static final long MIN_TIME = 1000 * 60 * 1; // 1 minute

            // Declaring a Location Manager
            protected LocationManager locationManager;

            public TrackLocation(Context context) {
                this.mContext = context;
                getLocation();
            }

            public Location getLocation() {
                try {
                    locationManager = (LocationManager) mContext
                            .getSystemService(LOCATION_SERVICE);

                    // Getting GPS status
                    isGPSEnabled = locationManager
                            .isProviderEnabled(LocationManager.GPS_PROVIDER);

                    // Getting network status
                    isNetworkEnabled = locationManager
                            .isProviderEnabled(LocationManager.NETWORK_PROVIDER);

                    if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {
                        // No network provider is enabled
                    } else {
                        this.canGetLocation = true;
                        if (isNetworkEnabled) {
                            locationManager.requestLocationUpdates(
                                    LocationManager.NETWORK_PROVIDER,
                                    MIN_TIME,
                                    MIN_DISTANCE, this);
                            Log.d("Network", "Network");
                            if (locationManager != null) {
                                location = locationManager
                                        .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                                if (location != null) {
                                    latitude = location.getLatitude();
                                    longitude = location.getLongitude();
                                }
                            }
                        }
                        // If GPS enabled, get latitude/longitude using GPS Services
                        if (isGPSEnabled) {
                            if (location == null) {
                                locationManager.requestLocationUpdates(
                                        LocationManager.GPS_PROVIDER,
                                        MIN_TIME,
                                        MIN_DISTANCE, this);
                                Log.d("GPS Enabled", "GPS Enabled");
                                if (locationManager != null) {
                                    location = locationManager
                                            .getLastKnownLocation(LocationManager.GPS_PROVIDER);
                                    if (location != null) {
                                        latitude = location.getLatitude();
                                        longitude = location.getLongitude();
                                    }
                                }
                            }
                        }
                    }
                }
                catch (Exception e) {
                    e.printStackTrace();
                }

                return location;
            }


            /**
             * Stop using GPS listener
             * Calling this function will stop using GPS in your app.
             * */
            public void stopUsingGPS(){
                if(locationManager != null){
                    locationManager.removeUpdates(GPSTracker.this);
                }
            }


            /**
             * Function to get latitude
             * */
            public double getLatitude(){
                if(location != null){
                    latitude = location.getLatitude();
                }

                // return latitude
                return latitude;
            }


            /**
             * Function to get longitude
             * */
            public double getLongitude(){
                if(location != null){
                    longitude = location.getLongitude();
                }

                // return longitude
                return longitude;
            }

            /**
             * Function to check GPS/Wi-Fi enabled
             * @return boolean
             * */
            public boolean canGetLocation() {
                return this.canGetLocation;
            }


            @Override
            public void onLocationChanged(Location location) {
            }


            @Override
            public void onProviderDisabled(String provider) {
            }


            @Override
            public void onProviderEnabled(String provider) {
            }


            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {
            }


            @Override
            public IBinder onBind(Intent arg0) {
                return null;
            }
    }  
</code></pre>

<p>2) then in main class do this  </p>

<pre><code>TrackLocation gps = new TrackLocation(this);  
//Check if GPS enabled
if(gps.canGetLocation()) {
    // now get get coordinates
    double latitude = gps.getLatitude();
    double longitude = gps.getLongitude();

} else {
    // Can't get location.
}
</code></pre>
