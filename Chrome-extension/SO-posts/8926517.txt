<p>I had the same thing to do and I did it this way and it works just fine. I had to show the splashscreen and download some file from the server, unzip it, move files insto proper directories and then start the apps main screen. Here is the code, I used AsyncTask.</p>

<p>So, you have three AsyncTask classes, one for each task and in the onPostExecute() I call the next AsyncTask. I can't say if this is the best way but it works for me.</p>

<p>I removed unneccessary code but for clarity I left a call to a dialog where I ask a user ih he wants to proceed with downloading as it may take a while. Also I check if FIRST_RUN is true just so I know if I should download the package since for my app I need to do it only the first time, so if it is true I do the spashscreen activities and if it is false I proceed to MAINAPP activity.</p>

<p>Hope it helps.</p>

<pre><code>public class SplashScreen extends Activity {

@Override
protected void onCreate(Bundle savedInstanceState) {
    // TODO Auto-generated method stub
    super.onCreate(savedInstanceState);
    setContentView(R.layout.splashscreen);

    SharedPreferences settings = getSharedPreferences(PREFS_NAME,0);
    boolean firstRun = settings.getBoolean("FIRST_RUN", true);
    if (firstRun) {
        showDialog(INITIAL_DLG);
    } else {
        startActivity(new Intent(appContext, MAINAPP.class));
    }
}

/***
 * First entry after YES on Dialog!
 */
protected void initialize() {
    messageTV.setVisibility(TextView.VISIBLE);
    progressBar.setVisibility(ProgressBar.VISIBLE);
    downloadThread = new DownloadFiles();
    downloadThread.execute();
}

protected void rollback() {

}

@Override
protected Dialog onCreateDialog(int id) {
    AlertDialog.Builder builder;
    switch (id) {
    case INITIAL_DLG:
        builder = new AlertDialog.Builder(this);
        builder.setMessage(R.string.app_setup)
        .setCancelable(false)
        .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                initialize();
            }
        })
        .setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                finish();
            }
        });
        alertDlg = builder.create();
        return alertDlg;
    default:
        return null;    
    }
}

protected class DownloadFiles extends AsyncTask&lt;String, Integer, Boolean&gt; {

    @Override
    protected Boolean doInBackground(String... params) {
        try {
            //file download
        } catch (Exception e) {
            result = false;
        }
        return true;
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
        progressBar.setProgress(values[0]);
    }

    @Override
    protected void onPostExecute(Boolean result) {
        // TODO Auto-generated method stub
        super.onPostExecute(result);
        unzipThread = new DecompressZipFile();
        unzipThread.execute();
    }

    @Override
    protected void onPreExecute() {
        // TODO Auto-generated method stub
        messageTV.setText("Step 1/4:Downloading data...");
        progressBar.setProgress(0);
        progressBar.setMax(100);
        super.onPreExecute();
    }
}

protected class DecompressZipFile extends AsyncTask&lt;String, Integer, Boolean&gt; {
    @Override
    protected Boolean doInBackground(String... params) {
        try {
            //unzip files
            return true;    
        } catch(Exception e) {
            return false;
        }
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
        if (values[0]&lt;0) progressBar.setMax(values[0]*-1);
        else progressBar.setProgress(values[0]);
    }

    @Override
    protected void onPostExecute(Boolean result) {
        // TODO Auto-generated method stub
        super.onPostExecute(result);
        moveDBThread = new MoveDBFile();
        moveDBThread.execute();
    }

    @Override
    protected void onPreExecute() {
        // TODO Auto-generated method stub
        messageTV.setText("Step 2/4:Decompressing data...");
        progressBar.setProgress(0);
        progressBar.setMax(100);
        super.onPreExecute();
    }
}

protected class MoveDBFile extends AsyncTask&lt;String, Integer, Boolean&gt; {
    @Override
    protected Boolean doInBackground(String... params) {
        try {
            //moving files
            return true;
        } catch (Exception e) {
            globalE = e;
            finish();
            return false;
        }
    }

    @Override
    protected void onPreExecute() {
        messageTV.setText("Step 3/4:Shufflin'...");
        progressBar.setProgress(0);
        progressBar.setMax(100);
        super.onPreExecute();
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
        progressBar.setProgress(values[0]);
    }

    @Override
    protected void onPostExecute(Boolean result) {
        super.onPostExecute(result);
        if (result) {
            getSharedPreferences(PREFS_NAME,0).edit().putBoolean("FIRST_RUN", false).commit();
            startActivity(new Intent(appContext, MAINAPP.class));
        } else {
            rollback();
        }
    }
}
</code></pre>

<p>}</p>
