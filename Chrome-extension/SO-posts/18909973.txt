<p>If the method accepts non-primitive data type then the following method can be used to invoke a private method of any class:</p>

<pre><code>public static Object genericInvokMethod(Object obj, String methodName,
            int paramCount, Object... params) {
        Method method;
        Object requiredObj = null;
        Object[] parameters = new Object[paramCount];
        Class&lt;?&gt;[] classArray = new Class&lt;?&gt;[paramCount];
        for (int i = 0; i &lt; paramCount; i++) {
            parameters[i] = params[i];
            classArray[i] = params[i].getClass();
        }
        try {
            method = obj.getClass().getDeclaredMethod(methodName, classArray);
            method.setAccessible(true);
            requiredObj = method.invoke(obj, params);
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        }

        return requiredObj;
    }
</code></pre>

<p>The Parameter accepted are obj, methodName, the count of parameters accepted and the parameters. For example </p>

<pre><code>public class Test {
private String concatString(String a, String b) {
    return (a+b);
}
}
</code></pre>

<p>Method concatString can be invoked as </p>

<pre><code>Test t = new Test();
    String str = (String) genericInvokMethod(t, "concatString", 2, "Hello", "Mr.x");
</code></pre>
