<p>To find the real cause of this, you need to dig into the <code>Files.lines()</code> source, which calls the <code>BufferedReader.lines()</code>, which is the following:</p>

<pre><code>public Stream&lt;String&gt; lines() {
    Iterator&lt;String&gt; iter = new Iterator&lt;String&gt;() {
        String nextLine = null;

        @Override
        public boolean hasNext() {
            if (nextLine != null) {
                return true;
            } else {
                try {
                    nextLine = readLine();
                    return (nextLine != null);
                } catch (IOException e) {
                    throw new UncheckedIOException(e);
                }
            }
        }

        @Override
        public String next() {
            if (nextLine != null || hasNext()) {
                String line = nextLine;
                nextLine = null;
                return line;
            } else {
                throw new NoSuchElementException();
            }
        }
    };
    return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
            iter, Spliterator.ORDERED | Spliterator.NONNULL), false);
}
</code></pre>

<p>Here it returns a <code>Stream&lt;String&gt;</code> that is:</p>

<ul>
<li>Of unknown size</li>
<li>Ordered</li>
<li>Not null</li>
<li>Not parallel (the <code>false</code> argument at the end of <code>StreamSupport.stream()</code></li>
</ul>

<p>And hence I am really unsure of whether it is even subject to be being parallellised, this could be found by digging even further into the source.</p>

<p>What I <strong>do</strong> know is that parallel streams get explicitely provided in the Java APIs. Take for example <code>List</code>, it has a <code>List.stream()</code> and <code>List.parallelStream()</code> method.</p>
