<p><strong>Disclaimer:</strong> I only recommend that you use this if speed is an absolute requirement.</p>

<p>On my machine, the following can do 1 million conversions in about 130ms:</p>

<pre><code> private static final int POW10[] = {1, 10, 100, 1000, 10000, 100000, 1000000};

 public static String format(double val, int precision) {
     StringBuilder sb = new StringBuilder();
     if (val &lt; 0) {
         sb.append('-');
         val = -val;
     }
     int exp = POW10[precision];
     long lval = (long)(val * exp + 0.5);
     sb.append(lval / exp).append('.');
     long fval = lval % exp;
     for (int p = precision - 1; p &gt; 0 &amp;&amp; fval &lt; POW10[p]; p--) {
         sb.append('0');
     }
     sb.append(fval);
     return sb.toString();
 }
</code></pre>

<p>The code as presented has several shortcomings: it can only handle a limited range of <code>doubles</code>, and it doesn't handle NaNs. The former can be addressed (but only partially) by extending the <code>POW10</code> array. The latter can be explicitly handled in the code.</p>
