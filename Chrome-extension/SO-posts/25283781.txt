<p>Fastest way:
create a new instance of <code>TableRowsAdapter</code> and set it again(make the orientation a constructor parameter).
Example:</p>

<pre><code> public TableRowsAdapter(Context context, TableRow[] tableRowList, int orientation)
  {
    super();
    this.items = tableRowList;
    this.layoutInflater = (LayoutInflater) context.getSystemService( Context.LAYOUT_INFLATER_SERVICE );


    if(orientation== Configuration.ORIENTATION_LANDSCAPE){
        layout = R.layout.table_row_land;
    }
    else{
        layout = R.layout.table_row;
    }

}
</code></pre>

<p><strong>The proper way:</strong></p>

<p>when you <code>setOrientation</code>, inflate the new layout and replace convertView with that</p>

<p>Reason: <code>notifyDatasetChanged()</code> does not know that you'll replace the layout, so it simply recycles the view thus making <code>convertView</code> not null.</p>

<p>In layout <code>R.layout.table_row_land</code> and <code>R.layout.table_row</code>, add an unique id for the root view, </p>

<p>Example:</p>

<p>id for <code>R.layout.table_row_land</code> is <code>R.id.row_land</code> and <code>R.layout.table_row</code> is <code>R.id.row_normal</code></p>

<p>The root view would become something like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
          android:id="@+id/row_normal"
          android:layout_width="match_parent"
          android:layout_height="match_parent"
          android:orientation="vertical" &gt;
&lt;!-- the rest of the layout  --&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>And here's a simple pseudo implementation:</p>

<pre><code>@Override
public View getView(final int position, View convertView, ViewGroup parent) {

    ViewHolder holder;
    View v = convertView;

    // check if convertView needs a new layout here
    if (v == null || (v.getId() == R.id.row_normal &amp;&amp; layout == R.layout.table_row_land)) {

        v = layoutInflater.inflate(layout, parent, false);

        holder = new ViewHolder();

        /* some stuff */

        v.setTag(holder);
    } else {
        holder = (ViewHolder) v.getTag();
    }

    TableRow item = getItem(position);

    /* some stuff */

    return v;
}
</code></pre>
