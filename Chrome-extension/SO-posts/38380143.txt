<p>You can achieve desired look this way:</p>

<ul>
<li><p>first, create a divider Drawable, for this example I've used a simple shape, but you could use default line divider or any other drawable:</p>

<pre><code>&lt;shape xmlns:android="http://schemas.android.com/apk/res/android" 
    android:shape="rectangle"&gt;
    &lt;size android:height="2dp" /&gt;
    &lt;size android:width="2dp" /&gt;
    &lt;solid android:color="#000000" /&gt;
&lt;/shape&gt;
</code></pre></li>
<li><p>second, in your <code>ItemOffsetDecoration</code> declare Drawable and initialize it:</p>

<pre><code>public class ItemOffsetDecoration extends RecyclerView.ItemDecoration {

    private Drawable mDivider;

    ...

    public ItemOffsetDecoration(...) {
        mDivider = ContextCompat.getDrawable(context, R.drawable.item_divider);
    }
}
</code></pre></li>
<li><p>third, override onDrawOver() method:</p>

<pre><code>public void onDrawOver(Canvas c, RecyclerView parent, RecyclerView.State state) {
    if (isGridView) {
        drawVerticalDivider(c, parent);
    } else {
        drawVerticalDivider(c, parent);
        drawHorizontalDivider(c, parent);
    }

}
</code></pre>

<p>where <code>drawVerticalDivider()</code> &amp; <code>drawHorizontalDivider()</code> are (might be a good idea to refactor them into the single method and control direction of the divider via parameter):</p>

<pre><code>public void drawVerticalDivider(Canvas c, RecyclerView parent) {
    if (parent.getChildCount() == 0) return;

    final int childCount = parent.getChildCount();

    for (int i = 0; i &lt; childCount; i++) {
        View child = parent.getChildAt(i);
        RecyclerView.LayoutParams params =
                (RecyclerView.LayoutParams) child.getLayoutParams();

        int left = child.getLeft() - params.leftMargin - offsetInDp;
        int right = child.getRight() + params.rightMargin + offsetInDp;
        int top = child.getBottom() + params.bottomMargin + offsetInDp;
        int bottom = top + mDivider.getIntrinsicHeight();
        mDivider.setBounds(left, top, right, bottom);
        mDivider.draw(c);
    }
}

public void drawHorizontalDivider(Canvas c, RecyclerView parent) {
    final int childCount = parent.getChildCount();

    for (int i = 0; i &lt; childCount; i++) {
        View child = parent.getChildAt(i);
        RecyclerView.LayoutParams params =
                (RecyclerView.LayoutParams) child.getLayoutParams();

        int left = child.getRight() + params.rightMargin + offsetInDp;
        int right = left + mDivider.getIntrinsicWidth();
        int top = child.getTop() - params.topMargin - offsetInDp;
        int bottom = child.getBottom() + params.bottomMargin + offsetInDp;
        mDivider.setBounds(left, top, right, bottom);
        mDivider.draw(c);
    }
}
</code></pre></li>
</ul>

<p>Result for the Linear and Grid LayoutManagers:</p>

<p><a href="http://i.stack.imgur.com/ztNS4.png" rel="nofollow"><img src="http://i.stack.imgur.com/ztNS4.png" alt="LinearLayoutManager"></a>         <a href="http://i.stack.imgur.com/U6JAp.png" rel="nofollow"><img src="http://i.stack.imgur.com/U6JAp.png" alt="GridLayoutManager"></a></p>
