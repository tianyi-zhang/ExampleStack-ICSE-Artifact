<p>I too have encountered this issue.</p>

<p>It's not necessarily true that this is because a problem on your server side - it simply means that the response of the <code>JsonObjectRequest</code> is empty.</p>

<p>It could very well be that the server should be sending you content, and the fact that its response is empty is a bug. If, however, this is how the server is supposed to behave, then to solve this issue, you will need to change how JsonObjectRequest parses its response, meaning creating a subclass of <code>JsonObjectRequest</code>, and overriding the <code>parseNetworkResponse</code> to the example below.</p>

<pre><code>    @Override
    protected Response&lt;JSONObject&gt; parseNetworkResponse(NetworkResponse response) {
        try {
            String jsonString = new String(response.data,
                    HttpHeaderParser.parseCharset(response.headers, PROTOCOL_CHARSET));

            JSONObject result = null;

            if (jsonString != null &amp;&amp; jsonString.length() &gt; 0)
                 result = new JSONObject(jsonString);

            return Response.success(result,
                    HttpHeaderParser.parseCacheHeaders(response));
        } catch (UnsupportedEncodingException e) {
            return Response.error(new ParseError(e));
        } catch (JSONException je) {
            return Response.error(new ParseError(je));
        }
    } 
</code></pre>

<p>Keep in mind that with this fix, and in the event of an empty response from the server, the request callback will return a null reference in place of the <code>JSONObject</code>.</p>
