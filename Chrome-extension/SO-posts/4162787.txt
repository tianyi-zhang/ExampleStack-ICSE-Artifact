<p>Seems like the <a href="http://developer.android.com/reference/android/app/NotificationManager.html" rel="nofollow">API Reference for NotificationManager</a> is a bit messed up.</p>

<p>Here's the code as found via <a href="http://google.com/codesearch/p?hl=en#uX1GffpyOZk/core/java/android/app/NotificationManager.java&amp;q=NotificationManager%20android&amp;sa=N&amp;cd=1&amp;ct=rc" rel="nofollow">Google Code Search on NotificationManager and Android</a>:</p>

<pre><code>/**
 * Persistent notification on the status bar,
 *
 * @param tag An string identifier for this notification unique within your
 *        application.
 * @param notification A {@link Notification} object describing how to
 *        notify the user, other than the view you're providing. Must not be null.
 * @return the id of the notification that is associated with the string identifier that
 * can be used to cancel the notification
 */
public void notify(String tag, int id, Notification notification)
{
    int[] idOut = new int[1];
    INotificationManager service = getService();
    String pkg = mContext.getPackageName();
    if (localLOGV) Log.v(TAG, pkg + ": notify(" + id + ", " + notification + ")");
    try {
        service.enqueueNotificationWithTag(pkg, tag, id, notification, idOut);
        if (id != idOut[0]) {
            Log.w(TAG, "notify: id corrupted: sent " + id + ", got back " + idOut[0]);
        }
    } catch (RemoteException e) {
    }
}
</code></pre>

<p>Obviously the parameter doesn't return a value. They meant to have a similar JavaDoc but probably made a mistake.</p>

<p>Look at the code for the other variant of <code>notify</code>:</p>

<pre><code>/**
 * Persistent notification on the status bar,
 *
 * @param id An identifier for this notification unique within your
 *        application.
 * @param notification A {@link Notification} object describing how to
 *        notify the user, other than the view you're providing. Must not be null.
 */
public void notify(int id, Notification notification)
{
    notify(null, id, notification);
}
</code></pre>

<p>As you can see, this overloaded version just calls the primary implementation with a default <code>tag</code> String value of <code>null</code>.</p>

<hr>

<p>Regarding the general question of passing by value and passing by reference, the simple/vulgarized explanation is:</p>

<ul>
<li>Java passes primitives by value,</li>
<li>but passes objects by reference.</li>
</ul>

<p>Refer to the comments by arnivan and Patrick for clarification.</p>
