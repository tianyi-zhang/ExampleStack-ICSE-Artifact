<p>Personally I feel using FragmentTabHost is simpler than suing the slidingTab/ViewPager as long as don't care the swipe behavior.</p>

<p>For the #1. By looking at the code (in v4.app.FragmentTabHost of support-v4-21):</p>

<pre><code>public void setup(Context context, FragmentManager manager, int containerId) {
    ensureHierarchy(context);  // Ensure views required by super.setup()
    super.setup();
    mContext = context;
    mFragmentManager = manager;
    mContainerId = containerId;
    ensureContent();
    mRealTabContent.setId(containerId);

    // We must have an ID to be able to save/restore our state.  If
    // the owner hasn't set one at this point, we will set it ourself.
    if (getId() == View.NO_ID) {
        setId(android.R.id.tabhost);
    }
}

private void ensureHierarchy(Context context) {
    // If owner hasn't made its own view hierarchy, then as a convenience
    // we will construct a standard one here.
    if (findViewById(android.R.id.tabs) == null) {
        LinearLayout ll = new LinearLayout(context);
        ll.setOrientation(LinearLayout.VERTICAL);
        addView(ll, new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.FILL_PARENT,
                ViewGroup.LayoutParams.FILL_PARENT));

        TabWidget tw = new TabWidget(context);
        tw.setId(android.R.id.tabs);
        tw.setOrientation(TabWidget.HORIZONTAL);
        ll.addView(tw, new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.FILL_PARENT,
                ViewGroup.LayoutParams.WRAP_CONTENT, 0));

        FrameLayout fl = new FrameLayout(context);
        fl.setId(android.R.id.tabcontent);
        ll.addView(fl, new LinearLayout.LayoutParams(0, 0, 0));

        mRealTabContent = fl = new FrameLayout(context);
        mRealTabContent.setId(mContainerId);
        ll.addView(fl, new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.FILL_PARENT, 0, 1));
    }
}
</code></pre>

<p>and the <a href="https://code.google.com/p/android/issues/detail?id=53230" rel="nofollow">bug report for FragmentTabHost</a>, seems it could be done in one of the below:</p>

<pre><code>  &lt;android.support.v4.app.FragmentTabHost
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@android:id/tabhost"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;
&lt;/android.support.v4.app.FragmentTabHost&gt;
</code></pre>

<p>or to mimc the ensureHierarchy() does.</p>

<pre><code>&lt;android.support.v4.app.FragmentTabHost
xmlns:android="http://schemas.android.com/apk/res/android"
android:id="@android:id/tabhost"
android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;LinearLayout
    android:background="@drawable/alert_dialog_icon"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;TabWidget
        android:id="@android:id/tabs"
        android:orientation="horizontal"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_weight="0"/&gt;

    &lt;FrameLayout
        android:id="@android:id/tabcontent"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:layout_weight="0"/&gt;

    &lt;FrameLayout
        android:id="@+id/realtabcontent"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"/&gt;

    &lt;/LinearLayout&gt;
&lt;/android.support.v4.app.FragmentTabHost&gt;
</code></pre>

<p>For the problem of not showing the content fragment, after wrap the FragmentTabHost in another root layout it shows up.</p>

<p>But do have one question left, should be keep using support.v4 or change to the latest one like support.v7.app.FragmentTabHost, etc.? </p>

<p>Anyone has better solution or inside of what is the correct way using FragmentTabHost, please comment. Thanks!</p>
