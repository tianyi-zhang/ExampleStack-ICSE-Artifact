<p>The views are stateless so if you show the linearlayout on someviews you need to remember to hide it for the others.</p>

<p>onBindViewHolder will not give you a fresh view from xml but the view you mutated. Basically just remember to set the LinearLayout back to gone.</p>

<p>A better way would be to use multiple xml files and implement getItemViewType showing and hiding views can cause the scroll to gitter, although if heights remain the same you might get away with it.</p>

<pre><code>public class ExampleAdapter extends RecyclerView.Adapter&lt;RecyclerView.ViewHolder&gt; {

    List&lt;ContactsContract.Data&gt; data;

    private static final int TYPE_A = 0;
    private static final int TYPE_B = 1;

    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        RecyclerView.ViewHolder viewHolder;
        if(viewType == TYPE_A) {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.xml_a, parent, false);
            viewHolder = new RecyclerView.ViewHolder(view);
        } else {
            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.xml_b, parent, false);
            viewHolder = new RecyclerView.ViewHolder(view);
        }
        return viewHolder;
    }

    @Override
    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {
        holder.setData(data.get(position);
    }

    @Override
    public int getItemViewType(int position) {
        if(data.get(position).youCondition()) {
            return TYPE_A;
        } else {
            return TYPE_B;
        }
    }

    @Override
    public int getItemCount() {
        return data.size();
    }
}
</code></pre>

<p>This is a basic example of how it could be done. Will need to implement your own ViewHolders i'd suggest making a different one for each view type from a base class that has the set data method.</p>
