<p>Class <code>Object</code> is java defined class and is part of <code>java.lang</code> package. Each class is sub class of this class. I feel you should create a separate class. 
You can create a class like below</p>

<pre><code>public class Bean{
    String valueOne;
    String valueTwo;
    String valueThree;
    public Bean(String valueOne, String valueTwo, String valueThree) {
        super();
        this.valueOne = valueOne;
        this.valueTwo = valueTwo;
        this.valueThree = valueThree;
    }

}
</code></pre>

<p>You need to change the signature of the method </p>

<pre><code>public void addMapObject(String aKey, Bean anObject) {
    Set&lt;Object&gt; objects = new HashSet&lt;&gt;();
    objects.add(anObject);
    MyMap.put(aKey, objects);
}
</code></pre>

<p>And then you asked as how to initialize, you would do it in the caller method as below</p>

<pre><code>public void theCallerMethod(){
    addMapObject("YourKey", new Bean("YourActualvalueOne","YourActualvalueTwo","YourActualvalueThree"));
}
</code></pre>

<p>But once you do this you should also take care of the <code>equals()</code> and <code>hashcode()</code> methods as you need to add the objects of your class in an HashSet. These methods are defined in base class <code>Object.java</code>. Details as why you need to do this, I suggest you to study this and can refer below link 
<a href="http://stackoverflow.com/questions/2265503/why-do-i-need-to-override-the-equals-and-hashcode-methods-in-java">Why do I need to override the equals and hashCode methods in Java?</a></p>

<p>Your class bean would finally look like below</p>

<pre><code>public static class Bean {
    String valueOne;
    String valueTwo;
    String valueThree;

    public Bean(String valueOne, String valueTwo, String valueThree) {
        super();
        this.valueOne = valueOne;
        this.valueTwo = valueTwo;
        this.valueThree = valueThree;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((valueOne == null) ? 0 : valueOne.hashCode());
        result = prime * result + ((valueThree == null) ? 0 : valueThree.hashCode());
        result = prime * result + ((valueTwo == null) ? 0 : valueTwo.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Bean other = (Bean) obj;
        if (valueOne == null) {
            if (other.valueOne != null)
                return false;
        } else if (!valueOne.equals(other.valueOne))
            return false;
        if (valueThree == null) {
            if (other.valueThree != null)
                return false;
        } else if (!valueThree.equals(other.valueThree))
            return false;
        if (valueTwo == null) {
            if (other.valueTwo != null)
                return false;
        } else if (!valueTwo.equals(other.valueTwo))
            return false;
        return true;
    }
}
</code></pre>
