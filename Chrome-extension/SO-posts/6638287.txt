<p>Odd. I'd really suggest just using URLConnection with a URL <a href="http://1.2.3.4:9000/MOUNTPOINT" rel="nofollow">http://1.2.3.4:9000/MOUNTPOINT</a>. That should do what you want. The null readline is probably because your handcrafted http request is not being understood by the other side.</p>

<p>HttpClient allows streaming, you just have to implement a fairly substantial chunk of code to handle it.</p>

<p>EDIT: Interesting. I look at it in <code>wget</code> (my go-to HTTP debugging tool) and see this:</p>

<pre><code>C:\Documents and Settings\Olufemi Omojola&gt;wget -O - http://130.39.148.171:9000/
--21:31:55--  http://130.39.148.171:9000/
           =&gt; `-'
Connecting to 130.39.148.171:9000... connected.
HTTP request sent, awaiting response... 200 No headers, assuming HTTP/0.9
Length: unspecified

    [&lt;=&gt;                                                                          ] 0             --.--K/s             S
OURCETABLE 200 OK
Server: NTRIP Trimble NTRIP Caster
Content-Type: text/plain
Content-Length: 631
Date: 10/Jul/2011:01:31:37 UTC

STR;CMRp_All;CMRp_All;CMR+;1(1),3(10),18(1),19(1);2;GPS;GULFnet;USA;30.84;268.81;1;1;Trimble GPSNet;None;B;N;0;;
STR;RTCM2_3All;RTCM2_3All;RTCM 2.3;1(1),3(10),18(1),19(1);2;GPS;GULFnet;USA;30.84;268.81;1;1;Trimble GPSNet;None;B;N;0;;

STR;GLNnorthLA;GLNnorthLA;RTCM 3;1004(1),1005/1007(5),PBS(10);2;GPS+GLONASS;GULFNet;USA;0;0;1;1;Trimble GPSNet;None;B;N;
0;;
STR;GLNnoLA_CMRp;GLNnoLA_CMRp;CMR+;1004(1),1005/1007(5),PBS(10);2;GPS+GLONASS;GULFNet;USA;0;0;1;1;Trimble GPSNet;None;B;
N;0;;
STR;GLNseLA_CMRp;GLNseLA_CMRp;CMR+;1004(1),1005/1007(5),PBS(10);2;GPS+GLONASS;GULFNet;USA;0;0;1;1;Trimble GPSNet;None;B;
N;0;;
ENDSOURCETABLE
    [ &lt;=&gt;                                                                         ] 768           --.--K/s

21:31:55 (30.13 MB/s) - `-' saved [768]

C:\Documents and Settings\Olufemi Omojola&gt;wget -O - http://130.39.148.171:9000/CMRp_All --http-user=user --http-password
=pass
--21:31:31--  http://130.39.148.171:9000/CMRp_All
           =&gt; `-'
Connecting to 130.39.148.171:9000... connected.
HTTP request sent, awaiting response... 401 Unauthorized
Authorization failed.
</code></pre>

<p>The lack of response headers may be the reason URLConnection fails. If you continue to get Unauthorized responses then the Authorization header you're sending may be wrong: for Basic auth, I do this.</p>

<pre><code>httpost.addHeader("Authorization", "Basic " + Base64.encode(user+":"+pass).trim());
</code></pre>

<p>This is the Base64 class I use:</p>

<pre><code>public class Base64 {
        private static final String base64code = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                + "abcdefghijklmnopqrstuvwxyz" + "0123456789" + "+/";

        private static final int splitLinesAt = 76;

        public static byte[] zeroPad(int length, byte[] bytes) {
                byte[] padded = new byte[length]; // initialized to zero by JVM
                System.arraycopy(bytes, 0, padded, 0, bytes.length);
                return padded;
        }

        public static String encode(String string) {

                String encoded = "";
                byte[] stringArray;
                try {
                        stringArray = string.getBytes("UTF-8");  // use appropriate encoding string!
                } catch (Exception ignored) {
                        stringArray = string.getBytes();  // use locale default rather than croak
                }
                // determine how many padding bytes to add to the output
                int paddingCount = (3 - (stringArray.length % 3)) % 3;
                // add any necessary padding to the input
                stringArray = zeroPad(stringArray.length + paddingCount, stringArray);
                // process 3 bytes at a time, churning out 4 output bytes
                // worry about CRLF insertions later
                for (int i = 0; i &lt; stringArray.length; i += 3) {
                        int j = ((stringArray[i] &amp; 0xff) &lt;&lt; 16) +
                        ((stringArray[i + 1] &amp; 0xff) &lt;&lt; 8) +
                        (stringArray[i + 2] &amp; 0xff);
                        encoded = encoded + base64code.charAt((j &gt;&gt; 18) &amp; 0x3f) +
                        base64code.charAt((j &gt;&gt; 12) &amp; 0x3f) +
                        base64code.charAt((j &gt;&gt; 6) &amp; 0x3f) +
                        base64code.charAt(j &amp; 0x3f);
                }
                // replace encoded padding nulls with "="
                return splitLines(encoded.substring(0, encoded.length() -
                                paddingCount) + "==".substring(0, paddingCount));

        }
        public static String splitLines(String string) {

                String lines = "";
                for (int i = 0; i &lt; string.length(); i += splitLinesAt) {

                        lines += string.substring(i, Math.min(string.length(), i + splitLinesAt));
                        lines += "\r\n";

                }
                return lines;

        }
}
</code></pre>
