<p>I'm always amazed how quickly many here dismiss some investigation into performance problems. Parsing a int for base 10 is a very common task in many programs. Making this faster could have a noticable positive effect in many environments.</p>

<p>As parsing and int is actually a rather trivial task, I tried to implement a more direct approach than the one used in the JDK implementation that has variable base. It turned out to be more than twice as fast and should otherwise behave exactly the same as Integer.parseInt().</p>

<pre><code>public static int intValueOf( String str )
{
    int ival = 0, idx = 0, end;
    boolean sign = false;
    char ch;

    if( str == null || ( end = str.length() ) == 0 ||
       ( ( ch = str.charAt( 0 ) ) &lt; '0' || ch &gt; '9' )
          &amp;&amp; ( !( sign = ch == '-' ) || ++idx == end || ( ( ch = str.charAt( idx ) ) &lt; '0' || ch &gt; '9' ) ) )
        throw new NumberFormatException( str );

    for(;; ival *= 10 )
    {
        ival += '0'- ch;
        if( ++idx == end )
            return sign ? ival : -ival;
        if( ( ch = str.charAt( idx ) ) &lt; '0' || ch &gt; '9' )
            throw new NumberFormatException( str );
    }
}
</code></pre>

<p>To get an Integer object of it, either use autoboxing or explicit</p>

<p><code>Interger.valueOf( intValueOf( str ) )</code>.</p>
