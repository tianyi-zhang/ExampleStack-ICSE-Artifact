<p>An easy solution, as you mentioned, is to simply connect the points with a straight line.  Here's the code to do so:</p>

<pre><code>public void onDraw(Canvas canvas) {
    Path path = new Path();
    boolean first = true;
    for(Point point : points){
        if(first){
            first = false;
            path.moveTo(point.x, point.y);
        }
        else{
            path.lineTo(point.x, point.y);
        }
    }
    canvas.drawPath(path, paint);
}
</code></pre>

<p>make sure you change your paint from fill to stroke:</p>

<pre><code>paint = new Paint(Paint.ANTI_ALIAS_FLAG);
paint.setStyle(Paint.Style.STROKE);
paint.setStrokeWidth(2);
paint.setColor(Color.WHITE);
</code></pre>

<p>Another option is to connect the points with iterpolation using the quadTo method:</p>

<pre><code>public void onDraw(Canvas canvas) {
    Path path = new Path();
    boolean first = true;
    for(int i = 0; i &lt; points.size(); i += 2){
        Point point = points.get(i);
        if(first){
            first = false;
            path.moveTo(point.x, point.y);
        }

        else if(i &lt; points.size() - 1){
            Point next = points.get(i + 1);
            path.quadTo(point.x, point.y, next.x, next.y);
        }
        else{
            path.lineTo(point.x, point.y);
        }
    }

    canvas.drawPath(path, paint);
}
</code></pre>

<p>This still results in some sharp edges.</p>

<p>If you're really ambitious, you can start to calculate the cubic splines as follows:</p>

<pre><code>public void onDraw(Canvas canvas) {
    Path path = new Path();

    if(points.size() &gt; 1){
        for(int i = points.size() - 2; i &lt; points.size(); i++){
            if(i &gt;= 0){
                Point point = points.get(i);

                if(i == 0){
                    Point next = points.get(i + 1);
                    point.dx = ((next.x - point.x) / 3);
                    point.dy = ((next.y - point.y) / 3);
                }
                else if(i == points.size() - 1){
                    Point prev = points.get(i - 1);
                    point.dx = ((point.x - prev.x) / 3);
                    point.dy = ((point.y - prev.y) / 3);
                }
                else{
                    Point next = points.get(i + 1);
                    Point prev = points.get(i - 1);
                    point.dx = ((next.x - prev.x) / 3);
                    point.dy = ((next.y - prev.y) / 3);
                }
            }
        }
    }

    boolean first = true;
    for(int i = 0; i &lt; points.size(); i++){
        Point point = points.get(i);
        if(first){
            first = false;
            path.moveTo(point.x, point.y);
        }
        else{
            Point prev = points.get(i - 1);
            path.cubicTo(prev.x + prev.dx, prev.y + prev.dy, point.x - point.dx, point.y - point.dy, point.x, point.y);
        }
    }
    canvas.drawPath(path, paint);
}
</code></pre>

<p>Also, I found that you needed to change the following to avoid duplicate motion events:</p>

<pre><code>public boolean onTouch(View view, MotionEvent event) {
    if(event.getAction() != MotionEvent.ACTION_UP){
        Point point = new Point();
        point.x = event.getX();
        point.y = event.getY();
        points.add(point);
        invalidate();
        Log.d(TAG, "point: " + point);
        return true;
    }
    return super.onTouchEvent(event);
}
</code></pre>

<p>and add the dx &amp; dy values to the Point class:</p>

<pre><code>class Point {
    float x, y;
    float dx, dy;

    @Override
    public String toString() {
        return x + ", " + y;
    }
}
</code></pre>

<p>This produces smooth lines, but sometimes has to connect the dots using a loop.
Also, for long drawing sessions, this becomes computationally intensive to calculate.</p>

<p>Hope that helps... fun stuff to play around with.</p>

<p><strong>Edit</strong></p>

<p>I threw together a quick project demonstrating these different techniques, including Square's suggessted signature implementation.  Enjoy: <a href="https://github.com/johncarl81/androiddraw">https://github.com/johncarl81/androiddraw</a></p>
