<p>You're creating two different objects. Just because their attributes have the same value, they are not necessarily equal. To achive this, you need to override the <code>equals()</code> method in class <code>Word</code>.</p>

<p>Thus, add:</p>

<pre><code>    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Word other = (Word) obj;
        if (score != other.score)
            return false;
        if (word == null) {
            if (other.word != null)
                return false;
        } else if (!word.equals(other.word))
            return false;
        return true;
    }
</code></pre>

<p>Eclipse provides an easy way to do this (semi-)automatically. Open your <code>Word</code> class, select <strong>Source -> Generate hashCode() and equals()...</strong>
Select attributes that should be considered when checking two <code>Word</code> objects for equality.</p>

<p>Also, you should oderride <code>hashCode()</code>.
Related questions: </p>

<ul>
<li><a href="http://stackoverflow.com/questions/2707541/why-should-i-override-hashcode-when-i-override-equals-method?rq=1">Why should I override hashCode() when I override equals() method?</a></li>
<li><a href="http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java">What issues should be considered when overriding equals and hashCode in Java?</a></li>
</ul>

<p>By the way:
Might be a copy&amp;paste issue, but implemented methods from interfaces are not being annotated with <code>@Override</code> (as your <code>compareTo()</code> is). <code>@Override</code> annotation would be appropriate for <code>toString()</code> since you override the <code>toSting()</code>-method of class <code>Object</code>.</p>

<p><strong>From <code>@Override</code> Javadoc:</strong></p>

<blockquote>
  <p>Indicates that a method declaration is intended to override a method declaration in a supertype.</p>
</blockquote>
