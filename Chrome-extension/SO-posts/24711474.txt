<p>This can be done using mentioned MessageApi: <a href="http://developer.android.com/training/wearables/data-layer/messages.html" rel="nofollow">http://developer.android.com/training/wearables/data-layer/messages.html</a><br/>
You need to initialize and connect with GoogleApiClient. Once you clicks the button you have to get list of nodes and send a message to them. The last step is to read this message fron phone part of app, this can be done by registering proper WearableListenerService. Please see the sample code below.</p>

<p><b>Wearable part of app:</b><br/>
Please define such Activity on your Wearable part of app:</p>

<pre><code>public class WearableButtonActivity extends Activity {

    private GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.wearable_button_activity);

        mGoogleApiClient = new GoogleApiClient.Builder(this)
            .addApi(Wearable.API)
            .build();
        mGoogleApiClient.connect();
    }

    public void onButtonClicked(View target) {
        if (mGoogleApiClient == null)
            return;

        final PendingResult&lt;NodeApi.GetConnectedNodesResult&gt; nodes = Wearable.NodeApi.getConnectedNodes(mGoogleApiClient);
        nodes.setResultCallback(new ResultCallback&lt;NodeApi.GetConnectedNodesResult&gt;() {
            @Override
            public void onResult(NodeApi.GetConnectedNodesResult result) {
                final List&lt;Node&gt; nodes = result.getNodes();
                if (nodes != null) {
                    for (int i=0; i&lt;nodes.size(); i++) {
                        final Node node = nodes.get(i);

                        // You can just send a message
                        Wearable.MessageApi.sendMessage(mGoogleApiClient, node.getId(), "/MESSAGE", null);

                        // or you may want to also check check for a result:
                        // final PendingResult&lt;SendMessageResult&gt; pendingSendMessageResult = Wearable.MessageApi.sendMessage(mGoogleApiClient, node.getId(), "/MESSAGE", null);
                        // pendingSendMessageResult.setResultCallback(new ResultCallback&lt;MessageApi.SendMessageResult&gt;() {
                        //      public void onResult(SendMessageResult sendMessageResult) {
                        //          if (sendMessageResult.getStatus().getStatusCode()==WearableStatusCodes.SUCCESS) {
                        //              // do something is successed
                        //          }
                        //      }
                        // });
                    }
                }
            }
        });
    }
}
</code></pre>

<p>and attack onButtonClick method to your button in your res/layout/wearable_button_activity.xml file:</p>

<pre><code>&lt;Button android:id="@+id/button"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Click me!"
    android:layout_gravity="center"
    android:onClick="onButtonClicked" /&gt;
</code></pre>

<p><b>OR</b> just set OnClickListener from code if you like that way:</p>

<pre><code>    findViewById(R.id.button).setOnClickListener(new OnClickListener() {
        @Override
        public void onClick(View v) {
            onButtonClicked(v);
        }
    });
</code></pre>

<p><b>Phone part of app:</b><br/>
Then declare DataLayerListenerService on yout phone's manifest:</p>

<pre><code>&lt;service android:name=".DataLayerListenerService" &gt;
    &lt;intent-filter&gt;
        &lt;action android:name="com.google.android.gms.wearable.BIND_LISTENER" /&gt;
    &lt;/intent-filter&gt;
&lt;/service&gt;
</code></pre>

<p>DataLayerListenerService class:</p>

<pre><code>public class DataLayerListenerService extends WearableListenerService {

    @Override
    public void onMessageReceived(MessageEvent messageEvent) {
        super.onMessageReceived(messageEvent);
        if("/MESSAGE".equals(messageEvent.getPath())) {
            // launch some Activity or do anything you like
        }
    }
}
</code></pre>

<p><br/><br/>
IMPORTANT: Both parts of your app need to have <b>the same package name</b> to contact with each other.</p>
