<p>The problem is that you're not performing the reverse sequence in the reverse order. You've ended up with base64-encoded data - so the first thing you need to do is base64-decode that to get to the <em>binary</em> encrypted data. Then decrypt, then convert that back to a string using UTF-8.</p>

<pre><code>public static String decrypt(String text){
    try {           
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        byte[] keyBytes= new byte[16];
        byte[] b= KEY.getBytes("UTF-8");
        int len= b.length;
        if (len &gt; keyBytes.length) len = keyBytes.length;
        System.arraycopy(b, 0, keyBytes, 0, len);
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(keyBytes);
        cipher.init(Cipher.DECRYPT_MODE,keySpec,ivSpec);
        byte[] results = cipher.doFinal(Base64.decode(text, 0));
        return new String(results, "UTF-8");
    } catch (Exception e) {
        // TODO: handle exception
        Log.d("decryption", e.getMessage());
        return null;
    }
}   
</code></pre>

<p>When you take code from somewhere, it's important that you really understand what it's doing - in particular, understand what the data is like at each stage here:</p>

<ul>
<li>Start with plain text</li>
<li>UTF-8 encode that to a byte array</li>
<li>Encrypt to another byte array (which <em>isn't</em> UTF-8-encoded text)</li>
<li>Base64 encode the encrypted binary data to a string</li>
</ul>

<p>Any time you're doing a transformation like this, when you want to reverse it you need to reverse the order of the steps too, in order to get back to the original data.</p>
