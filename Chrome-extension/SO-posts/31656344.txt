<p>Try this, following is for getting image from both camera and gallery:   </p>

<pre><code>    ImageView photo;
    Bitmap bmp;
    static int GET_PICTURE = 1, CAMERA_PIC_REQUEST = 2;
    static String selectedImagePath = "";   
 @Override
        protected void onActivityResult(int requestCode, int resultCode, Intent data) {
            // TODO Auto-generated method stub
            super.onActivityResult(requestCode, resultCode, data);
            if (resultCode == RESULT_OK) {
                if (requestCode == CAMERA_PIC_REQUEST) {
                    // deleteDialog.dismiss();
                    bmp = (Bitmap) data.getExtras().get("data");
                } else if (requestCode == GET_PICTURE) {

                    if (bmp != null) {
                        bmp.recycle();

                    }
                    // deleteDialog.dismiss();
                    Uri selectedImageUri = data.getData();
                    selectedImagePath = getRealPathFromURI(selectedImageUri);
                    BitmapFactory.Options options = new BitmapFactory.Options();
                    options.inJustDecodeBounds = true;
                    BitmapFactory.decodeFile(selectedImagePath, options);
                        options.inSampleSize = calculateInSampleSize(options, 200,
                                200);
                    options.inJustDecodeBounds = false;
                    bmp = BitmapFactory.decodeFile(selectedImagePath, options);
                }
                if (bmp != null) {
                    ByteArrayOutputStream stream = new ByteArrayOutputStream();
                    bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);

                        Bitmap outputs = getRoundedBitmap(bmp,10);
                        last = Bitmap.createScaledBitmap(outputs, 200, 200, false);
                    if (last != null) {
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        last.compress(Bitmap.CompressFormat.PNG, 100, baos);
                        byte[] b = baos.toByteArray();
                        String temp = Base64.encodeToString(b, Base64.DEFAULT);

                         photo.setImageBitmap(last);
                        // userimage.setBackgroundResource(android.R.color.transparent);
                    }

                } else {
                    Toast.makeText(getBaseContext(), "Invalid image",
                            Toast.LENGTH_SHORT).show();
                }
            }
        }

    public static Bitmap getRoundedBitmap(Bitmap bitmap,int pixels) {
        final Bitmap output = Bitmap.createBitmap(bitmap.getWidth(),
                bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        final Canvas canvas = new Canvas(output);
        final int color = Color.RED;
        final Paint paint = new Paint();
        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final RectF rectF = new RectF(rect);
        final float roundPx = pixels;
        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);
        paint.setColor(color);
        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);
        //canvas.drawOval(rectF, paint);
        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, rect, rect, paint);
        bitmap.recycle();
        return output;
    }
    private String getRealPathFromURI(Uri contentURI) {
        String result;
        Cursor cursor = getContentResolver().query(contentURI, null, null,
                null, null);
        if (cursor == null) {
            result = contentURI.getPath();
        } else {
            cursor.moveToFirst();
            int idx = cursor
                    .getColumnIndex(MediaStore.Images.ImageColumns.DATA);

            result = cursor.getString(idx);

        }
        cursor.close();
        return result;
    }
    public static int calculateInSampleSize(BitmapFactory.Options options,
            int reqWidth, int reqHeight) {
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height &gt; reqHeight || width &gt; reqWidth) {

            final int halfHeight = height / 2;
            final int halfWidth = width / 2;

            // Calculate the largest inSampleSize value that is a power of 2 and
            // keeps both
            // height and width larger than the requested height and width.
            while ((halfHeight / inSampleSize) &gt; reqHeight
                    &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
                inSampleSize *= 2;
            }
        }

        return inSampleSize;
    }
</code></pre>
