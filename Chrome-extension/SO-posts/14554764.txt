<p>In the class ResultSetWrappingSqlRowSet source,</p>

<pre><code>public class ResultSetWrappingSqlRowSet implements SqlRowSet
</code></pre>

<p>the wrapped method like getXXX use the field 'label' not the field name.</p>

<pre><code>public int getInt(String columnLabel) throws InvalidResultSetAccessException {
    return getInt(findColumn(columnLabel));
}


public int findColumn(String columnLabel) throws InvalidResultSetAccessException {
    Integer columnIndex = this.columnLabelMap.get(columnLabel);
    if (columnIndex != null) {
        return columnIndex;
    }
    else {
        try {
            return this.resultSet.findColumn(columnLabel);
        }
        catch (SQLException se) {
            throw new InvalidResultSetAccessException(se);
        }
    }
}
</code></pre>

<p><a href="http://docs.oracle.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnLabel%28int%29" rel="nofollow">ResultSetMetaData#getColumnLabel(int)</a> doc link.</p>

<pre><code>public ResultSetWrappingSqlRowSet(ResultSet resultSet) throws InvalidResultSetAccessException {
    this.resultSet = resultSet;
    try {
        this.rowSetMetaData = new ResultSetWrappingSqlRowSetMetaData(resultSet.getMetaData());
    }
    catch (SQLException se) {
        throw new InvalidResultSetAccessException(se);
    }
    try {
        ResultSetMetaData rsmd = resultSet.getMetaData();
        if (rsmd != null) {
            int columnCount = rsmd.getColumnCount();
            this.columnLabelMap = new HashMap&lt;String, Integer&gt;(columnCount);
            for (int i = 1; i &lt;= columnCount; i++) {
                this.columnLabelMap.put(rsmd.getColumnLabel(i), i);
            }
        }
        else {
            this.columnLabelMap = Collections.emptyMap();
        }
    }
    catch (SQLException se) {
        throw new InvalidResultSetAccessException(se);
    }

}
</code></pre>

<p>So you need check your sql and the database configuration(supporting database metadata fetching from sql).</p>
