<p>hmmm to get a Divider inside the Profiles section the easiest would be to create an item similar to the DividerDrawerItem but it should also implement IProfile so you can add it to the accounts too, and you just need to make it not selectable so it won't show up in the header and can't be selected.</p>

<pre><code>public class AccountDividerDrawerItem extends AbstractDrawerItem&lt;AccountDividerDrawerItem, AccountDividerDrawerItem.ViewHolder&gt; implements IProfile&lt;AccountDividerDrawerItem&gt; {
@Override
public int getType() {
    return R.id.material_drawer_profile_item_divider;
}

@Override
@LayoutRes
public int getLayoutRes() {
    return com.mikepenz.materialdrawer.R.layout.material_drawer_item_divider;
}

@Override
public void bindView(ViewHolder viewHolder) {
    Context ctx = viewHolder.itemView.getContext();

    //set the identifier from the drawerItem here. It can be used to run tests
    viewHolder.itemView.setId(hashCode());

    //define how the divider should look like
    viewHolder.view.setClickable(false);
    viewHolder.view.setEnabled(false);
    viewHolder.view.setMinimumHeight(1);
    ViewCompat.setImportantForAccessibility(viewHolder.view,
            ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_NO);

    //set the color for the divider
    viewHolder.divider.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(ctx, com.mikepenz.materialdrawer.R.attr.material_drawer_divider, com.mikepenz.materialdrawer.R.color.material_drawer_divider));

    //call the onPostBindView method to trigger post bind view actions (like the listener to modify the item if required)
    onPostBindView(this, viewHolder.itemView);
}

@Override
public ViewHolderFactory&lt;ViewHolder&gt; getFactory() {
    return new ItemFactory();
}

@Override
public AccountDividerDrawerItem withName(String name) {
    return null;
}

@Override
public StringHolder getName() {
    return null;
}

@Override
public AccountDividerDrawerItem withEmail(String email) {
    return null;
}

@Override
public StringHolder getEmail() {
    return null;
}

@Override
public AccountDividerDrawerItem withIcon(Drawable icon) {
    return null;
}

@Override
public AccountDividerDrawerItem withIcon(Bitmap bitmap) {
    return null;
}

@Override
public AccountDividerDrawerItem withIcon(@DrawableRes int iconRes) {
    return null;
}

@Override
public AccountDividerDrawerItem withIcon(String url) {
    return null;
}

@Override
public AccountDividerDrawerItem withIcon(Uri uri) {
    return null;
}

@Override
public AccountDividerDrawerItem withIcon(IIcon icon) {
    return null;
}

@Override
public ImageHolder getIcon() {
    return null;
}

public static class ItemFactory implements ViewHolderFactory&lt;ViewHolder&gt; {
    public ViewHolder create(View v) {
        return new ViewHolder(v);
    }
}

protected static class ViewHolder extends RecyclerView.ViewHolder {
    private View view;
    private View divider;

    private ViewHolder(View view) {
        super(view);
        this.view = view;
        this.divider = view.findViewById(com.mikepenz.materialdrawer.R.id.material_drawer_divider);
    }
}
}
</code></pre>

<p>Just 2 things! </p>

<ol>
<li>Your item should also have the proper generic type defined for the <code>AbstractDrawerItem</code>.</li>
<li>You should chagned the identifier within the <code>getType()</code> method, because this has to be unique and can't be reused accross items. (Internal cache handling of the <code>RecyclerView</code>).</li>
</ol>

<p><strong>Note</strong> that: <code>R.id.material_drawer_profile_item_divider</code> does not exist and must replace with an arbitrary local <code>identifier</code>! so create <code>ids.xml</code> file in<code>values</code> directory and add this line to that:</p>

<pre><code>&lt;item name="material_drawer_profile_item_divider" type="id" /&gt; 
</code></pre>
