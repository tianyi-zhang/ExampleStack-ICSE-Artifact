<p>You may be blaming the wrong culprit for your battery consumption. <strong>The biggest villain for battery consumption is not using Thread.sleep(int ms) on your main app loop</strong>.</p>

<p>Your main loop probably runs thousands of times every second when in reality implementing a frame limit can reduce the number to 24-60 (for smooth animation) or even as low as 10-20 for a very basic app.</p>

<p><strong>Consider this:</strong> if you don't sleep your thread, you're literally letting your app (and main loop) run as many times as it can as fast as it can. Without sleep, your app is consuming 100% of the available resources to run, even if it is doing practically nothing.</p>

<p><a href="http://obviam.net/index.php/android-gameloop-measuring-fps/" rel="nofollow">Here's a good starting tutorial</a>, and here's an example of the implementation (from the link). Don't be nervous about how long it is; it's a lot shorter without comments...</p>

<pre><code>public void run() {
    Canvas canvas;
    Log.d(TAG, "Starting game loop");
    // initialise timing elements for stat gathering
    initTimingElements();

    long beginTime;     // the time when the cycle begun
    long timeDiff;      // the time it took for the cycle to execute
    int sleepTime;      // ms to sleep (&lt;0 if we're behind)
    int framesSkipped;  // number of frames being skipped 

    sleepTime = 0;

    while (running) {
        canvas = null;
        // try locking the canvas for exclusive pixel editing
        // in the surface
        try {
            canvas = this.surfaceHolder.lockCanvas();
            synchronized (surfaceHolder) {
                beginTime = System.currentTimeMillis();
                framesSkipped = 0;  // resetting the frames skipped
                // update game state 
                this.gamePanel.update();
                // render state to the screen
                // draws the canvas on the panel
                this.gamePanel.render(canvas);              
                // calculate how long did the cycle take
                timeDiff = System.currentTimeMillis() - beginTime;
                // calculate sleep time
                sleepTime = (int)(FRAME_PERIOD - timeDiff);

                if (sleepTime &gt; 0) {
                    // if sleepTime &gt; 0 we're OK
                    try {
                        // send the thread to sleep for a short period
                        // very useful for battery saving
                        Thread.sleep(sleepTime);    
                    } catch (InterruptedException e) {}
                }

                while (sleepTime &lt; 0 &amp;&amp; framesSkipped &lt; MAX_FRAME_SKIPS) {
                    // we need to catch up
                    this.gamePanel.update(); // update without rendering
                    sleepTime += FRAME_PERIOD;  // add frame period to check if in next frame
                    framesSkipped++;
                }

                if (framesSkipped &gt; 0) {
                    Log.d(TAG, "Skipped:" + framesSkipped);
                }
                // for statistics
                framesSkippedPerStatCycle += framesSkipped;
                // calling the routine to store the gathered statistics
                storeStats();
            }
        } finally {
            // in case of an exception the surface is not left in 
            // an inconsistent state
            if (canvas != null) {
                surfaceHolder.unlockCanvasAndPost(canvas);
            }
        }   // end finally
    }
}
</code></pre>
