<p>Add an InternalFrameListener to your JInternalFrame, and re-enable the JButton when the JInternalFrame is either closed or closing or both.</p>

<p>Or better still -- it looks as if you're trying to create and display the JInternalFrame equivalent of a JOptionPane, and if so, you can actually do this directly via JOptionPane showInternalXxxDialog as discussed <a href="http://docs.oracle.com/javase/tutorial/uiswing/components/dialog.html#create" rel="nofollow">here</a>.</p>

<p>As an aside, your code posted shows some magical thinking:</p>

<pre><code>private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {                                         
    posframe pos = new posframe(); // **** here***
    pos.jButton1.setEnabled(true);
    JOptionPane.showMessageDialog(null,"closed");
}
</code></pre>

<p>You're creating a new posframe (which by the way should be re-named PosFrame to comply with Java naming rules), and assuming that if you enable a JButton on this new posframe object, it will magically enable the JButton in the displayed posframe object, but please understand that that is not how Java works, that the two posframe objects are completely distinct, and setting the state of the non-displayed posframe will have no effect on the displayed one. If your code were to work, you'd first have to pass a reference of the displayed posframe object into the class that is calling this code above.</p>

<p>Also your code suggests that the jButton1 has been declared <code>public</code>, if so, that is a potentially dangerous thing to do and should be avoided.</p>

<hr>

<p><strong>Edit</strong><br>
OK, based on your posted code, I see two possible solutions to your issue.</p>

<ol>
<li>Pass a reference of the main GUI into your JInternalFrame code
<ul>
<li>Use this reference to set a field of the class with the reference.</li>
<li>Then in the listener, call a <strong>public</strong> method on the main GUI (don't make fields public if at all possible).</li>
</ul></li>
<li>Or an even better solution is to not have the JInternalFrame worry about that which should not concern it. Instead put the listener in the calling class, so that it changes itself without need for the other class to manipulate things that it really shouldn't have responsibility for.</li>
</ol>

<p>Code for example one is shown below. Changes are noted by //!! comments.</p>

<pre><code>public class Test extends javax.swing.JFrame {

   public Test() {
      initComponents();
   }

   @SuppressWarnings("unchecked")
   // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;
   private void initComponents() {

      jDesktopPane1 = new javax.swing.JDesktopPane();
      jPanel1 = new javax.swing.JPanel();
      jButton1 = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(
            jDesktopPane1);
      jDesktopPane1.setLayout(jDesktopPane1Layout);
      jDesktopPane1Layout.setHorizontalGroup(jDesktopPane1Layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 578, Short.MAX_VALUE));
      jDesktopPane1Layout.setVerticalGroup(jDesktopPane1Layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 367, Short.MAX_VALUE));

      jButton1.setText("OPEN");
      jButton1.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
            jPanel1);
      jPanel1.setLayout(jPanel1Layout);
      jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            jPanel1Layout
                  .createSequentialGroup()
                  .addGap(136, 136, 136)
                  .addComponent(jButton1,
                        javax.swing.GroupLayout.PREFERRED_SIZE, 74,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)));
      jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addComponent(jButton1,
            javax.swing.GroupLayout.Alignment.TRAILING,
            javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE));

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
            getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE,
                  javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
      layout.setVerticalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            layout.createSequentialGroup()
                  .addComponent(jDesktopPane1)
                  .addPreferredGap(
                        javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jPanel1,
                        javax.swing.GroupLayout.PREFERRED_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)));

      pack();
   }// &lt;/editor-fold&gt;

   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
      jButton1.setEnabled(false);
      NewJInternalFrame nf = new NewJInternalFrame(this);  //!! 
      jDesktopPane1.add(nf);
      nf.show();
   }

   public static void main(String args[]) {

      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
               .getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(Test.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(Test.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(Test.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(Test.class.getName()).log(
               java.util.logging.Level.SEVERE, null, ex);
      }
      // &lt;/editor-fold&gt;

      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new Test().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify
   private javax.swing.JButton jButton1; //!! make this private
   private javax.swing.JDesktopPane jDesktopPane1;
   private javax.swing.JPanel jPanel1;
   // End of variables declaration

   //!! added
   public void setButton1Enabled(boolean enabled) {
      jButton1.setEnabled(enabled);
   }
}

class NewJInternalFrame extends javax.swing.JInternalFrame {
   private Test test; //!!

   public NewJInternalFrame(Test test) { //!!
      this.test = test; //!!
      initComponents();
   }

   @SuppressWarnings("unchecked")
   // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;
   private void initComponents() {

      setClosable(true);
      setIconifiable(true);
      setMaximizable(true);
      setResizable(true);
      addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
         public void internalFrameActivated(
               javax.swing.event.InternalFrameEvent evt) {
         }

         public void internalFrameClosed(
               javax.swing.event.InternalFrameEvent evt) {
            formInternalFrameClosed(evt);
         }

         public void internalFrameClosing(
               javax.swing.event.InternalFrameEvent evt) {
         }

         public void internalFrameDeactivated(
               javax.swing.event.InternalFrameEvent evt) {
         }

         public void internalFrameDeiconified(
               javax.swing.event.InternalFrameEvent evt) {
         }

         public void internalFrameIconified(
               javax.swing.event.InternalFrameEvent evt) {
         }

         public void internalFrameOpened(
               javax.swing.event.InternalFrameEvent evt) {
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
            getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 394,
            Short.MAX_VALUE));
      layout.setVerticalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 274,
            Short.MAX_VALUE));

      pack();
   }// &lt;/editor-fold&gt;

   private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
      //!! Test njf = new Test();
      //!! njf.jButton1.setEnabled(true);
      test.setButton1Enabled(true); //!! don't expose the button but a method
   }

}
</code></pre>

<p>Partial code for the second solution is noted below:</p>

<pre><code>private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
   jButton1.setEnabled(false);
   NewJInternalFrame nf = new NewJInternalFrame();
   jDesktopPane1.add(nf);
   nf.show();

   // !! do all this in the calling code
   nf.addInternalFrameListener(new InternalFrameAdapter() {

      @Override
      public void internalFrameClosed(InternalFrameEvent arg0) {
         jButton1.setEnabled(true);
      }

   });
}
</code></pre>
