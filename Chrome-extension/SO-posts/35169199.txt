<p><strong>We can create custom arrayadapter for Autocompletetextview</strong></p>

<pre><code>import java.util.ArrayList;

import android.content.Context;

import android.view.View;

import android.view.ViewGroup;

import android.widget.ArrayAdapter;

import android.widget.Filter;

import android.widget.Filterable;

public class AutoCompleteAdapter extends ArrayAdapter&lt;EmployeeModel&gt; implements
    Filterable {

private ArrayList&lt;EmployeeModel&gt; fullList;
private ArrayList&lt;EmployeeModel&gt; mOriginalValues;
private ArrayFilter mFilter;

public AutoCompleteAdapter(Context context, int resource,
        int textViewResourceId, ArrayList&lt;EmployeeModel&gt; fullList) {

    super(context, resource, textViewResourceId, fullList);
    this.fullList = fullList;
    mOriginalValues = new ArrayList&lt;EmployeeModel&gt;(fullList);

}

@Override
public int getCount() {
    return fullList.size();
}

@Override
public EmployeeModel getItem(int position) {
    return fullList.get(position);
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    return super.getView(position, convertView, parent);
}

@Override
public Filter getFilter() {
    if (mFilter == null) {
        mFilter = new ArrayFilter();
    }
    return mFilter;
}

private class ArrayFilter extends Filter {
    private Object lock;

    @Override
    protected FilterResults performFiltering(CharSequence prefix) {
        FilterResults results = new FilterResults();

        if (mOriginalValues == null) {
            synchronized (lock) {
                mOriginalValues = new ArrayList&lt;EmployeeModel&gt;(fullList);
            }
        }

        if (prefix == null || prefix.length() == 0) {
            synchronized (lock) {
                ArrayList&lt;EmployeeModel&gt; list = new ArrayList&lt;EmployeeModel&gt;(
                        mOriginalValues);
                results.values = list;
                results.count = list.size();
            }
        } else {
            final String prefixString = prefix.toString().toLowerCase();

            ArrayList&lt;EmployeeModel&gt; values = mOriginalValues;
            int count = values.size();

            ArrayList&lt;EmployeeModel&gt; newValues = new ArrayList&lt;EmployeeModel&gt;(count);

            for (int i = 0; i &lt; count; i++) {
                EmployeeModel item = values.get(i);
                if (item.getEmployeeName().toLowerCase().contains(prefixString)) {
                    newValues.add(item);
                }

            }

            results.values = newValues;
            results.count = newValues.size();
        }

        return results;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void publishResults(CharSequence constraint,
            FilterResults results) {

        if (results.values != null) {
            fullList = (ArrayList&lt;EmployeeModel&gt;) results.values;
        } else {
            fullList = new ArrayList&lt;EmployeeModel&gt;();
        }
        /*if (results.count &gt; 0) {
            notifyDataSetChanged();
        } else {
            notifyDataSetInvalidated();
        }*/
        notifyDataSetChanged();
        clear();
        for (int i = 0, l = fullList.size(); i &lt; l; i++)
            add(fullList.get(i));
        notifyDataSetInvalidated();

    }
}
}
</code></pre>

<p><strong>set the Arraylist to the adapter having list,textview</strong></p>

<pre><code>  AutoCompleteAdapterdemo adapter = new AutoCompleteAdapterdemo(LandingActivity.this,
                    R.layout.list_item, R.id.textView1, arraylist_searchName_Demo);
</code></pre>

<p>where list_item is an xml which we have to create in our project and textView1 is the textview in list_item.xml</p>

<p><strong>Now set the adapter to the AutoCompleteTextView</strong></p>

<pre><code>  Search_Name.setDropDownHeight(200);
            Search_Name.setThreshold(1);
            Search_Name.setAdapter(adapter);
</code></pre>
