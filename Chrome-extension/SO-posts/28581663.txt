<blockquote>
  <p><em>When it comes to building relationships between entities,<br>the closest wall next to me and my head often join... (Stephan)</em></p>
</blockquote>

<p>Here is a working example of a many to many relationship between entities A and B:</p>

<p><strong>A.java</strong></p>

<pre><code>import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

@Entity
public class A {
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE)
    @Column(name="id_a")
    private Integer id;

    private String name;

    @OneToMany(mappedBy="a",cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    private List&lt;AB&gt; abAssociations = new ArrayList&lt;&gt;();

    // Getters and setters...
}
</code></pre>

<p><strong>B.java</strong></p>

<pre><code>import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;

@Entity
public class B {
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE)
    @Column(name = "id_b")
    private Integer id;

    private String name;

    @OneToMany(mappedBy = "b", cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    private List&lt;AB&gt; abAssociations = new ArrayList&lt;&gt;();

    // Getters and setters...
}
</code></pre>

<p><strong>AB.java</strong></p>

<pre><code>import java.util.Date;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.ManyToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

@Entity
@IdClass(ABid.class)
public class AB {
    @Id
    @ManyToOne(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    private A a;

    @Id
    @ManyToOne(cascade=CascadeType.ALL, fetch=FetchType.LAZY)
    private B b;

    @Temporal(TemporalType.TIMESTAMP)
    private Date date;

    // Getters and setters...
}
</code></pre>

<p><strong>ABid.java</strong></p>

<pre><code>import java.io.Serializable;

// The IdClass MUST implement Serializable and override #hashCode and #equals
public class ABid implements Serializable {

    private static final long serialVersionUID = -2834827403836993112L;

    private A a;
    private B b;

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((a == null) ? 0 : a.hashCode());
        result = prime * result + ((b == null) ? 0 : b.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ABid other = (ABid) obj;
        if (a == null) {
            if (other.a != null)
                return false;
        } else if (!a.equals(other.a))
            return false;
        if (b == null) {
            if (other.b != null)
                return false;
        } else if (!b.equals(other.b))
            return false;
        return true;
    }
}
</code></pre>

<p><strong>pom.xml</strong></p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;
        &lt;artifactId&gt;hibernate-entitymanager&lt;/artifactId&gt;
        &lt;version&gt;4.3.7.Final&lt;/version&gt;
    &lt;/dependency&gt;
</code></pre>

<hr>

<h1>Sample code</h1>

<pre><code>import java.util.Date;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class Main {
    public static void main(String[] args) {
        // * Init entity manager
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("playground");

        EntityManager em = emf.createEntityManager();
        em.getTransaction().begin();

        // * Create two entities and persist them
        // We must persist the entities first alone before we build and flush their relation
        A a = new A();
        a.setName("foo");
        em.persist(a);

        B b = new B();
        b.setName("bar");
        em.persist(b);

        // * Build relationships between the two previous entities
        AB ab = new AB();
        ab.setA(a);
        ab.setB(b);
        ab.setDate(new Date());
        a.getAbAssociations().add(ab);
        b.getAbAssociations().add(ab);

        // * Flush our changements in the database
        em.getTransaction().commit();
        em.close();
        emf.close();
    }
}
</code></pre>

<p>Here is the sql code of the tables created by Hibernate on a Postgresql database.</p>

<pre><code>CREATE TABLE a
(
  id_a integer NOT NULL,
  name character varying(255),
  CONSTRAINT a_pkey PRIMARY KEY (id_a)
)

CREATE TABLE b
(
  id_b integer NOT NULL,
  name character varying(255),
  CONSTRAINT b_pkey PRIMARY KEY (id_b)
)

CREATE TABLE ab
(
  date timestamp without time zone,
  b_id_b integer NOT NULL,
  a_id_a integer NOT NULL,
  CONSTRAINT ab_pkey PRIMARY KEY (a_id_a, b_id_b),
  CONSTRAINT fk_3exna7nsxvj1kv9i9pntmwlf1 FOREIGN KEY (a_id_a)
      REFERENCES a (id_a) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT fk_n3jrq53nr1elew4rytocopkbu FOREIGN KEY (b_id_b)
      REFERENCES b (id_b) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
</code></pre>
