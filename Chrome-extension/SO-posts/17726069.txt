<p>That's the error you are getting :</p>

<pre><code>java.io.IOException: MAIN_THREAD
</code></pre>

<p>It means you are calling the register method from the main thread, which is not allowed. You should call it from another thread.</p>

<blockquote>
  <p>public static final String ERROR_MAIN_THREAD</p>
  
  <p>GCM methods are blocking. You should not run them in the main thread or in broadcast receivers.
  Constant Value: "MAIN_THREAD"</p>
</blockquote>

<p>Here's a code sample from the <a href="http://developer.android.com/google/gcm/gs.html">GCM documentation</a> :</p>

<pre><code>/**
 * Registers the application with GCM servers asynchronously.
 * &lt;p&gt;
 * Stores the registration id, app versionCode, and expiration time in the 
 * application's shared preferences.
 */
private void registerBackground() {
    new AsyncTask() {
        @Override
        protected String doInBackground(Void... params) {
            String msg = "";
            try {
                if (gcm == null) {
                    gcm = GoogleCloudMessaging.getInstance(context);
                }
                regid = gcm.register(SENDER_ID);
                msg = "Device registered, registration id=" + regid;

                // You should send the registration ID to your server over HTTP,
                // so it can use GCM/HTTP or CCS to send messages to your app.

                // For this demo: we don't need to send it because the device
                // will send upstream messages to a server that echo back the message
                // using the 'from' address in the message.

                // Save the regid - no need to register again.
                setRegistrationId(context, regid);
            } catch (IOException ex) {
                msg = "Error :" + ex.getMessage();
            }
            return msg;
        }

        @Override
        protected void onPostExecute(String msg) {
            mDisplay.append(msg + "\n");
        }
    }.execute(null, null, null);
}
</code></pre>
