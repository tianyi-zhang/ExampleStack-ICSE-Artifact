<p>You could cat the strings together but my personal preference is to create a little value object:</p>

<pre><code>public class NameTarget {
    private final String name;
    private final String target;

    public NameTarget(String name, String target){
        this.name = name;
        this.target = target;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((target == null) ? 0 : target.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        NameTarget other = (NameTarget) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (target == null) {
            if (other.target != null)
                return false;
        } else if (!target.equals(other.target))
            return false;
        return true;
    }

    // add getters here
}
</code></pre>

<p>That took about 30 seconds to generate do in eclipse, it makes for a more type safe and cleaner code to work with in the long run.</p>

<p>You could and I have in the past created a <code>Pair</code> style turple but I'm starting to prefer the named immutable value types for this sort of thing.</p>
