<p>Use below code of image loader class with image adapter.....</p>

<pre><code>public class ImageLoader {

    int image_size = 60;
    MemoryCache memoryCache = new MemoryCache();
    FileCache fileCache;
    private Map&lt;ImageView, String&gt; imageViews = Collections.synchronizedMap(new WeakHashMap&lt;ImageView, String&gt;());
    ExecutorService executorService;
    Context m_c;
    boolean mFlag = false;

    public ImageLoader(Context context) {
        fileCache = new FileCache(context);
        executorService = Executors.newFixedThreadPool(2);
        m_c=context;
    }

    //  final int stub_id = R.drawable.animation_loding;

    public void DisplayImage(String url,Bitmap my_bmp, ImageView imageView, int ad_b_width, boolean b) 
    {
        this.mFlag = b;
        this.image_size = ad_b_width;
        if(url!=null)
        {
        imageViews.put(imageView, url);
        Bitmap bitmap = memoryCache.get(url);

        if (bitmap != null)
        {
            if(mFlag)
            {
                int h = bitmap.getHeight();
                int w = bitmap.getWidth();
                int w1 = image_size;
                if(w &gt; w1)
                {
                    int h1 = (h*w1)/w;
                    System.out.println("photos size :: "+w1 +"  and  "+h1);
                    //Bitmap bit = drawShadow(bitmap, 0, 1, 1, 1);
                    imageView.setLayoutParams(new LinearLayout.LayoutParams(w1, h1));
                    imageView.setScaleType(ScaleType.FIT_XY);
                    imageView.setImageBitmap(bitmap);
                }
                else 
                {
                    imageView.setLayoutParams(new LinearLayout.LayoutParams(w, h));
                    imageView.setScaleType(ScaleType.FIT_XY);
                    imageView.setImageBitmap(bitmap);
                }
            }
            else 
            {
                imageView.setScaleType(ScaleType.FIT_XY);
                imageView.setImageBitmap(bitmap);
            }
        }
        else 
        {
            queuePhoto(url, imageView);

            imageView.setScaleType(ScaleType.CENTER);
            imageView.setBackgroundResource(R.drawable.region_images);
        }
        }
        else if (my_bmp != null)
        {
            Bitmap bitmap=my_bmp;

            if (bitmap != null)
            {
                if(mFlag)
                {
                    int h = bitmap.getHeight();
                    int w = bitmap.getWidth();
                    int w1 = image_size;
                    if(w &gt; w1)
                    {
                        int h1 = (h*w1)/w;
                        System.out.println("photos size :: "+w1 +"  and  "+h1);
                        //Bitmap bit = drawShadow(bitmap, 0, 1, 1, 1);
                        imageView.setLayoutParams(new LinearLayout.LayoutParams(w1, h1));
                        imageView.setScaleType(ScaleType.FIT_XY);
                        imageView.setImageBitmap(bitmap);
                    }
                    else 
                    {
                        imageView.setLayoutParams(new LinearLayout.LayoutParams(w, h));
                        imageView.setScaleType(ScaleType.FIT_XY);
                        imageView.setImageBitmap(bitmap);
                    }
                }
                else 
                {
                    imageView.setScaleType(ScaleType.FIT_XY);
                    imageView.setImageBitmap(bitmap);
                }
            }

        }

    }

    private void queuePhoto(String url, ImageView imageView) 
    {
        PhotoToLoad p = new PhotoToLoad(url, imageView);
        executorService.submit(new PhotosLoader(p));
    }

    private Bitmap getBitmap(String url) {
        File f = fileCache.getFile(url);

        // from SD cache
        Bitmap b = decodeFile(f);
        if (b != null)
            return b;

        // from web
        try 
        {
            Bitmap bitmap = null;
            URL imageUrl = new URL(url);
            HttpURLConnection conn = (HttpURLConnection) imageUrl
            .openConnection();
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(30000);
            conn.setInstanceFollowRedirects(true);
            InputStream is = conn.getInputStream();
            OutputStream os = new FileOutputStream(f);
            Utils.CopyStream(is, os);
            os.close();
            bitmap = decodeFile(f);
            return bitmap;
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    // decodes image and scales it to reduce memory consumption
    private Bitmap decodeFile(File f) 
    {
        try 
        {
            // decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            //o.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(new FileInputStream(f), null, o);

            // Find the correct scale value. It should be the power of 2.
            final int REQUIRED_SIZE = this.image_size;
            int width_tmp = o.outWidth, height_tmp = o.outHeight;
            int scale = 1;
            while (true) {
                if (width_tmp / 2 &lt; REQUIRED_SIZE
                        || height_tmp / 2 &lt; REQUIRED_SIZE)
                    break;
                width_tmp /= 2;
                height_tmp /= 2;
                scale *= 2;
            }

            // decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize = scale;
            Log.i("images scal ", String.valueOf(scale));
            return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
        } catch (FileNotFoundException e) {
        }
        return null;
    }

    // Task for the queue
    private class PhotoToLoad {
        public String url;
        public ImageView imageView;

        public PhotoToLoad(String u, ImageView i) {
            url = u;
            imageView = i;
        }
    }

    class PhotosLoader implements Runnable 
    {
        PhotoToLoad photoToLoad;

        PhotosLoader(PhotoToLoad photoToLoad) 
        {
            this.photoToLoad = photoToLoad;
        }

        @Override
        public void run() {
            if (imageViewReused(photoToLoad))
                return;
            Bitmap bmp = getBitmap(photoToLoad.url);
            memoryCache.put(photoToLoad.url, bmp);
            if (imageViewReused(photoToLoad))
                return;
            BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
            Activity a = (Activity) photoToLoad.imageView.getContext();
            a.runOnUiThread(bd);
        }
    }

    boolean imageViewReused(PhotoToLoad photoToLoad) {
        String tag = imageViews.get(photoToLoad.imageView);
        if (tag == null || !tag.equals(photoToLoad.url))
            return true;
        return false;
    }

    // Used to display bitmap in the UI thread
    class BitmapDisplayer implements Runnable {
        Bitmap bitmap;
        PhotoToLoad photoToLoad;

        public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
            bitmap = b;
            photoToLoad = p;
        }

        public void run() 
        {
            if (imageViewReused(photoToLoad))
                return;
            if (bitmap != null)
            {

                if(mFlag)
                {
                    int h = bitmap.getHeight();
                    int w = bitmap.getWidth();

                    int w1 = image_size;


                    if(w &gt; w1)
                    {
                        int h1 = (h*w1)/w;
                        System.out.println("photos size :: "+w1 +"  and  "+h1);

                        photoToLoad.imageView.setLayoutParams(new LinearLayout.LayoutParams(w1, h1));
                        photoToLoad.imageView.setScaleType(ScaleType.FIT_XY);
                        photoToLoad.imageView.setImageBitmap(bitmap);
                    }
                    else 
                    {
                        photoToLoad.imageView.setLayoutParams(new LinearLayout.LayoutParams(w, h));
                        photoToLoad.imageView.setScaleType(ScaleType.FIT_XY);
                        photoToLoad.imageView.setImageBitmap(bitmap);
                    }

                    bitmap = null;
                }
                else 
                {
                    photoToLoad.imageView.setScaleType(ScaleType.FIT_XY);
                    photoToLoad.imageView.setImageBitmap(bitmap);
                    bitmap = null;
                }
            }               
            else
            {
            }
        }
    }

    public void clearCache() {
        memoryCache.clear();
        fileCache.clear();
    }
</code></pre>
