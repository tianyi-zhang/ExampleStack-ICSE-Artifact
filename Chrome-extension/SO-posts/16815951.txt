<p>Things to look out for:</p>

<ol>
<li><p>It is essential that the <code>View</code>s created for the adapter are enabled for click and touch action. After they are created:</p>

<pre><code>View.setEnabled(true);
</code></pre></li>
<li><p>When you create the <code>AdapterView</code> and the <code>BaseApapter</code>, remember to both <code>setOnItemClickListener</code> and <code>setOnItemLongClickListener</code> if you want to handle long clicks, which it seems you do.</p></li>
<li><p>In the <code>endTouch</code> routine, you need to set <code>mLongPressRunnable</code> to null, so it will be created for the next touch (or lose the <code>null</code> check in <code>startLongPressCheck</code> and handle concurency issues another way).</p></li>
<li><p>The runnable created in <code>startLongPressCheck</code> needs to call <code>endTouch</code> when complete to reset everything to the right, nothing pending, state after the long press time period.</p></li>
<li><p>In the <code>onTouchEvent</code> <code>switch</code> statement, it is important to not call your <code>endTouch</code> routine, because this means that movement events may stop the click.</p></li>
<li><p>There is a suggestion (see <a href="http://stackoverflow.com/questions/5703548/android-onclick-method-doesnt-work-on-a-custom-view">Android onClick method doesn&#39;t work on a custom view</a>) that if you don't call <code>super.onTouchEvent(event)</code> in your <code>onTouchEvent</code> it can cause problems. This would look something like:</p>

<pre><code>@Override
public boolean onTouchEvent(MotionEvent event) { 
    if (getChildCount() == 0) { 
        return super.onTouchEvent(event); 
    }

    boolean handled = false;

    switch (event.getAction()) { 
        case MotionEvent.ACTION_DOWN: 
            startTouch(event); 
            handled = true;
            break;

        case MotionEvent.ACTION_UP: 
            if (mTouchState == TOUCH_STATE_CLICK) { 
                clickChildAt((int)event.getX(), (int)event.getY());
                handled = true;
            } 
            endTouch();
        break; 

        default: 
            // Do not do anything dramatic here because the system
            // may send different (eg. motion) information here which
            // may lead to you losing valid clicks if you simply cancel
            // the click in process.
        break;
    } 

if (handled == false) handled = super.onTouchEvent(event);

return handled;
}
</code></pre></li>
</ol>
