<p>Here's an example of doing it from program arguments:</p>

<pre><code>import java.lang.reflect.Constructor;
import java.util.*;

public class InstantiateWithReflectionIncludingArgs {
    public static void main(String[] args) throws Exception {
        String className = args[0];
        List&lt;Object&gt; argList = new ArrayList&lt;Object&gt;();
        if (args.length &gt; 1) {
            argList.addAll(Arrays.asList(args).subList(1, args.length));
        }
        Class c = Class.forName(className);
        List&lt;Class&lt;?&gt;&gt; argTypes = new ArrayList&lt;Class&lt;?&gt;&gt;();
        for (Object arg : argList) {
            argTypes.add(arg.getClass());
        }
        Constructor constructor = c.getConstructor(
            argTypes.toArray(new Class&lt;?&gt;[argTypes.size()]));
        Object o = constructor.newInstance(
            argList.toArray(new Object[argList.size()]));
        System.out.println("Created a " + o.getClass() + ": " + o);
    }
}
</code></pre>

<p>Naturally, the <code>argList</code> can only ever have Strings in this case because they're pulled from a <code>String[]</code>, but you could add args of any type. Note that constructor args are positional, not named, so the names in the map won't do you much good. They need to be in the proper order.</p>

<p>Try running it and passing "java.util.Date" as an argument.</p>
