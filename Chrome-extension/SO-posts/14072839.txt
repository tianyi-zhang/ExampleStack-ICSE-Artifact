<p>Ok I think it works now. 
My solution:</p>

<pre><code>   public class EditDateDialogFragment extends DialogFragment {
            // Use this instance of the interface to deliver action events
    EditDateDialogListener mListener = new EditDateDialogListener() {

        @Override
        public void onDialogPositiveClick(DialogFragment dialog) {
            //Should always overridden by interface implementing class
        }

        @Override
        public void onDialogNegativeClick(DialogFragment dialog) {
            //Should always overridden by interface implementing class
        }
    };
        DatePicker mDatePicker;

        /*
         * The activity that creates an instance of this dialog fragment must
         * implement this interface in order to receive event callbacks. Each method
         * passes the DialogFragment in case the host needs to query it.
         */
        public interface EditDateDialogListener {
            public void onDialogPositiveClick(DialogFragment dialog);

            public void onDialogNegativeClick(DialogFragment dialog);
        }

        public void setListener(EditDateDialogListener listener) {
            mListener = listener;
        }

        public static EditDateDialogFragment newInstance(int currentCategoryId) {
            EditDateDialogFragment p = new EditDateDialogFragment();
            Bundle args = new Bundle();
            args.putInt("currentRecordId", currentCategoryId);
            p.setArguments(args);
            return p;
        }

        @Override
        public void onCreate(Bundle savedInstanceState) {
            mCurrentRecordId = getArguments().getInt("currentRecordId");
            super.onCreate(savedInstanceState);
        }

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {
            LayoutInflater inflater = LayoutInflater.from(getActivity());
            final View v = inflater.inflate(R.layout.fragment_dialog_edit_date, null);
            mDatePicker = (DatePicker) v.findViewById(R.id.dialog_edit_date);
            return new AlertDialog.Builder(getActivity()).setTitle("Set Date...").setView(v).setCancelable(true).setPositiveButton("Confirm", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    Log.d("", "Dialog confirmed");

                    mListener.onDialogPositiveClick(EditDateDialogFragment.this);
                }
            }).setNegativeButton("Abort", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    Log.d("", "Dialog abort");
                    mListener.onDialogNegativeClick(EditDateDialogFragment.this);
                    dialog.cancel();
                }
            }).create();
        }
    }

    public class RecordDetailFragment extends SherlockFragment implements EditDateDialogFragment.EditDateDialogListener {

        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            if (savedInstanceState != null) {
                // Update reference
                        // Update reference
                        EditDateDialogFragment attachedDialogFragment = (EditDateDialogFragment) getActivity().getSupportFragmentManager().findFragmentByTag("EditDateDialogFragment"); // "tag" is the string set as the tag for the dialog when you show it
                if (attachedDialogFragment != null) {
                    // the dialog exists so update its listener
                    attachedDialogFragment.setListener(this);
                }
            }
        }

        // Called somewhere in the fragment
        public void showDialog() {
            EditDateDialogFragment editDateFragment = EditDateDialogFragment.newInstance(recordId);
            editDateFragment.setListener((EditDateDialogListener) this);
            editDateFragment.show(getActivity().getSupportFragmentManager(), "EditDateDialogFragment");
        }

        @Override
        public void onDialogPositiveClick(DialogFragment dialog) {
            Log.d("RecordDetailFragment", "Callback Dialog confirmed");
            int year = ((EditDateDialogFragment) dialog).mDatePicker.getYear();
            Log.d("RecordDetailFragment", "Year of DatePicker: " + year);

        }

        @Override
        public void onDialogNegativeClick(DialogFragment dialog) {
            Log.d("RecordDetailFragment", "Callback Dialog abort");
            // TODO Auto-generated method stub

        }
    }
</code></pre>

<p>I'm not sure why the DatePicker is still available after the dialog is closed..
@Luksprog: What do you think about it? Did you mean it this way?</p>
