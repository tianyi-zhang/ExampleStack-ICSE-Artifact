<p>I am wondering if Sharpen supports such an enum implementation. Here is the source code, from what I understand, it seems to throw an exception as soon as a public methods is found in an enum :</p>

<pre><code>private boolean processEnumType(TypeDeclaration node) {
    if (!isEnum(node)) {
        return false;
    }
    final CSEnum theEnum = new CSEnum(typeName(node));
    mapVisibility(node, theEnum);
    mapJavadoc(node, theEnum);
    addType(theEnum);

    node.accept(new ASTVisitor() {
        public boolean visit(VariableDeclarationFragment node) {
            theEnum.addValue(identifier(node.getName()));
            return false;
        }

        @Override
        public boolean visit(MethodDeclaration node) {
            if (node.isConstructor() &amp;&amp; isPrivate(node)) {
                return false;
            }
            unsupportedConstruct(node, "Enum can contain only fields and a private constructor.");
            return false;
        }
    });
    return true;
}
</code></pre>

<p><strong>But</strong>, this link <a href="http://tracker.db4o.com/browse/COR-496" rel="nofollow">http://tracker.db4o.com/browse/COR-496</a> seems to confirm that this works for public getters. That is, if you respect this construction :</p>

<pre><code>enum ASN1Messages {
    /**
     * ASN.1 Boolean elements must have a value whose length is exactly one byte.
     */
    ERR_BOOLEAN_INVALID_LENGTH("ASN.1 Boolean elements must have a value whose length is exactly one byte."),


    /**
     * Unable to decode the provided byte array as an ASN.1 BER element:  {0}
     */
    ERR_ELEMENT_DECODE_EXCEPTION("Unable to decode the provided byte array as an ASN.1 BER element:  {0}"),;

    private String s;

    ASN1Messages(String s) {
        this.s = s;
    }

    /**
     * Retrieves a localized version of the message.
     * This method should only be used for messages which do not take any arguments.
     *
     * @return A localized version of the message.
     */
    public String get() {
        return s;
    }
}
</code></pre>
