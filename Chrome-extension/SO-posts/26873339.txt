<p>You need to use a notification system by having the view (the GUI) be notified by the model (the "backend") when data has been changed. Then the view can request the updated information and use it to update the JLabel display. The details of this will depend on the specifics of your code, but I often give my model (or a wrapper around the model) a SwingPropertyChangeSupport field as well as <code>addPropertyChangeListener(...)</code> and the similar remove listener methods, and then in the model's methods where a property is changed (a <strong>bound</strong> property), fire the SwingPropertyChangeSupport's notification method. For more details on an implementation, you should consider showing some details of your code, preferably a <a href="http://stackoverflow.com/help/mcve">minimal example program</a>.</p>

<p><a href="http://stackoverflow.com/a/15729267/522444">For example</a></p>

<hr>

<p><strong>Edit</strong>  </p>

<p>Note that if all you want is notification of when show is called, you can always extend CardLayout and override its <code>show(...)</code> method. But if you do this, don't forget to call the <code>super.show(...)</code> method as well.</p>

<hr>

<p><strong>Edit</strong><br>
Note changes made to code indicated by <code>// !!</code></p>

<pre><code>import java.awt.CardLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.*;

@SuppressWarnings("serial")
public class GUI extends javax.swing.JFrame {
   public static final String ITEM = "item";
   public String item; // !! this should not be static!
   private javax.swing.JPanel MainPanel;

   public GUI() {
      // creates a JPanel called MainPanel which will hold the cards
      // in my CardLayout
      initComponents();
   }

   // !!
   public void setItem(String item) {
      String oldValue = this.item;
      String newValue = item;
      this.item = item;
      firePropertyChange(ITEM, oldValue, newValue);
   }

   //!!
   public String getItem() {
      return item;
   }

   private void initComponents() {

      MainPanel = new javax.swing.JPanel();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      MainPanel.setBackground(new java.awt.Color(198, 118, 38));
      MainPanel.setMaximumSize(new java.awt.Dimension(1000, 1000));
      MainPanel.setName(""); // NOI18N
      MainPanel.setPreferredSize(new java.awt.Dimension(1024, 768));
      MainPanel.setLayout(new java.awt.CardLayout());

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
            getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            javax.swing.GroupLayout.Alignment.TRAILING,
            layout.createSequentialGroup()
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                  .addComponent(MainPanel,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap()));
      layout.setVerticalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            javax.swing.GroupLayout.Alignment.TRAILING,
            layout.createSequentialGroup()
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                  .addComponent(MainPanel,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap()));

      pack();
      setLocationRelativeTo(null);

   }

   // Grab the panel that was created in initComponents() so that I can add
   // other panels to it
   public JPanel getMainPanel() {
      return MainPanel;
   }

   public static void main(String args[]) {
      java.awt.EventQueue.invokeLater(new Runnable() {
         @Override
         public void run() {
            final GUI mainGUI = new GUI();

            // The JLabel in DisplayPanel.java will initially say root
            // !! item = "root";
            mainGUI.setItem("root"); // !!

            JPanel cardHolder = mainGUI.getMainPanel();
            // This panel contains a button which will update the name of
            // the currentUserAccount
            final MainMenuPanel mainMenu = new MainMenuPanel(cardHolder,
                  mainGUI); // !!
            cardHolder.add(mainMenu, "MainMenu");

            // This panel holds a JLabel that I want to have updated
            // automatically
            // when the user presses the button on MainMenuPanel
            final DisplayPanel display = new DisplayPanel(cardHolder, mainGUI); // !!
            cardHolder.add(display, "Display");

            mainGUI.pack();
            mainGUI.setVisible(true);

            // !!
            mainGUI.addPropertyChangeListener(ITEM,
                  new PropertyChangeListener() {

                     @Override
                     public void propertyChange(PropertyChangeEvent pcEvt) {
                        String itemText = mainGUI.getItem();
                        display.setJLabel1Text(itemText);
                     }
                  });
         }
      });
   }
}

@SuppressWarnings("serial")
class DisplayPanel extends javax.swing.JPanel {
   private JPanel mainPanel;
   private GUI mainGui; // !!

   public DisplayPanel(JPanel mainPanel, GUI mainGui) { // !!

      this.mainPanel = mainPanel;
      this.mainGui = mainGui;// !!
      initComponents(); // Creates my panel with the JLabels/buttons etc
   }

   // !! added
   public void setJLabel1Text(String text) {
      jLabel1.setText(text);
   }

   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      GoToMainMenuButton = new javax.swing.JButton();

      jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
      // !! jLabel1.setText(GUI.item); // sets the JLabel to the GUI.item
      // variable
      jLabel1.setText(mainGui.getItem()); // !!

      GoToMainMenuButton.setText("Go to MainMenuPanel");
      GoToMainMenuButton.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            GoToMainMenuButtonMouseClicked(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(
                  javax.swing.GroupLayout.Alignment.TRAILING,
                  layout.createSequentialGroup()
                        .addContainerGap(269, Short.MAX_VALUE)
                        .addGroup(
                              layout.createParallelGroup(
                                    javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(GoToMainMenuButton)
                                    .addComponent(
                                          jLabel1,
                                          javax.swing.GroupLayout.PREFERRED_SIZE,
                                          145,
                                          javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(266, 266, 266)));
      layout.setVerticalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            layout.createSequentialGroup()
                  .addGap(168, 168, 168)
                  .addComponent(jLabel1,
                        javax.swing.GroupLayout.PREFERRED_SIZE, 63,
                        javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(83, 83, 83).addComponent(GoToMainMenuButton)
                  .addContainerGap(116, Short.MAX_VALUE)));
   }

   private void GoToMainMenuButtonMouseClicked(java.awt.event.MouseEvent evt) {
      // go back to the MainPanel
      CardLayout layout = (CardLayout) (mainPanel.getLayout());
      layout.show(mainPanel, "MainMenu");
   }

   private javax.swing.JButton GoToMainMenuButton;
   private javax.swing.JLabel jLabel1;

}

@SuppressWarnings("serial")
class MainMenuPanel extends javax.swing.JPanel {

   private JPanel MainPanel;
   private GUI mainGui; // !!

   public MainMenuPanel(JPanel MainPanel, GUI mainGui) { // !!

      this.MainPanel = MainPanel;
      this.mainGui = mainGui; // !!
      initComponents(); // Creates my panel with the JLabels/buttons etc
   }

   private void initComponents() {

      GoToDisplayPanelButton = new javax.swing.JButton();

      GoToDisplayPanelButton.setText("Press Me");
      GoToDisplayPanelButton
            .addMouseListener(new java.awt.event.MouseAdapter() {
               public void mouseClicked(java.awt.event.MouseEvent evt) {
                  GoToDisplayPanelButtonMouseClicked(evt);
               }
            });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            layout.createSequentialGroup().addGap(252, 252, 252)
                  .addComponent(GoToDisplayPanelButton)
                  .addContainerGap(260, Short.MAX_VALUE)));
      layout.setVerticalGroup(layout.createParallelGroup(
            javax.swing.GroupLayout.Alignment.LEADING).addGroup(
            javax.swing.GroupLayout.Alignment.TRAILING,
            layout.createSequentialGroup()
                  .addContainerGap(198, Short.MAX_VALUE)
                  .addComponent(GoToDisplayPanelButton).addGap(175, 175, 175)));
   }

   private void GoToDisplayPanelButtonMouseClicked(java.awt.event.MouseEvent evt) {
      // Changes the value of item. I want this change to be reflected on my
      // JLabel in DisplayPanel.java, but it is not because I do not explicitly
      // call setText on the JLabel here. I am wondering if there is a way to
      // have my JLabel automatically update when the variable in its setText
      // is changed, without having to directly call setText. Or some other
      // way to update it without calling setText every time I change something.
      // !! GUI.item = "new value";
      mainGui.setItem("new value"); // !!

      // Switches to my DisplayPanel which should show the updated name in its
      // JLabel
      CardLayout layout = (CardLayout) (MainPanel.getLayout());
      layout.show(MainPanel, "Display");
   }

   private javax.swing.JButton GoToDisplayPanelButton;
}
</code></pre>
