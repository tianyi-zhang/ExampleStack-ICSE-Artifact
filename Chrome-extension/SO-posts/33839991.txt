<p>I can't help but notice most answers asking you to use 2 libraries, 1 for loading the Image and 2nd for displaying it. Your goal as a developer should always be to get your task done with the minimum number of libraries and here is a solution that only needs 1 library. I will use Glide here since it caches the images exactly for the size you need. I haven't used Fresco so cannot comment on it but <a href="http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en" rel="nofollow">HERE's</a> something on Picasso vs. Glide</p>

<p><strong>Step 1</strong></p>

<p>Create your layout</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="@dimen/nav_header_height"
android:paddingBottom="@dimen/activity_vertical_margin"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
android:paddingTop="@dimen/activity_vertical_margin"
android:theme="@style/ThemeOverlay.AppCompat.Dark"&gt;

&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_centerInParent="true"
    android:gravity="center"
    android:orientation="vertical"&gt;

    &lt;ImageView
        android:id="@+id/image_profile"
        android:layout_width="@dimen/profile_picture_size"
        android:layout_height="@dimen/profile_picture_size"
        android:background="@drawable/image_circle"
        android:paddingTop="@dimen/nav_header_vertical_spacing"
        android:src="@drawable/com_facebook_profile_picture_blank_square" /&gt;

    &lt;TextView
        android:id="@+id/text_username"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:paddingTop="@dimen/nav_header_vertical_spacing"
        android:text="@string/placeholder_name"
        android:textAppearance="@style/TextAppearance.AppCompat.Body1"
        android:textColor="@color/colorTextPrimary" /&gt;
&lt;/LinearLayout&gt;


&lt;/RelativeLayout&gt;
</code></pre>

<p>This is what my Layout looks like, notice I used a plain simple ImageView instead of a fancy library. Feel free to adjust it to match your needs.</p>

<p><a href="http://i.stack.imgur.com/O141A.png" rel="nofollow"><img src="http://i.stack.imgur.com/O141A.png" alt="Navigation Drawer header"></a></p>

<p><strong>Step 2</strong></p>

<p>Write a custom transform to convert a square image into a Circle Image. Glide uses something called Transformations to let you manipulate images according to what you need. Read <a href="https://github.com/bumptech/glide/wiki/Transformations" rel="nofollow">THIS</a> post for what transformations are and read <a href="https://github.com/wasabeef/glide-transformations" rel="nofollow">THIS</a> post to play with some custom transformations. In our case our transformation class looks like this.</p>

<pre><code>import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapShader;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.Transformation;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;

public class CropCircleTransform implements Transformation&lt;Bitmap&gt; {

private BitmapPool mBitmapPool;

public CropCircleTransform(Context context) {
    this(Glide.get(context).getBitmapPool());
}

public CropCircleTransform(BitmapPool pool) {
    this.mBitmapPool = pool;
}

@Override
public Resource&lt;Bitmap&gt; transform(Resource&lt;Bitmap&gt; resource, int outWidth, int outHeight) {
    Bitmap source = resource.get();
    int size = Math.min(source.getWidth(), source.getHeight());

    int width = (source.getWidth() - size) / 2;
    int height = (source.getHeight() - size) / 2;

    Bitmap bitmap = mBitmapPool.get(size, size, Bitmap.Config.ARGB_8888);
    if (bitmap == null) {
        bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
    }

    Canvas canvas = new Canvas(bitmap);
    Paint paint = new Paint();
    BitmapShader shader =
            new BitmapShader(source, BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP);
    if (width != 0 || height != 0) {
        // source isn't square, move viewport to center
        Matrix matrix = new Matrix();
        matrix.setTranslate(-width, -height);
        shader.setLocalMatrix(matrix);
    }
    paint.setShader(shader);
    paint.setAntiAlias(true);

    float r = size / 2f;
    canvas.drawCircle(r, r, r, paint);

    return BitmapResource.obtain(bitmap, mBitmapPool);
}

@Override public String getId() {
    return "CropCircleTransform()";
}
}
</code></pre>

<p><strong>Step 3</strong>
Load the picture into this layout using Glide. Admin is an object that contains details such as name, email, profile picture url etc, mDrawer is a reference to the NavigationView. Notice how Glide uses the transformation defined in step 2 to achieve the circular image effect.</p>

<pre><code>public void addHeaderToDrawer(@NonNull Admin admin) {
    View headerView = mDrawer.inflateHeaderView(R.layout.nav_header_main);
    TextView textUserName = (TextView) headerView.findViewById(R.id.text_username);
    ImageView imageProfile = (ImageView) headerView.findViewById(R.id.image_profile);
    textUserName.setText(admin.getName());
    Glide.with(mContext)
            .load(admin.getUrl())
            .asBitmap()
            .transform(new CropCircleTransform(mContext))
            .into(imageProfile);
}
</code></pre>

<p><strong>Step 4</strong></p>

<p>Sit back and enjoy the show. I am also loading the data from Facebook, let me know if you are still facing any issues :)
<a href="http://i.stack.imgur.com/mLlZu.png" rel="nofollow"><img src="http://i.stack.imgur.com/mLlZu.png" alt="enter image description here"></a></p>
