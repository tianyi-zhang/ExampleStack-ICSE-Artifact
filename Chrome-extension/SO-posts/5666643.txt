<p>Please use RemoteAPI for doing this programmatically.</p>

<p>In python, you can first configure the appengine_console.py as described <a href="http://code.google.com/appengine/articles/remote_api.html" rel="nofollow">here</a></p>

<p>Once you have that, you can launch and write the following commands in the python shell:</p>

<p>$ python appengine_console.py yourapp</p>

<pre><code>&gt;&gt;&gt; import yourdbmodelclassnamehere
&gt;&gt;&gt; m = yourmodelclassnamehere(x='',y='')
&gt;&gt;&gt; m.put()
</code></pre>

<p>And here is code from the java version which is self explanatory (directly borrowed from the <a href="http://code.google.com/appengine/docs/java/tools/remoteapi.html" rel="nofollow">remote api page on gae docs</a>):</p>

<pre><code>package remoteapiexample;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.tools.remoteapi.RemoteApiInstaller;
import com.google.appengine.tools.remoteapi.RemoteApiOptions;
import java.io.IOException;

public class RemoteApiExample {
    public static void main(String[] args) throws IOException {
        String username = System.console().readLine("username: ");
        String password = 
            new String(System.console().readPassword("password: "));
        RemoteApiOptions options = new RemoteApiOptions()
            .server("&lt;your app&gt;.appspot.com", 443)
            .credentials(username, password);
        RemoteApiInstaller installer = new RemoteApiInstaller();
        installer.install(options);
        try {
            DatastoreService ds = DatastoreServiceFactory.getDatastoreService();
            System.out.println("Key of new entity is " + 
                ds.put(new Entity("Hello Remote API!")));
        } finally {
            installer.uninstall();
        }
    }
}
</code></pre>
