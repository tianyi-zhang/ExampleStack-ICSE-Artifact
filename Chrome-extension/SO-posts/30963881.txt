<p>For those on android, who can't use API 19's Objects.equals(str1, str2), there is this:</p>

<pre><code>android.text.TextUtils.equals(str1, str2);
</code></pre>

<p>It is null safe.  It rarely has to use the more expensive string.equals() method because identical strings on android almost always compare true with the "==" operand thanks to <a href="https://developer.android.com/reference/java/lang/String.html" rel="nofollow">Android's String Pooling</a>, and length checks are a fast way to filter out most mismatches.</p>

<p>Source Code:</p>

<pre><code>/**
 * Returns true if a and b are equal, including if they are both null.
 * &lt;p&gt;&lt;i&gt;Note: In platform versions 1.1 and earlier, this method only worked  well if
 * both the arguments were instances of String.&lt;/i&gt;&lt;/p&gt;
 * @param a first CharSequence to check
 * @param b second CharSequence to check
 * @return true if a and b are equal
 */
public static boolean equals(CharSequence a, CharSequence b) {
    if (a == b) return true;
    int length;
    if (a != null &amp;&amp; b != null &amp;&amp; (length = a.length()) == b.length()) {
        if (a instanceof String &amp;&amp; b instanceof String) {
            return a.equals(b);
        } else {
            for (int i = 0; i &lt; length; i++) {
                if (a.charAt(i) != b.charAt(i)) return false;
            }
            return true;
        }
    }
    return false;
}
</code></pre>
