<p>First create an Base <code>DialogFragment</code> to keep hold of the instance of  the <code>Activity</code>. So when the Dialog is attached to the <code>Activity</code> , you will know the instance of the <code>Activity</code> which created it.</p>

<pre><code>public abstract class BaseDialogFragment&lt;T&gt; extends DialogFragment {
        private T mActivityInstance;

        public final T getActivityInstance() {
                return mActivityInstance;
        }

        @Override
        public void onAttach(Activity activity) {
                mActivityInstance = (T) activity;
            super.onAttach(activity);
        }

        @Override
        public void onDetach() {
                super.onDetach();
                mActivityInstance = null;
        }
}
</code></pre>

<p>Then, create a <code>GeneralDialogFragment</code> which extends the <code>BaseDialogFragment</code></p>

<pre><code>public class GeneralDialogFragment extends BaseDialogFragment&lt;GeneralDialogFragment.OnDialogFragmentClickListener&gt; {

        // interface to handle the dialog click back to the Activity
        public interface OnDialogFragmentClickListener {
            public void onOkClicked(GeneralDialogFragment dialog);
            public void onCancelClicked(GeneralDialogFragment dialog);
        }

        // Create an instance of the Dialog with the input
        public static GeneralDialogFragment newInstance(String title, String message) {
            GeneralDialogFragment frag = new GeneralDialogFragment();
            Bundle args = new Bundle();
            args.putString("title", title);
            args.putString("msg", message);
            frag.setArguments(args);
            return frag;
        }
        // Create a Dialog using default AlertDialog builder , if not inflate custom view in onCreateView
        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {

            return new AlertDialog.Builder(getActivity())
                .setTitle(getArguments().getString("title"))
                .setMessage(getArguments().getString("message"))
                .setCancelable(false)
                .setPositiveButton("OK",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            // Positive button clicked
                            getActivityInstance().onOkClicked(GeneralDialogFragment.this);
                        }
                    }
                )
                .setNegativeButton("Cancel",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            // negative button clicked
                            getActivityInstance().onCancelClicked(GeneralDialogFragment.this);
                        }
                    }
                )
                .create();
        }

    }
</code></pre>

<p>If you need to use your own custom layout for dialog,then inflate a layout in <code>onCreateView</code> and remove <code>onCreateDialog</code> . But Add the click listeners in <code>onCreateView</code> like i explained in <code>onCreateDialog</code>  </p>

<pre><code> @Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.activity_dialog, container, false);
    return view;
}
</code></pre>

<p>Then , In  your <code>Activity</code> need to implement an <code>interface</code> to handle the action in <code>dialog</code></p>

<pre><code>public class TryMeActivity extends 
    FragmentActivity implements GeneralDialogFragment.OnDialogFragmentClickListener {

    @Override
        public void onOkClicked(GeneralDialogFragment dialog) {
                // do your stuff
        }

        @Override
        public void onCancelClicked(GeneralDialogFragment dialog) {
                // do your stuff
        }
}
</code></pre>

<p>Finally, Show the <code>Dialog</code> from your <code>Activity</code> when required, like this</p>

<pre><code>    GeneralDialogFragment generalDialogFragment =
        GeneralDialogFragment.newInstance("title", "message");
    generalDialogFragment.show(getSupportFragmentManager(),"dialog");
</code></pre>

<p>Hope this helps. I am sure this approach is one of the  optimized way, but there could be also different approaches . </p>
