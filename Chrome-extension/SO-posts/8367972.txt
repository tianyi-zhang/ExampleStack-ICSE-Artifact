<p>You can compare value by value like this</p>

<pre><code>d1.getDate().equals(d2.getDate()) &amp;&amp;
d1.getYear().equals(d2.getYear()) &amp;&amp;
d1.getMonth().equals(d2.getMonth())
</code></pre>

<p>Or</p>

<pre><code>Date date1 = new Date(d1.getYear(), d1.getMonth(), d1.getDate());
Date date2 = new Date(d2.getYear(), d2.getMonth(), d2.getDate());
date1.compareTo(date2);
</code></pre>

<p>If you work with Date class, consider using Calendar class instead
Here's the most elegant solution, using Calendar and Comparator for this</p>

<pre><code>public class CalendarDateWithoutTimeComparator implements Comparator&lt;Calendar&gt; {

    public int compare(Calendar cal1, Calendar cal2) {
        if(cal1.get(Calendar.YEAR) != cal2.get(Calendar.YEAR)) {
            return cal1.get(Calendar.YEAR) - cal2.get(Calendar.YEAR);
        } else if (cal1.get(Calendar.MONTH) != cal2.get(Calendar.MONTH)) {
            return cal1.get(Calendar.MONTH) - cal2.get(Calendar.MONTH);
        }
        return cal1.get(Calendar.DAY_OF_MONTH) - cal2.get(Calendar.DAY_OF_MONTH);
    }
}
</code></pre>

<p>Usage:</p>

<pre><code>Calendar c1 = Calendar.getInstance();
Calendar c2 = Calendar.getInstance();
// these calendars are equal

CalendarDateWithoutTimeComparator comparator = new CalendarDateWithoutTimeComparator();
System.out.println(comparator.compare(c1, c2));

List&lt;Calendar&gt; list = new ArrayList&lt;Calendar&gt;();
list.add(c1);
list.add(c2);

Collections.sort(list, comparator);
</code></pre>
