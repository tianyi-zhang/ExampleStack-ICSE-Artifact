<p>With the class <strong>TouchImageView</strong> above, if you want to apply <strong>Double Tap</strong>, you can do some steps:</p>

<ol>
<li><p>Declare variable:</p>

<pre><code>GestureDetector mDoubleTap;
</code></pre></li>
<li><p>Init in constructor:</p>

<pre><code>mDoubleTap = new GestureDetector(new DoubleTapGestureListener());
</code></pre></li>
<li><p>Register in <strong>onTouch()</strong>:</p>

<pre><code>@Override
public boolean onTouch(View v, MotionEvent event) {
    mDoubleTap.onTouchEvent(event);
    ...
}
</code></pre></li>
<li><p>Write the method <strong>handleScale()</strong> - coppied from <strong>onScale()</strong> method - as below:</p>

<pre><code>private void handleScale(float mScaleFactor) {
    float origScale = saveScale;
    saveScale *= mScaleFactor;
    if (saveScale &gt; maxScale) {
        saveScale = maxScale;
        mScaleFactor = maxScale / origScale;
    } else if (saveScale &lt; minScale) {
        saveScale = minScale;
        mScaleFactor = minScale / origScale;
    }
    right = width * saveScale - width - (2 * redundantXSpace * saveScale);
    bottom = height * saveScale - height - (2 * redundantYSpace * saveScale);
    if (origWidth * saveScale &lt;= width || origHeight * saveScale &lt;= height) {
        matrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);
        if (mScaleFactor &lt; 1) {
            matrix.getValues(m);
            float x = m[Matrix.MTRANS_X];
            float y = m[Matrix.MTRANS_Y];
            if (mScaleFactor &lt; 1) {
                if (Math.round(origWidth * saveScale) &lt; width) {
                    if (y &lt; -bottom)
                        matrix.postTranslate(0, -(y + bottom));
                    else if (y &gt; 0)
                        matrix.postTranslate(0, -y);
                } else {
                    if (x &lt; -right)
                        matrix.postTranslate(-(x + right), 0);
                    else if (x &gt; 0)
                        matrix.postTranslate(-x, 0);
                }
            }
        }
    } else {
        matrix.postScale(mScaleFactor, mScaleFactor, mScaleDetector.getFocusX(), mScaleDetector.getFocusY());
        matrix.getValues(m);
        float x = m[Matrix.MTRANS_X];
        float y = m[Matrix.MTRANS_Y];
        if (mScaleFactor &lt; 1) {
            if (x &lt; -right)
                matrix.postTranslate(-(x + right), 0);
            else if (x &gt; 0)
                matrix.postTranslate(-x, 0);
            if (y &lt; -bottom)
                matrix.postTranslate(0, -(y + bottom));
            else if (y &gt; 0)
                matrix.postTranslate(0, -y);
        }
    }
}
</code></pre></li>
<li><p>Put it in <strong>zoomIn()</strong> method as:</p>

<pre><code>public void zoomIn() {
    handleScale(2.0f);// 2.0f is the scale ratio
}
</code></pre></li>
<li><p>In the override method <strong>onScale()</strong>, you can modify as:</p>

<pre><code> @Override
    public boolean onScale(ScaleGestureDetector detector) {
        float mScaleFactor = detector.getScaleFactor();
        handleScale(mScaleFactor);
        return true;
    }
</code></pre></li>
</ol>

<p>to follow DRY principle.</p>

<p><strong><em>Note:</em></strong> double tap has only effect with small touched area.</p>

<p>Let me know if it works for you.</p>
