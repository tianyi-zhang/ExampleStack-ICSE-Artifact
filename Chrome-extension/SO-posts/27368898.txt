<p>What you should do is to create <code>class Person</code> which implements <code>Comparable&lt;Person&gt;</code> and if you are little bit lazy and the amount of data is not large <code>Serializable</code> too. </p>

<p>Then put everything inside <code>TreeSet&lt;Person&gt;</code> and write methods which serialize the TreeSet and deserialize it too.</p>

<p>Like this:</p>

<pre><code>import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.TreeSet;

public class Person implements Comparable&lt;Person&gt;, Serializable {
    private String name;
    private int score;

    public Person(String name, int score) {
        this.name = name;
        this.score = score;
        addPerson(this);
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getScore() {
        return score;
    }

    public void setScore(int score) {
        this.score = score;
    }

    @Override
    public int compareTo(Person o) {
        return score - o.score;
    }

    @Override
    public String toString() {
        return "Person [name=" + name + ", score=" + score + "]";
    }

    private static TreeSet&lt;Person&gt; classExtension = new TreeSet&lt;Person&gt;();

    private static void addPerson(Person person) {
        classExtension.add(person);
    }

    private static void removePerson(Person person) {
        classExtension.remove(person);
    }

    private static void showExtension() {
        for (Person person : classExtension)
            System.out.println(person);
    }

    public static void serialize() {

        FileOutputStream fos = null;
        ObjectOutputStream oos = null;

        try {
            fos = new FileOutputStream("Person.ser");
            oos = new ObjectOutputStream(fos);

            oos.writeObject(classExtension);

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {

            try {
                if (oos != null)
                    oos.close();
            } catch (IOException e) {
            }
            try {
                if (fos != null)
                    fos.close();
            } catch (IOException e) {
            }
        }
    }

    public static void deserialize(){

         FileInputStream fis = null;
         ObjectInputStream ois = null;
         try {
           fis = new FileInputStream("Person.ser"); 
           ois = new ObjectInputStream(fis); 

         classExtension =  (TreeSet&lt;Person&gt;) ois.readObject(); 

         } catch (FileNotFoundException e) {
           e.printStackTrace();
         } catch (IOException e) {
           e.printStackTrace();
         } catch (ClassNotFoundException e) {
           e.printStackTrace();
         } finally {
           // zasoby zwalniamy w finally
           try {
             if (ois != null) ois.close();
           } catch (IOException e) {}
           try {
             if (fis != null) fis.close();
           } catch (IOException e) {}
         }
    }

}
</code></pre>
