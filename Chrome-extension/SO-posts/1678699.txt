<p>What you've got looks pretty clear to me, to be honest. Admittedly I'd put the return statements in braces as that's the convention I follow, but apart from that it looks about as good as it gets.</p>

<p>I think I'd probably reverse the order of the second loop, so that both loops are ascending.</p>

<p>As Greg says, if you need to get accurate answers for large numbers, you should consider alternative data types. Given that the result should always be an integer, you might want to pick <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/math/BigInteger.html" rel="nofollow"><code>BigInteger</code></a> (despite all the divisions, the result will always be an integer):</p>

<pre><code>public static BigInteger choose(int x, int y) {
    if (y &lt; 0 || y &gt; x) 
       return BigInteger.ZERO;
    if (y == 0 || y == x) 
       return BigInteger.ONE;

    BigInteger answer = BigInteger.ONE;
    for (int i = x - y + 1; i &lt;= x; i++) {
        answer = answer.multiply(BigInteger.valueOf(i));
    }
    for (int j = 1; j &lt;= y; j++) {
        answer = answer.divide(BigInteger.valueOf(j));
    }
    return answer;
}
</code></pre>
