<p>JCodec does not support encoding of H.264. You can however use JNA with x264 library or ffmpeg. If you choose this route this thread may help you to get going: <a href="http://stackoverflow.com/questions/2940671/how-does-one-encode-a-series-of-images-into-h264-using-the-x264-c-api">How does one encode a series of images into H264 using the x264 C API?</a> .</p>

<p><strong>[UPDATE]</strong> As of version 0.1.0 JCodec supports H.264 encoding, here's a simple class that you can use to turn your sequence of images into an H.264 video in MP4 container:  </p>

<pre><code>public class SequenceEncoder {
    private SeekableByteChannel ch;
    private Picture toEncode;
    private RgbToYuv420 transform;
    private H264Encoder encoder;
    private ArrayList&lt;ByteBuffer&gt; spsList;
    private ArrayList&lt;ByteBuffer&gt; ppsList;
    private CompressedTrack outTrack;
    private ByteBuffer _out;
    private int frameNo;
    private MP4Muxer muxer;

    public SequenceEncoder(File out) throws IOException {
        this.ch = NIOUtils.writableFileChannel(out);

        // Transform to convert between RGB and YUV
        transform = new RgbToYuv420(0, 0);

        // Muxer that will store the encoded frames
        muxer = new MP4Muxer(ch, Brand.MP4);

        // Add video track to muxer
        outTrack = muxer.addTrackForCompressed(TrackType.VIDEO, 25);

        // Allocate a buffer big enough to hold output frames
        _out = ByteBuffer.allocate(1920 * 1080 * 6);

        // Create an instance of encoder
        encoder = new H264Encoder();

        // Encoder extra data ( SPS, PPS ) to be stored in a special place of
        // MP4
        spsList = new ArrayList&lt;ByteBuffer&gt;();
        ppsList = new ArrayList&lt;ByteBuffer&gt;();

    }

    public void encodeImage(BufferedImage bi) throws IOException {
        if (toEncode == null) {
            toEncode = Picture.create(bi.getWidth(), bi.getHeight(), ColorSpace.YUV420);
        }

        // Perform conversion
        for (int i = 0; i &lt; 3; i++)
            Arrays.fill(toEncode.getData()[i], 0);
        transform.transform(AWTUtil.fromBufferedImage(bi), toEncode);

        // Encode image into H.264 frame, the result is stored in '_out' buffer
        _out.clear();
        ByteBuffer result = encoder.encodeFrame(_out, toEncode);

        // Based on the frame above form correct MP4 packet
        spsList.clear();
        ppsList.clear();
        H264Utils.encodeMOVPacket(result, spsList, ppsList);

        // Add packet to video track
        outTrack.addFrame(new MP4Packet(result, frameNo, 25, 1, frameNo, true, null, frameNo, 0));

        frameNo++;
    }

    public void finish() throws IOException {
        // Push saved SPS/PPS to a special storage in MP4
        outTrack.addSampleEntry(H264Utils.createMOVSampleEntry(spsList, ppsList));

        // Write MP4 header and finalize recording
        muxer.writeHeader();
        NIOUtils.closeQuietly(ch);
    }

    public static void main(String[] args) throws IOException {
        SequenceEncoder encoder = new SequenceEncoder(new File("video.mp4"));
        for (int i = 1; i &lt; 100; i++) {
            BufferedImage bi = ImageIO.read(new File(String.format("folder/img%08d.png", i)));
            encoder.encodeImage(bi);
        }
        encoder.finish();
    }
}
</code></pre>

<p><strong>[UPDATE 1]</strong> Use this code to convert from interleaved YUV 4:2:0 byte array to JCodec picture:  </p>

<pre><code>byte[] input = ...
Picture output = Picture.create(width, height, ColorSpace.YUV420);
int[] d0 = output.getData()[0], d1 = output.getData()[1], d2 = output.getData()[2];

for(int i = 0, j0 = 0, j1 = 0, j2 = 0; i &lt; input.length; i += 6, j0 += 4, ++j1 , ++j2) {
    d0[j0    ] = input[i    ] &amp; 0xff;
    d0[j0 + 1] = input[i + 1] &amp; 0xff;
    d0[j0 + 2] = input[i + 2] &amp; 0xff;
    d0[j0 + 3] = input[i + 3] &amp; 0xff;

    d1[j1    ] = input[i + 4] &amp; 0xff;
    d2[j2    ] = input[i + 5] &amp; 0xff;
}
</code></pre>
