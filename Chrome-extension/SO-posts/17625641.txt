<h1>Last Updated: 6/2/15</h1>

<hr>

<p>After reading every Stack Overflow post about creating a unique ID, the Google developer blog and Android documentation, I feel as if the 'Pseudo ID' is the best possible option.</p>

<h1>Main Issue: Hardware vs Software</h1>

<h3>Hardware</h3>

<ul>
<li>User's can change their hardware, Android tablet or phone, so unique IDs based on hard are not good ideas for <strong>TRACKING USERS</strong></li>
<li>For <strong>TRACKING HARDWARE</strong>, this is a great idea</li>
</ul>

<h3>Software</h3>

<ul>
<li>User's can wipe/change their ROM if they are rooted</li>
<li>You can track users across platforms(iOS, Android, Windows and Web)</li>
<li>The best want to <strong>TRACK AN INDIVIDUAL USER</strong> with their <strong>consent</strong> is to simply have them login(make this seamless using OAuth)</li>
</ul>

<hr>

<h1>Overall breakdown with Android</h1>

<h3>- Guarantee uniqueness (include rooted devices) for API => 9/10 (99.5% of Android devices)</h3>

<h3>- No extra permissions</h3>

<p>Psuedo code:</p>

<pre><code>if API =&gt; 9/10: (99.5% of devices)

return unique ID containing serial id (rooted devices may be different)

else

return unique ID of build information (may overlap data - API &lt; 9)
</code></pre>

<p>Thanks to @stansult for posting <em><a href="http://stackoverflow.com/a/9186943/950427">all of our options</a></em> (in this Stack Overflow question).</p>

<h2>List of options - reasons why/ why not to use them:</h2>

<ul>
<li><p><strong>User Email - Software</strong></p>

<ul>
<li>User could change email - HIGHLY unlikely</li>
<li>API 5+ <code>&lt;uses-permission android:name="android.permission.GET_ACCOUNTS" /&gt;</code> or</li>
<li>API 14+ <code>&lt;uses-permission android:name="android.permission.READ_PROFILE" /&gt;</code> <code>&lt;uses-permission android:name="android.permission.READ_CONTACTS" /&gt;</code> (<a href="http://stackoverflow.com/questions/2112965/how-to-get-the-android-devices-primary-e-mail-address">How to get the Android device&#39;s primary e-mail address</a>)</li>
</ul></li>
<li><p><strong>User Phone Number - Software</strong></p>

<ul>
<li>Users could change phone numbers - HIGHLY unlikely</li>
<li><code>&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;</code></li>
</ul></li>
<li><p><strong>IMEI - Hardware</strong> (only phones, needs <strong><code>android.permission.READ_PHONE_STATE</code></strong>)</p>

<ul>
<li>Most users hate the fact that it says "Phone Calls" in the permission. Some users give bad ratings, because they believe you are simply stealing their personal information, when all you really want to do is track device installs. It is obvious that you are collecting data.</li>
<li><code>&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;</code></li>
</ul></li>
<li><p><strong>Android ID - Hardware</strong> (can be null, can change upon factory reset, can be altered on a rooted device)</p>

<ul>
<li>Since it can be 'null', we can check for 'null' and change its value, but this means it will no longer be unique.</li>
<li>If you have a user with a factory reset device, the value may have changed or altered on the rooted device so there may be duplicates entries if you are tracking user installs.</li>
</ul></li>
<li><p><strong>WLAN MAC Address - Hardware</strong> (needs <strong><code>android.permission.ACCESS_WIFI_STATE</code></strong>)</p>

<ul>
<li>This could be the second best option, but you are still collecting and storing a unique identifier that comes directly from a user. This is obvious that you are collecting data.</li>
<li><code>&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE "/&gt;</code></li>
</ul></li>
<li><p><strong>Bluetooth MAC Address - Hardware</strong> (devices with Bluetooth, needs <strong><code>android.permission.BLUETOOTH</code></strong>)</p>

<ul>
<li>Most applications on the market do not use Bluetooth, and so if your application doesn't use Bluetooth and you are including this, the user could become suspicious.</li>
<li><code>&lt;uses-permission android:name="android.permission.BLUETOOTH "/&gt;</code></li>
</ul></li>
<li><p><strong>Pseudo-Unique ID - Software</strong> (for all Android devices)</p>

<ul>
<li>Very possible, may contain collisions - See my method posted below!</li>
<li>This allows you to have an 'almost unique' ID from the user without taking anything that is private. You can create you own unanimous ID from device information.</li>
</ul></li>
</ul>

<hr>

<p>I know there isn't any 'perfect' way of getting a unique ID without using permissions; however, sometimes we only really need to do is track the device installation. When it comes to creating a unique ID, we can create a 'pseudo unique id' based solely off of information that the Android API gives us without using extra permissions. This way, we can show the user respect and try to offer a good user experience as well.</p>

<p>With a pseudo-unique id, you really only run into the fact that there may be duplicates based on the fact that there are similar devices. You can tweak the combined method to make it more unique; however, some developers need to track device installs and this will do the trick or performance based on similar devices.</p>

<h2>API => 9:</h2>

<p>If their Android device is API 9 or over, this is guaranteed to be unique because of the 'Build.SERIAL' field.</p>

<p><strong>REMEMBER</strong>, you are technically only missing out on around 0.5% of users <a href="http://developer.android.com/about/dashboards/index.html">who have API &lt; 9</a>. So you can focus on the rest: This is 99.5% of the users!</p>

<h2>API &lt; 9:</h2>

<p>If the user's Android device is lower than API 9; hopefully, they have not done a factory reset and their 'Secure.ANDROID_ID' will be preserved or not 'null'. (see <a href="http://developer.android.com/about/dashboards/index.html">http://developer.android.com/about/dashboards/index.html</a>)</p>

<h2>If all else fails:</h2>

<p>If all else fails, if the user does have lower than API 9 (lower than Gingerbread), has reset their device or 'Secure.ANDROID_ID' returns 'null', then simply the ID returned will be solely based off their Android device information. This is where the collisions can happen.</p>

<p>Changes:</p>

<ul>
<li>Removed 'Android.SECURE_ID' because of factory resets could cause the value to change</li>
<li>Edited the code to change on API</li>
<li>Changed the Pseudo</li>
</ul>

<p>Please take a look at the method below:</p>

<pre><code>/**
 * Return pseudo unique ID
 * @return ID
 */
public static String getUniquePsuedoID() {
    // If all else fails, if the user does have lower than API 9 (lower
    // than Gingerbread), has reset their device or 'Secure.ANDROID_ID'
    // returns 'null', then simply the ID returned will be solely based
    // off their Android device information. This is where the collisions
    // can happen.
    // Thanks http://www.pocketmagic.net/?p=1662!
    // Try not to use DISPLAY, HOST or ID - these items could change.
    // If there are collisions, there will be overlapping data
    String m_szDevIDShort = "35" + (Build.BOARD.length() % 10) + (Build.BRAND.length() % 10) + (Build.CPU_ABI.length() % 10) + (Build.DEVICE.length() % 10) + (Build.MANUFACTURER.length() % 10) + (Build.MODEL.length() % 10) + (Build.PRODUCT.length() % 10);

    // Thanks to @Roman SL!
    // http://stackoverflow.com/a/4789483/950427
    // Only devices with API &gt;= 9 have android.os.Build.SERIAL
    // http://developer.android.com/reference/android/os/Build.html#SERIAL
    // If a user upgrades software or roots their device, there will be a duplicate entry
    String serial = null;
    try {
        serial = android.os.Build.class.getField("SERIAL").get(null).toString();

        // Go ahead and return the serial for api =&gt; 9
        return new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();
    } catch (Exception exception) {
        // String needs to be initialized
        serial = "serial"; // some value
    }

    // Thanks @Joe!
    // http://stackoverflow.com/a/2853253/950427
    // Finally, combine the values we have found by using the UUID class to create a unique identifier
    return new UUID(m_szDevIDShort.hashCode(), serial.hashCode()).toString();
}
</code></pre>

<hr>

<h1>New(for apps with ads AND Google Play Services):</h1>

<p><strong>From the Google Play Developer's console:</strong></p>

<blockquote>
  <p>Beginning August 1st, 2014, the Google Play Developer Program Policy
  requires all new app uploads and updates to use the advertising ID in
  lieu of any other persistent identifiers for any advertising purposes.
  Learn more</p>
</blockquote>

<p><strong>Implementation</strong>:</p>

<p>Permission:</p>

<pre><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
</code></pre>

<p>Code:</p>

<pre><code>import com.google.android.gms.ads.identifier.AdvertisingIdClient;
import com.google.android.gms.ads.identifier.AdvertisingIdClient.Info;
import com.google.android.gms.common.GooglePlayServicesAvailabilityException;
import com.google.android.gms.common.GooglePlayServicesNotAvailableException;
import java.io.IOException;
...

// Do not call this function from the main thread. Otherwise, 
// an IllegalStateException will be thrown.
public void getIdThread() {

  Info adInfo = null;
  try {
    adInfo = AdvertisingIdClient.getAdvertisingIdInfo(mContext);

  } catch (IOException exception) {
    // Unrecoverable error connecting to Google Play services (e.g.,
    // the old version of the service doesn't support getting AdvertisingId).

  } catch (GooglePlayServicesAvailabilityException exception) {
    // Encountered a recoverable error connecting to Google Play services. 

  } catch (GooglePlayServicesNotAvailableException exception) {
    // Google Play services is not available entirely.
  }
  final String id = adInfo.getId();
  final boolean isLAT = adInfo.isLimitAdTrackingEnabled();
}
</code></pre>

<p><strong>Source/Docs:</strong></p>

<p><a href="http://developer.android.com/google/play-services/id.html">http://developer.android.com/google/play-services/id.html</a>
<a href="http://developer.android.com/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.html">http://developer.android.com/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient.html</a></p>

<h2>Important:</h2>

<blockquote>
  <p>It is intended that the advertising ID completely replace existing
  usage of other identifiers for ads purposes (such as use of ANDROID_ID
  in Settings.Secure) when Google Play Services is available. Cases
  where Google Play Services is unavailable are indicated by a
  GooglePlayServicesNotAvailableException being thrown by
  getAdvertisingIdInfo().</p>
</blockquote>

<h2>Warning, users can reset:</h2>

<p><a href="http://en.kioskea.net/faq/34732-android-reset-your-advertising-id">http://en.kioskea.net/faq/34732-android-reset-your-advertising-id</a></p>

<p>I have tried to reference every link that I took information from. If you are missing and need to be included, please comment!</p>

<h2>Google Player Services InstanceID</h2>

<p><a href="https://developers.google.com/instance-id/">https://developers.google.com/instance-id/</a></p>
