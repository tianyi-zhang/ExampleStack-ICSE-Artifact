<p>If you are looking for a way to achieve it without using an external library, the following code will help you.</p>

<pre><code>public static Map&lt;String, String&gt; splitQuery(URL url) throws UnsupportedEncodingException {
    Map&lt;String, String&gt; query_pairs = new LinkedHashMap&lt;String, String&gt;();
    String query = url.getQuery();
    String[] pairs = query.split("&amp;");
    for (String pair : pairs) {
        int idx = pair.indexOf("=");
        query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
    }
    return query_pairs;
}
</code></pre>

<p>You can access the returned Map using <code>&lt;map&gt;.get("client_id")</code>, with the URL given in your question this would return "SS".</p>

<p><strong>UPDATE</strong>  URL-Decoding added</p>

<p><strong>UPDATE</strong> As this answer is still quite popular, I made an improved version of the method above, which handles multiple parameters with the same key and parameters with no value as well.</p>

<pre><code>public static Map&lt;String, List&lt;String&gt;&gt; splitQuery(URL url) throws UnsupportedEncodingException {
  final Map&lt;String, List&lt;String&gt;&gt; query_pairs = new LinkedHashMap&lt;String, List&lt;String&gt;&gt;();
  final String[] pairs = url.getQuery().split("&amp;");
  for (String pair : pairs) {
    final int idx = pair.indexOf("=");
    final String key = idx &gt; 0 ? URLDecoder.decode(pair.substring(0, idx), "UTF-8") : pair;
    if (!query_pairs.containsKey(key)) {
      query_pairs.put(key, new LinkedList&lt;String&gt;());
    }
    final String value = idx &gt; 0 &amp;&amp; pair.length() &gt; idx + 1 ? URLDecoder.decode(pair.substring(idx + 1), "UTF-8") : null;
    query_pairs.get(key).add(value);
  }
  return query_pairs;
}
</code></pre>

<p><strong>UPDATE</strong> Java8 version</p>

<pre><code>public Map&lt;String, List&lt;String&gt;&gt; splitQuery(URL url) {
    if (Strings.isNullOrEmpty(url.getQuery())) {
        return Collections.emptyMap();
    }
    return Arrays.stream(url.getQuery().split("&amp;"))
            .map(this::splitQueryParameter)
            .collect(Collectors.groupingBy(SimpleImmutableEntry::getKey, LinkedHashMap::new, mapping(Map.Entry::getValue, toList())));
}

public SimpleImmutableEntry&lt;String, String&gt; splitQueryParameter(String it) {
    final int idx = it.indexOf("=");
    final String key = idx &gt; 0 ? it.substring(0, idx) : it;
    final String value = idx &gt; 0 &amp;&amp; it.length() &gt; idx + 1 ? it.substring(idx + 1) : null;
    return new SimpleImmutableEntry&lt;&gt;(key, value);
}
</code></pre>

<p>Running the above method with the URL â€œ<a href="http://stackoverflow.com?param1=value1&amp;param2=&amp;param3=value3&amp;param3">http://stackoverflow.com?param1=value1&amp;param2=&amp;param3=value3&amp;param3</a>?
returns this Map: {param1=["value1"], param2=[null], param3=["value3", null]}</p>
