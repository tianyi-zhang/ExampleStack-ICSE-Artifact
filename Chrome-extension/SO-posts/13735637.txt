<p>Finally get it work! From the initial code, I made those changes:</p>

<ul>
<li>I used short (0-255) as type for color, I changed it to float (0.0-1.0)</li>
<li>Instead of uploading separately data to buffer using glBufferSubData, I'd rather use glBufferData and consequently need to merge both color and position in one array.</li>
<li>Call flip() after creating a buffer object to make it ready for use.</li>
<li>Instead of calling <code>allocate(nbytes)</code> from the FloatBUffer class, it's better to create a new buffer from BufferUtils</li>
<li>Use <code>BufferUtil.SIZEOF_FLOAT</code> rather than <code>Float.SIZE</code></li>
</ul>

<p>Therefore I got a working code showing a rotating tetrahedron:</p>

<pre><code>public class GLRenderer implements GLEventListener {

int VBO, IBO;
FloatBuffer values;
ShortBuffer ind;
int nVertex;
double angleX = 0, angleZ = 0;

public void init(GLAutoDrawable drawable) {
    // Use debug pipeline
    // drawable.setGL(new DebugGL(drawable.getGL()));

    GL gl = drawable.getGL();
    System.err.println("INIT GL IS: " + gl.getClass().getName());

    // Enable VSync
    gl.setSwapInterval(1);
    gl.glEnable(GL.GL_DEPTH_TEST);

    // Setup the drawing area and shading mode
    gl.glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
    //gl.glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
    gl.glShadeModel(GL.GL_SMOOTH); // try setting this to GL_FLAT and see what happens.

    createBuffers(drawable);
}

public void reshape(GLAutoDrawable drawable, int x, int y, int width, int height) {
    GL gl = drawable.getGL();
    GLU glu = new GLU();

    if (height &lt;= 0) { // avoid a divide by zero error!

        height = 1;
    }
    final float h = (float) width / (float) height;
    gl.glViewport(0, 0, width, height);
    gl.glMatrixMode(GL.GL_PROJECTION);
    gl.glLoadIdentity();
    glu.gluPerspective(45.0f, h, 1.0, 20.0);
    glu.gluLookAt(3, 3, 3, 0, 0, 0, 0, 0, 1);
    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();
}

public void initDataBuffer(){
    float[] vertexArray = {
        0, 0, 1,
        -1, 0, 0,
        0, 1, 0,
        1, 0, 0,
        0, -1, 0            
    };
    int n1 = vertexArray.length;
    float[] colorArray ={
        1.0f, 0.0f, 0.0f,
        0.0f, 1.0f, 0.0f,
        0.0f, 0.0f, 1.0f,
        1.0f, 1.0f, 0.0f,
        1.0f, 1.0f, 1.0f
    };
    int n2 = colorArray.length;

    if(n1!=n2){
        System.err.println("Color and vertex do not match in size");
        System.exit(-1);
    }

    nVertex = (int)(n1/3);

    short[] indexArray = {
        0, 1, 2,
        0, 2, 3,
        0, 3, 4,
        0, 1, 4,
        1, 2, 3,
        1, 3, 4
    };
    ind = BufferUtil.newShortBuffer(indexArray.length);
    ind.put(indexArray);
    ind.flip();

    values = BufferUtil.newFloatBuffer(vertexArray.length+colorArray.length);
    values.put(vertexArray);
    values.put(colorArray);
    values.flip();
}

public void createBuffers(GLAutoDrawable drawable){
    initDataBuffer();

    GL gl = drawable.getGL();
    int[] temp = new int[2];
    gl.glGenBuffers(2, temp, 0);

    VBO = temp[0];
    gl.glBindBuffer(GL.GL_ARRAY_BUFFER, VBO);
    gl.glBufferData(GL.GL_ARRAY_BUFFER, values.capacity() * BufferUtil.SIZEOF_FLOAT,
                        values, GL.GL_STATIC_DRAW);
    gl.glBindBuffer(GL.GL_ARRAY_BUFFER, 0);

    IBO = temp[1];
    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, IBO);
    gl.glBufferData(GL.GL_ELEMENT_ARRAY_BUFFER, ind.capacity() * BufferUtil.SIZEOF_SHORT,
                        ind, GL.GL_STATIC_DRAW);
    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, 0);
}

public void display(GLAutoDrawable drawable) {

    GL gl = drawable.getGL();

    gl.glClear( GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT );

    gl.glMatrixMode(GL.GL_MODELVIEW);
    gl.glLoadIdentity();

    gl.glRotated(angleZ,0,0,1);
    gl.glRotated(angleX,1,0,0);

    gl.glEnableClientState(GL.GL_VERTEX_ARRAY);
    gl.glEnableClientState(GL.GL_COLOR_ARRAY);
    gl.glBindBuffer(GL.GL_ARRAY_BUFFER, VBO);
    gl.glVertexPointer(3, GL.GL_FLOAT, 0, 0);
    gl.glColorPointer(3, GL.GL_FLOAT, 0, nVertex*3*BufferUtil.SIZEOF_FLOAT);
    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, IBO);
    gl.glDrawElements(GL.GL_TRIANGLES, ind.capacity(), GL.GL_UNSIGNED_SHORT, 0);

    gl.glDisableClientState(GL.GL_VERTEX_ARRAY);
    gl.glDisableClientState(GL.GL_COLOR_ARRAY);

    angleX += 1;
    angleZ += 1;

    // Flush all drawing operations to the graphics card
    gl.glFlush();
}

public void displayChanged(GLAutoDrawable drawable, boolean modeChanged, boolean deviceChanged) {
}
</code></pre>

<p>}</p>
