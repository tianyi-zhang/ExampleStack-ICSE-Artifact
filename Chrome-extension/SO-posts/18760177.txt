<p>You can set a credentials provider either at the client level if you want it to be shared by all requests by default</p>

<pre><code>    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
    CloseableHttpAsyncClient httpclient = HttpAsyncClients.custom()
            .setDefaultCredentialsProvider(credentialsProvider)
            .build();
    httpclient.start();
    try {
        HttpGet request = new HttpGet("http://www.apache.org/");
        Future&lt;HttpResponse&gt; future = httpclient.execute(request, null);
        HttpResponse response = future.get();
        System.out.println("Response: " + response.getStatusLine());
        System.out.println("Shutting down");
    } finally {
        httpclient.close();
    }
    System.out.println("Done");
</code></pre>

<p>or set it at the request level, if you want it to apply to a particular request only</p>

<pre><code>    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
    CloseableHttpAsyncClient httpclient = HttpAsyncClients.createDefault();
    httpclient.start();
    try {
        HttpGet request = new HttpGet("http://www.apache.org/");
        HttpClientContext context = HttpClientContext.create();
        context.setCredentialsProvider(credentialsProvider);
        Future&lt;HttpResponse&gt; future = httpclient.execute(request, context, null);
        HttpResponse response = future.get();
        System.out.println("Response: " + response.getStatusLine());
        System.out.println("Shutting down");
    } finally {
        httpclient.close();
    }
    System.out.println("Done");
</code></pre>

<p>Please also note that <code>Malformed challenge: Authentication challenge is empty</code> warning is likely caused by the server sending a malformed (empty) auth challenge rather than HttpClient configuration. Providing user credentials for the request may not necessarily resolve the issue.</p>
