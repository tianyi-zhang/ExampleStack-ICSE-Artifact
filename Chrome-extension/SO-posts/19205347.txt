<p>One approach is to <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" rel="nofollow"><em>nest</em></a> <code>ColorAction</code> as an <em>inner class</em> in <code>ButtonPanel</code>, where it has implicit access to the enclosing panel.</p>

<p>Addendum: As noted in comments by @Andrew Thompson and @nachokk, the implicit accessibility can be made explicit by qualifying <code>this</code> using the enclosing class name. See <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.8.4" rel="nofollow"><em>JLS ยง15.8.4. Qualified</em> <code>this</code></a> for details. In this example, these two invocations are equivalent:</p>

<pre><code> setBackground(backgroundColor);
 ButtonPanel.this.setBackground(backgroundColor);
</code></pre>

<p>As an more general alternative, consider encapsulating the target panel and color in an <code>Action</code>, as outlined <a href="http://stackoverflow.com/a/16445050/230513">here</a>.</p>

<p><img src="http://i.stack.imgur.com/kM0rr.png" alt="image"></p>

<pre><code>class ButtonPanel extends JPanel {

    public ButtonPanel() {
        JButton yellowButton = new JButton("Yellow");
        JButton blueButton = new JButton("Blue");
        JButton redButton = new JButton("Red");

        add(yellowButton);
        add(blueButton);
        add(redButton);

        ColorAction yellowAction = new ColorAction(Color.YELLOW);
        ColorAction redAction = new ColorAction(Color.RED);
        ColorAction blueAction = new ColorAction(Color.BLUE);

        yellowButton.addActionListener(yellowAction);
        blueButton.addActionListener(blueAction);
        redButton.addActionListener(redAction);
    }

    private class ColorAction implements ActionListener {

        public ColorAction(Color c) {
            backgroundColor = c;
        }

         @Override
         public void actionPerformed(ActionEvent event) {
            setBackground(backgroundColor);
        }
        private Color backgroundColor;
    }
}
</code></pre>
