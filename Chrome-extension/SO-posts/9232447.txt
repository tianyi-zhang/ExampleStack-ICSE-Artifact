<p>EDIT: now that I understand the question here is what I propose. First note that insert sort has sqare(O(n^2)) complexity so another computation of the same complexity will not change the overall complexity of the algorithm. So here is what you do - first you compute the values in arrList2 by traversing all values on the left of the current element and search for the first one greater then the current element. The second phase is simply the sorting algorithm - as you already pointed out arrList1 holds the sorted A. The whole thing could be implemented with better complexity but not using insert sort.</p>

<pre><code>public static ArrayList&lt;Integer&gt; arrList1 = new ArrayList&lt;Integer&gt;();
public static ArrayList&lt;Integer&gt; arrList2 = new ArrayList&lt;Integer&gt;();
...
public static void insertSort(int[] A){
  for (int i = 0; i &lt; A.length; ++i) {
    boolean found_greater = false;
    for (int j = i - 1; j &gt;= 0; --j) {
      if (A[j] &gt; A[i]) {
        found_greater = true;
        arrList2.add(A[j]);
        break;
      }
    }
    if (!found_greater) {
      arrList2.add(A[i]);
    }
  }

  for(int i = 1; i &lt; A.length; i++){
    int value = A[i];
    int j = i - 1;
    while(j &gt;= 0 &amp;&amp; A[j] &gt; value){
      A[j + 1] = A[j];
      j = j - 1;
    }

    arrList1.add(A[i]);
    A[j + 1] = value;
  }
}
</code></pre>
