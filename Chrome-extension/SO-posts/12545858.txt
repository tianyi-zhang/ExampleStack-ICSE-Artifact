<p>You will not get the results until the AsyncTask is done. </p>

<p>So, even though, the control is moved to the line <code>xml = funct.getXML();</code>, and this line is executed, this does not mean that the AsyncTask is done.</p>

<p>Your results will be available when <code>doInBackground</code> returns and in your AsyncTask override the function <code>onPostExecute</code> and report results back to the caller.</p>

<p>Implement a listener in such a way:</p>

<pre><code>package foo.bar.quux;

import java.io.IOException;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import android.os.AsyncTask;


public class XMLfunctions {

    public interface ListenerToXML {
            public void AsyncTaskDone();
    }
    ListenerToXML mListener;
    public void setListener(ListenerToXML listener) {
        mListener = listener;
    }
    int numResults;
    NodeList nodes;
    Document doc;
    static ServiceTasks task;
    String line;
    public final static Document XMLfromString(String xml){

        Document doc = null;

        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        try {

            DocumentBuilder db = dbf.newDocumentBuilder();

            InputSource is = new InputSource();
            is.setCharacterStream(new StringReader(xml));
            doc = db.parse(is); 

        } catch (ParserConfigurationException e) {
            System.out.println("XML parse error: " + e.getMessage());
            return null;
        } catch (SAXException e) {
            System.out.println("Wrong XML file structure: " + e.getMessage());
            return null;
        } catch (IOException e) {
            System.out.println("I/O exeption: " + e.getMessage());
            return null;
        }

        return doc;

    }


     private class ServiceTasks extends AsyncTask&lt;Void, Void, Void&gt; {

            @Override
            protected Void doInBackground(Void... urls) {

                            try {

                                    DefaultHttpClient httpClient = new DefaultHttpClient();
                                    HttpPost httpPost = new HttpPost("http://10.0.2.2/example.xml");

                                    HttpResponse httpResponse = httpClient.execute(httpPost);
                                    HttpEntity httpEntity = httpResponse.getEntity();
                                    line = EntityUtils.toString(httpEntity);

                                } catch (UnsupportedEncodingException e) {
                                    line = "&lt;results status=\"error\"&gt;&lt;msg&gt;Can't connect to server&lt;/msg&gt;&lt;/results&gt;";
                                } catch (MalformedURLException e) {
                                    line = "&lt;results status=\"error\"&gt;&lt;msg&gt;Can't connect to server&lt;/msg&gt;&lt;/results&gt;";
                                } catch (IOException e) {
                                    line = "&lt;results status=\"error\"&gt;&lt;msg&gt;Can't connect to server&lt;/msg&gt;&lt;/results&gt;";
                                }
                            return null;


            }
@Override
protected void onPostExecute(Void result) {
    if(mListener!=null)
        mListener.AsyncTaskDone();
    }


        } 

     public String getXML(){     

         return line;
    }

     public void executeXML(){
         task = new ServiceTasks();
         task.execute();
     }


}




  public class Main extends ListActivity implements ListenerToXML {

         String xml;
         static XMLfunctions funct;
    @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.listofcategories);
            funct = new XMLfunctions();
            funct.setListener(this);
            funct.executeXML();
.
.
.
}


            public void AsyncTaskDone() {
               //here you can get the results
            xml = funct.getXML();
            }
</code></pre>
