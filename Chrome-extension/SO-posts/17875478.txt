<p>Doing your way can work ok. But you must be aware that if you have something to change in your appli or juste add a fonctionnality, that will be hard since all the code is centered at the same place (if someone else has to modify your code it ll be painfull too ...)</p>

<p>Exemple : your can have a <strong>JsonParser</strong> class that get tue json stream over the network</p>

<pre><code>public class JSONParser {
    /**
     * PRIVATE ATTRIBUTES
     */
    // log
    private static final String TAG     = JSONParser.class.getSimpleName();
    //
    static InputStream          is      = null;
    static JSONObject           jObj    = null;
    static String               json    = "";

    public JSONParser() {

    }

    public JSONObject getJSONFromUrl(String url) {

        try {
            // defaultHttpClient
            DefaultHttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(url);
            HttpResponse httpResponse = httpClient.execute(httpPost);
            HttpEntity httpEntity = httpResponse.getEntity();
            is = httpEntity.getContent();
        }
        catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        catch (ClientProtocolException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "utf-8"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            json = sb.toString();
        }
        catch (Exception e) {
            Log.e(TAG, "Error converting result " + e.toString());
        }
        try {
            jObj = new JSONObject(json);
        }
        catch (JSONException e) {
            Log.e(TAG, "Error parsing data " + e.toString());
        }
        return jObj;
    }
}
</code></pre>

<p>Then your <strong>objects</strong> that ONLY must descibe (human, cat, contact, ...) and do some intern work.</p>

<p>To finish you can create class that manage the objects, convert then from/to json ... and so</p>

<p>The download should be held in some <strong>other thread</strong> (service, asynctask, loader, .. etc) in the adapter you should only use the data that are downloaded, converted to object, stored and ready. And do not store json datas unless you have specific needs. Convert them to usable data before storing them</p>
