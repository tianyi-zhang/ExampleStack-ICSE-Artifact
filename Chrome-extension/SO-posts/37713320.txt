<p>If you always want to get the current activity from anywhere in the app you can register an ActivityLifecycleCallback on your Application instance. </p>

<p>Here's an untested implementation that might get you closer. </p>

<pre><code>public class TestApp extends Application {

    private WeakReference&lt;Activity&gt; mActivity = null;

    @Override
    public void onCreate() {
        super.onCreate();
        registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks() {
            @Override
            public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                mActivity = new WeakReference&lt;Activity&gt;(activity);
            }

            @Override
            public void onActivityDestroyed(Activity activity) {
                mActivity.clear();
            }

            /** Unused implementation **/
            @Override
            public void onActivityStarted(Activity activity) {}

            @Override
            public void onActivityResumed(Activity activity) {}
            @Override
            public void onActivityPaused(Activity activity) {}

            @Override
            public void onActivityStopped(Activity activity) {}

            @Override
            public void onActivitySaveInstanceState(Activity activity, Bundle outState) {}
        });
    }

    public Activity getCurrentActivity() {
        return mActivity.get();
    }

}
</code></pre>

<p>Then to use this throughout your app you would do some call like this ...</p>

<pre><code>Activity activity = ((TestApp)getApplicationContext()).getCurrentActivity(); 
</code></pre>

<p>The advantages are you can always keep track of your current activity, however its a little too overkill for just handling Dialogs from within the Activity.</p>
