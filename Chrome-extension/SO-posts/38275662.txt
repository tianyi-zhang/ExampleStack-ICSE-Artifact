<p>You can populate your List by iterating your 2 Arrays and add the Strings to the Bean Objects.</p>

<p>Example:</p>

<pre><code> private List&lt;Bean&gt; populateBeanList(List&lt;Bean&gt; myList, String[] descArray, String[] photoArray){

     for(int i=0; i&lt; descArray.length; i++){

      Bean bean = new Bean();
      bean.setText(descArray[i]);
      bean.setUrl(photoArray[i]);
      myList.Add(bean);
     }

   return myList;
} 
</code></pre>

<p>Then call the function in your Async Class</p>

<pre><code>    private class MyTask extends AsyncTask&lt;String, String, String&gt; {
    @Override
    protected String doInBackground(String... params) {

        String content = HttpManager.getData(params[0]);
        return content;
    }




//-----------------------THIS IS WHERE THE ISSUE IS HAPPENING---------------------------
    @Override
    protected void onPostExecute(String result) {
        hideDialog();
        String parseResult = InfoJSONResultParser.parseFeed(result);

        importerArray = OrderInformationParser.orderParser(result);

        if (parseResult.equals("ok")) {
            //Returns the Array with the JSON info already parsed.
            List&lt;Bean&gt; myList = new ArrayList&lt;&gt;(); //&lt;---***How to populate this***




//***With  the information from these two String arrays.***
            String[] descriptionArray = OrderInformationParser.orderParser(result);
            String[] photoArray = PhotoParser.photoParser(result);

        myList = populateBeanList(myList,descriptionArray, photoArray);

        //This creates and executes the list
        list = (ListView)findViewById(R.id.orderListView);


        //***So i can then transfer over to this adapter***
        MyAdapter adapter = new MyAdapter(MainActivity.this, myList);
        list.setAdapter(adapter);


    } else {
        findViewById(R.id.nullOrders).setVisibility(View.VISIBLE);
    }
}
</code></pre>

<p>}</p>

<p>Update:</p>

<pre><code>public class MyAdapter extends BaseAdapter {
private Activity activity;
private List&lt;Bean&gt; mList;
private static LayoutInflater inflater;

public MyAdapter(Activity act,List&lt;Bean&gt; list){
    activity=act;
    mList=list;
    inflater = (LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
}

@Override
public int getCount() {
    return mList.size();
}

@Override
public Object getItem(int position) {
    return mList.get(position);
}

@Override
public long getItemId(int position) {
    return position;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {

    ViewHolder holder;
    //use converview recycle
    if(convertView==null){
        convertView = inflater.inflate(R.layout.content_orders, null);
        holder=new ViewHolder();
        holder.textView= (TextView) convertView.findViewById(R.id.textView2);
        holder.imageView= (ImageView) convertView.findViewById(R.id.imageView2);
        convertView.setTag(holder);
    }else{
        holder = (ViewHolder) convertView.getTag();
    }

    //set text and url
    holder.textView.setText(mList.get(position).getText());
    Picasso.with(activity).load(mList.get(position).getUrl()).into(holder.imageView);

    return convertView;
}

class ViewHolder{
    TextView textView;
    ImageView imageView;

}
}
</code></pre>
