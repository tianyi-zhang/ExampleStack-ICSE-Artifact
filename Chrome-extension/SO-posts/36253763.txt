<p>This is one possible way to do it, following your approach of implementing <code>AbstractPropertyEditor</code> with a <code>CheckComboBox</code> control.</p>

<p>Based on the <code>HelloCheckComboBox</code>, I've created this sample, using a <code>Person</code> class, a <code>Musicians</code> bean, and the custom editor.</p>

<p><strong>Person</strong></p>

<pre><code>public static class Person {

    private final StringProperty firstname = new SimpleStringProperty();
    private final StringProperty lastname = new SimpleStringProperty();
    private final ReadOnlyStringWrapper fullName = new ReadOnlyStringWrapper();

    public Person(String firstname, String lastname) {
        this.firstname.set(firstname);
        this.lastname.set(lastname);
        fullName.bind(Bindings.concat(firstname, " ", lastname));
    }

    public static final ObservableList&lt;Person&gt; createDemoList() {
        final ObservableList&lt;Person&gt; result = FXCollections.observableArrayList();
        result.add(new Person("Paul", "McCartney"));
        result.add(new Person("Andrew Lloyd", "Webber"));
        result.add(new Person("Herb", "Alpert"));
        result.add(new Person("Emilio", "Estefan"));
        result.add(new Person("Bernie", "Taupin"));
        result.add(new Person("Elton", "John"));
        result.add(new Person("Mick", "Jagger"));
        result.add(new Person("Keith", "Richerds"));
        return result;
    }

    public final StringProperty firstnameProperty() {
        return this.firstname;
    }

    public final java.lang.String getFirstname() {
        return this.firstnameProperty().get();
    }

    public final void setFirstname(final String firstname) {
        this.firstnameProperty().set(firstname);
    }

    public final StringProperty lastnameProperty() {
        return this.lastname;
    }

    public final String getLastname() {
        return this.lastnameProperty().get();
    }

    public final void setLastname(final String lastname) {
        this.lastnameProperty().set(lastname);
    }

    public final ReadOnlyStringProperty fullNameProperty() {
        return this.fullName.getReadOnlyProperty();
    }

    public final String getFullName() {
        return this.fullNameProperty().get();
    }

    @Override
    public String toString() {
        return getFullName(); 
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 79 * hash + Objects.hashCode(this.firstname);
        hash = 79 * hash + Objects.hashCode(this.lastname);
        hash = 79 * hash + Objects.hashCode(this.fullName);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Person other = (Person) obj;
        if (!Objects.equals(getFirstname(), other.getFirstname())) {
            return false;
        }
        if (!Objects.equals(getLastname(), other.getLastname())) {
            return false;
        }
        return Objects.equals(this.getFullName(), other.getFullName());
    }

}
</code></pre>

<p><strong>Musicians</strong></p>

<p>This class contains a <code>StringProperty</code> field that will be edited with a <code>TextField</code>, and a <code>ListProperty&lt;Person&gt;</code> field, that will be edited with a <code>CheckComboBox&lt;Person&gt;</code> control:</p>

<pre><code>public static class Musicians {

    private final StringProperty category = new SimpleStringProperty();
    private final ListProperty&lt;Person&gt; persons = new SimpleListProperty&lt;&gt;(FXCollections.observableArrayList());

    public Musicians() { }

    public String getCategory() {
        return category.get();
    }

    public void setCategory(String category) {
        this.category.set(category);
    }

    public StringProperty categoryProperty() {
        return category;
    }

    public void setPersons(ObservableList&lt;Person&gt; value) {
        this.persons.set(value);
    }

    public ObservableList&lt;Person&gt; getPersons() {
        return persons.get();
    }

    public ListProperty&lt;Person&gt; personsProperty() {
        return persons;
    }
}
</code></pre>

<p><strong>CustomPropertyEditorFactory</strong></p>

<p>Now we provide our own <code>PropertyEditorFactory</code>, making use of the same text editor as the <code>DefaultEditorFactory</code> for the String fields, and adding the <code>CheckComboBox</code> implementation.</p>

<p>Note that we have to populate the <code>CheckComboBox</code> list of items, and this will be done in this case with <code>Person.createDemoList()</code>.  </p>

<pre><code>public class CustomPropertyEditorFactory implements Callback&lt;Item, PropertyEditor&lt;?&gt;&gt; {

    @Override public PropertyEditor&lt;?&gt; call(Item item) {
        Class&lt;?&gt; type = item.getType();

        if (type == String.class) {
            return createTextEditor(item);  
        }

        if (type != null &amp;&amp; type == javafx.collections.ObservableList.class) {
            return createCheckComboBoxEditor(item, Person.createDemoList());
        }

        return null; 
    }

    public final PropertyEditor&lt;?&gt; createTextEditor(PropertySheet.Item property) {

        return new AbstractPropertyEditor&lt;String, TextField&gt;(property, new TextField()) {

            @Override protected StringProperty getObservableValue() {
                return getEditor().textProperty();
            }

            @Override public void setValue(String value) {
                getEditor().setText(value);
            }
        };
    }

    public final &lt;T&gt; PropertyEditor&lt;?&gt; createCheckComboBoxEditor(PropertySheet.Item property, final Collection&lt;T&gt; choices) {

        return new AbstractPropertyEditor&lt;ObservableList&lt;T&gt;, CheckComboBox&lt;T&gt;&gt;(property, new CheckComboBox&lt;&gt;()) {

            private ListProperty&lt;T&gt; list;

            { 
                getEditor().getItems().setAll(choices);
            } 

            @Override
            protected ListProperty&lt;T&gt; getObservableValue() {
                if (list == null) {
                    list = new SimpleListProperty&lt;&gt;(getEditor().getCheckModel().getCheckedItems());
                }
                return list;
            }

            @Override
            public void setValue(ObservableList&lt;T&gt; checked) {
                checked.forEach(getEditor().getCheckModel()::check);
            }
        };
    }
}
</code></pre>

<p>Finally, we can make use of this custom factory in our application:</p>

<pre><code>@Override
public void start(Stage primaryStage) {

    PropertySheet propertySheet = new PropertySheet();

    propertySheet.setPropertyEditorFactory(new CustomPropertyEditorFactory());

    Musicians address = new Musicians();

    // 1: set initial selected values:
    address.getPersons().add(new Person("Paul", "McCartney"));

    // 2: listen to changes in selection:
    address.personsProperty().addListener((ors, ov, nv) -&gt; {
        System.out.println("Selected persons:");
        nv.forEach(System.out::println);
    });

    propertySheet.getItems().setAll(BeanPropertyUtils.getProperties(address));

    Scene scene = new Scene(propertySheet, 500, 500);
    primaryStage.setScene(scene);
    primaryStage.show();
}
</code></pre>

<p><a href="http://i.stack.imgur.com/JACrp.png" rel="nofollow"><img src="http://i.stack.imgur.com/JACrp.png" alt="checkcombobox"></a></p>
