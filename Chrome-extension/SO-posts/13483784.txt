<p>have you thought about using bitmap options to import smaller images that take up less image data? If you have high res images (eg. camera photos) it is never necessary to show users the full image resolution. </p>

<p>try doing this before you import the bitmap</p>

<pre><code>Options options = new Options();            
options.inJustDecodeBounds = true;

BitmapFactory.decodeFile(context.getAssets().open("view1_background.png"), options);

options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

Log.i(getClass().getSimpleName(), 
            "height: " + options.outHeight +
            "\nwidth: " + options.outWidth +
            "\nmimetype: " + options.outMimeType +
            "\nsample size: " + options.inSampleSize);

options.inJustDecodeBounds = false;

mBmp[background] = BitmapFactory.decodeStream(context.getAssets().open("view1_background.png"));
</code></pre>

<p>where in sample size is determined by the following:</p>

<pre><code>public static int calculateInSampleSize( Options options, int reqWidth, int reqHeight) 
{
    // Raw height and width of image
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    while (height / inSampleSize &gt; reqHeight || width / inSampleSize &gt; reqWidth) 
    {
        if (height &gt; width)
        {
            inSampleSize = height / reqHeight;
            if (((double)height % (double)reqHeight) != 0) 
            {
                inSampleSize++;
            }
        } 
        else 
        {
            inSampleSize = width / reqWidth;
            if (((double)width % (double)reqWidth) != 0) 
            {
                inSampleSize++;
            }
        }
    }
    return inSampleSize;
}
</code></pre>
