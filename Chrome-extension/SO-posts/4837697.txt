<p><strong>Shell sort</strong> improves insertion sort by comparing elements separated by a gap of several positions. </p>

<p>This lets an element take "bigger steps" toward its expected position. Multiple passes over the data are taken with smaller and smaller gap sizes. The last step of Shell sort is a plain insertion sort, but by then, the array of data is guaranteed to be almost sorted.</p>

<p>This code might help you in understanding the logic better.</p>

<pre><code>package Sorts;
public class ShellSort extends Sorter{

@Override
public &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a) {
    int h = 1;
    while((h*3+1) &lt; a.length)
        h = 3*h+1;
    while(h &gt; 0){
        for(int i = h-1; i &lt; a.length; i++){
            T s = a[i];
            int j = i;
            for(j = i; (j&gt;=h) &amp;&amp; (a[j-h].compareTo(s) &gt; 0); j-=h)
                a[j] = a[j-h];
            a[j] = s;
        }
        h /= 3;
    }
}
}
</code></pre>
