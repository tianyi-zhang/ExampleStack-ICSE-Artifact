<p>There's no way to set time to something other than current time in <code>AnalogClock</code>. This widget is very encapsulated. You can easily change how it looks (in XML using attributes from <a href="http://developer.android.com/reference/android/R.styleable.html#AnalogClock_dial" rel="nofollow">R.styleable</a>, but there's no easy way to change its behavior.</p>

<p>I'd probably go with making copy of <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/widget/AnalogClock.java" rel="nofollow">AnalogClock.java</a> (might be a good idea to put it in separate package, e.g. <code>com.example.widget</code>) and local copies of drawables <a href="https://github.com/android/platform_frameworks_base/blob/master/core/res/res/drawable-hdpi/clock_dial.png" rel="nofollow">clock_dial</a>, <a href="https://github.com/android/platform_frameworks_base/blob/master/core/res/res/drawable-hdpi/clock_hand_hour.png" rel="nofollow">clock_hand_hour</a>, <a href="https://github.com/android/platform_frameworks_base/blob/master/core/res/res/drawable-hdpi/clock_hand_minute.png" rel="nofollow">clock_hand_minute</a> (NOTE: to get best results you'll have to create local copies for all densities: <a href="https://github.com/android/platform_frameworks_base/tree/master/core/res/res/drawable-ldpi" rel="nofollow">ldpi</a>, <a href="https://github.com/android/platform_frameworks_base/tree/master/core/res/res/drawable-mdpi" rel="nofollow">mdpi</a>, <a href="https://github.com/android/platform_frameworks_base/tree/master/core/res/res/drawable-hdpi" rel="nofollow">hdpi</a> and <a href="https://github.com/android/platform_frameworks_base/tree/master/core/res/res/drawable-xhdpi" rel="nofollow">xhdpi</a>). With these in place and small changes to code, you'll be able to get the bahavior you want.</p>

<h2>Using custom drawables WITH attributes settable from XML layout</h2>

<p>To be able to set <code>dial</code>, <code>hand_hour</code> and <code>hand_minute</code> drawables from XML layout files, you need to declare those attributes as styleable for your custom widget.</p>

<p><strong>NOTE:</strong> In following example I've created <code>TimeSettableAnalogClock</code> and placed it in <code>com.example.widget</code> package.</p>

<p>Create <code>res/values/attrs.xml</code> file with following content:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;declare-styleable name="TimeSettableAnalogClock"&gt;        
        &lt;attr name="dial" format="reference"/&gt;
        &lt;attr name="hand_hour" format="reference"/&gt;
        &lt;attr name="hand_minute" format="reference"/&gt;
    &lt;/declare-styleable&gt;
&lt;/resources&gt;
</code></pre>

<p><code>format=reference</code> means that values can only be references to other existing elements, e.g. drawables (<code>@drawable/some_custom_dial</code>).</p>

<p>Now custom attributes can be used in XML layout file:</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:custom="http://schemas.android.com/apk/lib/com.example.widget"
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;

    &lt;com.example.widget.TimeSettableAnalogClock
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"        
        custom:dial="@drawable/some_custom_clock_dial"
        custom:hand_hour="@drawable/some_custom_clock_hand_hour"
        custom:hand_minute="@drawable/some_custom_clock_hand_minute"/&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>Finally, you'll need to handle these custom attributes when <code>TimeSettableAnalogClock</code> object is created:</p>

<pre><code>public TimeSettableAnalogClock(Context context, AttributeSet attrs,
                   int defStyle) {
    super(context, attrs, defStyle);
    Resources r = getContext().getResources();
    TypedArray a =
            context.obtainStyledAttributes(
                    attrs, R.styleable.TimeSettableAnalogClock, defStyle, 0);

    mDial = a.getDrawable(R.styleable.TimeSettableAnalogClock_dial);
    if (mDial == null) {
        mDial = r.getDrawable(R.drawable.clock_dial);
    }

    mHourHand = a.getDrawable(R.styleable.TimeSettableAnalogClock_hand_hour);
    if (mHourHand == null) {
        mHourHand = r.getDrawable(R.drawable.clock_hand_hour);
    }

    mMinuteHand = a.getDrawable(R.styleable.TimeSettableAnalogClock_hand_minute);
    if (mMinuteHand == null) {
        mMinuteHand = r.getDrawable(R.drawable.clock_hand_minute);
    }

    mCalendar = new Time();

    mDialWidth = mDial.getIntrinsicWidth();
    mDialHeight = mDial.getIntrinsicHeight();
}
</code></pre>

<p>Note, I've pretty much only removed <code>com.android.internal.</code> from reference to any <em>drawable</em> or <em>styleable</em>. The rest is the same as in <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/widget/AnalogClock.java#L66" rel="nofollow">AnalogClock constructor</a>.</p>

<h2>Using custom drawables WITHOUT attributes settable from XML layout</h2>

<p>If you don't need your attributes to be settable through XML (e.g. all your analog clock will look the same in every place), you can simply the solution. You'll only need local copies of drawables (as mentioned at the beginning), no <code>attrs.xml</code> file is needed. Your constructor should look like this:</p>

<pre><code>public TimeSettableAnalogClock(Context context, AttributeSet attrs,
                   int defStyle) {
    super(context, attrs, defStyle);
    Resources r = getContext().getResources();

    mDial = r.getDrawable(R.drawable.clock_dial);
    mHourHand = r.getDrawable(R.drawable.clock_hand_hour);
    mMinuteHand = r.getDrawable(R.drawable.clock_hand_minute);

    mCalendar = new Time();

    mDialWidth = mDial.getIntrinsicWidth();
    mDialHeight = mDial.getIntrinsicHeight();
}
</code></pre>

<p>As you can see, much shorter. The usage in XML layout is the same, but you won't need <code>xmlns:custom</code> part, and of course you can't set custom attributes anymore:</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;

    &lt;com.example.widget.TimeSettableAnalogClock
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"/&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p><strong>I can update my answer further with more code of proposed solution, if you need more help on this one.</strong></p>
