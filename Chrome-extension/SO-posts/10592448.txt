<p>You can use the alternate method signature for <a href="http://docs.oracle.com/javase/1.4.2/docs/api/java/io/File.html#listFiles%28java.io.FilenameFilter%29" rel="nofollow">File.listFiles(FilenameFilter filter)</a> to simplify your code:</p>

<pre><code>File[] files = dir.listFiles(new FilenameFilter() {

    @Override
    public boolean accept(File dir, String name) {
        return name.toLowerCase().endsWith(".txt");
    }
});
</code></pre>

<p>And unless you really enjoy writing loops, you don't even need to manually loop over the array to convert it to a <code>List</code>:</p>

<pre><code>List&lt;File&gt; lstRecords = Arrays.asList(files);
</code></pre>

<p>Your <code>displayRecord</code> method was pretty close; you just needed to pass the file as an argument and use that instead of a hard-coded filename, and you needed to initialize <code>dis</code>.</p>

<p>Putting it all together:</p>

<pre><code>package com.example.file;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class FileExample {

    public static List&lt;File&gt; listRecords(File dir) {
        File[] files = dir.listFiles(new FilenameFilter() {

            @Override
            public boolean accept(File dir, String name) {
                return name.toLowerCase().endsWith(".txt");
            }
        });

        return Arrays.asList(files);
    }

    public static void displayRecord(File file) {
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        DataInputStream dis = null;

        try {
            fis = new FileInputStream(file);

            // Here BufferedInputStream is added for fast reading.
            bis = new BufferedInputStream(fis);
            dis = new DataInputStream(bis);

            String line = dis.readLine();
            while (line != null) {

                // this statement reads the line from the file and print it to
                // the console.
                System.out.println(line);
                line = dis.readLine();
            }

            // dispose all the resources after using them.
            fis.close();
            bis.close();
            dis.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {

        List&lt;File&gt; lstRecords = listRecords(new File("."));
        for (File record : lstRecords) {
            displayRecord(record);
        }
    }

}
</code></pre>

<p>It's also better to use Reader/Writer instead of InputStream/OutputStream if you're working with text files, and you should close your files in the <code>finally</code> block to avoid a potential resource leak.</p>

<p>You'll also notice I didn't explicitly use an <code>ArrayList</code>.  In most cases, it's better to program against the interface (in this case, <code>List</code>) as much as possible, and only declare variables using the implementing class when you need to use a method that's only available to that class.</p>
