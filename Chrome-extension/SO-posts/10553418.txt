<p>Dependent on the <em>environment</em> in which your application is (<em>Standalone</em>, <em>ApplicationServer</em>), you will need to use the <strong>appropriate</strong> <code>ClassLoader</code>.</p>

<p>If you can have a utility class, <code>Utils</code>, you can try something like this:</p>

<pre><code>/* Returns a instance of InputStream for the resource */
public static InputStream getResourceAsStream(String resource) 
                                                   throws FileNotFoundException {
    String stripped = resource.startsWith("/")?resource.substring(1):resource;
    InputStream stream = null;
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    if (classLoader != null) {
        stream = classLoader.getResourceAsStream(stripped);
    }
    if (stream == null) {
        stream = Utils.class.getResourceAsStream(resource);
    }
    if (stream == null) {
        stream = Utils.class.getClassLoader().getResourceAsStream(stripped);
    }
    if (stream == null) {
        throw new FileNotFoundException("Resource not found: " + resource);
    }
    return stream;
}
</code></pre>

<p>For use:</p>

<pre><code>Utils.getResourceAsStream("com/company/project/png/serial-port-32x32.png");
</code></pre>
