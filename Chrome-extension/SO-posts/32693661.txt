<p>Please find the working sample,</p>

<pre><code>inputSearch.addTextChangedListener(new TextWatcher() {

        @Override
        public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {
            // When user changed the Text

            MainActivity.this.adapter.filter(cs);
        }

        @Override
        public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
                int arg3) {
            // TODO Auto-generated method stub

        }
</code></pre>

<p>Within your adapter create your own filter method,</p>

<pre><code> public class FieldsAdapter extends BaseAdapter{
    Context mContext;
    LayoutInflater inflater;
    private List&lt;String&gt; mainDataList = null;
    private ArrayList&lt;String&gt; arrayList;
    public FieldsAdapter(Context context,List&lt;String&gt; fieldList) {
        mContext = context;
        mainDataList = fieldList;
        inflater = LayoutInflater.from(context);
        this.arrayList = new ArrayList&lt;String&gt;();
        this.arrayList.addAll(mainDataList);
    }

    @Override
    public int getCount() {
        return mainDataList.size();
    }

    @Override
    public Object getItem(int position) {
        return mainDataList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final ViewHolder holder;
        if(convertView == null){
            holder = new ViewHolder();
            convertView = inflater.inflate(R.layout.edit_field_item, null);
            holder.txtFieldName = (TextView) convertView.findViewById(R.id.txt_field_name);         
            convertView.setTag(holder);

        }else{
            holder = (ViewHolder) convertView.getTag();
        }       
        holder.txtFieldName.setText(mainDataList.get(position));        
        return convertView;
    }

    static class ViewHolder{
        protected TextView txtFieldName;            
    }   

    public void filter(String queryText){
        queryText = queryText.toLowerCase();
        mainDataList.clear();
        if(queryText.length()==0){
            mainDataList.addAll(arrayList);
        }else{
            for(FieldsPOJO field:arrayList){
                if(field.getFieldName().toString().toLowerCase().contains(queryText)){
                    mainDataList.add(field);
                }
            }
        }
        notifyDataSetChanged();
    }       
}
</code></pre>

<p>If you have any doubt please feel free to post your queries in the comment section. Happy coding..</p>
