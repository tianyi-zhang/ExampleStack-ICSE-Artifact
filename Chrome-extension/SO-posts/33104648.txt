<p>I finally solved my problem which was occurring because i wasn't  sending GCM registration ID after getting it from GCM server to my app server.</p>

<p>But after sending it to my app server, my client app was able to receive notifications upon receiving a new message.</p>

<p>any one who is experiencing same problem. that is <strong>Your app isn't receiving notifications  or messages(or both)from GCM</strong> please make sure you have (programmatically) sent GCM registration token to your app server</p>

<p><strong>Something like this</strong></p>

<pre><code>public class RegistrationIntentService extends IntentService {
 public static final String GCM_SENDER_ID = "Your ProjectID";//your project id
 private static final String TAG = "RegIntentService";
 public static final String SENT_TOKEN_TO_SERVER = "sentTokenToServer";
 public static final String REGISTRATION_COMPLETE = "registrationComplete";
 public static final long GCM_TIME_TO_LIVE = 60L * 60L * 24L * 7L * 4L; // 4 Weeks

private static final String TAG = "RegIntentService";

public RegistrationIntentService() {
    super(TAG);

}
String regId;
@Override
protected void onHandleIntent(Intent intent) {
    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);

    try {
        // [START register_for_gcm]
        // Initially this call goes out to the network to retrieve the token, subsequent calls
        // are local.
        // [START get_token]
        InstanceID instanceID = InstanceID.getInstance(this);
        String token = instanceID.getToken(getString(R.string.gcm_defaultSenderId),
                GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
        regId = token;
        // [END get_token]
        Log.i(TAG, "GCM Registration Token: " + token);

        // TODO: Implement this method to send any registration to your app's servers.
        sendRegistrationToServer(token);


        // You should store a boolean that indicates whether the generated token has been
        // sent to your server. If the boolean is false, send the token to your server,
        // otherwise your server should have already received the token.
        sharedPreferences.edit().putBoolean(SENT_TOKEN_TO_SERVER, true).apply();
        // [END register_for_gcm]
    } catch (Exception e) {
        Log.d(TAG, "Failed to complete token refresh", e);
        // If an exception happens while fetching the new token or updating our registration data
        // on a third-party server, this ensures that we'll attempt the update at a later time.
        sharedPreferences.edit().putBoolean(SENT_TOKEN_TO_SERVER, false).apply();
    }
    // Notify UI that registration has completed, so the progress indicator can be hidden.
    Intent registrationComplete = new Intent(REGISTRATION_COMPLETE);
    LocalBroadcastManager.getInstance(this).sendBroadcast(registrationComplete);
}


/**
 * Sends the registration ID to the 3rd party server via an upstream 
 * GCM message. Ideally this would be done via HTTP to guarantee success or failure 
 * immediately, but it would require an HTTP endpoint.
 */

private void sendRegistrationToServer(String token) {

String name = token
new AsyncTask&lt;String, Void, String&gt;()
{
    @Override
    protected String doInBackground(String... params)
    {
    String msg = "";
    try
    {
        Bundle data = new Bundle();
        data.putString("name", params[0]);
        data.putString("action", "com.antoinecampbell.gcmdemo.REGISTER");
        String id = Integer.toString(msgId.incrementAndGet());
        gcm.send(GCM_SENDER_ID + "@gcm.googleapis.com", id,GCM_TIME_TO_LIVE, data);
        msg = "Sent registration";
    }
    catch (IOException ex)
    {
        msg = "Error :" + ex.getMessage();
    }
    return msg;
    }

    @Override
    protected void onPostExecute(String msg)
    {
    Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();
    }
 }.execute(name);
 }
}
</code></pre>

<p><strong>Give it a try!!</strong></p>
