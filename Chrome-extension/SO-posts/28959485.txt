<p>First you have to implement your own OnItemTouchListener : </p>

<pre><code>static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener{

    private GestureDetector gestureDetector;

    public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener){
        gestureDetector = new GestureDetector(context,new GestureDetector.SimpleOnGestureListener(){
            @Override
            public boolean onSingleTapUp(MotionEvent e) {
                //here get the view that has been touched
                View child = recyclerView.findChildViewUnder(e.getX(),e.getY());

                //now pass the item and its position to your click listener 
                if(child!=null &amp;&amp; clickListener!=null){
                    clickListener.onClick(child, recyclerView.getChildPosition(child));
                }

                return true;
            }

            @Override
            public void onLongPress(MotionEvent e) {
            }
        });
    }

    public static interface ClickListener {
        public void onClick(View view, int position);
    }

    @Override
    public boolean onInterceptTouchEvent(RecyclerView recyclerView, MotionEvent motionEvent) {
        //use the gesture detector to intercept singletap and longtouch events
        gestureDetector.onTouchEvent(motionEvent);
        return false;
    }

    @Override
    public void onTouchEvent(RecyclerView recyclerView, MotionEvent motionEvent) {
    }
}
</code></pre>

<p>And then you will have to implement the ClickListener that will be called by the RecyclerTouchListener above :</p>

<pre><code>private RecyclerTouchListener.ClickListener mClickListener =  new RecyclerTouchListener.ClickListener() {
    @Override
    public void onClick(View view, final int position) {
            //Do something with your item...
            mRecyclerAdapter.getElementAt(position).doSomething();

        }

    }
</code></pre>
