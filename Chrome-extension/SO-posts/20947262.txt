<p>may be this code can help you.. i am giving u code which works as google talk this    code will work only on gmail id's....and one more important thing u have to <strong>download smack.jar</strong> and import this jar file in your libs folder.....</p>

<pre><code>public static final String HOST = "talk.google.com";
public static final int PORT = 5222;
public static final String SERVICE = "gmail.com";
public static final String USERNAME = "your gmail id";
public static final String PASSWORD = "your gmail id password";
</code></pre>

<p>In the username you have to enter your gmail id...and in the place of password you have to enter your gmail id password..... follow code and if you want any clearification please notify me....</p>

<blockquote>
  <p><strong>MainActivity.java</strong></p>
</blockquote>

<pre><code>package com.example.androidwithoutxmppdialog;
import java.util.ArrayList;
import java.util.Collection;
import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.PacketListener;
import org.jivesoftware.smack.Roster;
import org.jivesoftware.smack.RosterEntry;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.filter.MessageTypeFilter;
import org.jivesoftware.smack.filter.PacketFilter;
import org.jivesoftware.smack.packet.Message;
import org.jivesoftware.smack.packet.Packet;
import org.jivesoftware.smack.packet.Presence;
import org.jivesoftware.smack.util.StringUtils;
import android.app.Activity;
import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

 public class MainActivity extends Activity  {

 public static final String HOST = "talk.google.com";
 public static final int PORT = 5222;
 public static final String SERVICE = "gmail.com";
 public static final String USERNAME = "your gmail id";
 public static final String PASSWORD = "your gmail id password";

 private XMPPConnection connection;
 private ArrayList&lt;String&gt; messages = new ArrayList&lt;String&gt;();
 private Handler mHandler = new Handler();

private EditText recipient;
private EditText textMessage;
private ListView listview;

/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

recipient = (EditText) this.findViewById(R.id.toET);
textMessage = (EditText) this.findViewById(R.id.chatET);
listview = (ListView) this.findViewById(R.id.listMessages);
setListAdapter();




// Set a listener to send a chat text message
Button send = (Button) this.findViewById(R.id.sendBtn);
send.setOnClickListener(new View.OnClickListener() {
  public void onClick(View view) {
    String to = recipient.getText().toString();
    String text = textMessage.getText().toString();          
    Log.i("XMPPChatDemoActivity ", "Sending text " + text + " to " + to);
    Message msg = new Message(to, Message.Type.chat);  
    msg.setBody(text);
    if ((connection != null)&amp;&amp; (!textMessage.getText().toString().equals("")))  {
      connection.sendPacket(msg);
      //messages.add(connection.getUser() + ":");
      messages.add("Rajesh :");

      messages.add(text);
      textMessage.setText("");
      setListAdapter();
    }
  else
  {
      Toast.makeText(MainActivity.this, "please type to compose ", Toast.LENGTH_SHORT).show();

  }
  }
});
 connect();
}

/**
 * Called by Settings dialog when a connection is establised with 
* the XMPP server
 */
  public void setConnection(XMPPConnection connection) {
   this.connection = connection;
   if (connection != null) {
   // Add a packet listener to get messages sent to us
   PacketFilter filter = new MessageTypeFilter(Message.Type.chat);
  connection.addPacketListener(new PacketListener() {
    @Override
    public void processPacket(Packet packet) {
      Message message = (Message) packet;
      if (message.getBody() != null) {
        //String fromName = StringUtils.parseBareAddress(message.getFrom());
        String fromName="Gaurav";
        Log.i("XMPPChatDemoActivity ", " Text Recieved " + message.getBody() + " from " +  fromName);
       messages.add(fromName + ":");
        messages.add(message.getBody());
        // Add the incoming message to the list view
        mHandler.post(new Runnable() {
          public void run() {
            setListAdapter();
          }
        });
      }
       }
    }, filter);
   }
 }

private void setListAdapter() {
ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this, R.layout.listitem, messages);
   listview.setAdapter(adapter);
 }



@Override
 protected void onDestroy() {
super.onDestroy();
try {
  connection.disconnect();

  } catch (Exception e) {

  }
}

public void connect() {

final ProgressDialog dialog = ProgressDialog.show(this, "Connecting...", "Please wait...", false);
  Thread t = new Thread(new Runnable() {
  @Override
  public void run() {
    // Create a connection
   ConnectionConfiguration connConfig = new ConnectionConfiguration(HOST, PORT, SERVICE);
     XMPPConnection connection = new XMPPConnection(connConfig);
     try {
       connection.connect();
     Log.i("XMPPChatDemoActivity",  "[SettingsDialog] Connected to "+connection.getHost());
     } catch (XMPPException ex) {
         Log.e("XMPPChatDemoActivity",  "[SettingsDialog] Failed to connect to "+ connection.getHost());
         Log.e("XMPPChatDemoActivity", ex.toString());
         setConnection(null);
     }
      try {
        connection.login(USERNAME, PASSWORD);
        Log.i("XMPPChatDemoActivity",  "Logged in as" + connection.getUser());

        // Set the status to available
        Presence presence = new Presence(Presence.Type.available);
        connection.sendPacket(presence);
        setConnection(connection);

        Roster roster = connection.getRoster();
        Collection&lt;RosterEntry&gt; entries = roster.getEntries();
        for (RosterEntry entry : entries) {

          Log.d("XMPPChatDemoActivity",  "--------------------------------------");
          Log.d("XMPPChatDemoActivity", "RosterEntry " + entry);
          Log.d("XMPPChatDemoActivity", "User: " + entry.getUser());
          Log.d("XMPPChatDemoActivity", "Name: " + entry.getName());
          Log.d("XMPPChatDemoActivity", "Status: " + entry.getStatus());
          Log.d("XMPPChatDemoActivity", "Type: " + entry.getType());
          Presence entryPresence = roster.getPresence(entry.getUser());

          Log.d("XMPPChatDemoActivity", "Presence Status: "+ entryPresence.getStatus());
          Log.d("XMPPChatDemoActivity", "Presence Type: " + entryPresence.getType());

          Presence.Type type = entryPresence.getType();
          if (type == Presence.Type.available)
            Log.d("XMPPChatDemoActivity", "Presence AVIALABLE");
            Log.d("XMPPChatDemoActivity", "Presence : " + entryPresence);
          }
          } catch (XMPPException ex) {
            Log.e("XMPPChatDemoActivity", "Failed to log in as "+  USERNAME);
            Log.e("XMPPChatDemoActivity", ex.toString());
            setConnection(null);
          }
          dialog.dismiss();
       }
     });
   t.start();
   dialog.show();
 }

}
</code></pre>

<blockquote>
  <p><strong>activity_main.xml</strong></p>
</blockquote>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="fill_parent"
android:layout_height="fill_parent"
android:orientation="vertical" &gt;

&lt;LinearLayout

android:layout_width="fill_parent"
android:layout_height="wrap_content"
android:orientation="horizontal" &gt;

 &lt;TextView
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:minWidth="70dp"
  android:text="Chat With"
  android:textStyle="bold" /&gt;

 &lt;EditText
  android:id="@+id/toET"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:hint="Add Recipient"
  android:minWidth="250dp"
  android:scrollHorizontally="true"
  android:singleLine="true"
  android:textSize="16sp" /&gt;
 &lt;/LinearLayout&gt;

&lt;ListView
 android:id="@+id/listMessages"
 android:layout_width="wrap_content"
 android:layout_height="wrap_content"
 android:layout_weight="1"
 android:scrollbars="horizontal" /&gt;

  &lt;LinearLayout
  android:id="@+id/linearLayout2"
  android:layout_width="fill_parent"
  android:layout_height="wrap_content"
  android:gravity="bottom"
  android:orientation="horizontal" &gt;

  &lt;EditText
   android:id="@+id/chatET"
   android:layout_width="wrap_content"
   android:layout_height="wrap_content"
   android:layout_weight="1"
   android:gravity="top"
   android:hint="Type to compose"
   android:scrollHorizontally="true" &gt;
  &lt;/ EditText&gt;

   &lt;Button
  android:id="@+id/sendBtn"
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:layout_marginLeft="5dp"
  android:layout_marginRight="5dp"
  android:layout_marginTop="5dp"
  android:text="Send"
  android:textStyle="bold" /&gt;
 &lt;/LinearLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>

<blockquote>
  <p><strong>listitem.xml</strong></p>
</blockquote>

<pre><code>  &lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
  android:id="@+id/text1"
  android:layout_width="fill_parent"
  android:layout_height="wrap_content"
  android:singleLine="false"
  android:textStyle="bold" /&gt;
</code></pre>

<blockquote>
  <p><strong>AndroidManifest.xml</strong></p>
</blockquote>

<pre><code>&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
</code></pre>
