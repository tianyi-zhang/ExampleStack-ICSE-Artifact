<p>Ok, I think I understood what you want to do.</p>

<p>Guava's CharMatcher does not let you refer to the matched character ("backreference") in the replacement CharSequence.</p>

<p>For example, if you want to replace "i" with "!i", and "j" with "!j", you cannot do:</p>

<pre><code>String string = ...;
CharMatcher.anyOf("ij").replaceFrom(string, "!$0");
</code></pre>

<p>You must do:</p>

<pre><code>String string = ...;
string = CharMatcher.is('i').replaceFrom(string, "!i");
string = CharMatcher.is('j').replaceFrom(string, "!j");
</code></pre>

<p>Which is annoying, since the code is dirtier (more code), and is less performant (the string characters will be iterated over multiple times).</p>

<p>If you find yourself doing this often, I guess you could create an utility method, inspired from CharMatcher.replaceFrom(), that prepends a String when a character is matched by a given CharMatcher:</p>

<pre><code>public static String prepend(CharSequence sequence, CharMatcher charMatcher, CharSequence toPrepend) {
    if (toPrepend.length() == 0) {
        return sequence.toString();
    }

    String string = sequence.toString();
    int pos = charMatcher.indexIn(string);
    if (pos == -1) {
        return string;
    }

    int len = string.length();
    StringBuilder buf = new StringBuilder((len * 3 / 2) + 16);

    int oldpos = 0;
    do {
        buf.append(string, oldpos, pos);
        buf.append(toPrepend);
        buf.append(string.charAt(pos));
        oldpos = pos + 1;
        pos = charMatcher.indexIn(string, oldpos);
    } while (pos != -1);

    buf.append(string, oldpos, len);
    return buf.toString();
}
</code></pre>

<p>And use it like this:</p>

<pre><code>MyCharMatchers.prepend(string, CharMatcher.anyOf("aei"), "!");
</code></pre>

<p>I don't know about the performance implications. I think the CharMatcher is faster than regular expressions, but you'd have to <a href="http://code.google.com/p/caliper/" rel="nofollow">benchmark</a> it to be sure.</p>
