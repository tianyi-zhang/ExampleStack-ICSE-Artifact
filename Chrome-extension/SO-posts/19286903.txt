<p>As far as I know, you will not be able to do this from the Weka GUI.  However, <strong>if you use the Weka API there is some hope</strong>.  I am not an expert in Java, so the following steps may not follow the best practice, but it does work for the small example I concocted.</p>

<ol>
<li><p>Build the j48 tree in the Weka GUI and in the "more options" tab select <strong>"Output Source Code"</strong></p></li>
<li><p>Copy the source code to a new class in your Java code</p></li>
<li><p>In the <strong>classifyInstance</strong> method <strong>augment the return variable to include a leaf number</strong>  </p></li>
<li><p>Modify the class so it no longer extends "Classifier" (this requires eliminating a few other methods in the class you just created) </p></li>
</ol>

<p>Below is a class that will classify a Weka Instance with a decision stump classifier.  The output will include a leaf number.  This was built from the categorical weather data included in the Weka example datasets by following the above steps.  For the huge decision tree you have it may be necessary to do some string replacement to efficiently augment your return variable. </p>

<pre><code>import weka.core.Instance;

public class WekaWrapper {

  /**
   * Classifies the given instance.
   *
   * @param i the instance to classify
   * @return the classification result
   */
  public double[] classifyInstance(Instance i) throws Exception {
    Object[] s = new Object[i.numAttributes()];

    for (int j = 0; j &lt; s.length; j++) {
      if (!i.isMissing(j)) {
        if (i.attribute(j).isNominal())
          s[j] = new String(i.stringValue(j));
        else if (i.attribute(j).isNumeric())
          s[j] = new Double(i.value(j));
      }
    }

    // set class value to missing
    s[i.classIndex()] = null;

    return WekaClassifier.classify(s);
  }
}
class WekaClassifier {
  public static double[] classify(Object[] i) {
    /* outlook */
      double[][] here=new double[3][2];
      here[0][0]=0; //leaf value
      here[0][1]=1; //leaf ID
      here[1][0]=0; //leaf value
      here[1][1]=2; //leaf ID
      here[2][0]=0; //leaf value
      here[2][1]=3; //leaf ID
    if (i[0] == null) { return here[0]; } else if (((String)i[0]).equals("overcast")) { return here[1]; } else { return here[2]; }
  }
}
</code></pre>
