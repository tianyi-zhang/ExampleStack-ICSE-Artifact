<p>The <code>JUnitCore</code> is a basic entry point for <code>Junit</code> tests. The way it works is it finds a <code>List</code> of classes provided as <code>java</code> command arguments and uses them to create a <code>Runner</code> with which it runs the test cases.</p>

<p>At no point during processing does the <code>main</code> method in <code>JUnitCore</code> ever pass a reference of the <code>JUnitCore</code> instance it creates to any other object. As such, <strong>it is not retrievable either directly or with reflection.</strong>  </p>

<p><code>JUnitCore</code> is as follows</p>

<pre><code>public static void main(String... args) {
    runMainAndExit(new RealSystem(), args);
}

public static void runMainAndExit(JUnitSystem system, String... args) {
    Result result= new JUnitCore().runMain(system, args);
    system.exit(result.wasSuccessful() ? 0 : 1);
}

public Result runMain(JUnitSystem system, String... args) {
    system.out().println("JUnit version " + Version.id());
    List&lt;Class&lt;?&gt;&gt; classes= new ArrayList&lt;Class&lt;?&gt;&gt;();
    List&lt;Failure&gt; missingClasses= new ArrayList&lt;Failure&gt;();
    for (String each : args)
        try {
            classes.add(Class.forName(each));
        } catch (ClassNotFoundException e) {
            system.out().println("Could not find class: " + each);
            Description description= Description.createSuiteDescription(each);
            Failure failure= new Failure(description, e);
            missingClasses.add(failure);
        }
    RunListener listener= new TextListener(system);
    addListener(listener);
    Result result= run(classes.toArray(new Class[0]));
    for (Failure each : missingClasses)
        result.getFailures().add(each);
    return result;
}

... // and more
</code></pre>

<p>No where in this implementation is a reference to <code>this</code> passed as an argument. As such, you cannot get a reference to it.</p>
