<p>You can do that by using the lazy adapter. You have to create the reflected images in decode file of  Image loader class. Next, you have to return a image view from getview method of your custom adapter class.</p>

<p>Here is the sample code:</p>

<pre><code>In main activity:

CoverFlow coverflow=(CoverFlow)findViewById(R.id.yourcoverflowid);

coverflow.setAdapter(new customadapter(getActivity(),list,imagesize));

In getview method of custom adapter:

    ImageView i=new ImageView(activity);       
    imageLoader.DisplayImage(data.get(position).getimage(),i);


    i.setPadding(0,5,0,0);

    i.setLayoutParams(new CoverFlow.LayoutParams(width,height));

    i.setScaleType(ImageView.ScaleType.MATRIX);

    return i;

In decodefile method of imageloader class
</code></pre>

<p>try{
        final int reflectionGap = 4;</p>

<pre><code>    Bitmap originalImage;


     BitmapFactory.Options o = new BitmapFactory.Options();
     o.inJustDecodeBounds = true;
     FileInputStream stream1=new FileInputStream(f);
     originalImage=BitmapFactory.decodeStream(stream1);
     stream1.close();

        int width = originalImage.getWidth();
        int height = originalImage.getHeight();


        //This will not scale but will flip on the Y axis
        Matrix matrix = new Matrix();
        matrix.preScale(1, -1);

        //Create a Bitmap with the flip matrix applied to it.
        //We only want the bottom half of the image
        Bitmap reflectionImage = Bitmap.createBitmap(originalImage, 0, height/2, width, height/2, matrix, false);


        //Create a new bitmap with same width but taller to fit reflection
        Bitmap bitmapWithReflection = Bitmap.createBitmap(width 
          , (height + height/2), Config.ARGB_8888);

       //Create a new Canvas with the bitmap that's big enough for
       //the image plus gap plus reflection
       Canvas canvas = new Canvas(bitmapWithReflection);
       //Draw in the original image
       canvas.drawBitmap(originalImage, 0, 0, null);
       //Draw in the gap
       Paint deafaultPaint = new Paint();
       canvas.drawRect(0, height, width, height + reflectionGap, deafaultPaint);
       //Draw in the reflection
       canvas.drawBitmap(reflectionImage,0, height + reflectionGap, null);

       //Create a shader that is a linear gradient that covers the reflection
       Paint paint = new Paint(); 
       LinearGradient shader = new LinearGradient(0, originalImage.getHeight(), 0, 
         bitmapWithReflection.getHeight() + reflectionGap, 0x70ffffff, 0x00ffffff, 
         TileMode.CLAMP); 
       //Set the paint to use this shader (linear gradient)
       paint.setShader(shader); 
       //Set the Transfer mode to be porter duff and destination in
       paint.setXfermode(new PorterDuffXfermode(Mode.DST_IN)); 
       //Draw a rectangle using the paint with our linear gradient
       canvas.drawRect(0, height, width, 
         bitmapWithReflection.getHeight() + reflectionGap, paint); 


    return bitmapWithReflection;
</code></pre>
