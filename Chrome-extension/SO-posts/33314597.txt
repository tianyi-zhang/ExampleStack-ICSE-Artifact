<p>I solved the issue by using the following <code>setEGLConfigChooser()</code> method implementation:</p>

<pre><code>mEffectView = (GLSurfaceView) view.findViewById(R.id.effectsview);
mEffectView.setEGLContextClientVersion(2);
mEffectView.setEGLConfigChooser(new GLSurfaceView.EGLConfigChooser() {
        @Override
        public EGLConfig chooseConfig(EGL10 egl, EGLDisplay display) {
            /* Get the number of minimally matching EGL configurations  */
              int[] s_configAttribs2 =
                    {
                            EGL10.EGL_RED_SIZE, 4,
                            EGL10.EGL_GREEN_SIZE, 4,
                            EGL10.EGL_BLUE_SIZE, 4,
                            EGL10.EGL_RENDERABLE_TYPE, 1,
                            EGL10.EGL_NONE
                    };

            int[] num_config = new int[1];
            egl.eglChooseConfig(display, s_configAttribs2, null, 0, num_config);

            int numConfigs = num_config[0];

            if (numConfigs &lt;= 0) {
                throw new IllegalArgumentException("No configs match configSpec");
            }

        /* Allocate then read the array of minimally matching EGL configs */
            EGLConfig[] configs = new EGLConfig[numConfigs];
            egl.eglChooseConfig(display, s_configAttribs2, configs, numConfigs, num_config);


        /* Return the first configuration found */
            return configs[0];
        }
    });
</code></pre>

<p>Using this method a valid EGL configuration is correctly found.</p>

<p>The function code has been derived from: <a href="https://android.googlesource.com/platform/frameworks/base/+/14b0a6bc0ec8814291751b2b8e80da606cfa12b3/core/java/android/view/HardwareRenderer.java" rel="nofollow">https://android.googlesource.com/platform/frameworks/base/+/14b0a6bc0ec8814291751b2b8e80da606cfa12b3/core/java/android/view/HardwareRenderer.java</a></p>
