<pre><code>import android.app.Activity;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.widget.Toast;
public class SimpleGestureFilter extends SimpleOnGestureListener
{
 public final static int SWIPE_UP    = 1; 
 public final static int SWIPE_DOWN  = 2; 
 public final static int SWIPE_LEFT  = 3; 
 public final static int SWIPE_RIGHT = 4;  
 public final static int MODE_TRANSPARENT = 0; 
 public final static int MODE_SOLID = 1; 
 public final static int MODE_DYNAMIC = 2;  
 private final static int ACTION_FAKE = -13;  
 private int swipe_Min_Distance = 100; 
 private int swipe_Max_Distance = 350; 
 private int swipe_Min_Velocity = 100;  
 private int mode = MODE_DYNAMIC; 
 private boolean running = true; 
 private boolean tapIndicator = false;  
 private Activity context; 
 private GestureDetector detector; 
 private SimpleGestureListener listener;   
 public SimpleGestureFilter(Activity context,SimpleGestureListener sgf) 
 {   
  this.context = context;  
  this.detector = new GestureDetector(context, this);  
  this.listener = sgf;  
 }
 public void onTouchEvent(MotionEvent me) 
 {
  // TODO Auto-generated method stub
  if(!this.running)
   return;
  boolean result=this.detector.onTouchEvent(me);
  if(this.mode==MODE_SOLID)
   me.setAction(MotionEvent.ACTION_CANCEL);
  else if(this.mode==MODE_DYNAMIC)
  {
   if(me.getAction()==ACTION_FAKE)
    me.setAction(MotionEvent.ACTION_UP);
   else if(result)
    me.setAction(MotionEvent.ACTION_CANCEL);
   else if(this.tapIndicator)
   {
    me.setAction(MotionEvent.ACTION_DOWN);
    this.tapIndicator=false;
   }
  } 
 }
 public void setMode(int m)
 {
  this.mode=m;
 }
 public int getMode()
 {
  return this.mode;
 }
 public void setEnabled(boolean status)
 {
  this.running=status;
 }
 public void setSwipeMaxDistance(int distance)
 {
  this.swipe_Max_Distance=distance;
 }
 public void setSwipeMinDistance(int distance)
 {
  this.swipe_Min_Distance=distance;
 }
 public int getSwipeMaxDistance()
 {  
  return this.swipe_Max_Distance; 
 }  
 public int getSwipeMinDistance()
 {  
  return this.swipe_Min_Distance; 
 }  
 public int getSwipeMinVelocity()
 {  
  return this.swipe_Min_Velocity; 
 }

 public boolean onFling(MotionEvent e1,MotionEvent e2,float velocityX,float velocityY)
 {
  final float xDistance=Math.abs(e1.getX()-e2.getX());
  final float yDistance=Math.abs(e1.getY()-e2.getY());
  if(xDistance&gt;this.swipe_Max_Distance || yDistance&gt; this.swipe_Max_Distance)

   return false;
  velocityX = Math.abs(velocityX);
  velocityY = Math.abs(velocityY);
  boolean result=false;
  if(velocityX &gt; this.swipe_Min_Velocity &amp;&amp; xDistance &gt; this.swipe_Min_Distance)
  {
   if(e1.getX() &gt; e2.getX()) // right to left Move
    this.listener.onSwipe(SWIPE_LEFT);
   else
    this.listener.onSwipe(SWIPE_RIGHT);
   result=true;
  }
  else if(velocityY &gt; this.swipe_Min_Velocity &amp;&amp; yDistance &gt; this.swipe_Min_Distance)
  {
   if(e1.getY() &gt; e2.getY()) // bottom to top Move
    this.listener.onSwipe(SWIPE_UP);
   else
    this.listener.onSwipe(SWIPE_DOWN);
   result=true;
  }
  return result;
 }
 public boolean onSingleTapUp(MotionEvent e) 
 {
  this.tapIndicator=true;
  return false;
 }
 public boolean onDoubleTap(MotionEvent e) 
 {
  this.listener.onDoubleTap();
  return false;
 } 
 public boolean onDoubleTapEvent(MotionEvent e) 
 {    
  return true;
 }
 public boolean onSingleTapConfirmed(MotionEvent e) 
 {
  if(this.mode==MODE_DYNAMIC)
  {
   e.setAction(ACTION_FAKE);
   this.context.dispatchTouchEvent(e);
  }
  return false;
 }
 static interface SimpleGestureListener
 {     
  void onSwipe(int direction);     
  void onDoubleTap();
 }
}
</code></pre>
