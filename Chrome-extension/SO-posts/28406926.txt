<p>At first use <code>ViewHolder</code> pattern. At second extend <code>BaseAdapter</code> not <code>AdapterView</code>. At third delete <code>android:clickable="true"</code> from <code>row.xml</code>. Clickable state must have <code>ListView</code> in method <code>onItemClickListener</code>, not own row.</p>

<p>Updated </p>

<p>For the Customized listview you can use BaseAdapter.</p>

<p>And With Adapter Class you it have some tips to make it smooth , for that you can refer <a href="http://goo.gl/ILy3xc" rel="nofollow">this</a></p>

<p>Its also about resusability already created row's control instances.For that ViewHolder pattern i prefer to use to hold the objects. Please check <a href="http://goo.gl/rV7Hss" rel="nofollow">this</a> for more detail</p>

<p>Which is missing in your code of the adapter's getView Method.</p>

<p>For more explanation i leave comment in Adapter's getView Method.</p>

<p>Class to hold the details if you are gng to use thn naming convention should be proper
here first the name is "Object" which is wrong.</p>

<p>Activity </p>

<pre><code>private ListView list;
    private final ArrayList&lt;RestaurantsDetails&gt; pairs = new ArrayList&lt;RestaurantsDetails&gt;();
    private Activity context;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.activity_main);

        pairs.add(new RestaurantsDetails("McDonald's", "mcd"));
        pairs.add(new RestaurantsDetails("Subway", "mcd"));
        pairs.add(new RestaurantsDetails("Pizza Hut", "mcd"));
        pairs.add(new RestaurantsDetails("Burger King", "mcd"));

        list = (ListView) findViewById(R.id.listview);

        AdapterViewCustom adapter = new AdapterViewCustom(this, pairs);
        list.setAdapter(adapter);

        list.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(android.widget.AdapterView&lt;?&gt; parent,
                    View view, int position, long id) {
                Toast.makeText(getApplicationContext(),
                        pairs.get(position).name, Toast.LENGTH_LONG).show();
            }
        });

    }
</code></pre>

<p>DataLayer Class</p>

<pre><code>/**
     * Use proper name For the class. Should not use the name like "Object" or
     * the class which is already used by framework
     * 
     */
    public class RestaurantsDetails {

        public String name;
        public String img;

        public RestaurantsDetails(String name, String img) {
            this.name = name;
            this.img = img;
        }

    }
</code></pre>

<p>Adapter </p>

<pre><code>public class AdapterViewCustom extends BaseAdapter {

        private Activity context_1;

        private ArrayList&lt;RestaurantsDetails&gt; pairs;

        public AdapterViewCustom(Activity context,
                ArrayList&lt;RestaurantsDetails&gt; pairs) {
            context_1 = context;
            this.pairs = pairs;
        }

        @Override
        public int getCount() {
            return pairs.size();
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ViewHolder viewHolder = null;

            if (convertView == null) {
                convertView = LayoutInflater.from(context_1).inflate(
                        R.layout.custom_row, null);
                viewHolder = new ViewHolder();
                viewHolder.img = (ImageView) convertView
                        .findViewById(R.id.log_img);
                viewHolder.txt = (TextView) convertView
                        .findViewById(R.id.tv_view);
                /**
                 * At very first time when the List View row Item control's
                 * instance is created it will be store in the convertView as a
                 * ViewHolder Class object for the reusability purpose
                 **/
                convertView.setTag(viewHolder);
            } else {
                /**
                 * Once the instance of the row item's control it will use from
                 * already created controls which are stored in convertView as a
                 * ViewHolder Instance
                 * */
                viewHolder = (ViewHolder) convertView.getTag();
            }

            viewHolder.txt.setText(pairs.get(position).name);
            int id = context_1.getResources().getIdentifier(
                    pairs.get(position).img, "drawable",
                    context_1.getPackageName());
            viewHolder.img.setImageResource(id);

            return convertView;
        }

        public class ViewHolder {
            public final ImageView img;
            public final TextView txt;

        }
    }
</code></pre>
