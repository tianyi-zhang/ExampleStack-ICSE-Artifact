<p>Actually, there's some trivial error. As You can seen, in your code there's checks for <code>defaultTextSize</code> and so text font cannot get bigger than it, also there's correction of <code>hi</code> is needed inside align loop, because it blocks searching sizes higher than <code>defaultTextSize</code>.</p>

<p>So, final code which makes font big without limit would looks like the following:</p>

<pre><code>public class FontFitTextView extends TextView {

    // Attributes
    private Paint mTestPaint;
    /** 'Initial' text size */
    private float mDefaultTextSize;

    public FontFitTextView(final Context context) {
        super(context);
        initialize();
    }

    public FontFitTextView(final Context context, final AttributeSet attrs) {
        super(context, attrs);
        initialize();
    }

    private void initialize() {
        mTestPaint = new Paint();
        mTestPaint.set(this.getPaint());
        mDefaultTextSize = getTextSize();
    }

    /*
     * Re size the font so the specified text fits in the text box
     * assuming the text box is the specified width.
     */
    private void refitText(final String text, final int textWidth) {

        if(textWidth &lt;= 0 || text.isEmpty()) {
            return;
        }

        int targetWidth = textWidth - this.getPaddingLeft() - this.getPaddingRight();

        // this is most likely a non-relevant call
        if(targetWidth &lt;= 2) {
            return;
        }

        // text already fits with the xml-defined font size?
        mTestPaint.set(this.getPaint());
        mTestPaint.setTextSize(mDefaultTextSize);

        // adjust text size using binary search for efficiency
        float hi = Math.max(mDefaultTextSize, targetWidth);
        float lo = 2;
        final float threshold = 0.5f; // How close we have to be

        while (hi - lo &gt; threshold) {
            float size = (hi + lo) / 2;
            mTestPaint.setTextSize(size);
            if(mTestPaint.measureText(text) &gt;= targetWidth) {
                hi = size; // too big
            } else {
                lo = size; // too small
            }
        }

        // Use lo so that we undershoot rather than overshoot
        this.setTextSize(TypedValue.COMPLEX_UNIT_PX, lo);
    }

    @Override
    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        int parentWidth = MeasureSpec.getSize(widthMeasureSpec);
        int height = getMeasuredHeight();
        refitText(this.getText().toString(), parentWidth);
        this.setMeasuredDimension(parentWidth, height);
    }

    @Override
    protected void onTextChanged(final CharSequence text, final int start,
                                 final int before, final int after) {
        refitText(text.toString(), this.getWidth());
    }

    @Override
    protected void onSizeChanged(final int w, final int h, final int oldw, final int oldh) {
        if (w != oldw || h != oldh) {
            refitText(this.getText().toString(), w);
        }
    }
}
</code></pre>

<p>You can test it with the following xml:</p>

<pre><code>&lt;RelativeLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;

    &lt;com.example.TestApp.FontFitTextView
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:id="@+id/textView"
        android:layout_centerInParent="true"
        android:text="This text is to be resized." /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_alignParentLeft="true"
        android:id="@+id/minus_button"
        android:text="-10px"
        android:padding="20dp" /&gt;

    &lt;Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_toRightOf="@id/minus_button"
        android:id="@+id/plus_button"
        android:text="+10px"
        android:padding="20dp" /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>And activity:</p>

<pre><code>public class MyActivity extends Activity {

    private static final String TAG = "MyActivity";

    TextView mTextView = null;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Show the layout with the test view
        setContentView(R.layout.main);

        mTextView = (TextView) findViewById(R.id.textView);

        final Button buttonPlus = (Button) findViewById(R.id.plus_button);

        buttonPlus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(final View v) {
                changeTextViewSize(10);
            }
        });

        final Button buttonMinus = (Button) findViewById(R.id.minus_button);

        buttonMinus.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(final View v) {
                changeTextViewSize(-10);
            }
        });
    }

    /**
     * Changes text size by needed delta
     *
     * @param delta in px
     */
    private void changeTextViewSize(final int delta) {
        final ViewGroup.LayoutParams params = mTextView.getLayoutParams();

        params.height += delta;
        params.width += delta;

        mTextView.setLayoutParams(params);
    }
}
</code></pre>
