<p>I would write two methods: one to convert your array to a BufferedImage and one the other way around. Both things should be easy to implement. The BufferedImage can be rotated with AffineTransform etc.<br>
Not very elegant but to do with standard java code without third party stuff.<br>
And you got images to show the result graphically.<br><br>
This implementation does the things mentioned above:</p>

<pre><code>package rasterImage;

import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;

public class MatrixRotator extends javax.swing.JFrame {

    public MatrixRotator() {
        initComponents();
        setLocationRelativeTo(null);
    }

    @SuppressWarnings("unchecked")
    // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;                          
    private void initComponents() {

        jButtonDoIt = new javax.swing.JButton();
        jPanelOrg = new javax.swing.JPanel();
        jPanelRot = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonDoIt.setText("Do it");
        jButtonDoIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoItActionPerformed(evt);
            }
        });

        jPanelOrg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelOrgLayout = new javax.swing.GroupLayout(jPanelOrg);
        jPanelOrg.setLayout(jPanelOrgLayout);
        jPanelOrgLayout.setHorizontalGroup(
            jPanelOrgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanelOrgLayout.setVerticalGroup(
            jPanelOrgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanelRot.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelRotLayout = new javax.swing.GroupLayout(jPanelRot);
        jPanelRot.setLayout(jPanelRotLayout);
        jPanelRotLayout.setHorizontalGroup(
            jPanelRotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanelRotLayout.setVerticalGroup(
            jPanelRotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDoIt)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelOrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelRot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanelRot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonDoIt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelOrg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// &lt;/editor-fold&gt;                        

    private void printRaster(int[][] raster) {
        int rows = raster.length;
        int cols = raster[0].length;

        for (int r = 0; r &lt; rows; r++) {
            for (int c = 0; c &lt; cols; c++) {
                int content = raster[r][c];
                System.out.print(content);
            }
            System.out.println();
        }
    }

    private BufferedImage convert2image(int[][] raster) {
        int rows = raster.length;
        int cols = raster[0].length;

        BufferedImage img = new BufferedImage(cols, rows, BufferedImage.TYPE_BYTE_BINARY);
        Graphics2D g = img.createGraphics();

        for (int r = 0; r &lt; rows; r++) {
            for (int c = 0; c &lt; cols; c++) {
                int content = raster[r][c];
                if (content == 1) {
                    g.fillRect(c, r, 1, 1);
                }
            }
        }

        return img;
    }

    private int[][] convert2raster(BufferedImage img) {
        int cols = img.getWidth();
        int rows = img.getHeight();
        int[][] raster = new int[rows][cols];

        for (int r = 0; r &lt; rows; r++) {
            for (int c = 0; c &lt; cols; c++) {
                int content = img.getRGB(c, r);
                if (content == -1) {
                    raster[r][c] = 1;
                } else {
                    raster[r][c] = 0;
                }
            }
        }

        return raster;
    }

    private void jButtonDoItActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int[][] raster = {{0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}, {0, 0, 1, 0}};
        printRaster(raster);

        //convert raster to image:
        BufferedImage img = convert2image(raster);

        //create rotated image ('large enough'):
        BufferedImage imgRot = new BufferedImage(10, 10, BufferedImage.TYPE_BYTE_BINARY);

        //rotate the image:
        AffineTransform tx = new AffineTransform();
        tx.rotate(Math.toRadians(20.12));
        imgRot.createGraphics().drawImage(img, tx, null);

        //convert image to raster:
        raster = convert2raster(imgRot);
        printRaster(raster);

        //draw it:
        jPanelOrg.getGraphics().drawImage(img, 0, 0, null);
        jPanelRot.getGraphics().drawImage(imgRot, 0, 0, null);
    }                                           

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MatrixRotator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonDoIt;
    private javax.swing.JPanel jPanelOrg;
    private javax.swing.JPanel jPanelRot;
    // End of variables declaration                   
}
</code></pre>
