<p>You should describe in more detail what the <em>actual</em> difficulties are.</p>

<p>However, I was curious (and wanted to try out jzy3d anyhow). So I modified the <a href="https://github.com/jzy3d/jzy3d-api/blob/master/jzy3d-tutorials/src/main/java/org/jzy3d/demos/surface/SurfaceDemo.java" rel="nofollow">SurfaceDemo.java</a> sample to load an image and plot the value of the <a href="http://en.wikipedia.org/wiki/HSL_and_HSV" rel="nofollow">Hue</a> of the individual pixels.</p>

<p><img src="http://i.stack.imgur.com/jK2Zp.png" alt="enter image description here"></p>

<p>It bascially boils down to what "warmer" and "cooler" exactly mean (no pun intended), but it should be possible to derive this from the hue value. (<strong>NOTE</strong>: The color in the image is only a color of the plot, and unrelated to the colors in the image. The colors from the image only determine the <em>height</em> of the plot at each point.)</p>

<pre><code>import java.awt.image.BufferedImage;
import java.io.File;

import javax.imageio.ImageIO;

import org.jzy3d.analysis.AbstractAnalysis;
import org.jzy3d.analysis.AnalysisLauncher;
import org.jzy3d.chart.factories.AWTChartComponentFactory;
import org.jzy3d.colors.Color;
import org.jzy3d.colors.ColorMapper;
import org.jzy3d.colors.colormaps.ColorMapRainbow;
import org.jzy3d.maths.Range;
import org.jzy3d.plot3d.builder.Builder;
import org.jzy3d.plot3d.builder.Mapper;
import org.jzy3d.plot3d.builder.concrete.OrthonormalGrid;
import org.jzy3d.plot3d.primitives.Shape;
import org.jzy3d.plot3d.rendering.canvas.Quality;

public class BasicJzy3D extends AbstractAnalysis
{
    public static void main(String[] args) throws Exception
    {
        BufferedImage image = ImageIO.read(new File("lena512color.png"));
        AnalysisLauncher.open(new BasicJzy3D(image));
    }

    private final BufferedImage image;

    BasicJzy3D(BufferedImage image)
    {
        this.image = image;
    }


    /**
     * Returns the RGB value in the given image at the specified location,
     * which is given in relative coordinates (between 0.0 and 1.0).
     * Invalid coordinates will be clamped to the border
     * 
     * @param image The image
     * @param x The x coordinate
     * @param y The y coordinate
     * @return The RGB value
     */
    private static int getRGB(BufferedImage image, double x, double y)
    {
        int w = image.getWidth();
        int h = image.getHeight();
        int ix = (int)(x * w);
        int iy = (int)(y * h);
        ix = Math.max(0, Math.min(w-1, ix));
        iy = Math.max(0, Math.min(h-1, iy));
        int rgb = image.getRGB(ix, iy);
        return rgb;
    }

    /**
     * Returns the hue for the given RGB color
     * @param rgb The RGB color
     * @return The hue
     */
    private static float getHue(int rgb)
    {
        int r = (rgb &gt;&gt; 16) &amp; 0xFF;
        int g = (rgb &gt;&gt;  8) &amp; 0xFF;
        int b = (rgb &gt;&gt;  0) &amp; 0xFF;
        float hsb[] = new float[3];
        java.awt.Color.RGBtoHSB(r, g, b, hsb);
        float hue = hsb[0];
        return hue;
    }

    static class ImageToValueMapper extends Mapper
    {
        private final BufferedImage image;

        ImageToValueMapper(BufferedImage image)
        {
            this.image = image;
        }

        @Override
        public double f(double x, double y)
        {
            int rgb = getRGB(image, x, y);
            float hue = getHue(rgb);
            return hue;
        }
    }


    @Override
    public void init()
    {
        Mapper mapper = new ImageToValueMapper(image);

        // Define range and precision for the function to plot
        Range range = new Range(0, 1);
        int steps = 80;

        // Create the object to represent the function over the given range.
        final Shape surface = Builder.buildOrthonormal(
            new OrthonormalGrid(range, steps, range, steps), mapper);
        surface.setColorMapper(
            new ColorMapper(new ColorMapRainbow(), 
                surface.getBounds().getZmin(), 
                surface.getBounds().getZmax(), 
                new Color(1, 1, 1, 1.0f)));
        surface.setFaceDisplayed(true);
        surface.setWireframeDisplayed(false);

        // Create a chart
        chart = AWTChartComponentFactory.chart(
            Quality.Advanced, getCanvasType());
        chart.getScene().getGraph().add(surface);
    }
}
</code></pre>
