<p>You might have to write your own matcher for this. (I prefer the fest assertions and Mockito, but used to use Hamcrest...)</p>

<p>For example...</p>

<pre><code>import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.core.IsCollectionContaining;

public final class CustomMatchers {

    public static &lt;T&gt; Matcher&lt;Iterable&lt;? super T&gt;&gt; exactlyNItems(final int n, Matcher&lt;? super T&gt; elementMatcher) {
        return new IsCollectionContaining&lt;T&gt;(elementMatcher) {
            @Override
            protected boolean matchesSafely(Iterable&lt;? super T&gt; collection, Description mismatchDescription) {
                int count = 0;
                boolean isPastFirst = false;

                for (Object item : collection) {

                    if (elementMatcher.matches(item)) {
                        count++;
                    }
                    if (isPastFirst) {
                        mismatchDescription.appendText(", ");
                    }
                    elementMatcher.describeMismatch(item, mismatchDescription);
                    isPastFirst = true;
                }

                if (count != n) {
                    mismatchDescription.appendText(". Expected exactly " + n + " but got " + count);
                }
                return count == n;
            }
        };
    }
}
</code></pre>

<p>You can now do...</p>

<pre><code>    List&lt;TestClass&gt; list = Arrays.asList(new TestClass("Hello"), new TestClass("World"), new TestClass("Hello"));

    assertThat(list, CustomMatchers.exactlyNItems(2, hasProperty("s", equalTo("Hello"))));
</code></pre>

<p>Example fail output when the list is...</p>

<pre><code>    List&lt;TestClass&gt; list = Arrays.asList(new TestClass("Hello"), new TestClass("World"));
</code></pre>

<p>...will be...</p>

<pre><code>Exception in thread "main" java.lang.AssertionError: 
Expected: a collection containing hasProperty("s", "Hello")
     but: , property 's' was "World". Expected exactly 2 but got 1
</code></pre>

<p>(You might want to customise this a bit)</p>

<p>By the way, "TestClass" is...</p>

<pre><code>public static class TestClass {
    String s;

    public TestClass(String s) {
        this.s = s;
    }

    public String getS() {
        return s;
    }
}
</code></pre>
