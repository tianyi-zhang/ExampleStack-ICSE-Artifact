<p>That's because <code>BigInteger</code> is not, in fact, anything that is close to being a primitive. It is implemented using an array and some additional fields, and the various operations include complex operations. For example, here is the implementation of <code>add</code>:</p>

<pre><code>public BigInteger add(BigInteger val) {
    if (val.signum == 0)
        return this;
    if (signum == 0)
        return val;
    if (val.signum == signum)
        return new BigInteger(add(mag, val.mag), signum);

    int cmp = compareMagnitude(val);
    if (cmp == 0)
        return ZERO;
    int[] resultMag = (cmp &gt; 0 ? subtract(mag, val.mag)
                       : subtract(val.mag, mag));
    resultMag = trustedStripLeadingZeroInts(resultMag);

    return new BigInteger(resultMag, cmp == signum ? 1 : -1);
}
</code></pre>

<p>Primitives in Java are types that are usually implemented directly by the CPU of the host machine. For example, every modern computer has a machine-language instruction for integer addition. Therefore it can also have very simple byte code in the JVM.</p>

<p>A complex type like <code>BigInteger</code> cannot usually be handled that way, and it cannot be translated into simple byte code. It cannot be a primitive.</p>

<hr>

<p>So your question might be "Why no operator overloading in Java". Well, that's part of the language philosophy.</p>

<hr>

<p>And why not make an exception, like for <code>String</code>? Because it's not just one operator that is the exception. You need to make an exception for the operators <code>*</code>, <code>/</code>, <code>+</code>,<code>-</code>, <code>&lt;&lt;</code>, <code>^</code> and so on. And you'll still have some operations in the object itself (like <code>pow</code> which is not represented by an operator in Java), which for primitives are handled by speciality classes (like <code>Math</code>).</p>
