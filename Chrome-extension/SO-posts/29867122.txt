<p>You could create a class to hold the String and the drawable resource</p>

<pre><code>public class Item{

    private final String text;
    private final int icon;

    public Item(final String text, final int icon){
        this.text = text;
        this.icon = icon;
    }

    public String getText(){
        return text;
    }

    public Drawable getIcon(final Context context){
        return context.getResources().getDrawable(this.icon)
    }
}
</code></pre>

<p>and then create an array of Items</p>

<pre><code>Item[] items = new Item[1];
item[0] = new Item("Google Plus",R.drawable.img1);
//...etc
</code></pre>

<p>create a custom ArrayAdapter for Item</p>

<pre><code>public class ItemAdapter extends ArrayAdapter&lt;Item&gt; {

    private Context context;

    public ItemAdapter(Context context, Item[] items) {
        super(context, 0, items);

        this.context = context;
     }

     @Override
     public View getView(int position, View convertView, ViewGroup parent) {

        // Get the data item for this position
        Item item = getItem(position);    

        // Check if an existing view is being reused, otherwise inflate the view
        if (convertView == null) {
           convertView = LayoutInflater.from(getContext()).inflate(R.layout.item_row, parent, false);
        }

        // Lookup view for data population
        TextView tvText = (TextView) convertView.findViewById(R.id.tvText);
        ImageView ivIcon = (ImageView) convertView.findViewById(R.id.ivIcon);

        // Populate the data into the template view using the data object
        tvText.setText(item.getText());
        ivIcon.setImageDrawable(item.getDrawable(this.context));

        // Return the completed view to render on screen
        return convertView;
    }
}
</code></pre>

<p>In the example above <code>R.layout.item_row</code> is a layout that you would have to create containing a <code>TextView</code> with id <code>tvText</code> and an ImageView with id <code>ivIcon</code>.</p>
