<p>Ok, so I solved it... though it doesn't look pretty.</p>

<p>I basically turned all the numbers in the onSurfaceChanged on their heads and it looks the way I want now. </p>

<p>This is my new code:</p>

<pre><code>public void onSurfaceChanged(GL10 unused, int width, int height) {
    // Set the OpenGL viewport to the same size as the surface.
    GLES20.glViewport(0, 0, width, height);

    // Create a new perspective projection matrix. The height will stay the same
    // while the width will vary as per aspect ratio.
    final float ratio = (float) height / width;
    final float left = 1;
    final float right = -1;
    final float bottom = ratio;
    final float top = -ratio;
    final float near = 3.0f;
    final float far = 7.0f;

    //Matrix.frustumM(mProjMatrix, 0, left, right, bottom, top, near, far);

    Matrix.orthoM(mProjMatrix, 0, left, right, bottom, top, near, far);     

     muMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "uMVPMatrix");

     Matrix.setLookAtM(mVMatrix, 0, 0, 0, -3, 0f, 0f, 0f, 0f, 1.0f, 0.0f);

}
</code></pre>
