<p>The best solution is to have an expandable list view in navigation view.See the code below
activity_navigation_view.xml</p>

<pre><code>     &lt;android.support.v4.widget.DrawerLayout 
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:id="@+id/drawer_layout"
        android:layout_height="match_parent"
        android:layout_width="match_parent"
        android:fitsSystemWindows="true"&gt;    
    &lt;include layout="@layout/navigation_view_fragment_container"/&gt;
    &lt;android.support.design.widget.NavigationView
        android:id="@+id/nav_view"
        android:layout_height="match_parent"
        android:layout_width="wrap_content"
        android:layout_gravity="start"
        android:fitsSystemWindows="true"
        app:headerLayout="@layout/navigation_view_header"&gt;
    &lt;ExpandableListView
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:background="@android:color/white"
        android:layout_marginTop="192dp"
        android:id="@+id/navigationmenu"&gt;
   &lt;/ExpandableListView&gt;
   &lt;/android.support.design.widget.NavigationView&gt;
   &lt;/android.support.v4.widget.DrawerLayout&gt;
</code></pre>

<p>The layout navigation header is as below
navigation_view_header.xml</p>

<pre><code>    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
       android:layout_width="match_parent"
       android:layout_height="192dp"
       android:background="#ff5722"
       android:padding="16dp"
       android:theme="@style/ThemeOverlay.AppCompat.Dark"
       android:orientation="vertical"
       android:gravity="bottom"&gt;
  &lt;TextView
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:text="Username"
      android:textAppearance="@style/TextAppearance.AppCompat.Body1"/&gt;
  &lt;/LinearLayout&gt;
</code></pre>

<p>In your navigation view activity, set the adapter for the expandable list view.
NavigationViewActivity.java</p>

<pre><code>  public class NavigationViewActivity extends AppCompatActivity {
        private DrawerLayout mDrawerLayout;
        ExpandableListAdapter mMenuAdapter;
        ExpandableListView expandableList;
        List&lt;ExpandedMenuModel&gt; listDataHeader;
        HashMap&lt;ExpandedMenuModel, List&lt;String&gt;&gt; listDataChild;

   @Override
   protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_navigation_view);
    final ActionBar ab = getSupportActionBar();
    /* to set the menu icon image*/
    ab.setHomeAsUpIndicator(R.drawable.ic_menu);
    ab.setDisplayHomeAsUpEnabled(true);
    mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
    expandableList= (ExpandableListView) findViewById(R.id.navigationmenu);
    NavigationView navigationView = (NavigationView)    findViewById(R.id.nav_view);

    if (navigationView != null) {
        setupDrawerContent(navigationView);
    }

    prepareListData();
    mMenuAdapter = new ExpandableListAdapter(this, listDataHeader,   listDataChild, expandableList);

    // setting list adapter
    expandableList.setAdapter(mMenuAdapter);
   }

    private void prepareListData() {
    listDataHeader = new ArrayList&lt;String&gt;();
    listDataChild = new HashMap&lt;String, List&lt;String&gt;&gt;();

    // Adding data header
    listDataHeader.add("heading1");
    listDataHeader.add("heading2");
    listDataHeader.add("heading3");

    // Adding child data
    List&lt;String&gt; heading1= new ArrayList&lt;String&gt;();
    heading1.add("Submenu of item 1");


    List&lt;String&gt; heading2= new ArrayList&lt;String&gt;();
    heading2.add("Submenu of item 2");
    heading2.add("Submenu of item 2");
    heading2.add("Submenu of item 2");


    listDataChild.put(listDataHeader.get(0), heading1);// Header, Child data
    listDataChild.put(listDataHeader.get(1), heading2);

   }
@Override
public boolean onCreateOptionsMenu(Menu menu) {
    getMenuInflater().inflate(R.menu.menu, menu);
    return true;
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        case android.R.id.home:
            mDrawerLayout.openDrawer(GravityCompat.START);
            return true;
    }
    return super.onOptionsItemSelected(item);
}



private void setupDrawerContent(NavigationView navigationView) {
    navigationView.setNavigationItemSelectedListener(
            new NavigationView.OnNavigationItemSelectedListener() {
                @Override
                public boolean onNavigationItemSelected(MenuItem menuItem) {
                    menuItem.setChecked(true);
                    mDrawerLayout.closeDrawers();
                    return true;
                }
            });
}


@Override
public void onFragmentInteraction(Boolean isDataSaved) {

}
}
</code></pre>

<p>The adapter for expandable list view is as follows</p>

<pre><code>   public class ExpandableListAdapter extends BaseExpandableListAdapter {
       private Context mContext;
       private List&lt;String&gt; mListDataHeader; // header titles

       // child data in format of header title, child title
       private HashMap&lt;String, List&lt;String&gt;&gt; mListDataChild;
       ExpandableListView  expandList;
   public ExpandableListAdapter(Context context, List&lt;String&gt; listDataHeader,HashMap&lt;String, List&lt;String&gt;&gt; listChildData,ExpandableListView mView) 
       {
         this.mContext = context;
         this.mListDataHeader = listDataHeader;
         this.mListDataChild = listChildData;
         this.expandList=mView;
       }

    @Override
     public int getGroupCount() {
       int i= mListDataHeader.size();
       Log.d("GROUPCOUNT",String.valueOf(i));
       return this.mListDataHeader.size();
      }

    @Override
     public int getChildrenCount(int groupPosition) {
     int childCount=0;
     if(groupPosition!=2) 
       {
 childCount=this.mListDataChild.get(this.mListDataHeader.get(groupPosition))
                .size();
       }
      return childCount;
       }

     @Override
      public Object getGroup(int groupPosition) {

      return this.mListDataHeader.get(groupPosition);
     }

    @Override
     public Object getChild(int groupPosition, int childPosition) {
   Log.d("CHILD",mListDataChild.get(this.mListDataHeader.get(groupPosition))
            .get(childPosition).toString());
    return this.mListDataChild.get(this.mListDataHeader.get(groupPosition))
            .get(childPosition);
    }

   @Override
      public long getGroupId(int groupPosition) {
       return groupPosition;
    }

   @Override
       public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }

   @Override
        public boolean hasStableIds() {
        return false;
     }

    @Override
     public View getGroupView(int groupPosition, boolean isExpanded, View   convertView, ViewGroup parent) {
       ExpandedMenuModel headerTitle = (ExpandedMenuModel) getGroup(groupPosition);
        if (convertView == null) {
        LayoutInflater infalInflater = (LayoutInflater) this.mContext
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = infalInflater.inflate(R.layout.listheader, null);
      }
       TextView lblListHeader = (TextView) convertView
            .findViewById(R.id.submenu);
       ImageView headerIcon=    (ImageView)convertView.findViewById(R.id.iconimage);
         lblListHeader.setTypeface(null, Typeface.BOLD);
         lblListHeader.setText(headerTitle.getIconName());
         headerIcon.setImageDrawable(headerTitle.getIconImg());
         return convertView;
     }

       @Override
        public View getChildView(int groupPosition, int childPosition,  boolean isLastChild, View convertView, ViewGroup parent) {
          final String childText = (String) getChild(groupPosition, childPosition);

         if (convertView == null) {
        LayoutInflater infalInflater = (LayoutInflater) this.mContext
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = infalInflater.inflate(R.layout.list_submenu, null);
        }

      TextView txtListChild = (TextView) convertView
            .findViewById(R.id.submenu);

      txtListChild.setText(childText);

      return convertView;
       }

      @Override
       public boolean isChildSelectable(int groupPosition, int childPosition) {
       return true;
          }

      }
</code></pre>

<p>list_submenu.xml is as follows</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
     &lt;LinearLayout   xmlns:android="http://schemas.android.com/apk/res/android"
      android:orientation="vertical" android:layout_width="match_parent"
      android:layout_height="match_parent"&gt;
   &lt;TextView
      android:layout_width="wrap_content"
      android:layout_height="wrap_content"
      android:padding="10dp"
      android:textColor="#000000"
      android:layout_marginLeft="20dp"
      android:textSize="18sp"
      android:id="@+id/submenu"/&gt;
  &lt;/LinearLayout&gt;
</code></pre>

<p>listheader.xml is as follows</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
 &lt;LinearLayout
     android:layout_width="match_parent"
     android:layout_height="2dp"
     android:orientation="vertical"
     xmlns:android="http://schemas.android.com/apk/res/android" &gt;

 &lt;LinearLayout
     android:layout_width="match_parent"
     android:layout_height="match_parent"&gt;
&lt;ImageView
    android:layout_width="50dp"
    android:layout_height="50dp"
    android:paddingBottom="10dp"
    android:paddingLeft="10dp"
    android:paddingTop="10dp"
    android:id="@+id/iconimage"/&gt;
&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:padding="10dp"
    android:textColor="#000000"
    android:textSize="20sp"
    android:id="@+id/submenu"/&gt;
&lt;/LinearLayout&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>I have posted whole code for clarity. Hope this helps.......</p>
