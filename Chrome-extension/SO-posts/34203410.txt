<p>You really don't need to be creating any threads to accomplish your goal.  It's relatively simple to use a Java Timer() object to set up a repeating callback to your code where you can update the text box.   </p>

<p>Exactly what your trying to do here is not 100% clear to me by I'm assuming that you when you click inizio you want the text in the text box to start incrementing such as 1,2,3, etc.  When you hit the reset button you want it to restart from 1 again.  (Note: to make this act like a normal stopwatch you would have the text of the inizio button change to the word 'stop' after the timer is started, etc. )</p>

<p>This code is just to show you the mechanics of using a Timer to set a repeating interval where you can update your UI to show the state of a variable:</p>

<pre><code>package com.example.myapp3;

import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.util.Timer;
import java.util.TimerTask;

public class MyActivity extends Activity {

    TextView time;
    Button start, reset, exit;
    int i;

    Timer timer = null;
    int tickCount;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.main);
        time = (TextView) findViewById(R.id.tempo);
        start = (Button) findViewById(R.id.inizio);
        reset = (Button) findViewById(R.id.reset);
        exit = (Button) findViewById(R.id.exit);

        i = 0;

        reset.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                scheduleTimer();
                tickCount = 0;
                time.setText("");
            }
        });

        start.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                scheduleTimer();
            }
        });
    }


    public void scheduleTimer() {
        if (timer != null) {
            timer.cancel();
        }

        timer = new Timer();

        TimerTask myTask = new TimerTask() {
            @Override
            public void run() {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        final TextView myTv = time;
                        myTv.setText(Integer.toString(++tickCount));
                    }
                });
            }
        };

        timer.schedule(myTask, 1000, 1000);
    }
}
</code></pre>
