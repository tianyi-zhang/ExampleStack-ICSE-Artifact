<p>Actually my other answer didn't work if the target path wasn't a child of the base path.</p>

<p>This should work.</p>

<pre><code>public class RelativePathFinder {

    public static String getRelativePath(String targetPath, String basePath, 
       String pathSeparator) {

     // find common path
     String[] target = targetPath.split(pathSeparator);
     String[] base = basePath.split(pathSeparator);

     String common = "";
     int commonIndex = 0;
     for (int i = 0; i &lt; target.length &amp;&amp; i &lt; base.length; i++) {

      if (target[i].equals(base[i])) {
       common += target[i] + pathSeparator;
       commonIndex++;
      }
     }


     String relative = "";
     // is the target a child directory of the base directory?
     // i.e., target = /a/b/c/d, base = /a/b/
     if (commonIndex == base.length) {
      relative = "." + pathSeparator + targetPath.substring(common.length());
     }
     else {
      // determine how many directories we have to backtrack
      for (int i = 1; i &lt;= commonIndex; i++) {
       relative += ".." + pathSeparator;
      }
      relative += targetPath.substring(common.length());
     }

     return relative;
    }

    public static String getRelativePath(String targetPath, String basePath) {
     return getRelativePath(targetPath, basePath, File.pathSeparator);
    }
}
</code></pre>

<p><hr /></p>

<pre><code>public class RelativePathFinderTest extends TestCase {

    public void testGetRelativePath() {
     assertEquals("./stuff/xyz.dat", RelativePathFinder.getRelativePath(
       "/var/data/stuff/xyz.dat", "/var/data/", "/"));
     assertEquals("../../b/c", RelativePathFinder.getRelativePath("/a/b/c",
       "/a/x/y/", "/"));
    }

}
</code></pre>
