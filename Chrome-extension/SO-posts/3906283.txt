<p>Simple solution: <code>".{6}22.{5}\\s+.{6}33.{5}"</code>. Note that <code>\s+</code> is a <a href="http://www.regular-expressions.info/charclass.html#shorthand" rel="nofollow">shorthand</a> for consequent whitespace elements.</p>

<p>Heres an example:</p>

<pre><code> public static void main(String[] argv) throws FileNotFoundException {
  String input = "yXX00002200000\r\nXX00003300000\nshort", regex = ".{6}22.{5}\\s+.{6}33.{5}", result = "";
  Pattern pattern = Pattern.compile(regex);
  Matcher m = pattern.matcher(input);

  while (m.find()) {
   result = m.group();
   System.out.println(result);
  }
 }
</code></pre>

<p>With output:</p>

<pre><code>XX00002200000
XX00003300000
</code></pre>

<p>To play around with Java Regex you can use: <a href="http://myregexp.com/" rel="nofollow">Regular Expression Editor</a> (free online editor)</p>

<p>Edit: I think that you are changing the input when you are reading data, try:</p>

<pre><code>public static String readFile(String filename) throws FileNotFoundException {
    Scanner sc = new Scanner(new File(filename));

    StringBuilder sb = new StringBuilder();
    while (sc.hasNextLine())
        sb.append(sc.nextLine());
    sc.close();

    return sb.toString();
}
</code></pre>

<p>Or</p>

<pre><code>static String readFile(String path) {
    FileInputStream stream = null;
    FileChannel channel = null;
    MappedByteBuffer buffer = null;

    try {
        stream = new FileInputStream(new File(path));
        channel = stream.getChannel();
        buffer = channel.map(FileChannel.MapMode.READ_ONLY, 0,
                channel.size());
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            stream.close();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    return Charset.defaultCharset().decode(buffer).toString();
}
</code></pre>

<p>With imports like:</p>

<pre><code>import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
</code></pre>
