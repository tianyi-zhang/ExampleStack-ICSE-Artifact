<p>try this one</p>

<pre><code>public static Object createObjectFromJSON(String jsonString, Map&lt;Class, AbstractAdapter&gt;map,Class classType) {
        GsonBuilder builder = new GsonBuilder();
        if(map!=null) {
            for (Entry&lt;Class, AbstractAdapter&gt; entry : map.entrySet()) {
                builder.registerTypeAdapter(entry.getKey(), entry.getValue());
            }
        }
        builder.setPrettyPrinting();
        builder.serializeNulls();
        Gson  gsonExt = builder.create();
        return gsonExt.fromJson(jsonString, classType);
    }
</code></pre>

<p>You have to define your own AbstractAdapter classes </p>

<pre><code>public class Adapter extends AbstractAdapter{

        @Override
        public AbstractSureCallDataFile deserialize(JsonElement json, Type typeOfT,
                JsonDeserializationContext context) throws JsonParseException  {
            JsonObject jsonObject =  json.getAsJsonObject();
            JsonPrimitive prim = (JsonPrimitive) jsonObject.get(AbstractAdapter.CLASSNAME);
            String className = prim.getAsString();

            Class&lt;?&gt; klass = null;
            try {
                klass = Class.forName(className);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                throw new JsonParseException(e.getMessage());
            }
            return context.deserialize(jsonObject.get(AbstractAdapter.INSTANCE), klass);
        }

        @Override
        public JsonElement serialize(Serializable src, Type typeOfSrc,
                JsonSerializationContext context) {

            JsonObject retValue = new JsonObject();
            String className = src.getClass().getCanonicalName();
            retValue.addProperty(AbstractAdapter.CLASSNAME, className);
            JsonElement elem = context.serialize(src);
            retValue.add(AbstractAdapter.INSTANCE, elem);
            return retValue;
        }

}
</code></pre>

<p>and call will be</p>

<pre><code>Map&lt;Class, AbstractAdapter&gt; map=new HashMap&lt;&gt;();
                            map.put(Xyz.class, new Adapter());
                            Object obj= createObjectFromJSON(line, map, MainObjectClass.class);
</code></pre>
