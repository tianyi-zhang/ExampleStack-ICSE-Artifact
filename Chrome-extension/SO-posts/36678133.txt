<p>The <code>MaterialDrawer</code> is built with flexibility in mind. It takes objects which imlements the <code>IDrawerItem</code> interface. So you can easily add your own elements just by implementing the <code>IDrawerItem</code> interface. There are already some default <code>DrawerItems</code> like the <code>PrimaryDrawerItem</code> which you can depend on (just extend it) or you can go with a complete custom approach. </p>

<p>To make things easier the <code>MaterialDrawer</code> comes with the <code>AbstractDrawerItem</code> which already implements default behaviors needed for most items. </p>

<p>You can check out the custom DrawerItems added in the sample application <a href="https://github.com/mikepenz/MaterialDrawer/tree/develop/app/src/main/java/com/mikepenz/materialdrawer/app/drawerItems" rel="nofollow">here</a>.</p>

<p>A complete custom item is the <a href="https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/drawerItems/IconDrawerItem.java" rel="nofollow">IconDrawerItem</a></p>

<pre><code>public class IconDrawerItem extends AbstractDrawerItem&lt;IconDrawerItem, IconDrawerItem.ViewHolder&gt; {
    protected ImageHolder icon;
    protected ImageHolder selectedIcon;

    protected boolean iconTinted = false;

    protected ColorHolder iconColor;
    protected ColorHolder selectedIconColor;
    protected ColorHolder disabledIconColor;

    //GETTER &amp; SETTER REMOVED TO KEEP THE SNIPPET SMALL

    @Override
    public int getType() {
        return R.id.material_drawer_item_icon_only;
    }

    @Override
    @LayoutRes
    public int getLayoutRes() {
        return R.layout.material_drawer_item_icon_only;
    }

    @Override
    public void bindView(ViewHolder viewHolder) {
        Context ctx = viewHolder.itemView.getContext();

        //set the identifier from the drawerItem here. It can be used to run tests
        viewHolder.itemView.setId(hashCode());

        //get the correct color for the icon
        int iconColor;
        if (this.isEnabled()) {
            iconColor = ColorHolder.color(getIconColor(), ctx, R.attr.material_drawer_primary_icon, R.color.material_drawer_primary_icon);
        } else {
            iconColor = ColorHolder.color(getDisabledIconColor(), ctx, R.attr.material_drawer_hint_icon, R.color.material_drawer_hint_icon);
        }
        int selectedIconColor = ColorHolder.color(getSelectedIconColor(), ctx, R.attr.material_drawer_selected_text, R.color.material_drawer_selected_text);

        //get the drawables for our icon and set it
        Drawable icon = ImageHolder.decideIcon(getIcon(), ctx, iconColor, isIconTinted(), 1);
        Drawable selectedIcon = ImageHolder.decideIcon(getSelectedIcon(), ctx, selectedIconColor, isIconTinted(), 1);
        ImageHolder.applyMultiIconTo(icon, iconColor, selectedIcon, selectedIconColor, isIconTinted(), viewHolder.icon);

        //call the onPostBindView method to trigger post bind view actions (like the listener to modify the item if required)
        onPostBindView(this, viewHolder.itemView);
    }

    @Override
    public ViewHolderFactory getFactory() {
        return new ItemFactory();
    }

    public static class ItemFactory implements ViewHolderFactory&lt;ViewHolder&gt; {
        public ViewHolder create(View v) {
            return new ViewHolder(v);
        }
    }

    protected static class ViewHolder extends RecyclerView.ViewHolder {
        private View view;
        protected ImageView icon;

        private ViewHolder(View view) {
            super(view);
            this.view = view;
            this.icon = (ImageView) view.findViewById(R.id.material_drawer_icon);
        }
    }
}
</code></pre>

<p>There are no limitations. You just have to define the type as identifier, the layout which is used, and implement the <code>bindView()</code> which will be called to set the data to all views. </p>
