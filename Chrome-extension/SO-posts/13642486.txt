<p>As plinth and David van Driessche already pointed out in their answers, text extration from PDF file is non-trivial. Fortunately the classes in the parser package of iText do most of the heavy lifting for you. You have already found at least one class from that package,<code>PdfTextExtractor,</code>but this class essentially is a convenience utility for using the parser functionality of iText if you're only interested in the plain text of the page. In your case you have to look at the classes in that package more intensely.</p>

<p>A starting point to get information on the topic of text extraction with iText is section 15.3 <em>Parsing PDFs</em> of <a href="http://itextpdf.com/book/index.php">iText in Action â€” 2nd Edition</a>, especially the method<code>extractText</code>of the sample <a href="http://itextpdf.com/examples/iia.php?id=275">ParsingHelloWorld.java</a>:</p>

<pre><code>public void extractText(String src, String dest) throws IOException
{
    PrintWriter out = new PrintWriter(new FileOutputStream(dest));
    PdfReader reader = new PdfReader(src);
    RenderListener listener = new MyTextRenderListener(out);
    PdfContentStreamProcessor processor = new PdfContentStreamProcessor(listener);
    PdfDictionary pageDic = reader.getPageN(1);
    PdfDictionary resourcesDic = pageDic.getAsDict(PdfName.RESOURCES);
    processor.processContent(ContentByteUtils.getContentBytesForPage(reader, 1), resourcesDic);
    out.flush();
    out.close();
}
</code></pre>

<p>which makes use of the <code>RenderListener</code>implementation <a href="http://itextpdf.com/examples/iia.php?id=282">MyTextRenderListener.java</a>:</p>

<pre><code>public class MyTextRenderListener implements RenderListener
{
    [...]

    /**
     * @see RenderListener#renderText(TextRenderInfo)
     */
    public void renderText(TextRenderInfo renderInfo) {
        out.print("&lt;");
        out.print(renderInfo.getText());
        out.print("&gt;");
    }
}
</code></pre>

<p>While this<code>RenderListener</code>implementation merely outputs the text, the <a href="http://api.itextpdf.com/itext/com/itextpdf/text/pdf/parser/TextRenderInfo.html">TextRenderInfo</a> object it inspects offers way more information: </p>

<pre><code>public LineSegment getBaseline();    // the baseline for the text (i.e. the line that the text 'sits' on)
public LineSegment getAscentLine();  // the ascentline for the text (i.e. the line that represents the topmost extent that a string of the current font could have)
public LineSegment getDescentLine(); // the descentline for the text (i.e. the line that represents the bottom most extent that a string of the current font could have)
public float getRise()             ; // the rise which  represents how far above the nominal baseline the text should be rendered

public String getText();             // the text to render
public int getTextRenderMode();      // the text render mode
public DocumentFont getFont();       // the font
public float getSingleSpaceWidth();  // the width, in user space units, of a single space character in the current font

public List&lt;TextRenderInfo&gt; getCharacterRenderInfos(); // details useful if a listener needs access to the position of each individual glyph in the text render operation
</code></pre>

<p>Thus, if your<code>RenderListener</code>in addition to inspecting the text with<code>getText()</code>also considers<code>getBaseline()</code>or even<code>getAscentLine()</code>and<code>getDescentLine().</code>you have all the coordinates you will likely need.</p>

<p><strong>PS:</strong> There is a wrapper class for the code in<code>ParsingHelloWorld.extractText()</code>, <a href="http://api.itextpdf.com/itext/com/itextpdf/text/pdf/parser/PdfReaderContentParser.html">PdfReaderContentParser</a>, which allows you to simply write the following given a<code>PdfReader reader,</code> an<code>int page,</code>and a<code>RenderListener renderListener:</code></p>

<pre><code>PdfReaderContentParser parser = new PdfReaderContentParser(reader);
parser.processContent(page, renderListener);
</code></pre>
