<p>After doing lots of R&amp;D i got my answer for my question.</p>

<pre><code>   public static final int DIALOG_DOWNLOAD_JSON_PROGRESS = 0;
    private ProgressDialog mProgressDialog;

    Button mButtonHelp,mButtonDelete,mButtonRefresh;
    ArrayList&lt;HashMap&lt;String, Object&gt;&gt; MyArrList;
    public static final String TAG_DOCUMENT = "docs";
    public static final String TAG_TITLE = "name";
    public static final String TAG_PDF_PATH = "path";
    public static final String TAG_IMAGEPATH = "imagepath";
    JSONArray document = null;
    ListView lstView1;
//  Default url
    private static String url = "your url";
    Button mPdf_list_btn_more;
    ProgressDialog pDialog;
    // flag for Internet connection status
    Boolean isInternetPresent = false;
    ConnectionDetector cd;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Remove Titlebar
                this.requestWindowFeature(Window.FEATURE_NO_TITLE);

                // Remove Notificationbar
                this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                        WindowManager.LayoutParams.FLAG_FULLSCREEN);
                getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN);
        setContentView(R.layout.pdf_list);

         // Permission StrictMode
        if (android.os.Build.VERSION.SDK_INT &gt; 9) {
            StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
            StrictMode.setThreadPolicy(policy);
        }

        lstView1 = (ListView)findViewById(R.id.listView1);

        mPdf_list_btn_more = (Button)findViewById(R.id.mPdf_list_btn_more);
        mPdf_list_btn_more.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                Intent i = new Intent(PDF_List_New.this,Info_Screen.class);
                startActivity(i);
            }
        });

        mButtonHelp = (Button)findViewById(R.id.mButtonHelp);
        mButtonHelp.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                Toast.makeText(getApplicationContext(), "Help", 2).show();
            }
        });

        mButtonDelete = (Button)findViewById(R.id.mButtonDelete);
        mButtonDelete.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                Toast.makeText(getApplicationContext(), "Delete", 2).show();
            }
        });

        mButtonRefresh = (Button)findViewById(R.id.mButtonRefresh);
        mButtonRefresh.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub

                new DownloadJSONFileAsync().execute();
            }
        });


        // Download JSON File   
        new DownloadJSONFileAsync().execute();

    }

      @Override
        protected Dialog onCreateDialog(int id) {
            switch (id) {
            case DIALOG_DOWNLOAD_JSON_PROGRESS:
                mProgressDialog = new ProgressDialog(this);
                mProgressDialog.setMessage("Please Wait.....");
                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                mProgressDialog.setCancelable(true);
                mProgressDialog.show();
                return mProgressDialog;
            default:
                return null;
            }
        }

      // Show All Content
        public void ShowAllContent()
        {
            // listView1
            lstView1 = (ListView)findViewById(R.id.listView1); 
            lstView1.setAdapter(new ImageAdapter(PDF_List_New.this, MyArrList));

        }

        // Download JSON in Background
        public class DownloadJSONFileAsync extends AsyncTask&lt;String, Void, Void&gt; {

            protected void onPreExecute() {
                super.onPreExecute();
                showDialog(DIALOG_DOWNLOAD_JSON_PROGRESS);

                 ImageAdapter imgadapter=new ImageAdapter(PDF_List_New.this, MyArrList);
                   imgadapter.notifyDataSetChanged();
                   lstView1.invalidate();
            }

            @Override
            protected Void doInBackground(String... params) {
                // TODO Auto-generated method stub


                ServiceHandler sh = new ServiceHandler();
                 // Making a request to url and getting response
                String jsonStr = sh.makeServiceCall(url, ServiceHandler.GET);

                Log.d("Response: ", "&gt; " + jsonStr);


                if (jsonStr != null) {
                    try {
                        JSONObject jsonObj = new JSONObject(jsonStr);
                        MyArrList = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();
                        HashMap&lt;String, Object&gt; map;

                        // Getting JSON Array node
                           document = jsonObj.getJSONArray(TAG_DOCUMENT);
                        // looping through All Contacts
                           for (int i = 0; i &lt; document.length(); i++) {
                               JSONObject c = document.getJSONObject(i);
                               String name = c.getString(TAG_TITLE);
                               String image_path = c.getString(TAG_IMAGEPATH);
                               String pdf_path = c.getString(TAG_PDF_PATH);
                               Log.i("Name:---&gt;", name);
                               Log.i("Image_Path---&gt;",image_path);
                               Log.i("PDF Download Path", pdf_path);

                               // tmp hashmap for single contact

                               map = new HashMap&lt;String, Object&gt;();
                               map.put("name", (String)c.getString("name"));
                               map.put("imagepath", (Bitmap)loadBitmap(c.getString("imagepath")));
                               MyArrList.add(map);

                           }

                    }
                    catch(JSONException e){

                    }
                   }
                else {
                    Log.e("ServiceHandler", "Couldn't get any data from the url");
                }


                return null;
            }

            protected void onPostExecute(Void unused) {
                ShowAllContent(); // When Finish Show Content
                dismissDialog(DIALOG_DOWNLOAD_JSON_PROGRESS);
                removeDialog(DIALOG_DOWNLOAD_JSON_PROGRESS);
            }


        }

        /*** Get JSON Code from URL ***/
        public String getJSONUrl(String url) {
            StringBuilder str = new StringBuilder();
            HttpClient client = new DefaultHttpClient();
            HttpGet httpGet = new HttpGet(url);
            try {
                HttpResponse response = client.execute(httpGet);
                StatusLine statusLine = response.getStatusLine();
                int statusCode = statusLine.getStatusCode();
                if (statusCode == 200) { // Download OK
                    HttpEntity entity = response.getEntity();
                    InputStream content = entity.getContent();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(content));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        str.append(line);
                    }
                } else {
                    Log.e("Log", "Failed to download file..");
                }
            } catch (ClientProtocolException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str.toString();
        }

        /***** Get Image Resource from URL (Start) *****/
        private static final String TAG = "Image";
        private static final int IO_BUFFER_SIZE = 4 * 1024;
        public static Bitmap loadBitmap(String url) {
            Bitmap bitmap = null;
            InputStream in = null;
            BufferedOutputStream out = null;

            try {
                in = new BufferedInputStream(new URL(url).openStream(), IO_BUFFER_SIZE);

                final ByteArrayOutputStream dataStream = new ByteArrayOutputStream();
                out = new BufferedOutputStream(dataStream, IO_BUFFER_SIZE);
                copy(in, out);
                out.flush();

                final byte[] data = dataStream.toByteArray();
                BitmapFactory.Options options = new BitmapFactory.Options();
                //options.inSampleSize = 1;

                bitmap = BitmapFactory.decodeByteArray(data, 0, data.length,options);
            } catch (IOException e) {
                Log.e(TAG, "Could not load Bitmap from: " + url);
            } finally {
                closeStream(in);
                closeStream(out);
            }

            return bitmap;
        }

         private static void closeStream(Closeable stream) {
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (IOException e) {
                        android.util.Log.e(TAG, "Could not close stream", e);
                    }
                }
            }

         private static void copy(InputStream in, OutputStream out) throws IOException {
            byte[] b = new byte[IO_BUFFER_SIZE];
            int read;
            while ((read = in.read(b)) != -1) {
                out.write(b, 0, read);
            }
        }


public class ImageAdapter extends BaseAdapter {
     private Context context;
     TextView txtPicName;
     private ArrayList&lt;HashMap&lt;String, Object&gt;&gt; MyArr = new ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();

     public ImageAdapter(Context c, ArrayList&lt;HashMap&lt;String, Object&gt;&gt; myArrList) 
     {
        // TODO Auto-generated method stub
         context = c;
         MyArr = myArrList;
     } 
    @Override
    public int getCount() {
        // TODO Auto-generated method stub
         return MyArr.size();
    }

    @Override
    public Object getItem(int position) {
        // TODO Auto-generated method stub
         return position;
    }

    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
         return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // TODO Auto-generated method stub
        LayoutInflater inflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);


        if (convertView == null) {
            convertView = inflater.inflate(R.layout.list_item, null); 
        }

        // ColImage
        ImageView imageView = (ImageView) convertView.findViewById(R.id.mImageview_pdf);

         try
         {
             imageView.setImageBitmap((Bitmap)MyArr.get(position).get("imagepath"));
         } catch (Exception e) {
             // When Error
             imageView.setImageResource(android.R.drawable.ic_menu_report_image);
         }



        // ColImgName
        txtPicName = (TextView) convertView.findViewById(R.id.mtextview_title);

        txtPicName.setText(MyArr.get(position).get("name").toString()); 

        Button button1 = (Button) convertView.findViewById(R.id.button1);
        button1.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                // TODO Auto-generated method stub
                Toast.makeText(context, "Clicked", 2).show();
//              downloadPdfContent("http://thetilesofindia.com/magazines/SPECIAL INTERNATIONAL ISSUE - APR-MAY 2013.pdf");
            }
        });

        return convertView;
    }


    public void downloadPdfContent(String urlToDownload){

        try {

            String fileName="xyz";
        String fileExtension=".pdf";

//      download pdf file.

           URL url = new URL(urlToDownload);
           HttpURLConnection c = (HttpURLConnection) url.openConnection();
           c.setRequestMethod("GET");
           c.setDoOutput(true);
           c.connect();
           String PATH = Environment.getExternalStorageDirectory() + "/mydownload/";
           File file = new File(PATH);
           file.mkdirs();
           File outputFile = new File(file, fileName+fileExtension);
           FileOutputStream fos = new FileOutputStream(outputFile);
           InputStream is = c.getInputStream();
           byte[] buffer = new byte[1024];
           int len1 = 0;
           while ((len1 = is.read(buffer)) != -1) {
               fos.write(buffer, 0, len1);
           }
           fos.close();
           is.close();

          System.out.println("--pdf downloaded--ok--"+urlToDownload);
       } catch (Exception e) {
           e.printStackTrace();

       }
}

}
</code></pre>
