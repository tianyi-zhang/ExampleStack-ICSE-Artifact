<p>I finally got it. Try setting <code>graphics.setComposite(AlphaComposite.Src)</code>. In my own library code I do that, but I have never given it much thought... </p>

<p>Because the default composite is <code>AlphaComposite.SrcOver</code>, you're actually <em>composing</em> semi-transparent pixels onto completely transparent pixels, both with non-premultiplied alpha, so there is a difference here. Using <code>AlphaComposite.Src</code> you basically say that only the source matters.</p>

<p>Also note that lower alpha values means more transparent. This means that for low alpha, the RGB values has less significance, as they are multiplied by alpha when composing (ie. <code>17/255</code> for your example image), thus the diff will not make a difference when composed onto an opaque background. </p>

<p>So I'd say: Somewhat unexpected? Yes. Acceptable? Probably, yes. :-)</p>

<hr>

<p>Here's an updated version of your code, using <code>AlphaComposite.Src</code>, and the output with no diff:</p>

<pre><code>public static void main(String[] args) {
    //it also happens with TYPE_INT_ARGB
    BufferedImage bi1 = new BufferedImage(1, 1, BufferedImage.TYPE_4BYTE_ABGR);
    // rather arbitrary. low values of alpha tend to give more difference
    int argb = 0x11663322;
    bi1.setRGB(0, 0, argb);
    int p1 = bi1.getRGB(0, 0);
    BufferedImage bi2 = new BufferedImage(bi1.getWidth(), bi1.getHeight(),
            bi1.getType());
    Graphics2D graphics = bi2.createGraphics();
    try {
        graphics.setComposite(AlphaComposite.Src);
        graphics.drawImage(bi1, 0, 0, null);
    }
    finally {
        graphics.dispose();
    }
    int p2 = bi2.getRGB(0, 0);
    System.out.printf("im1: %08x %s ", p1, formatARGB(p1));
    System.out.printf("im2: %08x %s %s\n", p2,
            formatARGB(p2), (p1 == p2 ? "" : "DIF"));
}

public static String formatARGB(int v) {
    return String.format("(%d,%d,%d,%d)",
            (v &gt;&gt; 24) &amp; 0xFF, (v &gt;&gt; 16) &amp; 0xFF, (v &gt;&gt; 8) &amp; 0xFF, v &amp; 0xFF);
}
</code></pre>

<p>Output: </p>

<pre><code>im1: 11663322 (17,102,51,34) im2: 11663322 (17,102,51,34)
</code></pre>
