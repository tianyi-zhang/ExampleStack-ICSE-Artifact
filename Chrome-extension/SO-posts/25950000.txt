<p>Let's revisit the tutorial <a href="http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#sorting" rel="nofollow">How to Use Tables: Sorting and Filtering</a>.</p>

<blockquote>
  <p>In addition to reordering the results, a table sorter can also specify which rows will be displayed. This is known as filtering. <code>TableRowSorter</code> implements filtering using <a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/RowFilter.html" rel="nofollow">javax.swing.RowFilter</a> objects. <code>RowFilter</code> implements several factory methods that create common kinds of filters.</p>
</blockquote>

<p>Things to look at:</p>

<ul>
<li><code>TableRowSorter</code>. - We know we're going to need this. </li>
<li>Oh, they gave us a link to <code>RowFilter</code> docs. Let's open that up in a new browser tab.</li>
<li>But first the last line <em>"<code>RowFilter</code> implements several factory methods that create common kinds of filters."</em>. We should probably look to see what those <em>"common kinds"</em> are.</li>
</ul>

<p>RowFilter javadoc</p>

<ul>
<li>Static methods - <code>andFilter</code>, <code>dateFilter</code>, <code>notFilter</code>, <code>numberFilter</code>, <code>orFilter</code>, <code>regexFilter</code>. Ok, I recognize the <code>regexFilter</code> from the tutorial. But those others, just by their names alone, don't sound too promising. Maybe we should implement our own. Let's look at the rest of the javadoc</li>
</ul>

<blockquote>
  <p><code>javax.swing.RowFilter&lt;M,I&gt;</code></p>
  
  <p>Type Parameters:
       <br/><code>M</code> - the type of the model; for example <code>PersonModel</code>
       <br/><code>I</code> - the type of the identifier; when using <code>TableRowSorter</code> this will be <code>Integer</code></p>
</blockquote>

<p>Ok so from this we know two thing. When we create our custom <code>RowFilter</code>, we should pass a <code>TableModel</code> type as the first parameter, and type <code>Integer</code> to represent the row number.</p>

<blockquote>
  <p><code>RowFilter</code> is used to filter out entries from the model so that they are not shown in the view. For example, a <code>RowFilter</code> associated with a <code>JTable</code> might only allow rows that contain a column with a specific string. The meaning of entry depends on the component type. For example, when a filter is associated with a <code>JTable</code>, an entry corresponds to a row; when associated with a <code>JTree</code>, an entry corresponds to a node.</p>
  
  <p>Subclasses must override the <code>include</code> method to indicate whether the entry should be shown in the view. The <code>Entry</code> argument can be used to obtain the values in each of the columns in that entry </p>
</blockquote>

<p>So based on those two paragraghs, we know the <code>RowFilter</code> is used to filter out rows we don't want in the view, and that if we create our own, we will need to override the <code>include</code> method to return whether a row should be shown or not. And also the <code>include</code> method will have an <code>Entry</code> argument, from which we can obtain details that may be o interest to us, when determining which row to not return true on. Here's the basic example (guideline) the javadoc gives us</p>

<pre><code>RowFilter&lt;TableModel, Integer&gt; filter = new RowFilter&lt;TableModel, Integer&gt;() {
    @Override
    public boolean include(RowFilter.Entry&lt;? extends TableModel, ? extends Integer&gt; entry) {
        // do your logic here to return true or false.
    }
};
</code></pre>

<p>Cool, but what is this <code>RowFilter.Entry</code> class, and what interesting information can it provide to us? Let's look at <a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/RowFilter.Entry.html" rel="nofollow">the javadoc</a>.</p>

<p>One interesting thing we can see is the <a href="http://docs.oracle.com/javase/8/docs/api/javax/swing/RowFilter.Entry.html#getModel--" rel="nofollow"><code>getModel()</code></a> method. From that we can get our table model. So let's finish the implementation</p>

<pre><code>private static final int CHECKBOX_COLUMN = 4;
...
RowFilter&lt;TableModel, Integer&gt; filter = new RowFilter&lt;TableModel, Integer&gt;() {
    @Override
    public boolean include(RowFilter.Entry&lt;? extends TableModel, ? extends Integer&gt; entry) {
        int modelRow = entry.getIdentifier();
        Boolean checked = (Boolean)entry.getModel().getValueAt(modelRow, CHECKBOX_COLUMN);
        return checked;
    }
};
</code></pre>

<p>Not much too it. Now all that's left is setting the filter to the sorter, as you learned from the Oracle tutorial already, using the regex filter.</p>

<p>Here's a fill demo code. It doesn't implement the <code>ActionListener</code> for the button press. I didn't want to do <em>everything</em> for you. You should have enough information to handle that on your own :-D Happy Learning!</p>

<pre><code>import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class TableBooleanFilterDemo {

    public TableBooleanFilterDemo() {
        JTable table = getTable();
        TableRowSorter&lt;TableModel&gt; rowSorter = new TableRowSorter&lt;&gt;(table.getModel());
        RowFilter filter = getRowFilter();
        rowSorter.setRowFilter(filter);
        table.setRowSorter(rowSorter);

        JFrame frame = new JFrame();
        frame.add(new JScrollPane(table));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    private static final int CHECKBOX_COLUMN = 4;

    private RowFilter getRowFilter() {
        RowFilter&lt;TableModel, Integer&gt; filter = new RowFilter&lt;TableModel, Integer&gt;() {
            @Override
            public boolean include(RowFilter.Entry&lt;? extends TableModel, ? extends Integer&gt; entry) {
                int modelRow = entry.getIdentifier();
                Boolean checked = (Boolean)entry.getModel().getValueAt(modelRow, CHECKBOX_COLUMN);
                return checked;
            }
        };
        return filter;
    }

    private JTable getTable() {
        Object[][] data = {
            {"Kathy", "Smith",
                "Snowboarding", new Integer(5), new Boolean(false)},
            {"John", "Doe",
                "Rowing", new Integer(3), new Boolean(true)},
            {"Sue", "Black",
                "Knitting", new Integer(2), new Boolean(false)},
            {"Jane", "White",
                "Speed reading", new Integer(20), new Boolean(true)},
            {"Joe", "Brown",
                "Pool", new Integer(10), new Boolean(false)}
        };
        String[] columnNames = {"First Name",
            "Last Name",
            "Sport",
            "# of Years",
            "Vegetarian"};
        return new JTable(new DefaultTableModel(data, columnNames) {
            public Class getColumnClass(int c) {
                return getValueAt(0, c).getClass();
            }
        });
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable(){
            public void run() {
                new TableBooleanFilterDemo();
            }
        });
    }
}
</code></pre>

<p>To be honest, I've never had to implement my own <code>RowFilter</code>, but the above is the process I pretty much go through when trying to learn something new. Took me longer to write this answer, then to learn how to do it. Gotta learn to read documentation, not just tutorials. Tutorials are a good starting point, but once you get to more complicated matters, you need to dig deeper. Same with any new technology you want to learn.</p>
