<p>The <code>String.CASE_INSENSITIVE_ORDER</code> - comparator does not sort as required in the question. The result that was asked for was an order like </p>

<blockquote>
  <p>a, A, b, B ...</p>
</blockquote>

<p>Instead it handles "a" and "A" as "equal", which means an entry with key "a" would override an entry with the key "A" in the sorted-map. The outcome would rather be something like "a, B", depending on what was added to the map last.</p>

<p>One way to achieve the behaviour would be to use a custom-comparator like this:
   </p>

<pre><code>Comparator&lt;String&gt; comparator = new Comparator&lt;String&gt;() {

    public int compare(String s1, String s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        int min = Math.min(n1, n2);
        for (int i = 0; i &lt; min; i++) {
            char c1 = s1.charAt(i);
            char c2 = s2.charAt(i);
            if (c1 != c2) {
                if (isAtoZ(c1) &amp;&amp; isAtoZ(c2)) {
                    return getSortPosition(c1) - getSortPosition(c2);
                }
                return c1 - c2;
            }
        }
        return n1 - n2;
    }


    private boolean isAtoZ(char c) {
        return c &gt; 64 &amp;&amp; c &lt; 123;
    }

    private int getSortPosition(char c) {
        if (c &lt; 91) {
            // upper case
            return 2 * (c - 64); // A = 2, B = 4 ...
        } else if (c &gt; 96) {
            // lower case
            return (2 * (c - 96)) - 1; // a = 1, b = 3 ...
        } else {
            // between Z and a: [, /, ], ^, _, `
            return c; // higher than the value for 'z'
        }
    }

};
</code></pre>
