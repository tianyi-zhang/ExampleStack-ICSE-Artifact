<p>I don't think you can send UDP via emulator or at least it is not that simple. Try it on your real device.</p>

<p>I got it working with this</p>

<pre><code>public class WakeOnLAN {

    public static final int DEFAULT_PORT = 9;

    private static final String TAG = WakeOnLAN.class.getSimpleName();
    private static final String MAC_REGEX = "([0-9a-fA-F]{2}[-:]){5}[0-9a-fA-F]{2}";

    public static int sendPacket(String ipStr, String macStr) {
        return sendPacket(ipStr, macStr, DEFAULT_PORT);
    }

    public static int sendPacket(String ipStr, String macStr, int port) throws IllegalArgumentException {
        if (port &lt; 0 || port &gt; 65535) {
            throw new IllegalArgumentException("Port must be in the range [0, 65535]. Magic packet is usually used on port 7 or 9");
        }

        byte[] macBytes = getMacBytes(macStr);
        byte[] bytes = new byte[6 + 16 * macBytes.length];

        try {
            for (int i = 0; i &lt; 6; i++) {
                bytes[i] = (byte) 0xff;
            }
            for (int i = 6; i &lt; bytes.length; i += macBytes.length) {
                System.arraycopy(macBytes, 0, bytes, i, macBytes.length);
            }

            InetAddress address = InetAddress.getByName(ipStr);
            DatagramPacket packet = new DatagramPacket(bytes, bytes.length, address, port);
            DatagramSocket socket = new DatagramSocket();
            socket.send(packet);
            socket.close();

            Log.d(TAG, "Wake-on-LAN packet sent.");

            return 0;
        } catch (Exception e) {
            Log.e(TAG, "Failed to send Wake-on-LAN packet:" + e);
            return -1;
        }
    }

    private static byte[] getMacBytes(String macStr) throws IllegalArgumentException {

        if (!macStr.matches(MAC_REGEX)) {
            throw new IllegalArgumentException("Invalid MAC address");
        }

        byte[] bytes = new byte[6];
        String[] hex = macStr.split("(:|\\-)");

        try {
            for (int i = 0; i &lt; 6; i++) {
                bytes[i] = (byte) Integer.parseInt(hex[i], 16);
            }
        } catch (NumberFormatException e) {
            // Should not happen, the regex forbids it, but it doesn't compile otherwise.
            throw new IllegalArgumentException("Invalid hex digit in MAC address.");
        }
        return bytes;
    }
}
</code></pre>

<p>And the Activity</p>

<pre><code>public class WakeOnLanActivity extends AppCompatActivity implements View.OnClickListener {


    private static final String TEST_IP = "192.168.1.255";
    private static final String MAC = "74:D4:35:E7:BA:DC";

    private Button btnSend;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.wake_on_lan_demo);
        setWidgetConnections();
    }

    private void setWidgetConnections() {
        btnSend = (Button) findViewById(R.id.btnSend);
        btnSend.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new WakeOnLanTask(TEST_IP, MAC, 9).execute();
            }
        });
    }


    class WakeOnLanTask extends AsyncTask&lt;Void, Void, Integer&gt; {

        private String IP;
        private String MAC;
        private int port;

        public WakeOnLanTask(String ip, String mac, int port) {
            this.IP = ip;
            this.MAC = mac;
            this.port = port;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected Integer doInBackground(Void... args) {
            return WakeOnLAN.sendPacket(IP, MAC, port);
        }

        @Override
        protected void onPostExecute(Integer integer) {
            super.onPostExecute(integer);
        }
    }

    @Override
    public void onClick(View view) {
    }

}
</code></pre>
