<p>It's a a search tree, so you can always get the next key/entry</p>

<p>You need smth like  (I didn't test the code, but it's as simple as it gets)</p>

<pre><code>java.util.NavigableMap&lt;K, V&gt; map=...
for (Entry&lt;K, V&gt; e = map.firstEntry(); e!=null; e = map.higherEntry(e.getKey())) {
  process(e)
}
</code></pre>

<p>for clarity this is <code>higherEntry</code>, so it's not recursive. There you have it :)</p>

<pre><code>final Entry&lt;K,V&gt; getHigherEntry(K key) {
    Entry&lt;K,V&gt; p = root;
    while (p != null) {
        int cmp = compare(key, p.key);
        if (cmp &lt; 0) {
            if (p.left != null)
                p = p.left;
            else
                return p;
        } else {
            if (p.right != null) {
                p = p.right;
            } else {
                Entry&lt;K,V&gt; parent = p.parent;
                Entry&lt;K,V&gt; ch = p;
                while (parent != null &amp;&amp; ch == parent.right) {
                    ch = parent;
                    parent = parent.parent;
                }
                return parent;
            }
        }
    }
    return null;
}
</code></pre>
