<p>There is one more event you miss: onInterceptTouchEvent. It`s must contain the same logic as onTouchEvent.</p>

<p>My complete solution is based on <a href="http://stackoverflow.com/a/18661040">this</a>  answer. It will allow you to enable/disable paging in any direction in any time you need.</p>

<p><strong>1. Create enum</strong></p>

<pre><code> public enum SwipeDirection {
    all, left, right, none ;
}
</code></pre>

<p><strong>2.Extend ViewPager</strong></p>

<pre><code>public class CustomViewPager extends ViewPager {

    private float initialXValue;
    private SwipeDirection direction;

    public CustomViewPager(Context context, AttributeSet attrs) {
        super(context, attrs);
        this.direction = SwipeDirection.all;
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (this.IsSwipeAllowed(event)) {
            return super.onTouchEvent(event);
        }

        return false;
    }

    @Override
    public boolean onInterceptTouchEvent(MotionEvent event) {
        if (this.IsSwipeAllowed(event)) {
            return super.onInterceptTouchEvent(event);
        }

        return false;
    }

    private boolean IsSwipeAllowed(MotionEvent event) {
        if(this.direction == SwipeDirection.all) return true;

        if(direction == SwipeDirection.none )//disable any swipe
            return false;

        if(event.getAction()==MotionEvent.ACTION_DOWN) {
            initialXValue = event.getX();
            return true;
        }

        if(event.getAction()==MotionEvent.ACTION_MOVE) {
            try {
                float diffX = event.getX() - initialXValue;
                if (diffX &gt; 0 &amp;&amp; direction == SwipeDirection.right ) {
                    // swipe from left to right detected
                    return false;
                }else if (diffX &lt; 0 &amp;&amp; direction == SwipeDirection.left ) {
                    // swipe from right to left detected
                    return false;
                }
            } catch (Exception exception) {
                exception.printStackTrace();
            }
        }

        return true;
    }

    public void setAllowedSwipeDirection(SwipeDirection direction) {
        this.direction = direction;
    }
</code></pre>

<p><strong>3.Use your viewPager in a layout</strong> </p>

<pre><code> &lt;package_name.customviewpager 
     android:id="@+id/customViewPager" 
     android:layout_height="match_parent" 
     android:layout_width="match_parent" /&gt;
</code></pre>

<p><strong>4.Enable any swipe direction in code.</strong> Default is all (right and left)</p>

<pre><code>mViewPager.setAllowedSwipeDirection(SwipeDirection.right);
</code></pre>
