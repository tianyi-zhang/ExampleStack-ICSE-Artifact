<p>You don't want to use <a href="http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#matches%28%29"><code>matches()</code></a>.  Matches will try to match the entire input string.  </p>

<blockquote>
  <p>Attempts to match the entire region against the pattern.</p>
</blockquote>

<p>What you want is <code>while(matcher.find()) {</code>.  That will match each instance of your pattern.  Check out the documentation for <a href="http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#find%28%29"><code>find()</code></a>.</p>

<p>Within each match, <code>group 0</code> will be the entire matched string (<code>${appdata}</code>) and <code>group 1</code> will be the <code>appdata</code> part.</p>

<p>Your end result should look something like: </p>

<pre><code>String pattern = "\\$\\{([A-Za-z0-9]+)\\}";
Pattern expr = Pattern.compile(pattern);
Matcher matcher = expr.matcher(text);
while (matcher.find()) {
    String envValue = envMap.get(matcher.group(1).toUpperCase());
    if (envValue == null) {
        envValue = "";
    } else {
        envValue = envValue.replace("\\", "\\\\");
    }
    Pattern subexpr = Pattern.compile(Pattern.quote(matcher.group(0)));
    text = subexpr.matcher(text).replaceAll(envValue);
}
</code></pre>
