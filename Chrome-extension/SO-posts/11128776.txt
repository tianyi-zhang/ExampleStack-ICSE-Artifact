<p>Most expression parsers will treat the numbers as numbers. If you want them to be treated as variables, replace or prefix them with letters, i.e. do something like this:</p>

<pre><code>ParseMath function = new ParseMath(replaceVariables("[(sin(1+3*4)+2)/7]+10"));
</code></pre>

<p>where replaceVariables would be something like this:</p>

<pre><code>String replaceVariables(String expr) {
  StringBuilder sb = new StringBuilder();
  boolean wasDigit = false;
  for (int i = 0; i &lt; expr.length; i++) {
    char c = sb.charAt(i);
    if (c &gt;= '0' &amp;&amp; c &lt;= '9') {
      if (!wasDigit) {
        sb.append('x');
      }
      wasDigit = true;
    } else if (c == '[') {
      c = '(';
    } else if (c == ']') {
      c = ')';
    }
    sb.append(c);
  }
  return sb.toString();
}
</code></pre>

<p>This should turn the example expression into <code>((sin(x1+x3*x4)+x2)/x7)+x10</code> which has a better chance of being recognized by expression parsers.</p>

<p>Note that you need to do the same transformation when you set the variables, i.e. if your server response is in a String array <code>realValues</code>, you'll need to do something similar to this to set them:</p>

<pre><code>for (int i = 0; i &lt; realValues.length; i++) {
  function.setValue("x" + i, Double.parseDouble(realValues[i]));
}
double result = function.exec();
</code></pre>
