<p>This is a simple dynamic programming (ish) solution. You basically learn from the last move  you made.</p>

<p><strong><em>NOTE:</em></strong> THIS IS A <code>O(N^2)</code> ALGOIRTHM</p>

<p><strong><em>Initialize:</em></strong></p>

<pre><code> int m = 4;
 int n = 4;
 int[][] array = new int[m][n];;
 for(int i = 0; i &lt; 3; i++){
    for(int j = 0; j &lt; 3; j++){
        array[i][j] = 0;
    }
 }
</code></pre>

<p><strong><em>The work:</em></strong></p>

<pre><code>array[0][0] = 1;
for(int i = 0; i &lt; m; i++){
    if(i != 0){ array[i][0] = array[i-1][1]+1;} 
  // This is for the start of each row get 1+ the diagonal 
    for(int j = 1; j &lt; n; j++){
        if(i == 0){
            array[i][j] = array[i][j-1]+j;
            // only for the first row, take the last element and add + row Count
        }else{
            if(i == m-1 &amp;&amp; j == n -1){
               // This is only a check for the last element
                array[i][j] = array[i][j-1]+1;
                break;  
            } 
            // all middle elements: basically look for the diagonal up right.
            // if the diagonal up right is out of bounds then take +2 the 
            // prev element in that row
            array[i][j] = ((j+1) != (m)) ? array[i-1][j+1] +1: array[i][j-1]+2;
        }
    }
}
</code></pre>

<p><strong><em>Printing the solution:</em></strong></p>

<pre><code> for(int i = 0; i &lt; m; i++){
     for(int j = 0; j &lt; n; j++){
        System.out.print(array[i][j]);
     }
     System.out.println("");
  }
 return 0;
}
</code></pre>
