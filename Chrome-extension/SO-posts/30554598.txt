<p>from your question, yes it can be done by </p>

<ol>
<li><p>get accelerometer to get it's value from time to time, since when your vehicle is going to crash, the force will give the very high result</p></li>
<li><p>from my point of view, you need to use compass sensor to help it to calculate properly, (plus GPS sensor, it world be a great help to calculate your current speed)</p></li>
<li><p>last one, you need to research about how the vehicle crash, when it hit force will go to forth and back, so alot of experiment or good research would be your great help</p></li>
</ol>

<p>for starting of accelerometer, (not much of mobile device have this sensor)</p>

<pre><code>/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    // to get accelerometer censor
    senSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
    senAccelerometer = senSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
    senSensorManager.registerListener(this, senAccelerometer , SensorManager.SENSOR_DELAY_NORMAL);
}

@Override
public void onSensorChanged(SensorEvent sensorEvent) {
Sensor mySensor = sensorEvent.sensor;

if (mySensor.getType() == Sensor.TYPE_ACCELEROMETER) {
    float x = sensorEvent.values[0];
    float y = sensorEvent.values[1];
    float z = sensorEvent.values[2];

    long curTime = System.currentTimeMillis();

    if ((curTime - lastUpdate) &gt; 100) {
        long diffTime = (curTime - lastUpdate);
        lastUpdate = curTime;

        float speed = Math.abs(x + y + z - last_x - last_y - last_z)/ diffTime * 10000;

        if (speed &gt; MIGHT_BE_CRASHING_THRESHOLD) {
            // do something
        }

        last_x = x;
        last_y = y;
        last_z = z;
    }
}
}

@Override
public void onAccuracyChanged(Sensor sensor, int accuracy) {

}
</code></pre>
