<p>You can save some data in the SharedPreferences on your onMessage listener in the GCMIntentService intent class. The GCM listener belongs to your package app after all.
What you save depends on your app and your message payload, but it may be whatever you want.
Then on your onCreate function of the Activity launched when clicking on the notification, you read the Shared Preferences to see whether you come from the GCM notification or not. Remember to clear the variable you save in the SharedPreferences so that next time that the user opens the app, it displays the content properly.</p>

<p>You have an example here. Unfortunately I cannot try it right now but it's useful to see the idea. It's quite similar to G2DM so you have to look for the equivalent in your case.</p>

<pre><code>public class GCMIntentService extends GCMBaseIntentService {

    /*... other functions of the class */

    /**
     * Method called on Receiving a new message
     * */
    @Override
    protected void onMessage(Context context, Intent intent) {
        Log.i(TAG, "Received message");
        String message = intent.getExtras().getString("your_message");

        // notifies user
        generateNotification(context, message);
    }

    /**
     * Issues a notification to inform the user that server has sent a message.
     */
    private static void generateNotification(Context context, String message) {
        int icon = R.drawable.ic_launcher;
        long when = System.currentTimeMillis();
        NotificationManager notificationManager = (NotificationManager)
            context.getSystemService(Context.NOTIFICATION_SERVICE);
        Notification notification = new Notification(icon, message, when);

        // Save your data in the shared preferences
        SharedPreferences prefs = getSharedPreferences("YourPrefs", MODE_PRIVATE);  
        SharedPreferences.Editor prefEditor = prefs.edit();  
        prefEditor.putBoolean("comesFromGCMNotification", true);  
        prefEditor.commit(); 

        String title = context.getString(R.string.app_name);

        Intent notificationIntent = new Intent(context, MainActivity.class);
        // set intent so it does not start a new activity
        notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP |
            Intent.FLAG_ACTIVITY_SINGLE_TOP);
        PendingIntent intent =
            PendingIntent.getActivity(context, 0, notificationIntent, 0);
        notification.setLatestEventInfo(context, title, message, intent);
        notification.flags |= Notification.FLAG_AUTO_CANCEL;

        // Play default notification sound
        notification.defaults |= Notification.DEFAULT_SOUND;

        // Vibrate if vibrate is enabled
        notification.defaults |= Notification.DEFAULT_VIBRATE;
        notificationManager.notify(0, notification);     

    }

}
</code></pre>
