<ol>
<li>Make your JDialog modal. This can be done via a <code>super(...)</code> constructor call or a simple method call.</li>
<li>If you do the above, then the dialog will freeze the calling code at the site that you call <code>setVisible(true)</code> and then will return to the calling code at that same point when the dialog is no longer visible.</li>
<li>So immediately after the <code>setVisible(true)</code>, query your dialog object for its user name and password by calling your <code>getUser()</code> and <code>getPass()</code> methods on it.</li>
<li>Some side recommendations:

<ul>
<li>Avoid calling <code>getText()</code> on a JPasswordField as that is not safe code. Instead get the <code>char[]</code> from it via <code>getPassword()</code> and use this as this is <em>much</em> safer.</li>
<li>You should avoid use of null layout and use of <code>setBounds(...)</code> for component placement as this makes for very inflexible GUI's that while they might look good on one platform look terrible on most other platforms or screen resolutions and that are very difficult to update and maintain.</li>
</ul></li>
</ol>

<hr>

<p>e.g., this change is all that is needed:</p>

<pre><code> public LoginDialog() {
     super(null, ModalityType.APPLICATION_MODAL);  // add this line
</code></pre>

<p>For example:</p>

<pre><code>import java.awt.Dialog.ModalityType;
import java.awt.event.ActionEvent;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Window;
import javax.swing.*;

public class TestDialog2 {
   private static void createAndShowGui() {
      int result = MyLoginPanel.showDialog();
      if (result == JOptionPane.OK_OPTION) {
         String userName = MyLoginPanel.getUserName();
         char[] password = MyLoginPanel.getPassword();

         System.out.println("User Name: " + userName);
         System.out.println("Password:  " + new String(password));
      }
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }
}

@SuppressWarnings("serial")
class MyLoginPanel extends JPanel {
   private static MyLoginPanel myLoginPanel = new MyLoginPanel();
   private static JDialog myDialog;
   public static final String RETURN_STATE = "return state";
   private static final int COLUMNS = 20;
   private JTextField userNameField = new JTextField(COLUMNS);
   private JPasswordField passField = new JPasswordField(COLUMNS);
   private int returnState = Integer.MIN_VALUE;

   private MyLoginPanel() {
      setLayout(new GridBagLayout());
      add(new JLabel("User Name:"), createGbc(0, 0, 1));
      add(userNameField, createGbc(1, 0, 2));
      add(new JLabel("Password:"), createGbc(0, 1, 1));
      add(passField, createGbc(1, 1, 2));
      add(new JLabel(""), createGbc(0, 2, 1));

      JPanel buttonPanel = new JPanel(new GridLayout(1, 0, 5, 0));

      buttonPanel.add(new JButton(new LoginAction("Login")));
      buttonPanel.add(new JButton(new CancelAction("Cancel")));

      add(buttonPanel, createGbc(1, 2, 2));
   }

   private GridBagConstraints createGbc(int x, int y, int width) {
      GridBagConstraints gbc = new GridBagConstraints();
      gbc.gridx = x;
      gbc.gridy = y;
      gbc.gridwidth = width;
      gbc.gridheight = 1;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.fill = GridBagConstraints.HORIZONTAL;
      int right = x == 0 ? 15 : 5;
      gbc.insets = new Insets(5, 5, 5, right);
      gbc.anchor = x == 0 ? GridBagConstraints.LINE_START : GridBagConstraints.LINE_END;
      return gbc;
   }

   public void setReturnState(int returnState) {
      this.returnState = returnState;
      firePropertyChange(RETURN_STATE, Integer.MIN_VALUE, returnState);
   }

   public int getReturnState() {
      return returnState;
   }

   private class LoginAction extends AbstractAction {
      public LoginAction(String name) {
         super(name);
         int mnemonic = (int) name.charAt(0);
         putValue(MNEMONIC_KEY, mnemonic);
      }

      @Override
      public void actionPerformed(ActionEvent e) {
         returnState = JOptionPane.OK_OPTION;
         Window win = SwingUtilities.getWindowAncestor(MyLoginPanel.this);
         win.dispose();
      }
   }

   private String _getUserName() {
      return userNameField.getText();
   }

   private char[] _getPassword() {
      return passField.getPassword();
   }

   public static String getUserName() {
      return myLoginPanel._getUserName();
   }

   public static char[] getPassword() {
      return myLoginPanel._getPassword();
   }

   private class CancelAction extends AbstractAction {
      public CancelAction(String name) {
         super(name);
         int mnemonic = (int) name.charAt(0);
         putValue(MNEMONIC_KEY, mnemonic);
      }

      @Override
      public void actionPerformed(ActionEvent e) {
         returnState = JOptionPane.CANCEL_OPTION;
         Window win = SwingUtilities.getWindowAncestor(MyLoginPanel.this);
         win.dispose();
      }
   }

   public static int showDialog() {
      if (myDialog == null) {
         myDialog = new JDialog(null, "Test", ModalityType.APPLICATION_MODAL);
         myDialog.add(myLoginPanel);
         myDialog.pack();
      }
      myDialog.setVisible(true);
      return myLoginPanel.getReturnState();
   }

}
</code></pre>

<hr>

<p>Or easier still, just use a JOptionPane as your modal dialog. You can pass a JPanel into it easily.</p>

<p>For example:</p>

<pre><code>import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class TestDialog3 {
   private static void createAndShowGui() {
      MyLoginPanel3 myLoginPanel3 = new MyLoginPanel3();
      int result = JOptionPane.showConfirmDialog(null, myLoginPanel3, "Log On", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
      if (result == JOptionPane.OK_OPTION) {
         String userName = myLoginPanel3.getUserName();
         char[] password = myLoginPanel3.getPassword();

         System.out.println("User Name: " + userName);
         System.out.println("Password:  " + new String(password));
      }
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }
}

@SuppressWarnings("serial")
class MyLoginPanel3 extends JPanel {
   private static final int COLUMNS = 20;
   private JTextField userNameField = new JTextField(COLUMNS);
   private JPasswordField passField = new JPasswordField(COLUMNS);

   public MyLoginPanel3() {
      setLayout(new GridBagLayout());
      add(new JLabel("User Name:"), createGbc(0, 0, 1));
      add(userNameField, createGbc(1, 0, 2));
      add(new JLabel("Password:"), createGbc(0, 1, 1));
      add(passField, createGbc(1, 1, 2));
      add(new JLabel(""), createGbc(0, 2, 1));

   }

   private GridBagConstraints createGbc(int x, int y, int width) {
      GridBagConstraints gbc = new GridBagConstraints();
      gbc.gridx = x;
      gbc.gridy = y;
      gbc.gridwidth = width;
      gbc.gridheight = 1;
      gbc.weightx = 1.0;
      gbc.weighty = 1.0;
      gbc.fill = GridBagConstraints.HORIZONTAL;
      int right = x == 0 ? 15 : 5;
      gbc.insets = new Insets(5, 5, 5, right);
      gbc.anchor = x == 0 ? GridBagConstraints.LINE_START : GridBagConstraints.LINE_END;
      return gbc;
   }


   public String getUserName() {
      return userNameField.getText();
   }

   public char[] getPassword() {
      return passField.getPassword();
   }

}
</code></pre>
