<p>Thanks for good suggestions.</p>

<p>The basic impairment was my class <code>UnDirectedPair</code> which had expensive <code>equals</code> and <code>compareTo</code> methods. I replaced it with a stripped bare Pair class.
This got the code to run in approx 10s.</p>

<p>Still, using operations on sets seemed costly. With @mawia suggestion modified a bit, sets can be left completely out of the picture. The final code runs in <strong>under 2 seconds</strong> instead of 9mn 40s - returning a list of 19,471,920 Pair objects!!</p>

<pre><code>public List&lt;Pair&lt;T&gt;&gt; getAllUndirectedPairsAsList(Set&lt;T&gt; setObjects) {
    List&lt;T&gt; listObjects = new ArrayList();
    listObjects.addAll(setObjects);

    List&lt;Pair&lt;T&gt;&gt; listPairs = new ArrayList();
    Iterator&lt;T&gt; listIterator1 = listObjects.listIterator();
    Iterator&lt;T&gt; listIterator2;
    int count = 1;
    T object1;
    while (listIterator1.hasNext()) {
        object1 = listIterator1.next();
        listIterator2 = listObjects.listIterator(count++);
        while (listIterator2.hasNext()) {
            listPairs.add(new Pair(object1, listIterator2.next()));
        }
    }
    return listPairs;
}
</code></pre>
