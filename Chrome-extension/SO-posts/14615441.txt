<p>Your problem is more related to <a href="http://docs.oracle.com/javase/6/docs/api/java/io/File.html" rel="nofollow"><code>File</code></a> class usage than a JSF problem.</p>

<p>You can use this class to handle files or directories. To start with, you can have two methods:</p>

<ul>
<li><p>a method that will retrieve the user directory</p></li>
<li><p>a method that will save the file in the user directory</p></li>
</ul>

<p>Basic example:</p>

<pre><code>//note: this must be moved to an utility class
public File getDirectory(String destination, String username) {
    //set the user directory from the destinarion and the logged user name
    File directory = new File(destination, username);
    //check if the location exists
    if (!directory.exists()) {
        //let's try to create it
        try {
            directory.mkdir();
        } catch (SecurityException secEx) {
            //handle the exception
            //this is a naive way to do it
            secEx.printStackTrace(System.out);
            directory = null;
        }
    }
    return directory;
}

public void saveFile(String fileName, byte[] data) {
    //get the directory assigned to the current user
    File userDirectory = getDirectory(destination, username);
    if (userDirectory != null) {
        //create the real file using the directory as parent directory
        //we'll give the file name too
        //check the different constructors for File class
        File realFile = new File(userDirectory, fileName);
        //save the file the way you want/need...
        //this should be also in an utility class
        FileOutputStream fos;
        try {
            fos = new FileOutputStream(realFile);
            fos.write(myByteArray);
        } catch (Exception ex) {
            //handle the exception
            ex.printStackTrace(System.out);
        } finally {
            if (fos != null)
                fos.close();
        }
    }
}
</code></pre>

<p>References:</p>

<ul>
<li><a href="http://stackoverflow.com/q/4350084/1065197">byte[] to file in Java</a></li>
<li><a href="http://goo.gl/FdFcc" rel="nofollow">FileOutputStream(File file) constructor</a></li>
</ul>

<hr>

<p>Based on your question edit, you must modify the <code>copyFile</code> in order to look as the <code>saveFile</code> method that I proposed. I'll change the implementation to use an <code>InputStream</code>.</p>

<pre><code>public void copyFile(String fileName, InputStream in) {
    //get the directory assigned to the current user
    File userDirectory = getDirectory(destination, username);
    if (userDirectory != null) {
        OutputStream out;
        try {
            File realFile = new File(userDirectory, fileName);
            out = new FileOutputStream(new File(userDirectory));
            int read = 0;
            //1024 must be a constant
            //also, it must be 4098 (4 KBs) for better performance
            byte[] bytes = new byte[1024];
            while ((read = in.read(bytes)) != -1) {
                out.write(bytes, 0, read);
            }
            in.close();
            out.flush();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        } finally {
            out.close();
        }
    }
}
</code></pre>
