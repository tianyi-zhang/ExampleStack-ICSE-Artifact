<p>This is how I write and read photo files locally. A similar process can be applied for handling different types of files. Just use a different file extension and a different method return data-type.   </p>

<pre><code>// Creates an ImageFile
private File createNewPhotoFile() throws IOException {

    String imageFileName = "JPEG";
    File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
    File image = File.createTempFile(
            imageFileName,  /* prefix */
            ".jpg",         /* suffix */
            storageDir      /* directory */
    );

    // Save a file: path for use with ACTION_VIEW intents
    mCurrentPhotoPath = "file:" + image.getAbsolutePath();

    image.createNewFile();
    ByteArrayOutputStream stream = new ByteArrayOutputStream();
    FileOutputStream fo = new FileOutputStream(image);
    fo.write(stream.toByteArray());
    fo.close();


    return image;
}

// Retreave and convert from file to Bitmap
private Bitmap retreaveImageFromFile(ImageView target, File fileForPath) {

    // Get the dimensions of the View
    int targetW = target.getWidth();
    int targetH = target.getHeight();

    // Get the dimensions of the bitmap
    BitmapFactory.Options bmOptions = new BitmapFactory.Options();
    bmOptions.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(fileForPath.getAbsolutePath(), bmOptions);
    int photoW = bmOptions.outWidth;
    int photoH = bmOptions.outHeight;

    // Determine how much to scale down the image
    int scaleFactor = 4; //Math.min(photoW / targetW, photoH / targetH);

    // Decode the image file into a Bitmap sized to fill the View
    bmOptions.inJustDecodeBounds = false;
    bmOptions.inSampleSize = scaleFactor;

    Bitmap bitmap = BitmapFactory.decodeFile(newPhotoFile.getAbsolutePath(), bmOptions);

    return bitmap;
}
</code></pre>
