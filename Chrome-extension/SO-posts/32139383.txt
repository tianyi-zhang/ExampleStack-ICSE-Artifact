<p>You can do it with TreeMap, for example:</p>

<pre><code>//any not sorted map
Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();
map.put("567", 567);
map.put("456", 456);
map.put("123", 123);

//create sorted TreeMap with descending sorting
Map&lt;String, Integer&gt; sortedMap = new TreeMap&lt;String, Integer&gt;(Collections.reverseOrder());
sorted.putAll(map);
</code></pre>

<p>If you wish to sort it by values, then you can make it so:</p>

<pre><code>private static Map&lt;String, Integer&gt; sortByComparator(Map&lt;String, Integer&gt; unsortedMap) {

    List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = new LinkedList&lt;Map.Entry&lt;String, Integer&gt;&gt;(unsortedMap.entrySet());

    Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;() {
        public int compare(Map.Entry&lt;String, Integer&gt; o1,
                           Map.Entry&lt;String, Integer&gt; o2) {
            return (o2.getValue()).compareTo(o1.getValue());
        }
    });

    Map&lt;String, Integer&gt; sortedMap = new LinkedHashMap&lt;String, Integer&gt;();
    for (Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = list.iterator(); it.hasNext();) {
        Map.Entry&lt;String, Integer&gt; entry = it.next();
        sortedMap.put(entry.getKey(), entry.getValue());
    }
    return sortedMap;
}
</code></pre>
