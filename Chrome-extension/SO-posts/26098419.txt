<p>here is code for take picture &amp; video</p>

<pre><code>    // Add listener to video capture button
    VideoCapture = (Button)findViewById(R.id.buttonVideo);
    VideoCapture.setOnClickListener(new View.OnClickListener(){

        @Override
        public void onClick(View v) {
            // TODO Auto-generated method stub
                captureButton.setVisibility(View.GONE);
            if(isRecording){
                VideoCapture.setBackgroundResource(R.drawable.ic_action_videoplay); 
                   // stop recording and release camera
                mMediaRecorder.stop();  // stop the recording
                releaseMediaRecorder(); // release the MediaRecorder object
                mCamera.lock();         // take camera access back from MediaRecorder

                // inform the user that recording has stopped

                isRecording = false;
            }
            else{
                releaseCamera();
                 // initialize video camera
                if (prepareVideoRecorder()) {
                    // Camera is available and unlocked, MediaRecorder is prepared,
                    // now you can start recording
                    mMediaRecorder.start();

                    // inform the user that recording has started

                    isRecording = true;
                } else {
                    // prepare didn't work, release the camera
                    releaseMediaRecorder();
                    // inform user
                }

                VideoCapture.setBackgroundResource(R.drawable.ic_launcher_videopause);
                isRecording = true;
            }

        }

    });

    private PictureCallback mPicture = new PictureCallback() {

    @Override
    public void onPictureTaken(byte[] data, Camera camera) {

        File pictureFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
        if (pictureFile == null){
            Log.d(TAG, "Error creating media file, check storage permissions: ");
            return;
        }

        try {
            FileOutputStream fos = new FileOutputStream(pictureFile);
            fos.write(data);
            fos.close();

            /* set image preview in imageview */
            previewImage = (ImageView)findViewById(R.id.imageViewPrieview);
            previewImage.setImageURI(Uri.fromFile(pictureFile));

            /* release camera &amp; removeallview from preview */
            relaese();
        } catch (FileNotFoundException e) {
            Log.d(TAG, "File not found: " + e.getMessage());
        } catch (IOException e) {
            Log.d(TAG, "Error accessing file: " + e.getMessage());
        }
    }
};



/** Create a file Uri for saving an image or video */
private Uri getOutputMediaFileUri(int type){
    return Uri.fromFile(getOutputMediaFile(type));
}

/** Create a File for saving an image or video */
private File getOutputMediaFile(int type){
    // To be safe, you should check that the SDCard is mounted
    // using Environment.getExternalStorageState() before doing this.

    File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
            Environment.DIRECTORY_PICTURES), "MyCameraApp");
    // This location works best if you want the created images to be shared
    // between applications and persist after your app has been uninstalled.

    // Create the storage directory if it does not exist
    if (! mediaStorageDir.exists()){
        if (! mediaStorageDir.mkdirs()){
            Log.d("MyCameraApp", "failed to create directory");
            return null;
        }
    }

    // Create a media file name
    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());

    if (type == MEDIA_TYPE_IMAGE){
        //                  mediaFile = new File(mediaStorageDir.getPath() + File.separator +
        //                  "IMG_"+ timeStamp + ".jpg");
        mediaFile = new File("/sdcard/"+ "IMG_"+ timeStamp + ".jpg");
        Log.i("Image","Image is captured");

    } else if(type == MEDIA_TYPE_VIDEO) {
        mediaFile = new File(mediaStorageDir.getPath() + File.separator +
                "VID_"+ timeStamp + ".mp4");
    } else {
        return null;
    }

    return mediaFile;
}
</code></pre>

<p>These code for prepare video recorder </p>

<pre><code> private boolean prepareVideoRecorder(){

    mCamera = getCameraInstance();
    mMediaRecorder = new MediaRecorder();


    // step 1: Unlock camera &amp; Set camera to MediaRecorder
    mCamera.unlock();
    mMediaRecorder.setCamera(mCamera);

    // step 2: set Audio &amp; Video Source
    mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
    mMediaRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);

    // step 3: set camcorder profile , it required Api Level 8
    mMediaRecorder.setProfile(CamcorderProfile.get(CamcorderProfile.QUALITY_HIGH));

    // step 4: set output file
    mMediaRecorder.setOutputFile(getOutputMediaFile(MEDIA_TYPE_VIDEO).toString());

    // step 5: set preview output
    mMediaRecorder.setPreviewDisplay(mPreview.getHolder().getSurface());

    // step 6: prepare Configured Media recorder
    try {
        mMediaRecorder.prepare();
    } catch (IllegalStateException e) {
        Log.d("TAG","IllegalStateException preparing MediaRecorder" + e.getMessage());
        return false;
    }catch (IOException e) {
        Log.d("TAG","IO Exception preparing MediaRecorde" + e.getMessage());
        return false;

    }
    return true;
}
private void releaseMediaRecorder(){
    if (mMediaRecorder != null) {
        mMediaRecorder.reset();   // clear recorder configuration
        mMediaRecorder.release(); // release the recorder object
        mMediaRecorder = null;
        mCamera.lock();           // lock camera for later use
    }
</code></pre>

<p>I think this will help you. because it work for me.</p>

<h1>The Android API currently does not provide the pause method</h1>

<p><sup>This is a bit technical, but was solicited on the comments.</sup></p>

<p>The <a href="http://developer.android.com/reference/android/media/MediaRecorder.html" rel="nofollow">public class MediaRecorder</a>, being used since API level 1, doesn't has the capability to pause, as one can observe from the MediaRecorder State Diagram:</p>

<p><img src="http://i.stack.imgur.com/jsWRr.gif" alt="MediaRecorder State Diagram"></p>

<p>When recording, the API allows us to either use the <code>reset()</code> or <code>stop()</code> Public Methods:</p>

<blockquote>
  <p><code>reset()</code> -> Restarts the MediaRecorder to its idle state.</p>
  
  <p><code>stop()</code> -> Stops recording.</p>
</blockquote>
