<ol>
<li><p>For <code>colMatrix</code>, for every index <code>[i, j]</code>, you have to fill it up with <code>m[i][j] + colMatrix[i][j - 1]</code>. Where <code>m</code> is the original matrix, and <code>colMatrix</code> is the new one, which you are filling up. Now, you have to consider the case when <code>j == 0</code> separately, in which case, you woul dhave <code>colMatrix[i][j] = m[i][j]</code></p></li>
<li><p>Similarly for <code>rowMatrix</code>, for every index <code>[i, j]</code>, the value will be <code>m[i][j] + rowMatrix[i - 1][j]</code>. And for <code>i == 0</code>, you would have <code>rowMatrix[i][j] = m[i][j]</code>.</p></li>
</ol>

<p>Here's the code:</p>

<pre><code>    int[][] m = {{1, 2, 3, 4}, {3, 4, 5, 1}, {1, 2, 0, 1}};

    int[][] rowMatrix = new int[m.length][m[0].length];
    int[][] colMatrix = new int[m.length][m[0].length];

    for (int i = 0; i &lt; m.length; i++) {
        for (int j = 0; j &lt; m[0].length; j++) {

            if (j == 0) rowMatrix[i][j] = m[i][j]; 
            else        rowMatrix[i][j] = m[i][j] + rowMatrix[i][j - 1];

            if (i == 0) colMatrix[i][j] = m[i][j];
            else        colMatrix[i][j] = m[i][j] + colMatrix[i - 1][j];

        }
    }
</code></pre>
