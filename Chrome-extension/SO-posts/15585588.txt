<p><code>equals</code> method is originally a method of <code>Object</code> class. And every class in Java extends the <code>Object</code> class by default. Now, <code>equals</code> method is overridden for <code>String</code> class to act differently than <code>==</code>.</p>

<p>It's <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#equals%28java.lang.Object%29" rel="nofollow">javadoc</a> explains it perfectly:</p>

<blockquote>
  <p>Compares this string to the specified object.  The result is
  true if and only if the argument is not null and is a
  String object that represents the same sequence of characters as this
  object.</p>
</blockquote>

<p>It's implementation goes as follows:</p>

<pre><code>@override
public boolean equals(Object anObject) {
// This check is just for the case when exact same String object is passed
if (this == anObject) {
    return true;
}
// After this only real implementation of equals start which you might be looking for
// For other cases checks start from here
if (anObject instanceof String) {
    String anotherString = (String)anObject;
    int n = count;
    if (n == anotherString.count) {
    char v1[] = value;
    char v2[] = anotherString.value;
    int i = offset;
    int j = anotherString.offset;
    while (n-- != 0) {
        if (v1[i++] != v2[j++])
        return false;
    }
    return true;
    }
}
return false;
}
</code></pre>
