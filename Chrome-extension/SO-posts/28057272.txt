<p>I modified the SlidingTabLayout so that the HorizontalScrollView that contains the tabs adjusts its padding based on the ViewPager's scroll offset. It took me 3 days to create an acceptable result and I hope it helps you too! If you have any questions and/or improvements, please comment!</p>

<p><img src="http://i.stack.imgur.com/ejIOJ.png" alt="enter image description here"></p>

<p>SlidingTabLayout.java</p>

<pre><code>/*
 * Copyright 2014 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import android.animation.LayoutTransition;
import android.content.Context;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.os.Build;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.util.Log;
import android.util.SparseArray;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.TextView;

/**
 * To be used with ViewPager to provide a tab indicator component which give constant feedback as to
 * the user's scroll progress.
 * &lt;p/&gt;
 * To use the component, simply add it to your view hierarchy. Then in your
 * {@link android.app.Activity} or {@link android.support.v4.app.Fragment} call
 * {@link #setViewPager(ViewPager)} providing it the ViewPager this layout is being used for.
 * &lt;p/&gt;
 * The colors can be customized in two ways. The first and simplest is to provide an array of colors
 * via {@link #setSelectedIndicatorColors(int...)}. The
 * alternative is via the {@link TabColorizer} interface which provides you complete control over
 * which color is used for any individual position.
 * &lt;p/&gt;
 * The views used as tabs can be customized by calling {@link #setCustomTabView(int, int)},
 * providing the layout ID of your custom layout.
 */
public class SlidingTabLayout extends HorizontalScrollView {
    /**
     * Allows complete control over the colors drawn in the tab layout. Set with
     * {@link #setCustomTabColorizer(TabColorizer)}.
     */
    public interface TabColorizer {

        /**
         * @return return the color of the indicator used when {@code position} is selected.
         */
        int getIndicatorColor(int position);

    }

    private static final int TAB_VIEW_PADDING_DIPS = 16;
    private static final int TAB_VIEW_TEXT_SIZE_SP = 12;

    private int mTabViewLayoutId;
    private int mTabViewTextViewId;
    private boolean mDistributeEvenly;

    private ViewPager mViewPager;
    private SparseArray&lt;String&gt; mContentDescriptions = new SparseArray&lt;String&gt;();
    private ViewPager.OnPageChangeListener mViewPagerPageChangeListener;

    private final SlidingTabStrip mTabStrip;

    public SlidingTabLayout(Context context) {
        this(context, null);
    }

    public SlidingTabLayout(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public SlidingTabLayout(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);

        // Disable the Scroll Bar
        setHorizontalScrollBarEnabled(false);
        // Make sure that the Tab Strips fills this View
        setFillViewport(true);

        mTabStrip = new SlidingTabStrip(context);
        //mTabStrip.setVisibility(View.INVISIBLE);
        addView(mTabStrip, LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);

        getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                // Set spacer tab widths
                View firstTab = mTabStrip.getChildAt(0);
                int firstTabPadding = (getWidth() - mTabStrip.getChildAt(1).getMeasuredWidth()) / 2;
                firstTab.setPadding(firstTabPadding, firstTab.getPaddingTop(), firstTab.getPaddingRight(), firstTab.getPaddingBottom());

                View lastTab = mTabStrip.getChildAt(mTabStrip.getChildCount() - 1);
                int lastTabPadding = (getWidth() - mTabStrip.getChildAt(mTabStrip.getChildCount() - 2).getMeasuredWidth()) / 4;
                lastTab.setPadding(lastTabPadding, 0, lastTabPadding, 0);


                if (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
                    getViewTreeObserver().removeOnGlobalLayoutListener(this);
                else
                    getViewTreeObserver().removeGlobalOnLayoutListener(this);
            }
        });
    }

    /**
     * Set the custom {@link TabColorizer} to be used.
     * &lt;p/&gt;
     * If you only require simple customisation then you can use
     * {@link #setSelectedIndicatorColors(int...)} to achieve
     * similar effects.
     */
    public void setCustomTabColorizer(TabColorizer tabColorizer) {
        mTabStrip.setCustomTabColorizer(tabColorizer);
    }

    public void setDistributeEvenly(boolean distributeEvenly) {
        mDistributeEvenly = distributeEvenly;
    }

    /**
     * Sets the colors to be used for indicating the selected tab. These colors are treated as a
     * circular array. Providing one color will mean that all tabs are indicated with the same color.
     */
    public void setSelectedIndicatorColors(int... colors) {
        mTabStrip.setSelectedIndicatorColors(colors);
    }

    /**
     * Set the {@link ViewPager.OnPageChangeListener}. When using {@link SlidingTabLayout} you are
     * required to set any {@link ViewPager.OnPageChangeListener} through this method. This is so
     * that the layout can update it's scroll position correctly.
     *
     * @see ViewPager#setOnPageChangeListener(ViewPager.OnPageChangeListener)
     */
    public void setOnPageChangeListener(ViewPager.OnPageChangeListener listener) {
        mViewPagerPageChangeListener = listener;
    }

    /**
     * Set the custom layout to be inflated for the tab views.
     *
     * @param layoutResId Layout id to be inflated
     * @param textViewId  id of the {@link TextView} in the inflated view
     */
    public void setCustomTabView(int layoutResId, int textViewId) {
        mTabViewLayoutId = layoutResId;
        mTabViewTextViewId = textViewId;
    }

    /**
     * Sets the associated view pager. Note that the assumption here is that the pager content
     * (number of tabs and tab titles) does not change after this call has been made.
     */
    public void setViewPager(ViewPager viewPager) {
        mTabStrip.removeAllViews();

        mViewPager = viewPager;
        if (viewPager != null) {
            viewPager.setOnPageChangeListener(new InternalViewPagerListener());
            populateTabStrip();
        }
    }

    /**
     * Create a default view to be used for tabs. This is called if a custom tab view is not set via
     * {@link #setCustomTabView(int, int)}.
     */
    protected TextView createDefaultTabView(Context context) {
        TextView textView = new TextView(context);
        textView.setGravity(Gravity.CENTER);
        textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, TAB_VIEW_TEXT_SIZE_SP);
        textView.setTypeface(Typeface.DEFAULT_BOLD);
        textView.setLayoutParams(new LinearLayout.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        TypedValue outValue = new TypedValue();
        getContext().getTheme().resolveAttribute(android.R.attr.selectableItemBackground,
                outValue, true);
        textView.setBackgroundResource(outValue.resourceId);
        textView.setAllCaps(true);

        int padding = (int) (TAB_VIEW_PADDING_DIPS * getResources().getDisplayMetrics().density);
        textView.setPadding(padding, padding, padding, padding);

        return textView;
    }

    private void populateTabStrip() {
        final PagerAdapter adapter = mViewPager.getAdapter();
        final View.OnClickListener tabClickListener = new TabClickListener();

        for (int i = 0; i &lt; adapter.getCount(); i++) {
            View tabView = null;
            TextView tabTitleView = null;

            if (mTabViewLayoutId != 0) {
                // If there is a custom tab view layout id set, try and inflate it
                tabView = LayoutInflater.from(getContext()).inflate(mTabViewLayoutId, mTabStrip,
                        false);
                tabTitleView = (TextView) tabView.findViewById(mTabViewTextViewId);
            }

            if (tabView == null) {
                tabView = createDefaultTabView(getContext());
            }

            if (tabTitleView == null &amp;&amp; TextView.class.isInstance(tabView)) {
                tabTitleView = (TextView) tabView;
            }

            if (mDistributeEvenly) {
                LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) tabView.getLayoutParams();
                lp.width = 0;
                lp.weight = 1;
            }

            tabTitleView.setText(adapter.getPageTitle(i));
            tabView.setOnClickListener(tabClickListener);
            String desc = mContentDescriptions.get(i, null);
            if (desc != null) {
                tabView.setContentDescription(desc);
            }

            mTabStrip.addView(tabView);
            if (i == mViewPager.getCurrentItem()) {
                tabView.setSelected(true);
            }
        }

        // First spacer tab
        TextView firstTab = new TextView(getContext());
        mTabStrip.addView(firstTab, 0);

        // Last spacer tab
        TextView lastTab = new TextView(getContext());
        mTabStrip.addView(lastTab);
    }

    public void setContentDescription(int i, String desc) {
        mContentDescriptions.put(i, desc);
    }

    private void scrollToTab(int tabIndex, int positionOffset) {
        final int tabStripChildCount = mTabStrip.getChildCount();
        if (tabStripChildCount == 0 || tabIndex &lt; 0 || tabIndex &gt;= tabStripChildCount) {
            return;
        }

        if (positionOffset == -1) {// Not manual scroll. Do not animate. Just cut to tab and center.
            if (tabIndex == 1)
                positionOffset = 0;
            else
                positionOffset = mTabStrip.getChildAt(tabIndex).getWidth() / 2 + mTabStrip.getChildAt(tabIndex + 1).getWidth() / 2;
        }

        if (tabIndex == 1) // if tab number one, no need to calculate previously scrolled X
            scrollTo(positionOffset, 0);
        else { // If tab number is greater than 1, we need to calculate previously scrolled X
            int previouslyScrolledX = 0;

            // Simulate previously scrolled X by summing half of each of the previous tabs' width.
            // Use 2 tabs per loop for correct simulation.
            for (int i = 1; i &lt; tabIndex; i++) {
                previouslyScrolledX += mTabStrip.getChildAt(i).getWidth() / 2;
                previouslyScrolledX += mTabStrip.getChildAt(i + 1).getWidth() / 2;
            }

            scrollTo(previouslyScrolledX + positionOffset, 0);
        }
    }

    private class InternalViewPagerListener implements ViewPager.OnPageChangeListener {
        private int mScrollState;

        @Override
        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
            int tabStripChildCount = mTabStrip.getChildCount();
            if ((tabStripChildCount == 0) || (position &lt; 0) || (position &gt;= tabStripChildCount)) {
                return;
            }

            position++; // Offset position by 1 to make up for left blank tab

            mTabStrip.onViewPagerPageChanged(position, positionOffset);

            // Adding half of current tab's width &amp; half of next tab's width and scrolling by that width will center next tab
            int offsetToCenterNextTab = (mTabStrip.getChildAt(position).getWidth() / 2) + (mTabStrip.getChildAt(position + 1).getWidth() / 2);

            scrollToTab(position, Math.round(offsetToCenterNextTab * positionOffset));

            if (mViewPagerPageChangeListener != null) {
                mViewPagerPageChangeListener.onPageScrolled(position, positionOffset,
                        positionOffsetPixels);
            }
        }

        @Override
        public void onPageScrollStateChanged(int state) {
            mScrollState = state;

            if (mViewPagerPageChangeListener != null) {
                mViewPagerPageChangeListener.onPageScrollStateChanged(state);
            }
        }

        @Override
        public void onPageSelected(int position) {
            if (mScrollState == ViewPager.SCROLL_STATE_IDLE) {
                mTabStrip.onViewPagerPageChanged(position, 0f);
                scrollToTab(position, -1);
            }
            for (int i = 0; i &lt; mTabStrip.getChildCount(); i++) {
                mTabStrip.getChildAt(i).setSelected(position + 1 == i);
            }
            if (mViewPagerPageChangeListener != null) {
                mViewPagerPageChangeListener.onPageSelected(position);
            }
        }

    }

    private class TabClickListener implements View.OnClickListener {
        @Override
        public void onClick(View selectedView) {
            View lastSelectedView = null;
            int selectedViewIndex = 0;

            for (int i = 1; i &lt; mTabStrip.getChildCount() - 1; i++) {
                View currentViewInLoop = mTabStrip.getChildAt(i);
                if (currentViewInLoop.isSelected()) {
                    lastSelectedView = currentViewInLoop;
                }

                if (selectedView == currentViewInLoop) {
                    selectedViewIndex = i - 1;
                }

                if (lastSelectedView != null &amp;&amp; selectedViewIndex != 0)
                    break;
            }

            Rect tabContainerRect = new Rect();
            Rect lastSelectedTabRect = new Rect();

            getDrawingRect(tabContainerRect);
            lastSelectedView.getHitRect(lastSelectedTabRect);

            if (Rect.intersects(tabContainerRect, lastSelectedTabRect))
                mViewPager.setCurrentItem(selectedViewIndex);
            else
                mViewPager.setCurrentItem(selectedViewIndex, false);
        }
    }
}
</code></pre>
