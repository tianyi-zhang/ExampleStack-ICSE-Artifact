<p>These code snippets do the job:</p>

<p>Solution 1 (simplest approach):</p>

<pre><code>public static Collection&lt;Integer&gt; sumCollectionElements(Collection&lt;Integer&gt; L1, Collection&lt;Integer&gt; L2) {
    final Iterator&lt;Integer&gt; iterator = L2.iterator();
    return L1.stream()
            .limit(Math.min(L1.size(), L2.size()))
            .map(integer -&gt; integer + iterator.next())
            .collect(Collectors.toList());
}
</code></pre>

<p>Solution 2 (more general approach -> <a href="https://gist.github.com/kjkrol/51a5a7612f0411849c62" rel="nofollow">gist</a>):</p>

<pre><code>public static &lt;A, B, C&gt; Stream&lt;C&gt; zip(Stream&lt;A&gt; streamA, Stream&lt;B&gt; streamB, BiFunction&lt;A, B, C&gt; zipper) {
    final Iterator&lt;A&gt; iteratorA = streamA.iterator();
    final Iterator&lt;B&gt; iteratorB = streamB.iterator();
    final Iterator&lt;C&gt; mergedIterator = new Iterator&lt;C&gt;() {
        @Override
        public boolean hasNext() {
            return iteratorA.hasNext() &amp;&amp; iteratorB.hasNext();
        }

        @Override
        public C next() {
            return zipper.apply(iteratorA.next(), iteratorB.next());
        }
    };
    return iteratorToFiniteStream(mergedIterator);
}

public static &lt;T&gt; Stream&lt;T&gt; iteratorToFiniteStream(Iterator&lt;T&gt; iterator) {
    final Iterable&lt;T&gt; iterable = () -&gt; iterator;
    return StreamSupport.stream(iterable.spliterator(), false);
}
</code></pre>
