<p>This isn't that easy, this has more pitfalls than you'd think.</p>

<p>Your equals method has to allow for having objects belonging to classes other than the class you're writing it for. You have to do is check to see if the argument is also a Pair:</p>

<pre><code>if (otherObject == null) return false;
if (otherObject.getClass() != Pair.class) return false;
</code></pre>

<p>After this check is passed you can cast safely, and assign the cast object to a new local variable:</p>

<pre><code>Pair otherPair = (Pair)otherObject;
</code></pre>

<p>then use the fields on otherPair for your equals check. At this point you're done with the otherObject parameter and the rest of the equals method shouldn't reference it anymore.</p>

<p>the whole thing would look like</p>

<pre><code>public boolean equals(Object otherObject) {
    if (otherObject == null) return false;
    if (getClass() != otherObject.getClass()) return false;
    Pair otherPair = (Pair)otherObject;
    return otherPair.fst.equals(this.fst) &amp;&amp; otherPair.snd.equals(this.snd);
}
</code></pre>

<p>assuming that fst and snd are not allowed to be null. Calling the equals method on a null member will cause a NullPointerException. To avoid the NPE if fst or snd are null, check if the members are null before calling equals on them:</p>

<pre><code>public boolean equals(Object otherObject) {
    // check if references are the same
    if (this == otherObject) return true;
    // check if arg is null or something other than a Pair
    if (otherObject == null) return false;
    if (getClass != otherObject.getClass()) return false;
    Pair otherPair = (Pair)otherObject;
    // check if one object's fst is null and the other is nonnull
    if (otherPair.fst == null || this.fst == null) {
        if (otherPair.fst != null || this.fst != null) return false;
    }
    // check if one object's snd is null and the other is nonnull
    if (otherPair.snd == null || this.snd == null) {
        if (otherPair.snd != null || this.snd != null) return false;
    }        
    // each member is either null for both or nonnull for both
    return ((otherPair.fst == null &amp;&amp; this.fst == null) || otherPair.fst.equals(this.fst)) 
    &amp;&amp; ((otherPair.snd == null &amp;&amp; this.snd == null) || otherPair.snd.equals(this.snd));
}
</code></pre>

<p>This last bit is annoying to write, IDEs will generate this stuff for you. Here's what Eclipse generates:</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Pair other = (Pair) obj;
    if (fst == null) {
        if (other.fst != null)
            return false;
    } else if (!fst.equals(other.fst))
        return false;
    if (snd == null) {
        if (other.snd != null)
            return false;
    } else if (!snd.equals(other.snd))
        return false;
    return true;
}
</code></pre>

<p>Remember to implement hashCode too.</p>
