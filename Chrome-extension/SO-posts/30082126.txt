<p>You could load the image, from e.g. a .png file to a <code>BufferedImage</code> with</p>

<pre><code>public static BufferedImage loadImage(String location)
{
    try {
        BufferedImage image = ImageIO.read(new File(location));
        return image;
    } catch (IOException e) {
        System.out.println("Could not load texture: " + location);
    }
    return null;
}
</code></pre>

<p>Now you are able to call <code>getSubimage(int x, int y, int w, int h)</code> on that resulting <code>BufferedImage</code>, giving you the seperated part. You now just need to create a Texture of the BufferedImage. This code should do the work:</p>

<pre><code>public static int loadTexture(BufferedImage image){
    if (image == null) {
        return 0;
    }

    int[] pixels = new int[image.getWidth() * image.getHeight()];
    image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());

    ByteBuffer buffer = BufferUtils.createByteBuffer(image.getWidth() * image.getHeight() * BYTES_PER_PIXEL); //4 for RGBA, 3 for RGB

    for(int y = 0; y &lt; image.getHeight(); y++){
        for(int x = 0; x &lt; image.getWidth(); x++){
            int pixel = pixels[y * image.getWidth() + x];
            buffer.put((byte) ((pixel &gt;&gt; 16) &amp; 0xFF));     // Red component
            buffer.put((byte) ((pixel &gt;&gt; 8) &amp; 0xFF));      // Green component
            buffer.put((byte) (pixel &amp; 0xFF));               // Blue component
            buffer.put((byte) ((pixel &gt;&gt; 24) &amp; 0xFF));    // Alpha component. Only for RGBA
        }
    }

    buffer.flip(); //FOR THE LOVE OF GOD DO NOT FORGET THIS

     // You now have a ByteBuffer filled with the color data of each pixel.
    // Now just create a texture ID and bind it. Then you can load it using 
    // whatever OpenGL method you want, for example:

    int textureID = glGenTextures();
    glBindTexture(GL_TEXTURE_2D, textureID);

    //setup wrap mode
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);

    //setup texture scaling filtering
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

    //Send texel data to OpenGL
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer); //GL_RGBA8 was GL_RGB8A

    return textureID;
}
</code></pre>

<p>You are now able to bind the returned <code>textureID</code> with <code>glBindTexture(GL_TEXTURE_2D, textureID);</code> if you need the texture.
This way you only have to split the BufferedImage in the desired parts.</p>

<p>I recommend reading this: <a href="http://stackoverflow.com/questions/10801016/lwjgl-textures-and-strings">LWJGL Textures and Strings</a></p>
