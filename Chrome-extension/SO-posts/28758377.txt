<p>Someone already did this:
<a href="http://www.rgagnon.com/javadetails/java-0515.html" rel="nofollow">http://www.rgagnon.com/javadetails/java-0515.html</a></p>

<p>As you see other reserved regex characters (described in <a href="http://stackoverflow.com/questions/399078/what-special-characters-must-be-escaped-in-regular-expressions">What special characters must be escaped in regular expressions?</a>
i.e. <code>.^$*+?()[{\|</code>) also has to be escaped, not only dot. </p>

<p>The approach to parse character by character is safer than using <code>String#replace(..)</code> method. In latter case you have to be careful about the order of replacements so that you do not replace something you already did (imagine what happens if in your example you first replace dot with <code>\\.</code> and then windows backslash to slash).</p>

<p>However, I am afraid the example does not work for all cases. It is because syntax for globs is various across implementations, see <a href="http://en.wikipedia.org/wiki/Glob_%28programming%29#Syntax" rel="nofollow">wikipedia entry</a>.</p>

<p>For simple windows cmd patterns the code would be:</p>

<pre><code>public static String wildcardToRegex(String wildcard){
    StringBuffer s = new StringBuffer(wildcard.length());
    s.append('^');
    for (int i = 0, is = wildcard.length(); i &lt; is; i++) {
        char c = wildcard.charAt(i);
        switch(c) {
            case '*':
                s.append(".*");
                break;
            case '?':
                s.append(".");
                break;
            case '^': // escape character in cmd.exe
                s.append("\\");
                break;
                // escape special regexp-characters
            case '(': case ')': case '[': case ']': case '$':
            case '.': case '{': case '}': case '|':
            case '\\':
                s.append("\\");
                s.append(c);
                break;
            default:
                s.append(c);
                break;
        }
    }
    s.append('$');
    return(s.toString());
}
</code></pre>

<p>This does not handle well escaping of other characters than <code>*</code> and <code>?</code> (<code>^w</code> should be converted into <code>w</code> and not '\w` which has special meaning in regex) but you can easily improve that.</p>
