<p>Use Picasso or glide to load images from the server. For picasso check this - <a href="http://square.github.io/picasso/" rel="nofollow">http://square.github.io/picasso/</a></p>

<p><strong>Update</strong> </p>

<p>Try below code</p>

<p>Model class for movies details</p>

<pre><code>import java.util.ArrayList;
import java.util.List;
import javax.annotation.Generated;
import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import org.apache.commons.lang.builder.ToStringBuilder;


public class MovieDetailModel {

    @SerializedName("poster_path")
    @Expose
    private String posterPath;
    @SerializedName("adult")
    @Expose
    private Boolean adult;
    @SerializedName("overview")
    @Expose
    private String overview;
    @SerializedName("release_date")
    @Expose
    private String releaseDate;
    @SerializedName("genre_ids")
    @Expose
    private List&lt;Integer&gt; genreIds = new ArrayList&lt;Integer&gt;();
    @SerializedName("id")
    @Expose
    private Integer id;
    @SerializedName("original_title")
    @Expose
    private String originalTitle;
    @SerializedName("original_language")
    @Expose
    private String originalLanguage;
    @SerializedName("title")
    @Expose
    private String title;
    @SerializedName("backdrop_path")
    @Expose
    private String backdropPath;
    @SerializedName("popularity")
    @Expose
    private Double popularity;
    @SerializedName("vote_count")
    @Expose
    private Integer voteCount;
    @SerializedName("video")
    @Expose
    private Boolean video;
    @SerializedName("vote_average")
    @Expose
    private Double voteAverage;

    /**
    *
    * @return
    * The posterPath
    */
    public String getPosterPath() {
    return posterPath;
    }

    /**
    *
    * @param posterPath
    * The poster_path
    */
    public void setPosterPath(String posterPath) {
    this.posterPath = posterPath;
    }

    /**
    *
    * @return
    * The adult
    */
    public Boolean getAdult() {
    return adult;
    }

    /**
    *
    * @param adult
    * The adult
    */
    public void setAdult(Boolean adult) {
    this.adult = adult;
    }

    /**
    *
    * @return
    * The overview
    */
    public String getOverview() {
    return overview;
    }

    /**
    *
    * @param overview
    * The overview
    */
    public void setOverview(String overview) {
    this.overview = overview;
    }

    /**
    *
    * @return
    * The releaseDate
    */
    public String getReleaseDate() {
    return releaseDate;
    }

    /**
    *
    * @param releaseDate
    * The release_date
    */
    public void setReleaseDate(String releaseDate) {
    this.releaseDate = releaseDate;
    }

    /**
    *
    * @return
    * The genreIds
    */
    public List&lt;Integer&gt; getGenreIds() {
    return genreIds;
    }

    /**
    *
    * @param genreIds
    * The genre_ids
    */
    public void setGenreIds(List&lt;Integer&gt; genreIds) {
    this.genreIds = genreIds;
    }

    /**
    *
    * @return
    * The id
    */
    public Integer getId() {
    return id;
    }

    /**
    *
    * @param id
    * The id
    */
    public void setId(Integer id) {
    this.id = id;
    }

    /**
    *
    * @return
    * The originalTitle
    */
    public String getOriginalTitle() {
    return originalTitle;
    }

    /**
    *
    * @param originalTitle
    * The original_title
    */
    public void setOriginalTitle(String originalTitle) {
    this.originalTitle = originalTitle;
    }

    /**
    *
    * @return
    * The originalLanguage
    */
    public String getOriginalLanguage() {
    return originalLanguage;
    }

    /**
    *
    * @param originalLanguage
    * The original_language
    */
    public void setOriginalLanguage(String originalLanguage) {
    this.originalLanguage = originalLanguage;
    }

    /**
    *
    * @return
    * The title
    */
    public String getTitle() {
    return title;
    }

    /**
    *
    * @param title
    * The title
    */
    public void setTitle(String title) {
    this.title = title;
    }

    /**
    *
    * @return
    * The backdropPath
    */
    public String getBackdropPath() {
    return backdropPath;
    }

    /**
    *
    * @param backdropPath
    * The backdrop_path
    */
    public void setBackdropPath(String backdropPath) {
    this.backdropPath = backdropPath;
    }

    /**
    *
    * @return
    * The popularity
    */
    public Double getPopularity() {
    return popularity;
    }

    /**
    *
    * @param popularity
    * The popularity
    */
    public void setPopularity(Double popularity) {
    this.popularity = popularity;
    }

    /**
    *
    * @return
    * The voteCount
    */
    public Integer getVoteCount() {
    return voteCount;
    }

    /**
    *
    * @param voteCount
    * The vote_count
    */
    public void setVoteCount(Integer voteCount) {
    this.voteCount = voteCount;
    }

    /**
    *
    * @return
    * The video
    */
    public Boolean getVideo() {
    return video;
    }

    /**
    *
    * @param video
    * The video
    */
    public void setVideo(Boolean video) {
    this.video = video;
    }

    /**
    *
    * @return
    * The voteAverage
    */
    public Double getVoteAverage() {
    return voteAverage;
    }

    /**
    *
    * @param voteAverage
    * The vote_average
    */
    public void setVoteAverage(Double voteAverage) {
    this.voteAverage = voteAverage;
    }

    @Override
    public String toString() {
    return ToStringBuilder.reflectionToString(this);
    }

}
</code></pre>

<p>Adapter code</p>

<pre><code>public class ImageAdapter extends BaseAdapter {
    private Context mContext;
    private List&lt;MovieDetailModel&gt; movieList = new ArrayList&lt;MovieDetailModel&gt;();

    public ImageAdapter(Context c, List&lt;MovieDetailModel&gt; mMovieList) {
        mContext = c;
        movieList = mMovieList;
    }

    public int getCount() {
        return movieList.size();
    }

    public Object getItem(int position) {
        return movieList.get(position);
    }

    public long getItemId(int position) {
        return position;
    }

    // create a new ImageView for each item referenced by the Adapter
    public View getView(int position, View convertView, ViewGroup parent) {
        ImageView imageView;
        if (convertView == null) {  
     // if it's not recycled, initialize some    attributes
            imageView = new ImageView(mContext);
            imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
            imageView.setPadding(8, 8, 8, 8);
        } else {
            imageView = (ImageView) convertView;
        }


        if(!TextUtils.isEmpty(movieList.get(position).getPosterPath()))
            Picasso.with(mContext).load(movieList.get(position).getPosterPath()).into(imageView);

        //imageView.setImageResource(mThumbIds[position]);
        return imageView;
    }


    // references to your images
    private Integer[] mThumbIds = {
    };
}
</code></pre>
