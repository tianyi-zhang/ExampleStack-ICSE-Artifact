<p>Like all performance timing questions, you really need to benchmark in the environment where you are expecting to run your code. Different JVM versions and hardware (CPU, memory, etc) configurations may have different results. It really depends on your specific performance requirements.</p>

<p>But then, before getting to this level of performance tuning, you should first write the code clearly and make it right first. The compiler and JIT will be able to to a lot of optimizations for you with normal algorithm expressions but sometimes hand optimizations can confuse these automated optimizations. After you have a working product and if performance is not then what you would like, then profile and work on the hot spots only. (Though sometimes for more complex code you may need to refactor and/or change your logic.)</p>

<p>In this case, if you copying entire arrays then use <code>System.arraycopy</code> as this is the standard way to do that. The compiler may now or in the future provide additional optimizations for that since the core APIs rely on this heavily you can rest assured that this is something that the JVM developers always want to have running optimally.</p>

<p>You will need to run through some loops though since <code>System.arraycopy</code> can only do a single array object and with Java multi-dimension arrays are really arrays of arrays. So...</p>

<pre><code>public int[][][] copyOf3Dim(int[][][] array) {
    int[][][] copy;
    copy = new int[array.length][][];
    for (int i = 0; i &lt; array.length; i++) {
        copy[i] = new int[array[i].length][];
        for (int j = 0; j &lt; array[i].length; j++) {
            copy[i][j] = new int[array[i][j].length];
            System.arraycopy(array[i][j], 0, copy[i][j], 0, 
                array[i][j].length);
        }
    }
    return copy;
}    
</code></pre>

<p>Or you could use <code>Arrays.copyOf</code> which uses <code>System.arraycopy</code> and some reflection internally (so is not as fast as directly using <code>System.arraycopy</code> yourself), but does not do a deep copy.</p>
