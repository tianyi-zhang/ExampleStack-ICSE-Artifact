<p>MLaw's solution is a very practical Parallel.ForEach. I added a bit modification to make a Parallel.For.</p>

<pre><code>public class Parallel
{
static final int iCPU = Runtime.getRuntime().availableProcessors();

public static &lt;T&gt; void ForEach(Iterable &lt;T&gt; parameters,
                   final LoopBody&lt;T&gt; loopBody)
{
    ExecutorService executor = Executors.newFixedThreadPool(iCPU);
    List&lt;Future&lt;?&gt;&gt; futures  = new LinkedList&lt;Future&lt;?&gt;&gt;();

    for (final T param : parameters)
    {
        Future&lt;?&gt; future = executor.submit(new Runnable()
        {
            public void run() { loopBody.run(param); }
        });

        futures.add(future);
    }

    for (Future&lt;?&gt; f : futures)
    {
        try   { f.get(); }
        catch (InterruptedException e) { } 
        catch (ExecutionException   e) { }         
    }

    executor.shutdown();     
}

public static void For(int start,
                   int stop,
               final LoopBody&lt;Integer&gt; loopBody)
{
    ExecutorService executor = Executors.newFixedThreadPool(iCPU);
    List&lt;Future&lt;?&gt;&gt; futures  = new LinkedList&lt;Future&lt;?&gt;&gt;();

    for (int i=start; i&lt;stop; i++)
    {
        final Integer k = i;
        Future&lt;?&gt; future = executor.submit(new Runnable()
        {
            public void run() { loopBody.run(k); }
        });     
        futures.add(future);
    }

    for (Future&lt;?&gt; f : futures)
    {
        try   { f.get(); }
        catch (InterruptedException e) { } 
        catch (ExecutionException   e) { }         
    }

    executor.shutdown();     
}
}

public interface LoopBody &lt;T&gt;
{
    void run(T i);
}

public class ParallelTest
{
int k;  

public ParallelTest()
{
    k = 0;
    Parallel.For(0, 10, new LoopBody &lt;Integer&gt;()
    {
        public void run(Integer i)
        {
            k += i;
            System.out.println(i);          
        }
    });
    System.out.println("Sum = "+ k);
}

public static void main(String [] argv)
{
    ParallelTest test = new ParallelTest();
}
}
</code></pre>
