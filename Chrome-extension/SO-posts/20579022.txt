<p>I think what a lot of people want to do is parse JSON date strings. There is a good chance if you come to this page that you might want to convert a JavaScript JSON date to a Java date.</p>

<p>To show what a JSON date string looks like:</p>

<pre><code>    var d=new Date();
    var s = JSON.stringify(d);

    document.write(s);
    document.write("&lt;br /&gt;"+d);


    "2013-12-14T01:55:33.412Z"
    Fri Dec 13 2013 17:55:33 GMT-0800 (PST)
</code></pre>

<p>The JSON date string is 2013-12-14T01:55:33.412Z.</p>

<p>Dates are not covered by JSON spec per say, but the above is a very specific ISO 8601 format, while ISO_8601 is much much bigger and that is a mere subset albeit a very important one.</p>

<p>See <a href="http://www.json.org" rel="nofollow">http://www.json.org</a>
See <a href="http://en.wikipedia.org/wiki/ISO_8601" rel="nofollow">http://en.wikipedia.org/wiki/ISO_8601</a>
See <a href="http://www.w3.org/TR/NOTE-datetime" rel="nofollow">http://www.w3.org/TR/NOTE-datetime</a></p>

<p>As it happens I wrote a JSON parser and a PLIST parser both of which use ISO-8601 but not the same bits.</p>

<pre><code>/*
    var d=new Date();
    var s = JSON.stringify(d);

    document.write(s);
    document.write("&lt;br /&gt;"+d);


    "2013-12-14T01:55:33.412Z"
    Fri Dec 13 2013 17:55:33 GMT-0800 (PST)


 */
@Test
public void jsonJavaScriptDate() {
    String test =  "2013-12-14T01:55:33.412Z";

    Date date = Dates.fromJsonDate ( test );
    Date date2 = Dates.fromJsonDate_ ( test );

    assertEquals(date2.toString (), "" + date);

    puts (date);
}
</code></pre>

<p>I wrote two ways to do this for my project. One standard, one fast.</p>

<p>Again, JSON date string is a very specific implementation of ISO 8601....</p>

<p>(I posted the other one in the other answer which should work for PLIST dates, which are a different ISO 8601 format).</p>

<p>The JSON date is as follows:</p>

<pre><code>public static Date fromJsonDate_( String string ) {

    try {

        return new SimpleDateFormat ( "yyyy-MM-dd'T'HH:mm:ss.SSSXXX").parse ( string );
    } catch ( ParseException e ) {
        return Exceptions.handle (Date.class, "Not a valid JSON date", e);
    }


}
</code></pre>

<p>PLIST files (ASCII non GNUNext) also uses ISO 8601 but no miliseconds so... not all ISO-8601 dates are the same. (At least I have not found one that uses milis yet and the parser I have seen skip the timezone altogether OMG).</p>

<p>Now for the fast version (you can find it in Boon).</p>

<pre><code>public static Date fromJsonDate( String string ) {

    return fromJsonDate ( Reflection.toCharArray ( string ), 0, string.length () );

}
</code></pre>

<p>Note that Reflection.toCharArray uses unsafe if available but defaults to string.toCharArray if not.</p>

<p>(You can take it out of the example by replacing Reflection.toCharArray ( string ) with string.toCharArray()).</p>

<pre><code>public static Date fromJsonDate( char[] charArray, int from, int to ) {

    if (isJsonDate ( charArray, from, to )) {
        int year = CharScanner.parseIntFromTo ( charArray, from + 0, from + 4 );
        int month = CharScanner.parseIntFromTo ( charArray,  from +5,  from +7 );
        int day = CharScanner.parseIntFromTo ( charArray,  from +8,  from +10 );
        int hour = CharScanner.parseIntFromTo ( charArray,  from +11,  from +13 );

        int minute = CharScanner.parseIntFromTo ( charArray,  from +14,  from +16 );

        int second = CharScanner.parseIntFromTo ( charArray,  from +17,  from +19 );

        int miliseconds = CharScanner.parseIntFromTo ( charArray,  from +20,  from +23 );

        TimeZone tz = TimeZone.getTimeZone ( "GMT" );


        return toDate ( tz, year, month, day, hour, minute, second, miliseconds );

    }   else {
        return null;
    }

}
</code></pre>

<p>The isJsonDate is implemented as follows:</p>

<pre><code>public static boolean isJsonDate( char[] charArray, int start, int to ) {
    boolean valid = true;
    final int length = to -start;

    if (length != JSON_TIME_LENGTH) {
        return false;
    }

    valid &amp;=  (charArray [ start + 19 ]  == '.');

    if (!valid) {
        return false;
    }


    valid &amp;=  (charArray[  start +4 ]  == '-') &amp;&amp;
            (charArray[  start +7 ]  == '-') &amp;&amp;
            (charArray[  start +10 ] == 'T') &amp;&amp;
            (charArray[  start +13 ] == ':') &amp;&amp;
            (charArray[  start +16 ] == ':');

    return valid;
}
</code></pre>

<p>Anyway... my guess is that quite a few people who come here.. might be looking for the JSON Date String and although it is an ISO-8601 date, it is a very specific one that needs a very specific parse.</p>

<pre><code>public static int parseIntFromTo ( char[] digitChars, int offset, int to ) {
    int num = digitChars[ offset ] - '0';
    if ( ++offset &lt; to ) {
        num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
        if ( ++offset &lt; to ) {
            num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
            if ( ++offset &lt; to ) {
                num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
                if ( ++offset &lt; to ) {
                    num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
                    if ( ++offset &lt; to ) {
                        num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
                        if ( ++offset &lt; to ) {
                            num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
                            if ( ++offset &lt; to ) {
                                num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
                                if ( ++offset &lt; to ) {
                                    num = ( num * 10 ) + ( digitChars[ offset ] - '0' );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return num;
}
</code></pre>

<p>See <a href="https://github.com/RichardHightower/boon" rel="nofollow">https://github.com/RichardHightower/boon</a>
Boon has a PLIST parser (ASCII) and a JSON parser. </p>

<p>The JSON parser is the fastest Java JSON parser that I know of. </p>

<p>Independently verified by the Gatling Performance dudes.</p>

<p><a href="https://github.com/gatling/json-parsers-benchmark" rel="nofollow">https://github.com/gatling/json-parsers-benchmark</a></p>

<pre><code>Benchmark                               Mode Thr     Count  Sec         Mean   Mean error        Units
BoonCharArrayBenchmark.roundRobin      thrpt  16        10    1   724815,875    54339,825    ops/s
JacksonObjectBenchmark.roundRobin      thrpt  16        10    1   580014,875   145097,700    ops/s
JsonSmartBytesBenchmark.roundRobin     thrpt  16        10    1   575548,435    64202,618    ops/s
JsonSmartStringBenchmark.roundRobin    thrpt  16        10    1   541212,220    45144,815    ops/s
GSONStringBenchmark.roundRobin         thrpt  16        10    1   522947,175    65572,427    ops/s
BoonDirectBytesBenchmark.roundRobin    thrpt  16        10    1   521528,912    41366,197    ops/s
JacksonASTBenchmark.roundRobin         thrpt  16        10    1   512564,205   300704,545    ops/s
GSONReaderBenchmark.roundRobin         thrpt  16        10    1   446322,220    41327,496    ops/s
JsonSmartStreamBenchmark.roundRobin    thrpt  16        10    1   276399,298   130055,340    ops/s
JsonSmartReaderBenchmark.roundRobin    thrpt  16        10    1    86789,825    17690,031    ops/s
</code></pre>

<p>It has the fastest JSON parser for streams, readers, bytes[], char[], CharSequence (StringBuilder, CharacterBuffer), and String.</p>

<p>See more benchmarks at:</p>

<p><a href="https://github.com/RichardHightower/json-parsers-benchmark" rel="nofollow">https://github.com/RichardHightower/json-parsers-benchmark</a></p>
