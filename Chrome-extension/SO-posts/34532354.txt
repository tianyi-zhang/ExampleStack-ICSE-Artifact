<p><strong>Unfortunately the following answer does not work. However, it helped us to find out that the bug mentioned by Poly Bug is not reproducible if the input begins with a number.</strong></p>

<hr>

<p>You can use a <code>TextWatcher</code> to listen for <code>EditText</code> changes and prevent the user from typing too many characters into the field. The following code works for me:</p>

<pre class="lang-java prettyprint-override"><code>final int maxLength = 10;
EditText editText = (EditText) findViewById(R.id.my_edittext_id);
editText.addTextChangedListener(new TextWatcher() {
    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {}

    @Override
    public void afterTextChanged(Editable s) {
        if (s.length() &gt;= maxLength) s.delete(maxLength, s.length());
    }
});
</code></pre>

<p>In <code>afterTextChanged</code>, the code compares the length of the inserted text with the maximal length <code>maxLength</code> and deletes all superfluous characters.</p>

<hr>

<p>You might replace all standard <code>EditText</code> classes with the following class to use the listener in conjunction with the <code>maxLength</code> XML attribute:</p>

<pre class="lang-java prettyprint-override"><code>public class MyMaxLengthEditText extends EditText {
    public static final String XML_NAMESPACE_ANDROID = "http://schemas.android.com/apk/res/android";
    private final int mMaxLength;

    public MyMaxLengthEditText(Context context) {
        super(context, null);
        mMaxLength = -1;
    }

    public MyMaxLengthEditText(Context context, AttributeSet attrs) {
        super(context, attrs);
        mMaxLength = attrs.getAttributeIntValue(XML_NAMESPACE_ANDROID, "maxLength", -1);
        addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {}

            @Override
            public void afterTextChanged(Editable s) {
                if (s.length() &gt;= mMaxLength) s.delete(mMaxLength, s.length());
            }
        });
    }
}
</code></pre>
