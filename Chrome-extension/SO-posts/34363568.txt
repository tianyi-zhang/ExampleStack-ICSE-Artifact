<p>Yes, this is possible.</p>

<p>There are astronomical algorithms that enable the numerical translation between a Julian Day Number and a date-time stamp.  The algorithm with which I am familiar was published by J. Meeus in his <em>Astronomical Algorithms, 2nd Ed.</em>  This algorithm will convert a Julian Day Number to a vector of integers representing the corresponding:</p>

<ul>
<li>YEAR</li>
<li>MONTH_IN_YEAR (1-12)</li>
<li>DAY_IN_MONTH (1-28,29,30,31 as appropriate)</li>
<li>HOUR_IN_DAY (0-23)</li>
<li>MINUTE_IN_HOUR (0-59)</li>
<li>SECOND_IN_MINUTE (0-59)</li>
<li>MILLISECOND_IN_SECOND (0-999)</li>
</ul>

<p>Because both POSIX time and Julian Day Numbers are date serials (counts of consecutive time units) they are trivial to interconvert.  Thus, the 1st step for using this algorithm would be to convert POSIX time (millis since midnight Jan 1, 1970) to a Julian Day Number (count of days since November 24, 4714 BC, in the proleptic Gregorian calendar). This is trivial to do since you simply convert from millis to days and adjust the epoch.  </p>

<p>Here are the constants:</p>

<pre><code>/** Accessor index for year field from a date/time vector of ints. */
public static final int YEAR = 0;

/** Accessor index for month-in-year field from a date/time vector of ints */
public static final int MONTH = 1;

/** Accessor index for day-in-month field from a date/time vector of ints */
public static final int DAY = 2;

/** Accessor index for hour-in-day field from a date/time vector of ints */
public static final int HOURS = 3;

/** Accessor index for minute-in-hour field from a date/time vector of ints */
public static final int MINUTES = 4;

/** Accessor index for second-in-minute field from a date/time vector of ints */
public static final int SECONDS = 5;

/** Accessor index for millis-in-second field from a date/time vector of ints */
public static final int MILLIS = 6;

/** The POSIX Epoch represented as a modified Julian Day number */
public static final double POSIX_EPOCH_AS_MJD = 40587.0d;
</code></pre>

<p>And here is the method for the algorithm that converts a Julian Day Number (supplied as a <code>double</code>) to a vector of integers.  In the code below, you can substitute the <code>trunc()</code> function with <code>Math.floor()</code> and retain the correct behavior:</p>

<pre><code>public static int[] toVectorFromDayNumber(double julianDay) {

    int[] ymd_hmsm = {YEAR, MONTH, DAY, HOURS, MINUTES, SECONDS, MILLIS};
    int a, b, c, d, e, z;
    double f, x;

    double jd = julianDay + 0.5;

    z = (int) trunc(jd);
    f = (jd - z) + (0.5 / (86400.0 * 1000.0));

    if (z &gt;= 2299161) {
        int alpha = (int) trunc((z - 1867216.25) / 36524.25);
        a = z + 1 + alpha - (alpha / 4);
    } else {
        a = z;
    }

    b = a + 1524;
    c = (int) trunc((b - 122.1) / 365.25);
    d = (int) trunc(365.25 * c);
    e = (int) trunc((b - d) / 30.6001);

    ymd_hmsm[DAY] = b - d - (int) trunc(30.6001 * e);
    ymd_hmsm[MONTH] = (e &lt; 14) 
            ? (e - 1) 
            : (e - 13);
    ymd_hmsm[YEAR] = (ymd_hmsm[MONTH] &gt; 2) 
            ? (c - 4716) 
            : (c - 4715);

    for (int i = HOURS; i &lt;= MILLIS; i++) {
        switch (i) {
            case HOURS:
                f = f * 24.0;
                break;
            case MINUTES:  case SECONDS:
                f = f * 60.0;
                break;
            case MILLIS:
                f = f * 1000.0;
                break;
        }
        x = trunc(f);
        ymd_hmsm[i] = (int) x;
        f = f - x;
    }
    return ymd_hmsm;
}
</code></pre>

<p>For example, if the function is called with the Julian Day Number 2457272.5, it would return the following vector of integers representing midnight, Sept 7, 2015 (Labor Day) in UTC:</p>

<p>[ 2015, 9, 7, 0, 0, 0, 0 ]</p>

<p>Edit: A remarkable thing about the Meeus algorithm is that it correctly accounts for both Leap Years and century days (including the century day exception).  It uses only integer and floating point arithmetic and is very likely to be more performant than solutions which require object instantiations from the Java Calendar or Date-Time APIs. </p>
