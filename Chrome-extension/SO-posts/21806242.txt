<blockquote>
  <p>I'm trying to make a sorting class which could be used for any type of class as long as it implements Comparator.</p>
</blockquote>

<p>Well, that's an unusual path.  <code>Comparator</code> normally is a separate class from the thing being sorted.</p>

<p>It's sensible to make a sorting class which could be used for any type of class as long as it implements <code>Comparable</code>.</p>

<p>You've also put much of the sorting logic in the constructor, which is a bit abnormal as well.  It's usually better to make a separate method that does the work.</p>

<p>A reasonable approach to doing this for the <code>Comparable</code> interface would be approximately as follows:</p>

<pre><code>public class ComparableSort&lt;T extends Comparable&lt;T&gt;&gt; {

    public ComparableSort() {
    }

    public void sort(T[] arr){
        boolean needNextPass = true;
        for (int k = 1; k &lt; arr.length &amp;&amp; needNextPass; k++)
        { // Array may be sorted and next pass not needed
            needNextPass = false;
            for (int i = 0; i &lt; arr.length - k; i++){
                if (arr[i].compareTo(arr[i + 1])&gt;0){ // Swap list[i] with list[i + 1]
                    T temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;

                    needNextPass = true; // Next pass still needed
                }
            }
        }
    }

    public static void main(String[] args) {
        Integer[] test = new Integer[]{5,3,2,4,1};
        ComparableSort&lt;Integer&gt; sorter = new ComparableSort&lt;Integer&gt;();
        sorter.sort(test);
        System.out.println(Arrays.toString(test));
    }
}
</code></pre>

<p>Alternatively, you can sensibly make a sorting class which can be used for any type of class at all with the provision of a <code>Comparator</code> for that class:</p>

<pre><code>public class ComparatorSort&lt;T&gt; {

    private final Comparator&lt;T&gt; comp;

    public ComparatorSort(Comparator&lt;T&gt; comp){
        this.comp = comp;
    }

    public void sort(T[] arr){
        boolean needNextPass = true;
        for (int k = 1; k &lt; arr.length &amp;&amp; needNextPass; k++)
        { // Array may be sorted and next pass not needed
            needNextPass = false;
            for (int i = 0; i &lt; arr.length - k; i++){
                if (comp.compare(arr[i], arr[i + 1])&gt;0){ // Swap list[i] with list[i + 1]
                    T temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;

                    needNextPass = true; // Next pass still needed
                }
            }
        }
    }

    public static void main(String[] args) {
        Integer[] test = new Integer[]{5,3,2,4,1};
        ComparatorSort&lt;Integer&gt; sorter = new ComparatorSort&lt;Integer&gt;(new Comparator&lt;Integer&gt;() {
            @Override
            public int compare(Integer integer, Integer integer2) {
                if (integer &gt; integer2)
                    return 1;
                else if (integer &lt; integer2)
                    return -1;
                return 0;
            }
        });
        sorter.sort(test);
        System.out.println(Arrays.toString(test));
    }
}
</code></pre>

<p>Of course bubble sort isn't a good sort, and there are better sorts built into Java libraries already, but this is a good learning exercise.</p>
