<pre><code>package com.example.testproject;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.EditText;
import android.widget.Filter;
import android.widget.Filterable;
import android.widget.ListView;
import android.widget.TextView;

@SuppressLint("SetJavaScriptEnabled")
public class MainActivity extends Activity {

EditText ed;
ArrayList&lt;Person&gt; mlist;
ListView lv;
CustomContact adapter;
ArrayList&lt;Person&gt; tempList;

@SuppressWarnings("unchecked")
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    setContentView(R.layout.activity_main);
    ed = (EditText) findViewById(R.id.editText);
    mlist = new ArrayList&lt;Person&gt;();
    mlist.add(new Person(0, "A"));
    mlist.add(new Person(0, "B"));
    mlist.add(new Person(0, "C"));
    mlist.add(new Person(0, "D"));
    mlist.add(new Person(0, "E"));

    lv = (ListView) findViewById(R.id.listView);
    adapter = new CustomContact(this, mlist);
    lv.setAdapter(adapter);

    tempList = (ArrayList&lt;Person&gt;) mlist.clone();

    ed.addTextChangedListener(new TextWatcher() {

        @Override
        public void onTextChanged(CharSequence s, int start, int before,
                int count) {
            if (s.toString().trim().equalsIgnoreCase("")) {
                mlist = (ArrayList&lt;Person&gt;) tempList.clone();
            } else {
                MainActivity.this.adapter.getFilter().filter(s);
            }
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count,
                int after) {

        }

        @Override
        public void afterTextChanged(Editable s) {
            setVisibiltyList();

        }
    });

}

public void setVisibiltyList() {
    if (ed.getText().toString().equals("")) {
        lv.setVisibility(View.GONE);
    } else {
        lv.setVisibility(View.VISIBLE);
    }
}

class CustomContact extends BaseAdapter implements Filterable {

    Activity context;

    public CustomContact(Activity context, ArrayList&lt;Person&gt; list) {
        super();
        this.context = context;
        mlist = list;
    }

    @Override
    public int getCount() {
        // TODO Auto-generated method stub
        return mlist.size();
    }

    @Override
    public Object getItem(int position) {
        // TODO Auto-generated method stub
        return position;
    }

    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        TextView tv = new TextView(context);
        tv.setText(mlist.get(position).name);

        return tv;
    }

    @Override
    public Filter getFilter() {
        Filter filter = new Filter() {

            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint,
                    FilterResults results) {
                mlist = (ArrayList&lt;Person&gt;) results.values;
                notifyDataSetChanged();
            }

            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults results = new FilterResults();
                ArrayList&lt;Person&gt; FilteredList = new ArrayList&lt;Person&gt;();
                if (constraint == null || constraint.length() == 0) {
                    // No filter implemented we return all the list
                    results.values = mlist;
                    results.count = mlist.size();

                } else {

                    for (int i = 0; i &lt; mlist.size(); i++) {
                        String data = mlist.get(i).name;

                        if (data.toLowerCase().contains(
                                constraint.toString().toLowerCase())) {
                            FilteredList.add(mlist.get(i));
                        }
                    }
                    results.values = FilteredList;
                    results.count = FilteredList.size();
                }

                return results;
            }
        };

        return filter;
    }

}

class Person {

    public String name;

    public Person(int id, String name) {
        this.name = name;
    }

}

}
</code></pre>
