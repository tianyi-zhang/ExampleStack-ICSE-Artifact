<p>Here's the method to solve your problem:</p>

<pre><code>/**
 * @param a array sorted by absolute value
 * @param key value to find (must be positive)
 * @return position of the first occurence of the key or -1 if key not found
 */
public static int binarySearch(int[] a, int key) {
    int low = 0;
    int high = a.length-1;

    while (low &lt;= high) {
        int mid = (low + high) &gt;&gt;&gt; 1;
        int midVal = Math.abs(a[mid]);

        if (midVal &lt; key)
            low = mid + 1;
        else if (midVal &gt; key || (midVal == key &amp;&amp; mid &gt; 0 &amp;&amp; Math.abs(a[mid-1]) == key))
            high = mid - 1;
        else
            return mid; // key found
    }
    return -1; // key not found.
}
</code></pre>

<p>It's a modification of <code>Arrays.binarySearch</code> from JDK. There are several changes. First, we compare absolute values. Second, as you want not any key position, but the first one, I modified a condition: if we found a key we check whether the previous array item has the same value. If yes, then we continue search. This way algorithm remains <code>O(log N)</code> even for special cases where too many values which are equal to key.</p>
