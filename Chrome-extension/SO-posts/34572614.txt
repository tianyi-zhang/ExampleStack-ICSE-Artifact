<p>Using getLastKnownLocation causes issues sometimes because it can take time for it to actually find a lastKnownLocation.</p>

<p>Try setting your location with the onLocationChanged function, this should effectively remove this problem.</p>

<p>You can do this as follows:</p>

<pre><code>@Override
public void onLocationChanged(Location location)
{
    this.location = location;
}
</code></pre>

<p>Now, every time your location is changed (or found for the first time) the onLocationChanged event will get called and will set your GPSTracker location variable to the location passed in the calling parameter!</p>

<p><strong>Edit:</strong></p>

<p>Try changing your GPSTracker class to the following:</p>

<pre><code>public class GPSTracker extends Service implements LocationListener, ConnectionCallbacks {
private final Context mContext;

boolean isPlayServicesEnabled = false;

boolean isGPSEnabled = false;

boolean isNetworkEnabled = false;

boolean canGetLocation = false;

Location location;
double latitude;
double longitude;

private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; //10 meters

private static final long MIN_TIME_BW_UPDATES = 1000 * 60; // 1 minute

protected LocationManager locationManager;

public GPSTracker(Context context) {
    this.mContext = context;
}

public Location getLocation() {
    try {
        locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);

        isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

        isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

        if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {
        } else {
            this.canGetLocation = true;
            if (isNetworkEnabled) {
                locationManager.requestLocationUpdates(
                        LocationManager.NETWORK_PROVIDER,
                        MIN_TIME_BW_UPDATES,
                        MIN_DISTANCE_CHANGE_FOR_UPDATES, this, Looper.getMainLooper());

                Log.d("Network", "Network");

                if (locationManager != null) {
                    location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    updateGPSCoordinates();
                }
            }
            if (isGPSEnabled) {
                if (location == null) {
                    locationManager.requestLocationUpdates(
                            LocationManager.GPS_PROVIDER,
                            MIN_TIME_BW_UPDATES,
                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);

                    Log.d("GPS Enabled", "GPS Enabled");

                    if (locationManager != null) {
                        location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                        updateGPSCoordinates();
                    }
                }
            }
        }
    } catch (Exception e) {
        //e.printStackTrace();
        Log.e("Error : Location", "Impossible to connect to LocationManager", e);
    }

    return location;
}

public void updateGPSCoordinates() {
    if (location != null) {
        latitude = location.getLatitude();
        longitude = location.getLongitude();
    }
}

public void stopUsingGPS() {
    if (locationManager != null) {
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {
            if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED &amp;&amp; checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                // TODO: Consider calling
                //    public void requestPermissions(@NonNull String[] permissions, int requestCode)
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for Activity#requestPermissions for more details.
                return;
            }
        }
        locationManager.removeUpdates(GPSTracker.this);
    }
}

public double getLatitude()
{
    if (location != null)
    {
        latitude = location.getLatitude();
    }

    return latitude;
}

public double getLongitude()
{
    if (location != null)
    {
        longitude = location.getLongitude();
    }

    return longitude;
}

public boolean canGetLocation()
{
    return this.canGetLocation;
}

public List&lt;Address&gt; getGeocoderAddress(Context context)
{
    if (location != null)
    {
        Geocoder geocoder = new Geocoder(context, Locale.ENGLISH);
        try
        {
            return geocoder.getFromLocation(latitude, longitude, 1);
        }
        catch (IOException e)
        {
            //e.printStackTrace();
            Log.e("Error : Geocoder", "Impossible to connect to Geocoder", e);
        }
    }

    return null;
}

public String getAddressLine(Context context)
{
    List&lt;Address&gt; addresses = getGeocoderAddress(context);
    if (addresses != null &amp;&amp; addresses.size() &gt; 0)
    {
        Address address = addresses.get(0);

        return address.getAddressLine(0);
    }
    else
    {
        return null;
    }
}

public String getLocality(Context context)
{
    List&lt;Address&gt; addresses = getGeocoderAddress(context);
    if (addresses != null &amp;&amp; addresses.size() &gt; 0)
    {
        Address address = addresses.get(0);

        return address.getLocality();
    }
    else
    {
        return null;
    }
}

public String getSubLocality(Context context)
{
    List&lt;Address&gt; addresses = getGeocoderAddress(context);
    if (addresses != null &amp;&amp; addresses.size() &gt; 0)
    {
        Address address = addresses.get(0);

        return address.getSubLocality();
    }
    else
    {
        return null;
    }
}

public String getPostalCode(Context context)
{
    List&lt;Address&gt; addresses = getGeocoderAddress(context);
    if (addresses != null &amp;&amp; addresses.size() &gt; 0)
    {
        Address address = addresses.get(0);

        return address.getPostalCode();
    }
    else
    {
        return null;
    }
}

public String getCountryName(Context context)
{
    List&lt;Address&gt; addresses = getGeocoderAddress(context);
    if (addresses != null &amp;&amp; addresses.size() &gt; 0)
    {
        Address address = addresses.get(0);

        return address.getCountryName();
    }
    else
    {
        return null;
    }
}

@Override
public void onLocationChanged(Location location)
{
}

@Override
public void onProviderDisabled(String provider)
{
}

@Override
public void onProviderEnabled(String provider)
{
}

@Override
public void onConnected(Bundle connectionHint) {
    isPlayServicesEnabled = true;
    getLocation();
}

@Override
public void onConnectionSuspended(int cause) {
    isPlayServicesEnabled = false;
}
</code></pre>

<p>I believe what may be causing your issue is the fact that you don't check if Google Play Services has connected or not. In the above code, I implemented ConnectionCallbacks and included the onConnected and onConnectionSuspended overrides. Now, getLocation() will only be called once Play Services have been connected. Let me know if this works out.</p>
