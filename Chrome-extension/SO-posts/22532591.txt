<p>Have a look here, This Help me for same..Pass your url to <code>GetTemplateImageController</code> and get the result in <code>Bitmap</code> array</p>

<p>GetTemplateImageController  Class:</p>

<pre><code> public class GetTemplateImageController  extends AsyncTask&lt;String, Void, Bitmap[]&gt;
    {
        Context mcontext;
        private ProgressDialog pDialog;
        public static  String[] imageurls;
        public static Bitmap bm[]=new Bitmap[15];
        // URL to get JSON
        private static final String url= "http://xxx.xxx.xxx.xxx/image_master.php?";
        private static final String TEMPLATE = "Template_images";
        private static final String IMAGEURLS = "tempimagename";
        // JSONArray
        JSONArray loginjsonarray=null;
        //result from url
        public GetTemplateImageController(Context c) {
            this.mcontext=c;
        }
        protected void onPreExecute() {
            // Showing progress dialog
            super.onPreExecute();
            pDialog=new ProgressDialog(mcontext);
            pDialog.setMessage("Loading");
            pDialog.setCancelable(true);
            pDialog.setIndeterminate(true);
            pDialog.show();
        }
        protected Bitmap[] doInBackground(String... arg) {
            List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
            params.add(new BasicNameValuePair("templateMasterId",arg[0].toString()));
            // Creating service handler class instance
            ServiceHandler sh = new ServiceHandler();
             // Making a request to url and getting response
            String jsonstr = sh.makeServiceCall(url, ServiceHandler.POST, params);
            Log.d("Response: ", "&gt;"+jsonstr);
            if(jsonstr!=null)
            {
            try {
                JSONObject jsonObj =new JSONObject(jsonstr);
                loginjsonarray=jsonObj.getJSONArray(TEMPLATE);
                imageurls=new String[loginjsonarray.length()];
                for(int i=0;i&lt;loginjsonarray.length();i++)
                {
                JSONObject l=loginjsonarray.getJSONObject(i);
                imageurls[i]=l.getString(IMAGEURLS);
                }
                for(int i=0;i&lt;imageurls.length;i++){    
                 bm[i]=DownloadImage(imageurls[i]);
                }
                }catch(JSONException e){
                e.printStackTrace();
                }
              }else{
                Toast.makeText(mcontext,"Check your Internet Connection",Toast.LENGTH_SHORT).show();
              }
                return bm;
           }
        public Bitmap DownloadImage(String STRURL) {
            Bitmap bitmap = null;
            InputStream in = null;       
            try {
                int response = -1;
                URL url = new URL(STRURL);
                URLConnection conn = url.openConnection();
                if (!(conn instanceof HttpURLConnection))             
                throw new IOException("Not an HTTP connection");
                try{
                HttpURLConnection httpConn = (HttpURLConnection) conn;
                httpConn.setAllowUserInteraction(false);
                httpConn.setInstanceFollowRedirects(true);
                httpConn.setRequestMethod("GET");
                httpConn.connect();
                response = httpConn.getResponseCode();  
                if (response == HttpURLConnection.HTTP_OK) {
                in = httpConn.getInputStream();
                }                    
                }catch(Exception ex) {
                throw new IOException("Error connecting"); 
                }
                bitmap = BitmapFactory.decodeStream(in);
                in.close();
                }catch (IOException e1) {
                e1.printStackTrace();
                }
                return bitmap; 
            }
        protected void onPostExecute(Integer result) {
            // Dismiss the progress dialog

             pDialog.dismiss();
             if(result != null)
                    Toast.makeText(mcontext,"Download complete", Toast.LENGTH_SHORT).show();

            //}
        }
    }
</code></pre>

<p>ServiceHandler Class:</p>

<pre><code>    public class ServiceHandler {
        static String response = null;
        public final static int GET = 1;
        public final static int POST = 2;
        public String makeServiceCall(String url, int method) {
            return this.makeServiceCall(url, method, null);
        }
        /**
         * Making service call
         * @url - url to make request
         * @method - http request method
         * @params - http request params
         * */
        public String makeServiceCall(String url, int method, List&lt;NameValuePair&gt; params)  {
            try {
                    DefaultHttpClient httpClient=new DefaultHttpClient();
                    HttpEntity httpEntity=null;
                    HttpResponse httpResponse=null;
                    // Checking http request method type
                    if(method==POST){
                        HttpPost httpPost=new HttpPost(url);
                        if(params!=null)
                        {
                            //adding post params
                            httpPost.setEntity(new UrlEncodedFormEntity(params));
                        }
                        httpResponse=httpClient.execute(httpPost);
                    }
                    else if(method==GET)
                    {
                        // appending params to url
                        if(params!=null)
                        {
                            String paramString=URLEncodedUtils.format(params, "utf-8");
                            url +="?"+paramString;
                        }
                        HttpGet httpGet=new HttpGet(url);
                        httpResponse=httpClient.execute(httpGet);
                    }
                    httpEntity=httpResponse.getEntity();
                    response=EntityUtils.toString(httpEntity);
            } catch (UnsupportedEncodingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (ClientProtocolException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            return response;
        }
}
</code></pre>
