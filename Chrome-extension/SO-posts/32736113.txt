<p>You can use <code>RecyclerView</code> inside <code>NestedScrollView</code>.
First of all you should implement your own custom <code>LinearLayoutManager</code>, it makes your <code>RecyclerView</code> to wrap its content. 
For example:</p>

<pre><code>public class WrappingLinearLayoutManager extends LinearLayoutManager
{

    public WrappingLinearLayoutManager(Context context) {
        super(context);
    }

    private int[] mMeasuredDimension = new int[2];

    @Override
    public boolean canScrollVertically() {
        return false;
    }

    @Override
    public void onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state,
            int widthSpec, int heightSpec) {
        final int widthMode = View.MeasureSpec.getMode(widthSpec);
        final int heightMode = View.MeasureSpec.getMode(heightSpec);

        final int widthSize = View.MeasureSpec.getSize(widthSpec);
        final int heightSize = View.MeasureSpec.getSize(heightSpec);

        int width = 0;
        int height = 0;
        for (int i = 0; i &lt; getItemCount(); i++) {
            if (getOrientation() == HORIZONTAL) {
                measureScrapChild(recycler, i,
                        View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                        heightSpec,
                        mMeasuredDimension);

                width = width + mMeasuredDimension[0];
                if (i == 0) {
                    height = mMeasuredDimension[1];
                }
            } else {
                measureScrapChild(recycler, i,
                        widthSpec,
                        View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED),
                        mMeasuredDimension);

                height = height + mMeasuredDimension[1];
                if (i == 0) {
                    width = mMeasuredDimension[0];
                }
            }
        }

        switch (widthMode) {
            case View.MeasureSpec.EXACTLY:
                width = widthSize;
            case View.MeasureSpec.AT_MOST:
            case View.MeasureSpec.UNSPECIFIED:
        }

        switch (heightMode) {
            case View.MeasureSpec.EXACTLY:
                height = heightSize;
            case View.MeasureSpec.AT_MOST:
            case View.MeasureSpec.UNSPECIFIED:
        }

        setMeasuredDimension(width, height);
    }

    private void measureScrapChild(RecyclerView.Recycler recycler, int position, int widthSpec,
            int heightSpec, int[] measuredDimension) {

        View view = recycler.getViewForPosition(position);
        if (view.getVisibility() == View.GONE) {
            measuredDimension[0] = 0;
            measuredDimension[1] = 0;
            return;
        }
        // For adding Item Decor Insets to view
        super.measureChildWithMargins(view, 0, 0);
        RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();
        int childWidthSpec = ViewGroup.getChildMeasureSpec(
                widthSpec,
                getPaddingLeft() + getPaddingRight() + getDecoratedLeft(view) + getDecoratedRight(view),
                p.width);
        int childHeightSpec = ViewGroup.getChildMeasureSpec(
                heightSpec,
                getPaddingTop() + getPaddingBottom() + getDecoratedTop(view) + getDecoratedBottom(view),
                p.height);
        view.measure(childWidthSpec, childHeightSpec);

        // Get decorated measurements
        measuredDimension[0] = getDecoratedMeasuredWidth(view) + p.leftMargin + p.rightMargin;
        measuredDimension[1] = getDecoratedMeasuredHeight(view) + p.bottomMargin + p.topMargin;
        recycler.recycleView(view);
    }
}
</code></pre>

<p>After that use this <code>LayoutManager</code> for your <code>RecyclerView</code></p>

<pre><code>recyclerView.setLayoutManager(new WrappingLinearLayoutManager(getContext()));
</code></pre>

<p>But you also should call those two methods:</p>

<pre><code>recyclerView.setNestedScrollingEnabled(false);
recyclerView.setHasFixedSize(false);
</code></pre>

<p>Here <code>setNestedScrollingEnabled(false)</code> disable scrolling for <code>RecyclerView</code>, so it doesn't intercept scrolling event from <code>NestedScrollView</code>. And <code>setHasFixedSize(false)</code> determine that changes in adapter content can change the size of the <code>RecyclerView</code></p>

<p>Hope it helps you</p>

<p><strong>Update ?1:</strong></p>

<p>This solution is little buggy in some cases and has problems with perfomance, so if you have a lot of items in your <code>RecyclerView</code> I'd recommend to use custom <code>LinearLayout</code>-based implementation of list view, create analogue of Adapter for it and make it behave like <code>ListView</code> or <code>RecyclerView</code></p>

<p><strong>Update ?2 (Important!):</strong></p>

<p>In Android Support Library 23.2.0 there were added method <code>setAutoMeasureEnabled(true)</code> for LayoutManagers. It makes RecyclerView to wrap it's content and works like a charm.<br>
<a href="http://android-developers.blogspot.ru/2016/02/android-support-library-232.html">http://android-developers.blogspot.ru/2016/02/android-support-library-232.html</a></p>
