<p>In a nutshell, you can do a camera preview in full screen however you'll need to find out the appropriate sizes among the supported preview sizes by yourself, only if a customized camera preview is what you want.</p>

<p>For your question, according to the <a href="http://developer.android.com/guide/topics/media/camera.html#check-camera-features">Android Developers -- Camera</a></p>

<blockquote>
  <p>If you want to set a specific size for your camera preview, set this
  in the <code>surfaceChanged()</code> method as noted in the comments above. When
  setting preview size, you <strong>must</strong> use values from
  <code>getSupportedPreviewSizes()</code>. <strong>Do not set arbitrary values in the</strong>
  <code>setPreviewSize()</code> <strong>method</strong>.</p>
</blockquote>

<p>It seemed you can't manually pass the size you want other than the sizes provides by <code>getSupportedPreviewSizes()</code>. With a closer examine the sizes supported by your phones camera, you'll find the ratio of sizes supported might not exactly the same as your screen's ratio.</p>

<p>For example, Samsung Galaxy Ace II has 480x800 resolution screen, by reading the <code>Size</code> returned from <code>getSupportedPreviewSizes()</code>, its camera supports:</p>

<blockquote>
  <p>2560x1920</p>
  
  <p>2560x1536</p>
  
  <p>2048x1536</p>
  
  <p>2048x1232</p>
  
  <p>960x720</p>
  
  <p>640x480</p>
</blockquote>

<p>and if you want to display your camera preview in full screen correctly (without stretch), you'll need to calculate, compare and apply the suitable ratio in these supported preview sizes.</p>

<p>Implementation of finding a proper preview size is not that complicated stuff. A common method for doing this would be something like this:</p>

<pre><code>    /**
     * Calculate the optimal size of camera preview
     * @param sizes
     * @param w
     * @param h
     * @return
     */
    private Size getOptimalSize(List&lt;Size&gt; sizes, int w, int h) {

        final double ASPECT_TOLERANCE = 0.2;        
        double targetRatio = (double) w / h;         
        if (sizes == null)             
            return null;          
        Size optimalSize = null;         
        double minDiff = Double.MAX_VALUE;          
        int targetHeight = h;          
        // Try to find an size match aspect ratio and size         
        for (Size size : sizes) 
        {             
//          Log.d("CameraActivity", "Checking size " + size.width + "w " + size.height + "h");            
            double ratio = (double) size.width / size.height;            
            if (Math.abs(ratio - targetRatio) &gt; ASPECT_TOLERANCE)                
                continue;             
            if (Math.abs(size.height - targetHeight) &lt; minDiff) 
            {                 
                optimalSize = size;                 
                minDiff = Math.abs(size.height - targetHeight);             
            }         
        }          
        // Cannot find the one match the aspect ratio, ignore the requirement     

        if (optimalSize == null)
        {
            minDiff = Double.MAX_VALUE;             
            for (Size size : sizes) {
                if (Math.abs(size.height - targetHeight) &lt; minDiff)
                {
                    optimalSize = size;
                    minDiff = Math.abs(size.height - targetHeight); 
                }
            }
        }

        SharedPreferences previewSizePref;
        if (cameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {
            previewSizePref = getSharedPreferences("PREVIEW_PREF",MODE_PRIVATE);
        } else {
            previewSizePref = getSharedPreferences("FRONT_PREVIEW_PREF",MODE_PRIVATE);
        }

        SharedPreferences.Editor prefEditor = previewSizePref.edit();
        prefEditor.putInt("width", optimalSize.width);
        prefEditor.putInt("height", optimalSize.height);

        prefEditor.commit();

//      Log.d("CameraActivity", "Using size: " + optimalSize.width + "w " + optimalSize.height + "h");            
        return optimalSize;     
    }
</code></pre>

<p>And you can also do the similar to find out the suitable camera sizes (the output picture size).</p>

<p>Note: I found the original version of the code above from Internet and I did some modification/optimisation for my own purpose.</p>

<p>Please let me know if this works for you.</p>
