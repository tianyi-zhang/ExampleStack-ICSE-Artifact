<p>Without having the facility to test your code at the moment (on my laptop), I'd say that your problem is due to how you recycle your view. Have a think about how recycling works in <code>ArrayAdapter#getView()</code>. Maybe you need to move some of the code inside the <code>convertView == null</code> condition to the outside of the if/else block? To confirm that this is the problem, you could just not recycle anything and simply provide a new view each time (of course this may not be efficient if your list can grow very large, but should be ok for testing with a list large enough to have to scroll a bit).</p>

<p>Hope that helps for now, will have more of a look tomorrow.</p>

<p>Edit: Had another look at the code and there seem to be some problems with it. What exactly is the type of your model? Because you have <code>List&lt;Class_Model&gt;</code> (you should really avoid underscores in class names, imho) in your constructor, but <code>List&lt;String&gt;</code> in your instance variable <code>list</code>. It's hard for me to tell what you're trying to do without knowing which one you need for your list - is it just to display some text (in which case <code>String</code> will do), or does it require more complex behaviour (in which case you need a model object).</p>

<p>Here's some code based on the assumption that you need to have some sort of <code>ClassModel</code> defined and that your <code>ArrFDItem</code> (whatever that is) is a local variable. Both assumptions may be wrong, but I'd encourage you to think about why I'd make those assumptions... and to compare your code with the code below to see what's changed.</p>

<pre><code>public class ArrayAdapterDiscountList extends ArrayAdapter&lt;ClassModel&gt; {
    protected final List&lt;ClassModel&gt; list;
    private final Activity context;
    protected List&lt;String&gt; arrFdItems;

    public ArrayAdapterDiscountList(Activity context, List&lt;ClassModel&gt; list) {
        super(context, R.layout.list, list);
        this.context = context;
        this.list = list;
    }

    static class ViewHolder {
        protected TextView text;
        protected ToggleButton toggle;
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        View view = null;
        if (convertView == null) {

            LayoutInflater inflator = context.getLayoutInflater();
            view = inflator.inflate(R.layout.list, null);
            final ViewHolder viewHolder = new ViewHolder();
            viewHolder.text = (TextView) view.findViewById(R.id.list_item_name);
            viewHolder.toggle = (ToggleButton) view.findViewById(R.id.checkbox_toggle);
            viewHolder.toggle.setVisibility(View.VISIBLE);

            viewHolder.toggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    ClassModel element = (ClassModel) viewHolder.toggle.getTag();
                    element.setSelected(buttonView.isChecked());

                    if (isChecked) {
                        arrFdItems.add(list.get(position).getName());
                    } else {
                        arrFdItems.remove(list.get(position).getName());
                    }
                }
            });

            view.setTag(viewHolder);
            viewHolder.toggle.setTag(list.get(position));
        } else {
            view = convertView;
            ((ViewHolder) view.getTag()).toggle.setTag(list.get(position));
        }
        ViewHolder holder = (ViewHolder) view.getTag();
        holder.text.setText(list.get(position).getName());
        holder.toggle.setChecked(list.get(position).isSelected());

        return view;
    }

    public class ClassModel {
        private String name;
        private boolean isSelected;

        public String getName() {
            return name;
        }

        public boolean isSelected() {
            return isSelected;
        }

        public void setSelected(boolean aBoolean) {
            isSelected = aBoolean;
        }
    }
}
</code></pre>

<p>If that doesn't help, you need to go back to basics, read some tutorials, and try to follow them step by step until you get the hang of it. I can recommend the ones on the vogella.de site, e.g. <a href="http://www.vogella.de/articles/AndroidListView/article.html" rel="nofollow">http://www.vogella.de/articles/AndroidListView/article.html</a>.</p>
