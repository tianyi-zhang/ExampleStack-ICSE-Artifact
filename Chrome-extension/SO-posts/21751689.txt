<p>I have modified some of your code to get the correct output. Please find the code below :- </p>

<pre><code>public class StackOverflow {
public static void main(String args[]) {
    int[] intArray = new int[10];
    // Just to try the case I am passing the hard-coded value
    insertInOrder(intArray,lengthArray(intArray),50);
    insertInOrder(intArray,lengthArray(intArray),60);
    insertInOrder(intArray,lengthArray(intArray),55);
    insertInOrder(intArray,lengthArray(intArray),50);
    //Displaying the sorted array output
    for(int intA : intArray) {
        System.out.println("Sorted intResultArray" + intA);
    }   
}
// To return the exact count of element in array. I hope you are not inserting 0 as a value because I have use default value. The reason to do it is that default length property of ARRAY will return the actual size of array
// to get the exact count of element
public static int lengthArray(int[] intArrLen) {
    int count = 0;
    for (int i = 0;i &lt; intArrLen.length - 1;i++) {
        if(intArrLen[i] != 0) {
            count++;
        }
    }
    return count;
}
public static void insertInOrder(int[] arr, int count, int newVal ) // Here 'count' refers to exact count of element in array
{
    int binaryIndex = bSearch(arr,count,newVal);
    if (arr[arr.length - 1] == 0) {      // I have added to ensure that there is enough space to move element further down the array
        for (int i = lengthArray(arr);i &gt; binaryIndex;i--) {
            arr[i]=arr[i-1];
        }
    } else {
        System.out.println("There is no space to move element in array");
    }
    arr[binaryIndex]=newVal;
}
public static int bSearch(int[] a, int cnt, int key) {
    int high = cnt-1;
    int low = 0;
    int mid = 0;
    if(high == -1) {
        return low;
    } else {
        mid = (high+low)/2;
    }
    while (low &lt;= high) {
        if (key==a[mid]){
            return (mid + 1);   // I am returning 'mid + 1' in case if number already exist
        }
        else if (key &lt; a[mid]){
            high = mid-1;
            mid = (high+low)/2;
        }
        else {
            low = mid +1;
            mid = (high+low)/2;
        }
    }
    return (mid+1);
    }
}
</code></pre>

<p>Output :- </p>

<pre><code>Sorted intResultArray50
Sorted intResultArray50
Sorted intResultArray55
Sorted intResultArray60
Sorted intResultArray0
Sorted intResultArray0
Sorted intResultArray0
Sorted intResultArray0
Sorted intResultArray0
Sorted intResultArray0
</code></pre>
