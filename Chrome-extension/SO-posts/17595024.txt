<pre><code>//Disable the client state before leaving
gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);

for(int i=0; i&lt;parts.size(); i++) {
    TDModelPart t=parts.get(i);
    gl.glNormalPointer(GL10.GL_FLOAT, 0, t.getNormalBuffer());
    gl.glDrawElements(GL10.GL_TRIANGLES,t.getFacesCount(),GL10.GL_UNSIGNED_SHORT,t.getFaceBuffer());
    gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
}
</code></pre>

<p>Of course disabling the texCoord array <em>before</em> drawing anything is not a good idea, since that will cause your object to not have any valid texture coordinates (well, stricty speaking all its vertices have the current default texture coordinates). In the same way you shouldn't disable the <code>GL_VERTEX_ARRAY</code> at the end of the loop either, since this will course your object to not have any valid position data for all the following loop iterations. So your code should probably look like:</p>

<pre><code>// bind the previously generated texture
gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[0]);
gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
// Set the face rotation
gl.glFrontFace(GL10.GL_CW);

gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
gl.glTexCoordPointer(2, GL10.GL_FLOAT, 0, textureBuffer);

for(int i=0; i&lt;parts.size(); i++){
    TDModelPart t=parts.get(i);
    gl.glNormalPointer(GL10.GL_FLOAT, 0, t.getNormalBuffer());
    gl.glDrawElements(GL10.GL_TRIANGLES,t.getFacesCount(),GL10.GL_UNSIGNED_SHORT,t.getFaceBuffer());
}

//Disable the client state before leaving
gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
</code></pre>

<p>(For now I'll ignore that you set a <code>glNormalPointer</code> while not enabling the <code>GL_NORMAL_ARRAY</code>.)</p>

<p>Always keep in mind that OpenGL is a state machine and all operations, especially draw calls, operate on the current state at the point they are called and that state won't ever change except <em>you</em> change it <em>yourself</em> (with <em>"you"</em> meaning the application code here, including any other thrid party components using the same OpenGL context).</p>
