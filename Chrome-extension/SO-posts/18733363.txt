<p>The solution proposed by pratik was on the right track, but setting the size of the GridViews in the adapter is no different from using "fill_parent" or weighted heights on the GridViews in XML. Sure, the GridViews are set to the correct height, but the buttons are always the same size. So if a GridView isn't big enough for its buttons, the GridView scrolls. Useless for a keypad.</p>

<p>As I suspected, the problem is the button size. I still don't know how Android determines the button height, but it appears to fixed -- i.e., it's not dependent on the button width, which is properly adjusted to fit the GridView width. I'm guessing this is a bug in GridView. It also seems to be a bug that you can't turn off scrolling in GridView. </p>

<p>Anyhow, the solution is for getView() in each GridView's adapter to set the <em>button</em> heights to the value that makes them all fit exactly in the height allocated to the GridView. I actually tried that before posting here, but used the construct:</p>

<p>btn.setHeight(number);</p>

<p>instead of setting the height in the button's layout parameters. That was due to my not realizing that the button height doesn't get set until after the layout has completed. Also, I hadn't considered getting the usable screen height so I could compute a device-independent height. Sorry for being new to this stuff.</p>

<p>I spent a lot of time trying to use the height of the LinearLayout that contains the GridViews, which would reduce the number of constants I need to adjust for different device sizes. But that got very messy due to timing of layout completion and the oddities of how tabbed fragments are implemented (and yes, I tried setting up an OnGlobalLayoutListener). Bottom line, there are some timing issues with that approach. The upshot was that the keypad area would disappear for a second or two and get redrawn when the fragment was tabbed into view after being destroyed and re-created. It can probably be done, but I didn't have time to figure it out.</p>

<p>Anyhow, here are the relevant additions to the code. First I added the following method that I found here to the MainActivity:</p>

<pre><code>    // Method to get the usable screen height and width, which will then be available through their getters and setters

private void setUsableScreenDimensions() {
    DisplayMetrics dm = getResources().getDisplayMetrics();
    float screen_w = dm.widthPixels;
    float screen_h = dm.heightPixels;

    int resId = getResources().getIdentifier("status_bar_height", "dimen", "android");
    if (resId &gt; 0) {
        screen_h -= getResources().getDimensionPixelSize(resId);
    }
    TypedValue typedValue = new TypedValue();
    if(getTheme().resolveAttribute(android.R.attr.actionBarSize, typedValue, true)){
        screen_h -= getResources().getDimensionPixelSize(typedValue.resourceId);
    }       
    screenWidth = (double) screen_w;
    screenHeight = (double) screen_h;
}
</code></pre>

<p>Then I added this code to the adapter constructor:</p>

<pre><code>    double keypadParentHeight = (MainActivity.getScreenHeight() * Constants.KEYPAD_PARENT_HEIGHT_PERCENTAGE);
    double rowHeight = keypadParentHeight / Constants.NUMBER_OF_KEYPAD_ROWS;        
    buttonHeight = (int) (rowHeight * Constants.BUTTON_HEIGHT_FACTOR);
</code></pre>

<p>Finally, the button height in getView is set thusly:</p>

<pre><code>LayoutParams params = new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, buttonHeight);
LayoutParams params = params;
</code></pre>

<p>The actual code is slightly more complicated because there are two sets of keys (two GridViews) with different weights (1:2), so the button sizes are different. In addition, the same keypads are drawn by the same adapter on three different fragments with different size parent LinearLayouts. But that all boiled down to a few extra constants and some conditional statements in the adapter.</p>
