<pre><code>My application code which worked:


public class Product_Listing extends Fragment 
{
private static final String TAG = SubCategoryActivity.class.getSimpleName();
private static final String TAG_IMAGEPATH = "imagepath";
private static final String TAG_PRODUCTID = "productid";
private static final String TAG_PRODUCTNAME = "productname";
private static final String TAG_SUPPLIERID = "supplierid";
private static final String TAG_SUPPLIERNAME = "suppliername";
private static final String TAG_CATEGORY_ID = "catid";
private static final String TAG_PRODUCT_COUNT = "productcount";

private ProgressDialog pDialog;
private List&lt;Products&gt; catList = new ArrayList&lt;Products&gt;();
private ListView listView;
private ProductsAdapter adapter;
int id_count = 0;

private int current_page = 0;
int mPreLast;

public Product_Listing() {
}

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_product__listing, container, false);
}

@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);
    listView = (ListView) getView().findViewById(R.id.list1);
    adapter = new ProductsAdapter(getActivity(), catList);
    listView.setAdapter(adapter);
    int currentPosition = listView.getFirstVisiblePosition();
    listView.setSelectionFromTop(currentPosition + 1, 0);

    listView.setOnScrollListener(new AbsListView.OnScrollListener()
    {
        @Override
        public void onScrollStateChanged(AbsListView absListView, int i)
        {

        }

        @Override
        public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount)
        {
            int lastItem = firstVisibleItem + visibleItemCount;
            if(lastItem == totalItemCount){
                if (mPreLast != lastItem)
                {
                    mPreLast = lastItem;
                    new LoadProductDesc().execute();
                }
            }
        }
    });

    new LoadProductDesc().execute();
}



private void hidePDialog() {
    if (pDialog != null &amp;&amp; pDialog.isShowing()) {
        pDialog.dismiss();
        pDialog = null;
    }
}

class LoadProductDesc extends AsyncTask&lt;String, String, String&gt; {

    /**
     * Before starting background thread Show Progress Dialog
     */
    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        pDialog = new ProgressDialog(getActivity());
        pDialog.setMessage("Getting Data ...");
        pDialog.setIndeterminate(false);
        pDialog.setCancelable(true);
        pDialog.show();
    }


    protected String doInBackground(String... args) {

        HttpClient httpclient = new DefaultHttpClient();
        HttpResponse response;
        String responseString = null;
        try {
            // make a HTTP request

            response = httpclient.execute(new HttpGet());
            StatusLine statusLine = response.getStatusLine();
            if (statusLine.getStatusCode() == HttpStatus.SC_OK) {
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                response.getEntity().writeTo(out);
                out.close();
                responseString = out.toString();
            } else {
                // close connection
                response.getEntity().getContent().close();
                throw new IOException(statusLine.getReasonPhrase());
            }
        } catch (Exception e) {
            Log.d("Test", "Couldn't make a successful request!");
        }
        return responseString;
    }


    protected void onPostExecute(final String response) {

        super.onPostExecute(response);
        // Creating volley request obj
        String s1 = getActivity().getIntent().getStringExtra("index");
        current_page += 1;
        final String url = "Your URL Link" + s1 + "," + current_page;

                JsonArrayRequest movieReq = new JsonArrayRequest(url,
                        new Response.Listener&lt;JSONArray&gt;() {
                            @Override
                            public void onResponse(JSONArray response) {
                                Log.d(TAG, response.toString());

                                try
                                {
                                    if (isNetworkStatusAvialable (getActivity())) {

                                            // Parsing json
                                            for (int i = 0; i &lt; response.length() &amp;&amp; response.length() != 0; i++)
                                            {
                                                JSONObject obj = response.getJSONObject(i);
                                                Products products = new Products();
                                                id_count = id_count + 1;
                                                products.setProductName(obj.getString(TAG_PRODUCTNAME));
                                                products.setThumbnailUrl(obj.getString(TAG_IMAGEPATH));
                                                products.setProductID(obj.getInt(TAG_PRODUCTID));
                                                products.setSupplierName(obj.getString(TAG_SUPPLIERNAME));
                                                products.setSupplierID(obj.getInt(TAG_SUPPLIERID));
                                                products.setCategoryID(obj.getInt(TAG_CATEGORY_ID));
                                                String count = obj.getString(TAG_PRODUCT_COUNT);

                                                catList.add(products);

                                                TextView textView = (TextView) getView().findViewById(R.id.ListofProducts);
                                                textView.setText(String.valueOf("Total 1 to " + id_count + " Products listed of " + count));
                                            }

                                    }
                                    else
                                    {
                                        Toast.makeText(getActivity(),"Check Internet Connectivity!!",Toast.LENGTH_LONG).show();
                                        return;
                                    }

                                } catch (JSONException e) {
                                    e.printStackTrace();
                                } catch (NullPointerException ne) {
                                    Toast.makeText(getActivity(), "Check Internet Connectivity!!", Toast.LENGTH_LONG).show();
                                }
                                hidePDialog();

                                // notifying list adapter about data changes
                                // so that it renders the list view with updated data
                                adapter.notifyDataSetChanged();

                            }
                        }, new Response.ErrorListener() {
                    @Override
                    public void onErrorResponse(VolleyError error) {
                        VolleyLog.d(TAG, "Error: " + error.getMessage());
                        hidePDialog();
                    }
                });
                // Adding request to request queue
                AppController.getInstance().addToRequestQueue(movieReq);
            }



}

public static boolean isNetworkStatusAvialable (Context context) {
    ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
    if (connectivityManager != null)
    {
        NetworkInfo netInfos = connectivityManager.getActiveNetworkInfo();
        if(netInfos != null)
            if(netInfos.isConnected())
                return true;
    }
    return false;
}


  }
</code></pre>
