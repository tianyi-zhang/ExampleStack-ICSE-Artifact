<p>You are declaring the DownloadLocations object a fresh each time a search is started, try to declares the DownloadLocations AsyncTask as a global variable.</p>

<pre><code>public class LocationAutoCompleteAdapter extends ArrayAdapter&lt;LocationBean&gt; implements Filterable {

Context context;
LayoutInflater inflater;
ArrayList&lt;LocationBean&gt; list, tempList, suggestions;
DownloadLocations exec = new DownloadLocations();

Filter nameFilter = new Filter() {
    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        FilterResults filterResults = new FilterResults();
        if (constraint != null) {
            try {
                // Downloads location list
                String term = constraint.toString();
                Log.e(Constants.TAG, "CHARACTER: " + term);
                if (exec.getStatus() == AsyncTask.Status.RUNNING) {
                    exec.cancel(true);
                } else {
                    exec = new DownloadLocations();
                    list = exec.execute(term).get();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            filterResults.values = list;
            filterResults.count = list.size();
        }
        return filterResults;
    }

    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {

        List&lt;LocationBean&gt; filterList = (ArrayList&lt;LocationBean&gt;) results.values;
        if (results != null &amp;&amp; results.count &gt; 0) {
            clear();
            for (LocationBean locations : filterList) {
                add(locations);
            }
            notifyDataSetChanged();
        }
    }
};

@Override
public Filter getFilter() {
    return nameFilter;
}

public LocationAutoCompleteAdapter(Context context) {
    super(context, R.layout.location_autocomplete_list_item);
    this.context = context;
    this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    suggestions = new ArrayList&lt;LocationBean&gt;();
}

public LocationAutoCompleteAdapter(Context context, ArrayList&lt;LocationBean&gt; list) {
    super(context, R.layout.location_autocomplete_list_item, list);
    this.context = context;
    this.list = list;
    this.inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    tempList = new ArrayList&lt;LocationBean&gt;(list); // this makes the difference.
    suggestions = new ArrayList&lt;LocationBean&gt;();
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder holder;
    if (convertView == null) {
        holder = new ViewHolder();

        convertView = inflater.inflate(R.layout.location_autocomplete_list_item, parent, false);

        holder.name = (TextView) convertView.findViewById(R.id.autcom_name);
        holder.state = (TextView) convertView.findViewById(R.id.autcom_state);

        convertView.setTag(holder);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }

    if (list.get(position).getState().isEmpty()) {
        holder.state.setVisibility(View.GONE);
    } else {
        holder.state.setVisibility(View.VISIBLE);
    }
    holder.name.setText(list.get(position).getName());
    holder.state.setText(list.get(position).getState());

    return convertView;
}

class ViewHolder {
    TextView name, state;
}

private class DownloadLocations extends AsyncTask&lt;String, Void, ArrayList&lt;LocationBean&gt;&gt; {

    @Override
    protected ArrayList&lt;LocationBean&gt; doInBackground(String... params) {
        if (!isCancelled()) {
            try {
                //Create a new COUNTRY SEARCH url Ex "search.php?term=india"
                URL url = new URL(Api.LOCATION_URL + params[0]);

                HttpsURLConnection conn = Constants.getInitHttpsURLConnectionGET(url);

                String locationResponse = Constants.getStringFromConnection(conn);

                // INIT ArrayList
                ArrayList locationList = new ArrayList&lt;LocationBean&gt;();
                locationList.clear();

                // PARSE RESPONSE
                JSONObject locationResponseJsonObject = new JSONObject(locationResponse);
                Log.e(Constants.TAG, "RESPONSE: " + locationResponseJsonObject);

                JSONArray result = locationResponseJsonObject.getJSONArray(Constants.KEY_LOCATION_RESULTS);

                for (int i = 0; i &lt; result.length(); i++) {
                    JSONObject locationObject = result.getJSONObject(i);

                    String id = locationObject.getString(Constants.KEY_LOCATION_ID);
                    String state = locationObject.getString(Constants.KEY_LOCATION_STATE);
                    String name = locationObject.getString(Constants.KEY_LOCATION_NAME);
                    String district = locationObject.getString(Constants.KEY_LOCATION_TEXT);

                    locationList.add(new LocationBean(id, name, district, state));
                }
                return locationList;

            } catch (Exception e) {
                Log.d("HUS", "EXCEPTION " + e);
                return null;
            }
        } else {
            return null;
        }
    }
}
</code></pre>

<p>}</p>
