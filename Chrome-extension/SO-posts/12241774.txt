<p>Usually your list adapter is using some sort of data structure or container to store its objects. If you need to add a new element, add it to the container first and then call </p>

<pre><code>adapter.notifyDataSetChanged();
</code></pre>

<p>to let it know its data has changed and needs to be updated.</p>

<p>Here is just a small example to lead you in the right direction. I hope you'll find it useful.</p>

<p><strong>Define your ListActivity:</strong></p>

<pre><code>package com.myapp.listviewexample;

import android.app.ListActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class ListViewExampleActivity extends ListActivity {

    static final String[] COUNTRIES = new String[] {
        "Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra",
        "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina",
        "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan"
      };


    @Override
    public void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);

      //setListAdapter(new ArrayAdapter&lt;String&gt;(this, R.layout.list_item, COUNTRIES));
      final MyListAdapter adapter = new MyListAdapter(this, COUNTRIES);
      setListAdapter(adapter);

      ListView lv = getListView();
      //lv.setTextFilterEnabled(true);

      lv.setOnItemClickListener(new OnItemClickListener() {
        public void onItemClick(AdapterView&lt;?&gt; parent, View view,
            int position, long id) {

            adapter.removeItem(position);
            adapter.notifyDataSetChanged();
          // When clicked, show a toast with the TextView text
          Toast.makeText(getApplicationContext(), ((TextView) view).getText() + " removed",
              Toast.LENGTH_SHORT).show();
        }
      });
    }

}
</code></pre>

<p><strong>Define your list adapter:</strong></p>

<pre><code>package com.myapp.listviewexample;

import java.util.ArrayList;
import java.util.Arrays;

import android.content.Context;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

public class MyListAdapter extends BaseAdapter {

    private ArrayList&lt;String&gt; items;
    private Context mContext;

    public MyListAdapter(Context c, String[] countries) {
        items = new ArrayList&lt;String&gt;(Arrays.asList(countries));
        mContext = c;
        Log.i("MyListAdapter", "countries.length == items.size() " + (countries.length == items.size()));
    }

    public int getCount() {
        return items.size();
    }

    public Object getItem(int position) {
        return items.get(position);
    }

    public long getItemId(int position) { 
        return position;
    }

    public void removeItem(int position) {
        items.remove(position);
    }

    // create a new ImageView for each item referenced by the Adapter
    public View getView(int position, View convertView, ViewGroup parent) {
        View view;
        if (convertView == null) {  // if it's not recycled, initialize some attributes
            LayoutInflater li = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            view = li.inflate(R.layout.list_item, null);
        } else {
            view = convertView;
        }

        TextView tv = (TextView) view;//.findViewById(R.id.text_view_item);
        tv.setText(items.get(position));

        return view;
    }

}
</code></pre>

<p><strong>Consider using the ViewHolder pattern for the adapter, to avoid unnecessary inflating of views. This post might help:</strong> <a href="http://stackoverflow.com/q/3832254/1082933">How can I make my ArrayAdapter follow the ViewHolder pattern?</a></p>

<p><strong>Define your list_item.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/text_view_item"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:padding="10dp"
    android:textSize="16sp" &gt;
&lt;/TextView&gt;
</code></pre>
