<p>Well, the code for the <em>entire library</em> is available in the links that you provided. Go ahead and take a look!</p>

<p>They build off of the normal <code>ListView</code>, so the idea is completely the same. You still have an <code>adapter</code> that holds the data, which is then added to your custom <code>ListView</code>. The <code>ListView</code> still only holds as many views as are shown on the screen at a time (to be more efficient). The difference comes in the way that the added items are handled. </p>

<p>Each item that you pass in (through the <code>adapter</code>) returns a "Header ID" to which it is mapped. Items with the same header ID are grouped under the same header. These headers are created with a <code>getHeaderView()</code> method in your adapter, based on the data that you passed in. </p>

<p>The sample code shows this pretty well, from the <a href="https://github.com/emilsjolander/StickyListHeaders" rel="nofollow">library link</a>:</p>

<pre><code>public class MyAdapter extends BaseAdapter implements StickyListHeadersAdapter {

    private String[] countries;
    private LayoutInflater inflater;

    public TestBaseAdapter(Context context) {
        inflater = LayoutInflater.from(context);
        countries = context.getResources().getStringArray(R.array.countries);
    }

    @Override
    public int getCount() {
        return countries.length;
    }

    @Override
    public Object getItem(int position) {
        return countries[position];
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override 
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;

        if (convertView == null) {
            holder = new ViewHolder();
            convertView = inflater.inflate(R.layout.test_list_item_layout, parent, false);
            holder.text = (TextView) convertView.findViewById(R.id.text);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }

        holder.text.setText(countries[position]);

        return convertView;
    }

    @Override 
    public View getHeaderView(int position, View convertView, ViewGroup parent) {
        HeaderViewHolder holder;
        if (convertView == null) {
            holder = new HeaderViewHolder();
            convertView = inflater.inflate(R.layout.header, parent, false);
            holder.text = (TextView) convertView.findViewById(R.id.text);
            convertView.setTag(holder);
        } else {
            holder = (HeaderViewHolder) convertView.getTag();
        }
        //set header text as first char in name
        String headerText = "" + countries[position].subSequence(0, 1).charAt(0);
        holder.text.setText(headerText);
        return convertView;
    }

    @Override
    public long getHeaderId(int position) {
        //return the first character of the country as ID because this is what headers are based upon
        return countries[position].subSequence(0, 1).charAt(0);
    }

    class HeaderViewHolder {
        TextView text;
    }

    class ViewHolder {
        TextView text;
    }

}
</code></pre>
