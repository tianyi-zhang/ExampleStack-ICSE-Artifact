<p>I believe this is your problem; why are you doing this at the end of remove?</p>

<pre><code>list.add(0, removedObject);
count++;
</code></pre>

<p>Should it be removed?</p>

<pre><code>//list.add(0, removedObject);
//count++;
</code></pre>

<p>I've made the change above on a local copy of your code (changed Employee to not be abstract) and it seems to be working fine. I've used this validatino code below to check using random data.</p>

<pre><code>public boolean validate() {
    Employee p = this.remove();
    while (list.size()&gt;0) {
        Employee e = this.remove();
        if (e.compareTo(p)&gt;0) return false;
        p = e;
    }
    return true;
}
</code></pre>

<p>Testing code.</p>

<pre><code>    boolean result = false;
    for (int x=0; x&lt;100; x++) {
        int size = 100000;
        for (int i=0; i&lt;size; i++) {
            int r = RANDOM.nextInt();
            company.addEmployee(new Employee(String.valueOf(r),r));
        }
        result = company.validate();
        if (result==false) break;
    }
    System.out.println(result);
</code></pre>

<p>Here is the full remove method:</p>

<pre><code>public Employee remove() {
    int count = 0;
    if (list.isEmpty())
        return null;

    Employee removedObject = list.get(0);
    list.set(0, list.get(list.size() - 1));
    list.remove(list.size() - 1);

    int currentIndex = 0;
    while (currentIndex &lt; list.size()) {
        int leftChildIndex = 2 * currentIndex + 1;
        int rightChildIndex = 2 * currentIndex + 2;

        // find the maximum between the two children
        if (leftChildIndex &gt;= list.size())
            break; // the tree is a heap

        int maxIndex = leftChildIndex;
        if (rightChildIndex &lt; list.size()) {
            if (list.get(maxIndex).compareTo(list.get(rightChildIndex)) &lt; 0) {
                maxIndex = rightChildIndex;
                count++;
            }
        }
        // swap if the current node is less than the maximum
        if (list.get(currentIndex).compareTo(list.get(maxIndex)) &lt; 0) {
            Employee temp = list.get(maxIndex);
            list.set(maxIndex, list.get(currentIndex));
            list.set(currentIndex, temp);
            currentIndex = maxIndex;
            count++;

        }
        else
            break;
    }
    // This is what I changed.
    //list.add(0, removedObject);
    //count++;
    System.out.println(count);
    return removedObject;

}
</code></pre>

<p>Example data... Remember, the only guarantee a (max) heap makes is the the top element will be the max in the heap AND every parent will be greater or equal to it's children.</p>

<pre><code>Input order:                   5, 12, 12, 17, 8, 7, 4, 1, 5, 19, 
Companies internal list order: 19=19, 17=17, 12=12, 5=5, 12=12, 7=7, 4=4, 1=1, 5=5, 8=8, 
Heap sorted order:             19=19, 17=17, 12=12, 12=12, 8=8, 7=7, 5=5, 5=5, 4=4, 1=1, 
</code></pre>

<p>A non destructive print method for Company (it's actually destructive but returns the initial state after it's done printing):</p>

<pre><code>public String toString() {
    ArrayList&lt;Employee&gt; copy = new ArrayList&lt;Employee&gt;(list);
    StringBuilder builder = new StringBuilder();
    while (list.size()&gt;0) {
        Employee e = this.remove();
        builder.append(e.toString()+"\n");
    }
    this.list = copy;
    return builder.toString();
}
</code></pre>
