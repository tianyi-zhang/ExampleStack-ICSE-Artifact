<h2>WAR</h2>

<p>You are building a <code>.war</code> file, as evidenced in the <code>&lt;packaging&gt;war&lt;/packaging&gt;</code> definition, which is only deployable to a Web Application container. There is no startup class, and as well documented on stackoverflow there is do way to control the order of startup in most web app containers.</p>

<h2>JAR</h2>

<p>You have to change your project to be an executable <code>.jar</code> and specify the <code>main</code> class in the <code>Manifest</code> in the <code>jar plugin</code> configuration options. Just setting some random property isn't going to do anything.</p>

<p>You probably want to use the <code>shade</code> plugin to bundle all the transient dependencies into a monolithic <code>.jar</code> as well otherwise you have an <code>classpath</code> installation nightmare on your hands.</p>

<p>Here is an example, running this from the <code>src/main/webapp</code> dir is a bad non-portable idea, that should be passed in as an argument.</p>

<pre><code>import java.io.File;
import org.apache.catalina.startup.Tomcat;

public class Main {

    public static void main(String[] args) throws Exception {

        String webappDirLocation = "src/main/webapp/";
        Tomcat tomcat = new Tomcat();

        //The port that we should run on can be set into an environment variable
        //Look for that variable and default to 8080 if it isn't there.
        String webPort = System.getenv("PORT");
        if(webPort == null || webPort.isEmpty()) {
            webPort = "8080";
        }

        tomcat.setPort(Integer.valueOf(webPort));

        tomcat.addWebapp("/", new File(webappDirLocation).getAbsolutePath());
        System.out.println("configuring app with basedir: " + new File("./" + webappDirLocation).getAbsolutePath());

        tomcat.start();
        tomcat.getServer().await();
    }
}
</code></pre>
