<p>Ok, easy things first  </p>

<pre><code>W/libc(21095): pthread_create sched_setscheduler call failed: Operation not permitted
</code></pre>

<p>There is nothing you can do about it. You even get this when you compile directly from Unity for Android, so it's a problem inside the engine.</p>

<h2>Basic Setup</h2>

<p>The guide you linked is pretty outdated. You no longer need to copy files from various locations to create a simple Android project.</p>

<ol>
<li>Create a Android project by setting <code>Build Settings -&gt; Android -&gt; Google Android project</code></li>
<li>You now have a complete package ready to import into Eclipse or Android Studio</li>
<li>Compile and deploy</li>
</ol>

<h2>Using UnityPlayer in a subactivity</h2>

<p>The class <code>UnityPlayerNativeActivity</code> in your new Android project shows you how to setup the <code>UnityPlayer</code> and what events you need to forward. Here is the version used by Unity 4.3.4</p>

<pre><code>package de.leosori.NativeAndroid;

import com.unity3d.player.*;
import android.app.NativeActivity;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;

public class UnityPlayerNativeActivity extends NativeActivity
{
    protected UnityPlayer mUnityPlayer;     // don't change the name of this variable; referenced from native code

    // UnityPlayer.init() should be called before attaching the view to a layout - it will load the native code.
    // UnityPlayer.quit() should be the last thing called - it will unload the native code.
    protected void onCreate (Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);

        getWindow().takeSurface(null);
        setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);
        getWindow().setFormat(PixelFormat.RGB_565);

        mUnityPlayer = new UnityPlayer(this);
        if (mUnityPlayer.getSettings ().getBoolean ("hide_status_bar", true))
            getWindow ().setFlags (WindowManager.LayoutParams.FLAG_FULLSCREEN,
                                   WindowManager.LayoutParams.FLAG_FULLSCREEN);

        int glesMode = mUnityPlayer.getSettings().getInt("gles_mode", 1);
        boolean trueColor8888 = false;
        mUnityPlayer.init(glesMode, trueColor8888);

        View playerView = mUnityPlayer.getView();
        setContentView(playerView);
        playerView.requestFocus();
    }
    protected void onDestroy ()
    {
        mUnityPlayer.quit();
        super.onDestroy();
    }

    // onPause()/onResume() must be sent to UnityPlayer to enable pause and resource recreation on resume.
    protected void onPause()
    {
        super.onPause();
        mUnityPlayer.pause();
    }
    protected void onResume()
    {
        super.onResume();
        mUnityPlayer.resume();
    }
    public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
        mUnityPlayer.configurationChanged(newConfig);
    }
    public void onWindowFocusChanged(boolean hasFocus)
    {
        super.onWindowFocusChanged(hasFocus);
        mUnityPlayer.windowFocusChanged(hasFocus);
    }
    public boolean dispatchKeyEvent(KeyEvent event)
    {
        if (event.getAction() == KeyEvent.ACTION_MULTIPLE)
            return mUnityPlayer.onKeyMultiple(event.getKeyCode(), event.getRepeatCount(), event);
        return super.dispatchKeyEvent(event);
    }
}
</code></pre>

<p>Although <code>UnityPlayerNativeActivity</code> extends <code>NativeActivity</code> you can still extend from <code>ActionBarActivity</code> instead without any problems as far as I can tell. At least it worked during my experiments.</p>

<p>The most important part you are missing is the call to <code>mUnityPlayer.quit()</code> during <code>onDestroy()</code>. Trying to create a new instance of <code>UnityPlayer</code> while the old one is still running will lead to crashes, hanging activities and endless suffering.</p>

<h2>Unexpected behavior of mUnityPlayer.quit()</h2>

<p>Fixing that you may be surprised that now your whole App simply closes when you return from your <code>UnityActivity</code>. <code>mUnityPlayer.quit()</code> will kill the process it is running inside. Not a single method will execute after calling <code>mUnityPlayer.quit()</code>, not even the <code>onDestroy()</code> method will finish.</p>

<p>The path to victory is to start your <code>UnityActivity</code> as a new process by adding the parameter <a href="http://developer.android.com/guide/topics/manifest/activity-element.html#proc"><code>android:process=":UnityKillsMe</code></a> to your activty inside your <code>AndroidManifest.xml</code>.</p>

<p>In your case it would look like this</p>

<pre><code>&lt;activity 
    android:name="com.package.example.UnityActivity" 
    android:label="@string/title_activity_unity" 
    android:screenOrientation="portrait" 
    android:launchMode="singleTask" 
    android:process=":UnityKillsMe"
    android:parentActivityName="com.package.example.MainActivity"
    android:configChanges="mcc|mnc|locale|touchscreen|keyboard|keyboardHidden|navigation|orientation|screenLayout|uiMode|screenSize|smallestScreenSize|fontScale"&gt;
    &lt;meta-data android:name="unityplayer.UnityActivity" android:value="true" /&gt;
    &lt;meta-data android:name="unityplayer.ForwardNativeEventsToDalvik" android:value="false" /&gt;
&lt;/activity&gt;
</code></pre>

<p>I'm not sure about the parameter <code>unityplayer.ForwardNativeEventsToDalvik</code>... The project created in the beginning sets it to <code>false</code> and the <a href="http://docs.unity3d.com/Documentation/Manual/PluginsForAndroid.html">official (outdated) documentation</a> mentions</p>

<blockquote>
  <p>Since touch/motion events are processed in native code, Java views would normally not see those events. There is, however, a forwarding mechanism in Unity which allows events to be propagated to the DalvikVM.</p>
</blockquote>

<p>In my small example project I could not see a difference</p>

<h2>The road ahead</h2>

<p>You need to find a workflow to integrate your development with Unity with the Android project or vice versa. Exporting again with Unity would conflict with the changes you made in your Android project, so you would need to export into a separate folder and link to the Unity part from your Android project.</p>

<p>According to the aforementioned <a href="http://docs.unity3d.com/Documentation/Manual/PluginsForAndroid.html">documentation</a> you may be able to integrate your compiled Android classes and <code>AndroidManifest.xml</code> as plugins into Unity.</p>

<blockquote>
  <p>The resulting .class file(s) should be compressed into a .jar file and placed in the Assets->Plugins->Android folder. Since the manifest dictates which activity to launch it is also necessary to create a new AndroidManifest.xml. The AndroidManifest.xml file should also be placed in the Assets->Plugins->Android folder.</p>
</blockquote>

<p>Good luck!</p>
