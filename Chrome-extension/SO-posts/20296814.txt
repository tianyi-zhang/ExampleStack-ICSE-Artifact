<p>in the <code>onTextChangedMethod</code> of TextWatcher, write an if condition that - the edittext values is in the list you are inflating in your listview, if yes them add that edittext value to another list and set that list to your adapter. For Example Here is my Code :- ( Just focus on ListView, ArrayList and TextWatcher. Dont mind other code)</p>

<pre><code>package com.example.alaramsms;

import java.util.ArrayList;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.SparseBooleanArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;




public class ContactActivity extends Activity implements OnItemClickListener{

    String textlength;
    ArrayList&lt;String&gt; filtered_name;
    ArrayList&lt;String&gt; filtered_phone;


    ArrayList&lt;String&gt; name1 = new ArrayList&lt;String&gt;();
    ArrayList&lt;String&gt; phno1 = new ArrayList&lt;String&gt;(); 
    ArrayList&lt;String&gt; phno0 = new ArrayList&lt;String&gt;();
    ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();
    ArrayList&lt;String&gt; mOriginalValues;
    MyAdapter mAdapter ;
    Button send,btnselect;
    ListView lv;
    EditText myFilter;
    boolean flag = false;
    ArrayList&lt;Integer&gt; checkedPositions = new ArrayList&lt;Integer&gt;();


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        setContentView(R.layout.get);
        lv =(ListView)findViewById(R.id.lv);
        getAllCallLogs(this.getContentResolver());

        mAdapter = new MyAdapter(this,name1,phno1);

        lv.setAdapter(mAdapter);
        lv.setOnItemClickListener(this); 
        lv.setItemsCanFocus(false);
        lv.setTextFilterEnabled(true);
        send = (Button) findViewById(R.id.button1);




        CheckBox chkAll =  ( CheckBox ) findViewById(R.id.chkAll); 



        chkAll.setOnCheckedChangeListener(new OnCheckedChangeListener() {

            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                // TODO Auto-generated method stub
                flag = !flag;
                mAdapter.notifyDataSetChanged();
            }
        });

        myFilter = (EditText) findViewById(R.id.myFilter);
        myFilter.addTextChangedListener(new TextWatcher() {



            @Override
            public void beforeTextChanged(CharSequence s, int start, int count,int after) {
            }

            @Override
            public void afterTextChanged(Editable s) {
            }
            @SuppressLint("DefaultLocale")
            public void onTextChanged(CharSequence s,
                    int start, int before, int count)
            {
                textlength = myFilter.getText().toString();

                filtered_name = new ArrayList&lt;String&gt;();
                filtered_phone = new ArrayList&lt;String&gt;();

                for (int i = 0; i &lt; name1.size(); i++)
                {
                    if(name1.get(i).toString().toUpperCase().contains(myFilter.getText().toString().toUpperCase()))
                    {
                        System.err.println("Selection: " + textlength);

                        filtered_name.add(name1.get(i));
                        filtered_phone.add(phno1.get(i));
                    }
                }


                mAdapter = new MyAdapter(ContactActivity.this,filtered_name,filtered_phone);
                lv.setAdapter(mAdapter); // Here inflating two other lists containing he searched items

            }


        });




        send.setOnClickListener(new OnClickListener()
        {

            @Override
            public void onClick(View v) {
                StringBuilder checkedcontacts= new StringBuilder();
                System.out.println(".............."+mAdapter.mCheckStates.size());
                for(int i = 0; i &lt; name1.size(); i++)

                {
                    if(mAdapter.mCheckStates.get(i)==true)
                    {
                        phno0.add(phno1.get(i).toString()) ;
                        checkedcontacts.append(name1.get(i).toString());
                        checkedcontacts.append("\n");

                    }
                    else
                    {
                        System.out.println("..Not Checked......"+name1.get(i).toString());
                    }


                }
                Toast.makeText(ContactActivity.this, checkedcontacts,1000).show();
                Intent returnIntent = new Intent();
                returnIntent.putStringArrayListExtra("name",phno0);
                setResult(RESULT_OK,returnIntent);     
                finish();

            }       
        });


    }

    @Override
    public void onItemClick(AdapterView&lt;?&gt; arg0, View arg1, int arg2, long arg3) {
        // TODO Auto-generated method stub
        mAdapter.toggle(arg2);
    }

    public  void getAllCallLogs(ContentResolver cr) {

        Cursor phones = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null,null,null, null);
        while (phones.moveToNext())
        {
            String name=phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));
            String phoneNumber = phones.getString(phones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
            System.out.println(".................."+phoneNumber); 
            name1.add(name);
            phno1.add(phoneNumber);
        }

        phones.close();
    }
    class MyAdapter extends BaseAdapter implements CompoundButton.OnCheckedChangeListener
    {  
        private SparseBooleanArray mCheckStates;
        ArrayList&lt;String&gt; name1; 

        ArrayList&lt;String&gt; phno1; 
        LayoutInflater mInflater;
        TextView tv1,tv;
        CheckBox cb;
        MyAdapter(ContactActivity contactActivity, ArrayList&lt;String&gt; name1, ArrayList&lt;String&gt; phno1)
        {
            mCheckStates = new SparseBooleanArray(name1.size());
            mInflater = (LayoutInflater)ContactActivity.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            this.name1 = name1;
            this.phno1 = phno1;

        }
        @Override
        public int getCount() {
            // TODO Auto-generated method stub
            return name1.size();
        }

        @Override
        public Object getItem(int position) {
            // TODO Auto-generated method stub
            return position;
        }

        @Override
        public long getItemId(int position) {
            // TODO Auto-generated method stub

            return 0;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            // TODO Auto-generated method stub
            View vi=convertView;
            if(convertView==null)

                vi = mInflater.inflate(R.layout.row, null); 
            tv= (TextView) vi.findViewById(R.id.textView1);
            tv1= (TextView) vi.findViewById(R.id.textView2);
            cb = (CheckBox) vi.findViewById(R.id.checkBox1);
            tv.setText("Name :"+ name1.get(position));
            tv1.setText("Phone No :"+ phno1.get(position));
            cb.setTag(position);
            cb.setChecked(flag); // You just have to add this line
            cb.setOnCheckedChangeListener(this);



            return vi;
        }

        /*   
  @Override
    public Filter getFilter() {
        Filter filter = new Filter() {

            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint,FilterResults results) {
                //ArrayList&lt;String&gt; name1 = new ArrayList&lt;String&gt;();
                arrayList = (ArrayList&lt;String&gt;) results.values; // has the filtered values
                notifyDataSetChanged();  // notifies the data with new filtered values
            }

            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults results = new FilterResults();        // Holds the results of a filtering operation in values
                ArrayList&lt;String&gt; FilteredArrList = new ArrayList&lt;String&gt;();

                if (mOriginalValues == null) {
                    mOriginalValues = new ArrayList&lt;String&gt;(name1); // saves the original data in mOriginalValues
                }

                /********
         * 
         *  If constraint(CharSequence that is received) is null returns the mOriginalValues(Original) values
         *  else does the Filtering and returns FilteredArrList(Filtered)  
         *
         ********/
        /* if (constraint == null || constraint.length() == 0) {

                    // set the Original result to return  
                    results.count = mOriginalValues.size();
                    results.values = mOriginalValues;
                } else {
                    constraint = constraint.toString().toLowerCase();
                    for (int i = 0; i &lt; mOriginalValues.size(); i++) {
                        String name1 = mOriginalValues.get(i).toString();
                        if (name1.toLowerCase().startsWith(constraint.toString())) {
                            FilteredArrList.add(name1);
                        }
                    }
                    // set the Filtered result to return
                    results.count = FilteredArrList.size();
                    results.values = FilteredArrList;
                }
                return results;


            }
            };
            return filter;

    }*/






        public boolean isChecked(int position) {
            return mCheckStates.get(position, false);
        }

        public void setChecked(int position, boolean isChecked) {
            mCheckStates.put(position, isChecked);
        }

        public void toggle(int position) {
            setChecked(position, !isChecked(position));
        }
        @Override
        public void onCheckedChanged(CompoundButton buttonView,
                boolean isChecked) {
            // TODO Auto-generated method stub

            mCheckStates.put((Integer) buttonView.getTag(), isChecked);                 
        }

    } 

} 
</code></pre>
