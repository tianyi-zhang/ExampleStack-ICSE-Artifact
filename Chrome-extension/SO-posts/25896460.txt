<p>Jsoup closes the connection after the request is done and in case of exception</p>

<p>as you can read in the source <a href="https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/helper/HttpConnection.java" rel="nofollow">JSOUP HttpConnection</a></p>

<pre><code> static Response execute(Connection.Request req, Response previousResponse) throws IOException {
        Validate.notNull(req, "Request must not be null");
        String protocol = req.url().getProtocol();
        if (!protocol.equals("http") &amp;&amp; !protocol.equals("https"))
            throw new MalformedURLException("Only http &amp; https protocols supported");

        // set up the request for execution
        if (req.method() == Connection.Method.GET &amp;&amp; req.data().size() &gt; 0)
            serialiseRequestUrl(req); // appends query string
        HttpURLConnection conn = createConnection(req);
        Response res;
        try {
            conn.connect();
            if (req.method() == Connection.Method.POST)
                writePost(req.data(), conn.getOutputStream());

            int status = conn.getResponseCode();
            boolean needsRedirect = false;
            if (status != HttpURLConnection.HTTP_OK) {
                if (status == HttpURLConnection.HTTP_MOVED_TEMP || status == HttpURLConnection.HTTP_MOVED_PERM || status == HttpURLConnection.HTTP_SEE_OTHER)
                    needsRedirect = true;
                else if (!req.ignoreHttpErrors())
                    throw new HttpStatusException("HTTP error fetching URL", status, req.url().toString());
            }
            res = new Response(previousResponse);
            res.setupFromConnection(conn, previousResponse);
            if (needsRedirect &amp;&amp; req.followRedirects()) {
                req.method(Method.GET); // always redirect with a get. any data param from original req are dropped.
                req.data().clear();

                String location = res.header("Location");
                if (location != null &amp;&amp; location.startsWith("http:/") &amp;&amp; location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php
                    location = location.substring(6);
                req.url(new URL(req.url(), encodeUrl(location)));

                for (Map.Entry&lt;String, String&gt; cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts)
                    req.cookie(cookie.getKey(), cookie.getValue());
                }
                return execute(req, res);
            }
            res.req = req;

            // check that we can handle the returned content type; if not, abort before fetching it
            String contentType = res.contentType();
            if (contentType != null &amp;&amp; !req.ignoreContentType() &amp;&amp; (!(contentType.startsWith("text/") || contentType.startsWith("application/xml") || contentType.startsWith("application/xhtml+xml"))))
                throw new UnsupportedMimeTypeException("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml",
                        contentType, req.url().toString());

            InputStream bodyStream = null;
            InputStream dataStream = null;
            try {
                dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();
                bodyStream = res.hasHeader("Content-Encoding") &amp;&amp; res.header("Content-Encoding").equalsIgnoreCase("gzip") ?
                        new BufferedInputStream(new GZIPInputStream(dataStream)) :
                        new BufferedInputStream(dataStream);

                res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize());
                res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it
            } finally {
                if (bodyStream != null) bodyStream.close();
                if (dataStream != null) dataStream.close();
            }
        } finally {
            // per Java's documentation, this is not necessary, and precludes keepalives. However in practise,
            // connection errors will not be released quickly enough and can cause a too many open files error.
            conn.disconnect();
        }

        res.executed = true;
        return res;
    }
</code></pre>

<p>so i think it's not a problem.</p>
