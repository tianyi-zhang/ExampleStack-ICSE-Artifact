<pre><code>public class EmployeDao {

private static final Log log = LogFactory.getLog(EmployeDao.class);

private final SessionFactory sessionFactory = getSessionFactory();

protected SessionFactory getSessionFactory() {
    try {
        return (SessionFactory) HibernateUtil.sessionFactory;
    } catch (Exception e) {
        log.error("Could not locate SessionFactory in JNDI", e);
        throw new IllegalStateException(
                "Could not locate SessionFactory in JNDI");
    }
}

public void persist(Employe transientInstance) {
    log.debug("persisting Employe instance");
    try {
        sessionFactory.getCurrentSession().persist(transientInstance);
        log.debug("persist successful");
    } catch (RuntimeException re) {
        log.error("persist failed", re);
        throw re;
    }
}

private void openTransaction() {
    sessionFactory.getCurrentSession().beginTransaction();
}

private void closeTransaction() {
    sessionFactory.getCurrentSession().getTransaction().commit();
}

public void attachDirty(Employe instance) {
    log.debug("attaching dirty Employe instance");
    try {
        sessionFactory.getCurrentSession().saveOrUpdate(instance);
        log.debug("attach successful");
    } catch (RuntimeException re) {
        log.error("attach failed", re);
        throw re;
    }
}

public void attachClean(Employe instance) {
    log.debug("attaching clean Employe instance");
    try {
        sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
        log.debug("attach successful");
    } catch (RuntimeException re) {
        log.error("attach failed", re);
        throw re;
    }
}

public void delete(Employe persistentInstance) {
    log.debug("deleting Employe instance");
    try {
        sessionFactory.getCurrentSession().delete(persistentInstance);
        log.debug("delete successful");
    } catch (RuntimeException re) {
        log.error("delete failed", re);
        throw re;
    }
}

public Employe merge(Employe detachedInstance) {
    log.debug("merging Employe instance");
    try {
        Employe result = (Employe) sessionFactory.getCurrentSession()
                .merge(detachedInstance);
        log.debug("merge successful");
        return result;
    } catch (RuntimeException re) {
        log.error("merge failed", re);
        throw re;
    }
}

public Employe findById(int id) {
    log.debug("getting Employe instance with id: " + id);
    try {
        openTransaction();
        Employe instance = (Employe) sessionFactory.getCurrentSession()
                .get("tn.ooredoo.kpi.model.Employe", id);
        if (instance == null) {
            log.debug("get successful, no instance found");
        } else {
            log.debug("get successful, instance found");
        }
        return instance;
    } catch (RuntimeException re) {
        log.error("get failed", re);
        throw re;
    } finally {
        closeTransaction();
    }
}

public List findByExample(Employe instance) {
    log.debug("finding Employe instance by example");
    try {
        List results = sessionFactory.getCurrentSession()
                .createCriteria("tn.ooredoo.kpi.dao.Employe")
                .add(Example.create(instance)).list();
        log.debug("find by example successful, result size: "
                + results.size());
        return results;
    } catch (RuntimeException re) {
        log.error("find by example failed", re);
        throw re;
    }
}

public List findByProprety(Employe instance) {
    log.debug("finding Employe instance by example");
    try {
        openTransaction();
        Criterion critere = Expression.eq("loginEmploye",
                instance.getLoginEmploye());
        List results = sessionFactory.getCurrentSession()
                .createCriteria("tn.ooredoo.kpi.model.Employe")
                .add(critere).list();
        log.debug("find by example successful, result size: "
                + results.size());
        return results;
    } catch (RuntimeException re) {
        log.error("find by example failed", re);
        throw re;
    } finally {
        closeTransaction();
    }
}
}
</code></pre>
