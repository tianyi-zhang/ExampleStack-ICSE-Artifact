<p>You can also use the Rectangle source code to compare with your own algorithm:</p>

<pre><code>/**
 * Computes the intersection of this &lt;code&gt;Rectangle&lt;/code&gt; with the
 * specified &lt;code&gt;Rectangle&lt;/code&gt;. Returns a new &lt;code&gt;Rectangle&lt;/code&gt;
 * that represents the intersection of the two rectangles.
 * If the two rectangles do not intersect, the result will be
 * an empty rectangle.
 *
 * @param     r   the specified &lt;code&gt;Rectangle&lt;/code&gt;
 * @return    the largest &lt;code&gt;Rectangle&lt;/code&gt; contained in both the
 *            specified &lt;code&gt;Rectangle&lt;/code&gt; and in
 *            this &lt;code&gt;Rectangle&lt;/code&gt;; or if the rectangles
 *            do not intersect, an empty rectangle.
 */
public Rectangle intersection(Rectangle r) {
    int tx1 = this.x;
    int ty1 = this.y;
    int rx1 = r.x;
    int ry1 = r.y;
    long tx2 = tx1; tx2 += this.width;
    long ty2 = ty1; ty2 += this.height;
    long rx2 = rx1; rx2 += r.width;
    long ry2 = ry1; ry2 += r.height;
    if (tx1 &lt; rx1) tx1 = rx1;
    if (ty1 &lt; ry1) ty1 = ry1;
    if (tx2 &gt; rx2) tx2 = rx2;
    if (ty2 &gt; ry2) ty2 = ry2;
    tx2 -= tx1;
    ty2 -= ty1;
    // tx2,ty2 will never overflow (they will never be
    // larger than the smallest of the two source w,h)
    // they might underflow, though...
    if (tx2 &lt; Integer.MIN_VALUE) tx2 = Integer.MIN_VALUE;
    if (ty2 &lt; Integer.MIN_VALUE) ty2 = Integer.MIN_VALUE;
    return new Rectangle(tx1, ty1, (int) tx2, (int) ty2);
}
</code></pre>
