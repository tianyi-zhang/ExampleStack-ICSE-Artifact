<p><strong>Below are two functions, one that returns the last non-blank line of a file without loading or stepping through the entire file, and the other that returns the last N lines of the file without stepping through the entire file:</strong></p>

<p>What tail does is zoom straight to the last character of the file, then steps backward, character by character, recording what it sees until it finds a line break.  Once it finds a line break, it breaks out of the loop.  Reverses what was recorded and throws it into a string and returns.  0xA is the new line and 0xD is the carriage return.  </p>

<p>If your line endings are <code>\r\n</code> or <code>crlf</code> or some other "double newline style newline", then you will have to specify n*2 lines to get the last n lines because it counts 2 lines for every line.  </p>

<pre><code>public String tail( File file ) {
    RandomAccessFile fileHandler = null;
    try {
        fileHandler = new RandomAccessFile( file, "r" );
        long fileLength = fileHandler.length() - 1;
        StringBuilder sb = new StringBuilder();

        for(long filePointer = fileLength; filePointer != -1; filePointer--){
            fileHandler.seek( filePointer );
            int readByte = fileHandler.readByte();

            if( readByte == 0xA ) {
                if( filePointer == fileLength ) {
                    continue;
                }
                break;

            } else if( readByte == 0xD ) {
                if( filePointer == fileLength - 1 ) {
                    continue;
                }
                break;
            }

            sb.append( ( char ) readByte );
        }

        String lastLine = sb.reverse().toString();
        return lastLine;
    } catch( java.io.FileNotFoundException e ) {
        e.printStackTrace();
        return null;
    } catch( java.io.IOException e ) {
        e.printStackTrace();
        return null;
    } finally {
        if (fileHandler != null )
            try {
                fileHandler.close();
            } catch (IOException e) {
                /* ignore */
            }
    }
}
</code></pre>

<p><strong>But you probably don't want the last line, you want the last N lines, so use this instead:</strong></p>

<pre><code>public String tail2( File file, int lines) {
    java.io.RandomAccessFile fileHandler = null;
    try {
        fileHandler = 
            new java.io.RandomAccessFile( file, "r" );
        long fileLength = fileHandler.length() - 1;
        StringBuilder sb = new StringBuilder();
        int line = 0;

        for(long filePointer = fileLength; filePointer != -1; filePointer--){
            fileHandler.seek( filePointer );
            int readByte = fileHandler.readByte();

             if( readByte == 0xA ) {
                if (filePointer &lt; fileLength) {
                    line = line + 1;
                }
            } else if( readByte == 0xD ) {
                if (filePointer &lt; fileLength-1) {
                    line = line + 1;
                }
            }
            if (line &gt;= lines) {
                break;
            }
            sb.append( ( char ) readByte );
        }

        String lastLine = sb.reverse().toString();
        return lastLine;
    } catch( java.io.FileNotFoundException e ) {
        e.printStackTrace();
        return null;
    } catch( java.io.IOException e ) {
        e.printStackTrace();
        return null;
    }
    finally {
        if (fileHandler != null )
            try {
                fileHandler.close();
            } catch (IOException e) {
            }
    }
}
</code></pre>

<p><strong>Invoke the above methods like this:</strong></p>

<pre><code>File file = new File("D:\\stuff\\huge.log");
System.out.println(tail(file));
System.out.println(tail2(file, 10));
</code></pre>

<p><strong>Warning</strong>
In the wild west of unicode this code can cause the output of this function to come out wrong.  For example "Mary?s" instead of "Mary's".  Characters with <a href="http://en.wikipedia.org/wiki/Diacritic">hats, accents, Chinese characters</a> etc may cause the output to be wrong because accents are added as modifiers after the character.  Reversing compound characters changes the nature of the identity of the character on reversal.  You will have to do full battery of tests on all languages you plan to use this with.</p>

<p>For more information about this unicode reversal problem read this:
<a href="http://msmvps.com/blogs/jon_skeet/archive/2009/11/02/omg-ponies-aka-humanity-epic-fail.aspx">http://msmvps.com/blogs/jon_skeet/archive/2009/11/02/omg-ponies-aka-humanity-epic-fail.aspx</a></p>
