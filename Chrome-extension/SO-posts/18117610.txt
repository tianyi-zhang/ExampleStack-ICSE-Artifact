<p>Bellabax's answer was right and got me on the right track, so he gets the kudos and the credit for the right answer. But for those stumbling across this question, here's a more complete implementation that auto-discovers the domain type and doesn't require calling <code>new</code> anything, and will hopefully be helpful to someone.</p>

<p>SearchableRepository.java</p>

<pre><code>public interface SearchableRepository&lt;T&gt; {
    public Page&lt;T&gt; search(String query, Pageable page);
}
</code></pre>

<p>AbstractDomainClassAwareRepository.java</p>

<pre><code>class AbstractDomainClassAwareRepository&lt;T&gt; {
    protected final Class&lt;T&gt; domainClass;

    @SuppressWarnings("unchecked")
    protected AbstractDomainClassAwareRepository() {
        Type genericSuperclass = this.getClass().getGenericSuperclass();
        while(!(genericSuperclass instanceof ParameterizedType))
        {
            if(!(genericSuperclass instanceof Class))
                throw new IllegalStateException("Unable to determine type " +
                        "arguments because generic superclass neither " +
                        "parameterized type nor class.");
            if(genericSuperclass == AbstractDomainClassAwareRepository.class)
                throw new IllegalStateException("Unable to determine type " +
                        "arguments because no parameterized generic superclass " +
                        "found.");

            genericSuperclass = ((Class)genericSuperclass).getGenericSuperclass();
        }

        ParameterizedType type = (ParameterizedType)genericSuperclass;
        Type[] arguments = type.getActualTypeArguments();
        this.domainClass = (Class&lt;T&gt;)arguments[0];
    }
}
</code></pre>

<p>AbstractSearchableJpaRepository.java</p>

<pre><code>class AbstractSearchableJpaRepository&lt;T&gt;
        extends AbstractDomainClassAwareRepository&lt;T&gt;
        implements SearchableRepository&lt;T&gt; {
    @PersistenceContext protected EntityManager entityManager;

    @Override
    public Page&lt;T&gt; search(String query, Pageable page) {
        // use this.domainClass to reference domain class
    }
}
</code></pre>

<p>UserRepository.java</p>

<pre><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt;,
        SearchableRepository&lt;User&gt; { }
</code></pre>

<p>UserRepositoryImpl.java</p>

<pre><code>public class UserRepositoryImpl extends AbstractSearchableJpaRepository&lt;User&gt; { }
</code></pre>

<p>NewsRepository.java</p>

<pre><code>public interface NewsRepository extends JpaRepository&lt;Article, Long&gt;,
        SearchableRepository&lt;Article&gt; { }
</code></pre>

<p>NewsRepositoryImpl.java</p>

<pre><code>public class NewsRepositoryImpl extends AbstractSearchableJpaRepository&lt;Article&gt; { }
</code></pre>
