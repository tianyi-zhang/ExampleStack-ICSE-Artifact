<p>For a big performance improvement, an alternative would be to use <code>substring()</code> in a loop:</p>

<pre><code>public String[] splitStringEvery(String s, int interval) {
    int arrayLength = (int) Math.ceil(((s.length() / (double)interval)));
    String[] result = new String[arrayLength];

    int j = 0;
    int lastIndex = result.length - 1;
    for (int i = 0; i &lt; lastIndex; i++) {
        result[i] = s.substring(j, j + interval);
        j += interval;
    } //Add the last bit
    result[lastIndex] = s.substring(j);

    return result;
}
</code></pre>

<p>Example:</p>

<pre><code>Input:  String st = "1231241251341351452342352456"
Output: 123 124 125 134 135 145 234 235 245 6.
</code></pre>

<p>It's not as short as <a href="http://stackoverflow.com/a/12295805/1380710">stevevls' solution</a>, but it's <strong>way more efficient</strong> (see below) and I think it would be easier to adjust in the future, of course depending on your situation.</p>

<hr>

<h2>Performance tests (Java 7u45)</h2>

<p><strong>2,000</strong> characters long string - interval is <strong>3</strong>.</p>

<p><code>split("(?&lt;=\\G.{" + count + "})")</code> performance (in miliseconds):</p>

<pre><code>7, 7, 5, 5, 4, 3, 3, 2, 2, 2
</code></pre>

<p><code>splitStringEvery()</code> (<code>substring()</code>) performance (in miliseconds):</p>

<pre><code>2, 0, 0, 0, 0, 1, 0, 1, 0, 0
</code></pre>

<hr>

<p><strong>2,000,000</strong> characters long string - interval is <strong>3</strong>.</p>

<p><code>split()</code> performance (in miliseconds):</p>

<pre><code>207, 95, 376, 87, 97, 83, 83, 82, 81, 83
</code></pre>

<p><code>splitStringEvery()</code> performance (in miliseconds):</p>

<pre><code>44, 20, 13, 24, 13, 26, 12, 38, 12, 13
</code></pre>

<hr>

<p><strong>2,000,000</strong> characters long string - interval is <strong>30</strong>.</p>

<p><code>split()</code> performance (in miliseconds):</p>

<pre><code>103, 61, 41, 55, 43, 44, 49, 47, 47, 45
</code></pre>

<p><code>splitStringEvery()</code> performance (in miliseconds):</p>

<pre><code>7, 7, 2, 5, 1, 3, 4, 4, 2, 1
</code></pre>

<hr>

<p><strong>Conclusion:</strong></p>

<p>The <code>splitStringEvery()</code> method is <strong>a lot faster</strong> (even after <a href="http://java-performance.info/changes-to-string-java-1-7-0_06/">the changes in Java 7u6</a>), and it <em>escalates when the intervals become higher</em>.</p>

<p><strong>Ready-to-use Test Code:</strong></p>

<p><a href="http://pastebin.com/QMPgLbG9">pastebin.com/QMPgLbG9</a></p>
