<p>Based on <strong>"when I add items items from the leftlist the price will appear in the rightlist"</strong>
I can think of few ways of doing this, I am going to demonstrate it by using ListCellRenderer, Which is giving you much of the customizing.
I have pointed out the Total value , you can use it with the label.</p>

<ol>
<li>Create an Item Object.</li>
<li>Create a Custom  ListCellRenderer and use it with the Lists.</li>
</ol>

<p>package commonfloor;</p>

<pre><code>import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import javax.swing.*;

public class MP2_1 extends JFrame {

    private JList leftlist;
    private JList rightlist;

    private final JButton addbutton;
    private final JButton totalbutton;

    private static final Item[] items = {new Item("Item 0", 100), new Item("Item 1", 150), new Item("Item 2", 200), new Item("Item 3", 300)};

    private JButton bTotal;

    public MP2_1() {
        super("MP2_1");
        setLayout(new FlowLayout());

        leftlist = new JList(items);

        leftlist.setCellRenderer(new ItemCellRenderer(ItemCellRenderer.ITEM_NAME));
        leftlist.setVisibleRowCount(5);

        leftlist.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        add(new JScrollPane(leftlist));

        addbutton = new JButton("ADD");
        addbutton.addActionListener((ActionEvent event) -&gt; {
            rightlist.setListData(leftlist.getSelectedValuesList().toArray());

        });
        add(addbutton);

        rightlist = new JList();
        rightlist.setCellRenderer(new ItemCellRenderer(ItemCellRenderer.ITEM_PRICE));
        rightlist.setVisibleRowCount(5);
        rightlist.setFixedCellWidth(55);
        rightlist.setFixedCellHeight(20);
        add(new JScrollPane(rightlist));

        totalbutton = new JButton("Total");
        totalbutton.addActionListener((ActionEvent event) -&gt; {
            int total = 0;
            for (int i = 0; i &lt; rightlist.getModel().getSize(); i++) {
                Item item = (Item) rightlist.getModel().getElementAt(i);
                int itemPrice = item.getItemPrice();
                total += itemPrice;
            }
            System.out.println("Total " + total);
            // set the total label here
        });
        add(totalbutton);

    }

    public static void main(String[] args) {
        MP2_1 list = new MP2_1();
        list.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        list.setSize(300, 300);
        list.setVisible(true);
    }

}
 //Create an Item Object.  

class Item {

    private final String itemName;
    private final int itemPrice;

    Item(String itemName, int itemPrice) {
        this.itemPrice = itemPrice;
        this.itemName = itemName;
    }

    public String getItemName() {
        return itemName;
    }

    public int getItemPrice() {
        return itemPrice;
    }

}
//Create a Custom  CellRenderer and use it with the Lists.

class ItemCellRenderer extends JLabel implements ListCellRenderer&lt;Object&gt; {

    static int ITEM_NAME = 0;
    static int ITEM_PRICE = 1;
    private final int type;

    public ItemCellRenderer(int type) {
        this.type = type;
        setOpaque(true);

    }

    @Override
    public Component getListCellRendererComponent(JList&lt;?&gt; list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus) {
        Item item = (Item) value;
        setText(type == ITEM_NAME ? item.getItemName() : "" + item.getItemPrice());

        Color background;
        Color foreground;

        // check if this cell represents the current DnD drop location
        JList.DropLocation dropLocation = list.getDropLocation();
        if (dropLocation != null
                &amp;&amp; !dropLocation.isInsert()
                &amp;&amp; dropLocation.getIndex() == index) {

            background = Color.BLUE;
            foreground = Color.WHITE;

            // check if this cell is selected
        } else if (isSelected) {
            background = Color.RED;
            foreground = Color.WHITE;

            // unselected, and not the DnD drop location
        } else {
            background = Color.WHITE;
            foreground = Color.BLACK;
        }

        setBackground(background);
        setForeground(foreground);

        return this;
    }
}
</code></pre>
