<p>If I understand correctly, you need something like this:</p>

<pre><code>@TargetApi(Build.VERSION_CODES.HONEYCOMB)
@SuppressWarnings("deprecation")
public void copyToClipboard(String label, String text)
{
    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) {
        // Here we go if the device API level is less than 11, 
        // so we use old ClipboardManager class from "android.text" package
        android.text.ClipboardManager clipboard
                = (android.text.ClipboardManager) 
                getSystemService(Context.CLIPBOARD_SERVICE);
        clipboard.setText(text);
    } else {
        // Here we go if the device API highter than 11, 
        // so we use new ClipboardManager class from "android.content" package
        android.content.ClipboardManager clipboard
                = (android.content.ClipboardManager) 
                getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip = ClipData.newPlainText(label, text);
        clipboard.setPrimaryClip(clip);
    }
}
</code></pre>

<p>Build.VERSION_CODES.HONEYCOMB corresponds to API level 11. This function copies the text to the clipboard using the old API on devices older API level 11 and new API on devices beyond API level 11.</p>

<p>Example function usage with your code:</p>

<pre><code>@Override public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo)
{
    //user has long pressed your TextView
    menu.add(0, v.getId(), 0, "Copy");

    //cast the received View to TextView so that you can get its text
    TextView textView = (TextView) v;

    //place your TextView's text in clipboard
    copyToClipboard("Label describing text", textView.getText().toString());
}
</code></pre>

<p>And of course, before using copyToClipboard function you must copy it into yours Activity class.</p>
