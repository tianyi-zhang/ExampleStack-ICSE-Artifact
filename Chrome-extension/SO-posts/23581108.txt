<p>What helped me with a similar problem was to take a look at the android source, so you don't have to reinvent the wheel.</p>

<pre><code>@Override
public Filter getFilter() {
    if (mFilter == null)
        mFilter = new MyFilter();

    return mFilter;
}

public class MyFilter extends Filter {

    @SuppressWarnings("unchecked")
    @Override
    protected void publishResults(CharSequence constraint,  FilterResults result) {
        entries = (List&lt;VideoEntry&gt;) result.values;
        if (result.count &gt; 0)
            notifyDataSetChanged();
        else {
            notifyDataSetInvalidated();
        }
    }

    @Override
    public FilterResults performFiltering(CharSequence prefix) {
        FilterResults results = new FilterResults();

        if (mOriginalValues == null) {
            synchronized (mLock) {
                mOriginalValues = new ArrayList&lt;VideoEntry&gt;(entries);
            }
        }

        if (prefix == null || prefix.length() == 0) {
            ArrayList&lt;VideoEntry&gt; list;
            synchronized (mLock) {
                list = new ArrayList&lt;VideoEntry&gt;(mOriginalValues);
            }
            results.values = list;
            results.count = list.size();
        } else {
            String prefixString = prefix.toString().toLowerCase(Locale.ENGLISH);

            ArrayList&lt;VideoEntry&gt; values;
            synchronized (mLock) {
                values = new ArrayList&lt;VideoEntry&gt;(mOriginalValues);
            }

            final int count = values.size();
            final ArrayList&lt;VideoEntry&gt; filteredData = new ArrayList&lt;VideoEntry&gt;();

            for (int i = 0; i &lt; count; i++) {
                final VideoEntry value = values.get(i);
                final String valueText = value.text.toLowerCase(Locale.ENGLISH);

                if (valueText.contains(prefixString)) {
                    filteredData.add(value);
                }
            }

            results.values = filteredData;
            results.count = filteredData.size();
        }

        return results;
    }
};
</code></pre>

<p>and on top declare also the fields:</p>

<pre><code>private List&lt;VideoEntry&gt; entries;
private ArrayList&lt;VideoEntry&gt; mOriginalValues;
private final Object mLock = new Object();
private Filter mFilter;
</code></pre>

<p>but remove:</p>

<pre><code>private List&lt;VideoEntry&gt; filteredData;
</code></pre>

<p>and remember to get a reference from the filtered list in your <code>OnItemClickListener</code> or whatever click listener you have:</p>

<pre><code>public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {

    // in order to refer to the filtered item
    VideoEntry currentEntry = customAdapter.getItem(position);

    //...
}
</code></pre>
