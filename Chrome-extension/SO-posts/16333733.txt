<p>I found two ways while I was trying to achieve the same.</p>

<ol>
<li><p>Using <code>ColorMatrix</code></p>

<pre><code>private Bitmap androidGrayScale(final Bitmap bmpOriginal) {
    int width, height;
    height = bmpOriginal.getHeight();
    width = bmpOriginal.getWidth();
    Bitmap bmpGrayscale = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(bmpGrayscale);
    Paint paint = new Paint();
    ColorMatrix colorMatrix = new ColorMatrix();
    colorMatrix.setSaturation(0);
    ColorMatrixColorFilter colorMatrixFilter = new ColorMatrixColorFilter(colorMatrix);
    paint.setColorFilter(colorMatrixFilter);
    canvas.drawBitmap(bmpOriginal, 0, 0, paint);
    return bmpGrayscale;
}
</code></pre></li>
<li><p>Using <code>OpenCV</code></p></li>
</ol>

<p>Download <code>OpenCV</code> Library And Import as a Library Project. Add this library to your project as a reference library.</p>

<p>Download Links : <a href="http://opencv.org/downloads.html" rel="nofollow">OpenCV</a></p>

<pre><code>private Bitmap openCVGrayScale(final Bitmap bmpOriginal, final String filePath) {
        Mat imgToProcess;
        Mat imgToDest = new Mat();
        imgToProcess = Highgui.imread(filePath, Highgui.CV_LOAD_IMAGE_GRAYSCALE);
        org.opencv.android.Utils.bitmapToMat(bmpOriginal, imgToProcess);
        Imgproc.cvtColor(imgToProcess, imgToDest, Imgproc.COLOR_BGR2GRAY);
        Bitmap bmpGrayscale = Bitmap.createBitmap(imgToDest.cols(), imgToDest.rows(), Bitmap.Config.ARGB_8888); 
        org.opencv.android.Utils.matToBitmap(imgToDest, bmpGrayscale);
        return bmpGrayscale;
    }
</code></pre>

<p>Do not forget to check in your <code>Activity</code></p>

<pre><code>static {
    if (!OpenCVLoader.initDebug()) {
        android.util.Log.e("TAG", "Error");
    }
}
</code></pre>

<p>Thanks.</p>
