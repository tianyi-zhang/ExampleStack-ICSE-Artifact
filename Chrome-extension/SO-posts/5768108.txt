<p>There's nothing built in to the API to do this directly, but it's pretty simple. It's better to use a specific character encoding (like UTF-8) to convert characters to bytes. This should do the trick for encoding:</p>

<pre><code>static final String digits = "0123456789ABCDEF";

static void convert(String s, StringBuffer buf, String enc)
        throws UnsupportedEncodingException {
    byte[] bytes = s.getBytes(enc);
    for (int j = 0; j &lt; bytes.length; j++) {
        buf.append('%');
        buf.append(digits.charAt((bytes[j] &amp; 0xf0) &gt;&gt; 4));
        buf.append(digits.charAt(bytes[j] &amp; 0xf));
    }
}
</code></pre>

<p>Oh yes, you asked for decoding as well:</p>

<pre><code>static String decode(String s, String enc)
        throws UnsupportedEncodingException {
    StringBuffer result = new StringBuffer(s.length());
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    for (int i = 0; i &lt; s.length();) {
        char c = s.charAt(i);
        if (c == '%') {
            out.reset();
            do {
                if (i + 2 &gt;= s.length()) {
                    throw new IllegalArgumentException(
                        "Incomplete trailing escape (%) pattern at " + i);
                }
                int d1 = Character.digit(s.charAt(i + 1), 16);
                int d2 = Character.digit(s.charAt(i + 2), 16);
                if (d1 == -1 || d2 == -1) {
                    throw new IllegalArgumentException(
                        "Illegal characters in escape (%) pattern at " + i
                        + ": " + s.substring(i, i+3));
                }
                out.write((byte) ((d1 &lt;&lt; 4) + d2));
                i += 3;
            } while (i &lt; s.length() &amp;&amp; s.charAt(i) == '%');
            result.append(out.toString(enc));
            continue;
        } else {
            result.append(c);
        }
        i++;
    }
}
</code></pre>
