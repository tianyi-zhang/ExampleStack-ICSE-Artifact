<p><strong>Solution number 1 :</strong></p>

<p>You Have to do like following to reach "near" to your functionality,</p>

<p><strong>Wrap the adapter of your ListView</strong></p>

<p>Like following :</p>

<pre><code>  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // Create an Adapter for your content
    String[] content = new String[20];
    for (int i=0;i&lt;20;i++) content[i] = "Row "+(i+1);
    ArrayAdapter&lt;String&gt; stringAdapter = new ArrayAdapter&lt;String&gt;(
        this,
        R.layout.row_bg,
        R.id.text,
        new ArrayList&lt;String&gt;(Arrays.asList(content))
    );

   // Wrap your content in a SwipeActionAdapter
   mAdapter = new SwipeActionAdapter(stringAdapter);

   // Pass a reference of your ListView to the SwipeActionAdapter
   mAdapter.setListView(getListView());

   // Set the SwipeActionAdapter as the Adapter for your ListView
   setListAdapter(mAdapter);
  }
</code></pre>

<p><strong>Create a background layout for each swipe direction</strong></p>

<p>Like Following:</p>

<pre><code>  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

   // Create an Adapter for your content
   String[] content = new String[20];
   for (int i=0;i&lt;20;i++) content[i] = "Row "+(i+1);
   ArrayAdapter&lt;String&gt; stringAdapter = new ArrayAdapter&lt;String&gt;(
        this,
        R.layout.row_bg,
        R.id.text,
        new ArrayList&lt;String&gt;(Arrays.asList(content))
   );

   // Wrap your content in a SwipeActionAdapter
   mAdapter = new SwipeActionAdapter(stringAdapter);

   // Pass a reference of your ListView to the SwipeActionAdapter
   mAdapter.setListView(getListView());

   // Set the SwipeActionAdapter as the Adapter for your ListView
   setListAdapter(mAdapter);

   // Set backgrounds for the swipe directions
    mAdapter.addBackground(SwipeDirections.DIRECTION_FAR_LEFT,R.layout.row_bg_left_far)
          .addBackground(SwipeDirections.DIRECTION_NORMAL_LEFT,R.layout.row_bg_left)
         .addBackground(SwipeDirections.DIRECTION_FAR_RIGHT,R.layout.row_bg_right_far)
        .addBackground(SwipeDirections.DIRECTION_NORMAL_RIGHT,R.layout.row_bg_right);
}
</code></pre>

<p>You got both libraries and Example from the here :
<a href="https://github.com/wdullaer/SwipeActionAdapter">https://github.com/wdullaer/SwipeActionAdapter</a></p>

<p>This will not exact like you want, but i hope this will help you so much to fulfilled your functionality.</p>

<p><strong>Solution number 2 :</strong> </p>

<p><strong><em>Solution 2 is about  Changing some code in your Used code : <a href="http://www.tutecentral.com/android-swipe-listview/">http://www.tutecentral.com/android-swipe-listview/</a></em></strong> </p>

<p>i had try your code from the link <a href="http://www.tutecentral.com/android-swipe-listview/">http://www.tutecentral.com/android-swipe-listview/</a>  and changing some code and successfully solve your problem(your confusion) about onOpened(..)  method ( called left to right and vice versa )  </p>

<p>First change :  </p>

<ol>
<li><p>custom_row.xml layout file has three button swipe_button1 to 3 ,
remove middle of them.</p></li>
<li><p>Copy paste following code for remain two button :</p>

<p></p>

<pre><code>&lt;Button
    android:id="@+id/swipe_button1"
    android:layout_width="48dp"
    android:layout_height="48dp"
    android:layout_alignParentLeft="true"
    android:layout_alignParentTop="true"
    android:background="@drawable/your_accept_image" /&gt;

&lt;Button
    android:id="@+id/swipe_button3"
    style="@style/MyListButtonAction"
    android:layout_width="48dp"
    android:layout_height="48dp"
    android:layout_alignParentRight="true"
    android:layout_alignParentTop="true"
    android:background="@drawable/your_reject_image" /&gt;
</code></pre>

<p></p></li>
</ol>

<p>Remains code same for this layout.</p>

<p>Second change :</p>

<p>So now your accept and reject and list code is ready , now discuss about onOpened(..) method.</p>

<p><strong>Confusion solution 1</strong>- You told , your onOpend(...) method called same both left to right and vice-verse </p>

<p>-> just to change following :</p>

<pre><code>public void onOpened(int position, boolean toRight) {

            if(toRight)
            {

                //  for left to right your api calling here
                swipelistview.closeAnimate(position);
            }
            else
            {
                // for right to left your api calling here
                swipelistview.closeAnimate(position);
            }


        }
</code></pre>

<p><strong>Confusion solution 2</strong> when i take finger up it will must display entire listview or listview sides should retain it corners so its not working </p>

<p>-> i already answered it in above</p>

<p>called <strong>swipelistview.closeAnimate(position);</strong> in both if else, it hide left accept and right reject image when your your swipe left and right over.</p>

<p>So final code is following :</p>

<p>Entire cutom_row.xml layout </p>

<pre><code> &lt;?xml version="1.0" encoding="utf-8"?&gt;
 &lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="fill_parent"
     android:layout_height="fill_parent" &gt;

  &lt;RelativeLayout
    android:id="@+id/back"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:tag="back" &gt;

    &lt;Button
        android:id="@+id/swipe_button1"
        android:layout_width="48dp"
        android:layout_height="48dp"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:background="@drawable/accept_image" /&gt;

    &lt;Button
        android:id="@+id/swipe_button3"
        style="@style/MyListButtonAction"
        android:layout_width="48dp"
        android:layout_height="48dp"
        android:layout_alignParentRight="true"
        android:layout_alignParentTop="true"
        android:background="@drawable/reject_image" /&gt;
&lt;/RelativeLayout&gt;


&lt;RelativeLayout
    android:id="@+id/front"
    style="@style/MyListFrontContent"
    android:orientation="vertical"
    android:tag="front" &gt;

    &lt;ImageView
        android:id="@+id/example_image"
        style="@style/MyListImage" /&gt;

    &lt;TextView
        android:id="@+id/example_itemname"
        style="@style/MyListTitle"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:layout_toRightOf="@id/example_image" /&gt;
  &lt;/RelativeLayout&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p>Entire MainActivity.java</p>

<pre><code>public class MainActivity extends Activity {

SwipeListView swipelistview;
ItemAdapter adapter;
List&lt;ItemRow&gt; itemData;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    swipelistview=(SwipeListView)findViewById(R.id.example_swipe_lv_list); 
    itemData=new ArrayList&lt;ItemRow&gt;();
    adapter=new ItemAdapter(this,R.layout.custom_row,itemData);

    swipelistview.setSwipeListViewListener(new BaseSwipeListViewListener() {
        @Override
        public void onOpened(int position, boolean toRight) {

            if(toRight)
            {

                //  for left to right your api calling here
                swipelistview.closeAnimate(position);
            }
            else
            {
                // for right to left your api calling here
                swipelistview.closeAnimate(position);
            }


        }

        @Override
        public void onClosed(int position, boolean fromRight) {
            // close list slide
        }

        @Override
        public void onListChanged() {

        }

        @Override
        public void onMove(int position, float x) {


        }

        @Override
        public void onStartOpen(int position, int action, boolean right) {
            Log.d("swipe", String.format("onStartOpen %d - action %d", position, action));



        }

        @Override
        public void onStartClose(int position, boolean right) {
            Log.d("swipe", String.format("onStartClose %d", position));


        }

        @Override
        public void onClickFrontView(int position) {
            Log.d("swipe", String.format("onClickFrontView %d", position));




        }

        @Override
        public void onClickBackView(int position) {
            Log.d("swipe", String.format("onClickBackView %d", position));

            swipelistview.closeAnimate(position);//when you touch back view it will close

        }

        @Override
        public void onDismiss(int[] reverseSortedPositions) {

        }

    });

    //These are the swipe listview settings. you can change these
    //setting as your requirement 
    swipelistview.setSwipeMode(SwipeListView.SWIPE_MODE_BOTH); // there are five swiping modes
    //    swipelistview.setSwipeActionLeft(SwipeListView.SWIPE_ACTION_DISMISS); //there are four swipe actions 
    swipelistview.setSwipeActionRight(SwipeListView.SWIPE_ACTION_REVEAL);
    swipelistview.setOffsetLeft(convertDpToPixel(0f)); // left side offset
    swipelistview.setOffsetRight(convertDpToPixel(80f)); // right side offset
    swipelistview.setAnimationTime(500); // Animation time
    swipelistview.setSwipeOpenOnLongPress(true); // enable or disable SwipeOpenOnLongPress

    swipelistview.setAdapter(adapter);


    for(int i=0;i&lt;10;i++)
    {
        itemData.add(new ItemRow("Swipe Item"+ i,getResources().getDrawable(R.drawable.ic_launcher) ));

    }

    adapter.notifyDataSetChanged();
}

public int convertDpToPixel(float dp) {
    DisplayMetrics metrics = getResources().getDisplayMetrics();
    float px = dp * (metrics.densityDpi / 160f);
    return (int) px;
}


@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.main, menu);
    return true;
  }

 }
</code></pre>

<p>Other code and library remains same, It helpful to you and other also, So enjoy.</p>
