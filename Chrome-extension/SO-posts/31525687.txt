<p>I've made this method taht manage fragment and backstack for you. </p>

<pre><code>/**
 * Change the current displayed fragment managing fragment backstack
 * 
 * @param frag the fragment to display
 * @param saveInBackstack true if you want the previous to be in backstack
 */
private void changeFragment(Fragment frag, boolean saveInBackstack) {
    String backStateName = ((Object) frag).getClass().getName();

    try {
        FragmentManager manager = getSupportFragmentManager();
        boolean fragmentPopped = manager.popBackStackImmediate(backStateName, 0);

        if (!fragmentPopped &amp;&amp; manager.findFragmentByTag(backStateName) == null) { //fragment not in back stack, create it.
            FragmentTransaction transaction = manager.beginTransaction();
            transaction.replace(R.id.main_fragment_container, frag, ((Object) frag).getClass().getName());

            if (saveInBackstack) {
                Log.d(TAG, "Change Fragment : addToBackTack");
                transaction.addToBackStack(backStateName);
            } else {
                Log.d(TAG, "Change Fragment : NO addToBackTack");
            }

            transaction.commit();
        } else {
            Log.d(TAG, "Change Fragment : nothing to do");
            // custom effect if fragment is already instanciated
        }
    } catch (IllegalStateException exception) {
        Log.e(TAG, "Unable to commit fragment, could be activity as been killed in background. " + exception.toString());
    }
}
</code></pre>

<p>Also in your activity, Override onBackPressed : </p>

<pre><code>@Override
public void onBackPressed() {
    int fragments = getFragmentManager().getBackStackEntryCount();
    if (fragments == 1) {
        finish();
    }
    super.onBackPressed();
}
</code></pre>
