<p>There is no 'formal' way of accessing per app battery usage. I know
some hacks, but they are messy and will probably not work on >= Android 4.4.</p>

<p>You can, however, use debug time tools that provide per-app data.
<a href="http://developer.att.com/application-resource-optimizer" rel="nofollow">ATT ARO</a> is by far the best of them.</p>

<p>When it comes to global battery usage things gets better.</p>

<p>From any point within your code you can get the current battery level by:</p>

<pre><code>int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
if (level == -1 || scale == -1) {
   return 40f; // or any other default
}
float batteryLevelPercent = level / (float)scale;
</code></pre>

<p>If you are interested in ongoing monitoring of battery state, you could register a 'battery changed' receiver:</p>

<pre><code>void registerBatteryStateListener() {
    BroadcastReceiver batteryStateListener = new BroadcastReceiver() {
        int scale = -1;
        int level = -1;
        int voltage = -1;
        int temp = -1;
        @Override
        public void onReceive(Context context, Intent intent) {
            level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
            scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
            temp = intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, -1);
            voltage = intent.getIntExtra(BatteryManager.EXTRA_VOLTAGE, -1);
            Log.e("BatteryStat", "level = " + level + ", scale = " + scale);
        }
    };
    IntentFilter changeFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
    registerReceiver(batteryStateListener, changeFilter);
}
</code></pre>

<p>And add relevant permission to manifest:</p>

<pre><code> &lt;uses-permission android:name="android.permission.BATTERY_STATS"&gt;&lt;/uses-permission&gt;
</code></pre>

<p>Note that ACTION_BATTERY_CHANGED is a sticky intent. meaning it will basically run forever.</p>
