<p>I have had the same problem as you, dug around and found the following useful snippet somewhere. I refactored it a bit, so it will be more readable. hope it helps!</p>

<pre><code> public static long RFC2445ToMilliseconds(String str)
{


    if(str == null || str.isEmpty())
        throw new IllegalArgumentException("Null or empty RFC string");

    int sign = 1;
    int weeks = 0;
    int days = 0;
    int hours = 0;
    int minutes = 0;
    int seconds = 0;

    int len = str.length();
    int index = 0;
    char c;

    c = str.charAt(0);

    if (c == '-')
    {
        sign = -1;
        index++;
    }

    else if (c == '+')
        index++;

    if (len &lt; index)
        return 0;

    c = str.charAt(index);

    if (c != 'P')
        throw new IllegalArgumentException("Duration.parse(str='" + str + "') expected 'P' at index="+ index);

    index++;
    c = str.charAt(index);
    if (c == 'T')
        index++;

    int n = 0;
    for (; index &lt; len; index++)
    {
        c = str.charAt(index);

        if (c &gt;= '0' &amp;&amp; c &lt;= '9')
        {
            n *= 10;
            n += ((int)(c-'0'));
        }

        else if (c == 'W')
        {
            weeks = n;
            n = 0;
        }

        else if (c == 'H')
        {
            hours = n;
            n = 0;
        }

        else if (c == 'M')
        {
            minutes = n;
            n = 0;
        }

        else if (c == 'S')
        {
            seconds = n;
            n = 0;
        }

        else if (c == 'D')
        {
            days = n;
            n = 0;
        }

        else if (c == 'T')
        {
        }
        else
            throw new IllegalArgumentException ("Duration.parse(str='" + str + "') unexpected char '" + c + "' at index=" + index);
    }

    long factor = 1000 * sign;
    long result = factor * ((7*24*60*60*weeks)
            + (24*60*60*days)
            + (60*60*hours)
            + (60*minutes)
            + seconds);

    return result;
}
</code></pre>
