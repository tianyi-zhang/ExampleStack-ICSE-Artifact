<p>Both APIs used to access Google Drive deal with a binary content. So the only thing you have to do is to upload your binary DB file, give it a proper MIME type and a NAME (title).<br>
The selection of API depends on you, <a href="https://developers.google.com/drive/android/intro" rel="nofollow">GDAA</a> behaves like a 'local' entity with uploads / downloads handled by Google Play Services, <a href="https://developers.google.com/drive/web/about-sdk" rel="nofollow">REST</a> Api is more low-level, giving you more control, but you have to take care of networking issues (wifi on/off, etc), i.e. you usually have to build a sync service to do so. With GDAA it is done for you by GooPlaySvcs. But I digress.<br>
I can point you to this <a href="https://github.com/seanpjanson/GDAADemo" rel="nofollow">GitHub demo</a>, fairly recent (GooPlaySvcs 7.00.+), I use to test different REST / GDAA issues. 
The MainActivity is a bit complicated by the fact that it allows for switching between different Google accounts, but if you get through <a href="http://stackoverflow.com/questions/28439129/how-to-acknowledge-when-user-doesnt-want-to-connect-to-google-play-services/28440592#28440592">these hurdles</a>, you can use either REST or GDAA CRUD wrappers.</p>

<p>Take look at <a href="https://github.com/seanpjanson/GDAADemo/blob/master/src/main/java/com/andyscan/gdaademo/MainActivity.java#L120" rel="nofollow">this line</a>. The byte[] buffer contains binary JPEG data and it goes with "image/jpeg" mime type (and a time-based name). The only thing you have to do if is load your DB file into a byte[] buffer using a construct like this:</p>

<pre><code>  private static final int BUF_SZ = 4096;

  static byte[] file2Bytes(File file) {
    if (file != null) try {
       return is2Bytes(new FileInputStream(file));
    } catch (Exception ignore) {}
   return null;
  }

  static byte[] is2Bytes(InputStream is) {
    byte[] buf = null;
    BufferedInputStream bufIS = null;
    if (is != null) try {
      ByteArrayOutputStream byteBuffer = new ByteArrayOutputStream();
      bufIS = new BufferedInputStream(is);
      buf = new byte[BUF_SZ];
      int cnt;
      while ((cnt = bufIS.read(buf)) &gt;= 0) {
        byteBuffer.write(buf, 0, cnt);
      }
      buf = byteBuffer.size() &gt; 0 ? byteBuffer.toByteArray() : null;
    } catch (Exception e) {le(e);}
    finally {
      try {
        if (bufIS != null) bufIS.close();
      } catch (Exception e) {le(e);}
    }
    return buf;
  }
</code></pre>

<p>I don't remember the MIME type for SQLite DB now, but I am sure it can be done since I was doing exactly that once (the code is gone now, unfortunately). And I remember I could actually access and modify the SQLite DB 'up in the cloud' using some web app.</p>

<p>Good Luck     </p>

<p><strong>UPDATE:</strong><br>
After I wrote the rant above I  looked at the demo you're talking about. If you have it working, the easiest way is actually to plug your DB file right <a href="https://github.com/googledrive/android-quickstart/blob/master/src/com/google/android/gms/drive/sample/quickstart/MainActivity.java#L78" rel="nofollow">here</a>, set the correct MIME and you're good to go. Take you pick.<br>
And to address your 'deprecated' issue. GDAA is still being developed and the quickstart is over a year old. That's the world we live in :-)  </p>
