<pre><code> Here The Answer.I have done It Through AlaramManager.


Main Activity

 ===============

  public class MainActivity extends Activity 
 {

private PendingIntent pendingIntent;

@Override
public void onCreate(Bundle savedInstanceState) 
{

super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);

Intent myIntent = new Intent(MainActivity.this, MyReceiver.class);

pendingIntent = PendingIntent.getBroadcast(MainActivity.this, 0, myIntent,0);

AlarmManager alarmManager = (AlarmManager)getSystemService(ALARM_SERVICE); 
Calendar calendar = Calendar.getInstance();
calendar.setTimeInMillis(System.currentTimeMillis());
calendar.set(Calendar.HOUR_OF_DAY, 8);
calendar.set(Calendar.MINUTE, 30);

// setRepeating() lets you specify a precise custom interval--in this case,
// 20 minutes.
alarmManager.setRepeating(AlarmManager.RTC_WAKEUP,    calendar.getTimeInMillis(),
        1000 * 60 * 480, pendingIntent);

} //end onCreate


}
   ================================================================

 MyAlarmService.java

   ================================




  public class MyAlarmService extends Service 

   {
 private NotificationManager mManager;

 @Override
 public IBinder onBind(Intent arg0)
 {
   // TODO Auto-generated method stub
    return null;
 }

@Override
public void onCreate() 
{
   // TODO Auto-generated method stub  
   super.onCreate();
}

 @SuppressWarnings("static-access")
 @Override
public void onStart(Intent intent, int startId)
 {  

   showNotification(this);
 }



    private void showNotification(Context context) {
    NotificationCompat.Builder mBuilder =
           new NotificationCompat.Builder(context)
           .setSmallIcon(R.drawable.ic_launcher)
           .setContentTitle("Meal Log Reminder")
           .setContentText("It's time to log Your Meal!");

  // Creates an explicit intent for an Activity in your app
   Intent resultIntent = new Intent(context, MainActivity.class);

   // The stack builder object will contain an artificial back stack for the
   // started Activity.
   // This ensures that navigating backward from the Activity leads out of
   // your application to the Home screen.
   TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
   // Adds the back stack for the Intent (but not the Intent itself)
   stackBuilder.addParentStack(MainActivity.class);
   // Adds the Intent that starts the Activity to the top of the stack
   stackBuilder.addNextIntent(resultIntent);
   PendingIntent resultPendingIntent =
           stackBuilder.getPendingIntent(
               0,
               PendingIntent.FLAG_UPDATE_CURRENT
           );
   mBuilder.setContentIntent(resultPendingIntent);
   mBuilder.setContentIntent(resultPendingIntent);
   mBuilder.setDefaults(Notification.DEFAULT_ALL);

   NotificationManager mNotificationManager =
           (NotificationManager)    context.getSystemService(Context.NOTIFICATION_SERVICE);
   // mId allows you to update the notification later on.

 mNotificationManager.notify(1, mBuilder.build());




   }

@Override
public void onDestroy() 
{
    // TODO Auto-generated method stub
    super.onDestroy();
}

 }

    ===================================================

    MyReceiver.java

 =========================

  public class MyReceiver extends BroadcastReceiver
  {

@Override
 public void onReceive(Context context, Intent intent)
{
   Intent service1 = new Intent(context, MyAlarmService.class);
   context.startService(service1);

 }

 }
</code></pre>
