<p>Did you remember to import <code>java.awt.Toolkit</code>?</p>

<p>Besides, this is a really bad way to do this, this will expend under the "extra" content that many OSs have on the screen (the TaskBar on Windows for example), and will be displayed underneath it.</p>

<p>Instead, you could use <a href="http://docs.oracle.com/javase/7/docs/api/java/awt/Frame.html#setExtendedState(int)" rel="nofollow"><code>JFrame#setExtendedState</code></a> and pass it <code>JFrame. MAXIMIZED_BOTH</code> which maximise the window so it fills the entire application viewable area.</p>

<p>Now, if you REALLY want the window to occupy the ENTIRE screen, you're going to have take a look at <a href="http://docs.oracle.com/javase/tutorial/extra/fullscreen/" rel="nofollow">Full screen exclusive mode</a>, which will bring it's own issues</p>

<p>If you want to know the "viewable" size of a screen (that is the area which application windows should appear within), you could use something like...</p>

<pre><code>Rectangle bounds = new Rectangle(0, 0, 0, 0);

GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
gd = ge.getDefaultScreenDevice();

GraphicsConfiguration gc = gd.getDefaultConfiguration();
bounds = gc.getBounds();

Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gc);

bounds.x += insets.left;
bounds.y += insets.top;
bounds.width -= (insets.left + insets.right);
bounds.height -= (insets.top + insets.bottom);
</code></pre>

<p>Which will return the viewable space of the desktop minus all the system stuff...</p>
