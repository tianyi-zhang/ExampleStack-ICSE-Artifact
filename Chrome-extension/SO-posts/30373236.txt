<p>If you want your tags container to be eventually scrolling, then use <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html" rel="nofollow">RecyclerView</a> and <a href="https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html" rel="nofollow">GridLayoutManager</a> and call on it <code>setSpanCount(3)</code>. Don't forget to set its orientation to <code>VERTICAL</code></p>

<p>If yout won't ever need your items to be scrolling, then just use <a href="http://developer.android.com/reference/android/widget/GridLayout.html" rel="nofollow">GridLayout</a></p>

<p>EDIT: </p>

<p>I have put together rough example which works in the way you want. You will probably need to take margins and padding into account as well, but it should serve to you as a basic idea how to do that.</p>

<pre><code>public class TagLayout extends ViewGroup {

public TagLayout(Context context) {
    super(context);
}

public TagLayout(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public TagLayout(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
}

public TagLayout(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
    super(context, attrs, defStyleAttr, defStyleRes);
}

@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
    int maxWidth = getMeasuredWidth();
    int count = getChildCount();

    int tagLeft = left,
        tagTop = top,
        tagRight = 0,
        tagBottom = 0;

    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() != GONE) {

            tagRight = tagLeft + child.getMeasuredWidth();
            tagBottom = tagTop + child.getMeasuredHeight();

            if (tagRight &gt; maxWidth) {
                tagLeft = left;
                tagRight = left + child.getMeasuredWidth();
                tagTop = tagBottom;
                tagBottom += child.getMeasuredHeight();
            }
            child.layout(tagLeft, tagTop, tagRight, tagBottom);
            tagLeft = left;
        }

    }
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

    int width = 0;
    int height = 0;
    int count = getChildCount();
    int maxWidth = MeasureSpec.getSize(widthMeasureSpec);

    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        if (child.getVisibility() != GONE) {
            measureChild(child, widthMeasureSpec, heightMeasureSpec);
            width += child.getMeasuredWidth();
            if (height == 0) {
                height += child.getMeasuredHeight();
            }
            if (width &lt;= maxWidth) {
                continue;
            } else {
                width = 0;
                height += child.getMeasuredHeight();
            }
        }

    }
    setMeasuredDimension(widthMeasureSpec, MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY));
}

}
</code></pre>
