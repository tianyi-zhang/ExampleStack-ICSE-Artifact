<p>this is my code. I could erase and undo. The only problem that I have is when I go to click on the brush, it continuous erasing. To redraw again have to choose the color (doesn't draw with the last color). If it works and you can fix that let me know, and I hope I helped.</p>

<pre><code>public class DrawingView extends View {
private Context context;
private Path drawPath;
private Paint drawPaint;
private Paint canvasPaint;
private Canvas drawCanvas;
private Bitmap canvasBitmap;
private int previousPaintColor;
private int paintColor=0xFF000000;
private float brushSize;
private float eraserSize;
private float lastBrushSize;
private boolean isErasing = false;
private boolean isImageLoaded = false;
private List&lt;PaintPathPair&gt; undoList = null;
private List&lt;PaintPathPair&gt; currentMoveList = null;
private List&lt;PaintPathPair&gt; moveList = null;

public DrawingView(Context context, AttributeSet attrs) {
    super(context, attrs);
    this.context = context;
    this.moveList = new ArrayList&lt;PaintPathPair&gt;();
    this.undoList = new ArrayList&lt;PaintPathPair&gt;();
    this.currentMoveList = new ArrayList&lt;PaintPathPair&gt;();
    this.canvasPaint = new Paint(Paint.DITHER_FLAG);
    setupDrawing();
}

private void clearBrushes() {
    moveList.clear();
    undoList.clear();
    currentMoveList.clear();
}
private void setupDrawing() {
    drawPath = new Path();
    drawPaint = new Paint();

    brushSize = getResources().getInteger(R.integer.medium_size);
    lastBrushSize = brushSize;

    drawPaint.setColor(paintColor);
    drawPaint.setAntiAlias(true);
    drawPaint.setStrokeWidth(brushSize);
    drawPaint.setStyle(Paint.Style.STROKE);
    drawPaint.setStrokeJoin(Paint.Join.ROUND);
    drawPaint.setStrokeCap(Paint.Cap.ROUND);
}
@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);
    canvasBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
    drawCanvas = new Canvas(canvasBitmap);
}
@Override
protected void onDraw(Canvas canvas) {
    if (isImageLoaded) {
        canvas.drawBitmap(canvasBitmap, 0, 0, canvasPaint); 
    }
    drawPaint.setColor(paintColor);
    for (PaintPathPair pair : currentMoveList) {
        canvas.drawPath(pair.getPath(), pair.getPaint());
    }
    for (PaintPathPair pair : moveList) {
        canvas.drawPath(pair.getPath(), pair.getPaint());   
    }
}
public void startNewDrawing() {
    setBackgroundColor(Color.WHITE);
    drawCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
    clearBrushes();
    isImageLoaded = false;
    invalidate();
}
public void undo() {
    if (moveList.size() &gt; 0) {
        undoList.add(moveList.remove(moveList.size() - 1));
        invalidate();   
    }
}
public void redo() {
    if (undoList.size() &gt; 0) {
        moveList.add(undoList.remove(undoList.size() - 1));
        invalidate();
    }
}
@Override
public boolean onTouchEvent(MotionEvent event) {
    float touchX = event.getX();
    float touchY = event.getY();
    switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            drawPath.moveTo(touchX, touchY);
            break;
        case MotionEvent.ACTION_MOVE:
            drawPath.lineTo(touchX, touchY);
            currentMoveList.add(new PaintPathPair(drawPaint, drawPath));
            break;
        case MotionEvent.ACTION_UP:
            drawPath.lineTo(touchX, touchY);
            drawCanvas.drawPath(drawPath, drawPaint);
            moveList.add(new PaintPathPair(new Paint(drawPaint), drawPath));
            drawPath = new Path();
            currentMoveList.clear();
            break;
        default:
            return false;
    }
    invalidate();
    return true;
}

void setErasing(boolean erasing) {
    this.isErasing = erasing;
    int colorToSet = 0;
    previousPaintColor = drawPaint.getColor();

    if(isErasing) {
        //drawPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
        this.setColor("#FFFFFFFF");
    }
    else {
        drawPaint.setXfermode(null);
    }
}
public void setColor(String newColor) {
    this.previousPaintColor = drawPaint.getColor();
    paintColor = Color.parseColor(newColor);
    drawPaint.setColor(paintColor);
    invalidate();
}
public float getBrushSize() {
    return brushSize;
}
public void setBrushSize(float newSize) {
    brushSize = newSize;
    drawPaint.setStrokeWidth(brushSize);
    setErasing(false);
}
public float getEraserSize() {
    return eraserSize;
}
public void setEraserSize(float newSize) {
    eraserSize = newSize;
    drawPaint.setStrokeWidth(eraserSize);
    setErasing(true);
}
public void setLastBrushSize(float lastBrushSize) {
    this.lastBrushSize = lastBrushSize;
}
public void setBackgroundImage(Bitmap image) {
    isImageLoaded = true;
    clearBrushes();
    canvasBitmap = image;
    drawCanvas.drawBitmap(image, new Matrix(), null);
    invalidate();
}
public float getLastBrushSize() {
    return lastBrushSize;
}   
}
</code></pre>
