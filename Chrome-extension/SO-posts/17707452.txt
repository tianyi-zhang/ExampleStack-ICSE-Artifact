<p>I am assuming that you are using a custom adapter for populating this <code>GridView</code>, and passing the <code>Context</code> as an argument to the constructor. </p>

<p>In the custom adapter, you should add <code>onClickListeners</code> to the <code>TextViews</code>. Using the context, you can call methods from your activity:</p>

<pre><code>((CallingActivityName)context).methodYouWishToCall(parameters);
</code></pre>

<p>This would go inside the <code>onClickListeners</code>.</p>

<p>Edit: Added some code:</p>

<pre><code>public class MyGridAdapter extends BaseAdapter {

    private final List&lt;MyObjectClass&gt; mEntries;
    private final LayoutInflater mInflater;
    private final Context mContext; 

    public static class ViewHolder {
        public TextView tx;
    }

    public MyGridAdapter(CallingActivityName context, List&lt;MyObjectClass&gt; entries) {
        super();
        mEntries = entries;
        mContext = context;
        mInflater = (LayoutInflater) mContext
            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public int getCount() {
        return mEntries.size();
    }

    @Override
    public Object getItem(int position) {
        return mEntries.get(position);
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {

        final ViewHolder holder;

        if (convertView == null) {

            convertView = mInflator.inflate(R.layout.favitemlayout, parent, false);
            holder = new ViewHolder();

            holder.tx = (TextView) convertView
                .findViewById(R.id.favgridremoveitem);

            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }

        final MyObjectClass info = mEntries.get(position);

        holder.tx.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        ((CallingActivityName)mContext).favRemove(info);
                        notifyDataSetChanged();
                    }
        });

        return convertView;
    }

}
</code></pre>

<p>So, <code>CallingActivityName</code> is the name of the Activity where you initiate the adapter and where the method you need to call resides. <code>info</code> is the object held at position <code>position</code> of the gridview. <code>MyObjectClass</code> is the class name of the objects in the List <code>mEntries</code>.</p>
