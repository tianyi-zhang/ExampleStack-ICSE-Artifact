<p>Add this <code>cus.setSearchFilterItemListener(this);</code> before <code>navList.setAdapter(cus);</code></p>

<p><strong>Update</strong></p>

<p><strong>Step 1</strong>
Create an interface</p>

<pre><code>public interface SearchFilterItemListener {

    public void setData(String[] myArray);
}
</code></pre>

<p><strong>Step 2</strong>
Update your custom adapter class</p>

<pre><code>class CustomAdapter extends ArrayAdapter&lt;String&gt; {
    String A[], B[], origA[], origB[];
    LayoutInflater mInflater;

public CustomAdapter(Context context, String[] A,String B[]) {
    super(context, R.layout.list_item, A);
    this.A = A;
    this.B = B;
    this.origA = A;
    this.origB = B;
    mInflater = LayoutInflater.from(context);
}

public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder holder;
    if(convertView == null) {
        convertView = mInflater.inflate(R.layout.list_item, parent, false);
        holder = new ViewHolder();
        holder.tv1 = (TextView)convertView.findViewById(R.id.element_name);
        holder.tv2 = (TextView)convertView.findViewById(R.id.element_nos);
        convertView.setTag(holder);
    } else {
        holder = (ViewHolder)convertView.getTag();
    }

    holder.tv1.setText(A[position]);
    holder.tv2.setText(B[position]);
    return convertView;
}

static class ViewHolder {
    TextView tv1,tv2;
}

@Override
public Filter getFilter() {
    if (listFilter == null)
        listFilter = new TabFilter();
    return listFilter;
}

private class TabFilter extends Filter {

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        // TODO Auto-generated method stub
        FilterResults results = new FilterResults();
        // Filter Logic
        if (constraint == null || constraint.length() == 0) {
            // No filter, return all the list
            results.values = origA; //considering that you want to filter on the String[] A
            results.count = origA.size();
        } else {
            // We perform filtering operation
            String[] nList = new String[A.length];

            for (int counter = 0; counter &lt; A.length; counter++) {
                if (A[counter].toUpperCase(Locale.US).startsWith(constraint.toString().toUpperCase(Locale.US)))
                    nList[counter] = A[counter];
            }
            results.values = nList;
            results.count = nList.length;
        }

        return results;
    }

    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        // TODO Auto-generated method stub
        // Now we have to inform the adapter about the new filtered list
        if (results.count == 0)
            notifyDataSetInvalidated();
        else {
            A = (String[]) results.values;
            String[] newList = new String[A.length];
            newList = A.clone();

            notifyDataSetChanged();

            mSearchListener.setData(newList);
        }
    }
}

public String[] getSearchList() {
    return A;
}

public void setSearchFilterItemListener(SearchFilterItemListener mSearchFilterListener) {

    mSearchListener = mSearchFilterListener;
}
</code></pre>

<p>}</p>
