<p>You can register broadcast receiver for <a href="http://developer.android.com/reference/android/content/Intent.html#ACTION_BOOT_COMPLETED" rel="nofollow">BOOT_COMPLETED intent</a> and in <a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html#onReceive%28android.content.Context,%20android.content.Intent%29" rel="nofollow">onReceive</a> start your background service with a <a href="http://developer.android.com/reference/android/os/PowerManager.html#PARTIAL_WAKE_LOCK" rel="nofollow">PARTIAL_WAKELOCK</a> and then register your sensor event listener. Something like this:</p>

<pre><code>@Override
public int onStartCommand(Intent i, int flags, int startId) {
    acquireWakeLock();
    registerSensorListener();
    return START_STICKY;
}

@Override
public void onDestroy() {
    unregisterSensorListener();
    releaseWakeLock();
    super.onDestroy();
}

private void acquireWakeLock() {
    try {
        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
        if (pm == null) {
            Log.e(TAG, "Power manager not found!");
            return;
        }
        if (wakeLock == null) {
            wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, getPackageName());
            if (wakeLock == null) {
                Log.e(TAG, "Could not create wake lock (null).");
                return;
            }
        }
        if (!wakeLock.isHeld()) {
            wakeLock.acquire();
            if (!wakeLock.isHeld()) {
                Log.e(TAG, "Could not acquire wake lock.");
            }
        }
    } catch (RuntimeException e) {
        Log.e(TAG, "Caught unexpected exception: " + e.getMessage(), e);
    }
}

private void releaseWakeLock() {
    if (wakeLock != null &amp;&amp; wakeLock.isHeld()) {
        wakeLock.release();
        wakeLock = null;
    }
}
</code></pre>

<p>Hope this helps.</p>
