<p>What about from an outside app?
You could just make an Android build and, at the last state, run an app to change the Android device name?</p>

<p>You can use IBluetooth.aidl -> setName to change the Bluetooth name.</p>

<p>Tutorials can be found <a href="http://stackoverflow.com/questions/4464426/specifying-a-link-key-in-android-without-pairing">here</a>, which further references <a href="http://snipplr.com/view/49526/get-ibluetooth-instance/" rel="nofollow">this</a>.</p>

<p>In short, in src you make a package android.bluetooth, Inside it you copy paste IBluetooth.aidl and IBluetoothCallback.aidl (you can find them in the previous link).</p>

<p><strong>In your code</strong>, import the package:
    import android.bluetooth.IBluetooth;</p>

<p>Then implement this method to get the Bluetooth object:</p>

<pre><code>@SuppressWarnings("rawtypes")
private IBluetooth getIBluetooth() {
    IBluetooth ibt = null;
    try {
        Class c2 = Class.forName("android.os.ServiceManager");
        Method m2 = c2.getDeclaredMethod("getService", String.class);
        IBinder b = (IBinder) m2.invoke(null, "bluetooth");
        Class c3 = Class.forName("android.bluetooth.IBluetooth");
        Class[] s2 = c3.getDeclaredClasses();
        Class c = s2[0];
        Method m = c.getDeclaredMethod("asInterface", IBinder.class);
        m.setAccessible(true);
        ibt = (IBluetooth) m.invoke(null, b);
    } catch (Exception e) {
        Log.e("flowlab", "Erroraco!!! " + e.getMessage());
    }
    return ibt;
}
</code></pre>

<p>Then instance this object:
    IBluetooth ib =getIBluetooth();</p>

<p>and probably use 
    ib.setName("something");</p>
