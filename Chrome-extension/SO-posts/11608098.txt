<p>I used this on click for Twitter Authentication..</p>

<pre><code>Intent i = new Intent(getApplicationContext(), PrepareRequestTokenActivity.class);
                finish();
                startActivity(i);
</code></pre>

<p>and this is the PrepareRequestTokenActivity.java</p>

<pre><code>package com.twitter;

import oauth.signpost.OAuth;
import oauth.signpost.OAuthConsumer;
import oauth.signpost.OAuthProvider;
import oauth.signpost.commonshttp.CommonsHttpOAuthConsumer;
import oauth.signpost.commonshttp.CommonsHttpOAuthProvider;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;

import com.WFBOS.SettingActivity;

/**
 * Prepares a OAuthConsumer and OAuthProvider 
 * 
 * OAuthConsumer is configured with the consumer key &amp; consumer secret.
 * OAuthProvider is configured with the 3 OAuth endpoints.
 * 
 * Execute the OAuthRequestTokenTask to retrieve the request, and authorize the request.
 * 
 * After the request is authorized, a callback is made here.
 * 
 */
public class PrepareRequestTokenActivity extends Activity 
{

    final String TAG = getClass().getName();

    private OAuthConsumer consumer; 
    private OAuthProvider provider;

    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        try
        {
            this.consumer = new CommonsHttpOAuthConsumer(Constants1.CONSUMER_KEY, Constants1.CONSUMER_SECRET);
            this.provider = new CommonsHttpOAuthProvider(Constants1.REQUEST_URL,Constants1.ACCESS_URL,Constants1.AUTHORIZE_URL);
        }
        catch (Exception e)
        {
            Log.e(TAG, "Error creating consumer / provider",e);
        }

        Log.i(TAG, "Starting task to retrieve request token.");
        new OAuthRequestTokenTask(this,consumer,provider).execute();
    }

    /**
     * Called when the OAuthRequestTokenTask finishes (user has authorized the request token).
     * The callback URL will be intercepted here.
     */
    @Override
    public void onNewIntent(Intent intent)
    {
        super.onNewIntent(intent); 
        SharedPreferences prefs = getSharedPreferences("Twitter", MODE_PRIVATE);
        final Uri uri = intent.getData();
        if (uri != null &amp;&amp; uri.getScheme().equals(Constants1.OAUTH_CALLBACK_SCHEME)) 

        {
            Log.i(TAG, "Callback received : " + uri);
            Log.i(TAG, "Retrieving Access Token");
            new RetrieveAccessTokenTask(this,consumer,provider,prefs).execute(uri);
            finish();   
        }
    }

    public class RetrieveAccessTokenTask extends AsyncTask&lt;Uri, Void, Void&gt; 
    {

        private Context context;
        private OAuthProvider provider;
        private OAuthConsumer consumer;
        private SharedPreferences prefs;

        public RetrieveAccessTokenTask(Context context, OAuthConsumer consumer,OAuthProvider provider, SharedPreferences prefs)
        {
            this.context = context;
            this.consumer = consumer;
            this.provider = provider;
            this.prefs=prefs;
        }


        /**
         * Retrieve the oauth_verifier, and store the oauth and oauth_token_secret 
         * for future API calls.
         */
        @Override
        protected Void doInBackground(Uri...params)
        {
            final Uri uri = params[0];
            final String oauth_verifier = uri.getQueryParameter(OAuth.OAUTH_VERIFIER);

            try 
            {
                provider.retrieveAccessToken(consumer, oauth_verifier);

                final Editor edit1 = prefs.edit();
                edit1.putString(OAuth.OAUTH_TOKEN, consumer.getToken());
                edit1.putString(OAuth.OAUTH_TOKEN_SECRET, consumer.getTokenSecret());
                edit1.commit();

                String token = prefs.getString(OAuth.OAUTH_TOKEN, "");
                String secret = prefs.getString(OAuth.OAUTH_TOKEN_SECRET, "");
                Log.d("toker", token);
                Log.d("Secret", secret);
                consumer.setTokenWithSecret(token, secret);
                context.startActivity(new Intent(context,SettingActivity.class));

                //executeAfterAccessTokenRetrieval();

                Log.i(TAG, "OAuth - Access Token Retrieved");

            } 
            catch (Exception e)
            {
                Log.e(TAG, "OAuth - Access Token Retrieval Error", e);
            }

            return null;
        }


        /*private void executeAfterAccessTokenRetrieval()
        {
            String msg = getIntent().getExtras().getString("tweet_msg");
            try
            {
                TwitterUtils.sendTweet(prefs, msg);
            } 
            catch (Exception e)
            {
                Log.e(TAG, "OAuth - Error sending to Twitter", e);
            }
        }*/
    }   

}
</code></pre>

<p>and here is the  OAuthRequestTokenTask.java</p>

<pre><code>package com.twitter;

import oauth.signpost.OAuthConsumer;
import oauth.signpost.OAuthProvider;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.util.Log;

/**
 * An asynchronous task that communicates with Twitter to 
 * retrieve a request token.
 * (OAuthGetRequestToken)
 * 
 * After receiving the request token from Twitter, 
 * pop a browser to the user to authorize the Request Token.
 * (OAuthAuthorizeToken)
 * 
 */
public class OAuthRequestTokenTask extends AsyncTask&lt;Void, Void, Void&gt; 
{

    final String TAG = getClass().getName();
    private Context context;
    private OAuthProvider provider;
    private OAuthConsumer consumer;

    /**
     * 
     * We pass the OAuth consumer and provider.
     * 
     * @param   context
     *          Required to be able to start the intent to launch the browser.
     * @param   provider
     *          The OAuthProvider object
     * @param   consumer
     *          The OAuthConsumer object
     */
    public OAuthRequestTokenTask(Context context,OAuthConsumer consumer,OAuthProvider provider)
    {
        this.context = context;
        this.consumer = consumer;
        this.provider = provider;
    }

    /**
     * 
     * Retrieve the OAuth Request Token and present a browser to the user to authorize the token.
     * 
     */
    @Override
    protected Void doInBackground(Void... params) 
    {

        try
        {
            Log.i(TAG, "Retrieving request token from Google servers");
            final String url = provider.retrieveRequestToken(consumer, Constants1.OAUTH_CALLBACK_URL);
            Log.i(TAG, "Popping a browser with the authorize URL : " + url);
            Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url)).setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_NO_HISTORY | Intent.FLAG_FROM_BACKGROUND);
            context.startActivity(intent);
        } 
        catch (Exception e) 
        {
            Log.e(TAG, "Error during OAUth retrieve request token", e);
        }

        return null;
    }

}
</code></pre>

<p>This is my Constants1.java</p>

<pre><code>package com.twitter;

public class Constants1
{

    public static final String CONSUMER_KEY = "your key";
    public static final String CONSUMER_SECRET= "your key";


    public static final String REQUEST_URL = "http://api.twitter.com/oauth/request_token";
    public static final String ACCESS_URL = "http://api.twitter.com/oauth/access_token";
    public static final String AUTHORIZE_URL = "http://api.twitter.com/oauth/authorize";

    public static final String  OAUTH_CALLBACK_SCHEME   = "x-oauthflow-twitter";
    public static final String  OAUTH_CALLBACK_HOST     = "callback";
    public static final String  OAUTH_CALLBACK_URL      = OAUTH_CALLBACK_SCHEME + "://" + OAUTH_CALLBACK_HOST;

    //public static final String    OAUTH_CALLBACK_URL      = "http://www.wfbos.com";

}
</code></pre>
