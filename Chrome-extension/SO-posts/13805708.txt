<p>You can use <a href="http://code.google.com/p/efficient-java-matrix-library/">efficient-java-matrix-library</a></p>

<p>Please find the below sample example for the same</p>

<pre><code>public class PolynomialRootFinder {

    /**
     * &lt;p&gt;
     * Given a set of polynomial coefficients, compute the roots of the polynomial.  Depending on
     * the polynomial being considered the roots may contain complex number.  When complex numbers are
     * present they will come in pairs of complex conjugates.
     * &lt;/p&gt;
     *
     * @param coefficients Coefficients of the polynomial.
     * @return The roots of the polynomial
     */
    public static Complex64F[] findRoots(double... coefficients) {
        int N = coefficients.length-1;

        // Construct the companion matrix
        DenseMatrix64F c = new DenseMatrix64F(N,N);

        double a = coefficients[N];
        for( int i = 0; i &lt; N; i++ ) {
            c.set(i,N-1,-coefficients[i]/a);
        }
        for( int i = 1; i &lt; N; i++ ) {
            c.set(i,i-1,1);
        }

        // use generalized eigenvalue decomposition to find the roots
        EigenDecomposition&lt;DenseMatrix64F&gt; evd =  DecompositionFactory.eigGeneral(N, false);

        evd.decompose(c);

        Complex64F[] roots = new Complex64F[N];

        for( int i = 0; i &lt; N; i++ ) {
            roots[i] = evd.getEigenvalue(i);
        }

        return roots;
    }
}
</code></pre>
