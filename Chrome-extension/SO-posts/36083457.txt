<p>Your code is very very wrong.</p>

<p>Refer to <a href="http://developer.android.com/training/location/receive-location-updates.html" rel="nofollow">Receiving Location updates</a> page. That page leaves some stuff for you to implement, so I'll give you working example. You'll need to adapt it for your needs yourself.</p>

<pre><code>@Override
public void onConnected(@Nullable final Bundle bundle) {
    if (mRequestingLocationUpdates) {
        startLocationUpdates();
    }
}

@Override
public void onConnectionSuspended(final int i) {

}

@Override
public void onLocationChanged(final Location location) {
    EventBus.getDefault().post(new LocationChangedEvent(location));
}

@Override
public void onConnectionFailed(@NonNull final ConnectionResult connectionResult) {

}

protected synchronized void buildGoogleApiClient() {
    Logger.e(this, "Building GoogleApiClient");
    mGoogleApiClient = new GoogleApiClient.Builder(this)
            .addConnectionCallbacks(this)
            .addOnConnectionFailedListener(this)
            .addApi(LocationServices.API)
            .build();
    createLocationRequest();
}

protected void createLocationRequest() {
    mLocationRequest = new LocationRequest();
    mLocationRequest.setInterval(UPDATE_INTERVAL_IN_MILLISECONDS);
    mLocationRequest.setFastestInterval(FASTEST_UPDATE_INTERVAL_IN_MILLISECONDS);
    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
}

protected void startLocationUpdates() {
    if (ContextCompat.checkSelfPermission(this,
            Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {
        if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                Manifest.permission.ACCESS_FINE_LOCATION)) {
            Utils.showPermissionRationaleDialog(MainActivity.this, R.string.permission_rationale_location,
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            ActivityCompat.requestPermissions(MainActivity.this,
                                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                                    REQUEST_LOCATION);
                        }
                    });
        } else {
            ActivityCompat.requestPermissions(this,
                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                    REQUEST_LOCATION);
        }
    } else {
        LocationServices.FusedLocationApi.requestLocationUpdates(
                mGoogleApiClient, mLocationRequest, this);
    }
}

protected void stopLocationUpdates() {
    LocationServices.FusedLocationApi.removeLocationUpdates(
            mGoogleApiClient, this);
}

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    if (savedInstanceState != null) {
        mRequestingLocationUpdates = savedInstanceState.getBoolean(
                "request_location_updates");
    }
    buildGoogleApiClient();
}
@Override
protected void onStart() {
    super.onStart();
    mGoogleApiClient.connect();
}

@Override
protected void onStop() {
    mGoogleApiClient.disconnect();
    super.onStop();
}
@Override
protected void onPause() {
    super.onPause();
    if (mGoogleApiClient.isConnected()) {
        stopLocationUpdates();
    }
}

@Override
public void onResume() {
    super.onResume();
    if (mGoogleApiClient.isConnected() &amp;&amp; mRequestingLocationUpdates) {
        startLocationUpdates();
    }

}
</code></pre>
