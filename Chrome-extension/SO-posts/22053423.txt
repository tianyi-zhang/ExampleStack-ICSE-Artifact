<p>I assume you want to achieve something similar to what is in the following picture:
<img src="http://i.stack.imgur.com/7SHWV.png" alt="enter image description here"></p>

<p>You will have to modify your list adapter(NsMenuAdapter) to support two types of view - item and title where item is clickable and title is just kind of group header. Adapter should takes array/list of objects and every object should have type attribute. This will probably complicate a little <code>OnItemClickListener</code>.</p>

<p>I'm posting my example of that kind list adapter. In my case I created NavigationDrawerItem model to hold information about item type, item 'clickability' and what action should be triggered after item get clicked.</p>

<pre><code>public class NavigationDrawerAdapter extends ArrayAdapter&lt;NavigationDrawerItem&gt; {
private static final String TAG = "NavigationDrawerAdapter";

public NavigationDrawerAdapter(Context context, int resource, NavigationDrawerItem[] objects) {
    super(context, resource, objects);
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    if (null == convertView) {
        int itemType = getItemViewType(position);
        if (NavigationDrawerItem.TYPE_TITLE == itemType) {
            convertView = View.inflate(getContext(), R.layout.item_title_navigation_drawer, null);
        } else if (NavigationDrawerItem.TYPE_ITEM_UNDER_TITLE == itemType) {
            convertView = View.inflate(getContext(), R.layout.item_under_title_navigation_drawer, null);
        } else {
            Log.e(TAG, "Returning default title view - Invalid drawer item type" + itemType);
            convertView = View.inflate(getContext(), R.layout.item_title_navigation_drawer, null);
        }
    }
    TextView tv = (TextView) convertView.findViewById(R.id.text);
    tv.setText(getContext().getString(getItem(position).stringRes));
    return convertView;
}

@Override
public int getItemViewType(int position) {
    return getItem(position).type;
}

@Override
public int getViewTypeCount() {
    return NavigationDrawerItem.NUMBER_OF_ITEM_TYPES;
}

@Override
public boolean isEnabled(int position) {
    return NavigationDrawerItem.isItemClickable(getItemViewType(position));
}

}
</code></pre>

<p>And the NavigationDrawerItem class:</p>

<pre><code>public final class NavigationDrawerItem {
private static final String TAG = "NavigationDrawerItem";

// Types must have numbers from 0 to n without gaps.
public static final int TYPE_TITLE = 0;// nonclickable
public static final int TYPE_ITEM_UNDER_TITLE = 1;// clickabel
public static final int NUMBER_OF_ITEM_TYPES = 2;

public final int action;
public final String argument;
public final int type;

    //Constructors etc.

public static final boolean isItemClickable(int itemType) {
    if (TYPE_TITLE == itemType) {
        return false;
    } else if (TYPE_ITEM_UNDER_TITLE == itemType) {
        return true;
    } else {
        Log.e(TAG, "Invalid item type " + itemType);
        return false;
    }
}

}
</code></pre>
