<p>After more search I found problem places in my code. 
<code>this.setMovementMethod(LinkMovementMethod.getInstance());
this.setLinkTextColor(ContextCompat.getColorStateList(App.getContext(), R.color.link_selector));
</code>
And I also made sure not to proceed link click to super class, and handle link opening myself with onTouch method.
In short link highlight is handled by system, and link opening is handled by me. Below is my working code.</p>

<pre><code>public class LinkifyTextView extends TextView {
    public LinkifyTextView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init();
    }

    public LinkifyTextView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public LinkifyTextView(Context context) {
        super(context);
        init();
    }

    private void init() {
        this.setAutoLinkMask(Linkify.WEB_URLS);
        this.setMovementMethod(LinkMovementMethod.getInstance());
        this.setLinkTextColor(ContextCompat.getColorStateList(App.getContext(), R.color.link_selector));
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        final Object text = getText();
        if (text instanceof Spannable) {
            final Spannable buffer = (Spannable) text;
            final int action = event.getAction();

            if (action == MotionEvent.ACTION_UP
                    || action == MotionEvent.ACTION_DOWN) {
                int x = (int) event.getX();
                int y = (int) event.getY();

                x -= getTotalPaddingLeft();
                y -= getTotalPaddingTop();

                x += getScrollX();
                y += getScrollY();

                final Layout layout = getLayout();
                final int line = layout.getLineForVertical(y);
                final int off = layout.getOffsetForHorizontal(line, x);

                final ClickableSpan[] link = buffer.getSpans(off, off,
                        ClickableSpan.class);

                if (link.length != 0) {
                    if (action == MotionEvent.ACTION_UP) {
                        int start = buffer.getSpanStart(link[0]);
                        int end = buffer.getSpanEnd(link[0]);
                        CharSequence linkText = ((Spannable) text).subSequence(start, end);

                        LinkClickHelper.openLink((Activity) getContext(), linkText.toString());
                        //prevent opening link by system
                        return false;
                    } else {
                        super.onTouchEvent(event);
                        Selection.setSelection(buffer,
                                buffer.getSpanStart(link[0]),
                                buffer.getSpanEnd(link[0]));
                    }
                } else {
                    super.onTouchEvent(event);
                }
            } else {
                super.onTouchEvent(event);
            }
        }
        return true;
    }

}
</code></pre>
