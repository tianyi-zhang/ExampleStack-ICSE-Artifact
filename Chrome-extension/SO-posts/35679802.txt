<p>To get better help sooner:</p>

<ul>
<li>Check this out: <a href="https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/_nimbusDefaults.html" rel="nofollow">Nimbus Defaults (The Javaâ„¢ Tutorials > Creating a GUI With JFC/Swing > Modifying the Look and Feel)</a> and remove unnecessary keys from the <code>TabbedPaneTheme</code> class, e.g. <code>TabbedPane:...font</code>, <code>TabbedPane:TabbedPaneContent.[Enabled+Pressed]...</code></li>
<li>Remove unrelated code: <code>Color light, dark;</code>, <code>CitiesPanel</code>, <code>ColorsPanel</code> class, <code>NimbusBaseUI#initialize()</code> method, ...</li>
<li><code>TabbedPane_TabView_Painter</code> is not do anything.</li>
</ul>

<hr>

<p>Here's my attempt:</p>

<p><a href="http://i.stack.imgur.com/AUgm2.png" rel="nofollow"><img src="http://i.stack.imgur.com/AUgm2.png" alt="enter image description here"></a></p>

<pre><code>import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;

public class NimbusTabbedPaneTest {
  public JComponent makeUI() {
    JTabbedPane tabbedPane = new JTabbedPane();
    tabbedPane.addTab("World Cities", new JScrollPane(new JTree()));
    tabbedPane.addTab("Colors ",      new JSplitPane());
    tabbedPane.addTab("World Cities", new JScrollPane(new JTextArea()));
    tabbedPane.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
    return tabbedPane;
  }
  public static void main(String... args) {
    EventQueue.invokeLater(() -&gt; {
      try {
        new NimbusBaseUI();
      } catch (Exception e) {
        e.printStackTrace();
      }
      JFrame f = new JFrame("Nimbus Base Demo");
      f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      f.getContentPane().add(new NimbusTabbedPaneTest().makeUI());
      f.setSize(400, 400);
      f.setLocationRelativeTo(null);
      f.setVisible(true);
    });
  }
}

class NimbusBaseUI extends NimbusLookAndFeel {
  public NimbusBaseUI() {
    super();
    try {
      new TabbedPaneTheme(this);
      UIManager.setLookAndFeel(this);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}

class TabbedPaneTheme {
  protected static int OVERPAINT = 6;
  protected static int shadowOffset = 1;
  protected static int strokeSize = 2;
  protected static Dimension arcs = new Dimension(10, 10);
  public TabbedPaneTheme(NimbusBaseUI nimbusUI) {
    UIDefaults d = nimbusUI.getDefaults();

    d.put("TabbedPane:TabbedPaneContent.contentMargins", new Insets(0, 5, 5, 5));
    //d.put("TabbedPane:TabbedPaneTab.contentMargins",     new Insets(2, 8, 3, 8));
    //d.put("TabbedPane:TabbedPaneTabArea.contentMargins", new Insets(3, 10, 4, 10));
    d.put("TabbedPane:TabbedPaneTabArea.contentMargins",
          new Insets(3, 10, OVERPAINT, 10));

    Painter&lt;JComponent&gt; tabAreaPainter = new TabAreaPainter();
    d.put("TabbedPane:TabbedPaneTabArea[Disabled].backgroundPainter",
          tabAreaPainter);
    d.put("TabbedPane:TabbedPaneTabArea[Enabled].backgroundPainter",
          tabAreaPainter);
    d.put("TabbedPane:TabbedPaneTabArea[Enabled+MouseOver].backgroundPainter",
          tabAreaPainter);
    d.put("TabbedPane:TabbedPaneTabArea[Enabled+Pressed].backgroundPainter",
          tabAreaPainter);

    d.put("TabbedPane:TabbedPaneContent.backgroundPainter",
          new TabContentPainter());

    Painter&lt;JComponent&gt; tabPainter = new TabPainter(Color.ORANGE, false);
    d.put("TabbedPane:TabbedPaneTab[Enabled+MouseOver].backgroundPainter",
          tabPainter);
    d.put("TabbedPane:TabbedPaneTab[Enabled+Pressed].backgroundPainter",
          tabPainter);
    d.put("TabbedPane:TabbedPaneTab[Enabled].backgroundPainter",
          tabPainter);

    Painter&lt;JComponent&gt; selectedTabPainter = new TabPainter(Color.WHITE, true);
    d.put("TabbedPane:TabbedPaneTab[Focused+MouseOver+Selected].backgroundPainter",
          selectedTabPainter);
    d.put("TabbedPane:TabbedPaneTab[Focused+Pressed+Selected].backgroundPainter",
          selectedTabPainter);
    d.put("TabbedPane:TabbedPaneTab[Focused+Selected].backgroundPainter",
          selectedTabPainter);
    d.put("TabbedPane:TabbedPaneTab[MouseOver+Selected].backgroundPainter",
          selectedTabPainter);
    d.put("TabbedPane:TabbedPaneTab[Selected].backgroundPainter",
          selectedTabPainter);
    d.put("TabbedPane:TabbedPaneTab[Pressed+Selected].backgroundPainter",
          selectedTabPainter);
  }

  private static class TabPainter implements Painter&lt;JComponent&gt; {
    private final Color color;
    private int r = 6;
    private int x = 3;
    private int y = 3;
    private boolean selected;
    public TabPainter(Color color, boolean selected) {
      this.color = color;
      this.selected = selected;
    }
    @Override public void paint(Graphics2D g, JComponent c, int width, int height) {
      int ex = selected ? OVERPAINT : 0;
      Graphics2D g2 = (Graphics2D) g.create(0, 0, width, height + ex);
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);
      int w = width - 6 - 1;
      int h = height + r;
      for (int i = 0; i &lt; 3; i++) {
        g2.setColor(new Color(0, 0, 0, 20));
        g2.fill(new RoundRectangle2D.Double(x - i, y - i, w + i + i, h, r, r));
      }
      g2.setColor(color);
      g2.fill(new RoundRectangle2D.Double(x, y, w, h + 4, r, r));
      g2.dispose();
    }
  }

  private static class TabAreaPainter implements Painter&lt;JComponent&gt; {
    @Override public void paint(Graphics2D g, JComponent c, int w, int h) {
      Graphics2D g2 = (Graphics2D) g.create(0, 0, w, h);
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);

      RoundRectangle2D r = new RoundRectangle2D.Double(
        shadowOffset,// X position
        shadowOffset + h - OVERPAINT,// Y position
        w - strokeSize - shadowOffset, // width
        40, // height
        arcs.width, arcs.height);// arc Dimension

      g2.setPaint(Color.CYAN);
      g2.fill(r);
      g2.setColor(Color.RED);
      g2.setStroke(new BasicStroke(strokeSize));
      g2.draw(r);
      g2.dispose();
    }
  }

  private static class TabContentPainter implements Painter&lt;JComponent&gt; {
    @Override public void paint(Graphics2D g, JComponent c, int w, int h) {
      Graphics2D g2 = (Graphics2D) g.create(0, 0, w, h);
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                          RenderingHints.VALUE_ANTIALIAS_ON);

      g2.translate(0, -OVERPAINT);
      h += OVERPAINT;

      RoundRectangle2D r = new RoundRectangle2D.Double(
        shadowOffset,// X position
        shadowOffset,// Y position
        w - strokeSize - shadowOffset, // width
        h - strokeSize - shadowOffset, // height
        arcs.width, arcs.height);// arc Dimension

      g2.setPaint(Color.WHITE);
      g2.fill(r);
      g2.setColor(Color.ORANGE);
      g2.setStroke(new BasicStroke(strokeSize));
      g2.draw(r);
      g2.dispose();
    }
  }
}
</code></pre>
