<p>You should implement a WebViewClient and setContentView for your browser like this
    web.setWebViewClient(new myWebClient());
    web.setWebChromeClient(new WebChromeClient());
    setContentView(web);</p>

<p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>package com.example.yourappname;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.webkit.ValueCallback;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.webkit.WebChromeClient;
import android.widget.Button;
import android.widget.EditText;

public class MainActivity extends Activity {

WebView web;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    web = (WebView) findViewById(R.id.webView1);
    web = new WebView(this);  
    web.getSettings().setJavaScriptEnabled(true);
    web.loadUrl("http://www.yoururlhere.com");
    web.setWebViewClient(new myWebClient());
    web.setWebChromeClient(new WebChromeClient());
    setContentView(web);
}



public class myWebClient extends WebViewClient
{
    @Override
    public void onPageStarted(WebView view, String url, Bitmap favicon) {
        // TODO Auto-generated method stub
        super.onPageStarted(view, url, favicon);
    }

    @Override
    public boolean shouldOverrideUrlLoading(WebView view, String url) {
        // TODO Auto-generated method stub

        view.loadUrl(url);
        return true;

    }
    
    @Override
    public void onPageFinished(WebView view, String url) {
        // TODO Auto-generated method stub
        super.onPageFinished(view, url);

        
    }
}

//flip screen not loading again
@Override
public void onConfigurationChanged(Configuration newConfig){        
  super.onConfigurationChanged(newConfig);
}





@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
    if(event.getAction() == KeyEvent.ACTION_DOWN){
        switch(keyCode)
        {
        case KeyEvent.KEYCODE_BACK:
            if(web.canGoBack()){
              web.goBack();
             }
            else
            {
             backButtonHandler();
            }
            return true;
        }

     }
     return super.onKeyDown(keyCode, event);
 }
public void backButtonHandler() {
  AlertDialog.Builder alertDialog = new AlertDialog.Builder(
    MainActivity.this);
  
 
  // Setting Dialog Title
    // Setting Dialog Message
  
  alertDialog.setTitle("Alert Dialog Title Here");
  alertDialog.setIcon(R.drawable.dialog_icon);
  alertDialog.setMessage("Exit Now?");
  
      // Setting Icon to Dialog
  // Setting Positive "Yes" Button
  
  alertDialog.setPositiveButton("Exit",
    new DialogInterface.OnClickListener() {
     public void onClick(DialogInterface dialog, int which) {
      finish();
     }
  });
  
 // Setting Negative "NO" Button
  
  alertDialog.setNegativeButton("No",
    new DialogInterface.OnClickListener() {
     public void onClick(DialogInterface dialog, int which) {
      // Write your code here to invoke NO event
      dialog.cancel();
     }
    });
 // Showing Alert Message
  alertDialog.show();
}

}</code></pre>
</div>
</div>
</p>
