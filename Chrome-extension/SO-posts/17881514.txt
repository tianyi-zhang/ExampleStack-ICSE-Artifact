<p>When the <code>JList</code> renders itself it asks the <code>ListModel</code> for the elements it should display.
For each element it calls the <code>javax.swing.ListCellRenderer</code> to provide a render component. Then it paints the component. That's all. A render component is not bound to an element's state that it renders.</p>

<p>The javadoc of <code>ListCellRenderer</code> says:</p>

<blockquote>
  <p>Identifies components that can be used as "rubber stamps" 
      to paint the cells in a <code>JList</code>. </p>
</blockquote>

<p>So your second assumption is right.</p>

<p>A look at <code>javax.swing.plaf.BasicListUI</code> shows it:</p>

<pre><code>protected void paintCell(Graphics g, int row, Rectangle rowBounds,
        ListCellRenderer cellRenderer, ListModel dataModel,
        ListSelectionModel selModel, int leadIndex) {
    Object value = dataModel.getElementAt(row);
    boolean cellHasFocus = list.hasFocus() &amp;&amp; (row == leadIndex);
    boolean isSelected = selModel.isSelectedIndex(row);

    Component rendererComponent = cellRenderer
            .getListCellRendererComponent(list, value, row, isSelected,
                    cellHasFocus);

    int cx = rowBounds.x;
    int cy = rowBounds.y;
    int cw = rowBounds.width;
    int ch = rowBounds.height;

    if (isFileList) {
        // Shrink renderer to preferred size. This is mostly used on Windows
        // where selection is only shown around the file name, instead of
        // across the whole list cell.
        int w = Math
                .min(cw, rendererComponent.getPreferredSize().width + 4);
        if (!isLeftToRight) {
            cx += (cw - w);
        }
        cw = w;
    }

    rendererPane.paintComponent(g, rendererComponent, list, cx, cy, cw, ch,
            true);
}
</code></pre>
