<p>It is easy to write the recursive permutation, but it requires exporting the permutations from deeply nested loops.  (That is an interesting exercise.)  I needed a version that permuted strings for anagrams.  I wrote a version that implements <code>Iterable&lt;String&gt;</code> so it can be used in foreach loops.  It can easily be adapted to other types such as <code>int[]</code> or even a generic type <code>&lt;T[]&gt;</code> by changing the constructor and the type of attribute 'array'.</p>

<pre><code>import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * An implicit immutable collection of all permutations of a string with an 
 * iterator over the permutations.&lt;p&gt;  implements Iterable&amp;ltString&amp;gt
 * @see #StringPermutation(String)
 */
public class StringPermutation implements Iterable&lt;String&gt; {

    // could implement Collection&lt;String&gt; but it's immutable, so most methods are essentially vacuous

    protected final String string;

    /**
     * Creates an implicit Iterable collection of all permutations of a string
     * @param string  String to be permuted
     * @see Iterable
     * @see #iterator
     */
    public StringPermutation(String string) {
        this.string = string;
    }

    /**
     * Constructs and sequentially returns the permutation values 
     */
    @Override
    public Iterator&lt;String&gt; iterator() {

        return new Iterator&lt;String&gt;() {

            char[] array = string.toCharArray(); 
            int length = string.length();
            int[] index = (length == 0) ? null : new int[length];

            @Override
            public boolean hasNext() {
                return index != null;
            }

            @Override
            public String next() {

                if (index == null) throw new NoSuchElementException();

                for (int i = 1; i &lt; length; ++i) {
                    char swap = array[i];
                    System.arraycopy(array, 0, array, 1, i);
                    array[0] = swap;
                    for (int j = 1 ; j &lt; i; ++j) {
                        index[j] = 0;
                    }
                    if (++index[i] &lt;= i) {
                        return  new String(array);
                    }
                    index[i] = 0;                    
                }
                index = null;
                return new String(array);
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException(); 
            }
        };
    }
}
</code></pre>
