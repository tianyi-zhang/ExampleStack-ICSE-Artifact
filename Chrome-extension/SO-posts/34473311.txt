<p>You can make sure the image view isn't bigger than the bitmap by setting its layout_width and layout_height to wrap_content on your imageView tag in its xml file. </p>

<p>You can also use its scaleType to affect how the image should be manipulated to fit the imageView.</p>

<p>You can also just access the bitmap's width/height properties to get its dimensions.</p>

<p>EDIT::</p>

<p>You can convert your bitmap into a byte[] and resize it using the following helpers:</p>

<pre><code>/**
 * Resize an image to a specified width and height.
 * @param targetWidth The width to resize to.
 * @param targetHeight The height to resize to.
 * @return The resized image as a Bitmap.
 * */
public static Bitmap resizeImage(byte[] imageData, int targetWidth, int targetHeight) {
    BitmapFactory.Options options = new BitmapFactory.Options();

    options.inSampleSize = calculateInSampleSize(options, targetWidth, targetHeight);
    options.inJustDecodeBounds = false;

    Bitmap reducedBitmap = BitmapFactory.decodeByteArray(imageData, 0, imageData.length, options);
    return Bitmap.createScaledBitmap(reducedBitmap, targetWidth, targetHeight, false);
}

private static int calculateInSampleSize(BitmapFactory.Options options, int requestedWidth, int requestedHeight) {
    // Get the image's raw dimensions
    final int rawHeight = options.outHeight;
    final int rawWidth = options.outWidth;

    int inSampleSize = 1;
    if (rawHeight &gt; requestedHeight || rawWidth &gt; requestedWidth) {
        final int halfHeight = rawHeight / 2;
        final int halfWidth = rawWidth / 2;

        /*
        * Calculate the largest inSampleSize value that is a power of 2 and keeps both
        * height and width larger than their requested counterparts respectively.
        * */
        while ((halfHeight/inSampleSize) &gt; requestedHeight &amp;&amp; (halfWidth/inSampleSize) &gt; requestedWidth) {
            inSampleSize *= 2;
        }
    }
    return inSampleSize;
}
</code></pre>
