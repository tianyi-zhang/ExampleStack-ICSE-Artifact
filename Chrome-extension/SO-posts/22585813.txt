<p>In javascript, all bitwise operators will cast decimal numbers to 32 bit integers. It acts like <code>floor</code> for positive numbers and <code>ceil</code> for negative numbers. Things like <code>|0</code> or <code>~~</code> are often used as tricks to cast numbers to integer in JavaScript. </p>

<p>To explain the overflow you're seeing, we can look at the specifications for how Javascript converts numbers to int32: <a href="http://es5.github.io/#x9.5" rel="nofollow">http://es5.github.io/#x9.5</a></p>

<blockquote>
  <p>The abstract operation ToInt32 converts its argument to one of 2^32 integer values in the range ?2^31 through 2^31?1, inclusive. This abstract operation functions as follows:</p>
  
  <ol>
  <li>Let <em>number</em> be the result of calling ToNumber on the input argument.</li>
  <li>If <em>number</em> is NaN, +0, ?0, +?, or ??, return +0.</li>
  <li>Let <em>posInt</em> be sign(number) * floor(abs(number)).</li>
  <li>Let <em>int32bit</em> be <em>posInt</em> modulo 2^32; that is, a finite integer value k of Number type with positive sign and less than 2^32 in magnitude such that the mathematical difference of <em>posInt</em> and k is mathematically an integer multiple of 2^32.</li>
  <li>If <em>int32bit</em> is greater than or equal to 2^31, return <em>int32bit</em> ? 2^32, otherwise return <em>int32bit</em>.</li>
  </ol>
</blockquote>

<p>So, to reproduce this behavior, you would have to reproduce this logic.</p>

<p><strong>Edit:</strong> Here's how Mozilla's Rhino engine does it in Java: (as per the github link supplied by user3435580)</p>

<pre><code>public static int toInt32(double d) {
    int id = (int)d;
    if (id == d) {
        // This covers -0.0 as well
        return id;
    }

    if (d != d
        || d == Double.POSITIVE_INFINITY
        || d == Double.NEGATIVE_INFINITY)
    {
        return 0;
    }

    d = (d &gt;= 0) ? Math.floor(d) : Math.ceil(d);

    double two32 = 4294967296.0;
    d = Math.IEEEremainder(d, two32);
    // (double)(long)d == d should hold here

    long l = (long)d;
    // returning (int)d does not work as d can be outside int range
    // but the result must always be 32 lower bits of l
    return (int)l;
}
</code></pre>
