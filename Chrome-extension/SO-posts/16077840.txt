<blockquote>
  <p>Here is how to create the custom Adapter, connecting View.OnClickListener to a ListView with a button per row...</p>
</blockquote>

<p><strong>1. Create a layout for a typical row</strong></p>

<p>In this case, the row is composed of three view components: </p>

<ul>
<li>name (EditText)</li>
<li>value (EditText:inputType="numberDecimal") </li>
<li>delete (Button)</li>
</ul>

<p><strong>Xml</strong></p>

<p>pay_list_item.xml layout is as follows:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent" &gt;

    &lt;EditText
        android:id="@+id/pay_name"
        android:layout_width="0dp"
        android:layout_height="fill_parent"
        android:layout_weight="2"
        android:hint="Name" /&gt;

    &lt;EditText
        android:id="@+id/pay_value"
        android:layout_width="0dp"
        android:layout_height="fill_parent"
        android:layout_weight="1"
        android:inputType="numberDecimal"
        android:text="0.0" /&gt;

    &lt;Button
        android:id="@+id/pay_removePay"
        android:layout_width="100dp"
        android:layout_height="fill_parent"
        android:text="Remove Pay"
        android:onClick="removePayOnClickHandler" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p><em>Note: the button has onClick handler defined in xml layout file, because we want to refer its action to a specific list item.</em></p>

<p>Doing this means that the handler will be implemented in Activity file and each button will know which list item it belongs to. </p>

<p><strong>2. Create list item adapter</strong></p>

<p>This is the java class that is the controller for pay_list_item.xml. </p>

<p>It keeps references for all of its views, and it also puts these references in tags, extending the ArrayAdapter interface. </p>

<p>The Adapter:</p>

<pre><code>public class PayListAdapter extends ArrayAdapter&lt;Payment&gt; {

    private List&lt;Payment&gt; items;
    private int layoutResourceId;
    private Context context;

    public PayListAdapter(Context context, int layoutResourceId, List&lt;Payment&gt; items) {
        super(context, layoutResourceId, items);
        this.layoutResourceId = layoutResourceId;
        this.context = context;
        this.items = items;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View row = convertView;
        PaymentHolder holder = null;

        LayoutInflater inflater = ((Activity) context).getLayoutInflater();
        row = inflater.inflate(layoutResourceId, parent, false);

        holder = new PaymentHolder();
        holder.Payment = items.get(position);
        holder.removePaymentButton = (ImageButton)row.findViewById(R.id.pay_removePay);
        holder.removePaymentButton.setTag(holder.Payment);

        holder.name = (TextView)row.findViewById(R.id.pay_name);
        holder.value = (TextView)row.findViewById(R.id.pay_value);

        row.setTag(holder);

        setupItem(holder);
        return row;
    }

    private void setupItem(PaymentHolder holder) {
        holder.name.setText(holder.Payment.getName());
        holder.value.setText(String.valueOf(holder.Payment.getValue()));
    }

    public static class PaymentHolder {
        Payment Payment;
        TextView name;
        TextView value;
        ImageButton removePaymentButton;
    }
}
</code></pre>

<p>Here we list the Payment class items. </p>

<p>There are three most important elements here:</p>

<ul>
<li>PayListAdapter constructor: sets some private fields and calls superclass constructor. It also gets the List of Payment objects. Its implementation is obligatory.</li>
<li>PaymentHolder: static class that holds references to all views that I have to set in this list item. I also keep the Payment object that references to this particular item in list. I set it as tag for ImageButton, that will help me to find the Payment item on list, that user wanted to remove</li>
<li>Overriden getView method: called by superclass. Its goal is to return the single List row. We create its fields and setup their values and store them in static holder. Holder then is put in row’s tag element. Note that there is a performance issue, as the row is being recreated each time it is displayed. I used to add some flag in holder like isCreated, and set it to true after row was already created. then you can add if statement and read tag’s holder instead of creating it from scratch.</li>
</ul>

<p>Payment.java is quite simple as for now and it looks a bit like BasicNameValuePair:</p>

<pre><code>public class Payment implements Serializable {
    private String name = "";
    private double value = 0;

    public Payment(String name, double value) {
        this.setName(name);
        this.setValue(value);
    }
...
}
</code></pre>

<p>There are additional gets and sets for each private field not shown.</p>

<p><strong>3. Add ListView to the activity layout xml file</strong></p>

<p>In its simpliest form, it will be enough to add this view to activity layout:</p>

<pre><code>&lt;ListView 
    android:id="@+id/EnterPays_PaysList"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"&gt;
&lt;/ListView&gt;
</code></pre>

<p><strong>4. Set up adapter to this list view in Activity Java code</strong></p>

<p>In order to display items in ListView you need to set up its adapter and map it to some other ArrayList of Payment objects (as I am extending an Array adapter here). Here is code that is responsible for binding adapter to editPersonData.getPayments() ArrayList:</p>

<pre><code>PayListAdapter adapter = new PayListAdapter(AddNewPerson.this, R.layout.pay_list_item, editPersonData.getPayments());
ListView PaysListView = (ListView)findViewById(R.id.EnterPays_PaysList);
PaysListView.setAdapter(adapter);
</code></pre>

<p><strong>5. Adding / removing items to ListView (and its adapter)</strong></p>

<p>Adapter is handled just like any other ArrayList, so adding new element to it is as simple as:</p>

<pre><code>Payment testPayment = new Payment("Test", 13);
adapter.add(testPayment);
adapter.remove(testPayment);
</code></pre>

<p><strong>6. Handle Remove Payment button click event</strong></p>

<p>In an activity’s code, where ListView is displayed, add public method that will handle remove button click action. The method name has to be exactly the same as it was in pay_list_item.xml:</p>

<pre><code>android:onClick="removePayOnClickHandler"
The method body is as follows:

public void removePayOnClickHandler(View v) {
    Payment itemToRemove = (Payment)v.getTag();
    adapter.remove(itemToRemove);
}
</code></pre>

<p>The Payment object was stored in ImageButton’s Tag element. Now it is enough to read it from Tag, and remove this item from the adapter.</p>

<p><strong>7. Incorporate remove confirmation dialog window</strong></p>

<p>Probably you need also make sure that user intentionally pressed the remove button by asking him additional question in confirmation dialog.</p>

<p><strong>Dialogue</strong></p>

<p>a) Create dialog’s id constant</p>

<p>This is simply dialog’s ID. it should be unique among any other dialog window that is handled by current activity. I set it like that:</p>

<pre><code>protected static final int DIALOG_REMOVE_CALC = 1;
protected static final int DIALOG_REMOVE_PERSON = 2;
</code></pre>

<p>b) Build dialog</p>

<p>I use this method to build dialog window:</p>

<pre><code>private Dialog createDialogRemoveConfirm(final int dialogRemove) {
    return new AlertDialog.Builder(getApplicationContext())
    .setIcon(R.drawable.trashbin_icon)
    .setTitle(R.string.calculation_dialog_remove_text)
    .setPositiveButton(R.string.calculation_dialog_button_ok, new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int whichButton) {
            handleRemoveConfirm(dialogRemove);
        }
    })
    .setNegativeButton(R.string.calculation_dialog_button_cancel, null)
    .create();
}
</code></pre>

<p>AlertDialog builder pattern is utilized here. I do not handle NegativeButton click action – by default the dialog is just being hidden. If dialog’s confirm button is clicked, my handleRemoveConfirm callback is called and action is performed based on dialog’s ID:</p>

<pre><code>protected void handleRemoveConfirm(int dialogType) {
    if(dialogType == DIALOG_REMOVE_PERSON){
        calc.removePerson();
    }else if(dialogType == DIALOG_REMOVE_CALC){
        removeCalc();
    }
}
</code></pre>

<p>c) Show Dialog</p>

<p>I show dialog after my remove button click. The showDialog(int) is Android’s Activity’s method:</p>

<pre><code>OnClickListener removeCalcButtonClickListener = new OnClickListener() {
    public void onClick(View v) {
        showDialog(DIALOG_REMOVE_CALC);
    }
};
</code></pre>

<p>the showDialog(int) method calls onCreateDialog (also defined in Activity’s class). Override it and tell your app what to do if the showDialog was requested:</p>

<pre><code>@Override
protected Dialog onCreateDialog(int id) {
    switch (id) {
    case DIALOG_REMOVE_CALC:
        return createDialogRemoveConfirm(DIALOG_REMOVE_CALC);
    case DIALOG_REMOVE_PERSON:
        return createDialogRemoveConfirm(DIALOG_REMOVE_PERSON);
    }
}
</code></pre>
