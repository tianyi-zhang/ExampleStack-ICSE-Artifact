<p>I accomplish this by overriding the create method in my crud controllers like so. Calling a custom validateUniqueFields method just before the validaiton.hasErrors() method. I can then return valid errors for my unique fields.</p>

<pre><code>public static void create() throws Exception 
{
    ObjectType type = ObjectType.get(getControllerClass());
    notFoundIfNull(type);
    Constructor&lt;?&gt; constructor = type.entityClass.getDeclaredConstructor();
    constructor.setAccessible(true);
    Model object = (Model) constructor.newInstance();
    Binder.bindBean(params.getRootParamNode(), "object", object);
    validation.valid(object);
    validateUniqueFields(object);
    if (validation.hasErrors()) {
        renderArgs.put("error", play.i18n.Messages.get("crud.hasErrors"));
        try {
            render(request.controller.replace(".", "/") + "/blank.html", type, object);
        } catch (TemplateNotFoundException e) {
            render("CRUD/blank.html", type, object);
        }
    }
    object._save();
    flash.success(play.i18n.Messages.get("crud.created", type.modelName));
    if (params.get("_save") != null) {
        redirect(request.controller + ".list");
    }
    if (params.get("_saveAndAddAnother") != null) {
        redirect(request.controller + ".blank");
    }
    redirect(request.controller + ".show", object._key());
}

private static void validateUniqueFields(Model object) {
    String value = ((CastModelHere)object).identifier;
    String ident = "identifier";
    if( TUCharacterTypeIdentifier.find(ident, value).first() != null )
    {
        validation.addError("object." + ident, ident + " already taken");
    }
}
</code></pre>
