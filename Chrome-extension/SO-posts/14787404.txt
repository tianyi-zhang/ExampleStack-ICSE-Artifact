<p>You may consider using Executor framework from java.util.concurrent api. For example you can create your computation task as Callable and then submit that task to a ThreadPoolExecutor. Sample code from Java Concurrency in Practice:-</p>

<pre><code>public class Renderer {
    private final ExecutorService executor;
    Renderer(ExecutorService executor) { this.executor = executor; }

    void renderPage(CharSequence source) {
        final List&lt;ImageInfo&gt; info = scanForImageInfo(source);
        CompletionService&lt;ImageData&gt; completionService =
            new ExecutorCompletionService&lt;ImageData&gt;(executor);
    for (final ImageInfo imageInfo : info)
        completionService.submit(new Callable&lt;ImageData&gt;() {
            public ImageData call() {
                return imageInfo.downloadImage();
                }
               });
renderText(source);
try {
    for (int t = 0, n = info.size(); t &lt; n; t++) {
    Future&lt;ImageData&gt; f = completionService.take();
    ImageData imageData = f.get();
    renderImage(imageData);
    }
} catch (InterruptedException e) {
    Thread.currentThread().interrupt();
} catch (ExecutionException e) {
    throw launderThrowable(e.getCause());
}
  }
}
</code></pre>
