<p>You don't need to write a custom ListView. You should use a personalized layout and custom adapter.</p>

<p><strong>First,</strong> write a layout to define how each row should look. Here's a basic example:</p>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;

    &lt;TextView
        android:id="@+id/title"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" 
        android:padding="5dp" /&gt;

    &lt;TextView
        android:id="@+id/description"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" 
        android:padding="5dp" /&gt;

    &lt;TextView
        android:id="@+id/link"
        android:layout_width="match_parent"
        android:layout_height="wrap_content" 
        android:padding="5dp" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>(Save it as <code>list_item.xml</code> in your <code>res/layout</code> folder.)<br>
<strong>Next,</strong> I recommend that you create a custom adapter to efficiently display your layout:</p>

<pre><code>public class ItemAdapter extends BaseAdapter {
    private LayoutInflater inflater;
    private List&lt;Item&gt; objects;

    public ItemAdapter(Context context, List&lt;Item&gt; objects) {
        this.objects = objects;
        inflater = (LayoutInflater) context.getSystemService(LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if(convertView == null) {
            convertView = inflater.inflate(R.layout.list_item, parent, false);
            holder = new ViewHolder();
            holder.title = (TextView) convertView.findViewById(R.id.title);
            // Do the same for description and link
            convertView.setTag(holder);
        }
        else
            holder = (ViewHolder) convertView.getTag();

        Item item = objects.get(position);
        holder.title.setText(item.getTitle());
        // Same for description and link
        return convertView;
    }

    // Override the other required methods for BaseAdapter

    public class ViewHolder {
        TextView title;
        TextView description;
        TextView link;
    }
}
</code></pre>

<p>To learn more about custom adapter's, ViewHolders, and efficiency please watch Android's Romain Guy <a href="http://www.google.com/events/io/2009/sessions/TurboChargeUiAndroidFast.html" rel="nofollow">talk on this subject</a>.</p>

<p>Hope that helps!</p>
