<p>I'd use Java's generic <code>Future</code>s and a Spring's <code>@Async</code> methods in a  <code>@Service</code>.</p>

<p>In short, you call the services sequentially and get all results as <code>Future</code>s, and then you simply check whether all the futures have finished proccessing. You can also do some work with partial data if there is such possibility.</p>

<p>Here's <a href="https://spring.io/guides/gs/async-method/" rel="nofollow">a simple example</a> on how to do it. A sample service from the link:</p>

<pre><code>@Service
public class GitHubLookupService {

    RestTemplate restTemplate = new RestTemplate();

    @Async
    public Future&lt;User&gt; findUser(String user) throws InterruptedException {
        System.out.println("Looking up " + user);
        User results = restTemplate.getForObject("https://api.github.com/users/" + user, User.class);
        // Artificial delay of 1s for demonstration purposes
        Thread.sleep(1000L);
        return new AsyncResult&lt;User&gt;(results);
    }

}
</code></pre>

<p>And a method using it:</p>

<pre><code>@Override
public void run(String... args) throws Exception {
    // Start the clock
    long start = System.currentTimeMillis();

    // Kick of multiple, asynchronous lookups
    Future&lt;User&gt; page1 = gitHubLookupService.findUser("PivotalSoftware");
    Future&lt;User&gt; page2 = gitHubLookupService.findUser("CloudFoundry");
    Future&lt;User&gt; page3 = gitHubLookupService.findUser("Spring-Projects");

    // Wait until they are all done
    while (!(page1.isDone() &amp;&amp; page2.isDone() &amp;&amp; page3.isDone())) {
        Thread.sleep(10); //10-millisecond pause between each check
    }

    // Print results, including elapsed time
    System.out.println("Elapsed time: " + (System.currentTimeMillis() - start));
    System.out.println(page1.get());
    System.out.println(page2.get());
    System.out.println(page3.get());
}
</code></pre>
