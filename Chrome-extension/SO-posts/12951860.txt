<p>Following are the pointers which will eventually guide you to your answer.</p>

<ol>
<li><p>Add a <code>textwatcher</code> to the editfield in which you are going to write the search words..</p>

<pre><code> txtSearch.addTextChangedListener(textWatcher);
</code></pre></li>
<li><p>In <code>afterTextChanged</code> method of textwatcher you will need a filter with the characters typed in searchfield as parameter, to filter out the search result.    </p>

<pre><code>private TextWatcher textWatcher = new TextWatcher() {

@Override
public void onTextChanged(CharSequence s, int start, int before,
        int count) {
    // TODO Auto-generated method stub
}

@Override
public void beforeTextChanged(CharSequence s, int start, int count,
        int after) {
    // TODO Auto-generated method stub
}

@Override
public void afterTextChanged(Editable s) {

    adapter.getFilter().filter(s);
    adapter.notifyDataSetChanged(); 
}
};
</code></pre></li>
<li><p>Following is a class I used for filtering purpose.</p>

<pre><code>/*
 * Class that implements filtering functionality.
 */
public class MyFilter extends Filter {
    public MyFilter(ArrayList&lt;CustomerListRow&gt; data) {
    }

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {

        constraint = constraint.toString().toLowerCase();
        FilterResults result = new FilterResults();

        if (constraint != null &amp;&amp; constraint.toString().length() &gt; 0) {
            ArrayList&lt;CustomerListRow&gt; filt = new ArrayList&lt;CustomerListRow&gt;();

            for (int i = 0; i &lt; arrayListCopy.size(); i++) {
                CustomerListRow each = arrayListCopy.get(i);
                if (each.getName().toLowerCase().contains(constraint)) {
                    filt.add(each);
                }
            }
            result.count = filt.size();
            result.values = filt;
        } else {
            synchronized (this) {
                result.count = arrayListCopy.size();
                result.values = arrayListCopy;
            }
        }

        return result;
    }

    @Override
    protected void publishResults(CharSequence constraint,
            FilterResults results) {
        ArrayList&lt;CustomerListRow&gt; filtered = (ArrayList&lt;CustomerListRow&gt;) results.values;
        clear();

        int size = filtered.size();
        for (int i = 0; i &lt; size; i++) {
            add(filtered.get(i));
        }
        notifyDataSetInvalidated();
    }
}
</code></pre></li>
<li><p>You will need to create an adapter to which you will pass your complete list, which will eventually passed to the filter. 
Following is constructor of my adapter class.   </p>

<pre><code>        public MyAdapter(Context context, int textViewResourceId,
            List&lt;CustomerListRow&gt; objects) {
        super(context, textViewResourceId, objects);
        this.context = context;
        inflator = (LayoutInflater) context
                .getSystemService(LAYOUT_INFLATER_SERVICE);
        list = (ArrayList&lt;CustomerListRow&gt;) objects;
        filter = new MyFilter(list);
        arrayListCopy.addAll(list);
    } 
</code></pre></li>
</ol>
