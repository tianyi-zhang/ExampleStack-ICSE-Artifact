<p>finally solved my problem.
Adapter class:</p>

<pre><code> public class Expandable_list_Adapter extends BaseExpandableListAdapter implements OnCheckedChangeListener {

    private Context context;
    private ArrayList&lt;String&gt; groupNames;
    private ArrayList&lt;ArrayList&lt;String&gt;&gt; child;
    private LayoutInflater inflater;

    public Expandable_list_Adapter(Context context, 
                        ArrayList&lt;String&gt; groupNames,
                        ArrayList&lt;ArrayList&lt;String&gt;&gt; child ) { 
        AndroidClientEntity.objHasmap.clear();
        this.context = context;
        this.groupNames= groupNames;
        this.child = child;
        inflater = LayoutInflater.from( context );
    }

    public Object getChild(int groupPosition, int childPosition) {
        return child.get( groupPosition ).get( childPosition );
    }

    public long getChildId(int groupPosition, int childPosition) {
        return (long)( groupPosition*1024+childPosition );  // Max 1024 children per group
    }

    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
        View v = null;
        if( convertView != null )
            v = convertView;
        else
             v = inflater.inflate(R.layout.child_row, parent, false); 
       String c = (String)getChild( groupPosition, childPosition );
       Log.e("hiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii",c);

        TextView label = (TextView)v.findViewById( R.id.childname );
        if( label != null )
            label.setText( c );

        CheckBox cb = (CheckBox)v.findViewById( R.id.check1);
        //cb.setId(childPosition);
        cb.setTag(groupPosition+"child"+childPosition);
        cb.setChecked(false);
        if(AndroidClientEntity.objHasmap.get(groupPosition+"child"+childPosition)!=null)
        {
        cb.setChecked(AndroidClientEntity.objHasmap.get(groupPosition+"child"+childPosition));
        }
    //    cb.setOnCheckedChangeListener(this);
        return v;
    }

    public int getChildrenCount(int groupPosition) {
        return child.get( groupPosition ).size();
    }

    public Object getGroup(int groupPosition) {

        return groupNames.get( groupPosition );        
    }

    public int getGroupCount(){
         return groupNames.size();
    }
    public long getGroupId(int groupPosition) {
        return (long)( groupPosition*1024 );  // To be consistent with getChildId
    } 

    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
        View v = null;
        if( convertView != null )
            v = convertView;
        else
            v = inflater.inflate(R.layout.group_row, parent, false); 
        String gt = (String)getGroup( groupPosition );
        TextView colorGroup = (TextView)v.findViewById( R.id.childname );
        if( gt != null )
            colorGroup.setText( gt );
        CheckBox cb = (CheckBox)v.findViewById( R.id.check2 );
        cb.setTag(groupPosition+"cbgroup");
        //Object_SecurityActivityobjHasmap.put(groupPosition+"cbgroup", false);
        cb.setChecked(false);
        return v;
    }

    public boolean hasStableIds() {
        return true;
    }

    public boolean isChildSelectable(int groupPosition, int childPosition) {
        Log.e("is group checked","group "+groupPosition);
        Log.e("selectable","has" +childPosition);
        return true;
    } 

    public void onGroupCollapsed (int groupPosition) {}
    public void onGroupExpanded(int groupPosition) {}

    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
        // TODO Auto-generated method stub



    }
public void isChecked(){

}

}
</code></pre>

<p>And Activity class:</p>

<pre><code>public class Object_SecurityActivity extends ExpandableListActivity implements OnClickListener{

@Override
public boolean onChildClick(ExpandableListView parent, View v,
        int groupPosition, int childPosition, long id) {
    // TODO Auto-generated method stub
    CheckBox cb=(CheckBox) v.findViewWithTag(groupPosition+"child"+childPosition);
//Boolean state=objHasmap.get(groupPosition+"child"+childPosition);
    cb.toggle();
    if(cb.isChecked())
    {
        AndroidClientEntity.objHasmap.put(groupPosition+"child"+childPosition,true );

    }else
    {AndroidClientEntity.objHasmap.remove(groupPosition+"child"+childPosition);

    }

    //add value in set
//cb.setEnabled(state);
    return super.onChildClick(parent, v, groupPosition, childPosition, id);
}



private AndroidClientEntity obj_android_client;
private static final String LOG_TAG = "ElistCBox2";
private String username, password, clientname;

@Override
public void onCreate(Bundle icicle) {
    super.onCreate(icicle);
    //setContentView(R.layout.main);
    Intent security_intent = getIntent();
    String id = security_intent.getStringExtra("id");

    obj_android_client = (AndroidClientEntity) getApplicationContext();
    username = obj_android_client.getUsername();
    password = obj_android_client.getPassword();
    clientname = obj_android_client.getClientName();
    new Securityasync().execute(username, password, clientname, id);

}

public boolean onCreateOptionsMenu(Menu menu) {
    new MenuInflater(getApplication()).inflate(R.menu.context_menu_security,
            menu);
    return (super.onPrepareOptionsMenu(menu));
}
public boolean onOptionsItemSelected(MenuItem item) {
    // startDownload();
    if (item.getItemId() == R.id.setsecurity) {
        //code here 
        Log.e("hiiiiiiiiiiiiiiii","scejkkl yu menu pressed");
         }
    return (super.onOptionsItemSelected(item));
}
class Securityasync extends AsyncTask&lt;String, String, String&gt; {
    String sesurity_response = null;
    ProgressDialog dialog;
    private Expandable_list_Adapter expListAdapter;

    @Override
    protected String doInBackground(String... params) {
        if ((isOnline(Object_SecurityActivity.this).equals("true"))) {
            Security_service security_obj = new Security_service();
            try {
                sesurity_response = security_obj.getUsersRoles(params[0],
                        params[1], params[2], params[3]);
            } catch (IllegalStateException e) {
                e.printStackTrace();
            } catch (JSONException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    @Override
    protected void onPostExecute(String result) {
        if (isOnline(Object_SecurityActivity.this).equals("true")) {

            setContentView(R.layout.layout_expandable_listview);
            ArrayList&lt;String&gt; groupNames = new ArrayList&lt;String&gt;();
            ArrayList&lt;String&gt; sub = new ArrayList&lt;String&gt;();
            ArrayList&lt;ArrayList&lt;String&gt;&gt; child = new ArrayList&lt;ArrayList&lt;String&gt;&gt;();
            ArrayList&lt;String&gt; sub_id = new ArrayList&lt;String&gt;();
            ArrayList&lt;String&gt; objrid = new ArrayList&lt;String&gt;();
            try {
                JSONArray json = new JSONArray(sesurity_response);
                // JSONArray json_child=new JSONArray(sesurity_response);
                for (int i = 0; i &lt; json.length(); i++) {
                    JSONObject json_obj = json.getJSONObject(i);
                    if (json_obj.getString("PRid").equalsIgnoreCase("0")) {

                        String ObjectRid = json_obj.getString("ObjectRid");
                        int m=0;
                        objrid.add(m,ObjectRid);
                        m++;
                        groupNames.add(json_obj.getString("Name"));
                        for (int j = 0; j &lt; json.length(); j++) {
                            JSONObject json_child = json.getJSONObject(j);
                            if (ObjectRid.equalsIgnoreCase(json_child
                                    .getString("PRid"))) {
                                int n=0;
                                sub_id.add(n,json_child.getString("ObjectRid"));
                                sub.add(json_child.getString("Name"));
                            }

                        }
                        child.add(sub);

                    }

                }
                expListAdapter = new Expandable_list_Adapter(getBaseContext(),
                        groupNames, child);
                setListAdapter(expListAdapter);
                Log.e("size in error", "son " + json.length());
            } catch (JSONException e) {
                Log.e("", "", e);
                Toast.makeText(getBaseContext(), "parsing error",
                        Toast.LENGTH_LONG).show();
            }
            Log.e("sizeof list", ""+sub_id.size());
            Iterator itr=objrid.iterator();


            while(itr.hasNext()){
                Log.e("id","value "+itr.next());
            }

        }
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();

    }
}
public void onClick(View v) {
    // TODO Auto-generated method stub

}
</code></pre>

<p>}</p>

<p>Thanks to pallavi,amit rai and Photon.</p>
