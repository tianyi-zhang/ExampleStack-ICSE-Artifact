<p>Implement your Map Values to Comparable. </p>

<p>And then do the following</p>

<pre><code>// Populate the Map
List&lt;String&gt; mapValues = new ArrayList&lt;String&gt;(map.values());
Collections.sort(mapValues);
</code></pre>

<p>If your values are String you dont need to implement Comparable if you are satisfied with Default String Sorting Mechanism </p>

<pre><code>HashMap&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();
        map.put(1,"xyz");
        map.put(2,"abcd");
        List&lt;String&gt; mapValues = new ArrayList&lt;String&gt;(map.values());
        Collections.sort(mapValues);
        System.out.println(mapValues);
</code></pre>

<p><strong>UPDATE</strong></p>

<p>I initially thought, OP just wanted to sort by Values and return as List. Based on comments, OP wants to sort by Values and return the Keys as List .</p>

<pre><code>public static void main(String args[]) {
        //  readTempFile();
        HashMap&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();
        map.put("C",2);
        map.put("A",3);
        map.put("B",1);
        System.out.println(sortByValues(map));

    }

    public static &lt;K, V extends Comparable&lt;V&gt;&gt; List&lt;K&gt; sortByValues(final Map&lt;K, V&gt; map) {
    Comparator&lt;K&gt; valueComparator =  new Comparator&lt;K&gt;() {
        public int compare(K k1, K k2) {
            int compare = map.get(k1).compareTo(map.get(k2));
            if (compare == 0) {
                return 1;
            } else {
                return compare;
            }
        }
    };
    Map&lt;K, V&gt; sortedByValues = new TreeMap&lt;K, V&gt;(valueComparator);
    sortedByValues.putAll(map);
    return new ArrayList&lt;K&gt;(sortedByValues.keySet());
}
</code></pre>

<p>And the result </p>

<pre><code> [B, C, A]
</code></pre>

<p><strong><a href="http://stackoverflow.com/a/2112659/2182351">Credit Goes tooooo</a></strong></p>
