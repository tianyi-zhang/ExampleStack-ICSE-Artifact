<p>I'm going to assume that there is a reason why you are doing this the long way.</p>

<p>To start with, removing the leading <code>0</code> of your <code>int</code> values when checking the month, they convert the value to octal, which you don't need...</p>

<pre><code>if (monthInt == 1) {
    month = January;
} else if (monthInt == 2) {
    month = February;
} else if (monthInt == 3) {
    month = March;
} else if (monthInt == 4) {
    month = April;
} else if (monthInt == 5) {
    month = May;
} else if (monthInt == 6) {
    month = June;
} else if (monthInt == 7) {
    month = July;
} else if (monthInt == 8) {
    month = August;
} else if (monthInt == 9) {
    month = September;
} else if (monthInt == 10) {
    month = October;
} else if (monthInt == 11) {
    month = November;
} else if (monthInt == 12) {
    month = December;
} else {
    System.out.println("Invalid Month");
}
</code></pre>

<p>This...</p>

<pre><code>String months = input.substring(0, 1);
</code></pre>

<p>Will get the first character of the input, but you've asked the user for <code>mm/dd/yyyy</code>, which suggests that you want a two digit value for the month and day...besides, what happens if they type in <code>12</code>?</p>

<p>Instead you could use <code>String[] parts = input.split("/");</code> to split the <code>input</code> <code>String</code> on the <code>/</code> delimiter, this (if the input is valid) will give you three elements, one each part of the date value.</p>

<p>Then you can use...</p>

<pre><code>int monthInt = Integer.parseInt(parts[0]);
//...
int daysInt = Integer.parseInt(parts[1]);
//...
int yearInt = Integer.parseInt(parts[2]);
</code></pre>

<p>To convert the individual elements.</p>

<p>This raises the question that you should probably validate the input value in some meaningful way BEFORE you try and split it.</p>

<p>The month values are all <code>null</code></p>

<pre><code>String January, February, March, April, May, June, July,
       August, September, October, November, December, month;

January = February = March = April = May = June = July
        = August = September = October = November = December = month = null;
</code></pre>

<p>Which basically means you output will always start with <code>null</code>.  You actually need to assign these some meaningful value.</p>

<p>I'll also parrot what every body else has said, unless you have a really good reason to do otherwise, I'd be using <code>Calendar</code> and some kind of <code>DateFormat</code> to do all this...</p>

<p><strong>Updated with a (slightly over the top) example</strong></p>

<p>This basically takes your idea and use <code>SimpleDateFormat</code> and <code>Calendar</code> to perform the actual checking of the input, for example...</p>

<pre><code>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;

public class Dates {

    public static void main(String[] args) {
        Scanner kb = new Scanner(System.in);
        System.out.println("Date (mm/dd/yyyy):");
        String input = kb.nextLine();
        // This is a little excessive, but does a pre-check of the basic
        // format of the date.  It checks for a strict adhereance to
        // the nn/nn/nnnn format.  This might not be required as 
        // SimpleDateFormat can actually be configured to be lient in it's
        // parsing of values
        if (input.matches("[0-9]{2}/[0-9]{2}/[0-9]{4}")) {
            try {
                // Parse the String input to a Date object
                SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                Date date = sdf.parse(input);
                // Create a Calendar, going to use this to compare the resulting
                // Date value, as the parser will auto correct the input
                Calendar cal = Calendar.getInstance();
                cal.setTime(date);

                // Split the basic input along the / delimeter
                String parts[] = input.split("/");
                boolean valid = true;
                // Check each part to make sure it matches the components of the date
                if (Integer.parseInt(parts[0]) != cal.get(Calendar.MONTH) + 1) {
                    valid = false;
                    System.out.println(parts[0] + " is not a valid month");
                } 
                if (Integer.parseInt(parts[1]) != cal.get(Calendar.DATE)) {
                    valid = false;
                    System.out.println(parts[1] + " is not a valid day of the month");
                } 
                if (Integer.parseInt(parts[2]) != cal.get(Calendar.YEAR)) {
                    valid = false;
                    System.out.println(parts[2] + " is not a valid year");
                }

                if (valid) {
                    // Print the result...
                    System.out.println(new SimpleDateFormat("MMMM dd, yyyy").format(date));
                }
            } catch (ParseException ex) {
                System.out.println("Unable to parse " + input + "; invalid format");
            }
        } else {
            System.out.println("Invalid format");
        }
    }

}
</code></pre>
