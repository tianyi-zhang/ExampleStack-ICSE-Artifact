<p>I had the same problem. The answer I came up with is to send an HTTP Post request from within your app that replicates what happens on the registration form.</p>

<p>You will need to create a new layout that captures the username and password (I copied the file login_menu.xml, renamed it register_menu.xml and changed some of the widget ids)</p>

<p>In the original Login.java file I changed the onclick action for the Register button to redirect to a new Activity that I called Register.java</p>

<p>In Register.java I use the register_menu.xml as the layout file and when a person clicks the register button the following code is run (It gets run from within an AsyncTask):</p>

<pre><code>        String registration_url = (PropertyLoader.getInstance().useSSL() ? "https://" : "http://") + PropertyLoader.getInstance().getTokenVendingMachineURL() + "/registeruser";

        URL url = new URL(registration_url);

        Map&lt;String,Object&gt; params = new LinkedHashMap&lt;String,Object&gt;();
        params.put("username", username);
        params.put("password", password);

        StringBuilder postData = new StringBuilder();
        for (Map.Entry&lt;String,Object&gt; param : params.entrySet()) {
            if (postData.length() != 0) postData.append('&amp;');
            postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
            postData.append('=');
            postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
        }
        byte[] postDataBytes = postData.toString().getBytes("UTF-8");


        HttpURLConnection conn = (HttpURLConnection)url.openConnection();
        conn.setReadTimeout(10000 /* milliseconds */);
        conn.setConnectTimeout(15000 /* milliseconds */);
        conn.setDoOutput(true);
        conn.setDoInput(true);
        conn.setInstanceFollowRedirects(false);

        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        conn.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
        conn.setUseCaches (false);

        conn.getOutputStream().write(postDataBytes);
        conn.getOutputStream().flush();

        response = conn.getResponseCode();
        Log.d(DEBUG_TAG, "The response is: " + response);
        return response;
</code></pre>

<p>I picked up some of the code from other StackOverflow posts about how to generate an HTTP Post   using Java (<a href="http://stackoverflow.com/questions/4205980/java-sending-http-parameters-via-post-method-easily">Java - sending HTTP parameters via POST method easily</a>) and from the Android Dev site about network connection best practices (<a href="http://developer.android.com/training/basics/network-ops/connecting.html" rel="nofollow">http://developer.android.com/training/basics/network-ops/connecting.html</a>)</p>

<p>This should help you get started on your own implementation.</p>
