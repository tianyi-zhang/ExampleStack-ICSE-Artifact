<p>The only way to have any sorted structure with less than O(n) time to add/indexOf/remove/get  element is using a tree. In that case operations generally have O(log2n) and traverse is like O(1).</p>

<p>O(n) is just a linked list.</p>

<hr>

<p>Edit: inserting into linked list w/ binary search. For inserts operations, not using binary structure, and not small sizes, that should be optimal.</p>

<p>@Peter:
There is the algo w/ O(log2n) compares (which are slow) to insert and O(n) moves.
If you need to override LinkedList, so be it. But that's as neat as it can get. I keep the algorithm as clean as possible to be easily understandable, it can be optimized a little.</p>

<pre><code>package t1;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Random;

public class SortedList {


    private static &lt;T&gt; int binarySearch(ListIterator&lt;? extends Comparable&lt;? super T&gt;&gt; i, T key){
        int low = 0;
        int high= i.previousIndex();
        while (low &lt;= high) {
            int mid = (low + high) &gt;&gt;&gt; 1;
            Comparable&lt;? super T&gt; midVal = get(i, mid);
            int cmp = midVal.compareTo(key);

            if (cmp &lt; 0)
                low = mid + 1;
            else if (cmp &gt; 0)
                high = mid - 1;
            else
                return mid;
        }
        return -(low + 1);  // key not found
    }

    private static &lt;T&gt; T get(ListIterator&lt;? extends T&gt; i, int index) {
        T obj = null;
        int pos = i.nextIndex();
        if (pos &lt;= index) {
            do {
                obj = i.next();
            } while (pos++ &lt; index);
        } else {
            do {
                obj = i.previous();
            } while (--pos &gt; index);
        }
        return obj;
    }
    private static void move(ListIterator&lt;?&gt; i, int index) {        
        int pos = i.nextIndex();
        if (pos==index)
            return;

        if (pos &lt; index) {
            do {
                i.next();
            } while (++pos &lt; index);
        } 
        else {
            do {
                i.previous();
            } while (--pos &gt; index);
        }
    }
    @SuppressWarnings("unchecked")
    static  &lt;T&gt; int insert(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key){
        ListIterator&lt;? extends Comparable&lt;? super T&gt;&gt; i= list.listIterator(list.size());
        int idx = binarySearch(i, key); 
        if (idx&lt;0){
            idx=~idx;
        }
        move(i, idx);
        ((ListIterator&lt;T&gt;)i).add(key);
        return i.nextIndex()-1;
    }

    public static void main(String[] args) {
        LinkedList&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;();
        LinkedList&lt;Integer&gt; unsorted = new LinkedList&lt;Integer&gt;();
        Random r =new Random(11);
        for (int i=0;i&lt;33;i++){
            Integer n = r.nextInt(17);
            insert(list, n);
            unsorted.add(n);            
        }

        System.out.println("  sorted: "+list);
        System.out.println("unsorted: "+unsorted);
    }
</code></pre>
