<p>If you want to print the content of a web page, you need to work with the <a href="http://www.faqs.org/rfcs/rfc2616.html">HTTP</a> protocol. You do not have to implement it yourself, the best way is to use existing implementations such as the java API <a href="http://java.sun.com/javase/6/docs/api/java/net/HttpURLConnection.html">HttpURLConnection</a> or Apache's <a href="http://hc.apache.org/httpclient-3.x/">HttpClient</a></p>

<p>Here is an example of how to do it with HttpURLConnection:</p>

<pre><code>URL url = new URL("http","www.google.com");
HttpURLConnection urlc = (HttpURLConnection)url.openConnection();
urlc.setAllowUserInteraction( false );
urlc.setDoInput( true );
urlc.setDoOutput( false );
urlc.setUseCaches( true );
urlc.setRequestMethod("GET");
urlc.connect();
// check you have received an status code 200 to indicate OK
// get the encoding from the Content-Type header
BufferedReader in = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
String line = null;
while((line = in.readLine()) != null) {
  System.out.println(line);
}

// close sockets, handle errors, etc.
</code></pre>

<p>As written above, you can save traffic by adding the Accept-Encoding header and check the 
 Content-Encoding header of the response.</p>

<p>Here is an HttpClient Example, taken from <a href="http://hc.apache.org/httpclient-3.x/tutorial.html">here</a>:</p>

<pre><code>   // Create an instance of HttpClient.
    HttpClient client = new HttpClient();

    // Create a method instance.
    GetMethod method = new GetMethod(url);

    // Provide custom retry handler is necessary
    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, 
            new DefaultHttpMethodRetryHandler(3, false));

    try {
      // Execute the method.
      int statusCode = client.executeMethod(method);

      if (statusCode != HttpStatus.SC_OK) {
        System.err.println("Method failed: " + method.getStatusLine());
      }

      // Read the response body.
      byte[] responseBody = method.getResponseBody();

      // Deal with the response.
      // Use caution: ensure correct character encoding and is not binary data
      System.out.println(new String(responseBody));

    } catch (HttpException e) {
      System.err.println("Fatal protocol violation: " + e.getMessage());
      e.printStackTrace();
    } catch (IOException e) {
      System.err.println("Fatal transport error: " + e.getMessage());
      e.printStackTrace();
    } finally {
      // Release the connection.
      method.releaseConnection();
    }  
</code></pre>
