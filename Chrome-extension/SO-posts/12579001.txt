<p>Use a <a href="http://developer.android.com/reference/android/view/GestureDetector.html">GestureDetector</a> with a custom web view..</p>

<pre><code>webView.setGestureDetector(new GestureDetector(new CustomeGestureDetector()));   
</code></pre>

<p><strong>the gesture detector:</strong></p>

<pre><code>private class CustomeGestureDetector extends SimpleOnGestureListener {      
    @Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
        if(e1 == null || e2 == null) return false;
        if(e1.getPointerCount() &gt; 1 || e2.getPointerCount() &gt; 1) return false;
        else {
            try { // right to left swipe .. go to next page
                if(e1.getX() - e2.getX() &gt; 100 &amp;&amp; Math.abs(velocityX) &gt; 800) {
                    //do your stuff
                    return true;
                } //left to right swipe .. go to prev page
                else if (e2.getX() - e1.getX() &gt; 100 &amp;&amp; Math.abs(velocityX) &gt; 800) {
                    //do your stuff
                    return true;
                } //bottom to top, go to next document
                else if(e1.getY() - e2.getY() &gt; 100 &amp;&amp; Math.abs(velocityY) &gt; 800 
                        &amp;&amp; webView.getScrollY() &gt;= webView.getScale() * (webView.getContentHeight() - webView.getHeight())) {
                    //do your stuff
                    return true;
                } //top to bottom, go to prev document
                else if (e2.getY() - e1.getY() &gt; 100 &amp;&amp; Math.abs(velocityY) &gt; 800 ) {
                    //do your stuff
                    return true;
                } 
            } catch (Exception e) { // nothing
            }
            return false;
        }
    }
}
</code></pre>

<p><strong>The custom web view:</strong></p>

<pre><code>public final class CustomWebView extends WebView {

private GestureDetector gestureDetector;

/**
 * @param context
 * @param attrs
 * @param defStyle
 */
public CustomWebView(Context context) {
    super(context);
}

/**
 * @param context
 * @param attrs
 * @param defStyle
 */
public CustomWebView(Context context, AttributeSet attrs) {
    super(context, attrs);
}

/**
 * @param context
 * @param attrs
 * @param defStyle
 */
public CustomWebView(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
}

/* 
 * @see android.webkit.WebView#onScrollChanged(int, int, int, int)
 */
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
    super.onScrollChanged(l, t, oldl, oldt);
}

/* 
 * @see android.webkit.WebView#onTouchEvent(android.view.MotionEvent)
 */
@Override
public boolean onTouchEvent(MotionEvent ev) {
    return gestureDetector.onTouchEvent(ev) || super.onTouchEvent(ev);
}

public void setGestureDetector(GestureDetector gestureDetector) {
    this.gestureDetector = gestureDetector;
}
}
</code></pre>

<p>As said by ?????? ?????????:</p>

<p>It can be solved without deriving WebView class, by registering touch listener: <code>webview.setOnTouchListener(new OnTouchListener() ...)</code> and calling <code>gestureDetector.onTouchEvent(ev)</code> from it. </p>
