<p>As others have mentioned, there is not a built-in core Java API method you can call to validate an integer, but you can use the <code>Character</code> class to validate your input <strong>without</strong> using exception handling.  For example:</p>

<pre><code>package com.example.parseint;

public class ValidateIntExample {
    public static boolean isInteger(String s) {
        if (s == null) {
            return false;
        }

        s = s.trim();

        if (s.length() == 0) {
            return false;
        }

        int start = 0;
        if (s.charAt(0) == '-') { // handle negative numbers
            if (s.length() == 1) {
                return false;
            }
            else {
                start = 1;
            }
        }

        for (int i = start; i &lt; s.length(); i++) {
            if (! Character.isDigit(s.charAt(i))) {
                return false;
            }
        }

        return true;
    }
}
</code></pre>

<p>In fact, <code>parseInt</code> itself uses <code>Character.isDigit</code> internally, which you can verify in the JRE source code.  (Sorry, I would have included the <code>parseInt</code> method here, but I'm not sure if I'm allowed under the license terms.)  If you're using Eclipse and you have the JRE source code attached to your project, you can right-click on the method <code>Integer.parseInt</code> in your code and click Open Declaration.</p>
