<p>I see no reason to use RxJava in your situation. About open your Fragment even when your app is in background it's is quite easy. </p>

<p>Take a look at my production code which does the same:  </p>

<pre><code>Intent intent = new Intent(Intents.ACTION_OPEN_ALBUM);
intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
intent.putExtra("id", albumId);

PendingIntent pendingIntent = PendingIntent.getActivity(this, Integer.parseInt(albumId), intent, 0);

pendingIntent.send();
</code></pre>

<p>The main difference between mine and yours is the flags. You are using <strong>FLAG_ACTIVITY_CLEAR_TOP</strong> which expect that there's one MainActivity instance running in your task. </p>

<p>Look the documentation below:</p>

<blockquote>
  <p>FLAG_ACTIVITY_CLEAR_TOP</p>
  
  <p>If set, and the activity being launched is
  already running in the current task, then instead of launching a new
  instance of that activity, all of the other activities on top of it
  will be closed and this Intent will be delivered to the (now on top)
  old activity as a new Intent.</p>
</blockquote>

<p>Reference: <a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP" rel="nofollow">https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_CLEAR_TOP</a></p>

<p>When your app is not running you don't have a task yet, so you should use FLAG_ACTIVITY_NEW_TASK instead. </p>

<blockquote>
  <p>FLAG_ACTIVITY_NEW_TASK</p>
  
  <p>If set, this activity will become the start of a new task on this
  history stack.</p>
</blockquote>

<p>Reference: <a href="https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK" rel="nofollow">https://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_NEW_TASK</a></p>

<p>Your code should look like this:</p>

<pre><code>private void sendNotification(RemoteMessage remoteMessage) {
    Intent intent = new Intent("your.package.WHATEVER_ACTION");
    intent.putExtra("action", "goToFragment1");
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

    PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_ONE_SHOT);
    Uri defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
    NotificationCompat.Builder notification=new NotificationCompat.Builder(this)
            .setSmallIcon(logo)
            .setContentText(remoteMessage.getNotification().getBody())
            .setContentTitle("Naslov")
            .setAutoCancel(true)
            .setSound(defaultSoundUri)
            .setContentIntent(pendingIntent);
    NotificationManager notificationManager = (NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
    notificationManager.notify(0, notification.build());
}
</code></pre>

<p>In your manifest you should set the action as intent filter:</p>

<pre><code>    &lt;activity
        android:name="your.package.YourActivity"&gt;

        &lt;intent-filter&gt;
            &lt;action android:name="your.package.WHATEVER_ACTION" /&gt;

            &lt;category android:name="android.intent.category.DEFAULT" /&gt;
        &lt;/intent-filter&gt;

    &lt;/activity&gt;
</code></pre>

<p>Hope that it helps! </p>

<p>Best regards. </p>
