<p><strong>Iterating over the files</strong></p>

<p>If you are on Java7 use the <code>Files.walkFileTree(args)</code> to walk the tree: <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#walkFileTree%28java.nio.file.Path,%20java.util.Set,%20int,%20java.nio.file.FileVisitor%29" rel="nofollow">doc</a></p>

<p>If you are on Java below version 7 just use <code>File.listFiles()</code> recursively.</p>

<p><strong>Finding in a file</strong></p>

<p>Use Scanner.findWithinHorizon(String pattern, int horizon) to find whatever regexp you want: 
<a href="http://docs.oracle.com/javase/6/docs/api/java/util/Scanner.html#findWithinHorizon%28java.lang.String,%20int%29" rel="nofollow">doc</a></p>

<p>Here is an example of how you could do it:</p>

<pre><code>private List&lt;String&gt; searchFiles(File file, String pattern, List&lt;String&gt; result) throws FileNotFoundException {

    if (!file.isDirectory()) {
        throw new IllegalArgumentException("file has to be a directory");
    }

    if (result == null) {
        result = new ArrayList&lt;String&gt;();
    }

    File[] files = file.listFiles();

    if (files != null) {
        for (File currentFile : files) {
            if (currentFile.isDirectory()) {
                searchFiles(currentFile, pattern, result);
            } else {
                Scanner scanner = new Scanner(currentFile);
                if (scanner.findWithinHorizon(pattern, 0) != null) {
                    result.add(currentFile.getName());
                }
                scanner.close();
            }
        }
    }
    return result;
}
</code></pre>

<p>you could use the method in your code like this:</p>

<pre><code> File folder = selectedFile.isDirectory() ? selectedFile : currentDirectory;
 ArrayList&lt;String&gt; files = new ArrayList&lt;String&gt;();
 try {
    files = searchFiles(folder, "Hello", files);
 } catch (FileNotFoundException e1) {
    // you should tell the user here that something went wrong
 }
 // 'files' now contains the resulting file names 
</code></pre>
