<p>Hi Jawad Thank you for your answer but it just changed the colors. 
I modified the code and it worked.
 my modified code:</p>

<pre><code>import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

/**
 * Created by Nikhil on 9/10/2015.
 */
public class ColorPicker extends View {


    public ColorPicker(Context context) {
        super(context);
        init(null, 0);
    }

    public ColorPicker(Context context, AttributeSet attrs) {
        super(context, attrs);
        init(attrs, 0);
    }


    public ColorPicker(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        init(attrs, defStyle);
    }

    private void init(AttributeSet attrs, int defStyle) {


        // Get the current hue from the current color and update the main
        // color field
        float[] hsv = new float[3];
        Color.colorToHSV(0, hsv);
        mCurrentHue = hsv[0];
            /*updateMainColors();*/


        // Initialize the colors of the hue slider bar
        int index = 0;
        for (float i = 0; i &lt; 256; i += 256 / 42) // Red (#f00) to pink
        // (#f0f)
        {
            mHueBarColors[index] = Color.rgb(255, 0, (int) i);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42)  // Pink (#f0f) to blue
        // (#00f)
        {
            mHueBarColors[index] = Color.rgb(255 - (int) i, 0, 255);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42)  // Blue (#00f) to light
        // blue (#0ff)
        {
            mHueBarColors[index] = Color.rgb(0, (int) i, 255);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42)  // Light blue (#0ff) to
        // green (#0f0)
        {
            mHueBarColors[index] = Color.rgb(0, 255, 255 - (int) i);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42)  // Green (#0f0) to yellow
        // (#ff0)
        {
            mHueBarColors[index] = Color.rgb((int) i, 255, 0);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42) // Yellow (#ff0) to red
        // (#f00)
        {
            mHueBarColors[index] = Color.rgb(255, 255 - (int) i, 0);
            index++;
        }



        // Initializes the Paint that will draw the View
        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        mPaint.setTextAlign(Paint.Align.CENTER);
        mPaint.setTextSize(50);
    }


    private Paint mPaint;
    private float mCurrentHue = 0;
    private int mDefaultColor;
    private final int[] mHueBarColors = new int[258];

    /*private OnColorChangedListener mListener;*/
    private int maincolorforbar;

    public ColorPicker(Context c, int color, int defaultColor) {
        super(c);


    }

    // Get the current selected color from the hue bar
    private int getCurrentMainColor() {

        int translatedHue = 255 - (int) (mCurrentHue * 255 / 360);
        int index = 0;
        for (float i = 0; i &lt; 256; i += 256 / 42) {
            if (index == translatedHue)
                return Color.rgb(255, 0, (int) i);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42) {
            if (index == translatedHue)
                return Color.rgb(255 - (int) i, 0, 255);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42) {
            if (index == translatedHue)
                return Color.rgb(0, (int) i, 255);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 30) {
            if (index == translatedHue)
                return Color.rgb(0, 255, 255 - (int) i);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42) {
            if (index == translatedHue)
                return Color.rgb((int) i, 255, 0);
            index++;
        }
        for (float i = 0; i &lt; 256; i += 256 / 42) {
            if (index == translatedHue)
                return Color.rgb(255, 255 - (int) i, 0);
            index++;
        }

        return Color.RED;
    }


    @Override
    protected void onDraw(Canvas canvas) {
        int translatedHue = 255 - (int) (mCurrentHue * 255 / 360);
        // Display all the colors of the hue bar with lines
        for (int x = 0; x &lt; 765; x++) {
            // If this is not the current selected hue, display the actual
            // color
            if (translatedHue != x/3) {
                mPaint.setColor(mHueBarColors[x/3]);
                mPaint.setStrokeWidth(1);
            } else // else display a slightly larger black line
            {
                mPaint.setColor(Color.BLACK);
                mPaint.setStrokeWidth(6);
            }
            canvas.drawLine(x + 10, 0, x + 10, 100, mPaint);
            // canvas.drawLine(0, x+10, 40, x+10, mPaint);
        }


        // Draw a 'button' with the currently selected color
        maincolorforbar = Color.rgb(
                Color.red(getCurrentMainColor()),
                Color.green(getCurrentMainColor()),
                Color.blue(getCurrentMainColor()));

        mPaint.setStyle(Paint.Style.FILL);
        mPaint.setColor(maincolorforbar);
        canvas.drawRect(10, 150, canvas.getWidth(), 250, mPaint);

        // Set the text color according to the brightness of the color
        if (Color.red(maincolorforbar) + Color.green(maincolorforbar) + Color.blue(maincolorforbar) &lt; 384)
            mPaint.setColor(Color.WHITE);
        else
            mPaint.setColor(Color.BLACK);
        canvas.drawText("Pick", 74, 245, mPaint);

        // Draw a 'button' with the default color
        mPaint.setStyle(Paint.Style.FILL);
        mPaint.setColor(mDefaultColor);
        canvas.drawRect(138, 316, 266, 356, mPaint);

        // Set the text color according to the brightness of the color
        if (Color.red(mDefaultColor) + Color.green(mDefaultColor)
                + Color.blue(mDefaultColor) &lt; 384)
            mPaint.setColor(Color.WHITE);
        else
            mPaint.setColor(Color.BLACK);
        canvas.drawText("Pick", 202, 340,
                mPaint);
    }
    @Override
    public boolean onTouchEvent(MotionEvent event) {
            /*if (event.getAction() != MotionEvent.ACTION_DOWN)
                return true;*/

        float x = event.getX();
        float y = event.getY();
        if (event.getAction() == MotionEvent.ACTION_MOVE ) {


            // If the touch event is located in the hue bar
            if (x &gt; 0 &amp;&amp; x &lt; 765 &amp;&amp; y &gt; 0 &amp;&amp; y &lt; 250) {
                // Update the main field colors
                mCurrentHue = (255 - x/3) * 360 / 255;

                invalidate();
            }


            // If the touch event is located in the left button, notify the
            // listener with the current color
            /*if (x &gt; 10 &amp;&amp; x &lt; 138 &amp;&amp; y &gt; 316 &amp;&amp; y &lt; 356)
                mListener.colorChanged("", maincolorforbar);

            // If the touch event is located in the right button, notify the
            // listener with the default color
            if (x &gt; 138 &amp;&amp; x &lt; 266 &amp;&amp; y &gt; 316 &amp;&amp; y &lt; 356)
                mListener.colorChanged("", mDefaultColor);*/

            return true;
        } else {


            // If the touch event is located in the hue bar
            if (x &gt; 10 &amp;&amp; x &lt; 266 &amp;&amp; y &gt; 0 &amp;&amp; y &lt; 40) {
                // Update the main field colors
                mCurrentHue = (255 - x) * 360 / 255;

                invalidate();
            }


            // If the touch event is located in the left button, notify the
            // listener with the current color
           /* if (x &gt; 10 &amp;&amp; x &lt; 138 &amp;&amp; y &gt; 316 &amp;&amp; y &lt; 356)
                mListener.colorChanged("", maincolorforbar);

            // If the touch event is located in the right button, notify the
            // listener with the default color
            if (x &gt; 138 &amp;&amp; x &lt; 266 &amp;&amp; y &gt; 316 &amp;&amp; y &lt; 356)
                mListener.colorChanged("", mDefaultColor);*/

            return true;
        }
    }


    public Object getCurrentColor() {
        return maincolorforbar;
    }
}
</code></pre>
