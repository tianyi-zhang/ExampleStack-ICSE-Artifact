<p>I developed the following code to convert the NV21 to RGB, and it is working.</p>

<pre><code>/**
 * Converts YUV420 NV21 to RGB8888
 * 
 * @param data byte array on YUV420 NV21 format.
 * @param width pixels width
 * @param height pixels height
 * @return a RGB8888 pixels int array. Where each int is a pixels ARGB. 
 */
public static int[] convertYUV420_NV21toRGB8888(byte [] data, int width, int height) {
    int size = width*height;
    int offset = size;
    int[] pixels = new int[size];
    int u, v, y1, y2, y3, y4;

    // i percorre os Y and the final pixels
    // k percorre os pixles U e V
    for(int i=0, k=0; i &lt; size; i+=2, k+=2) {
        y1 = data[i  ]&amp;0xff;
        y2 = data[i+1]&amp;0xff;
        y3 = data[width+i  ]&amp;0xff;
        y4 = data[width+i+1]&amp;0xff;

        u = data[offset+k  ]&amp;0xff;
        v = data[offset+k+1]&amp;0xff;
        u = u-128;
        v = v-128;

        pixels[i  ] = convertYUVtoRGB(y1, u, v);
        pixels[i+1] = convertYUVtoRGB(y2, u, v);
        pixels[width+i  ] = convertYUVtoRGB(y3, u, v);
        pixels[width+i+1] = convertYUVtoRGB(y4, u, v);

        if (i!=0 &amp;&amp; (i+2)%width==0)
            i+=width;
    }

    return pixels;
}

private static int convertYUVtoRGB(int y, int u, int v) {
    int r,g,b;

    r = y + (int)1.402f*v;
    g = y - (int)(0.344f*u +0.714f*v);
    b = y + (int)1.772f*u;
    r = r&gt;255? 255 : r&lt;0 ? 0 : r;
    g = g&gt;255? 255 : g&lt;0 ? 0 : g;
    b = b&gt;255? 255 : b&lt;0 ? 0 : b;
    return 0xff000000 | (b&lt;&lt;16) | (g&lt;&lt;8) | r;
}
</code></pre>

<p>This image helps to understand. 
<img src="http://i.stack.imgur.com/NqqJD.png" alt="YUV420 NV21"></p>

<p>If you wanna just grayscale image is easer. You can discard all the U and V info, and take just the Y info. The code would can be like this:</p>

<pre><code>/**
 * Converts YUV420 NV21 to Y888 (RGB8888). The grayscale image still holds 3 bytes on the pixel.
 * 
 * @param pixels output array with the converted array o grayscale pixels
 * @param data byte array on YUV420 NV21 format.
 * @param width pixels width
 * @param height pixels height
 */
public static void applyGrayScale(int [] pixels, byte [] data, int width, int height) {
    int p;
    int size = width*height;
    for(int i = 0; i &lt; size; i++) {
        p = data[i] &amp; 0xFF;
        pixels[i] = 0xff000000 | p&lt;&lt;16 | p&lt;&lt;8 | p;
    }
}
</code></pre>

<p>To create your Bitmap just:</p>

<pre><code>Bitmap bm = Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888);
</code></pre>

<p>Where pixels is your int [] array.</p>
