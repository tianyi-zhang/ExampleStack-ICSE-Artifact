<p>I think that your code has the same problem as using:</p>

<p>android:inputType="numberDecimal"
android:digits="0123456789,"</p>

<p>(except that your code is more generic)</p>

<p>The problem - as I understand, is that some keyboards just don't respect <em>digits</em> property when <em>inputType</em> is <em>numberDecimal</em>. This is a <a href="http://code.google.com/p/android/issues/detail?id=2626" rel="nofollow">documented bug</a> and the only way I found to avoid this behaviour is to use <em>inputType="text"</em> and set a input filter to restrict characters. Of course, the keyboard isn't proper for numbers but couldn't find a better solution. The filter would be something like this:</p>

<pre><code>mEditText.setFilters(new InputFilter[] { new DecimalInputFilter() });


public class DecimalInputFilter implements InputFilter {

    private static final String ALLOWED_CHARS = "0123456789,";

    @Override
    public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
        if (source instanceof SpannableStringBuilder) {
            final SpannableStringBuilder sourceAsSpannableBuilder = (SpannableStringBuilder)source;
            for (int i = end - 1; i &gt;= start; i--) { 
                final char currentChar = source.charAt(i);
                 if (!StringUtils.contains(ALLOWED_CHARS, currentChar)) {    
                     sourceAsSpannableBuilder.delete(i, i+1);
                 }     
            }
            return source;
        } else {
            final StringBuilder filteredStringBuilder = new StringBuilder();
            for (int i = 0; i &lt; end; i++) { 
                final char currentChar = source.charAt(i);
                if (StringUtils.contains(ALLOWED_CHARS, currentChar)) {    
                    filteredStringBuilder.append(currentChar);
                }     
            }
            return filteredStringBuilder.toString();
        }
    }
}
</code></pre>
