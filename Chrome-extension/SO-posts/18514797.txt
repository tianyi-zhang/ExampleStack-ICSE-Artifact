<p>The answer from @hp.android works well if you are just working with bitmap backgrounds but, in my case, I had a <code>BaseAdapter</code> providing a set of <code>ImageView</code>s for a <code>GridView</code>. I modified the <code>unbindDrawables()</code> method as advised so that the condition is:</p>

<pre><code>if (view instanceof ViewGroup &amp;&amp; !(view instanceof AdapterView)) {
  ...
}
</code></pre>

<p>but the problem then is that the recursive method never processes the children of the <code>AdapterView</code>. To address this, I instead did the following:</p>

<pre><code>if (view instanceof ViewGroup) {
  ViewGroup viewGroup = (ViewGroup) view;
  for (int i = 0; i &lt; viewGroup.getChildCount(); i++)
    unbindDrawables(viewGroup.getChildAt(i));

  if (!(view instanceof AdapterView))
    viewGroup.removeAllViews();
}
</code></pre>

<p>so that the children of the <code>AdapterView</code> are still processed -- the method just doesn't attempt to remove all children (which is unsupported).</p>

<p>This doesn't quite fix the problem however since <code>ImageView</code>s manage a bitmap that is not their background. I therefore added the following. It's not ideal but it works:</p>

<pre><code>if (view instanceof ImageView) {
  ImageView imageView = (ImageView) view;
  imageView.setImageBitmap(null);
}
</code></pre>

<p>Overall the <code>unbindDrawables()</code> method is then:</p>

<pre><code>private void unbindDrawables(View view) {
  if (view.getBackground() != null)
    view.getBackground().setCallback(null);

  if (view instanceof ImageView) {
    ImageView imageView = (ImageView) view;
    imageView.setImageBitmap(null);
  } else if (view instanceof ViewGroup) {
    ViewGroup viewGroup = (ViewGroup) view;
    for (int i = 0; i &lt; viewGroup.getChildCount(); i++)
    unbindDrawables(viewGroup.getChildAt(i));

    if (!(view instanceof AdapterView))
      viewGroup.removeAllViews();
  }
}
</code></pre>

<p>I'm hoping there is a more principled approach to freeing up such resources.</p>
