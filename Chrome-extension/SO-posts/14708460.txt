<p>This is how I have done: 
First create the image uri and with the intent ACTION_IMAGE_CAPTURE pass an extra MediaStore.EXTRA_OUTPUT with this value. </p>

<pre><code>captureButton.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            capturedImageURI =  ImageUtils.takePicture(ReceiptFormActivity.this);
                        }
                    });
</code></pre>

<p>Then onActivityResult convert this uri path to String path and call the method which will fetch the bitmap from this string path and set it on your imageView.</p>

<pre><code>                protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
            if (requestCode == CONSTANTS.TAKE_PICTURE)
            {
            if (resultCode == RESULT_OK)
            {               
                if(capturedImageURI != null)
                {
                    Utils.imagePath = ImageUtils.getStringPathFromURI(ReceiptFormActivity.this, capturedImageURI);;
                    setThumbnail();
                }
            }

        }
    }


    void setThumbnail()
    {
        try{
            if(Utils.imagePath != null)
            {
                ((TextView)findViewById(R.id.display_image)).setOnClickListener(new OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        File f = new File(Utils.imagePath);
                        if(f.exists())
                        {
                            Intent intent = new Intent();  
                            intent.setAction(Intent.ACTION_VIEW); 
                            Uri imgUri = Uri.fromFile(f);
                            intent.setDataAndType(imgUri, "image/*");  
                            startActivityForResult(intent,2000);
                        }   
                    }
                });

                File imgFilePath = new File(Utils.imagePath);
                if(imgFilePath != null &amp;&amp; imgFilePath.exists())
                {
                Bitmap bitmap =  ImageUtils.decodeFile(imgFilePath, CONSTANTS.THUMBNAIL_HEIGHT, CONSTANTS.THUMBNAIL_WIDTH);
                if(bitmap != null)
                {
                receipt_thumbnail.setImageBitmap(bitmap);
                return;
                }
                }
            }
        }
        catch (Exception e) {
            receipt_thumbnail.setImageResource(R.drawable.some_img);
        }
        /*
         * default img incase of not any exception and no bitmap either.
         */
        receipt_thumbnail.setImageResource(R.drawable.some_img);
    } 
</code></pre>

<p>ImageUtils.java</p>

<pre><code>public class ImageUtils {
    public static Uri takePicture(Context context)
    {
        ContentValues values = new ContentValues();
        values.put(MediaStore.Images.Media.TITLE, "Receipt_" + System.currentTimeMillis());
        Uri mCapturedImageURI = context.getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
        Intent intentPicture = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        intentPicture.putExtra(MediaStore.EXTRA_OUTPUT, mCapturedImageURI);
        ((Activity) context).startActivityForResult(intentPicture,CONSTANTS.TAKE_PICTURE);

        return mCapturedImageURI;

    }

     public static String getStringPathFromURI(Context context, Uri contentUri)
        {
            try
            {
                String[] proj = {MediaStore.Images.Media.DATA};
                Cursor cursor =  context.getContentResolver().query(contentUri, proj, null, null, null);
                int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
                cursor.moveToFirst();
                return cursor.getString(column_index);
            }
            catch (Exception e)
            {
                return contentUri.getPath();
            }
        }

         public static Bitmap decodeFile(File f, int thumbnailReqHeight, int thumbnailReqWidth)
        {
            Bitmap b = null;

            try {
                //Decode image size
                BitmapFactory.Options o = new BitmapFactory.Options();
                o.inJustDecodeBounds = true;

                FileInputStream fis = new FileInputStream(f);
                BitmapFactory.decodeStream(fis, null, o);
                fis.close();

                int scale = 1;
                if (o.outHeight &gt; thumbnailReqHeight || o.outWidth &gt; thumbnailReqWidth)
                {
                    scale = (int)Math.pow(2, (int) Math.round(Math.log(thumbnailReqHeight / (double) Math.max(o.outHeight, o.outWidth)) / Math.log(0.5)));
                }

                //Decode with inSampleSize
                o.inJustDecodeBounds = false;
                o.inSampleSize = scale;
                fis = new FileInputStream(f);
                b = BitmapFactory.decodeStream(fis, null, o);
                fis.close();
            } catch (IOException e) {
            }
            return b;
        }
    }
</code></pre>
