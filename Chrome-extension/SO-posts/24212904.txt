<p>You might consider using a mask.  This might be quicker/cleaner.</p>

<pre><code>int idx = i &gt;&gt;&gt; 2;
int shift = (i &amp; 3) &lt;&lt; 3;
int mask = 0xFF &lt;&lt; shift;
int expected2 = (expected &amp; 0xff) &lt;&lt; shift;
int val2 = (val &amp; 0xff) &lt;&lt; shift;

while (true) {
    final int num = this.array.get(idx);
    // Check that the read byte is what we expected
    if ((num &amp; mask) != expected2) return false;
    // If we complete successfully, all is good
    final int num2 = (num &amp; ~mask) | val2;
    if ((num == num2) || this.array.compareAndSet(idx, num, num2)) {
        return true;
    }
}
</code></pre>

<p>You want to do a minimum of work inside the loop so that if there is contention you can try again as quick as possible.</p>

<p>I am not sure the <code>num == num2</code> helps more than it hurts.  I suggest you try it without for comparison.</p>
