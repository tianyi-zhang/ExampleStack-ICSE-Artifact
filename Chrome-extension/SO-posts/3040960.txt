<p>Here's the (verbose ;) ) Java variant:</p>

<pre><code>InputStream input = null;
OutputStream output = null;
try {
    input = new URL("http://search.twitter.com/search.json?q=hi").openStream();
    output = new FileOutputStream("/output.json");
    byte[] buffer = new byte[1024];
    for (int length = 0; (length = input.read(buffer)) &gt; 0;) {
        output.write(buffer, 0, length);
    }
    // Here you could append further stuff to `output` if necessary.
} finally {
    if (output != null) try { output.close(); } catch (IOException logOrIgnore) {}
    if (input != null) try { input.close(); } catch (IOException logOrIgnore) {}
}
</code></pre>

<p><strong>See also</strong>:</p>

<ul>
<li><a href="http://java.sun.com/docs/books/tutorial/essential/io/" rel="nofollow">Java IO tutorial</a></li>
<li><a href="http://java.sun.com/docs/books/tutorial/networking/urls/readingWriting.html" rel="nofollow">Java URLConnection tutorial</a></li>
<li><a href="http://stackoverflow.com/questions/2793150/how-to-use-java-net-urlconnection-to-fire-and-handle-http-requests/2793153#2793153">How to use URLConnection</a></li>
</ul>
