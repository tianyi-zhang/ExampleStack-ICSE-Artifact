<p>For those who can't use the new Java 8 method  <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html#waitFor-long-java.util.concurrent.TimeUnit-" rel="nofollow"><code>waitFor(long timeout, TimeUnit unit)</code></a> (because they are on Android or simply can't upgrade) you can simply rip it from the JDK source code and add it somewhere in your utils file :</p>

<pre><code>public boolean waitFor(long timeout, TimeUnit unit, final Process process)
            throws InterruptedException
    {
        long startTime = System.nanoTime();
        long rem = unit.toNanos(timeout);

        do {
            try {
                process.exitValue();
                return true;
            } catch(IllegalThreadStateException ex) {
                if (rem &gt; 0)
                    Thread.sleep(
                            Math.min(TimeUnit.NANOSECONDS.toMillis(rem) + 1, 100));
            }
            rem = unit.toNanos(timeout) - (System.nanoTime() - startTime);
        } while (rem &gt; 0);
        return false;
    }
</code></pre>

<p>The only change I've made to the original one from JDK8 source code is the addition of the  <code>Process</code> parameter so that we can call the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html#exitValue--" rel="nofollow"><code>exitValue</code></a> method from the process. </p>

<p>The <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html#exitValue--" rel="nofollow"><code>exitValue</code></a> method will directly try to return or throw an <code>IllegalThreadStateException</code> if the process has not yet terminated. In that case, we wait the received timeout and terminate.</p>

<p>The method return a boolean, so if it return false then you know you need to manually kill the process.</p>

<p>This way seems simplier than anything posted above (expect the direct call to waitFor for sure).</p>
