<p>Change your sql insert to <code>INSERT INTO TABLE(x, y, i) VALUES(1,2,3)</code>. The framework creates a loop for you. 
For example:</p>

<pre><code>public void insertBatch(final List&lt;Customer&gt; customers){

  String sql = "INSERT INTO CUSTOMER " +
    "(CUST_ID, NAME, AGE) VALUES (?, ?, ?)";

  getJdbcTemplate().batchUpdate(sql, new BatchPreparedStatementSetter() {

    @Override
    public void setValues(PreparedStatement ps, int i) throws SQLException {
        Customer customer = customers.get(i);
        ps.setLong(1, customer.getCustId());
        ps.setString(2, customer.getName());
        ps.setInt(3, customer.getAge() );
    }

    @Override
    public int getBatchSize() {
        return customers.size();
    }
  });
}
</code></pre>

<p>IF you have something like this. Spring will do something like:</p>

<pre><code>for(int i = 0; i &lt; getBatchSize(); i++){
   execute the prepared statement with the parameters for the current iteration
}
</code></pre>

<p>The framework first creates PreparedStatement from the query (the <code>sql</code> variable) then the setValues method is called and the statement is executed. that is repeated as much times as you specify in the <code>getBatchSize()</code> method. So the right way to write the insert statement is with only one values clause. 
You can take a look at <a href="http://docs.spring.io/spring/docs/3.0.x/reference/jdbc.html">http://docs.spring.io/spring/docs/3.0.x/reference/jdbc.html</a></p>
