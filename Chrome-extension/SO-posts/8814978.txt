<p>Yes, of course, you can do that</p>

<p>1) you need to have <code>listholder.xml</code> here, you can scratch anything in you layout view, either imageview, textview..etc. just don't forget to add ListView inside it. for example:</p>

<p>
</p>

<pre><code>&lt;LinearLayout 
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:background="@drawable/head_logo_bg"&gt;
&lt;/LinearLayout&gt;
&lt;LinearLayout 
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:background="@drawable/background_label"&gt;
    &lt;TextView
        android:id="@+id/city_txt" 
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:gravity="center_horizontal"
        android:layout_gravity="center"
        android:text="Sydney"
        android:textStyle="bold"
        android:textSize="17sp"/&gt;
&lt;/LinearLayout&gt;
&lt;LinearLayout 
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:padding="40sp"&gt;

    &lt;ListView 
    android:id="@android:id/list"
    android:layout_height="wrap_content"
    android:layout_width="fill_parent"
    android:layout_centerVertical="true"
    android:scrollingCache="false"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p></p>

<p>2) For custom your own list item, you have to create <code>listitem.xml</code> i.e.</p>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/listitemone"
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:padding="10sp"&gt;

    &lt;LinearLayout 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_vertical"
        android:orientation="vertical"&gt;
            &lt;ImageView android:id="@+id/user_image"
                android:layout_width="80px" android:layout_height="80px"
                android:layout_alignParentLeft="true"
                android:layout_marginRight="5px"
                android:src="@drawable/icon"
                /&gt;
    &lt;/LinearLayout&gt;
    &lt;RelativeLayout 
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_vertical"
        android:layout_marginLeft="5sp"
        android:orientation="vertical"&gt;
            &lt;TextView
                android:id="@+id/date_label"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="@string/date"
                android:textStyle="bold"
            android:textSize="16sp" /&gt;
            &lt;TextView
                android:id="@+id/date_value"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_alignParentRight="true"
                android:layout_alignBaseline="@id/date_label"
                android:layout_marginRight="20sp"
                android:textColor="#FFF"
                android:text="MM/dd/YYYY"
                android:textStyle="bold"
            android:textSize="16sp" /&gt;
      &lt;/RelativeLayout&gt;
&lt;/LinerLayout&gt;
</code></pre>

<p>3) create customAdapter in your activity, it would look like this;</p>

<pre><code>public class MyListActivity extends ListActivity {

private ArrayList&lt;Yourdata&gt; yourdata = new ArrayList&lt;Youdata&gt;();
        @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.listholder);    
               // yourdata might be array, arraylist etc. 

               MyCustomAdapter listadapter = new MyCustomAdapter(this, R.layout.listitem, yourdata);

          setListAdapter(listadapter);
}

private class MyCustomAdapter extends ArrayAdapter&lt;Yourdata&gt;{
                //this case, i use Yourdata as type
        private ArrayList&lt;Yourdata&gt; items;

        public PreviousAdapter(Context context, int textViewResourceId,
                ArrayList&lt;Yourdata&gt; items) {
            super(context, textViewResourceId, items);
            this.items = items;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View v = convertView;
            if(v == null) {
                LayoutInflater vi = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                v = vi.inflate(R.layout.listitem, null);
            }
            Yourdata yt = items.get(position);
            if(yt != null){
             // Don't forget to use v.findView...., otherwise, it might force close when run app.
                TextView dateStr = (TextView)v.findViewById(R.id.date_value);

                    dateStr.setText(yt.getDate());
            }   
            return v;
        }



      }


}
</code></pre>

<p>P.S. the above code might not exactly right... just give you an idea :)
Here is a source about custom list (you might have seen it) hope it useful </p>

<p><a href="http://www.vogella.de/articles/AndroidListView/article.html" rel="nofollow">http://www.vogella.de/articles/AndroidListView/article.html</a></p>
