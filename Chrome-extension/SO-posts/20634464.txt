<p>Try the following:</p>

<ol>
<li>To pass string as parameter, replace <strong><code>String url = "[http://localhost:8084/Lab/url]";</code></strong> with <strong><code>String url = "[http://localhost:8084/Lab/url?str=YOURSTRING]";</code></strong></li>
<li>In servlet, to retrieve message add: <strong>String messsage = request.getParameter("str");</strong></li>
</ol>

<p><br/>
In [1] using <strong>GET</strong> we are passing "str" parameter in the URL which contains our string.
We retrieve the message using <code>getParameter()</code> in servlet [2].</p>

<p>As @Anders said we can also do it using <strong>POST</strong></p>

<p>I hope this is helpful.</p>

<p>Cheers</p>

<p>PS: URLS are w/o []</p>

<p><br>
<strong>[UPDATE]</strong>
<br/>Passing parameter using POST<br/></p>

<pre><code>    String param = "str=YOURSTRING";
    String request = "http://localhost:8084/";
    URL url = new URL(request);
    HttpURLConnection connection = (HttpURLConnection)
    url.openConnection();          
    connection.setDoOutput(true);
    connection.setDoInput(true);
    connection.setInstanceFollowRedirects(false);
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
    connection.setRequestProperty("charset", "utf-8");
    connection.setRequestProperty("Content-Length", "" +  Integer.toString(param.getBytes().length));
    connection.setUseCaches (false);

    DataOutputStream out = new DataOutputStream(connection.getOutputStream ());
    out.writeBytes(param);
    out.flush();
    out.close();
    connection.disconnect();
</code></pre>
