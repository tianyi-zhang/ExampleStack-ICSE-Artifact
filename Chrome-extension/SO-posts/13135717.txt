<p>I've managed to solve this issue.
The main idea was to control view's sizes by myself programmatically.
I calculate appropriate proportion for each zone and when somebody add a new view to some of this layout I check suitability of the size of this view to the allocated size of layout. If size is not suitable I modify LayoutParams for this View.
Here is the xml of empty layouts:</p>

<pre><code>&lt;RelativeLayout
    android:id="@+id/pluginsLayout"             
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"             
    android:layout_above="@+id/mainButtons"
    android:layout_below="@+id/paramsLayout"&gt;
        &lt;LinearLayout
            android:id="@+id/capturePluginLayout"
            android:orientation="vertical"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"                
            android:layout_alignParentLeft="true"
            android:layout_alignParentTop="true"&gt;               
        &lt;/LinearLayout&gt;
        &lt;LinearLayout
            android:id="@+id/processingPluginLayout"
            android:orientation="vertical"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"                
            android:layout_alignParentLeft="true"
            android:layout_centerVertical="true"&gt;                                           
        &lt;/LinearLayout&gt;
        &lt;LinearLayout
            android:id="@+id/filterPluginLayout"
            android:orientation="vertical"
            android:layout_width="wrap_content" 
            android:layout_height="wrap_content"                
            android:layout_alignParentLeft="true"
            android:layout_alignParentBottom="true"&gt;                                            
        &lt;/LinearLayout&gt;
        &lt;LinearLayout
            android:id="@+id/exportPluginLayout"
            android:orientation="vertical"              
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignParentRight="true"
            android:layout_alignParentTop="true"&gt;                                               
        &lt;/LinearLayout&gt;
        &lt;RelativeLayout
            android:id="@+id/viewfinderPluginLayout"
            android:orientation="vertical"
            android:layout_width="wrap_content"             
            android:layout_height="wrap_content"                                        
            android:layout_alignParentRight="true"
            android:layout_alignParentBottom="true"&gt;                                                        
        &lt;/RelativeLayout&gt;
    &lt;/RelativeLayout&gt;
</code></pre>

<p>And like that I manage the size of adding views:</p>

<pre><code>public void addVFPluginView(View view)
{
    //Get maximum width and height for such plugins
    int layoutHeight = this.getViewfinderLayoutHeight();
    int layoutWidth = this.getViewfinderLayoutWidth();

    //Calculate appropriate size of added plugin's view
    android.widget.RelativeLayout.LayoutParams viewLayoutParams = (android.widget.RelativeLayout.LayoutParams)view.getLayoutParams();
    viewLayoutParams = this.getTunedRelativeLayoutParams(view, viewLayoutParams, layoutWidth, layoutHeight);

//Get fixed maximum size for this plugin type
public int getViewfinderLayoutWidth()
{
    return ((RelativeLayout)MainScreen.thiz.findViewById(R.id.pluginsLayout)).getWidth()/2;
}

public int getViewfinderLayoutHeight()
{
    return (int)(((RelativeLayout)MainScreen.thiz.findViewById(R.id.pluginsLayout)).getHeight()*0.7);
}


    ((RelativeLayout)MainScreen.thiz.findViewById(R.id.viewfinderPluginLayout)).addView(view, viewLayoutParams);        
}

android.widget.RelativeLayout.LayoutParams getTunedRelativeLayoutParams(View view, android.widget.RelativeLayout.LayoutParams currParams, int goodWidth, int goodHeight)
{
    int viewHeight, viewWidth;

    if(currParams != null)
    {
        viewHeight = currParams.height;
        viewWidth = currParams.width;


        if(viewHeight &gt; goodHeight || viewHeight &lt;= 0)
            viewHeight = goodHeight;

        if(viewWidth &gt; goodWidth || viewWidth &lt;= 0)
            viewWidth = goodWidth;

        currParams.width = viewWidth;
        currParams.height = viewHeight;

        view.setLayoutParams(currParams);
    }
    else
    {       
        currParams = new android.widget.RelativeLayout.LayoutParams(goodWidth, goodHeight);
        view.setLayoutParams(currParams);
    }

    return currParams;
}
</code></pre>

<p>Finally, next issue is for several views with suitable sizes but in sum they're bigger than allocated size. Maybe I'll just straightly count sizes of views and if the sum with the size of next adding view will be more than allocated size I just disallow to add this view.</p>
