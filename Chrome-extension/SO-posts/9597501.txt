<p>First of all I'm making a few general assumptions. These are assumptions that are valid for most tree-based collection classes but it's always worth checking:</p>

<ol>
<li>You consider two trees to be equal if and only if they are equal both in terms of <em>tree structure</em> and in terms of <em>data values</em> at each node (as defined by data.equals(...))</li>
<li>null data values are allowed at tree nodes (this could be either because you allow null explicitly or because your data structure only stores non-null values at leaf nodes)</li>
<li>There aren't any particular unusual facts you know about the distribution of data values that you can take advantage of (for example, if you knew that the only possible data vales were null or the String "foo", then you don't need to compare two non-null String values)</li>
<li>The trees will typically be of moderate size and reasonably well balanced. In particular, this ensures that the trees will never be so deep that you run the risk of StackOverflowExceptions caused by deep recursion.</li>
</ol>

<p>Assuming these assumptions are correct, then the approach I would suggest is:</p>

<ul>
<li>Do root reference equality check first. this quickly eliminates the case of either two nulls or the same tree being passed in for comparison with itself. Both are very common cases, and the reference equality check is extremely cheap.</li>
<li>Check the nulls next. Non-null is obviously not equal to null, which enables you to bail out early <em>plus</em> it establishes a non-null guarantee for later code! A very smart compiler could also theoretically use this guarantee to optimise away null pointer checks later (not sure if the JVM currently does this)</li>
<li>Check data reference equality and nulls next. This avoids descending all the way down the tree branches which you would do even in the case of unequal data if you went down the tree branches first.</li>
<li>Check data.equals() next. Again you want to check data equality before tree branches. You do this after checking for nulls since data.equals() is potentially more expensive and you want to guarantee you won't get a NullPointerException</li>
<li>Check the equality of branches recursively as the last step. It doesn't matter if you do left or right first <em>unless</em> there is a greater likelihood of one side being unequal, in which case you should check that side first. This might be the case if e.g. most changes were being appended to the right branch of the tree....</li>
<li>Make the comparison a static method. This is because you want to use it recursively in a way that will accept nulls as either of the two parameters (hence it isn't suitable for an instance method as <code>this</code> cannot be null). In addition, the JVM is very good at optimising static methods.</li>
</ul>

<p>My implementation would therefore be something like:</p>

<pre><code>public static boolean treeEquals(Node a, Node b) {
    // check for reference equality and nulls
    if (a == b) return true; // note this picks up case of two nulls
    if (a == null) return false;
    if (b == null) return false;

    // check for data inequality
    if (a.data != b.data) {
        if ((a.data == null) || (b.data == null)) return false;
        if (!(a.data.equals(b.data))) return false;
    }

    // recursively check branches
    if (!treeEquals(a.left, b.left)) return false;
    if (!treeEquals(a.right, b.right)) return false;

    // we've eliminated all possibilities for non-equality, so trees must be equal
    return true;
}
</code></pre>
