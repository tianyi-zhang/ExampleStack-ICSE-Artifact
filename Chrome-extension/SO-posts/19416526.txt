<p>For setting the client properties you need to use the <code>setClientProperties</code> method in the <code>ConnectionFactory</code> (assuming this ConnectionFactory is the object from the RabbitMQ Java library). This method is expecting a <code>Map&lt;String, Object&gt;</code> which contains the properties of the client and the capabilities. The following lines are the default values inside the RabbitMQ Java library:</p>

<pre><code>Map&lt;String,Object&gt; props = new HashMap&lt;String, Object&gt;();
props.put("product", LongStringHelper.asLongString("RabbitMQ"));
props.put("version", LongStringHelper.asLongString(ClientVersion.VERSION));
props.put("platform", LongStringHelper.asLongString("Java"));
props.put("copyright", LongStringHelper.asLongString(Copyright.COPYRIGHT));
props.put("information", LongStringHelper.asLongString(Copyright.LICENSE));

Map&lt;String, Object&gt; capabilities = new HashMap&lt;String, Object&gt;();
capabilities.put("publisher_confirms", true);
capabilities.put("exchange_exchange_bindings", true);
capabilities.put("basic.nack", true);
capabilities.put("consumer_cancel_notify", true);

props.put("capabilities", capabilities);
</code></pre>

<p>For managing ACKs and Consumer cancelling I am not sure how to do it with the Spring AMQP abstraction, however it is perfectly doable with <code>channel.basicConsume</code> which gives you the possibility to handle all the scenarios through all the callback methods:</p>

<p><a href="http://www.rabbitmq.com/releases/rabbitmq-java-client/v3.1.5/rabbitmq-java-client-javadoc-3.1.5/" rel="nofollow">http://www.rabbitmq.com/releases/rabbitmq-java-client/v3.1.5/rabbitmq-java-client-javadoc-3.1.5/</a></p>

<p>Hope this helps!</p>
