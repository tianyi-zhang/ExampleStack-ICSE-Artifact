<p>Found a solution that worked for me. </p>

<p>Created a wrapper class that extended FilterInputStream and implemented the skip method using the same code found in InputStream.java</p>

<h2>Wrapper class</h2>

<pre><code>public class SkipInputStream extends FilterInputStream
{
    private static final int MAX_SKIP_BUFFER_SIZE = 2048;

    /**
     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;
     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;
     * to the field &lt;code&gt;this.in&lt;/code&gt; so as
     * to remember it for later use.
     *
     * @param in the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if
     *           this instance is to be created without an underlying stream.
     */
    protected SkipInputStream (InputStream in)
    {
        super(in);
    }

    /**
     * Same implementation as InputStream#skip
     *
     * @param n
     * @return
     * @throws IOException
     */
    public long skip(long n)
        throws IOException
    {
        long remaining = n;
        int nr;

        if (n &lt;= 0) {
            return 0;
        }

        int size = (int)Math.min(MAX_SKIP_BUFFER_SIZE, remaining);
        byte[] skipBuffer = new byte[size];
        while (remaining &gt; 0) {
            nr = in.read(skipBuffer, 0, (int)Math.min(size, remaining));
            if (nr &lt; 0) {
                break;
            }
            remaining -= nr;
        }

        return n - remaining;
    }

}
</code></pre>

<p>With this class one just needs to change the following line in the MCVE above</p>

<pre><code>long count = cis.skip(32);
</code></pre>

<p>to</p>

<pre><code>long count = getWrapper(cis).skip(32);
</code></pre>

<h2>Output</h2>

<p>Old</p>

<pre><code>Bytes skipped: 0
Content after skipping 32 bytes is: Strive not to be a success, but rather to be of value
</code></pre>

<p>New</p>

<pre><code>Bytes skipped: 32
Content after skipping 32 bytes is: rather to be of value
</code></pre>
