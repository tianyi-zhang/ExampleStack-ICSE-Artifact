<p>It looks correct to me. If you want to iterate over the code points in a string, you could wrap this code in an <code>Iterable</code>:</p>

<pre><code>public static Iterable&lt;Integer&gt; getCodePoints(final String text) {
    return new Iterable&lt;Integer&gt;() {
        @Override public Iterator&lt;Integer&gt; iterator() {
            return new Iterator&lt;Integer&gt;() {
                private int nextIndex = 0;

                @Override public boolean hasNext() {
                    return nextIndex &lt; text.length();
                }

                @Override public Integer next() {
                    if (!hasNext()) {
                        throw new NoSuchElementException();
                    }
                    int codePoint = text.codePointAt(nextIndex);
                    nextIndex += Character.charCount(codePoint);
                    return codePoint;
                }

                @Override public void remove() {
                    throw new UnsupportedOperationException();
                }
            };
        }
    };
}
</code></pre>

<p>Or you could change the method to just return an <code>int[]</code> of course:</p>

<pre><code>public static int[] getCodePoints(String text) {
    int[] ret = new int[text.codePointCount(0, text.length())];
    int charIndex = 0;
    for (int i = 0; i &lt; ret.length; i++) {
        ret[i] = text.codePointAt(charIndex);
        charIndex += Character.charCount(ret[i]);
    }
    return ret;
}
</code></pre>

<p>I agree that it's a pity that the Java libraries don't expose methods like this already, but at least they're not <em>too</em> hard to write.</p>
