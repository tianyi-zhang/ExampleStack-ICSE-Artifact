<p>I was able to get the code above working with a few modifications:</p>

<ol>
<li><p>I commented out the <code>verifyBluetooth((Activity) context);</code> line because it was crashing my <code>MainActivity</code> with a <code>NullPointerException</code>.  If you see your activity launch properly, you may not need to do this.  If you don't see it launch, then <code>BeaconUtils</code> will be disposed of by Android along with your <code>MainActivity</code> and can't get any callbacks when it sees iBeacons.</p></li>
<li><p>I had to change the <code>createNotification</code> method to get it to work -- the original code did not display a notification for me, although I am not exactly clear why.  The code I got to work is:</p>

<pre><code>private void createNotification() {
     NotificationCompat.Builder builder =
             new NotificationCompat.Builder(context)
                     .setContentTitle("New beacon in range")
                     .setContentText("You are currently in the range of a new beacon.")
                     .setSmallIcon(R.drawable.ic_launcher);

     TaskStackBuilder stackBuilder = TaskStackBuilder.create(context);
     stackBuilder.addNextIntent(new Intent(context, MainActivity.class));
     PendingIntent resultPendingIntent =
             stackBuilder.getPendingIntent(
                     0,
                     PendingIntent.FLAG_UPDATE_CURRENT
             );
     builder.setContentIntent(resultPendingIntent);
     NotificationManager notificationManager =
             (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
     notificationManager.notify(1, builder.build());
 }
</code></pre></li>
</ol>

<p>Once I made this change, the log displayed the following line after launch:</p>

<pre><code>    01-21 12:52:43.112    I/BeaconUtils? I have just switched from seeing/not seeing iBeacons: null
</code></pre>

<p>And the following notification was displayed:</p>

<p><img src="http://i.stack.imgur.com/fPeXV.png" alt="enter image description here"></p>

<p>In general, the best way to troubleshoot problems like this is to add log messages.  In the case where you are not seeing many log messages, I would add them at the top of each lifecycle and callback method, including <code>onCreate</code>, <code>onIBeaconServiceConnect()</code>, etc.  Once you do this, any messages you should see but don't give you a good idea where something is going wrong.</p>

<p>A few other tips:</p>

<ol>
<li><p>Each time you launch your app from Eclipse/Android Studio, be sure to make some code change, otherwise the app won't be uninstalled and reinstalled, and the  iBeacon Service won't restart.  Unless the service is restarted, you won't get new entered region notifications for iBeacons that were already detected.</p></li>
<li><p>Be careful that you only have <em>one</em> monitorNotifier or rangingNotifier on your iBeaconManager.  Whatever is the last notifier set is the one that will get all the callbacks.</p></li>
<li><p>If you don't see that your on <code>onIBeaconServiceConnect()</code> method is being called (best to do this with a log line), then stop everything until you get that working.  </p></li>
<li><p>In general, the <code>IBeaconConsumer</code> interface is designed to work with an <code>Activity</code>, <code>Service</code> or <code>Application</code> instance.  There's nothing wrong doing this with a custom class like your <code>BeaconUtils</code>, but you have to be extra careful that your context is set properly, and that whatever is holding a reference to your custom object doesn't dispose of it during the Android lifecycle.  <strong>Edit:</strong> Also, when making custom <code>bindService</code> and <code>unbindService</code> methods, the methods must chain to the equivalent methods on the context. I am surprised this works at all as-is. See my related answer here: <a href="http://stackoverflow.com/a/21298560/1461050">http://stackoverflow.com/a/21298560/1461050</a></p></li>
</ol>
