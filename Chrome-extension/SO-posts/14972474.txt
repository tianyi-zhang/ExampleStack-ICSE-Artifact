<p>You can read it in as a <a href="http://docs.oracle.com/javase/1.4.2/docs/api/java/math/BigInteger.html" rel="nofollow">BigInteger</a> and then return the correct int value.</p>

<pre><code>BigInteger value = new BigInteger("dadacafe", 16); // 3671771902
value.intValue(); // -623195394
</code></pre>

<p><strong>Edit:</strong></p>

<p>re: comments saying this is slow..</p>

<p>I mean, <a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/Integer.java#Integer.parseInt%28java.lang.String,int%29" rel="nofollow">there's always this right</a>:</p>

<pre><code>public static int parseInt(String s, int radix)
    throws NumberFormatException
{
    if (s == null) {
      throw new NumberFormatException("null");
    }

    if (radix &lt; Character.MIN_RADIX) {
      throw new NumberFormatException("radix " + radix +
          " less than Character.MIN_RADIX");
    }

    if (radix &gt; Character.MAX_RADIX) {
      throw new NumberFormatException("radix " + radix +
          " greater than Character.MAX_RADIX");
    }

    int result = 0;
    boolean negative = false;
    int i = 0, len = s.length();
    int digit;

    if (len &gt; 0) {
      char firstChar = s.charAt(0);
      if (firstChar &lt; '0') { // Possible leading "-"
        if (firstChar == '-') {
          negative = true;
        } else
          throw new NumberFormatException(s);

        if (len == 1) // Cannot have lone "-"
          throw new NumberFormatException(s);
        i++;
      }
      while (i &lt; len) {
        // Accumulating negatively avoids surprises near MAX_VALUE
        digit = Character.digit(s.charAt(i++),radix);
        if (digit &lt; 0) {
          throw new NumberFormatException(s);
        }
        result *= radix;
        result -= digit;
      }
    } else {
      throw new NumberFormatException(s);
    }
    return negative ? result : -result;
}
</code></pre>

<p>But at this point, I would start to think that maybe this isn't solving the problem correctly. I'm not sure if you're railing up against existing software, or what the situation may be, but if 'fast-as-light' int overflows is actually something you truly need - it probably won't get much better than this.</p>
