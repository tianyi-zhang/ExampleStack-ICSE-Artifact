<p>1) There isn't a criterion to define the size of your byte array. In the given code it's used 32 kbytes but you could use any value. The size of the byte array and the size of your file determinate how many times you'll read the file, bigger buffers results in less reading calls, but aren't necessary if you're working with small files.</p>

<p>2) Whenever you use an method in Java that can throws an exception, you need to catch that exception and do something with it. You can treat the exception in your code (usually print the stack trace to debugging purposes) or throw it, which means that when someone use your code will need to catch your code's exception.</p>

<p>3) What he did was to catch the two possible exceptions and specifies which one occurs. Since  <code>FileNotFoundException</code> extends <code>IOException</code> he could simply use one try, and catch only the <code>IOException</code>, he coded that way to know if the <code>IOException</code> is a <code>FileNotFoundException</code> or any other <code>IOException</code>. Personally, I wouldn't write the code the same way the author did, it isn't easily readable. </p>

<p>Maybe rewriting the code it gets easier to you understand the tries and catchs:</p>

<pre><code>        System.out.println("Copying files with streams.");
    InputStream inStream = null;
    OutputStream outStream = null;
    try {
        inStream = new BufferedInputStream(new FileInputStream(aSourceFile));
        outStream = new BufferedOutputStream(new FileOutputStream(aTargetFile, aAppend));
    } catch (FileNotFoundException ex){
        // TODO Handle FileNotFoundException
        ex.printStackTrace();
    }
    try {
        byte[] bucket = new byte[32*1024];
        int bytesRead = 0;
        while(bytesRead != -1){
          bytesRead = inStream.read(bucket); //-1, 0, or more
          outStream.write(bucket, 0, bytesRead);
        }
    } catch (IOException ex){
        // TODO Handle IOException
        ex.printStackTrace();
    } finally {
        try {
            if (inStream != null) inStream.close();
            if (outStream != null) outStream.close();
        } catch (IOException ex){
            // TODO Handle IOException
            ex.printStackTrace();
        }
    }
</code></pre>

<p>It does the same stuff.</p>
