<p>If you really have the requirement of having un-sorted arrays as potential input, you could use Merge Sort to sort the two individual arrays, and then do one last Merge operation to join the two sorted arrays.</p>

<p>Here is a test run with your initial non-sorted input:</p>

<pre><code>import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;

public class MArray {

  public static void mergeA(long[] A, long[] B) {

    long [] merged = new long[A.length + B.length ];
    int indexFirst = 0, indexSecond = 0, indexMerge = 0;

    while (indexFirst &lt; A.length &amp;&amp; indexSecond &lt; B.length) {
        if (A[indexFirst] &lt;= B[indexSecond]) {
            merged[indexMerge++] = A[indexFirst++];
        }
        else {           
            merged[indexMerge++] = B[indexSecond++];
        }
    }

    //get remaining items if arrays were not equal lengths

    while (indexFirst &lt; A.length){
       merged[indexMerge++] = A[indexFirst++];
    }

    while (indexSecond &lt; B.length){
       merged[indexMerge++] = B[indexSecond++];
    }


    System.out.print("\n");
    System.out.println("Here is your merged array: " );

    for (int i = 0; i &lt; merged.length; i++) {
      System.out.print(merged[i] + ", ");
    }


  }

  public static void main(String[] args) throws FileNotFoundException {
      // TODO Auto-generated method stub

      long array1[] = null;
      long array2[] = null;

  /*
      Scanner Scanscan = new Scanner(System.in);
      System.out.print("Input filename: ");
      String filename = Scanscan.nextLine();
      File inputFile = new File(filename);
      Scanner reader = new Scanner(inputFile);

      int i = 0;
      while(reader.hasNextInt())
      {
           array1[i++] = reader.nextInt();
      }

      for (int i1 = 0; i1 &lt; array1.length; i1++) {
             System.out.print(array1[i1] + " ");
          }
      System.out.println( "\n");


      System.out.println("Please enter your second file name: ");

      String filename2 = Scanscan.nextLine();
      File inputFile2 = new File(filename2);
      Scanner reader2 = new Scanner(inputFile2);

      int i1 = 0;

      while(reader2.hasNextInt()){
         array2[i1++] = reader2.nextInt();
      }
       System.out.println("  ");

       for (int i11 = 0; i11 &lt; array2.leng= th; i11++) {
             System.out.print(array2[i11] + " ");
          }
          */


    long[] a1 = new long[]{1, 9, 6, 11, 12, 4, 7, 2};
    long[] a2 = new long[]{2, 8, 3, 13, 5, 10};

    mergeSort(a1);
    mergeSort(a2);

    array1 = new long[a1.length];
    System.arraycopy(a1, 0, array1, 0, a1.length);

    array2 = new long[a2.length];
    System.arraycopy(a2, 0, array2, 0, a2.length);

    mergeA(array1, array2);

  }

  static void mergeSort(long[] array){
    long[] helper = new long[array.length];
    mergeSort(array, helper, 0, array.length - 1);
  }

  static void mergeSort(long[] array, long[] helper, int low, int high){
    if (low &lt; high){
      int middle = (low + high) / 2;
      mergeSort(array, helper, low, middle);
      mergeSort(array, helper, middle + 1, high);
      merge(array, helper, low, middle, high);
    }
  }

  static void merge(long[] array, long[] helper, int low, int middle, int high){
    for (int i = low; i &lt;= high; i++){
      helper[i] = array[i];
    }

    int helperLeft = low;
    int helperRight = middle + 1;
    int current = low;
    while (helperLeft &lt;= middle &amp;&amp; helperRight &lt;= high){
      if (helper[helperLeft] &lt;= helper[helperRight]){
        array[current++] = helper[helperLeft++];
      }
      else{
        array[current++] = helper[helperRight++];
      }
    }
    while (helperLeft &lt;= middle){
      array[current++] = helper[helperLeft++];
    }
  }


}
</code></pre>

<p>Output:</p>

<pre><code>Here is your merged array: 
1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,
</code></pre>
