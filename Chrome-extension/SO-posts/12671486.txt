<p>I think the problem is with BitmapFactory in the doInBackground method. This decoding consumes a lot of memory and also has some known leaks. Instead of decode the entire image, I always scale it in order to reduce the memory consumption. There is an example of this:</p>

<pre><code>  //decodes image and scales it to reduce memory consumption
  private static Bitmap decodeImage(InputStream in, InputStream in2){

          //Decode image size
          BitmapFactory.Options o = new BitmapFactory.Options();
          o.inJustDecodeBounds = true;
          BitmapFactory.decodeStream(in,null,o);

          //The new size we want to scale to
          final int REQUIRED_SIZE=100;

          //Find the correct scale value. It should be the power of 2.
          int scale=1;
          while(o.outWidth/scale/2&gt;=REQUIRED_SIZE &amp;&amp; o.outHeight/scale/2&gt;=REQUIRED_SIZE)
              scale*=2;

          //Decode with inSampleSize
          BitmapFactory.Options o2 = new BitmapFactory.Options();
          o2.inSampleSize=scale;
          o2s.inTempStorage = new byte[16*1024];

          return BitmapFactory.decodeStream(in2, null, o2);

  }
</code></pre>

<p><b>NOTE:</b> You'll need open two instances of your inputstream.</p>

<p>Other advice is to call the method clear() in Bitmap every time the image is no longer useful.</p>

<p>I hope this helps you!</p>
