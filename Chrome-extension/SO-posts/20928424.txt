<p>I would use ExpandableListView even though you just want headers.  For one of my projects I had the exact same issue involving headers, and I had to create a custom adapter for it.</p>

<p>First create a new class with something like...</p>

<pre><code>    public class MyCustomListAdapter extends BaseExpandableListAdapter 
</code></pre>

<p>These are my "getChildView" and "getGroupView" from my project...</p>

<pre><code>@Override
public View getChildView(int groupPosition, int childPosition,
        boolean isLastChild, View view, ViewGroup parent) {

    DetailInfo detailInfo = (DetailInfo) getChild(groupPosition,
            childPosition);
    if (view == null) {
        LayoutInflater infalInflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        view = infalInflater.inflate(R.layout.child_row, null);
    }
    TextView childItem = (TextView) view.findViewById(R.id.childItem);
    childItem.setText(detailInfo.getName().trim());

    return view;
}

@Override
public View getGroupView(int groupPosition, boolean isLastChild, View view,
        ViewGroup parent) {

    HeaderInfo headerInfo = (HeaderInfo) getGroup(groupPosition);
    if (view == null) {
        LayoutInflater inf = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        view = inf.inflate(R.layout.group_heading, null);
    }

    TextView heading = (TextView) view.findViewById(R.id.heading);
    heading.setText(headerInfo.getName().trim());

    return view;
}
</code></pre>

<p>So now, you have complete control over what gets displayed as the group or child.  In this case, the group gets displayed as a header, and the children as the data.</p>

<p>Here is a screenshot of what my listview looks like with this code...</p>

<p><img src="http://i.stack.imgur.com/65qGt.png" alt="ScreenShot"></p>
