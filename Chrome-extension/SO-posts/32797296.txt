<p>I had difficulties to find best practices or even advices to solve my problem. Based on <a href="http://stackoverflow.com/a/30110298/4473512">this anwer by JannGabriel</a>, who crops the image right and bottom by reducing image size, i managed to make a step further and also remove the top and left blank spaces, and to generally improve elaboration time. The result is good, and i am currently using it in my project.
I'm fairly new to Android programming and any advice on this method is welcome.</p>

<pre><code>public static Bitmap TrimBitmap(Bitmap bmp) {
    int imgHeight = bmp.getHeight();
    int imgWidth  = bmp.getWidth();


    //TRIM WIDTH - LEFT
    int startWidth = 0;
    for(int x = 0; x &lt; imgWidth; x++) {
        if (startWidth == 0) {
            for (int y = 0; y &lt; imgHeight; y++) {
                if (bmp.getPixel(x, y) != Color.TRANSPARENT) {
                    startWidth = x;
                    break;
                }
            }
        } else break;
    }


    //TRIM WIDTH - RIGHT
    int endWidth  = 0;
    for(int x = imgWidth - 1; x &gt;= 0; x--) {
        if (endWidth == 0) {
            for (int y = 0; y &lt; imgHeight; y++) {
                if (bmp.getPixel(x, y) != Color.TRANSPARENT) {
                    endWidth = x;
                    break;
                }
            }
        } else break;
    }



    //TRIM HEIGHT - TOP
    int startHeight = 0;
    for(int y = 0; y &lt; imgHeight; y++) {
        if (startHeight == 0) {
            for (int x = 0; x &lt; imgWidth; x++) {
                if (bmp.getPixel(x, y) != Color.TRANSPARENT) {
                    startHeight = y;
                    break;
                }
            }
        } else break;
    }



    //TRIM HEIGHT - BOTTOM
    int endHeight = 0;
    for(int y = imgHeight - 1; y &gt;= 0; y--) {
        if (endHeight == 0 ) {
            for (int x = 0; x &lt; imgWidth; x++) {
                if (bmp.getPixel(x, y) != Color.TRANSPARENT) {
                    endHeight = y;
                    break;
                }
            }
        } else break;
    }


    return Bitmap.createBitmap(
            bmp,
            startWidth,
            startHeight,
            endWidth - startWidth,
            endHeight - startHeight
    );

}
</code></pre>

<p>Explanation:
For each side of the image, a FOR loop is run to check if pixels does not contains transparent color, returning the first non-transparent pixel useful coordinate. This is done elaborating coordinates using as a base the opposite dimension than the dimension to trim: to find y, scan x for every y. </p>

<p>To check where the Vertical-Top blank space ends, it runs the following steps:</p>

<ol>
<li>Starting is from the top row (y=0)  </li>
<li>Checks all the columns of the row (x from 0 to imageWidth)</li>
<li>If a non-transparent pixel is found, break the loop and save the y coordinate. Otherwise continue.</li>
<li>At the ending of the columns, go to the next row (y+1) and start checking columns agains. Break if a non-transparent pixel has already been found.</li>
</ol>

<p>Similiar methods are used for the other dimensions, only changing the direction of the scan.</p>

<p>Once obtained the 4 coordinates for the first useful pixels of the image, the <code>Bitmap.createBitmap</code> method is invoked, with the original bitmap as a base image, and the useful pixels coordinates as Top-Left and Bottom-Right limits for the resize.</p>

<blockquote>
  <p>Note 1: It is useful to note that the coordinates 0, 0 equals to <strong>Top-Left</strong>.</p>
  
  <p>Note 2: The ending width and height in Bitmap.createBitmap are reduced by the new starting relative coordinate, otherwise the new image will have the boundaries wrongly pushed bottom-right. Figure it like this: you have an image 100x100px, so with ending coordinates 100,100. Changing the starting coordinates to 50,50 will bring the ending coordinates of your elaboration rectangle to 150,150 (100 original coordinate + 50 of modified starting point), pushing it outside the original image boundaries. To avoid this, the new ending coordinate is reduced by the new starting coordinate (100 + 50 new starting coord - 50 new starting coord adjustment)</p>
  
  <p>Note 3: in the original answer, a check for all the pixels in a given direction is run using the same dimension of the coordinate to find, returning the most advanced useful pixel. Checking the opposite dimension and stopping at the first useful pixel increased performances.</p>
</blockquote>
