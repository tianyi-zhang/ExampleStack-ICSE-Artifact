<p>Thanks to <strong>hipkiss</strong> for pointing me toward right direction.</p>

<p><strong>Please note:</strong> This is not the best solution out there and it may not be well optimised and it may not work with every device.</p>

<p>For newcomers, like me, here is what my final code looked like. So it may help someone some day :)</p>

<p>First do this in your button's click event or in alert dialog etc </p>

<pre><code> Intent i = new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
 startActivityForResult(i, REQUEST_GALLERY);
</code></pre>

<p>declare 
<code>REQUEST_GALLERY</code> as </p>

<pre><code> private static int REQUEST_GALLERY = 1;
</code></pre>

<p>And now in your 
<code>onActivityResult</code> Do something like this:</p>

<pre><code>try {

                Uri selectedImage = data.getData();
                String[] filePathColumn = {MediaStore.Images.Media.DATA};

                // Get the cursor
                Cursor cursor = getContentResolver().query(selectedImage,
                        filePathColumn, null, null, null);
                // Move to first row
                cursor.moveToFirst();

                int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
                imgPath = cursor.getString(columnIndex);
                cursor.close();

                int rotation = getCameraPhotoOrientation(MainActivity.this,selectedImage,imgPath);

                Matrix matrix = new Matrix();
                matrix.postRotate(rotation);

                Bitmap original = BitmapFactory.decodeFile(imgPath);
                Bitmap myFinalImg = Bitmap.createBitmap(original, 0, 0, original.getWidth(), original.getHeight(), matrix, true);

                ImageView imgView = (ImageView) findViewById(R.id.imgProfilePic);
                // Set the Image in ImageView after decoding the String
                imgView.setImageBitmap(myFinalImg);

 } catch (Exception e) {
                Toast.makeText(this, "Unable to load the image", Toast.LENGTH_LONG).show();
                 }
</code></pre>

<p>And this function will return the rotation ( that is how much rotation should be done)</p>

<pre><code> public static int getCameraPhotoOrientation(Context context, Uri imageUri, String imagePath) {

    int rotate = 0;
    try {
        context.getContentResolver().notifyChange(imageUri, null);
        File imageFile = new File(imagePath);
        ExifInterface exif = new ExifInterface(imageFile.getAbsolutePath());

        int orientation = exif.getAttributeInt(
                ExifInterface.TAG_ORIENTATION,
                ExifInterface.ORIENTATION_UNDEFINED);

        switch (orientation) {
            case ExifInterface.ORIENTATION_NORMAL:
                rotate = 0;
                break;
            case ExifInterface.ORIENTATION_ROTATE_270:
                rotate = 270;
                break;
            case ExifInterface.ORIENTATION_ROTATE_180:
                rotate = 180;
                break;
            case ExifInterface.ORIENTATION_ROTATE_90:
                rotate = 90;
                break;
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    return rotate;
}
</code></pre>

<p>@Pros out there please fix/improve this answer so it may help other and let me know how i can improve it too :)</p>

<p><strong>Edit:</strong></p>

<p>Don't forget to add the permission in <code>AndroidManifest</code> file:</p>

<pre><code>   &lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
</code></pre>
