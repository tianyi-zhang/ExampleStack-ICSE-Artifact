<p>I think we are modifying the same OpenGLES20Activity from the Android developer training guide</p>

<p><a href="http://developer.android.com/training/graphics/opengl/environment.html" rel="nofollow">http://developer.android.com/training/graphics/opengl/environment.html</a></p>

<p>In order to move and rotate the triangle, you may do this:</p>

<p>(In order to make the variables accessible from other class object, I made them public.)</p>

<ol>
<li><p>Add a mModelMatrix for the Triangle object. This is used to set the location and direction of the triangle. Initialize it in the constructor.</p>

<pre><code>public class Triangle {
...
public float[] mModelMatrix = new float[16];
...

public Triangle() {
...
Matrix.setIdentityM(mModelMatrix, 0);
...
}
</code></pre></li>
<li><p>Use Matrix.translateM and Matrix.rotateM (not Matrix.setRotateM) to move and rotate the triangle. You can do these as many times as you like.</p>

<pre><code>Matrix.translateM(mTriangle.mModelMatrix, 0, 0.5f, 0f, 0f);
Matrix.rotateM(mTriangle.mModelMatrix, 0, -45f, 0, 0, -1.0f);
</code></pre></li>
<li><p>Multiply the mViewMatrix and the mProjectMatrix to create a mMVPMatrix, same as in the example. Then multiply the mMVPMatrix with the triangle's mModelMatrix.</p>

<pre><code>public void onSurfaceChanged(GL10 unused, int width, int height) {

GLES20.glViewport(0, 0, width, height);

float ratio = (float) width / height;

// this projection matrix is applied to object coordinates
// in the onDrawFrame() method
Matrix.frustumM(mProjectionMatrix, 0, -ratio, ratio, -1, 1, 1, 10);

}


public void onDrawFrame(GL10 unused) {

float[] scratch = new float[16];
// Draw background color
GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);

// Set the camera position (View matrix)
Matrix.setLookAtM(mViewMatrix, 0, 0, 0, 5f, 0f, 0f, 0f, 0f, 1.0f, 0.0f);

// Calculate the projection and view transformation
Matrix.multiplyMM(mMVPMatrix, 0, mProjectionMatrix, 0, mViewMatrix, 0);


// Combine the model's translation &amp; rotation matrix 
// with the projection and camera view
// Note that the mMVPMatrix factor *must be first* in order
// for the matrix multiplication product to be correct.
Matrix.multiplyMM(scratch, 0, mMVPMatrix, 0, mTriangle.mModelMatrix, 0);

// Draw triangle
mTriangle.draw(scratch);

}
</code></pre></li>
</ol>
