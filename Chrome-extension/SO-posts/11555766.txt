<p>Override <code>equals</code>  method like below.</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Employee other = (Employee) obj;
    if (employeeId == null) {
        if (other.employeeId != null)
            return false;
    } else if (!employeeId.equals(other.employeeId))
        return false;
    if (firstname == null) {
        if (other.firstname != null)
            return false;
    } else if (!firstname.equals(other.firstname))
        return false;
    if (Float.floatToIntBits(fte) == Float.floatToIntBits(other.fte))
        return false;
    if (lastname == null) {
        if (other.lastname != null)
            return false;
    } else if (!lastname.equals(other.lastname))
        return false;
    return true;
}
</code></pre>

<p>Then Create a <code>finalList</code> list and add <code>list1</code> to it. Then call <strong>retainAll</strong> on <code>finalList</code> list with <code>list2</code> which will give you common <code>Employees</code> based on <code>employeeId</code></p>

<pre><code>   List&lt;Employee&gt; finalList=new ArrayList&lt;Employee&gt;();
    finalList.addAll(list1);
    finalList.retainAll(list2);
    List&lt;Employee&gt; commonInBothListWithDifferentFTE=finalList;
    System.out.println(commonInBothListWithDifferentFTE);
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>[Employee [firstname=F1, lastname=L1, employeeId=EMP01, fte=1.0], Employee [firstname=F9, lastname=L9, employeeId=EMP09, fte=0.7]]
</code></pre>
