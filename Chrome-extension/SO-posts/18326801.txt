<p>TreeMap is sorted by key, but you can provide a comparator. see <a href="http://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java">How to sort a Map on the values</a></p>

<p>The code below is convert a map to linkedHashMap sorted by values.</p>

<pre><code>public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sort(Map&lt;K, V&gt; map,
        final Comparator&lt;Entry&lt;K, V&gt;&gt; comparator) {
    List&lt;Entry&lt;K, V&gt;&gt; list = Lists.newArrayList(map.entrySet());

    Collections.sort(list, comparator);
    LinkedHashMap&lt;K, V&gt; sortedMap = new LinkedHashMap&lt;K, V&gt;();
    for (Entry&lt;K, V&gt; entry : list) {
        sortedMap.put(entry.getKey(), entry.getValue());
    }
    return sortedMap;
}
</code></pre>

<p>the comparator used here:</p>

<pre><code>Comparator&lt;Entry&lt;String, Integer&gt;&gt; comparator = new Comparator&lt;Entry&lt;String, Integer&gt; () {

                @Override
                public int compare(Entry&lt;String, Integer&gt; o1,
                        Entry&lt;String, Integer&gt; o2) {
                    return o1.getValue().compareTo(o2.getValue());
                }
            }
</code></pre>

<p>or just use this:</p>

<pre><code>public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sort(Map&lt;K, V&gt; map) {
    List&lt;Entry&lt;K, V&gt;&gt; list = Lists.newArrayList(map.entrySet());

    Collections.sort(list, new Comparator&lt;Entry&lt;K, V&gt;&gt;() {

        @SuppressWarnings("unchecked")
        @Override
        public int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {
            return ((Comparable&lt;V&gt;) o1.getValue()).compareTo(o2.getValue());
        }
    });
    LinkedHashMap&lt;K, V&gt; sortedMap = new LinkedHashMap&lt;K, V&gt;();
    for (Entry&lt;K, V&gt; entry : list) {
        sortedMap.put(entry.getKey(), entry.getValue());
    }
    return sortedMap;
}
</code></pre>
