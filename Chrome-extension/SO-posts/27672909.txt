<p>Yes, there is a way. You just have to find overflow icon in view hierarchy. One good way is searching in <code>ViewGroup</code> returned by <code>getDecorView()</code>. You can search for it using <a href="http://developer.android.com/reference/android/view/View.html#findViewsWithText%28java.util.ArrayList%3Candroid.view.View%3E,%20java.lang.CharSequence,%20int%29" rel="nofollow"><code>findViewsWithText</code></a> with flag <code>FIND_VIEWS_WITH_CONTENT_DESCRIPTION</code>.</p>

<p>Sample code:</p>

<pre><code>public static void setOverflowButtonColor(final Activity activity, final int visibleFontColor) {
    final String overflowDescription = activity.getString(R.string.abc_action_menu_overflow_description);
    final ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();
    final ViewTreeObserver viewTreeObserver = decorView.getViewTreeObserver();
    viewTreeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            final ArrayList&lt;View&gt; outViews = new ArrayList&lt;View&gt;();
            decorView.findViewsWithText(outViews, overflowDescription, View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION);
            if (outViews.isEmpty()) {
                return;
            }
            TintImageView overflow = (TintImageView) outViews.get(0);
            overflow.setColorFilter(Color.CYAN);
            removeOnGlobalLayoutListener(decorView, this);
        }
    });
}

public static void removeOnGlobalLayoutListener(View v, ViewTreeObserver.OnGlobalLayoutListener listener) {
    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) {
        v.getViewTreeObserver().removeGlobalOnLayoutListener(listener);
    }
    else {
        v.getViewTreeObserver().removeOnGlobalLayoutListener(listener);
    }
}
</code></pre>

<p>For more details see my answer in similar question: <a href="http://stackoverflow.com/a/27672844/2707179">http://stackoverflow.com/a/27672844/2707179</a></p>
