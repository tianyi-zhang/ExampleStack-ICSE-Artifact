<p>Memcmp returns an int, less than, equal to, or greater than zero if the first n bytes of s1 is found, respectively, to be less than, to match, or be greater than the first n bytes of s2. Equals returns a boolean. It's not the same function. In addition, memcmp compares bytes as unsigned chars. </p>

<p>I think this could work:</p>

<pre><code>public int memcmp(byte b1[], byte b2[], int sz){
    for(int i = 0; i &lt; sz; i++){
        if(b1[i] != b2[i]){
            if(b1[i] &gt;= 0 &amp;&amp; b2[i] &gt;= 0)
                return b1[i] - b2[i];
            if(b1[i] &lt; 0 &amp;&amp; b2[i] &gt;= 0)
                return 1;
            if(b2[i] &lt; 0 &amp;&amp; b1[i] &gt;= 0)
                return -1;
            if(b1[i] &lt; 0 &amp;&amp; b2[i] &lt; 0){
                byte x1 = (byte) (256 + b1[i]);
                byte x2 = (byte) (256 + b2[i]);
                return x1 - x2;
            }
        }
    }
    return 0;
}
</code></pre>

<p>(edit)
In fact, the 2's complement part is not necessary:</p>

<pre><code>public static int memcmp(byte b1[], byte b2[], int sz){
    for(int i = 0; i &lt; sz; i++){
        if(b1[i] != b2[i]){
            if((b1[i] &gt;= 0 &amp;&amp; b2[i] &gt;= 0)||(b1[i] &lt; 0 &amp;&amp; b2[i] &lt; 0))
                return b1[i] - b2[i];
            if(b1[i] &lt; 0 &amp;&amp; b2[i] &gt;= 0)
                return 1;
            if(b2[i] &lt; 0 &amp;&amp; b1[i] &gt;=0)
                return -1;
        }
    }
    return 0;
}
</code></pre>
