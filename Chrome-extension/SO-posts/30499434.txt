<p>One of the possible solutions is to save files in the file system of the server.</p>

<p>For example.</p>

<p>Relevant part of the Play 1.3 Controller (<code>ClientController.java</code>):</p>

<pre><code>public class ClientController extends Controller {
    ...
    public static void saveFile() {
        File[] files = params.get("uploadedFile", File[].class);
        File destFile = null;
        String uploadedFileName;
        String uploadedFileDirs = "c:\\uploaded\\files\\";

        for(File file : files) {
            uploadedFileName = file.getName();
            destFile = new File(uploadedFileDirs + uploadedFileName);
            destFile.getParentFile().mkdirs();
            try {
                destFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            try {
                byte[] bytes = ClientControllerHelper.readBytesFromFile(file);
                ClientControllerHelper.writeBytesToFile(destFile, bytes);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
   ...
}
</code></pre>

<p>Relevant part of the helper class (<code>ClientControllerHelper.java</code>):</p>

<pre><code>public class ClientControllerHelper {
    ...
    public static byte[] readBytesFromFile(File file) throws IOException {
        InputStream inputStream = new FileInputStream(file);
        long length = file.length();
        if(length &gt; Integer.MAX_VALUE) {
            throw new IOException("Could not completely read file " +
                    file.getName() + " as it is too long (" + length + " bytes, max supported " +
                        Integer.MAX_VALUE + ")");
        }

        byte[] bytes = new byte[(int)length];
        int offset = 0;
        int numRead = 0;
        while (offset &lt; bytes.length &amp;&amp; (numRead = inputStream.read(bytes, offset, bytes.length-offset)) &gt;= 0) {
            offset += numRead;
        }

        if(offset &lt; bytes.length) {
            throw new IOException("Could not completely read file " + file.getName());
        }

        inputStream.close();
        return bytes;
    }

    public static void writeBytesToFile(File theFile, byte[] bytes) throws IOException {
        BufferedOutputStream bufferedOutputStream = null;
        try {
            FileOutputStream fos = new FileOutputStream(theFile);
            bufferedOutputStream = new BufferedOutputStream(fos);
            bufferedOutputStream.write(bytes);
        } finally {
            if(bufferedOutputStream != null) {
                try {
                    bufferedOutputStream.flush();
                    bufferedOutputStream.close();
                } catch(Exception e){ ... }
            }
        }
    }
    ...
}
</code></pre>
