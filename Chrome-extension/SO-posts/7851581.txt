<p>I just write one example integrate the drag gesture and image switch effect. Hope it helps.</p>

<p>All the needed resources and code as the following:</p>

<ol>
<li><p>main layout : add a ImageSwitcher into the layout</p></li>
<li><p>two drawable named as R.drawable.s3, R.drawable.s4</p></li>
<li><p>two animation files, slide_right_in, slide_left_out</p>

<pre><code>    public class PureTestActivity extends Activity{
        final String TAG = PureTestActivity.class.getSimpleName();
        /** Called when the activity is first created. */

        LinearLayout mainLL;
        GestureDetector gestureDetector;
        ImageSwitcher vs;
        int imageIdx = 0;
        int[] imageResId = {R.drawable.s3, R.drawable.s4};
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.main);


            mainLL = (LinearLayout)findViewById(R.id.main);

            vs = (ImageSwitcher)findViewById(R.id.viewSwitcher1);
            vs.setFactory(new ViewFactory(){

        @Override
        public View makeView() {

              ImageView i = new ImageView(PureTestActivity.this);
              i.setBackgroundColor(0xFF000000);
              i.setImageResource(R.drawable.s3);
              i.setScaleType(ImageView.ScaleType.FIT_CENTER);
              i.setLayoutParams(new ImageSwitcher.LayoutParams(
                LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
              return i;
        }
    });


    vs.setInAnimation(AnimationUtils.loadAnimation(this,
            android.R.anim.fade_in));
    vs.setOutAnimation(AnimationUtils.loadAnimation(this,
            android.R.anim.fade_out));
    //start for touch events  Gesture detection
    gestureDetector = new GestureDetector(new MyGestureDetector());
    View.OnTouchListener gestureListener = new View.OnTouchListener() {
        public boolean onTouch(View v, MotionEvent event) {

            Log.d(TAG, "ontouch event.");
            if (gestureDetector.onTouchEvent(event)) {
                return true;
            }
            return false;
        }
    };
    vs.setOnTouchListener(gestureListener);
}     
   class MyGestureDetector extends SimpleOnGestureListener {

        final String TAG = MyGestureDetector.class.getSimpleName();

        // for touch left or touch right events
        private static final int SWIPE_MIN_DISTANCE = 60;   //default is 120
        private static final int SWIPE_MAX_OFF_PATH = 250;
        private static final int SWIPE_THRESHOLD_VELOCITY = 200;

        @Override
        public boolean onDown(MotionEvent e) {

            Log.d(TAG, " on down events :" + e.getAction() );
            return true;
        }

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {

            Log.d(TAG, " on filing event, first velocityX :" + velocityX +
                    " second velocityY" + velocityY);
            try {
                if (Math.abs(e1.getY() - e2.getY()) &gt; SWIPE_MAX_OFF_PATH)
                    return false;
                // right to left swipe
                if(e1.getX() - e2.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY) {
                        onHorizonTouch(true);  // left

                }  else if (e2.getX() - e1.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY) {
                        onHorizonTouch(false); // right   

                }
            } catch (Exception e) {
                // nothing
            }
            return false;
        }

        void onHorizonTouch(Boolean toLeft){
            if(toLeft &amp;&amp; imageIdx&gt;0)
            {
                vs.setInAnimation(AnimationUtils.loadAnimation(
                        getApplicationContext(), R.anim.slide_right_in));
                // ??????
                vs.setOutAnimation(AnimationUtils.loadAnimation(
                        getApplicationContext(), R.anim.slide_left_out));
                PureTestActivity.this.vs.setImageResource(imageResId[--imageIdx]);
            }
            if(!toLeft &amp;&amp; imageIdx&lt;1)
            {
                vs.setInAnimation(AnimationUtils.loadAnimation(PureTestActivity.this,
                        android.R.anim.slide_in_left));
                vs.setOutAnimation(AnimationUtils.loadAnimation(PureTestActivity.this,
                        android.R.anim.slide_out_right));
                PureTestActivity.this.vs.setImageResource(imageResId[++imageIdx]);
            }

        };
    }
</code></pre>

<p>}       </p></li>
</ol>
