<p>You can't put this two things together. </p>

<p>There are two ways to put dynamic headers on requests with retrofit 2.0</p>

<p>1: put it only in method signature</p>

<pre><code>@Headers({
    "Content-Type: application/json"
})
@POST("/api/{id}/action/")
Call&lt;String&gt; postfn(@Header("Authorization") String authorization, @Path("id") String id, @Body String body);
</code></pre>

<p>2: using request interceptor to add fixed dynamic headers </p>

<pre><code>public class TraktvApiProvider implements Provider&lt;TraktvApi&gt; {

    public static final String BASE_URL = "https://api-v2launch.trakt.tv/";

    @Override
    public TraktvApi get() {
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(BASE_URL)
                .addConverterFactory(JacksonConverterFactory.create())
                .build();

        retrofit.client().interceptors().add(new LoggingInterceptor());

        return retrofit.create(TraktvApi.class);
    }

    private class LoggingInterceptor implements Interceptor {
        @Override
        public Response intercept(Chain chain) throws IOException {

            Request request = chain.request();

            request = request.newBuilder()
                    .addHeader("trakt-api-version", "2")
                    .addHeader("trakt-api-key", "[YOUR-API-KEY]")
                    .build();

            Response response = chain.proceed(request);

            String bodyString = response.body().string();

            Log.d("Retrofit", "---------------------------------- REQUEST ----------------------------------");
            Log.d("Retrofit", String.format("%s - %s", request.method(), request.url()));
            Log.d("Retrofit", request.headers().toString());
            Log.d("Retrofit", "---------------------------------- REQUEST ----------------------------------");
            Log.d("Retrofit", "---------------------------------- RESPONSE ----------------------------------");
            Log.d("Retrofit", response.headers().toString());
            Log.d("Retrofit", "Body: " + bodyString);
            Log.d("Retrofit", "---------------------------------- RESPONSE ----------------------------------");

            return response.newBuilder()
                    .body(ResponseBody.create(response.body().contentType(), bodyString))
                    .build();
        }
    }
}
</code></pre>
