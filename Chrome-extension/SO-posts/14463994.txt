<p>You can use <a href="https://commons.apache.org/io/apidocs/org/apache/commons/io/IOUtils.html#read%28java.io.Reader,%20char%5b%5d%29" rel="nofollow"><code>read(Reader, char[])</code></a> from Apache Commons IO. Just pass a 2000-character buffer to it and it will fill it with as many characters as possible, up to 2000.</p>

<p>Be sure you understand the objections in the other answers/comments, in particular:</p>

<ul>
<li>Don't use <code>Buffered...</code> wrappers, it goes against your intentions.</li>
<li>If you read textual data, then use a <code>Reader</code> to read 2000 <em>characters</em> instead of <code>InputStream</code> reading 2000 <em>bytes</em>. The proper procedure would be to determine the character encoding from the headers of a response (<code>Content-Type</code>) and set that encoding into <code>InputStreamReader</code>.</li>
<li>Calling plain <code>read(char[])</code> on a <code>Reader</code> will not fully fill the array you give to it. It can read as little as one character no matter how big the array is!</li>
<li>Don't forget to close the reader afterwards.</li>
</ul>

<p>Other than that, I'd strongly recommend you to use <a href="https://hc.apache.org/httpcomponents-client-ga/" rel="nofollow">Apache HttpClient</a> in favor of <code>java.net.URLConnection</code>. It's much more flexible.</p>

<hr>

<p><strong>Edit:</strong> To understand the difference between <code>Reader.read</code> and <code>IOUtils.read</code>, it's worth examining the source of the latter:</p>

<pre><code>public static int read(Reader input, char[] buffer,
                       int offset, int length)
    throws IOException
{
    if (length &lt; 0) {
        throw new IllegalArgumentException("Length must not be negative: " + length);
    }
    int remaining = length;
    while (remaining &gt; 0) {
        int location = length - remaining;
        int count = input.read(buffer, offset + location, remaining);
        if (EOF == count) { // EOF
            break;
        }
        remaining -= count;
    }
    return length - remaining;
}
</code></pre>

<p>Since <code>Reader.read</code> can read less characters than a given length (we only know it's at least 1 and at most the length), we need to iterate calling it until we get the amount we want.</p>
