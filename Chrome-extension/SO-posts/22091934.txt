<blockquote>
  <p>Why is it beneficial to implement the Comparable interface instead of
  just defining my own compareTo method?</p>
</blockquote>

<p>You can define your own method, but all the classes, which need to compare must know it. Comparable is there in Java api for this purpose and all peoples know it well. Comparable interface is a super type for many classes, regardless of their origin. So, it's commonly used in all major frameworks.   </p>

<blockquote>
  <p>Another thing, how does the java.util.Arrays.sort(Object[] o) method
  relate to the Comparable interface such that I HAVE to implement the
  Comparable interface to be able to use the Arrays.sort(Object[] o)
  method?</p>
</blockquote>

<p><code>Arrays.sort()</code> method internally calls the <code>compareTo()</code> method of <code>Comparable</code> classes to sort the content.</p>

<p>Check the source code of <a href="http://www.docjar.com/html/api/java/util/Arrays.java.html" rel="nofollow"><code>Arrays.sort()</code></a>, the delegating method use the <code>Comparabble#compareTo()</code> method</p>

<pre><code>private static void mergeSort(Object[] src,
                  Object[] dest,
                  int low,
                  int high,
                  int off) {
    int length = high - low;

    // Insertion sort on smallest arrays
        if (length &lt; INSERTIONSORT_THRESHOLD) {
            for (int i=low; i&lt;high; i++)
                for (int j=i; j&gt;low &amp;&amp;
             ((Comparable) dest[j-1]).compareTo(dest[j])&gt;0; j--)
                    swap(dest, j, j-1);
            return;
        }

        // Recursively sort halves of dest into src
        int destLow  = low;
        int destHigh = high;
        low  += off;
        high += off;
        int mid = (low + high) &gt;&gt;&gt; 1;
        mergeSort(dest, src, low, mid, -off);
        mergeSort(dest, src, mid, high, -off);

        // If list is already sorted, just copy from src to dest.  This is an
        // optimization that results in faster sorts for nearly ordered lists.
        if (((Comparable)src[mid-1]).compareTo(src[mid]) &lt;= 0) {
            System.arraycopy(src, low, dest, destLow, length);
            return;
        }

        // Merge sorted halves (now in src) into dest
        for(int i = destLow, p = low, q = mid; i &lt; destHigh; i++) {
            if (q &gt;= high || p &lt; mid &amp;&amp; ((Comparable)src[p]).compareTo(src[q])&lt;=0)
                dest[i] = src[p++];
            else
                dest[i] = src[q++];
        }
    }
</code></pre>
