<p>You can use the setNumberFormatOverride() method in the NumberAxis class to provide a custom formatter.  The only catch is that you need a NumberFormat subclass that can convert numbers representing seconds to the format HH:MM:SS.  I don't know if there is an existing one, but it is not hard to write your own.  Here is my first attempt, it seems to work but will need some testing (I might include this in the next JFreeChart release):</p>

<pre><code>package org.jfree.chart.util;

import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.NumberFormat;
import java.text.ParsePosition;

/**
 * A custom number formatter that formats numbers (in seconds) as HH:MM:SS.
 *
 * @since 1.0.17
 */
public class HMSNumberFormat extends NumberFormat {

    private NumberFormat hourFormatter = new DecimalFormat("00");
    private NumberFormat minuteFormatter = new DecimalFormat("00");
    private NumberFormat secondFormatter = new DecimalFormat("00");

    /**
     * Creates a new instance.
     */
    public HMSNumberFormat() {

    }

    /**
     * Formats the specified number as a string of the form HH:MM:SS.  The 
     * decimal fraction is ignored.
     *
     * @param number  the number to format.
     * @param toAppendTo  the buffer to append to (ignored here).
     * @param pos  the field position (ignored here).
     *
     * @return The string buffer.
     */
    @Override
    public StringBuffer format(double number, StringBuffer toAppendTo,
            FieldPosition pos) {
        return format((long) number, toAppendTo, pos);
    }

    /**
     * Formats the specified number as a string of the form HH:MM:SS.
     *
     * @param number  the number to format.
     * @param toAppendTo  the buffer to append to (ignored here).
     * @param pos  the field position (ignored here).
     *
     * @return The string buffer.
     */
    @Override
    public StringBuffer format(long number, StringBuffer toAppendTo,
            FieldPosition pos) {
        StringBuffer sb = new StringBuffer();
        long hours = number / 3600;
        sb.append(this.hourFormatter.format(hours)).append(":");
        long remaining = number - (hours * 3600);
        long minutes = remaining / 60;
        sb.append(this.minuteFormatter.format(minutes)).append(":");
        long seconds = remaining - (minutes * 60);
        sb.append(this.secondFormatter.format(seconds));
        return sb;
    }

    /**
     * Parsing is not implemented, so this method always returns
     * &lt;code&gt;null&lt;/code&gt;.
     *
     * @param source  ignored.
     * @param parsePosition  ignored.
     *
     * @return Always &lt;code&gt;null&lt;/code&gt;.
     */
    @Override
    public Number parse (String source, ParsePosition parsePosition) {
        return null; // don't bother with parsing
    }

}
</code></pre>
