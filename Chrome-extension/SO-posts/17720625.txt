<p>Please try following code it may helpful for you:</p>

<pre><code>public class MainActivity extends ListActivity 
{

    private List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    List&lt;String&gt; mOriginalValues;

    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        final MyAdapter adapter = new MyAdapter(this, getModel());
        setListAdapter(adapter);

        EditText filterEditText = (EditText) findViewById(R.id.filterText);

        // Add Text Change Listener to EditText
        filterEditText.addTextChangedListener(new TextWatcher() 
        {

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) 
            {
                // Call back the Adapter with current character to Filter
                adapter.getFilter().filter(s.toString());
            }

            @Override
            public void beforeTextChanged(CharSequence s, int start, int count,int after) 
            {
            }

            @Override
            public void afterTextChanged(Editable s) 
            {
            }
        });
    }

    private List&lt;String&gt; getModel() {
        list.add("Linux");
        list.add("Windows7");
        list.add("Suse");
        list.add("Eclipse");
        list.add("Ubuntu");
        list.add("Solaris");
        list.add("Android");
        list.add("iPhone");
        list.add("Windows XP");
        return list;
    }

// Adapter Class            
public class MyAdapter extends BaseAdapter implements Filterable 
{

    List&lt;String&gt; arrayList;      
    List&lt;String&gt; mOriginalValues; // Original Values
    LayoutInflater inflater;

    public MyAdapter(Context context, List&lt;String&gt; arrayList) 
    {
        this.arrayList = arrayList;
        inflater = LayoutInflater.from(context);
    }

    @Override
    public int getCount() 
    {
        return arrayList.size();
    }

    @Override
    public Object getItem(int position) 
    {
        return position;
    }

    @Override
    public long getItemId(int position) 
    {
        return position;
    }

    private class ViewHolder 
    {
        TextView textView;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) 
    {

        ViewHolder holder = null;

        if (convertView == null) 
        {

            holder = new ViewHolder();
            convertView = inflater.inflate(R.layout.row, null);
            holder.textView = (TextView) convertView
                    .findViewById(R.id.listTxt);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        holder.textView.setText(arrayList.get(position));
        return convertView;
    }

    @Override
    public Filter getFilter() 
    {
        Filter filter = new Filter() 
        {

            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint,FilterResults results) 
            {

                arrayList = (List&lt;String&gt;) results.values; // has the filtered values
                notifyDataSetChanged();  // notifies the data with new filtered values
            }

            @Override
            protected FilterResults performFiltering(CharSequence constraint) 
            {
                FilterResults results = new FilterResults();        // Holds the results of a filtering operation in values
                List&lt;String&gt; FilteredArrList = new ArrayList&lt;String&gt;();

                if (mOriginalValues == null) 
                {
                    System.out.println("");
                    mOriginalValues = new ArrayList&lt;String&gt;(arrayList); // saves the original data in mOriginalValues
                }

                /********
                 * 
                 *  If constraint(CharSequence that is received) is null returns the mOriginalValues(Original) values
                 *  else does the Filtering and returns FilteredArrList(Filtered)  
                 *
                 ********/
                if (constraint == null || constraint.length() == 0) 
                {

                    // set the Original result to return  
                    results.count = mOriginalValues.size();
                    results.values = mOriginalValues;
                } 
                else 
                {
                    constraint = constraint.toString().toLowerCase();
                    for (int i = 0; i &lt; mOriginalValues.size(); i++) 
                    {
                        String data = mOriginalValues.get(i);
                        if (data.toLowerCase().startsWith(constraint.toString())) 
                        {
                            FilteredArrList.add(data);
                        }
                    }
                    // set the Filtered result to return
                    results.count = FilteredArrList.size();
                    results.values = FilteredArrList;
                }
                return results;
            }
        };
        return filter;
    }
}
}
</code></pre>
