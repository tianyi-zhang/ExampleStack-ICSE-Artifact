<p><strong>EDIT</strong></p>

<p>I also notice the  <code>toString()</code> underlying implementation issue, and about the element containing the separator but I thought I was being paranoid. </p>

<p>Since I've got two comments on that regard, I'm changing my answer to:</p>

<pre><code>    static String join( List&lt;String&gt; list , String replacement  ) {
        StringBuilder b = new StringBuilder();
        for( String item: list ) { 
            b.append( replacement ).append( item );
        }
        return b.toString().substring( replacement.length() );
    }
</code></pre>

<p>Which looks pretty similar to the original question.</p>

<p>So if you don't feel like adding the whole jar to your project you may use this. </p>

<p>I think there's nothing wrong with your original code. Actually, the alternative that everyone's is suggesting looks almost the same ( although it does a number of additional validations ) </p>

<p>Here it is, along with the  <a href="http://www.apache.org/licenses/LICENSE-2.0" rel="nofollow">Apache 2.0 license.</a></p>

<pre><code>public static String join(Iterator iterator, String separator) {
       // handle null, zero and one elements before building a buffer
       if (iterator == null) {
           return null;
       }
       if (!iterator.hasNext()) {
           return EMPTY;
       }
       Object first = iterator.next();
       if (!iterator.hasNext()) {
           return ObjectUtils.toString(first);
       }

       // two or more elements
       StringBuffer buf = new StringBuffer(256); // Java default is 16, probably too small
       if (first != null) {
           buf.append(first);
       }

       while (iterator.hasNext()) {
           if (separator != null) {
               buf.append(separator);
           }
           Object obj = iterator.next();
           if (obj != null) {
               buf.append(obj);
           }
       }
       return buf.toString();
   }
</code></pre>

<p>Now we know, thank you open source</p>
