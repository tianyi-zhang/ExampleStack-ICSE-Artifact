<p>There is no built-in general purpose Tuple4 class, but you can <em>easily</em> write your own general purpose arbitrary length Tuple classes, and there are a number of implementations available to base code on such as <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/tuple/MutableTriple.html" rel="nofollow">apache.commons.MutableTriple</a> (<a href="http://commons.apache.org/proper/commons-lang/apidocs/src-html/org/apache/commons/lang3/tuple/MutableTriple.html" rel="nofollow">source code here</a>).</p>

<p>There is also the <a href="http://www.javatuples.org/" rel="nofollow">javatuples</a> library which provides <em>Immutable</em> tuples up to 10 elements in length that you could base your implementation on (although I've not used it personally). Perhaps you could ask yourself if you even need mutability?</p>

<p>In fact, as others have already mentioned, I would strongly question the validity of a mutable Object with arbitrary value types - it's usually better to actually encapsulate a specific concept in a class than just passing around "bags of values".</p>

<p>Caveats aside, here's an example implementation, based on the apache MutableTriple class mentioned above that could be built upon. As always, you need to be very cautious using mutable variables in multi-threaded environments: Do not consider this code in any way threadsafe (I generally prefer immutability over mutability wherever possible).</p>

<pre><code>public class MutableTuple4&lt;A, B, C, D&gt; { 

    private static final long serialVersionUID = 1L;

    public A first; 
    public B second; 
    public C third; 
    public D fourth; 

    public MutableTuple4(A a, B b, C c, D d) { 
        this.first = a; 
        this.second = b; 
        this.third = c;
        this.fourth = d;
    } 

    public A getFirst() {
        return this.first;
    }

    public void setFirst(A first) {
        this.first = first;
    }

    // remaining getters and setters here...
    // etc...

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 23 * hash + Objects.hashCode(this.first);
        hash = 23 * hash + Objects.hashCode(this.second);
        hash = 23 * hash + Objects.hashCode(this.third);
        hash = 23 * hash + Objects.hashCode(this.fourth);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Tuple&lt;A, B, C, D&gt; other = (Tuple&lt;A, B, C, D&gt;) obj;
        if (!Objects.equals(this.first, other.first)) {
            return false;
        }
        if (!Objects.equals(this.second, other.second)) {
            return false;
        }
        if (!Objects.equals(this.third, other.third)) {
            return false;
        }
        if (!Objects.equals(this.fourth, other.fourth)) {
            return false;
        }
        return true;    
    } 

}
</code></pre>
