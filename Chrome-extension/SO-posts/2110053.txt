<p>Below an example how Apache Solr does it (SolrRequestParsers).</p>

<pre><code>  /**
   * Given a standard query string map it into solr params
   */
  public static MultiMapSolrParams parseQueryString(String queryString) 
  {
    Map&lt;String,String[]&gt; map = new HashMap&lt;String, String[]&gt;();
    if( queryString != null &amp;&amp; queryString.length() &gt; 0 ) {
      try {
        for( String kv : queryString.split( "&amp;" ) ) {
          int idx = kv.indexOf( '=' );
          if( idx &gt; 0 ) {
            String name = URLDecoder.decode( kv.substring( 0, idx ), "UTF-8");
            String value = URLDecoder.decode( kv.substring( idx+1 ), "UTF-8");
            MultiMapSolrParams.addParam( name, value, map );
          }
          else {
            String name = URLDecoder.decode( kv, "UTF-8" );
            MultiMapSolrParams.addParam( name, "", map );
          }
        }
      }
      catch( UnsupportedEncodingException uex ) {
        throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, uex );
      }
    }
    return new MultiMapSolrParams( map );
  }
</code></pre>

<p>Usage:</p>

<pre><code>MultiMapSolrParams params = SolrRequestParsers.parseQueryString( req.getQueryString() );
</code></pre>

<p><p>
<p></p>

<p>And an example how Jersey does it (UriComponent):</p>

<pre><code>/**
 * Decode the query component of a URI.
 * 
 * @param q the query component in encoded form.
 * @param decode true of the query parameters of the query component
 *        should be in decoded form.
 * @return the multivalued map of query parameters.
 */
public static MultivaluedMap&lt;String, String&gt; decodeQuery(String q, boolean decode) {
    MultivaluedMap&lt;String, String&gt; queryParameters = new MultivaluedMapImpl();

    if (q == null || q.length() == 0) {
        return queryParameters;
    }

    int s = 0, e = 0;
    do {
        e = q.indexOf('&amp;', s);

        if (e == -1) {
            decodeQueryParam(queryParameters, q.substring(s), decode);
        } else if (e &gt; s) {
            decodeQueryParam(queryParameters, q.substring(s, e), decode);
        }
        s = e + 1;
    } while (s &gt; 0 &amp;&amp; s &lt; q.length());

    return queryParameters;
}

private static void decodeQueryParam(MultivaluedMap&lt;String, String&gt; params,
        String param, boolean decode) {
    try {
        int equals = param.indexOf('=');
        if (equals &gt; 0) {
            params.add(
                    URLDecoder.decode(param.substring(0, equals), "UTF-8"),
                    (decode) ? URLDecoder.decode(param.substring(equals + 1), "UTF-8") : param.substring(equals + 1));
        } else if (equals == 0) {
            // no key declared, ignore
        } else if (param.length() &gt; 0) {
            params.add(
                    URLDecoder.decode(param, "UTF-8"),
                    "");
        }
    } catch (UnsupportedEncodingException ex) {
        // This should never occur
        throw new IllegalArgumentException(ex);
    }
}
</code></pre>
