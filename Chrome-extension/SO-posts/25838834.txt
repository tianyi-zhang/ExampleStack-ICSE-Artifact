<p>No need to create a new adapter. Just need to leverage the adapter's view type.  In your MyAdapter class, override the view type count.  Eg:</p>

<pre><code>@Override
public int getViewTypeCount() {
    return 2;
}
</code></pre>

<p>Next override the <code>getItemViewType</code> method to return whether it's a grid or list.  Eg:</p>

<pre><code>@Override
public int getItemViewType(int position) {
    return mIsListView ? 1 : 0;
}
</code></pre>

<p>Finally, in the <code>getView</code> method, check a positions item type in order to determine which layout to inflate.  You can then proceed to populate the view. Eg:</p>

<pre><code>@Override
public View getView(final int position, View convertView, ViewGroup parent) {
    View rowView = convertView;
    ViewHolder viewHolder;
    // reuse views
    if (rowView == null) {
        LayoutInflater inflater = context.getLayoutInflater();
        if (getItemViewType(position) == 1) {
            rowView = inflater.inflate(R.layout.list_view, parent, false);
        } else {
            rowView = inflater.inflate(R.layout.grid_view, parent, false);
        }

        // configure view holder
        viewHolder = new ViewHolder();
        viewHolder.text = (TextView) rowView.findViewById(R.id.TextView01);
        rowView.setTag(viewHolder);
    } else {
        viewHolder = (ViewHolder) rowView.getTag();
    } 

    holder.text.setText(mData.getName());
    return rowView;
}
</code></pre>

<p>Note, this example demonstrates just using the view type to determine which view to inflate. If you're data has to populate each view type differently, then you'll also need to use the view type to determine that.</p>
