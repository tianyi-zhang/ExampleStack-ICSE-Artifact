<p>Yes it is possible Your <code>RecyclerView.Adapter</code> can implement <code>Filterable</code>. After that you have to override <code>Filter getFilter()</code> method.</p>

<p>You have to define your own filter as is shown in the code below:</p>

<pre><code>@Override
public Filter getFilter() {
    return new YourFilterClass();
}
</code></pre>

<p><strong>YourFilterClass</strong></p>

<pre><code>class YourFilterClass extends Filter {

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            //Here you have to implement filtering way
            final FilterResults results = new FilterResults();
            //logic to filtering
            results.values = ...
            results.count = ...
            return results;
        }

        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            // here you can use result - (f.e. set in in adapter list)
        }
}
</code></pre>

<h1>Example</h1>

<pre><code>public class UserListAdapter extends RecyclerView.Adapter&lt;UserListAdapter.ViewHolder&gt; implements Filterable {

    private final List&lt;User&gt; userList;

    private final List&lt;User&gt; filteredUserList;

    private UserFilter userFilter;

    public UserListAdapter(Context context) {
        this.userList =new ArrayList&lt;&gt;();
        this.filteredUserList = new ArrayList&lt;&gt;();
    }


    ///... other methods

    @Override
    public Filter getFilter() {
       if(userFilter == null)
             userFilter = new UserFilter(this, userList);
        return userFilter;
    }

    private static class UserFilter extends Filter {

        private final UserListAdapter adapter;

        private final List&lt;User&gt; originalList;

        private final List&lt;User&gt; filteredList;

        private UserFilter(UserListAdapter adapter, List&lt;User&gt; originalList) {
            super();
            this.adapter = adapter;
            this.originalList = new LinkedList&lt;&gt;(originalList);
            this.filteredList = new ArrayList&lt;&gt;();
        }

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            filteredList.clear();
            final FilterResults results = new FilterResults();

            if (constraint.length() == 0) {
                filteredList.addAll(originalList);
            } else {
                final String filterPattern = constraint.toString().toLowerCase().trim();

                for (final User user : originalList) {
                    if (user.getName().contains(filterPattern)) {
                        filteredList.add(user);
                    }
                }
            }
            results.values = filteredList;
            results.count = filteredList.size();
            return results;
        }

        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            adapter.filteredUserList.clear();
            adapter.filteredUserList.addAll((ArrayList&lt;User&gt;) results.values);
            adapter.notifyDataSetChanged();
        }
    }
}
</code></pre>

<p>After that in the place when you want to filtering call:</p>

<pre><code>userListAdapter.getFilter().filter(text)
</code></pre>
