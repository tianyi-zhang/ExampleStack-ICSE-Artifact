<p>I suggest you use simple scheme - one <code>Activity</code>, many <code>Fragments</code>.</p>

<p>For example - you can create new project in <em>Android studio</em> with <code>Navigation Drawer Activity</code> (although it says "Navigation Drawer" in the new versions of <em>Android studio</em> activity will be created with <code>NavigationView</code>) - it will create one <code>MainActivity</code> for you.</p>

<p>For supporting <code>Fragment</code>s scheme, you need special container on your <code>Activity</code> for content of this fragments. Let's add <code>FrameLayout</code> into <code>layout/content_main.xml</code> file:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    app:layout_behavior="@string/appbar_scrolling_view_behavior"
    tools:context=".MainActivity"
    tools:showIn="@layout/app_bar_main"&gt;

    &lt;!-- The main content view --&gt;
    &lt;FrameLayout
        android:id="@+id/content_frame"
        android:layout_width="match_parent"
        android:layout_height="match_parent" /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>Note, that I created <code>FrameLayout</code> with <code>content_frame</code> id - we will use it later.</p>

<p>Then, for example, create two blank fragments - <code>BlankFragment1</code> and <code>BlankFragment2</code>.</p>

<p>And now look on code in <code>MainActivity</code>, but rather on <code>onNavigationItemSelected</code> method. By default, it looks like:</p>

<pre><code>@SuppressWarnings("StatementWithEmptyBody")
@Override
public boolean onNavigationItemSelected(MenuItem item) {
    // Handle navigation view item clicks here.
    int id = item.getItemId();

    if (id == R.id.nav_camara) {
        // Handle the camera action
    } else if (id == R.id.nav_gallery) {

    } else if (id == R.id.nav_slideshow) {

    } else if (id == R.id.nav_manage) {

    } else if (id == R.id.nav_share) {

    } else if (id == R.id.nav_send) {

    }

    DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
    drawer.closeDrawer(GravityCompat.START);
    return true;
}
</code></pre>

<p>Each <code>if</code> statement helps us to distinguish the menu items in the navigation view. Let's change this code to go away to<code>BlankFragment1</code> by clicking on <code>R.id.nav_camara</code> and go away to <code>BlankFragment2</code> by clicking on <code>R.id.nav_gallery</code>:</p>

<pre><code>@SuppressWarnings("StatementWithEmptyBody")
@Override
public boolean onNavigationItemSelected(MenuItem item) {
    // Handle navigation view item clicks here.

    Fragment fragment;
    switch (item.getItemId()) {
        case R.id.nav_camara:
            fragment = BlankFragment1.newInstance("param1", "param2");
            break;

        case R.id.nav_gallery:
            fragment = BlankFragment2.newInstance("param3", "param4");
            break;

        default:
            fragment = BlankFragment1.newInstance("param1", "param2");
    }

    // Insert the fragment by replacing any existing fragment
    FragmentManager fragmentManager = this.getSupportFragmentManager();
    fragmentManager.beginTransaction()
            .replace(R.id.content_frame, fragment)
            .commit();

    DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
    drawer.closeDrawer(GravityCompat.START);
    return true;
}
</code></pre>

<p>And launch the app. Now, you can change your fragments by clicking on this two icons (camera and gallery). Hope it helps you.</p>
