<p>This is an old post but I recently worked with setting up bluetooth module on an arduino and interfacing it with a Java program running on Ubuntu. So let me share some links that I found helpful.</p>

<p>By default BlueSMiRF bluetooth module works in SPP (Serial Port Protocol) mode. You can use the new SoftwareSerial library for writing the arduino code for bluetooth communication. This library allows you to send and receive data over the serial port via bluetooth. <a href="http://arduino.cc/en/Reference/SoftwareSerial" rel="nofollow">http://arduino.cc/en/Reference/SoftwareSerial</a> A lot of examples are available in that to get you started.</p>

<p>For the Java program running on the computer you can use RXTX library or java.comm library. This is a link containing various examples using RXTX library : <a href="http://rxtx.qbang.org/wiki/index.php/Examples" rel="nofollow">http://rxtx.qbang.org/wiki/index.php/Examples</a>. Using the RXTX library you can send and receive data via the serial port. </p>

<p>The java code using RXTX library to SEND data across serial port : (I have not tested it)</p>

<pre><code>import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;

import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class TwoWaySerialComm
{
    public TwoWaySerialComm()
    {
    super();
    }

    void connect ( String portName ) throws Exception
    {
    CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(portName);
    if ( portIdentifier.isCurrentlyOwned() )
    {
        System.out.println("Error: Port is currently in use");
    }
    else
    {
        CommPort commPort = portIdentifier.open(this.getClass().getName(),2000);

        if ( commPort instanceof SerialPort )
        {
            SerialPort serialPort = (SerialPort) commPort;
            serialPort.setSerialPortParams(57600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);

            //InputStream in = serialPort.getInputStream();
            OutputStream out = serialPort.getOutputStream();

            //(new Thread(new SerialReader(in))).start();
            (new Thread(new SerialWriter(out))).start();

        }
        else
        {
            System.out.println("Error: Only serial ports are handled by this example.");
        }
    }     
    }

    /** */
    /*public static class SerialReader implements Runnable 
    {
    InputStream in;

    public SerialReader ( InputStream in )
    {
        this.in = in;
    }

    public void run ()
    {
        byte[] buffer = new byte[1024];
        int len = -1;
        try
        {
            while ( ( len = this.in.read(buffer)) &gt; -1 )
            {
                System.out.print(new String(buffer,0,len));
            }
        }
        catch ( IOException e )
        {
            e.printStackTrace();
        }            
    }
    }*/

    /** */
    public static class SerialWriter implements Runnable 
    {
    OutputStream out;

    public SerialWriter ( OutputStream out )
    {
        this.out = out;
    }

    public void run ()
    {
        try
        {                
            int c = 0;
            while ( ( c = System.in.read()) &gt; -1 )
            {
                this.out.write(c);
            }                
        }
        catch ( IOException e )
        {
            e.printStackTrace();
        }            
    }
    }

    public static void main ( String[] args )
    {
    try
    {
        (new TwoWaySerialComm()).connect("COM3");
    }
    catch ( Exception e )
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    }
}
</code></pre>

<p>Corresponding arduino code for receiving the data (again its not tested) : </p>

<pre><code>#include &lt;SoftwareSerial.h&gt;  

int bluetoothTx = 2;  // TX-O pin of bluetooth mate, Arduino D2
int bluetoothRx = 3;  // RX-I pin of bluetooth mate, Arduino D3

SoftwareSerial bluetooth(bluetoothTx, bluetoothRx);

void setup()
{
  Serial.begin(9600);  // Begin the serial monitor at 9600bps
  bluetooth.begin(115200);  // The Bluetooth Mate defaults to 115200bps
  bluetooth.print("$$$");  // Enter command mode
  delay(100);  // Short delay, wait for the Mate to send back CMD
  bluetooth.println("U,9600,N");  // Temporarily Change the baudrate to 9600, no parity
  // 115200 can be too fast at times for NewSoftSerial to relay the data reliably
  bluetooth.begin(9600);  // Start bluetooth serial at 9600
}

void loop()
{
  if(bluetooth.available())  // If the bluetooth sent any characters
  {
    // Send any characters the bluetooth prints to the serial monitor
    Serial.print((char)bluetooth.read());  
  }
  /*if(Serial.available())  // If stuff was typed in the serial monitor
  {
    // Send any characters the Serial monitor prints to the bluetooth
    bluetooth.print((char)Serial.read());
  }*/

}
</code></pre>
