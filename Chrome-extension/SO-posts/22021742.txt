<p>Here is a hack - well, I wouldn't really call it a hack but something to try. Figured out that you could hide the <strong>X</strong> button while displaying the login web dialog.</p>

<p>If you look inside <strong>WebDialog.java</strong> inside Facebook Module under widget, you will find the button and all you need to do is comment out the code that adds it to the view. Here is the code inside <strong>onCreate()</strong> method:</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    setOnCancelListener(new OnCancelListener() {
        @Override
        public void onCancel(DialogInterface dialogInterface) {
            sendCancelToListener();
        }
    });

    spinner = new ProgressDialog(getContext());
    spinner.requestWindowFeature(Window.FEATURE_NO_TITLE);
    spinner.setMessage(getContext().getString(R.string.com_facebook_loading));
    spinner.setOnCancelListener(new OnCancelListener() {
        @Override
        public void onCancel(DialogInterface dialogInterface) {
            sendCancelToListener();
            WebDialog.this.dismiss();
        }
    });

    requestWindowFeature(Window.FEATURE_NO_TITLE);
    contentFrameLayout = new FrameLayout(getContext());

    // First calculate how big the frame layout should be
    calculateSize();
    getWindow().setGravity(Gravity.CENTER);

    // resize the dialog if the soft keyboard comes up
    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);

    /* Create the 'x' image, but don't add to the contentFrameLayout layout yet
     * at this point, we only need to know its drawable width and height
     * to place the webview
     */
    createCrossImage();

    /* Now we know 'x' drawable width and height,
     * layout the webview and add it the contentFrameLayout layout
     */
    int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();

    setUpWebView(crossWidth / 2 + 1);

    /* Finally add the 'x' image to the contentFrameLayout layout and
    * add contentFrameLayout to the Dialog view
    */
   //        contentFrameLayout.addView(crossImageView, new ViewGroup.LayoutParams(
   //                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

    setContentView(contentFrameLayout);
}
</code></pre>

<p>Here is how it looks without it:</p>

<p><img src="http://i.stack.imgur.com/IyU6A.png" alt="Hiding the Facebook Login cancel button"></p>

<p>You can then alternatively add your own cancel button for users to cancel out gracefully!</p>

<p><strong>EDIT -  Without Breaking Facebook's Terms of Service:</strong></p>

<p>This piece of code will actually handle two things when a user clicks the X button or denies access to your app:</p>

<ul>
<li>First, it will handle the exception for clicking <strong>X</strong> and also</li>
<li><p>Secondly, it will gracefully handle the exception for not giving permissions</p>

<pre><code>Session.openActiveSession(this, true, new Session.StatusCallback() {

    // callback when session changes state
    @Override
    public void call(Session session, SessionState state, Exception exception) {

        if (exception instanceof FacebookOperationCanceledException) {
            Log.d("Facebook", "User canceled!!");
            Intent intent = new Intent(FacebookActivity.this, MainActivity.class);

            startActivity(intent);
        }
       if (session.isOpened() &amp;&amp; session != null &amp;&amp; isPosted) {
            Intent intent = getIntent();

            path = (String) intent.getExtras().get("path");
            Log.d(TAG, "PATH" + path.toString());

            // if credentials, just get user name and password
            try {
                String creds = (String) intent.getExtras().get("onlyCredentials");
                credentials = Boolean.parseBoolean(creds);
            } catch (NullPointerException e) {
                e.getMessage();

                credentials = false;
            }

            if (credentials) {
                getCredentials(session);
            } else {
                doPosts(session, path);
            }
       }
    }
});
</code></pre></li>
</ul>

<p>That is how you handle this problem and I hope someone else finds it helpful. Good luck and thanks to @RED_ for responding to this question.</p>

<p><strong>NOTE</strong> 
You don't have to edit the Facebook Module anymore since you are letting users actually click the cancel button. Again, hiding the button might be against Facebook's Developer Terms of Use - you don't want to get sued.</p>
