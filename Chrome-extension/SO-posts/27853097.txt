<p>You need to seek back to the start of the InputStream after reading the bounds before calling decodeStream for a second time, otherwise you will end up with an invalid Bitmap. The easiest way is just to close the stream and open it again.</p>

<p>Try this code (note function is no longer static to allow calling getContentResolver() and you have pass in a Uri not an InputStream):</p>

<pre><code>public Bitmap getBitmapFromReturnedImage(Uri selectedImage, int reqWidth, int reqHeight) throws IOException {

    InputStream inputStream = getContentResolver().openInputStream(selectedImage);

    // First decode with inJustDecodeBounds=true to check dimensions
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeStream(inputStream, null, options);

    // Calculate inSampleSize
    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

    // close the input stream
    inputStream.close();

    // reopen the input stream
    inputStream = getContentResolver().openInputStream(selectedImage);      

    // Decode bitmap with inSampleSize set
    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeStream(inputStream, null, options);
}
</code></pre>

<p>call like this</p>

<pre><code>Uri selectedImage = data.getData();
imageBitmap = getBitmapFromReturnedImage(selectedImage, 800, 800);
</code></pre>
