<p>I've produced a partial solution: </p>

<ul>
<li>I take the BoundingBox currently visible on the map</li>
<li>get the distance between the corners of one of the sides</li>
<li>get the map size in pixels</li>
<li>calculate the amount of meters per pixel</li>
<li>multiply this value for the size of the marker icon</li>
</ul>

<p>Unfortunatly, it works well only for zoom levels >5.5. This is caused by the distance calculation, which gives a different result according to the position of the camera because of the spherical shape of the earth. </p>

<p>Here's the code if someone have some idea how to improve it:</p>

<pre><code>public double getRadius(){
        mapWidth = (double) mapFragment.getView().getWidth();
        LatLngBounds bb = map.getProjection().getVisibleRegion().latLngBounds;

        double distance = distance((bb.northeast.latitude - bb.southwest.latitude)/2, bb.northeast.longitude, (bb.northeast.latitude - bb.southwest.latitude)/2, bb.southwest.longitude);
        double metersPerPixel = distance / mapWidth;
        return 70*metersPerPixel;
    }

    private static double distance(double lat1, double lon1, double lat2, double lon2) {
        double theta = lon1 - lon2;
        double dist = Math.sin(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(deg2rad(theta));
        dist = Math.acos(dist);
        dist = rad2deg(dist);
        dist = dist * 60 * 1.1515;
        dist = (dist * 1.609344)*1000;

        return (dist);
    }

    private static double deg2rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    private static double rad2deg(double rad) {
        return (rad * 180 / Math.PI);
    }
</code></pre>

<p>code for calculating the distance found <a href="http://www.geodatasource.com/developers/java" rel="nofollow">here</a></p>
