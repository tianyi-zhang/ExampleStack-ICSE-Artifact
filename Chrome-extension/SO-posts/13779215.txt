<p>I'm late to the party but I followed Shiomi's link and translated the functions into Java. The result is an easy to follow and understand algorithm (I may be a little slow since I had a hard time understanding Bart Kiers' solution).</p>

<p>Here it is (the key is an int, replacing to String should be straightforward):</p>

<p><strong>Usage</strong></p>

<pre><code>    public void testProduct(){
        Map&lt;Integer, List&lt;String&gt;&gt; data =   new LinkedHashMap&lt;Integer, List&lt;String&gt;&gt;(){{                
            put(0, new ArrayList&lt;String&gt;(){{
                add("John"); add("Sarah");                      
            }});                
            put(1, new ArrayList&lt;String&gt;(){{
                add("Red"); add("Green"); add("Blue"); add("Orange");
            }});
            put(2, new ArrayList&lt;String&gt;(){{
                add("Apple"); add("Tomatoe"); add("Bananna");                   
            }});
    }};

        List&lt;String[]&gt; product =  GetCrossProduct(data);
        for(String[] o : product)
            System.out.println(Arrays.toString(o));

    }
</code></pre>

<p><strong>Result</strong></p>

<pre><code>[John, Red, Apple]
[John, Red, Tomatoe]
[John, Red, Bananna]
[John, Green, Apple]
[John, Green, Tomatoe]
[John, Green, Bananna]
[John, Blue, Apple]
[John, Blue, Tomatoe]
[John, Blue, Bananna]
[John, Orange, Apple]
[John, Orange, Tomatoe]
[John, Orange, Bananna]
[Sarah, Red, Apple]
[Sarah, Red, Tomatoe]
[Sarah, Red, Bananna]
[Sarah, Green, Apple]
[Sarah, Green, Tomatoe]
[Sarah, Green, Bananna]
[Sarah, Blue, Apple]
[Sarah, Blue, Tomatoe]
[Sarah, Blue, Bananna]
[Sarah, Orange, Apple]
[Sarah, Orange, Tomatoe]
[Sarah, Orange, Bananna]
</code></pre>

<p><strong>Cartesian Product Functions</strong></p>

<pre><code>    public static List&lt;String[]&gt; GetCrossProduct(Map&lt;Integer, List&lt;String&gt;&gt; lists)
    {
        List&lt;String[]&gt; results = new ArrayList&lt;String[]&gt;();
        GetCrossProduct(results, lists, 0, new String[(lists.size())]);
        return results;
    }

    private void GetCrossProduct(List&lt;String[]&gt; results, Map&lt;Integer, List&lt;String&gt;&gt; lists, int depth, String[] current)
    {
        for (int i = 0; i &lt; lists.get(depth).size(); i++)
        {
            current[depth] = lists.get(depth).get(i);            
            if (depth &lt; lists.keySet().size() - 1)
                GetCrossProduct(results, lists, depth + 1, current);
            else{
                results.add(Arrays.copyOf(current,current.length));                
            }
        }
    }       
</code></pre>
