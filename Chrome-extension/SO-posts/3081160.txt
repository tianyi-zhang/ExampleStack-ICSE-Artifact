<p>If you know in advance that that the numbers are in a specified range (i.e. from 1 to 13, according to your code), you can adopt a simple solution like the one from Peter Tillemans.</p>

<p>Another solution is to use a <code>Map</code> to store the frequencies of the numbers contained in the matrix.</p>

<pre><code>public static Map&lt;Integer, Integer&gt; frequency(int[][] matrix) {
    Map&lt;Integer, Integer&gt; frequencies = new HashMap&lt;Integer, Integer&gt;();

    for (int i = 0; i &lt; matrix.length; i++) {
        for (int j = 0; j &lt; matrix[i].length; j++) {
            Integer frequency = 0;

            if (frequencies.containsKey(matrix[i][j])) {
                frequency = frequencies.get(matrix[i][j]);
            }

            frequencies.put(matrix[i][j], frequency + 1);
        }
    }

    return frequencies;
}
</code></pre>

<p>If exposing the <code>Map</code> interface to the external code is not what you want, you can also write a custom data type to hold the results. In this way, you can hide the implementation of the results (arrays, maps, or anything else) and provide only the methods you really need.</p>

<pre><code>public class FrequencyResults {

    private Map&lt;Integer, Integer&gt; frequencies;

    public FrequencyResults() {
        frequencies = new HashMap&lt;Integer, Integer&gt;();
    }

    public void increment(int number) {
        Integer frequency = 0;

        if (frequencies.containsKey(number)) {
            frequency = frequencies.get(number);
        }

        frequencies.put(number, frequency + 1);
    }

    public int get(int number) {
        Integer frequency = 0;

        if (frequencies.containsKey(number)) {
            frequency = frequencies.get(number);
        }

        return frequency;
    }

}
</code></pre>

<p>Using this data type, the <code>frequency</code> function evolves in the following code. I think that, with this small rewriting, you can express more effectively what your code does.</p>

<pre><code>public static FrequencyResults frequency(int[][] matrix) {
    FrequencyResults results = new FrequencyResults();

    for (int i = 0; i &lt; matrix.length; i++) {
        for (int j = 0; j &lt; matrix[i].length; j++) {
            results.increment(matrix[i][j]);
        }
    }

    return results;
}
</code></pre>
