<p>You could use <code>AsyncTask</code>, you'll have to customize to fit your needs, but something like the following</p>

<hr>

<p>Async task has three primary methods:</p>

<ol>
<li><p><code>onPreExecute()</code> - most commonly used for setting up and starting a progress dialog</p></li>
<li><p><code>doInBackground()</code> - Makes connections and receives responses from the server (Do NOT try to assign response values to GUI elements, this is a common mistake, that cannot be done in a background thread).</p></li>
<li><code>onPostExecute()</code> - Here we are out of the background thread, so we can do user interface manipulation with the response data, or simply assign the response to specific variable types.</li>
</ol>

<hr>

<p>First we will start the class, initialize a <code>String</code> to hold the results outside of the methods but inside the class, then run the <code>onPreExecute()</code> method setting up a simple progress dialog.</p>

<pre><code>class MyAsyncTask extends AsyncTask&lt;String, String, Void&gt; {

    private ProgressDialog progressDialog = new ProgressDialog(MainActivity.this);
    InputStream inputStream = null;
    String result = ""; 

    protected void onPreExecute() {
        progressDialog.setMessage("Downloading your data...");
        progressDialog.show();
        progressDialog.setOnCancelListener(new OnCancelListener() {
            public void onCancel(DialogInterface arg0) {
                MyAsyncTask.this.cancel(true);
            }
        });
    }
</code></pre>

<p>Then we need to set up the connection and how we want to handle the response:</p>

<pre><code>    @Override
    protected Void doInBackground(String... params) {

        String url_select = "http://yoururlhere.com";

        ArrayList&lt;NameValuePair&gt; param = new ArrayList&lt;NameValuePair&gt;();

        try {
            // Set up HTTP post

            // HttpClient is more then less deprecated. Need to change to URLConnection
            HttpClient httpClient = new DefaultHttpClient();

            HttpPost httpPost = new HttpPost(url_select);
            httpPost.setEntity(new UrlEncodedFormEntity(param));
            HttpResponse httpResponse = httpClient.execute(httpPost);
            HttpEntity httpEntity = httpResponse.getEntity();

            // Read content &amp; Log
            inputStream = httpEntity.getContent();
        } catch (UnsupportedEncodingException e1) {
            Log.e("UnsupportedEncodingException", e1.toString());
            e1.printStackTrace();
        } catch (ClientProtocolException e2) {
            Log.e("ClientProtocolException", e2.toString());
            e2.printStackTrace();
        } catch (IllegalStateException e3) {
            Log.e("IllegalStateException", e3.toString());
            e3.printStackTrace();
        } catch (IOException e4) {
            Log.e("IOException", e4.toString());
            e4.printStackTrace();
        }
        // Convert response to string using String Builder
        try {
            BufferedReader bReader = new BufferedReader(new InputStreamReader(inputStream, "utf-8"), 8);
            StringBuilder sBuilder = new StringBuilder();

            String line = null;
            while ((line = bReader.readLine()) != null) {
                sBuilder.append(line + "\n");
            }

            inputStream.close();
            result = sBuilder.toString();

        } catch (Exception e) {
            Log.e("StringBuilding &amp; BufferedReader", "Error converting result " + e.toString());
        }
    } // protected Void doInBackground(String... params)
</code></pre>

<p>Lastly, here we will parse the return, in this example it was a JSON Array and then dismiss the dialog:</p>

<pre><code>    protected void onPostExecute(Void v) {
        //parse JSON data
        try {
            JSONArray jArray = new JSONArray(result);    
            for(i=0; i &lt; jArray.length(); i++) {

                JSONObject jObject = jArray.getJSONObject(i);

                String name = jObject.getString("name");
                String tab1_text = jObject.getString("tab1_text");
                int active = jObject.getInt("active");

            } // End Loop
            this.progressDialog.dismiss();
        } catch (JSONException e) {
            Log.e("JSONException", "Error: " + e.toString());
        } // catch (JSONException e)
    } // protected void onPostExecute(Void v)
} //class MyAsyncTask extends AsyncTask&lt;String, String, Void&gt;
</code></pre>
