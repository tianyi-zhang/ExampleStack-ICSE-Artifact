<p>Use this Route Class. This is working code.</p>

<pre><code>public class Route
{
    GoogleMap mMap;
    Context context;
    String lang;

    static String LANGUAGE_SPANISH = "es";
    static String LANGUAGE_ENGLISH = "en";
    static String LANGUAGE_FRENCH = "fr";
    static String LANGUAGE_GERMAN = "de";
    static String LANGUAGE_CHINESE_SIMPLIFIED = "zh-CN";
    static String LANGUAGE_CHINESE_TRADITIONAL = "zh-TW";

    static String TRANSPORT_DRIVING = "driving";
    static String TRANSPORT_WALKING = "walking";
    static String TRANSPORT_BIKE = "bicycling";
    static String TRANSPORT_TRANSIT = "transit";

    static ArrayList&lt;Polyline&gt; Polyline ;
    static ArrayList&lt;Marker&gt; markerPrevious;

    public boolean drawRoute(GoogleMap map, Context c, ArrayList&lt;LatLng&gt; points, boolean withIndications, String language, boolean optimize)
    {
        mMap = map;
        context = c;
        lang = language;
        if (points.size() == 2)
        {
            String url = makeURL(points.get(0).latitude, points.get(0).longitude, points.get(1).latitude, points.get(1).longitude, "driving");
            new connectAsyncTask(url, withIndications).execute();
            return true;
        }
        else if (points.size() &gt; 2)
        {
            String url = makeURL(points, "driving", optimize);
            new connectAsyncTask(url, withIndications).execute();
            return true;
        }

        return false;

    }

    public boolean drawRoute(GoogleMap map, Context c, ArrayList&lt;LatLng&gt; points, String language, boolean optimize)
    {
        mMap = map;
        context = c;
        lang = language;
        if (points.size() == 2)
        {
            String url = makeURL(points.get(0).latitude, points.get(0).longitude, points.get(1).latitude, points.get(1).longitude, "driving");
            new connectAsyncTask(url, false).execute();
            return true;
        }
        else if (points.size() &gt; 2)
        {
            String url = makeURL(points, "driving", optimize);
            new connectAsyncTask(url, false).execute();
            return true;
        }

        return false;

    }

    public boolean drawRoute(GoogleMap map, Context c, ArrayList&lt;LatLng&gt; points, String mode, boolean withIndications, String language,
            boolean optimize)
    {
        mMap = map;
        context = c;
        lang = language;
        if (points.size() == 2)
        {
            String url = makeURL(points.get(0).latitude, points.get(0).longitude, points.get(1).latitude, points.get(1).longitude, mode);
            new connectAsyncTask(url, withIndications).execute();
            return true;
        }
        else if (points.size() &gt; 2)
        {
            String url = makeURL(points, mode, optimize);
            new connectAsyncTask(url, withIndications).execute();
            return true;
        }

        return false;

    }

    //

    public void drawRoute(GoogleMap map, Context c, LatLng source, LatLng dest, boolean withIndications, String language)
    {
        mMap = map;
        context = c;

        String url = makeURL(source.latitude, source.longitude, dest.latitude, dest.longitude, "driving");
        new connectAsyncTask(url, withIndications).execute();
        lang = language;

    }

    public void drawRoute(GoogleMap map, Context c, LatLng source, LatLng dest, String language)
    {
        mMap = map;
        context = c;

        String url = makeURL(source.latitude, source.longitude, dest.latitude, dest.longitude, "driving");
        new connectAsyncTask(url, false).execute();
        lang = language;

    }

    public void drawRoute(GoogleMap map, Context c, LatLng source, LatLng dest, String mode, boolean withIndications, String language)
    {
        mMap = map;
        context = c;

        String url = makeURL(source.latitude, source.longitude, dest.latitude, dest.longitude, mode);
        new connectAsyncTask(url, withIndications).execute();
        lang = language;

    }

    private String makeURL(ArrayList&lt;LatLng&gt; points, String mode, boolean optimize)
    {
        StringBuilder urlString = new StringBuilder();

        if (mode == null)
            mode = "driving";

        urlString.append("http://maps.googleapis.com/maps/api/directions/json");
        urlString.append("?origin=");// from
        urlString.append(points.get(0).latitude);
        urlString.append(',');
        urlString.append(points.get(0).longitude);
        urlString.append("&amp;destination=");
        urlString.append(points.get(points.size() - 1).latitude);
        urlString.append(',');
        urlString.append(points.get(points.size() - 1).longitude);

        urlString.append("&amp;waypoints=");
        if (optimize)
            urlString.append("optimize:true|");
        urlString.append(points.get(1).latitude);
        urlString.append(',');
        urlString.append(points.get(1).longitude);

        for (int i = 2; i &lt; points.size() - 1; i++)
        {
            urlString.append('|');
            urlString.append(points.get(i).latitude);
            urlString.append(',');
            urlString.append(points.get(i).longitude);
        }

        urlString.append("&amp;sensor=true&amp;mode=" + mode);

        return urlString.toString();
    }

    private String makeURL(double sourcelat, double sourcelog, double destlat, double destlog, String mode)
    {
        StringBuilder urlString = new StringBuilder();

        if (mode == null)
            mode = "driving";

        urlString.append("http://maps.googleapis.com/maps/api/directions/json");
        urlString.append("?origin=");// from
        urlString.append(Double.toString(sourcelat));
        urlString.append(",");
        urlString.append(Double.toString(sourcelog));
        urlString.append("&amp;destination=");// to
        urlString.append(Double.toString(destlat));
        urlString.append(",");
        urlString.append(Double.toString(destlog));
        urlString.append("&amp;sensor=false&amp;mode=" + mode + "&amp;alternatives=true&amp;language=" + lang);
        return urlString.toString();
    }

    private List&lt;LatLng&gt; decodePoly(String encoded)
    {

        List&lt;LatLng&gt; poly = new ArrayList&lt;LatLng&gt;();
        int index = 0, len = encoded.length();
        int lat = 0, lng = 0;

        while (index &lt; len)
        {
            int b, shift = 0, result = 0;
            do
            {
                b = encoded.charAt(index++) - 63;
                result |= (b &amp; 0x1f) &lt;&lt; shift;
                shift += 5;
            }
            while (b &gt;= 0x20);
            int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
            lat += dlat;

            shift = 0;
            result = 0;
            do
            {
                b = encoded.charAt(index++) - 63;
                result |= (b &amp; 0x1f) &lt;&lt; shift;
                shift += 5;
            }
            while (b &gt;= 0x20);
            int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
            lng += dlng;

            LatLng p = new LatLng((((double) lat / 1E5)), (((double) lng / 1E5)));
            poly.add(p);
        }

        return poly;
    }

    private class connectAsyncTask extends AsyncTask&lt;Void, Void, String&gt;
    {
        private ProgressDialog progressDialog;
        String url;
        boolean steps;

        connectAsyncTask(String urlPass, boolean withSteps)
        {
            url = urlPass;
            steps = withSteps;

        }

        @Override
        protected void onPreExecute()
        {
            // TODO Auto-generated method stub
            super.onPreExecute();
            progressDialog = new ProgressDialog(context);
            progressDialog.setMessage("Fetching route, Please wait...");
            progressDialog.setIndeterminate(true);
            progressDialog.show();
        }

        @Override
        protected String doInBackground(Void... params)
        {
            JSONParser jParser = new JSONParser();
            String json = jParser.getJSONFromUrl(url);
            return json;
        }

        @Override
        protected void onPostExecute(String result)
        {
            super.onPostExecute(result);
            progressDialog.hide();
            if (result != null)
            {
                drawPath(result, steps);
            }
        }
    }

    private void drawPath(String result, boolean withSteps)
    {

        try
        {
            //Tranform the string into a json object
            final JSONObject json = new JSONObject(result);
            JSONArray routeArray = json.getJSONArray("routes");
            JSONObject routes = routeArray.getJSONObject(0);
            JSONObject overviewPolylines = routes.getJSONObject("overview_polyline");
            String encodedString = overviewPolylines.getString("points");
            List&lt;LatLng&gt; list = decodePoly(encodedString);
            if(Polyline != null)
            {
                for (int i = 0; i &lt; Polyline.size(); i++)
                {
                    Polyline line = Polyline.get(i);
                    line.remove();
                }
                Polyline.clear();
            }
            else
            {
                Polyline = new ArrayList&lt;Polyline&gt;();
            }
            for (int z = 0; z &lt; list.size() - 1; z++)
            {
                LatLng src = list.get(z);
                LatLng dest = list.get(z + 1);

                Polyline line = mMap.addPolyline(new PolylineOptions()
                        .add(new LatLng(src.latitude, src.longitude), new LatLng(dest.latitude, dest.longitude)).width(4).color(Color.BLUE)
                        .geodesic(true));

                Polyline.add(line);

            }


            if(markerPrevious != null)
            {
                for (int i = 0; i &lt; markerPrevious.size(); i++)
                {
                    Marker marker = markerPrevious.get(i);
                    marker.remove();
                }
                markerPrevious.clear();
            }
            else
            {
                markerPrevious = new ArrayList&lt;Marker&gt;();
            }

            if (withSteps)
            {
                JSONArray arrayLegs = routes.getJSONArray("legs");
                JSONObject legs = arrayLegs.getJSONObject(0);
                JSONArray stepsArray = legs.getJSONArray("steps");
                //put initial point

                for (int i = 0; i &lt; stepsArray.length(); i++)
                {
                    Step step = new Step(stepsArray.getJSONObject(i));
                    Marker marker = mMap.addMarker(new MarkerOptions().position(step.location).title(step.distance).snippet(step.instructions)
                            .icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE)));
                    markerPrevious.add(marker);
                }
            }

        }
        catch (JSONException e)
        {

        }
    }

    /**
     * Class that represent every step of the directions. It store distance, location and instructions
     */
    private class Step
    {
        public String distance;
        public LatLng location;
        public String instructions;

        Step(JSONObject stepJSON)
        {
            JSONObject startLocation;
            try
            {

                distance = stepJSON.getJSONObject("distance").getString("text");
                startLocation = stepJSON.getJSONObject("start_location");
                location = new LatLng(startLocation.getDouble("lat"), startLocation.getDouble("lng"));
                try
                {
                    instructions = URLDecoder.decode(Html.fromHtml(stepJSON.getString("html_instructions")).toString(), "UTF-8");
                }
                catch (UnsupportedEncodingException e)
                {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                ;

            }
            catch (JSONException e)
            {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

}
</code></pre>

<p>Call :</p>

<pre><code>ArrayList&lt;LatLng&gt; allatlng = new ArrayList&lt;LatLng&gt;();
                    LatLng latlng = new LatLng(Double.parseDouble(strDestlat), Double.parseDouble(strDestlng));
                    allatlng.add(latlng);
                    LatLng latlng1 = new LatLng(Double.parseDouble(strCurrentLat), Double.parseDouble(strCurrentLong));
                    allatlng.add(latlng1);

                    Route route = new Route();
                    route.drawRoute(googleMap, Home.this, allatlng, true, Route.LANGUAGE_ENGLISH, true);
</code></pre>
