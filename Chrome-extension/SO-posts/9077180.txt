<p>If you trace around the OpenJDK (assuming you have a network connection) you get to <code>SocketInputStream.skip(long)</code></p>

<pre><code>/**
 * Skips n bytes of input.
 * @param n the number of bytes to skip
 * @return  the actual number of bytes skipped.
 * @exception IOException If an I/O error has occurred.
 */
public long skip(long numbytes) throws IOException {
    if (numbytes &lt;= 0) {
        return 0;
    }
    long n = numbytes;
    int buflen = (int) Math.min(1024, n);
    byte data[] = new byte[buflen];
    while (n &gt; 0) {
        int r = read(data, 0, (int) Math.min((long) buflen, n));
        if (r &lt; 0) {
            break;
        }
        n -= r;
    }
    return numbytes - n;
}
</code></pre>

<p>This appears to read all the data until the connection is closed (or you read 9 Exa-bytes ;)</p>

<p>EDIT: The maximum read size of 1024 bytes is slightly surprising given packets of 1.5 KB is fairly common (when sends lots of data)</p>
