<p>After some searches, I find the solution. The <code>onActionViewCollapsed</code> works but you had an unexpected behaviour (icon jumps to left, up indicator still here...) <em>- this (hard) solution was suggested in my first and previous answer</em>, and I was persuaded by use of <code>collapseActionView</code> method. However, <code>SearchView.collapseActionView()</code> was not working because according to the <a href="http://developer.android.com/reference/android/view/MenuItem.html#collapseActionView%28%29" rel="nofollow">Documentation</a>:  </p>

<blockquote>
  <p>Collapse the action view associated with <strong>this menu item.</strong>  </p>
</blockquote>

<p>It's related to the <code>MenuItem</code> and not to the <code>SearchView</code> widget. That's why you had this error when you used this method:  </p>

<blockquote>
  <p>The method <em>collapseActionView()</em> is undefined for <strong>the type SearchView</strong>  </p>
</blockquote>

<p>Then, the solution is to create a <code>Menu</code> variable as follows:  </p>

<pre><code> // At the top of your class
 private Menu mMenu;

 // onCreateOptionsMenu method
 @Override
 public boolean onCreateOptionsMenu(Menu menu) {
      this.mMenu = menu; // init the variable
      // other stuff..
      return true;
 }

 // call the collapseActionView method
 public boolean onQueryTextSubmit(String query) {
      searchView.setIconified(true);
      searchView.clearFocus();
      // call your request, do some stuff..

      // collapse the action view
      if (mMenu != null) { 
          (mMenu.findItem(R.id.menu_search2)).collapseActionView();
      }
      return false;
 }
</code></pre>

<p>Or another might be to avoid the implement <code>SearchView.OnQueryTextListener</code> and to do it inside <code>onCreateOptionsMenu</code> as follows:  </p>

<pre><code>@Override
// make your Menu as 'final' variable
public void onCreateOptionsMenu (final Menu menu, MenuInflater inflater) {
    searchView = (SearchView) menu.findItem(R.id.menu_search2).getActionView();
    // call the query listener directly on the SearchView
    searchView.setOnQueryTextListener(new OnQueryTextListener() {
        @Override
        public boolean onQueryTextSubmit(String query) {
            searchView.setIconified(true);
            searchView.clearFocus();

            // call the request here

            // call collapse action view on 'MenuItem'
            (menu.findItem(R.id.menu_search2)).collapseActionView();

            return false;
        }
        @Override
        public boolean onQueryTextChange(String newText) { return false; }
    });
    searchView.setIconified(false);
}  
</code></pre>

<p>This will resolve the issue for sure. Happy coding!</p>
