<p>I am confused about your "zooming" or you are confused about it.
When you move the View matrix(changing eyeZ) you don't zoom in or out, you just move the camera.
Yes, moving the camera closer to an object will make it look bigger(in case of perspective projection) but it's not zooming.
You zoom by changing the focal length or view angle of the camera. You change the "persepectiveness" of your camera.
Just like if you have a real camera simply walking toward your subject of photography is different than using the camera's zoom(Assuming it has a mechanical zoom).</p>

<p>In order to really zoom on something(if that is actually what you want) you will have to change the "ratio" in Matrix.frustumM.
So you can make objects "become bigger" on the screen without having to worry about the object being clipped by the near plane. 
However, it will also change the perspective.
The more you zoom the more it will look like orthographic projection.</p>

<p>I think what you are trying to achieve is flying inside a model of a building. For that you don't need to dynamically adjust the zoom of the camera. But you do need to adjust the front and end planes.</p>

<p>I think I know what is the source of your confusion.
When you change the near plane of the frustum but keep the ratio fixed, you actually change the zoom and view angle.
Because the projection matrix's x and y focal values are calculated by the near plane divided by the left/right and top/bottom.
The left, right and top, bottom in Matrix.frustumM are actually the dimensions of the near plane.</p>

<p>Here is the source code of frustumM. You can see x and y which are the focal point are calculated using only the near plane and not the far plane.
If you want to maintain the zoom or viewing angle and change the near plane, you will have to multiply left, right(ratio in your case) and top, bottom(1 in your case) by the ratio between the original near depth and the new near depth.</p>

<pre><code>public static void frustumM(float[] m, int offset,
        float left, float right, float bottom, float top,
        float near, float far) {
    if (left == right) {
        throw new IllegalArgumentException("left == right");
    }
    if (top == bottom) {
        throw new IllegalArgumentException("top == bottom");
    }
    if (near == far) {
        throw new IllegalArgumentException("near == far");
    }
    if (near &lt;= 0.0f) {
        throw new IllegalArgumentException("near &lt;= 0.0f");
    }
    if (far &lt;= 0.0f) {
        throw new IllegalArgumentException("far &lt;= 0.0f");
    }
    final float r_width  = 1.0f / (right - left);
    final float r_height = 1.0f / (top - bottom);
    final float r_depth  = 1.0f / (near - far);
    final float x = 2.0f * (near * r_width);
    final float y = 2.0f * (near * r_height);
    final float A = 2.0f * ((right + left) * r_width);
    final float B = (top + bottom) * r_height;
    final float C = (far + near) * r_depth;
    final float D = 2.0f * (far * near * r_depth);
    m[offset + 0] = x;
    m[offset + 5] = y;
    m[offset + 8] = A;
    m[offset +  9] = B;
    m[offset + 10] = C;
    m[offset + 14] = D;
    m[offset + 11] = -1.0f;
    m[offset +  1] = 0.0f;
    m[offset +  2] = 0.0f;
    m[offset +  3] = 0.0f;
    m[offset +  4] = 0.0f;
    m[offset +  6] = 0.0f;
    m[offset +  7] = 0.0f;
    m[offset + 12] = 0.0f;
    m[offset + 13] = 0.0f;
    m[offset + 15] = 0.0f;
}
</code></pre>
