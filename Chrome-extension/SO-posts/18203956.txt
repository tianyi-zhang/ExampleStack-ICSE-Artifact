<p>I wrote my own methods to get dominant color:</p>

<p><strong>Method 1</strong> (My technique)</p>

<ol>
<li>Reduce to <code>ARGB_4444</code> color space</li>
<li>Compute the maximum occurrence of individual RGB elements and obtaining 3 distinctive maximum values</li>
<li><p>Combining maximum values to dominant RGB color</p>

<pre><code>public int getDominantColor1(Bitmap bitmap) {

if (bitmap == null)
    throw new NullPointerException();

int width = bitmap.getWidth();
int height = bitmap.getHeight();
int size = width * height;
int pixels[] = new int[size];

Bitmap bitmap2 = bitmap.copy(Bitmap.Config.ARGB_4444, false);

bitmap2.getPixels(pixels, 0, width, 0, 0, width, height);

final List&lt;HashMap&lt;Integer, Integer&gt;&gt; colorMap = new ArrayList&lt;HashMap&lt;Integer, Integer&gt;&gt;();
colorMap.add(new HashMap&lt;Integer, Integer&gt;());
colorMap.add(new HashMap&lt;Integer, Integer&gt;());
colorMap.add(new HashMap&lt;Integer, Integer&gt;());

int color = 0;
int r = 0;
int g = 0;
int b = 0;
Integer rC, gC, bC;
for (int i = 0; i &lt; pixels.length; i++) {
    color = pixels[i];

    r = Color.red(color);
    g = Color.green(color);
    b = Color.blue(color);

    rC = colorMap.get(0).get(r);
    if (rC == null)
        rC = 0;
    colorMap.get(0).put(r, ++rC);

    gC = colorMap.get(1).get(g);
    if (gC == null)
        gC = 0;
    colorMap.get(1).put(g, ++gC);

    bC = colorMap.get(2).get(b);
    if (bC == null)
        bC = 0;
    colorMap.get(2).put(b, ++bC);
}

int[] rgb = new int[3];
for (int i = 0; i &lt; 3; i++) {
    int max = 0;
    int val = 0;
    for (Map.Entry&lt;Integer, Integer&gt; entry : colorMap.get(i).entrySet()) {
        if (entry.getValue() &gt; max) {
            max = entry.getValue();
            val = entry.getKey();
        }
    }
    rgb[i] = val;
}

int dominantColor = Color.rgb(rgb[0], rgb[1], rgb[2]);

return dominantColor;
 }
</code></pre></li>
</ol>

<p><strong>Method 2</strong> (Old technique)</p>

<ol>
<li>Reduce to <code>ARGB_4444</code> color space</li>
<li><p>Compute the occurrence of each color and finding the maximum one as dominant color</p>

<pre><code>public int getDominantColor2(Bitmap bitmap) {
if (bitmap == null)
    throw new NullPointerException();

int width = bitmap.getWidth();
int height = bitmap.getHeight();
int size = width * height;
int pixels[] = new int[size];

Bitmap bitmap2 = bitmap.copy(Bitmap.Config.ARGB_4444, false);

bitmap2.getPixels(pixels, 0, width, 0, 0, width, height);

HashMap&lt;Integer, Integer&gt; colorMap = new HashMap&lt;Integer, Integer&gt;();

int color = 0;
Integer count = 0;
for (int i = 0; i &lt; pixels.length; i++) {
    color = pixels[i];
    count = colorMap.get(color);
    if (count == null)
        count = 0;
    colorMap.put(color, ++count);
}

int dominantColor = 0;
int max = 0;
for (Map.Entry&lt;Integer, Integer&gt; entry : colorMap.entrySet()) {
    if (entry.getValue() &gt; max) {
        max = entry.getValue();
        dominantColor = entry.getKey();
    }
}
return dominantColor;
}
</code></pre></li>
</ol>
