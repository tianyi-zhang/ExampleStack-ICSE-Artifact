<p>try this way make a class called packageinformation:</p>

<p>public class PackageInformation{</p>

<pre><code>private Context mContext;

public  PackageInformation(Context context){
    mContext=context;   
}


class InfoObject {
public String appname = "";
public String pname = "";
public String versionName = "";
public int versionCode = 0;
public Drawable icon;


public void InfoObjectAggregatePrint() {//not used yet
    Log.v(appname,appname + "\t" + pname + "\t" + versionName + "\t" + versionCode);
}
</code></pre>

<p>}
       private ArrayList getPackages() {
         ArrayList apps = getInstalledApps(false); /* false = no system packages */
    final int max = apps.size();
    for (int i=0; i

<pre><code> public ArrayList&lt;InfoObject&gt; getInstalledApps(boolean getSysPackages) {
ArrayList&lt;InfoObject&gt; res = new ArrayList&lt;InfoObject&gt;();        
List&lt;PackageInfo&gt; packs = mContext.getPackageManager().getInstalledPackages(0);
for(int i=0;i&lt;packs.size();i++) {
    PackageInfo p = packs.get(i);
    if ((!getSysPackages) &amp;&amp; (p.versionName == null)) {
        continue ;
    }
    InfoObject newInfo = new InfoObject();
    newInfo.appname = p.applicationInfo.loadLabel(mContext.getPackageManager()).toString();
    newInfo.pname = p.packageName;
    newInfo.versionName = p.versionName;
    newInfo.versionCode = p.versionCode;
    newInfo.icon = p.applicationInfo.loadIcon(mContext.getPackageManager());
    res.add(newInfo);
}
return res; 
 }


 }
</code></pre>

<p>tuck this away somewhere and now to access the info from your working class do this:</p>

<pre><code>  PackageInformation androidPackagesInfo=new PackageInformation(this);      
    ArrayList&lt;InfoObject&gt; appsData=androidPackagesInfo.getInstalledApps(true);


for (InfoObject info : appsData) {


            Toast.makeText(MainActivity.this, info.appname,2).show();
                Drawable somedrawable=info.icon;
</code></pre>

<p>}</p>
