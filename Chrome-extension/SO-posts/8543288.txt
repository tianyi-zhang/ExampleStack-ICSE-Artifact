<p>The answer is as @Mysticial sais, with the exception that the array needs to be copied within the merge method:</p>

<pre><code>private static void mergeSort(int[] a, int low , int high,int[] res)
{
    int mid = (low + high)  /2;
    if (low + 1 &lt; high)
    {
        //  Sort sub-parts
        mergeSort(a,low,mid,res);
        mergeSort(a,mid,high,res);

        //  Merge back to "res"
        merge(a,low,mid,high,res);
    }else{
        res[low] = a[low];
    }
}

private static void merge(int[] a, int low , int mid , int high,int[] res)
{

    int i = low;
    int j = mid;

    int k = low;   //  Use "low" instead of 0.

    while (i &lt; mid &amp;&amp; j &lt; high)
        if(a[i] &lt; a[j])
               res[k++] = a[i++];
        else
              res[k++] = a[j++];


    while(i &lt; mid)
        res[k++] = a[i++];

    while(j &lt; high)
        res[k++] =a[j++];

    //  Copy back to "a"
        for (int c = low; c &lt; high; c++){
            a[c] = res[c];
        }

}
</code></pre>

<p>At any rate, let it be noted that doing this will overwrite the original array... so you might want to wrap the call to mergeSort to avoid it:</p>

<pre><code>private static int[] mergeSort(int[] a){
    int[] b = new int[a.length];
    int[] tmp = new int[a.length];
    System.arraycopy(a, 0, b, 0, a.length);
    mergeSort(b, 0, b.length, tmp);
    return b;
}

public static void main(String[] args) {
    int[] a = {45, 24, 53, 13, 54, 45, 63, 23};
    int[] res = mergeSort(a);
    for (int i = 0; i &lt; res.length; i++) {
        System.out.print(res[i] + ",");
    }
}
</code></pre>

<p>Hope this helps!</p>
