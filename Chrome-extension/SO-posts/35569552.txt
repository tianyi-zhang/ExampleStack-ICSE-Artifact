<p>Here is the modified code that worked for me.</p>

<pre><code>import java.util.Arrays;
public class CountingSort {
    public static void main(String[] args) {
        int[] array_A = {6, 0, 2, 0, 1, 3, 4, 6, 1, 3, 2};
        int[] array_B = new int[array_A.length];
        int k = 6;
        countingSort(array_A,array_B,k);
        System.out.println(Arrays.toString(array_B));
    }
    public static void countingSort(int[] A, int[] B, int k){
        int[] C = new int[k+1];
        for(int i = 0; i&lt;=k; i++){
            C[i] = 0;
        }
        for(int j = 0; j&lt;A.length; j++){
            C[A[j]] ++;
        }
        for(int i = 1; i&lt;=k; i++){
            C[i] += C[i-1];
        }
        for(int j = A.length-1; j&gt;=0; j--){
            B[--C[A[j]]] = A[j];
        }
    }
}
</code></pre>

<p>Ideally, instead of hard-coding the max value (6), you would find the max programmatically and size your count array accordingly. Such as</p>

<p>In main method</p>

<pre><code>countingSort(array_A,array_B,max(array_A));
</code></pre>

<p>Max method</p>

<pre><code>public int max(int[] arr){
    int m = 0;
    for(int i : arr){
        if(i&gt;m){
            m = i;
        }
    }
    return m;
}
</code></pre>
