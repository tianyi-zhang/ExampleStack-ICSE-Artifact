<p>Chances are the image you are loading is exceeding the RAM limit for your Android application. You should be using <code>inSampleSize</code> when you load the image in order to scale it down before it hogs all your memory.  I use this function to load all my images:</p>

<pre><code>public static Bitmap decodeFile(File file, int size){
    try {
        //Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inPurgeable = true;
        o.inInputShareable = true;
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(new FileInputStream(file),null,o);

        //The new size we want to scale to
        final int REQUIRED_SIZE = size;

        //Find the correct scale value. It should be the power of 2.
        int width_tmp=o.outWidth, height_tmp=o.outHeight;
        int scale=1;
        while(true){
            if(width_tmp/2&lt;REQUIRED_SIZE || height_tmp/2&lt;REQUIRED_SIZE)
                break;
            width_tmp/=2;
            height_tmp/=2;
            scale*=2;
        }

        //Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize=scale;
        return BitmapFactory.decodeStream(new FileInputStream(file), null, o2);
    } catch (FileNotFoundException e) {}
    return null;
}
</code></pre>

<p>There are a couple extra options in there, but the big one for your problem is the <code>inSampleSize</code> which must be a power of 2. Hope this helps.</p>
