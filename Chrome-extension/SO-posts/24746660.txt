<p>First part parsing- You can edit your <code>SearchItem</code> code to get and set <code>List&lt;InventoryItem&gt;</code> then in your parse method you can iterate through the jsonArray <code>searchObj.getJsonArray("inventory_item")</code> create <code>inventoryItem</code> object and add it to <code>inventoryList</code>, that you can later add to <code>searchItem</code>.</p>

<p>Create one separate pojo class for InventoryItem then Edit <code>SearchItem</code> class</p>

<pre><code>public class SearchItem{
 private List&lt;InventoryItem&gt; inventoryList;
 public void setInventoryList(List&lt;InventoryList&gt; inventoryList)
 {
  this.inventoryList = inventoryList;
 }
 public List&lt;InventoryItem&gt; getInventoryList()
 {
      return this.inventoryList;
 }
 //other object and get/set

}

private void parseJsonFeed(JSONArray response) {
    try {

        for (int i = 0; i &lt; response.length(); i++) {
            JSONObject searchObj = (JSONObject) response.get(i);

            SearchItem searchItem = new SearchItem();
            searchItem.setId(searchObj.getInt("id"));

            searchItem.setProduct(searchObj.getString("product"));

            searchItem.setItemImg(searchObj.getString("img"));

            searchItem.setId(searchObj.getInt("id"));

            searchItem.setUpc(searchObj.getInt("upc"));

            if(searchObj.has("inventory_item")
            {
                  JsonArray array = searchObj.getJsonArray("inventory_item");
                  List&lt;InventoryItem&gt; inList = new ArrayList&lt;InventoryItem&gt;();
                  for(int k=0;k&lt;inList.length();k++)
                     {
                       InventoryItem item = new InventoryItem();
                      item.setSomeAttribute(array.get(k).getString("some_attribute"));
                       inList.add(item);
                     }
              searchItem.setInventoryList(inList);
            }

            searchItems.add(searchItem);

        }

        // notify data changes to list adapater
        listAdapter.notifyDataSetChanged();
    } catch (JSONException e) {
        e.printStackTrace();
    }
}
</code></pre>

<p>Second part : Use <code>ExpandableListAdapter</code> instead of <code>BaseAdapter</code>. return <code>searchItems.get(groupPosition).getInventoryList().size()</code> from <code>getChildrenCount()</code></p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter {

private Context _context;
private List&lt;SearchItem&gt; list;

public ExpandableListAdapter(Context context, List&lt;SearchItem&gt; list) {
    this._context = context;
    this.list = list;

}

@Override
public Object getChild(int groupPosition, int childPosititon) {
    return this.list.get(groupPosition).getInventoryList()
            .get(childPosititon);
}

@Override
public long getChildId(int groupPosition, int childPosition) {
    return childPosition;
}

@Override
public View getChildView(int groupPosition, final int childPosition,
        boolean isLastChild, View convertView, ViewGroup parent) {

    final InventoryItem item = (InventoryItem) getChild(groupPosition, childPosition);

    if (convertView == null) {
        LayoutInflater infalInflater = (LayoutInflater) this._context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = infalInflater.inflate(R.layout.list_item, null);
    }

    TextView txtListChild = (TextView) convertView
            .findViewById(R.id.lblListItem);

    txtListChild.setText(item.getSomeAttribute());
    return convertView;
}

@Override
public int getChildrenCount(int groupPosition) {
    return this.list.get(groupPosition).getInventoryList()
            .size();
}

@Override
public Object getGroup(int groupPosition) {
    return this.list.get(groupPosition);
}

@Override
public int getGroupCount() {
    return this.list.size();
}

@Override
public long getGroupId(int groupPosition) {
    return groupPosition;
}

@Override
public View getGroupView(int groupPosition, boolean isExpanded,
        View convertView, ViewGroup parent) {
    SearchItem item = (SearchItem) getGroup(groupPosition);
    if (convertView == null) {
        LayoutInflater infalInflater = (LayoutInflater) this._context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = infalInflater.inflate(R.layout.list_group, null);
    }

    TextView lblListHeader = (TextView) convertView
            .findViewById(R.id.lblListHeader);
    lblListHeader.setTypeface(null, Typeface.BOLD);
    lblListHeader.setText(item.getTitle());

    return convertView;
}

@Override
public boolean hasStableIds() {
    return false;
}

@Override
public boolean isChildSelectable(int groupPosition, int childPosition) {
    return true;
}
}
</code></pre>
