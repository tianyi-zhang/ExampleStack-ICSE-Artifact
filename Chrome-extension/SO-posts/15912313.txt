<p>I add to build separate interceptor/resolver for each endpoint and then test in the interceptor/resolver and test for the correct endpoint.</p>

<p><strong>SoapFaultExceptionResolver</strong></p>

<pre><code>  @Override
    protected final boolean resolveExceptionInternal(MessageContext messageContext, Object endpoint, Exception ex) {

        MethodEndpoint methodEndpoint = (MethodEndpoint)endpoint;

        if(methodEndpoint != null &amp;&amp; methodEndpoint.getBean().getClass().getSimpleName().equalsIgnoreCase(getEndpointClass().getSimpleName()))
            {
            Assert.isInstanceOf(SoapMessage.class, messageContext.getResponse(),
                    "SimpleSoapExceptionResolver requires a SoapMessage");
            SoapMessage response = (SoapMessage) messageContext.getResponse();
            String faultString = StringUtils.hasLength(ex.getMessage()) ? ex.getMessage() : ex.toString();
            SoapBody body = response.getSoapBody();
            SoapFault fault = body.addServerOrReceiverFault(faultString, getLocale());
            customizeFault(messageContext, endpoint, ex, fault);
            return true;
        }

        return false;
    }
</code></pre>

<p><strong>Config</strong></p>

<pre><code>&lt;bean id="courseSectionExceptionResolver" class="com.test.adapter.ws.resolvers.LisCourseSectionResolverInterceptor"&gt;
        &lt;property name="order" value="1"&gt;&lt;/property&gt;
    &lt;/bean&gt;  

    &lt;bean id="personExceptionResolver" class="com.test.adapter.ws.resolvers.LisPersonResolverInterceptor"&gt;
        &lt;property name="order" value="2"&gt;&lt;/property&gt;
    &lt;/bean&gt; 

    &lt;bean id="membershipExceptionResolver" class="com.test.adapter.ws.resolvers.LisMembershipResolverInterceptor"&gt;
        &lt;property name="order" value="3"&gt;&lt;/property&gt;
    &lt;/bean&gt; 

    &lt;bean id="bdemsExceptionResolver" class="com.test.adapter.ws.resolvers.LisBdemsResolverInterceptor"&gt;
        &lt;property name="order" value="4"&gt;&lt;/property&gt;
    &lt;/bean&gt;  

    &lt;bean id="outcomeExceptionResolver" class="com.test.adapter.ws.resolvers.LisOutcomeResolverInterceptor"&gt;
        &lt;property name="order" value="5"&gt;&lt;/property&gt;
    &lt;/bean&gt;  

    &lt;sws:interceptors&gt;
        &lt;sws:payloadRoot namespaceUri="http://www.imsglobal.org/services/lis/cmsv1p0/wsdl11/sync/imscms_v1p0"&gt;
            &lt;bean class="com.test.adapter.ws.resolvers.LisCourseSectionResolverInterceptor"/&gt;
        &lt;/sws:payloadRoot&gt;
        &lt;sws:payloadRoot namespaceUri="http://www.imsglobal.org/services/lis/pms2p0/wsdl11/sync/imspms_v2p0"&gt;
            &lt;bean class="com.test.adapter.ws.resolvers.LisPersonResolverInterceptor"/&gt;
        &lt;/sws:payloadRoot&gt;
        &lt;sws:payloadRoot namespaceUri="http://www.imsglobal.org/services/lis/mms2p0/wsdl11/sync/imsmms_v2p0"&gt;
            &lt;bean class="com.test.adapter.ws.resolvers.LisMembershipResolverInterceptor"/&gt;
        &lt;/sws:payloadRoot&gt;
        &lt;sws:payloadRoot namespaceUri="http://www.imsglobal.org/services/lis/bdems1p0/wsdl11/sync/imsbdems_v1p0"&gt;
            &lt;bean class="com.test.adapter.ws.resolvers.LisBdemsResolverInterceptor"/&gt;
        &lt;/sws:payloadRoot&gt;
        &lt;sws:payloadRoot namespaceUri="http://www.imsglobal.org/services/lis/oms1p0/wsdl11/sync/imsoms_v1p0"&gt;
            &lt;bean class="com.test.adapter.ws.resolvers.LisOutcomeResolverInterceptor"/&gt;
        &lt;/sws:payloadRoot&gt;
        &lt;bean class="org.springframework.ws.server.endpoint.interceptor.PayloadLoggingInterceptor"&gt;
            &lt;property name="logRequest" value="true"/&gt;
            &lt;property name="logResponse" value="true"/&gt;
        &lt;/bean&gt;
    &lt;/sws:interceptors&gt;
</code></pre>
