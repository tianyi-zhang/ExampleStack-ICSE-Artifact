<p><strong>Solved</strong></p>

<p>I solved the issue, the problem was that I created a new Filter object on any new typing, using the same Filter all works well, because as is written in the android documentation:</p>

<blockquote>
  <p>public final void filter (CharSequence constraint,
  Filter.FilterListener listener)</p>
  
  <p>Added in API level 1 Starts an asynchronous filtering operation.
  Calling this method cancels all previous non-executed filtering
  requests and posts a new filtering request that will be executed
  later.</p>
</blockquote>

<p>This is the correct code:</p>

<pre><code>//My Adapter 
public class RosterAdapter extends BaseAdapter implements Filterable{

    //private ViewHolder holder;
    private LayoutInflater inflater;

    private ItemsFilter mFilter;

    private HashMap&lt;String, UserEntry&gt; mappa_users=null;
    private HashMap&lt;String, UserEntry&gt; all_map_jid=null;
    private ArrayList&lt;String&gt; all_mkey=null;;
    private ArrayList&lt;String&gt; mKeys;


    public RosterAdapter(){
        this.mappa_users =new HashMap&lt;String, UserEntry&gt;();
        this.inflater= (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        this.all_map_jid=new HashMap&lt;String, UserEntry&gt;();
        this.all_mkey=new ArrayList&lt;String&gt;();
        this.mKeys=new ArrayList&lt;String&gt;();
    }
    @Override
    public int getCount() {
        return mappa_users.size();
    }

    @Override
    public UserEntry getItem(int position) {
        return mappa_users.get(mKeys.get(position));
    }

    @Override
    public long getItemId(int arg0) {
        return arg0;
    }


    @Override
    public View getView(int position, View convertView, ViewGroup parent) {



        ViewHolder holder;


        if (convertView == null) {

            convertView = inflater.inflate(R.layout.layout_row, null);

            // Creates a ViewHolder and store references to the two children
            // views we want to bind data to.
            holder = new ViewHolder();
            holder.username = (TextView) convertView.findViewById(R.id.user_info);
            holder.availability = (ImageView) convertView.findViewById(R.id.user_availability);
            holder.user_ic = (ImageView) convertView.findViewById(R.id.icon);


            // Keep track of the view holder as a tag of the view
            convertView.setTag(holder);

        } else {
            // Get the ViewHolder back to get fast access to the TextView
            // and the ImageView.
            holder = (ViewHolder) convertView.getTag(); 
        }



        String user = getItem(position).getUserName();
        //Log.e("Nome","username "+user);
        holder.username.setText(user);



        if(!(getItem(position).getUserStatus())){


            holder.availability.setImageResource(R.drawable.ic_not_available);  

        }else{

            holder.availability.setImageResource(R.drawable.ic_available);
        }

        //do your view stuff here

        return convertView;
    }





    /**
     * Implementing the Filterable interface.
     */
    @Override
    public Filter getFilter() {
        if (mFilter == null) {
            mFilter = new ItemsFilter();
        }
        return mFilter;}


        /**
         * Custom Filter implementation for the items adapter.
         *
         */
        private class ItemsFilter extends Filter {
            @SuppressWarnings("unchecked")
            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {

                adapter.mappa_users = (HashMap&lt;String,UserEntry&gt;) results.values;
                adapter.mKeys= new ArrayList&lt;String&gt;(Arrays.asList(adapter.mappa_users.keySet().toArray(new String[adapter.mappa_users.size()])));
                Collections.sort(mKeys, new RosterEntryComparator(adapter.mappa_users));

                notifyDataSetChanged();
                Log.e("fine", "Terminato filtraggio "+constraint);

                }


            @Override
            protected  FilterResults performFiltering(CharSequence constraint) {

                HashMap&lt;String,UserEntry&gt; searched_user=new HashMap&lt;String,UserEntry&gt;();
                FilterResults results = new FilterResults();


                if (constraint!= null &amp;&amp; constraint.toString().length() &gt; 0) {

                SmithWaterman metric = new SmithWaterman();

               for(String element : all_mkey){
                   //La mappa dell'adapter Ã¨ riempito con le sole entry simily all'occorrenza ricercata
                   if (metric.getSimilarity(constraint.toString().toLowerCase(), all_map_jid.get(element).getUserName().toLowerCase()) &gt;= 0.8 ){

                       UserEntry rEntry=all_map_jid.get(element);

                       searched_user.put(element, rEntry );

                   }

               }

              results.values = searched_user;
              results.count = searched_user.size();

                }
                else{


                        results.values = all_map_jid;
                        results.count = all_map_jid.size();

                }

                return results;
            }
        };
</code></pre>
