<p>Another solution for this old post (for those that it might help) :</p>

<pre><code>public class Version implements Comparable&lt;Version&gt; {

    private String version;

    public final String get() {
        return this.version;
    }

    public Version(String version) {
        if(version == null)
            throw new IllegalArgumentException("Version can not be null");
        if(!version.matches("[0-9]+(\\.[0-9]+)*"))
            throw new IllegalArgumentException("Invalid version format");
        this.version = version;
    }

    @Override public int compareTo(Version that) {
        if(that == null)
            return 1;
        String[] thisParts = this.get().split("\\.");
        String[] thatParts = that.get().split("\\.");
        int length = Math.max(thisParts.length, thatParts.length);
        for(int i = 0; i &lt; length; i++) {
            int thisPart = i &lt; thisParts.length ?
                Integer.parseInt(thisParts[i]) : 0;
            int thatPart = i &lt; thatParts.length ?
                Integer.parseInt(thatParts[i]) : 0;
            if(thisPart &lt; thatPart)
                return -1;
            if(thisPart &gt; thatPart)
                return 1;
        }
        return 0;
    }

    @Override public boolean equals(Object that) {
        if(this == that)
            return true;
        if(that == null)
            return false;
        if(this.getClass() != that.getClass())
            return false;
        return this.compareTo((Version) that) == 0;
    }

}
</code></pre>

<hr>

<pre><code>Version a = new Version("1.1");
Version b = new Version("1.1.1");
a.compareTo(b) // return -1 (a&lt;b)
a.equals(b)    // return false

Version a = new Version("2.0");
Version b = new Version("1.9.9");
a.compareTo(b) // return 1 (a&gt;b)
a.equals(b)    // return false

Version a = new Version("1.0");
Version b = new Version("1");
a.compareTo(b) // return 0 (a=b)
a.equals(b)    // return true

Version a = new Version("1");
Version b = null;
a.compareTo(b) // return 1 (a&gt;b)
a.equals(b)    // return false

List&lt;Version&gt; versions = new ArrayList&lt;Version&gt;();
versions.add(new Version("2"));
versions.add(new Version("1.0.5"));
versions.add(new Version("1.01.0"));
versions.add(new Version("1.00.1"));
Collections.min(versions).get() // return min version
Collections.max(versions).get() // return max version

// WARNING
Version a = new Version("2.06");
Version b = new Version("2.060");
a.equals(b)    // return false
</code></pre>

<hr>

<p>Edit:</p>

<p>@daiscog: Thank you for your remark, this piece of code has been developed for the Android platform and as recommended by Google, the method "matches" check the entire string unlike Java that uses a regulatory pattern. (<a href="http://developer.android.com/reference/java/lang/String.html#matches%28java.lang.String%29">Android documentation</a> - <a href="http://docs.oracle.com/javase/1.4.2/docs/api/java/lang/String.html#matches%28java.lang.String%29">JAVA documentation</a>)</p>
