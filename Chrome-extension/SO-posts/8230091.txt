<pre><code>private class FbWebViewClient extends WebViewClient {

    boolean started=false;

    @Override
    public boolean shouldOverrideUrlLoading(WebView view, String url) {
        Log.d("Facebook-WebView", "Redirect URL: " + url);
        if (url.startsWith(Facebook.REDIRECT_URI)) {
            Bundle values = Util.parseUrl(url);

            String error = values.getString("error");
            if (error == null) {
                error = values.getString("error_type");
            }

            if (error == null) {
                mListener.onComplete(values);
            } else if (error.equals("access_denied")
                    || error.equals("OAuthAccessDeniedException")) {
                mListener.onCancel();
            } else {
                mListener.onFacebookError(new FacebookError(error));
            }

            FbDialog.this.dismiss();
            return true;
        } else if (url.startsWith(Facebook.CANCEL_URI)) {
            mListener.onCancel();
            FbDialog.this.dismiss();
            return true;
        } else if (url.contains(DISPLAY_STRING)) {
            return false;
        }
        // launch non-dialog URLs in a full browser
        getContext().startActivity(
                new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
        return true;
    }

    @Override
    public void onReceivedError(WebView view, int errorCode,
            String description, String failingUrl) {
        super.onReceivedError(view, errorCode, description, failingUrl);
        mListener.onError(new DialogError(description, errorCode,
                failingUrl));
        FbDialog.this.dismiss();
    }

    public Map&lt;String, String&gt; getUrlParameters(String url)
            throws UnsupportedEncodingException {
        Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
        String[] urlParts = url.split("\\?");
        if (urlParts.length &gt; 1) {
            String query = urlParts[1];
            for (String param : query.split("&amp;")) {
                String pair[] = param.split("=");
                String key = URLDecoder.decode(pair[0], "UTF-8");
                String value = "";
                if (pair.length &gt; 1) {
                    value = URLDecoder.decode(pair[1], "UTF-8");
                }

                params.put(key, value);

            }
        }
        return params;
    }

    @Override
    public void onPageStarted(WebView view, String url, Bitmap favicon) {
        Log.d("Facebook-WebView", "Webview loading URL: " + url);

        String newUrl="http://www.facebook.com/dialog/feed?_path=feed&amp;app_id="; 
        if (url.contains("touch") &amp;&amp; started==false) {

            started=true;
            ChildTabBibleLessonActivity.fbMaterial=ChildTabBibleLessonActivity.fbMaterial.replace(" ", "+");
            url=url+"&amp;picture=http://www.minibiblecollege.org/mbclandingpage/images/icmlogo-small.jpg&amp;description="+ChildTabBibleLessonActivity.fbMaterial;
        /*  Map&lt;String,String&gt; param;
            try {
                param = getUrlParameters(url);
                newUrl=newUrl+param.get("app_id")+"&amp;redirect_uri="+"https://deep-rain-6015.herokuapp.com"+"&amp;display=page&amp;picture=http://www.minibiblecollege.org/mbclandingpage/images/icmlogo-small.jpg"+"&amp;name=MiniBible&amp;description=heregoesMyMessage";

            } catch (UnsupportedEncodingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            */
            view.loadUrl(url);
            //super.onPageStarted(view, url, favicon);
        }
        else
        {
        super.onPageStarted(view, url, favicon);
        }
        mSpinner.show();
    }

    @Override
    public void onPageFinished(WebView view, String url) {
        super.onPageFinished(view, url);
        mSpinner.dismiss();
        /*
         * Once webview is fully loaded, set the mContent background to be
         * transparent and make visible the 'x' image.
         */
        mContent.setBackgroundColor(Color.TRANSPARENT);
        mWebView.setVisibility(View.VISIBLE);
        mCrossImage.setVisibility(View.VISIBLE);
    }
}
</code></pre>
