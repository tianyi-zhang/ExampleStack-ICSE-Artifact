<p>All three are related to MVEL issues.</p>

<p>For the <code>Q1 and Q2</code>,</p>

<p>For <code>empty</code> operator, MVEL has a class <code>BlankLiteral</code>, and it has a method</p>

<pre><code>public boolean equals(Object obj) {
    if (obj == null || "".equals(valueOf(obj))) {
      return true;
    }
    else if (isNumeric(obj)) {
      return "0".equals(valueOf(obj));
    }
    else if (obj instanceof Collection) {
      return ((Collection) obj).size() == 0;
    }
    else if (obj.getClass().isArray()) {
      return getLength(obj) == 0;
    }
    return false;
  }
</code></pre>

<p><strong>which does not handle the cases as questioned by you in <code>Q1 and Q2</code></strong>.</p>

<p>Q3, expression <code>integerValue == empty</code>,</p>

<p>MVEl tries to cast <code>empty</code> to Number, control comes to this class <code>MathProcessor.class</code></p>

<p>Method is </p>

<pre><code>private static Double getNumber(Object in, int type) {
    if (in == null)
      return 0d;
    switch (type) {
      case BIG_DECIMAL:
        return ((Number) in).doubleValue();
      case DataTypes.BIG_INTEGER:
        return ((Number) in).doubleValue();
      case DataTypes.INTEGER:
      case DataTypes.W_INTEGER:
        return ((Number) in).doubleValue();
      case DataTypes.LONG:
      case DataTypes.W_LONG:
        return ((Number) in).doubleValue();
      case DataTypes.STRING:
        return Double.parseDouble((String) in);
      case DataTypes.FLOAT:
      case DataTypes.W_FLOAT:
        return ((Number) in).doubleValue();
      case DataTypes.DOUBLE:
      case DataTypes.W_DOUBLE:
        return (Double) in;
      case DataTypes.SHORT:
      case DataTypes.W_SHORT:
        return ((Number) in).doubleValue();
      case DataTypes.CHAR:
      case DataTypes.W_CHAR:
        return Double.parseDouble(String.valueOf((Character) in));
      case DataTypes.BOOLEAN:
      case DataTypes.W_BOOLEAN:
        return ((Boolean) in) ? 1d : 0d;
      case DataTypes.W_BYTE:
      case DataTypes.BYTE:
        return ((Byte) in).doubleValue();
    }

    throw new RuntimeException("cannot convert &lt;" + in + "&gt; to a numeric type: " + in.getClass() + " [" + type + "]");

}
</code></pre>

<p>Observing the values in debug mode, </p>

<pre><code>Object in - BlankLiteral
int type - 200
</code></pre>

<p>200 is nothing but <code>DataTypes.EMPTY</code> which is currently not handled by MVEL. So since no case is matched it throws exception.</p>

<p>So still 'empty' is <strong>not fully implemented in MVEL</strong></p>
