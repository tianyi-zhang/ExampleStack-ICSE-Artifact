<p>Look <a href="http://stackoverflow.com/a/15053901/1991579">here</a>. And use:</p>

<pre><code>...
DirectonTask dirTask = new DirectonTask(this);
        dirTask.execute(md.getUrl(new LatLng(loc1.getLatitude(), loc1.getLongitude()), 
                new LatLng(loc2.getLatitude(), loc2.getLongitude(),GMapV2Direction.MODE_DRIVING));
...
</code></pre>

<p>and method calling after task completed</p>

<pre><code>GMapV2Direction md = new GMapV2Direction();
    Document doc;
    Polyline currentPath;
    public void drawDirection(Document doc) {
        this.doc = doc;
        ArrayList&lt;LatLng&gt; directionPoint = md.getDirection(doc);
        PolylineOptions rectLine = new PolylineOptions().width(3).color(
                Color.RED);

        for (int i = 0; i &lt; directionPoint.size(); i++) 
            rectLine.add(directionPoint.get(i));

        map.addPolyline(rectLine);


}
</code></pre>

<p>GMapV2Direction.java:</p>

<pre><code>public class GMapV2Direction {
public final static String MODE_DRIVING = "driving";
public final static String MODE_WALKING = "walking";
private static final String TAG = "google_map_GMapV2Direction";
public GMapV2Direction() { }

public String getUrl(LatLng start, LatLng end, String mode){
    String url = "http://maps.googleapis.com/maps/api/directions/xml?" 
            + "origin=" + start.latitude + "," + start.longitude  
            + "&amp;destination=" + end.latitude + "," + end.longitude 
            + "&amp;sensor=false&amp;mode="+mode;
    return url;
}
public Document getDocument(LatLng start, LatLng end, String mode) {
    String url = "http://maps.googleapis.com/maps/api/directions/xml?" 
            + "origin=" + start.latitude + "," + start.longitude  
            + "&amp;destination=" + end.latitude + "," + end.longitude 
            + "&amp;sensor=false&amp;mode="+mode;

    try {
        LOG.d(TAG, "url = "+url);
        HttpClient httpClient = new DefaultHttpClient();
        HttpGet httpGet = new HttpGet(url);
        HttpResponse response = httpClient.execute(httpGet);
        InputStream in = response.getEntity().getContent();
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        Document doc = builder.parse(in);
        return doc;
    } catch (Exception e) {
        e.printStackTrace();

    }
    return null;
}

public String getDurationText (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("duration");
    Node node1 = nl1.item(nl1.getLength() - 1);
    NodeList nl2 = node1.getChildNodes();
    Node node2 = nl2.item(getNodeIndex(nl2, "text"));
    LOG.i(TAG,"DurationText: "+ node2.getTextContent());
    return node2.getTextContent();
}

public int getDurationValue (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("duration");
    Node node1 = nl1.item(nl1.getLength() - 1);
    NodeList nl2 = node1.getChildNodes();
    Node node2 = nl2.item(getNodeIndex(nl2, "value"));
    LOG.i(TAG,"DurationValue: "+ node2.getTextContent());
    return Integer.parseInt(node2.getTextContent());
}

public String getDistanceText (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("distance");
    Node node1 = nl1.item(nl1.getLength() - 1);
    NodeList nl2 = node1.getChildNodes();
    Node node2 = nl2.item(getNodeIndex(nl2, "text"));
    LOG.i(TAG,"DistanceText: "+ node2.getTextContent());
    return node2.getTextContent();
}

public int getDistanceValue (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("distance");
    Node node1 = nl1.item(nl1.getLength() - 1);
    NodeList nl2 = node1.getChildNodes();
    Node node2 = nl2.item(getNodeIndex(nl2, "value"));
    LOG.i(TAG,"DistanceValue: " +node2.getTextContent());
    return Integer.parseInt(node2.getTextContent());
}

public String getStartAddress (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("start_address");
    Node node1 = nl1.item(0);
    LOG.i(TAG,"StartAddress: "+node1.getTextContent());
    return node1.getTextContent();
}

public String getEndAddress (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("end_address");
    Node node1 = nl1.item(0);
    LOG.i(TAG,"StartAddress: "+node1.getTextContent());
    return node1.getTextContent();
}

public String getCopyRights (Document doc) {
    NodeList nl1 = doc.getElementsByTagName("copyrights");
    Node node1 = nl1.item(0);
    LOG.i(TAG,"CopyRights: "+node1.getTextContent());
    return node1.getTextContent();
}

public ArrayList&lt;LatLng&gt; getDirection (Document doc) {
    NodeList nl1, nl2, nl3;
    ArrayList&lt;LatLng&gt; listGeopoints = new ArrayList&lt;LatLng&gt;();
    nl1 = doc.getElementsByTagName("step");
    if (nl1.getLength() &gt; 0) {
        for (int i = 0; i &lt; nl1.getLength(); i++) {
            Node node1 = nl1.item(i);
            nl2 = node1.getChildNodes();

            Node locationNode = nl2.item(getNodeIndex(nl2, "start_location"));
            nl3 = locationNode.getChildNodes();
            Node latNode = nl3.item(getNodeIndex(nl3, "lat"));
            double lat = Double.parseDouble(latNode.getTextContent());
            Node lngNode = nl3.item(getNodeIndex(nl3, "lng"));
            double lng = Double.parseDouble(lngNode.getTextContent());
            listGeopoints.add(new LatLng(lat, lng));

            locationNode = nl2.item(getNodeIndex(nl2, "polyline"));
            nl3 = locationNode.getChildNodes();
            latNode = nl3.item(getNodeIndex(nl3, "points"));
            ArrayList&lt;LatLng&gt; arr = decodePoly(latNode.getTextContent());
            for(int j = 0 ; j &lt; arr.size() ; j++) {
                listGeopoints.add(new LatLng(arr.get(j).latitude, arr.get(j).longitude));
            }

            locationNode = nl2.item(getNodeIndex(nl2, "end_location"));
            nl3 = locationNode.getChildNodes();
            latNode = nl3.item(getNodeIndex(nl3, "lat"));
            lat = Double.parseDouble(latNode.getTextContent());
            lngNode = nl3.item(getNodeIndex(nl3, "lng"));
            lng = Double.parseDouble(lngNode.getTextContent());
            listGeopoints.add(new LatLng(lat, lng));
        }
    }

    return listGeopoints;
}

private int getNodeIndex(NodeList nl, String nodename) {
    for(int i = 0 ; i &lt; nl.getLength() ; i++) {
        if(nl.item(i).getNodeName().equals(nodename))
            return i;
    }
    return -1;
}

private ArrayList&lt;LatLng&gt; decodePoly(String encoded) {
    ArrayList&lt;LatLng&gt; poly = new ArrayList&lt;LatLng&gt;();
    int index = 0, len = encoded.length();
    int lat = 0, lng = 0;
    while (index &lt; len) {
        int b, shift = 0, result = 0;
        do {
            b = encoded.charAt(index++) - 63;
            result |= (b &amp; 0x1f) &lt;&lt; shift;
            shift += 5;
        } while (b &gt;= 0x20);
        int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lat += dlat;
        shift = 0;
        result = 0;
        do {
            b = encoded.charAt(index++) - 63;
            result |= (b &amp; 0x1f) &lt;&lt; shift;
            shift += 5;
        } while (b &gt;= 0x20);
        int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lng += dlng;

        LatLng position = new LatLng((double) lat / 1E5, (double) lng / 1E5);
        poly.add(position);
    }
    return poly;
}
</code></pre>

<p>}</p>

<p>And DirectionTask:</p>

<pre><code>public class DirectonTask extends AsyncTask&lt;String, Void, Document&gt; {
    private static final String TAG = "google_map_DirectonTask";
    Context c;
    MapGoogle map;
    public DirectonTask(MapGoogle map) {
        super();
        this.map = map;
//      this.c = c;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute(); 

    }



    @Override
    protected Document doInBackground(String... url) {
//      LOG.d(TAG, "url = " + url[0]);
        HttpClient httpClient = new DefaultHttpClient();
        // HttpContext localContext = new BasicHttpContext();
        // HttpPost httpPost = new HttpPost(url);

        try {
            HttpGet httpGet = new HttpGet(url[0]);
            HttpResponse response;
            response = httpClient.execute(httpGet);
            InputStream in = response.getEntity().getContent();
            DocumentBuilder builder = DocumentBuilderFactory.newInstance()
                    .newDocumentBuilder();
            Document doc = builder.parse(in);
            return doc;
        } catch (ClientProtocolException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }catch (Exception e) {
            e.printStackTrace();

        }

        return null;

    }



    @Override
    protected void onPostExecute(Document result) {
        if (result != null) {

            map.drawDirection(result);

        } else {
            LOG.d("onPostExecute: direction = null");
        }
    }
}
</code></pre>
