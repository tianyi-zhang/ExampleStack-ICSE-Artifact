<p>1). API for <a href="http://developer.android.com/reference/java/io/FileInputStream.html#available%28%29" rel="nofollow">available()</a> says it should not be used for the purposes you need:</p>

<blockquote>
  <p>Note that this method provides such a weak guarantee that it is not very useful in practice.</p>
</blockquote>

<p>Meaning it may not give you the file size.</p>

<p>2). When you read smth in RAM, then take under account the file can be lengthy, so try to avoid spending extra RAM. For this a relatively small (1~8 KB) buffer is used to read from source and then append to result. On the other hand using too small buffers (say, several bytes) slows down reading significantly.</p>

<p>3). Reading bytes differs from reading characters, because a single character may be represented by more than one byte (depends on encoding). To read chars the spesific classes are used which are aware of encoding and know how to convert bytes to chars properly. For instance <a href="http://developer.android.com/reference/java/io/InputStreamReader.html" rel="nofollow">InputStreamReader</a> is one of such classes.</p>

<p>4). The encoding to use for reading should be the encoding tha was used for persisting the data.</p>

<p>Taking all the said above I would use smth like this:</p>

<pre><code>public static String getStringFromStream(InputStream in, String encoding) 
        throws IOException {
    InputStreamReader reader;
    if (encoding == null) {
        // This constructor sets the character converter to the encoding
        // specified in the "file.encoding" property and falls back 
        // to ISO 8859_1 (ISO-Latin-1) if the property doesn't exist.
        reader = new InputStreamReader(in);
    } else {
        reader = new InputStreamReader(in, encoding);
    }

    StringBuilder sb = new StringBuilder();

    final char[] buf = new char[1024];
    int len;
    while ((len = reader.read(buf)) &gt; 0) {
        sb.append(buf, 0, len);
    }

    return sb.toString();
}
</code></pre>

<p>5). Make sure to always close an <code>InputStream</code> when done working with it.</p>

<p>Sure, there are more than one way to read text from file in Java/Android. This is mostly because Java API contains several generations of IO APIs. For instance, classes from <code>java.nio</code> package were created to be more efficient, however usually there is no strong reason of using them (don't fall into premature optimization sin).</p>
