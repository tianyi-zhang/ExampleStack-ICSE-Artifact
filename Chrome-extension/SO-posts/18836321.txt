<p>A perusal of ASM shows this to be a "virtual" parameter annotation added by ASM.</p>

<p>See:</p>

<p><a href="http://asm.ow2.org/index.html" rel="nofollow">http://asm.ow2.org/index.html</a></p>

<p><a href="http://websvn.ow2.org/filedetails.php?repname=asm&amp;path=%2Ftrunk%2Fasm%2Fsrc%2Forg%2Fobjectweb%2Fasm%2FClassReader.java" rel="nofollow">http://websvn.ow2.org/filedetails.php?repname=asm&amp;path=%2Ftrunk%2Fasm%2Fsrc%2Forg%2Fobjectweb%2Fasm%2FClassReader.java</a></p>

<p>With:</p>

<pre><code>private void readParameterAnnotations(int v, final String desc,
        final char[] buf, final boolean visible, final MethodVisitor mv) {
    int i;
    int n = b[v++] &amp; 0xFF;
    // workaround for a bug in javac (javac compiler generates a parameter
    // annotation array whose size is equal to the number of parameters in
    // the Java source file, while it should generate an array whose size is
    // equal to the number of parameters in the method descriptor - which
    // includes the synthetic parameters added by the compiler). This work-
    // around supposes that the synthetic parameters are the first ones.
    int synthetics = Type.getArgumentTypes(desc).length - n;
    AnnotationVisitor av;
    for (i = 0; i &lt; synthetics; ++i) {
        // virtual annotation to detect synthetic parameters in MethodWriter
        av = mv.visitParameterAnnotation(i, "Ljava/lang/Synthetic;", false);
        if (av != null) {
            av.visitEnd();
        }
    }
    for (; i &lt; n + synthetics; ++i) {
        int j = readUnsignedShort(v);
        v += 2;
        for (; j &gt; 0; --j) {
            av = mv.visitParameterAnnotation(i, readUTF8(v, buf), visible);
            v = readAnnotationValues(v + 2, buf, true, av);
        }
    }
}
</code></pre>
