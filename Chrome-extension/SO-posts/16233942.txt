<p>I would suggest you a few ways to integrate this kind of interaction in android app which I can think of.</p>

<ol>
<li><p>First you can use <code>LIST_NAVIGATION</code> in ActionBar, where you can add all your 'tabs' and use <code>Fragments</code> by adding/removing them depending on user selection. If you want to support old Android Versions from 2.2+ you can use <code>ActionBarSherlock</code> which is a really good implementation of <code>ActionBar</code> API for old versions. You can find examples of List navigation in ActionBar in Gmail app for Android and examples how to achieve this here : <a href="https://github.com/JakeWharton/ActionBarSherlock/blob/master/actionbarsherlock-samples/demos/src/com/actionbarsherlock/sample/demos/ListNavigation.java" rel="nofollow">ActionBarSherlock</a>.</p></li>
<li><p>Second way which you can use to achieve something like this is using SlidingDrawer like in Google+, Youtube, Facebook app, which is a nice option too in my opinion. There is a great library for this <a href="https://github.com/jfeinstein10/SlidingMenu" rel="nofollow">SlidingMenu</a>. </p></li>
</ol>

<p>It depends on the way which you think will be the best way to achieve the thing which you want. And the last thing if you really want to use tabs like IOS I would recommend you to do something like this :</p>

<p><strong>activity_main.xml</strong> :</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TabHost
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@android:id/tabhost"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;

        &lt;FrameLayout
            android:id="@android:id/tabcontent"
            android:layout_width="0dp"
            android:layout_height="0dp"
            android:layout_weight="0"/&gt;

        &lt;FrameLayout
            android:id="@+android:id/realtabcontent"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1"/&gt;

        &lt;TabWidget
            android:id="@android:id/tabs"
            android:orientation="horizontal"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="0"/&gt;

    &lt;/LinearLayout&gt;
&lt;/TabHost&gt;
</code></pre>

<p><strong>MainTabActivity</strong> :</p>

<pre><code>public class MainActivity extends SherlockFragmentActivity {

private TabHost mTabHost;
private TabManager mTabManager;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    mTabHost = (TabHost) findViewById(android.R.id.tabhost);
    mTabHost.setup();

    mTabManager = new TabManager(this, mTabHost, R.id.realtabcontent);


    TabHost.TabSpec spec = mTabHost.newTabSpec("collections");
    View tabIndicator = LayoutInflater.from(this).inflate(R.layout.tab_layout, mTabHost.getTabWidget(), false);
    TextView title = (TextView) tabIndicator.findViewById(R.id.title); // tab title
    title.setText(getString(R.string.collection_tab));
    ImageView icon = (ImageView) tabIndicator.findViewById(R.id.icon);  // tab icon
    icon.setImageResource(R.drawable.ic_tab_collections);
    spec.setIndicator(tabIndicator);
    mTabManager.addTab(spec, MyCollectionList.class, null); // WHERE MyCollectionList is Fragment attached to first tab.

    // MYLIST TAB
    TabHost.TabSpec spec5 = mTabHost.newTabSpec("mylist");
    View tabIndicator5 = LayoutInflater.from(this).inflate(R.layout.tab_layout, mTabHost.getTabWidget(), false); // used for custom design of tab
    TextView title5 = (TextView) tabIndicator5.findViewById(R.id.title); // tab title
    title5.setText(getString(R.string.my_list));
    ImageView icon5 = (ImageView) tabIndicator5.findViewById(R.id.icon); // tab icon
    icon5.setImageResource(R.drawable.ic_tab_mylist);
    spec5.setIndicator(tabIndicator5);
    mTabManager.addTab(spec5, MyList.class, null); // MyList - second Fragment attached to second tab

    // ADD as many tabs as you want


    mTabHost.setCurrentTab(0); // set selected tab

    }

}
</code></pre>

<p>and <strong>TabManager.class</strong> (It's taken from ActionBarSherlock example, a little modifies version) :</p>

<pre><code>import java.util.HashMap;

import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.view.View;
import android.widget.TabHost;

/**
 * This is a helper class that implements the management of tabs and all
 * details of connecting a ViewPager with associated TabHost.  It relies on a
 * trick.  Normally a tab host has a simple API for supplying a View or
 * Intent that each tab will show.  This is not sufficient for switching
 * between pages.  So instead we make the content part of the tab host
 * 0dp high (it is not shown) and the TabsAdapter supplies its own dummy
 * view to show as the tab content.  It listens to changes in tabs, and takes
 * care of switch to the correct paged in the ViewPager whenever the selected
 * tab changes.
 */
public class TabManager implements TabHost.OnTabChangeListener {
    private final FragmentActivity mActivity;
    private final TabHost mTabHost;
    private final int mContainerId;
    private int mLastFragmentId;
    private final HashMap&lt;String, TabInfo&gt; mTabs = new HashMap&lt;String, TabInfo&gt;();
    TabInfo mLastTab;

    static final class TabInfo {
        private final String tag;
        private final Class&lt;?&gt; clss;
        private final Bundle args;
        private Fragment fragment;

        TabInfo(String _tag, Class&lt;?&gt; _class, Bundle _args) {
            tag = _tag;
            clss = _class;
            args = _args;
        }
    }

    static class DummyTabFactory implements TabHost.TabContentFactory {
        private final Context mContext;

        public DummyTabFactory(Context context) {
            mContext = context;
        }

        @Override
        public View createTabContent(String tag) {
            View v = new View(mContext);
            v.setMinimumWidth(0);
            v.setMinimumHeight(0);
            return v;
        }
    }

    public TabManager(FragmentActivity activity, TabHost tabHost, int containerId) {
        mActivity = activity;
        mTabHost = tabHost;
        mContainerId = containerId;
        mTabHost.setOnTabChangedListener(this);
    }

    public void addTab(TabHost.TabSpec tabSpec, Class&lt;?&gt; clss, Bundle args) {
        tabSpec.setContent(new DummyTabFactory(mActivity));
        String tag = tabSpec.getTag();

        TabInfo info = new TabInfo(tag, clss, args);

        // Check to see if we already have a fragment for this tab, probably
        // from a previously saved state.  If so, deactivate it, because our
        // initial state is that a tab isn't shown.
        info.fragment = mActivity.getSupportFragmentManager().findFragmentByTag(tag);
        if (info.fragment != null &amp;&amp; !info.fragment.isDetached()) {
            FragmentTransaction ft = mActivity.getSupportFragmentManager().beginTransaction();
            ft.detach(info.fragment);
            ft.commit();
        }

        mTabs.put(tag, info);
        mTabHost.addTab(tabSpec);
    }

    @Override
    public void onTabChanged(String tabId) {
        TabInfo newTab = mTabs.get(tabId);
        if (mLastTab != newTab) {
            FragmentTransaction ft = mActivity.getSupportFragmentManager().beginTransaction();
            if (mLastTab != null) {
                FragmentManager mManager = mActivity.getSupportFragmentManager();
                if(mManager.getBackStackEntryCount() &gt; 0){
                    mLastFragmentId = mManager.getBackStackEntryAt(0).getId();
                    mManager.popBackStack(mLastFragmentId, FragmentManager.POP_BACK_STACK_INCLUSIVE);
                }
                if (mLastTab.fragment != null) {
                    ft.detach(mLastTab.fragment);
                }
            }
            if (newTab != null) {
                if (newTab.fragment == null) {
                    newTab.fragment = Fragment.instantiate(mActivity,
                            newTab.clss.getName(), newTab.args);
                    ft.add(mContainerId, newTab.fragment, newTab.tag);
                } else {
                    ft.attach(newTab.fragment);
                }
            }

            mLastTab = newTab;
            ft.commit();
            mActivity.getSupportFragmentManager().executePendingTransactions();
        }
        }
    }
</code></pre>

<p>Hope this post help you to find the best way to achieve the thing you want! : )</p>
