<blockquote>
  <p><em>...any ideas why ?</em></p>
</blockquote>

<p>Yes. That happens because when you remove the layout manager ( by setting it to null ) you're saying to the computer "I'll to all the laying work"; while using any other LayoutManager will attempt to ... well  layout your components according to your needs ( based on the properties of the objects to be lay-ed )</p>

<p>So, I think it would be much better to instead try to create a Border instance and set it into the JButton instead of trying to tweak all the objects around it. </p>

<p>I'll see if I can came up with something quickly. </p>

<p><strong>EDIT:</strong></p>

<p>Oops, it wasn't any quick, but here it is ( I messed up with a 1px line that was annoying me ) 

<img src="http://img22.imageshack.us/img22/8933/capturaby8.png" alt="alt text" />
</p>

<p>As I said before, setting the layout to null is not the best approach. Better is to create a custom border and set it to the button ( or set null border ).</p>

<p>Here's the code:</p>

<pre><code>import javax.swing.*;
import java.awt.*;
import javax.swing.border.*;
import java.awt.geom.*;

/**
 * Sample usage of swing borders.
 * @author &lt;a href="http://stackoverflow.com/users/20654"&gt;Oscar Reyes&lt;/a&gt;
 */
public class ButtonBorderSample  { 

    public static void main( String [] args )  { 

        // Pretty standard swing code
        JFrame frame = new JFrame();
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );


        JPanel panel  = new JPanel( new FlowLayout( 
                                       FlowLayout.CENTER, 0, 5 ) );


        panel.add( createButton( "F I R S T" ) );
        panel.add( createButton( "S E C O N D" ) );
        panel.add( createButton( "T H I R D " ) );

        frame.add( panel , BorderLayout.NORTH );

        frame.pack();
        frame.setVisible( true );

    }
    /**
     * Utility method to create a button.
     * Creates the button, make it square, and add our custom border.
     */
    private static JButton createButton( String s ) { 
        JButton b = new JButton( s );
        b.setPreferredSize( new Dimension( 100, 100   ) );
        b.setBorder( new NoGapBorder() );
        return b;
    }
}

/**
 * This border implementation. It doesn't have insets and draws only a 
 * few parts of the border 
 * @author &lt;a href="http://stackoverflow.com/users/20654"&gt;Oscar Reyes&lt;/a&gt;
 */
class NoGapBorder implements Border  {

    private final Insets insets = new Insets( -1, -1 , -1, -1 );

    /** 
     * Defines in Border interface.
     * @return The default insets instace that specifies no gap at all.
     */
    public Insets getBorderInsets(Component c ) {
        return insets;
    }


    /** 
     * Defines in Border interface.
     * @return false always, it is not relevant.
     */
    public boolean isBorderOpaque() { 
        return false;
    }

    /**
     * Paint the border for the button. 
     * This creates the difference between setting the border to null 
     * and using this class. 
     * It only draws a line in the top, a line in the bottom and a 
     * darker line 
     * in the left, to create the desired effect.
     * A much more complicated strtegy could be used here.
     */
    public void paintBorder(Component c, Graphics g, 
                            int x, int y, int width, int height) { 

       Color oldColor = g.getColor();
       int h = height;
       int w = width;

       g.translate(x, y);

        // Color for top and bottom
        g.setColor( c.getBackground().brighter() );

        // draw top line
        g.drawLine(1, 0, w-2, 0);

        // draw bottom line
       g.drawLine(0, h-1, w-1, h-1); 

       // change the color to make it look as a division
       g.setColor( c.getBackground().darker() );

       // draw the left line
       g.drawLine(0, 0, 0, h-2);        

        // set the graphics back to its original state.
       g.translate(-x, -y);
       g.setColor(oldColor);

    }

}
</code></pre>

<p><strong>EDIT</strong> </p>

<p>Dave Carpeneto wrote:</p>

<blockquote>
  <p><strong>Oscar><em></strong>Unfortunately this stops working once you UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName()); , and this was also core to my needs (I'm looking to make this look as native as possible).</em></p>
</blockquote>

<p>Well, I was not trying to make your work, but to answer to your question, you thought your problems had to do with LayoutManagers and I said that was not the problem.</p>

<p>Perhaps I should've stopped there, but my "programmer" itch make me continue with the sample. : ) </p>

<p>I'm glad you've solve your problem at the  end ;) </p>
