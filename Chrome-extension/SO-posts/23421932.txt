<p>I once faced similar situation. The <a href="http://developer.android.com/reference/android/os/FileObserver.html" rel="nofollow">FileObserver</a> Doc in google do say that it can notify changes in all subfolders once you set the Listener for the parent folder, but it wont work in that way. Some of the StackOverflowers suggest to go with the opensource FileObserver, so did I and its perfectly working. Here is the code..</p>

<pre><code>public class RecursiveFileObserver extends FileObserver
{

    public static final int CHANGES_ONLY = CREATE | DELETE | CLOSE_WRITE | MOVE_SELF | MOVED_FROM | MOVED_TO;

    List&lt;SingleFileObserver&gt; mObservers;
    String mPath;
    int mMask;
    public String directoryPath;

    public RecursiveFileObserver(String path) {
        this(path, ALL_EVENTS);
        directoryPath = path;
    }

    public RecursiveFileObserver(String path, int mask) {
        super(path, mask);
        mPath = path;
        mMask = mask;
    }

    @Override
    public void startWatching() {
        if (mObservers != null) return;

        mObservers = new ArrayList&lt;SingleFileObserver&gt;();
        Stack&lt;String&gt; stack = new Stack&lt;String&gt;();
        stack.push(mPath);

        while (!stack.isEmpty()) {
            String parent = stack.pop();
            mObservers.add(new SingleFileObserver(parent, mMask));
            File path = new File(parent);
            File[] files = path.listFiles();
            if (null == files) continue;
            for (File f : files)
            {
                if (f.isDirectory() &amp;&amp; !f.getName().equals(".") &amp;&amp; !f.getName().equals("..")) {
                    stack.push(f.getPath());
                }
            }
        }

        for (SingleFileObserver sfo : mObservers) {
            sfo.startWatching();
        }
    }

    @Override
    public void stopWatching() {
        if (mObservers == null) return;

        for (SingleFileObserver sfo : mObservers) {
            sfo.stopWatching();
        }
        mObservers.clear();
        mObservers = null;
    }

    @Override
    public void onEvent(int event, String filePath) 
    {
        event &amp;= FileObserver.ALL_EVENTS;


        synchronized (this)
        {
            //Log.i("FileManager", "event occured:"+filePath);

            if (event == FileObserver.CREATE || event == FileObserver.MOVED_TO) 
            {

                return;
            }

            if (event == FileObserver.DELETE  || event == FileObserver.MOVED_FROM) 
            {

                return;
            }
        }
    }


    class SingleFileObserver extends FileObserver 
    {
        String mPath;

        public SingleFileObserver(String path) {
            this(path, ALL_EVENTS);
            mPath = path;
        }

        public SingleFileObserver(String path, int mask) {
            super(path, mask);
            mPath = path;
        }

        @Override
        public void onEvent(int event, String path) {
            String newPath = mPath + "/" + path;
            RecursiveFileObserver.this.onEvent(event, newPath);
        }
    }
}
</code></pre>
