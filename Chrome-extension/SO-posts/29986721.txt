<p>Here's a nice <strong>short alternative</strong> to your code. Exactly the same idea but no need of the so many 'if' conditions where you check for validity of each coordinate. This all can be done in one go. Have a look. </p>

<p>I've commented the explanation as much as i could. It's readable even for people who don;t have the slightest idea. I happened to come across your question when i was implementing a solution for a similar(same?) problem where a guy trapped in a labyrinth had to find his way out. There were traps(B) and movable areas (E) in the grid. The goal was to reach his destination (G).</p>

<p>Anyways, here's the generalized code. I take in the no of rows, columns and then the complete grid. I'm only printing whether it's possible to REACH the destination or not. I leave the rest upto someone who's reading this as an exercise to make sure you've understood the code ;)</p>

<p>Mind the fact that the <strong>main objective</strong> of my answer is to show you that the <strong>size of your BFS function could be reduced</strong>. I'm posting my entire solution just to give the overall idea of BFS applied in a grid since i struggled while learning it. Hopefully, this will help out someone stuck in the same situation. If you want the postion or the path followed or anything, follow the instruction from the answers in this question. Do it yourself ;)</p>

<pre><code>import java.util.*;

/**
 * Created by Shreyans on 4/30/2015 at 10:27 PM using IntelliJ IDEA
 */

class MAZE
{
    static int r,c,s1,s2,f1,f2;//Rows, Columns, Start Coordinates, Finish Coordinates
    static int[] dx={1,-1,0,0};//right, left, NA, NA
    static int[] dy={0,0,1,-1};//NA, NA, bottom, top
    static char[][] grid;//Main grid
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);//I suggest using faster IO if you have performance concerns. I did. Scanner is readable hence the choice
        r=sc.nextInt();
        c=sc.nextInt();
        grid=new char[r][c];
        for(int i=0;i&lt;r;i++)
        {
            char[] s1=sc.next().toCharArray();//Reading a line of the Grid
            System.arraycopy(s1,0,grid[i],0,c);//Nice inbuilt function to copy contents of an array. Also doable manually
        }
        s1=sc.nextInt()-1;
        s2=sc.nextInt()-1;
        f1=sc.nextInt()-1;
        f2=sc.nextInt()-1;
        if(MAZEBFS())
        {
            System.out.println("PATH EXISTS");
        }
        else
        {
            System.out.println("PATH DOES NOT EXIST");
        }
    }
    private static boolean MAZEBFS()
    {
        if(s1==f1&amp;&amp;s2==f2)
        {
            return true;//He's already there
        }
        else
        {
            grid [f1][f2]='G';//finish
            Queue&lt;int[]&gt; q=new LinkedList&lt;int[]&gt;();
            int[]start={s1,s2};//Start Coordinates
            q.add(start);//Adding start to the queue since we're already visiting it
            grid[s1][s2]='B';
            while(q.peek()!=null)
            {
                int[]curr=q.poll();//poll or remove. Same thing
                for(int i=0;i&lt;4;i++)//for each direction
                {
                    if((curr[0]+dx[i]&gt;=0&amp;&amp;curr[0]+dx[i]&lt;r)&amp;&amp;(curr[1]+dy[i]&gt;=0&amp;&amp;curr[1]+dy[i]&lt;c))
                    {
                        //Checked if x and y are correct. ALL IN 1 GO
                        int xc=curr[0]+dx[i];//Setting current x coordinate
                        int yc=curr[1]+dy[i];//Setting current y coordinate
                        if(grid[xc][yc]=='G')//Destination found
                        {
                            //System.out.println(xc+" "+yc);
                            return true;
                        }
                        else if(grid[xc][yc]=='E')//Movable. Can't return here again so setting it to 'B' now
                        {
                            //System.out.println(xc+" "+yc);
                            grid[xc][yc]='B';//now BLOCKED
                            int[]temp={xc,yc};
                            q.add(temp);//Adding current coordinates to the queue
                        }
                    }
                }
            }
            return false;//Will return false if no route possible
        }
    }
}
</code></pre>

<p>Code in action: <a href="http://ideone.com/jiZKzn" rel="nofollow">http://ideone.com/jiZKzn</a></p>

<p>Any suggestions most welcome. Cheers :D</p>
