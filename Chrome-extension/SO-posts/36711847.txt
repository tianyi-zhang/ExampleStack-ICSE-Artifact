<p>You can do something like this, supposing you are drawing to the default framebuffer:</p>

<pre><code>    protected void saveImage(GL4 gl4, int width, int height) {

        try {

            GL4 gl4 = GLContext.getCurrentGL().getGL4();

            BufferedImage screenshot = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            Graphics graphics = screenshot.getGraphics();

            ByteBuffer buffer = GLBuffers.newDirectByteBuffer(width * height * 4);

            gl4.glReadBuffer(GL_BACK);
            gl4.glReadPixels(0, 0, width, height, GL_RGBA, GL_UNSIGNED_BYTE, buffer);

            for (int h = 0; h &lt; height; h++) {
                for (int w = 0; w &lt; width; w++) {
                    graphics.setColor(new Color((buffer.get() &amp; 0xff), (buffer.get() &amp; 0xff),
                            (buffer.get() &amp; 0xff)));
                    buffer.get();   
                    graphics.drawRect(w, height - h, 1, 1);
                }
            }
            BufferUtils.destroyDirectBuffer(buffer);
            File outputfile = new File("D:\\Downloads\\texture.png");
            ImageIO.write(screenshot, "png", outputfile);
        } catch (IOException ex) {
              Logger.getLogger(EC_DepthPeeling.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
</code></pre>

<p>Essentially you create a bufferedImage and a direct buffer. Then you use <code>Graphics</code> to render the content of the back buffer pixel by pixel to the bufferedImage. 
You need an additional <code>buffer.get();</code> because that represents the alpha value and you need also <code>height - h</code> to flip the image.</p>

<p>Edit: of course you need to read it when there is what you are looking for.</p>

<p>You have several options: </p>

<ul>
<li>trigger a boolean variable and call it directly from the <code>display</code> method, at the end, when everything you wanted has been rendered</li>
<li>disable the automatic buffer swapping, call from the key listener the <code>display()</code> method, read the back buffer and enable the swapping again</li>
<li>call from the key listener the same code you would call in the display</li>
</ul>
