<p>I've come up with the following workable solution, which was based on code I found at <a href="http://tech.chitgoks.com/2011/10/29/android-animation-to-expand-collapse-view-its-children/" rel="nofollow">http://tech.chitgoks.com/2011/10/29/android-animation-to-expand-collapse-view-its-children/</a></p>

<p>In my activity: </p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.edit_account);
    companyGroup.setOnCheckedChangeListener(new OnCheckedChangeListener()
    {
        @Override
        public void onCheckedChanged(RadioGroup group, int checkedId)
        {
            if (checkedId == R.id.companyRadio)
                EDNUtils.expandCollapse(companyNameText, true, 500);
            else
                EDNUtils.expandCollapse(companyNameText, false, 500);
        }
    });
}
</code></pre>

<p>Implementation from EDNUtils:        </p>

<pre><code>public static Animation expandCollapse(final View v, final boolean expand) 
{       
    return expandCollapse(v, expand, 1000);
}

public static Animation expandCollapse(final View v, final boolean expand, final int duration) 
{
    int currentHeight = v.getLayoutParams().height;
    v.measure(MeasureSpec.makeMeasureSpec(((View)v.getParent()).getMeasuredWidth(), MeasureSpec.AT_MOST), MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
    final int initialHeight = v.getMeasuredHeight();

    if ((expand &amp;&amp; currentHeight == initialHeight) || (!expand &amp;&amp; currentHeight == 0))
        return null;

    if (expand) 
        v.getLayoutParams().height = 0;
    else 
        v.getLayoutParams().height = initialHeight;
    v.setVisibility(View.VISIBLE);

    Animation a = new Animation() 
    {
        @Override
        protected void applyTransformation(float interpolatedTime, Transformation t) 
        {
            int newHeight = 0;
            if (expand) 
                newHeight = (int) (initialHeight * interpolatedTime);
            else 
                newHeight = (int) (initialHeight * (1 - interpolatedTime));
            v.getLayoutParams().height = newHeight;            
            v.requestLayout();

            if (interpolatedTime == 1 &amp;&amp; !expand)
                v.setVisibility(View.GONE);
        }

        @Override
        public boolean willChangeBounds()  
        {
            return true;
        }
    };
    a.setDuration(duration);
    v.startAnimation(a);
    return a;
}
</code></pre>
