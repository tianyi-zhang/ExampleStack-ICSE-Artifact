<p>How about this:</p>

<pre><code>public class Test {

    public static void main(final String[] args) {
        print_nCr(7, 4);
    }

    public static final void print_nCr(final int n, final int r) {
        int[] res = new int[r];
        for (int i = 0; i &lt; res.length; i++) {
            res[i] = i + 1;
        }
        boolean done = false;
        while (!done) {
            System.out.println(Arrays.toString(res));
            done = getNext(res, n, r);
        }
    }

    /////////

    public static final boolean getNext(final int[] num, final int n, final int r) {
        int target = r - 1;
        num[target]++;
        if (num[target] &gt; ((n - (r - target)) + 1)) {
            // Carry the One
            while (num[target] &gt; ((n - (r - target)))) {
                target--;
                if (target &lt; 0) {
                    break;
                }
            }
            if (target &lt; 0) {
                return true;
            }
            num[target]++;
            for (int i = target + 1; i &lt; num.length; i++) {
                num[i] = num[i - 1] + 1;
            }
        }
        return false;
    }
}
</code></pre>

<p>The key to this solution for me was to look at the problem as a numbering system and you want to increase a number by one and every time you reach an upper bound, you just carry the excess to the left one and ... You just need to implement the increasing algorithm correctly...</p>
