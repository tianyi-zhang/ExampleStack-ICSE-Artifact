<p>The problem with the recursive solution is that it computes many sequences of states multiple times. Imagine starting with the list </p>

<pre><code>[10, 48, 29, 47, 15, 3, 41, 11, 19, 4]
</code></pre>

<p>Now imagine two possible sequences of moves. The following lines contain</p>

<ol>
<li>The list of the current state</li>
<li>The scores of both players</li>
<li>The index of the active playere (0 or 1)</li>
</ol>

<p>The start of the first sequence:</p>

<pre><code>List [10, 48, 29, 47, 15, 3, 41, 11, 19, 4], scores [0, 0], active 0
List [10, 48, 29, 47, 15, 3, 41, 11, 19], scores [4, 0], active 1
List [10, 48, 29, 47, 15, 3, 41, 11], scores [4, 19], active 0
List [48, 29, 47, 15, 3, 41, 11], scores [14, 19], active 1
List [29, 47, 15, 3, 41, 11], scores [14, 67], active 0
...
</code></pre>

<p>The start of the second sequence: </p>

<pre><code>List [10, 48, 29, 47, 15, 3, 41, 11, 19, 4], scores [0, 0], active 0
List [48, 29, 47, 15, 3, 41, 11, 19, 4], scores [10, 0], active 1
List [29, 47, 15, 3, 41, 11, 19, 4], scores [10, 48], active 0
List [29, 47, 15, 3, 41, 11, 19], scores [14, 48], active 1
List [29, 47, 15, 3, 41, 11], scores [14, 67], active 0
...
</code></pre>

<p>At this point, both sequences arrived at the same state! Basically, a simple and intuitive summary is that the sequence</p>

<pre><code>Player 0 takes right
Player 1 takes right
Player 0 takes left 
Player 1 takes left
</code></pre>

<p>and</p>

<pre><code>Player 0 takes left
Player 1 takes left
Player 0 takes right
Player 1 takes right
</code></pre>

<p>result in the same state. In the recursive solution, the computation continues with the resulting state <em>twice</em>, and duplicate states that occur later are again handled <em>twice</em> - and this "tree" grows rather fast. </p>

<p>So one way of tackling this with some sort of dynamic programming is the following: Starting from a certain game state, one could compute all possible successors, and store them in a set. Then compute the successors of these states, keeping track of the score that was achieved so far. </p>

<p>This is an implementation of this approach, which also prints the results that have been skipped:</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;

public class PickingGame
{
    private static final boolean PRINT_SKIPPED_STATES = true;

    public static void main(String[] args)
    {
        //solve(Arrays.asList(3, 0, 4, 11, 1));
        solve(createLargerList());
    }

    private static List&lt;Integer&gt; createLargerList()
    {
        int max = 50;
        int n = 10;
        Random random = new Random(0);
        List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
        for (int i=0; i&lt;n; i++)
        {
            list.add(random.nextInt(max));
        }
        return list;
    }

    private static void solve(List&lt;Integer&gt; list)
    {
        System.out.println("Starting with "+list);

        Set&lt;PickingGameState&gt; currentStates = 
            new LinkedHashSet&lt;PickingGameState&gt;();
        currentStates.add(new PickingGameState(list));
        Set&lt;PickingGameState&gt; finalStates = 
            new LinkedHashSet&lt;PickingGameState&gt;();
        while (!currentStates.isEmpty())
        {
            PickingGameState currentState = currentStates.iterator().next();
            currentStates.remove(currentState);
            if (currentState.list.size() == 0)
            {
                finalStates.add(currentState);
            }
            else 
            {
                PickingGameState next0 = new PickingGameState(currentState, true);
                boolean changed0 = currentStates.add(next0);
                if (PRINT_SKIPPED_STATES &amp;&amp; !changed0)
                {
                    printDebugInfo(currentStates, next0);
                }

                if (currentState.list.size() &gt; 1)
                {
                    PickingGameState next1 = new PickingGameState(currentState, false);
                    boolean changed1 = currentStates.add(next1);
                    if (PRINT_SKIPPED_STATES &amp;&amp; !changed1)
                    {
                        printDebugInfo(currentStates, next0);
                    }
                }

            }
        }

        int maxScore = 0;
        PickingGameState maxPickingGameState = null;
        for (PickingGameState p : finalStates)
        {
            if (p.scores[0] &gt; maxScore)
            {
                maxScore = p.scores[0];
                maxPickingGameState = p;
            }
            if (p.scores[1] &gt; maxScore)
            {
                maxScore = p.scores[1];
                maxPickingGameState = p;
            }
        }

        System.out.println("The best result that can be achieved is");
        print(maxPickingGameState);
    }

    // Print all predecessors of the given state,
    // and finally the state itself
    private static void print(PickingGameState p)
    {
        if (p.predecessor == null)
        {
            System.out.println(p);
        }
        else
        {
            print(p.predecessor);
            System.out.println(p);
        }
    }

    // Print details about the given state that was ignored
    // because an "equal" state was already in the given
    // sequence
    private static void printDebugInfo(
        Iterable&lt;PickingGameState&gt; iterable, PickingGameState newState)
    {
        System.out.println("Ignoring "+newState);
        System.out.println("It was achieved with this sequence of moves:");
        print(newState);
        System.out.println("But the same state was already achieved with");
        print(findEqual(iterable, newState));
        System.out.println("");
    }

    // Returns the first element in the given sequence
    // that is equal to the given element
    private static &lt;T&gt; T findEqual(Iterable&lt;T&gt; iterable, T element)
    {
        for (T e : iterable)
        {
            if (e.equals(element))
            {
                return e;
            }
        }
        return null;
    }

}


class PickingGameState
{
    PickingGameState predecessor;
    List&lt;Integer&gt; list;
    int scores[];
    int active;

    PickingGameState(List&lt;Integer&gt; list)
    {
        this.predecessor = null;
        this.list = new ArrayList&lt;Integer&gt;(list);
        this.scores = new int[2]; 
        this.active = 0;
    }
    PickingGameState(PickingGameState other, boolean removeFirst)
    {
        this.predecessor = other;
        this.list = new ArrayList&lt;Integer&gt;(other.list);
        this.scores = other.scores.clone();
        if (removeFirst)
        {
            this.scores[other.active] += this.list.remove(0);
        }
        else
        {
            this.scores[other.active] += this.list.remove(this.list.size()-1);
        }
        this.active = 1-other.active;
    }

    @Override
    public String toString()
    {
        return "List "+list+", scores "+Arrays.toString(scores)+", active "+active;
    }

    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + active;
        result = prime * result + ((list == null) ? 0 : list.hashCode());
        result = prime * result + Arrays.hashCode(scores);
        return result;
    }
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PickingGameState other = (PickingGameState) obj;
        if (active != other.active)
            return false;
        if (list == null)
        {
            if (other.list != null)
                return false;
        }
        else if (!list.equals(other.list))
            return false;
        if (!Arrays.equals(scores, other.scores))
            return false;
        return true;
    }

}
</code></pre>
