<p>You can sort your <code>Hashmap</code> at the end of each round. Then you will printout the first element as a value. It's the simplest way to get the winner.</p>

<p>You can sort for example using:</p>

<pre><code>public static &lt;K,V extends Comparable&lt;? super V&gt;&gt; 
            List&lt;Entry&lt;K, V&gt;&gt; entriesSortedByValues(Map&lt;K,V&gt; map) {

    List&lt;Entry&lt;K,V&gt;&gt; sortedEntries = new ArrayList&lt;Entry&lt;K,V&gt;&gt;(map.entrySet());

    Collections.sort(sortedEntries, 
            new Comparator&lt;Entry&lt;K,V&gt;&gt;() {
                @Override
                public int compare(Entry&lt;K,V&gt; e1, Entry&lt;K,V&gt; e2) {
                    return e2.getValue().compareTo(e1.getValue());
                }
            }
    );

    return sortedEntries;
}
</code></pre>

<p>then you will just call: <code>entriesSortedByValues(players);</code></p>

<p>Example is from here:
<a href="http://stackoverflow.com/questions/11647889/sorting-the-mapkey-value-in-descending-order-based-on-the-value">Sorting the Map&lt;Key,Value&gt; in descending order based on the value</a></p>

<p><strong>UPDATE:</strong>
You can store <code>index</code> for the best player in each round, by comparing <code>score</code> with <code>best</code> value, for example:</p>

<pre><code>int best = 0, index = 0;
for (int q = 0; q &lt;= numberOfPlayers; q++){
   score = checkValue(deck);
   if (best &lt; score){
      index = q;
      best = score;
   }
   String name = playerNames.get(q);
   currentScore.add(score);
   System.out.println(name +" drew a "+ deck.get(0) + " worth " + score + " points!"); //Print player 1's card
   deck.remove(0); //Remove card
   players.put(name, players.get(name).intValue() - score);
   }
System.out.println("Best player in this round: " + playerNames.get(index);
</code></pre>
