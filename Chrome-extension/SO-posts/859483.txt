<p>Let me add another solution without using third-party libraries. It re-uses an exception handling pattern that was proposed by <a href="http://stackoverflow.com/users/12541/scott-stanchfield">Scott</a> (<a href="http://stackoverflow.com/questions/857913/why-would-i-care-about-ioexceptions-when-a-file-is-closed/858004#858004">link</a>). And I moved the ugly part into a separate message (I would hide in some FileUtils class ;) )</p>

<pre><code>public void someMethod() {
    final byte[] buffer = read(new File("test.txt"));
}

private byte[] read(final File file) {
    if (file.isDirectory())
     throw new RuntimeException("Unsupported operation, file "
       + file.getAbsolutePath() + " is a directory");
    if (file.length() > Integer.MAX_VALUE)
     throw new RuntimeException("Unsupported operation, file "
       + file.getAbsolutePath() + " is too big");

    Throwable pending = null;
    FileInputStream in = null;
    final byte buffer[] = new byte[(int) file.length()];
    try {
     in = new FileInputStream(file);
     in.read(buffer);
    } catch (Exception e) {
     pending = new RuntimeException("Exception occured on reading file "
       + file.getAbsolutePath(), e);
    } finally {
     if (in != null) {
      try {
       in.close();
      } catch (Exception e) {
       if (pending == null) {
        pending = new RuntimeException(
         "Exception occured on closing file" 
                             + file.getAbsolutePath(), e);
       }
      }
     }
     if (pending != null) {
      throw new RuntimeException(pending);
     }
    }
    return buffer;
}</code></pre>
