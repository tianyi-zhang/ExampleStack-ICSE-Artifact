<p>I solved the problem by copying the source code for package-private <code>NativeString</code> class and creating a public copy in my project.  I had to make one minor alteration due to the use of a package-private method in the constructor.</p>

<p><strong>Update:</strong> As @fragorl notes in the comments, the implementation of NativeString shown below is by now quite out-of-date.</p>

<hr>

<p>Usage:</p>

<pre><code>private static TRUSTEE createTrusteeForCurrentUser() {
    TRUSTEE result = new TRUSTEE();
    result.TrusteeForm = TRUSTEE_FORM.TRUSTEE_IS_NAME;
    result.TrusteeType = TRUSTEE_TYPE.TRUSTEE_IS_USER;
    result.ptstrName = new NativeString("CURRENT_USER",true).getPointer();
    result.write();
    return result;
}
</code></pre>

<p>NativeString.java:</p>

<pre><code>/** Provides a temporary allocation of an immutable C string 
 * (&lt;code&gt;const char*&lt;/code&gt; or &lt;code&gt;const wchar_t*&lt;/code&gt;) for use when 
 * converting a Java String into a native memory function argument.  
 *
 * @author  Todd Fast, todd.fast@sun.com
 * @author twall@users.sf.net
 */
public class NativeString implements CharSequence, Comparable {

    private Pointer pointer;
    private boolean wide;

    /** Create a native string (NUL-terminated array of &lt;code&gt;char&lt;/code&gt;).&lt;p&gt;
     * If the system property &lt;code&gt;jna.encoding&lt;/code&gt; is set, its value will
     * be used to encode the native string.  If not set or if the encoding
     * is unavailable, the default platform encoding will be used. 
     */
    public NativeString(String string) {
        this(string, false);
    }

    /** Create a native string as a NUL-terminated array of &lt;code&gt;wchar_t&lt;/code&gt;
     * (if &lt;code&gt;wide&lt;/code&gt; is true) or &lt;code&gt;char&lt;/code&gt;.&lt;p&gt;
     * If the system property &lt;code&gt;jna.encoding&lt;/code&gt; is set, its value will
     * be used to encode the native &lt;code&gt;char&lt;/code&gt;string.  
     * If not set or if the encoding is unavailable, the default platform 
     * encoding will be used. 
     * 
     * @param string value to write to native memory
     * @param wide whether to store the String as &lt;code&gt;wchar_t&lt;/code&gt;
     */
    public NativeString(String string, boolean wide) {
        if (string == null) {
            throw new NullPointerException("String must not be null");
        }
        // Allocate the memory to hold the string.  Note, we have to
        // make this 1 element longer in order to accommodate the terminating 
        // NUL (which is generated in Pointer.setString()).
        this.wide = wide;
        if (wide) {
            int len = (string.length() + 1 ) * Native.WCHAR_SIZE;
            pointer = new Memory(len);
            pointer.setString(0, string, true);
        }
        else {
            byte[] data = Native.toByteArray(string);
            pointer = new Memory(data.length + 1);
            pointer.write(0, data, 0, data.length);
            pointer.setByte(data.length, (byte)0);
        }
    }

    public int hashCode() {
        return toString().hashCode();
    }

    public boolean equals(Object other) {

        if (other instanceof CharSequence) {
            return compareTo(other) == 0;
        }
        return false;
    }

    public String toString() {
        String s = wide ? "const wchar_t*" : "const char*";
        s += "(" + pointer.getString(0, wide) + ")";
        return s;
    }

    public Pointer getPointer() {
        return pointer;
    }

    public char charAt(int index) {
        return toString().charAt(index);
    }

    public int length() {
        return toString().length();
    }

    public CharSequence subSequence(int start, int end) {
        return CharBuffer.wrap(toString()).subSequence(start, end);
    }

    public int compareTo(Object other) {

        if (other == null)
            return 1;

        return toString().compareTo(other.toString());
    }
}
</code></pre>
