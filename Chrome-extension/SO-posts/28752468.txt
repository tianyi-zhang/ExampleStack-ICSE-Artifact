<p>So here we go. I tried your code with a array size of 1,000,000, there 2GB RAM where not enough. So finally the answer will not be satisfying for you, but to point that problem out could be a nightlong program. But I think Stefan Mandel striked the nerve, so if you are interested, feel free to investigate in this direction. But now I won't let you go like that. I did your homework. This is working even with the regular heap size. <a href="http://stackoverflow.com/questions/6064905/got-stackoverflowerror-when-using-quicksort-can-i-increase-the-stack-and-the-he">Here</a> is a example how to increase the heap. You'll only need the -Xmx1024 to increase the RAM to 1 GB. </p>

<pre><code>public class QuickFooBar {

public static void main(String[] args) {
    Random random = new Random();
    int[] arr = new int[1000000];
    for (int i = 0; i &lt; arr.length; ++i) {
        arr[i] = random.nextInt(1000000);
    }

    QuickSort1 test;
    test = new QuickSort1(false);
    test.setV(arr);
    test.quickSort(0, arr.length - 1);
    arr = test.getV();

    for (int i = 0; i &lt; arr.length; ++i) {
        System.out.println(arr[i] + ", ");
    }
}
</code></pre>

<p>}</p>

<pre><code>public class QuickSort1 {

private int[] arr;
private final boolean insertionSort;


public QuickSort1(final boolean insertionSort) {
    this.insertionSort = insertionSort;
}

public void quickSort(int left, int right) {
    final int startInsertion = 20;
    if (insertionSort) {
        if (((left + right) / 2) &gt;= right - startInsertion) {
            arr = new InsertionSort().sort(arr);
            return;
        }
    }
    int index = partition(left, right);
    if (left &lt; index - 1) {
        quickSort(left, index - 1);
    }
    if (index &lt; right) {
        quickSort(index, right);
    }
}

private int partition(int left, int right) {
    int i = left, j = right;
    int tmp;
    int pivot = arr[new Random(right).nextInt()];
    while (i &lt;= j) {
        while (arr[i] &lt; pivot) {
            i++;
        }
        while (arr[j] &gt; pivot) {
            j--;
        }
        if (i &lt;= j) {
            tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
            i++;
            j--;
        }
    };
    return i;
}

public boolean getInfo() {
    return insertionSort;
}

public int[] getV() {
    return arr;
}

public void setV(int[] v) {
    this.arr = v;
}
</code></pre>

<p>}</p>

<p>public class InsertionSort {</p>

<pre><code>public int[] sort(int[] v) {
    for (int i = 1; i &lt; v.length; ++i) {
        int temp = v[i];
        int j;
        for (j = i - 1; j &gt;= 0 &amp;&amp; temp &lt; v[j]; j--) {
            v[j + 1] = v[j];
        }
        v[j + 1] = temp;
    }
    return v;
}
</code></pre>

<p>}</p>

<pre><code>    public int[] sort(int[] v) {
    for (int i = 1; i &lt; v.length; ++i) {
        int temp = v[i];
        int j;
        for (j = i - 1; j &gt;= 0 &amp;&amp; temp &lt; v[j]; j--) {
            v[j + 1] = v[j];
        }
        v[j + 1] = temp;
    }
    return v;
}
</code></pre>

<p>}</p>
