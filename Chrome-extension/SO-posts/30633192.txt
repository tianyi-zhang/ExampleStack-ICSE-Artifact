<p>i found in the sources that the ErrorPageFilter.java has the following code:</p>

<pre><code>private void doFilter(HttpServletRequest request, HttpServletResponse response,
        FilterChain chain) throws IOException, ServletException {
    ErrorWrapperResponse wrapped = new ErrorWrapperResponse(response);
    try {
        chain.doFilter(request, wrapped);
        int status = wrapped.getStatus();
        if (status &gt;= 400) {
            handleErrorStatus(request, response, status, wrapped.getMessage());
            response.flushBuffer();
        }
        else if (!request.isAsyncStarted() &amp;&amp; !response.isCommitted()) {
            response.flushBuffer();
        }
    }
    catch (Throwable ex) {
        handleException(request, response, wrapped, ex);
        response.flushBuffer();
    }
}
</code></pre>

<p>as you can see when you throw an exception and return a response code >= 400  it will do some code. there should be some additional check if the response was already committed or not.</p>

<p>The way to remove the ErrorPageFilter is like this</p>

<pre><code>protected WebApplicationContext run(SpringApplication application) {
application.getSources().remove(ErrorPageFilter.class);
return super.run(application);
</code></pre>

<p>}</p>

<p>Chris</p>
