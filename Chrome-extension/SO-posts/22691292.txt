<p>I copied the following from Java 6's Arrays.java and modified it to my needs. It uses insertion sort on smaller arrays so it should be faster than pure quicksort.</p>

<pre><code>/**
 * Sorts the specified sub-array of integers into ascending order.
 */
private static void sort1(int x[], int off, int len) {
    // Insertion sort on smallest arrays
    if (len &lt; 7) {
        for (int i=off; i&lt;len+off; i++)
            for (int j=i; j&gt;off &amp;&amp; x[j-1]&gt;x[j]; j--)
                swap(x, j, j-1);
        return;
    }

    // Choose a partition element, v
    int m = off + (len &gt;&gt; 1);       // Small arrays, middle element
    if (len &gt; 7) {
        int l = off;
        int n = off + len - 1;
        if (len &gt; 40) {        // Big arrays, pseudomedian of 9
            int s = len/8;
            l = med3(x, l,     l+s, l+2*s);
            m = med3(x, m-s,   m,   m+s);
            n = med3(x, n-2*s, n-s, n);
        }
        m = med3(x, l, m, n); // Mid-size, med of 3
    }
    int v = x[m];

    // Establish Invariant: v* (&lt;v)* (&gt;v)* v*
    int a = off, b = a, c = off + len - 1, d = c;
    while(true) {
        while (b &lt;= c &amp;&amp; x[b] &lt;= v) {
            if (x[b] == v)
                swap(x, a++, b);
            b++;
        }
        while (c &gt;= b &amp;&amp; x[c] &gt;= v) {
            if (x[c] == v)
                swap(x, c, d--);
            c--;
        }
        if (b &gt; c)
            break;
        swap(x, b++, c--);
    }

    // Swap partition elements back to middle
    int s, n = off + len;
    s = Math.min(a-off, b-a  );  vecswap(x, off, b-s, s);
    s = Math.min(d-c,   n-d-1);  vecswap(x, b,   n-s, s);

    // Recursively sort non-partition-elements
    if ((s = b-a) &gt; 1)
        sort1(x, off, s);
    if ((s = d-c) &gt; 1)
        sort1(x, n-s, s);
}

/**
 * Swaps x[a] with x[b].
 */
private static void swap(int x[], int a, int b) {
    int t = x[a];
    x[a] = x[b];
    x[b] = t;
}

/**
 * Swaps x[a .. (a+n-1)] with x[b .. (b+n-1)].
 */
private static void vecswap(int x[], int a, int b, int n) {
    for (int i=0; i&lt;n; i++, a++, b++)
        swap(x, a, b);
}

/**
 * Returns the index of the median of the three indexed integers.
 */
private static int med3(int x[], int a, int b, int c) {
    return (x[a] &lt; x[b] ?
            (x[b] &lt; x[c] ? b : x[a] &lt; x[c] ? c : a) :
            (x[b] &gt; x[c] ? b : x[a] &gt; x[c] ? c : a));
}
</code></pre>
