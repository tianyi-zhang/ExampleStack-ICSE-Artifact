<p>As I indicate in the comments, I think this is an XY-problem. </p>

<p>However, this answer might help. It produces a <code>List</code> (but not an <code>ArrayList</code>) that is an alternating view of the two original <code>List</code>s, avoiding the need to do any copying at all. As a result, it's <code>O(1)</code> rather than <code>O(n)</code>.</p>

<pre><code>public static &lt;T&gt; List&lt;T&gt; alternate(final List&lt;? extends T&gt; list1, final List&lt;? extends T&gt; list2) {
    final int size = list1.size();
    if (list2.size() != size)
        throw new IllegalArgumentException();
    return new AbstractList&lt;T&gt;() {
        @Override
        public int size() {
            return 2 * size;
        }
        @Override
        public T get(int i) {
            return ((i &amp; 1) == 0 ? list1 : list2).get(i &gt;&gt; 1);
        }
    };
}

public static void main(String[] args) {
    List&lt;String&gt; list1 = Arrays.asList("A", "B", "C");
    List&lt;String&gt; list2 = Arrays.asList("D", "E", "F");
    System.out.println(alternate(list1, list2));  // prints [A, D, B, E, C, F]
}
</code></pre>
