<p>It turns out you can do this, with the help of the built-in <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/io/fsp/zipfilesystemprovider.html">Zip File System provider</a>.  However, passing a resource URI directly to <code>Paths.get</code> won't work;  instead, one must first create a zip filesystem for the jar URI without the entry name, then refer to the entry in that filesystem:</p>

<pre><code>static Path resourceToPath(URL resource)
throws IOException,
       URISyntaxException {

    Objects.requireNonNull(resource, "Resource URL cannot be null");
    URI uri = resource.toURI();

    String scheme = uri.getScheme();
    if (scheme.equals("file")) {
        return Paths.get(uri);
    }

    if (!scheme.equals("jar")) {
        throw new IllegalArgumentException("Cannot convert to Path: " + uri);
    }

    String s = uri.toString();
    int separator = s.indexOf("!/");
    String entryName = s.substring(separator + 2);
    URI fileURI = URI.create(s.substring(0, separator));

    FileSystem fs = FileSystems.newFileSystem(fileURI,
        Collections.&lt;String, Object&gt;emptyMap());
    return fs.getPath(entryName);
}
</code></pre>
