<p>Whenever we are trying to connect to URL, </p>

<p>if server at the other site is running on https protocol and is mandating that we should communicate via information provided in certificate then 
      we have following option:</p>

<p>1) ask for the certificate(download the certificate), import this certificate in trustore. Default trustore java uses can be found in \Java\jdk1.6.0_29\jre\lib\security\cacerts, then if we retry to connect to the URL connection would be accepted.</p>

<p>2) In normal business cases, we might be connecting to internal URLS in organizations and we know that they are correct.
         In such cases, you trust that it is the correct URL, In such cases above, code can be used which will not mandate to store the certificate to connect to particular URL.</p>

<p><strong>for the point no 2 we have to follow below steps :</strong></p>

<p>1) write below method which sets  HostnameVerifier for  HttpsURLConnection which returns true for all cases meaning we are trusting the trustStore.</p>

<pre><code>  // trusting all certificate 
 public void doTrustToCertificates() throws Exception {
        Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
        TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                    public void checkServerTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                        return;
                    }

                    public void checkClientTrusted(X509Certificate[] certs, String authType) throws CertificateException {
                        return;
                    }
                }
        };

        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        HostnameVerifier hv = new HostnameVerifier() {
            public boolean verify(String urlHostName, SSLSession session) {
                if (!urlHostName.equalsIgnoreCase(session.getPeerHost())) {
                    System.out.println("Warning: URL host '" + urlHostName + "' is different to SSLSession host '" + session.getPeerHost() + "'.");
                }
                return true;
            }
        };
        HttpsURLConnection.setDefaultHostnameVerifier(hv);
    }
</code></pre>

<p>2) write below method, which calls doTrustToCertificates before trying to connect to URL</p>

<pre><code>    // connecting to URL
    public void connectToUrl(){
     doTrustToCertificates();//  
     URL url = new URL("https://www.example.com");
     HttpURLConnection conn = (HttpURLConnection)url.openConnection(); 
     System.out.println("ResponseCoede ="+conn.getResponseCode());
   }
</code></pre>

<p>This call will return response code = 200 means connection is successful.</p>

<p>For more detail and sample example you can refer to <a href="http://blog.hexican.com/2010/12/sending-soap-messages-through-https-using-saaj/" rel="nofollow">URL</a>.</p>
