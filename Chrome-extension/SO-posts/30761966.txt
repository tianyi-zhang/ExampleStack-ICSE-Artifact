<p>You can implement it yourself, without using any frameworks, it's very easy...</p>

<p>I presume that you want to check if you're inside a circle geofence or not.</p>

<p>To do this, just calculate the distance between the center of the circle and your location (longitude, latitude).  If the distance is smaller than your circle radius, then you're inside the geofence, otherwise you're outside the geofence.</p>

<p>Like this:</p>

<pre><code>    boolean checkInside(Circle circle, double longitude, double latitude) {
        return calculateDistance(
            circle.getLongitude(), circle.getLatitude(), longitude, latitude
        ) &lt; circle.getRadius();}
</code></pre>

<p>To calculate the distance between two points, you can use this:</p>

<pre><code>double calculateDistance(
  double longitude1, double latitude1, 
  double longitude2, double latitude2) {
    double c = 
        Math.sin(Math.toRadians(latitude1)) *
        Math.sin(Math.toRadians(latitude2)) +
            Math.cos(Math.toRadians(latitude1)) *
            Math.cos(Math.toRadians(latitude2)) *
            Math.cos(Math.toRadians(longitude2) - 
                Math.toRadians(longitude1));
    c = c &gt; 0 ? Math.min(1, c) : Math.max(-1, c);
    return 3959 * 1.609 * 1000 * Math.acos(c);
}
</code></pre>

<p>This formula is called the Haversine formula.
It takes into account the earths curvation.
The results are in meters.</p>

<p>I've also described it on my blog:</p>

<ul>
<li><p>for checking geofencing circles (it also describes distance-calculation between two points): 
<a href="http://stefanbangels.blogspot.be/2014/03/point-geo-fencing-sample-code.html" rel="nofollow">http://stefanbangels.blogspot.be/2014/03/point-geo-fencing-sample-code.html</a></p></li>
<li><p>for checking geofencing polygons:
<a href="http://stefanbangels.blogspot.be/2013/10/geo-fencing-sample-code.html" rel="nofollow">http://stefanbangels.blogspot.be/2013/10/geo-fencing-sample-code.html</a></p></li>
</ul>
