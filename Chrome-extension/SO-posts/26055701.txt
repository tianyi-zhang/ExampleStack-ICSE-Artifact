<p>Let's take a look at DefaultHighlighter. JEditorPane uses it to render selecton (highlights)
It has method</p>

<pre><code>public void paint(Graphics g) {
    // PENDING(prinz) - should cull ranges not visible
    int len = highlights.size();
    for (int i = 0; i &lt; len; i++) {
        HighlightInfo info = highlights.elementAt(i);
        if (!(info instanceof LayeredHighlightInfo)) {
            // Avoid allocing unless we need it.
            Rectangle a = component.getBounds();
            Insets insets = component.getInsets();
            a.x = insets.left;
            a.y = insets.top;
            a.width -= insets.left + insets.right;
            a.height -= insets.top + insets.bottom;
            for (; i &lt; len; i++) {
                info = highlights.elementAt(i);
                if (!(info instanceof LayeredHighlightInfo)) {
                    Highlighter.HighlightPainter p = info.getPainter();
                    p.paint(g, info.getStartOffset(), info.getEndOffset(),
                            a, component);
                }
            }
        }
    }
}
</code></pre>

<p>As you can see it paints all highlights.</p>

<p>You can replace the highlight painter (instance of DefaultHighlighter) of you JEditorPane with your extension.
Override the paint() method and add custom clip to the Graphics instance. The clip should have custom Shape based on current clip where the JLabel rectangle is subtracted.</p>
