<p>The Java implementation in <a href="http://stackoverflow.com/a/6676588/1321716">this answer</a> finds the <em>first</em> occurrence of a key. There's a <a href="http://stackoverflow.com/questions/6676360/first-occurrence-in-a-binary-search/6676588#comment7915352_6676588">comment</a> about how this could be changed to find the <em>last</em> occurrence, but the suggestion results in an infinite loop. The idea seems sound, though.</p>

<p><strong>EDIT:</strong> After some research, I found a <a href="http://the-algo-blog.blogspot.be/2011/06/binary-search-to-find-last-and-first.html" rel="nofollow">neat solution on The Algo Blog</a>. Since the first found match is not necessarily the needed one, you need to keep track of the "best" match so far. When you do get a match, you store it and continue with the binary search on the right of that match (<code>low = mid + 1</code>).</p>

<pre><code>public static int binarySearch(int[] a, int key) {
    return binarySearch(a, 0, a.length, key);
}

private static int binarySearch(int[] a, int fromIndex, int toIndex,
        int key) {
    int low = fromIndex;
    int high = toIndex - 1;
    int found = -1;

    while (low &lt;= high) {
        int mid = (low + high) &gt;&gt;&gt; 1;
        int midVal = a[mid];

        if (midVal &lt; key) {
            low = mid + 1;
        } else if (midVal &gt; key) {
            high = mid - 1;
        } else {
            found = mid;
            // For last occurrence:
            low = mid + 1;
            // For first occurrence:
            // high = mid - 1;
        }
    }
    return found;
}
</code></pre>

<p>This change keeps the <code>O(log n)</code> complexity. Still, the actual performance depends on the application. When the length of the array is much larger than the amount of duplications of the sought key, a linear search for the last occurrence may be faster. When there are a lot of duplications though, this modified binary search is probably preferable.</p>
