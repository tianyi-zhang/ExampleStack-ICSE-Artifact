<p>Well, you can use a custom adapter for that. But you could also use the <code>ArrayAdapter</code> class if you just want to show text on your <code>ListView</code>.</p>

<p>But, if for whatever reason you want to create a custom adapter, try the following...</p>

<p>In this particular case I'm subclassing the <a href="http://developer.android.com/reference/android/widget/BaseAdapter.html" rel="nofollow"><code>BaseAdapter</code></a> class.</p>

<p>This custom adapter will take hold of my data model, and will inflate the data to my <code>ListView</code> rows.</p>

<p>First, I'll create the XML of my custom row. You can see the code below.</p>

<p><strong>item.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Test text"
        android:id="@+id/tv"
        android:layout_alignParentTop="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentStart="true"
        android:layout_centerVertical="true"/&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>Here I've created a row that displays a text.</p>

<p>Now, I'll create my custom adapter to handle this XML. As you can see below.</p>

<p><strong>MyAdapter.java</strong></p>

<pre><code>public class MyAdapter extends BaseAdapter {

    private static final String LOG_TAG = MyAdapter.class.getSimpleName();

    private Context context_;
    private ArrayList&lt;String&gt; items;

    public MyAdapter(Context context, ArrayList&lt;String&gt; items) {
        this.context_ = context;
        this.items = items;
    }

    @Override
    public int getCount() {
        return items.size();
    }

    @Override
    public Object getItem(int position) {
        return items.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        if (convertView == null) {
            LayoutInflater mInflater = (LayoutInflater)
                    context_.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);

            convertView = mInflater.inflate(R.layout.item_mail, null);
        }

        TextView tv = (TextView) convertView.findViewById(R.id.tv);

        String text = items.get(position);

        Log.d(LOG_TAG,"Text: " + text);

        tv.setText(text);

        return convertView;
    }
}
</code></pre>

<p>Ok. Now we have everything to make this work. In your <code>Activity</code> class, do something like that:</p>

<p><strong>activity_main.xml</strong></p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity"&gt;

    &lt;TextView
        android:text="@string/hello_world"
        android:id="@+id/tv_header"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true" /&gt;

    &lt;LinearLayout
        android:orientation="vertical"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@+id/tv_header"&gt;

        &lt;Button
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Add item"
            android:id="@+id/button"
            android:layout_gravity="center" /&gt;

        &lt;ListView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:id="@+id/listView" /&gt;
    &lt;/LinearLayout&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p><strong>MainActivity.java</strong></p>

<pre><code>public class MainActivity extends ActionBarActivity {

    private int numItem = 1; // Dummy int to create my items with different numbers.

    private MyAdapter myAdapter; // Your custom adapter.

    private ArrayList&lt;String&gt; items; // This is going to be your data structure, every time you change it, call the notifyDataSetChanged() method.

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button bt = (Button) findViewById(R.id.button);
        ListView lv = (ListView) findViewById(R.id.listView);
        items = new ArrayList&lt;&gt;();
        myAdapter = new MyAdapter(this,items);
        lv.setAdapter(myAdapter);

        bt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addItem(); // The method I'm using to insert the item. Look for it below.
            }
        });
    }

    private void addItem() {
        items.add("Text " + numItem++);

        mailAdapter.notifyDataSetChanged(); // Notifying the adapter that my ArrayList was modified.
    }
}
</code></pre>

<p>This should do the trick.</p>

<hr>

<p>From what you told me, you want to use a <code>String</code> array instead of a <code>ArrayList&lt;String&gt;</code>. Well, change the adapter to the following.</p>

<p><strong>MyAdapter.java</strong></p>

<pre><code>public class MyAdapter extends BaseAdapter {

    private static final String LOG_TAG = MyAdapter.class.getSimpleName();

    private Context context_;
    private String[] items;

    public MyAdapter(Context context, String[] items) {
        this.context_ = context;
        this.items = items;
    }

    @Override
    public int getCount() {
        return items.length;
    }

    @Override
    public Object getItem(int position) {
        return items[position];
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    // Rest of the code... Same as before.
}
</code></pre>

<p><strong>MainActivity.java</strong></p>

<pre><code>public class MainActivity extends ActionBarActivity {

    private MyAdapter myAdapter; // Your custom adapter.

    private String[] items;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Button bt = (Button) findViewById(R.id.button);
        ListView lv = (ListView) findViewById(R.id.listView);
        items = {"Whatever","String","You","Like"};
        myAdapter = new MyAdapter(this,items);
        lv.setAdapter(myAdapter);
    }
}
</code></pre>

<p><strong>The problem with this approach:</strong> Your adapter will have a fixed size, which will be the size of your String array once you create it. And you won't be able to make it bigger, unless you create another adapter with a different <code>String</code> array.</p>

<p><a href="http://stackoverflow.com/questions/2426671/variable-length-dynamic-arrays-in-java">This question</a> discusses this matter.</p>
