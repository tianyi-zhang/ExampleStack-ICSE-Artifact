<p>You would do this exactly as you would do with a list that contains only text.</p>

<p>First you might want to create a class that represents an item in your list (maybe you want to add some more data, like an ID or a name), like:</p>

<pre><code>class ItemInMyList {
        Bitmap image;
        String title;
        Integer id;
 }
</code></pre>

<p>Then just create a new class that extends ArrayAdapter:</p>

<pre><code>public class MyAdapter extends ArrayAdapter&lt;ItemInMyList&gt; {
    private final Context context;
    private final List&lt;ItemInMyList&gt; values;
    private int layout;

    public MyAdapter(Context context, List&lt;ItemInMyList&gt; values, int layout) {
        super(context, layout, values);
        this.context = context;
        this.values = values;
        this.layout = layout;
    }


    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        LayoutInflater inflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        // When convertView is not null, we can reuse it directly, there is no need
        // to reinflate it. We only inflate a new View when the convertView supplied
        // by ListView is null.
        if (convertView == null) {
            convertView = inflater.inflate(layout, null);
            // Creates a ViewHolder and store references to the two children views
            // we want to bind data to.
            holder = new ViewHolder();
            holder.name= (TextView) convertView.findViewById(R.id.name);
            holder.image = (ImageView) convertView.findViewById(R.id.image);
            // Bind the data efficiently with the holder.
            convertView.setTag(holder);
        } else {
            // Get the ViewHolder back to get fast access to the TextView
            // and the ImageView.
            holder = (ViewHolder) convertView.getTag();
        }
        try {
            holder.text.setText(values.get(position).title);
            // Set your image to the ImageView in your list layout
            holder.image.setImageBitmap(values.get(position).image);
        } catch (NullPointerException e) {
            e.printStackTrace();
        }
        return convertView;
    }

    static class ViewHolder {
        TextView name;
        ImageView image;
    }
}
</code></pre>

<p>Now you just need to create a layout that represents a row in your ListView. In this example you would likely add an ImageView (image) and a TextView (name) to a LinearLayout. </p>

<p>Then when you instanciate the adapter, just give it the layout for the row:</p>

<pre><code>new MyAdapter(this, data, R.layout.rowlayout);
</code></pre>

<p>That's it, basically.</p>
