<p>A third alternative is the following</p>

<pre><code>StringBuilder output = new StringBuilder();
for (int i = 0; i &lt; items.length - 1; i++) {
    output.append(items[i]);
    output.append(",");
}
if (items.length &gt; 0) output.append(items[items.length - 1]);
</code></pre>

<p>But the best is to use a join()-like method. For Java there's a <a href="http://commons.apache.org/lang/api/org/apache/commons/lang/StringUtils.html#join%28java.lang.Object%5b%5d%29" rel="nofollow">String.join</a> in third party libraries, that way your code becomes:</p>

<pre><code>StringUtils.join(items,',');
</code></pre>

<p>FWIW, the <a href="http://svn.apache.org/viewvc/commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/StringUtils.java?revision=956775&amp;view=markup" rel="nofollow">join() method</a> (line 3232 onwards) in Apache Commons does use an if within a loop though: </p>

<pre><code>public static String join(Object[] array, char separator, int startIndex, int endIndex)     {
        if (array == null) {
            return null;
        }
        int bufSize = (endIndex - startIndex);
        if (bufSize &lt;= 0) {
            return EMPTY;
        }

        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
        StringBuilder buf = new StringBuilder(bufSize);

        for (int i = startIndex; i &lt; endIndex; i++) {
            if (i &gt; startIndex) {
                buf.append(separator);
            }
            if (array[i] != null) {
                buf.append(array[i]);
            }
        }
        return buf.toString();
    }
</code></pre>
