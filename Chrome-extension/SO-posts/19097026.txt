<p>If you're trying to reduce the number of points in a path, but still keep an accurate representation of the path, your best bet is to use a line-simplification algorithm.</p>

<p>A common line-simplification algorithm is Douglas-Peucker, and there is an implementation of Douglas-Peucker in the Google MyTracks project that you can use, licensed under Apache v2.0:
<a href="https://code.google.com/p/mytracks/source/browse/MyTracks/src/com/google/android/apps/mytracks/util/LocationUtils.java#78" rel="nofollow">https://code.google.com/p/mytracks/source/browse/MyTracks/src/com/google/android/apps/mytracks/util/LocationUtils.java#78</a></p>

<p>Here's the code, in case the link breaks:</p>

<pre><code>/**
 * Decimates the given locations for a given zoom level. This uses a
 * Douglas-Peucker decimation algorithm.
 * 
 * @param tolerance in meters
 * @param locations input
 * @param decimated output
 */
private static void decimate(double tolerance, ArrayList&lt;Location&gt; locations, ArrayList&lt;Location&gt; decimated) {
  final int n = locations.size();
  if (n &lt; 1) {
    return;
  }
  int idx;
  int maxIdx = 0;
  Stack&lt;int[]&gt; stack = new Stack&lt;int[]&gt;();
  double[] dists = new double[n];
  dists[0] = 1;
  dists[n - 1] = 1;
  double maxDist;
  double dist = 0.0;
  int[] current;

  if (n &gt; 2) {
    int[] stackVal = new int[] { 0, (n - 1) };
    stack.push(stackVal);
    while (stack.size() &gt; 0) {
      current = stack.pop();
      maxDist = 0;
      for (idx = current[0] + 1; idx &lt; current[1]; ++idx) {
        dist = LocationUtils.distance(
            locations.get(idx), locations.get(current[0]), locations.get(current[1]));
        if (dist &gt; maxDist) {
          maxDist = dist;
          maxIdx = idx;
        }
      }
      if (maxDist &gt; tolerance) {
        dists[maxIdx] = maxDist;
        int[] stackValCurMax = { current[0], maxIdx };
        stack.push(stackValCurMax);
        int[] stackValMaxCur = { maxIdx, current[1] };
        stack.push(stackValMaxCur);
      }
    }
  }

  int i = 0;
  idx = 0;
  decimated.clear();
  for (Location l : locations) {
    if (dists[idx] != 0) {
      decimated.add(l);
      i++;
    }
    idx++;
  }
  Log.d(Constants.TAG, "Decimating " + n + " points to " + i + " w/ tolerance = " + tolerance);
}
</code></pre>
