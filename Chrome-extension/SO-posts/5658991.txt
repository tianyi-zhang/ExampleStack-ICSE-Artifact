<p>Facebook login is different:</p>

<pre><code>package com.test;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;

import org.apache.harmony.javax.security.auth.callback.CallbackHandler;
import org.jivesoftware.smack.SASLAuthentication;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.sasl.SASLMechanism;
import org.jivesoftware.smack.util.Base64;

import de.measite.smack.Sasl;

public class FacebookConnectSASLMechanism  extends SASLMechanism
{

    private String sessionKey = "";
    private String sessionSecret = "";
    private String apiKey = "";

    public FacebookConnectSASLMechanism(SASLAuthentication saslAuthentication) {
            super(saslAuthentication);
    }

    // protected void authenticate() throws IOException, XMPPException {
    // String[] mechanisms = { getName() };
    // Map&lt;String, String&gt; props = new HashMap&lt;String, String&gt;();
    // sc = Sasl.createSaslClient(mechanisms, null, "xmpp", hostname, props,
    // this);
    //
    // super.authenticate();
    // }

    protected void authenticate() throws IOException, XMPPException {
            StringBuilder stanza = new StringBuilder();
            stanza.append("&lt;auth mechanism=\"").append(getName());
            stanza.append("\" xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\"&gt;");
            stanza.append("&lt;/auth&gt;");

            // Send the authentication to the server
            //getSASLAuthentication().send(stanza.toString());
    }

    public void authenticate(String apiKeyAndSessionKey, String host, String sessionSecret)
                    throws IOException, XMPPException {

            if(apiKeyAndSessionKey==null || sessionSecret==null)
                    throw new IllegalStateException("Invalid parameters!");

            String[] keyArray = apiKeyAndSessionKey.split("\\|");

            if(keyArray==null || keyArray.length != 2)
                    throw new IllegalStateException("Api key or session key is not present!");

            this.apiKey = keyArray[0];
            this.sessionKey = keyArray[1];
            this.sessionSecret = sessionSecret;

            this.authenticationId = sessionKey;
            this.password = sessionSecret;
            this.hostname = host;

            String[] mechanisms = { "DIGEST-MD5" };
            Map&lt;String, String&gt; props = new HashMap&lt;String, String&gt;();
            sc = Sasl.createSaslClient(mechanisms, null, "xmpp", host, props, this);
            authenticate();
    }

    public void authenticate(String username, String host, CallbackHandler cbh)
                    throws IOException, XMPPException {
            String[] mechanisms = { "DIGEST-MD5" };
            Map&lt;String, String&gt; props = new HashMap&lt;String, String&gt;();
            sc = Sasl.createSaslClient(mechanisms, null, "xmpp", host, props, cbh);
            authenticate();
    }

    protected String getName() {
            return "X-FACEBOOK-PLATFORM";
    }

    public void challengeReceived(String challenge) throws IOException {
            // Build the challenge response stanza encoding the response text
            StringBuilder stanza = new StringBuilder();

            byte response[] = null;
            if (challenge != null) {
                    String decodedResponse = new String(Base64.decode(challenge));
                    Map&lt;String, String&gt; parameters = getQueryMap(decodedResponse);

                    String version = "1.0";
                    String nonce = parameters.get("nonce");
                    String method = parameters.get("method");

                    Long callId = new GregorianCalendar().getTimeInMillis()/1000;

                    String sig = "api_key="+apiKey
                                                    +"call_id="+callId
                                                    +"method="+method
                                                    +"nonce="+nonce
                                                    +"session_key="+sessionKey
                                                    +"v="+version
                                                    +sessionSecret;

                    try {
                            sig = MD5(sig);
                    } catch (NoSuchAlgorithmException e) {
                            throw new IllegalStateException(e);
                    }

                    String composedResponse = "api_key="+apiKey+"&amp;"
                                                                            +"call_id="+callId+"&amp;"
                                                                            +"method="+method+"&amp;"
                                                                            +"nonce="+nonce+"&amp;"
                                                                            +"session_key="+sessionKey+"&amp;"
                                                                            +"v="+version+"&amp;"
                                                                            +"sig="+sig;

                    response = composedResponse.getBytes();
            }

            String authenticationText="";

            if (response != null) {
                    authenticationText = Base64.encodeBytes(response, Base64.DONT_BREAK_LINES);
            }

            stanza.append("&lt;response xmlns=\"urn:ietf:params:xml:ns:xmpp-sasl\"&gt;");
            stanza.append(authenticationText);
            stanza.append("&lt;/response&gt;");

            // Send the authentication to the server
            //getSASLAuthentication().send(stanza);
    }

    private Map&lt;String, String&gt; getQueryMap(String query) {
            String[] params = query.split("&amp;");
            Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();
            for (String param : params) {
                    String name = param.split("=")[0];
                    String value = param.split("=")[1];
                    map.put(name, value);
            }
            return map;
    }

private String convertToHex(byte[] data) {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i &lt; data.length; i++) {
        int halfbyte = (data[i] &gt;&gt;&gt; 4) &amp; 0x0F;
        int two_halfs = 0;
        do {
            if ((0 &lt;= halfbyte) &amp;&amp; (halfbyte &lt;= 9))
                buf.append((char) ('0' + halfbyte));
            else
                buf.append((char) ('a' + (halfbyte - 10)));
            halfbyte = data[i] &amp; 0x0F;
        } while(two_halfs++ &lt; 1);
    }
    return buf.toString();
}

public String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException  {
    MessageDigest md;
    md = MessageDigest.getInstance("MD5");
    byte[] md5hash = new byte[32];
    md.update(text.getBytes("iso-8859-1"), 0, text.length());
    md5hash = md.digest();
    return convertToHex(md5hash);
}
}
</code></pre>
