<p>Here is my final code for camera switching back/front, It's Working for me .. </p>

<pre><code>public class MyCamera extends Activity implements SurfaceHolder.Callback, Camera.ShutterCallback, Camera.PictureCallback {

Camera mCamera;
SurfaceView mPreview;
String filePath ;
int currentCameraId = 0;
@SuppressWarnings("deprecation")
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    requestWindowFeature(Window.FEATURE_NO_TITLE);
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        WindowManager.LayoutParams.FLAG_FULLSCREEN);
    setContentView(R.layout.camera_preview);
    mPreview = (SurfaceView)findViewById(R.id.preview);
    mPreview.getHolder().addCallback(this);
    mPreview.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    mCamera = Camera.open(currentCameraId);
}

@Override
public void onPause() {
    super.onPause();
    mCamera.stopPreview();
}

@Override
public void onDestroy() {
    super.onDestroy();
    mCamera.release();
    Log.d("CAMERA","Destroy");
}

public void onCancelClick(View v) {

    mCamera.stopPreview();
    mCamera.release();
    if(currentCameraId == Camera.CameraInfo.CAMERA_FACING_BACK){
        currentCameraId = Camera.CameraInfo.CAMERA_FACING_FRONT;
    }
    else {
        currentCameraId = Camera.CameraInfo.CAMERA_FACING_BACK;
    }
    mCamera = Camera.open(currentCameraId);
    Camera.CameraInfo info = new Camera.CameraInfo();
    Camera.getCameraInfo(Camera.CameraInfo.CAMERA_FACING_FRONT, info);
    int rotation = this.getWindowManager().getDefaultDisplay().getRotation();
    int degrees = 0;
    switch (rotation) {
        case Surface.ROTATION_0: degrees = 0; break; //Natural orientation
            case Surface.ROTATION_90: degrees = 90; break; //Landscape left
            case Surface.ROTATION_180: degrees = 180; break;//Upside down
            case Surface.ROTATION_270: degrees = 270; break;//Landscape right
        }
    int rotate = (info.orientation - degrees + 360) % 360;

    //STEP #2: Set the 'rotation' parameter
    Camera.Parameters params = mCamera.getParameters();
    params.setRotation(rotate); 
      try {
        mCamera.setPreviewDisplay(mPreview.getHolder());
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    mCamera.setParameters(params);
    mCamera.setDisplayOrientation(90);
    mCamera.startPreview();
}

public void onSnapClick(View v) {
    mCamera.takePicture(this, null, null, this);
}

@Override
public void onShutter() {
    Toast.makeText(this, "Click!", Toast.LENGTH_SHORT).show();
}

@Override
public void onPictureTaken(byte[] data, Camera camera) {
    //Here, we chose internal storage
     FileOutputStream fos = null;
     try {
         filePath = "/sdcard/test.jpg";
         fos = new FileOutputStream(
                 filePath);
         fos.write(data);
         fos.close();
         //Log.d("Log", "onPictureTaken - wrote bytes: " + data.length);
     } catch (FileNotFoundException e) {
         e.printStackTrace();
         Log.d("Log", "onPictureTaken - wrote bytes: " + data.length);
     } catch (IOException e) {
         e.printStackTrace();
         Log.d("Log", "onPictureTaken - wrote bytes: " + data.length);
     } finally {
         Intent i = getIntent();
         i.putExtra("Path",filePath);
         setResult(RESULT_OK, i);
         finish();
     }
    camera.startPreview();
}
@Override
public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
    Camera.CameraInfo info = new Camera.CameraInfo();
    Camera.getCameraInfo(Camera.CameraInfo.CAMERA_FACING_BACK, info);
    int rotation = this.getWindowManager().getDefaultDisplay().getRotation();
    int degrees = 0;
    switch (rotation) {
        case Surface.ROTATION_0: degrees = 0; break; //Natural orientation
            case Surface.ROTATION_90: degrees = 90; break; //Landscape left
            case Surface.ROTATION_180: degrees = 180; break;//Upside down
            case Surface.ROTATION_270: degrees = 270; break;//Landscape right
        }
    int rotate = (info.orientation - degrees + 360) % 360;

    //STEP #2: Set the 'rotation' parameter
    Camera.Parameters params = mCamera.getParameters();
    params.setRotation(rotate); 
    mCamera.setParameters(params);
    mCamera.setDisplayOrientation(90);
    mCamera.startPreview();
}
@Override
public void surfaceCreated(SurfaceHolder holder) {
    try {
        mCamera.setPreviewDisplay(mPreview.getHolder());
    } catch (Exception e) {
        e.printStackTrace();
    }
}
@Override
public void surfaceDestroyed(SurfaceHolder holder) {
    Log.i("PREVIEW","surfaceDestroyed");
}
</code></pre>

<p>}</p>
