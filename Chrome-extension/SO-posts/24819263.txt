<p>This is the rgb code</p>

<pre><code>public int[] YUV_NV21_TO_RGB( byte[] yuv, int width, int height) {
    final int frameSize = width * height;
    int[] argb = new int[width*height];

    final int ii = 0;
    final int ij = 0;
    final int di = +1;
    final int dj = +1;

    int a = 0;
    for (int i = 0, ci = ii; i &lt; height; ++i, ci += di) {
        for (int j = 0, cj = ij; j &lt; width; ++j, cj += dj) {
            int y = (0xff &amp; ((int) yuv[ci * width + cj]));
            int v = (0xff &amp; ((int) yuv[frameSize + (ci &gt;&gt; 1) * width + (cj &amp; ~1) + 0]));
            int u = (0xff &amp; ((int) yuv[frameSize + (ci &gt;&gt; 1) * width + (cj &amp; ~1) + 1]));
            y = y &lt; 16 ? 16 : y;

            int a0 = 1192 * (y - 16);
            int a1 = 1634 * (v - 128);
            int a2 = 832 * (v - 128);
            int a3 = 400 * (u - 128);
            int a4 = 2066 * (u - 128);

            int r = (a0 + a1) &gt;&gt; 10;
            int g = (a0 - a2 - a3) &gt;&gt; 10;
            int b = (a0 + a4) &gt;&gt; 10;

            r = r &lt; 0 ? 0 : (r &gt; 255 ? 255 : r);
            g = g &lt; 0 ? 0 : (g &gt; 255 ? 255 : g);
            b = b &lt; 0 ? 0 : (b &gt; 255 ? 255 : b);

            argb[a++] = 0xff000000 | (r &lt;&lt; 16) | (g &lt;&lt; 8) | b;
        }
    }


    return argb;
}
</code></pre>

<p>The problem is that if i use CreateBitmap with RGB_565 option, time is at least 10 ms faster than ARGB8888.
If RGB_565 is a sort of compression (loss of data), should not be the opposite ( createBitmap with ARGB888 faster than RGB_565)?</p>
