<h2><strong>1. Create the share button</strong></h2>

<p>I wanted mine in the action bar so I created a share_menu.xml file:</p>

<pre><code>&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"&gt;

    &lt;item
        android:id="@+id/share_item"
        app:showAsAction="always|withText"
        android:title="Share"
        android:icon="@drawable/share_icon"
        android:actionProviderClass=
            "android.widget.ShareActionProvider" /&gt;
&lt;/menu&gt;
</code></pre>

<p>This adds a button in the action bar with my share_icon and the text.</p>

<h2><strong>2. Add the sharing menu to your activity (or fragment)</strong></h2>

<p>I did this inside a fragment so I added the code below to my fragment file. If you are inside an activity then you override <code>public boolean onCreateOptionsMenu(Menu menu)</code> instead.</p>

<pre><code>@Override
public void onCreateOptionsMenu(
        Menu menu, MenuInflater inflater) {
    inflater.inflate(R.menu.share_menu, menu);
}
</code></pre>

<p>if you are doing this with a fragment then in <code>onCreate()</code> you have to add:</p>

<pre><code>setHasOptionsMenu(true);
</code></pre>

<h2><strong>3. Set up button action/callback/onclick</strong></h2>

<p>This is what is going to kick off the sharing.</p>

<pre><code>@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (item.getItemId() == R.id.share_item){
            Bitmap bm = screenShot(this.getView());
            File file = saveBitmap(bm, "mantis_image.png");
            Log.i("chase", "filepath: "+file.getAbsolutePath());
            Uri uri = Uri.fromFile(new File(file.getAbsolutePath()));
            Intent shareIntent = new Intent();
            shareIntent.setAction(Intent.ACTION_SEND);
            shareIntent.putExtra(Intent.EXTRA_TEXT, "Check out my app.");
            shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
            shareIntent.setType("image/*");
            shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            startActivity(Intent.createChooser(shareIntent, "share via"));
        }
        return super.onOptionsItemSelected(item);
    }
</code></pre>

<p>Notice this calls two magic methods:</p>

<p><strong>screenShot():</strong></p>

<pre><code>private Bitmap screenShot(View view) {
    Bitmap bitmap = Bitmap.createBitmap(view.getWidth(),view.getHeight(), Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(bitmap);
    view.draw(canvas);
    return bitmap;
}

private static File saveBitmap(Bitmap bm, String fileName){
    final String path = Environment.getExternalStorageDirectory().getAbsolutePath() + "/Screenshots";
    File dir = new File(path);
    if(!dir.exists())
        dir.mkdirs();
    File file = new File(dir, fileName);
    try {
        FileOutputStream fOut = new FileOutputStream(file);
        bm.compress(Bitmap.CompressFormat.PNG, 90, fOut);
        fOut.flush();
        fOut.close();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return file;
}
</code></pre>

<h2><strong>Important</strong></h2>

<p>To your <code>AndroidManifest.xml</code>, you have to add:</p>

<pre><code>&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;
&lt;uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" /&gt;
</code></pre>

<p>or the screenshot won't be saved, and gmail will think you are trying to attach an empty file.</p>

<p>Also, a lot of SO answers say to use <code>"*/*"</code> for <code>shareIntent.setType()</code> but this creates an issue with facebook sharing, so it's best to leave it as <code>"image/*"</code>.</p>
