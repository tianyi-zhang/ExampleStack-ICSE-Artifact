<p>It looks like you're calling <code>newsdetail = JSONServices.getNewsDescription();</code> and then assigning that result to your <code>adapter</code> in <code>NewsDetailFragment</code>. What is being returned by <code>JSONServices.getNewsDescription();</code>? I imagine it is all of the NewsDetail articles.</p>

<p>@Raghunandan is right, the example shows how to handle two fragments in an activity and show the 'Detail' fragment based on which item was selected in the 'News' list.</p>

<p>You could implement the calls in your parent Activity as shown in the example under 'Implement the Interface'. </p>

<p>YourParentActivity.java</p>

<pre><code>public static class YourParentActivity extends Activity {

    implements NewsFragment.OnHeadlineSelectedListener{
        ...
    }

    public void onArticleSelected(int position) {
        NewsDetailFramgment articleFrag = (NewsDetailFramgment)
        getSupportFragmentManager().findFragmentById(R.id.news_detail_framgment);

        if (articleFrag != null) {
            // If article frag is available, we're in two-pane layout...

            // Call a method in the NewsDetailFramgment to update its content
            articleFrag.updateArticleView(position);
        } else {
            // Otherwise, we're in the one-pane layout and must swap frags...

            // Create fragment and give it an argument for the selected article
            NewsDetailFramgment newFragment = new NewsDetailFramgment ();
            Bundle args = new Bundle();
            args.putInt(NewsDetailFramgment.ARG_POSITION, position);
            newFragment.setArguments(args);

            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();

            // Replace whatever is in the fragment_container view with this fragment,
            // and add the transaction to the back stack so the user can navigate back
            transaction.replace(R.id.fragment_container, newFragment);
            transaction.addToBackStack(null);

            // Commit the transaction
            transaction.commit();
        }
    }
}
</code></pre>

<p>Notice that <code>onArticleSelected()</code> accepts <code>int position</code>? This is the position in the News Headlines adapter that was clicked. You can use this to get the corresponding News Detail item from your Details result.</p>

<p>This is purely an outline based on the example, but should show you what you need to do in your parent activity.</p>

<p>Read the example and add the relevant parts to your fragments (look at 'Define an Interface' for changes to your <code>NewsFragment.java</code>).</p>

<p><strong>Edit</strong></p>

<p>You need to define an interface in your <code>NewsFragment</code> class as shown in the documentation under 'Define an Interface'.</p>

<pre><code>// Container Activity must implement this interface
public interface OnHeadlineSelectedListener {
    public void onArticleSelected(int position);
}
</code></pre>

<p>This provides a callback to your parent class to handle when a news headline is pressed with the position of the headline which was selected. In the example it calls <code>onArticleSelected(int position);</code> in your parent activity to then populate the <code>NewsDetailFragment</code>.</p>
