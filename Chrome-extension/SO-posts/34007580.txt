<p>You have a couple options here. A list is a bit different than an array when it comes to shuffling.</p>

<p>As you can see below, an array is faster than a list, and a primitive array is faster than an object array.</p>

<h3>Sample Durations</h3>

<pre><code>List&lt;Integer&gt; Shuffle: 43133ns
    Integer[] Shuffle: 31884ns
        int[] Shuffle: 25377ns
</code></pre>

<hr>

<p>Below, are three different implementations of a shuffle. You should only use Collections.shuffle if you are dealing with a collection. There is no need to wrap your array into a collection just to sort it. The methods below are very simple to implement.</p>

<h2>ShuffleUtil Class</h2>

<pre><code>import java.lang.reflect.Array;
import java.util.*;

public class ShuffleUtil&lt;T&gt; {
    private static final int[] EMPTY_INT_ARRAY = new int[0];
    private static final int SHUFFLE_THRESHOLD = 5;

    private static Random rand;
</code></pre>

<h2>Main Method</h2>

<pre><code>    public static void main(String[] args) {
        List&lt;Integer&gt; list = null;
        Integer[] arr = null;
        int[] iarr = null;

        long start = 0;
        int cycles = 1000;
        int n = 1000;

        // Shuffle List&lt;Integer&gt;
        start = System.nanoTime();
        list = range(n);
        for (int i = 0; i &lt; cycles; i++) {
            ShuffleUtil.shuffle(list);
        }
        System.out.printf("%22s: %dns%n", "List&lt;Integer&gt; Shuffle", (System.nanoTime() - start) / cycles);

        // Shuffle Integer[]
        start = System.nanoTime();
        arr = toArray(list);
        for (int i = 0; i &lt; cycles; i++) {
            ShuffleUtil.shuffle(arr);
        }
        System.out.printf("%22s: %dns%n", "Integer[] Shuffle", (System.nanoTime() - start) / cycles);

        // Shuffle int[]
        start = System.nanoTime();
        iarr = toPrimitive(arr);
        for (int i = 0; i &lt; cycles; i++) {
            ShuffleUtil.shuffle(iarr);
        }
        System.out.printf("%22s: %dns%n", "int[] Shuffle", (System.nanoTime() - start) / cycles);
    }
</code></pre>

<h2>Shuffling a Generic List</h2>

<pre><code>    // ================================================================
    // Shuffle List&lt;T&gt; (java.lang.Collections)
    // ================================================================
    @SuppressWarnings("unchecked")
    public static &lt;T&gt; void shuffle(List&lt;T&gt; list) {
        if (rand == null) {
            rand = new Random();
        }
        int size = list.size();
        if (size &lt; SHUFFLE_THRESHOLD || list instanceof RandomAccess) {
            for (int i = size; i &gt; 1; i--) {
                swap(list, i - 1, rand.nextInt(i));
            }
        } else {
            Object arr[] = list.toArray();

            for (int i = size; i &gt; 1; i--) {
                swap(arr, i - 1, rand.nextInt(i));
            }

            ListIterator&lt;T&gt; it = list.listIterator();
            int i = 0;

            while (it.hasNext()) {
                it.next();
                it.set((T) arr[i++]);
            }
        }
    }

    public static &lt;T&gt; void swap(List&lt;T&gt; list, int i, int j) {
        final List&lt;T&gt; l = list;
        l.set(i, l.set(j, l.get(i)));
    }

    public static &lt;T&gt; List&lt;T&gt; shuffled(List&lt;T&gt; list) {
        List&lt;T&gt; copy = copyList(list);
        shuffle(copy);
        return copy;
    }
</code></pre>

<h2>Shuffling a Generic Array</h2>

<pre><code>    // ================================================================
    // Shuffle T[]
    // ================================================================
    public static &lt;T&gt; void shuffle(T[] arr) {
        if (rand == null) {
            rand = new Random();
        }

        for (int i = arr.length - 1; i &gt; 0; i--) {
            swap(arr, i, rand.nextInt(i + 1));
        }
    }

    public static &lt;T&gt; void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    public static &lt;T&gt; T[] shuffled(T[] arr) {
        T[] copy = Arrays.copyOf(arr, arr.length);
        shuffle(copy);
        return copy;
    }
</code></pre>

<h2>Shuffling a Primitive Array</h2>

<pre><code>    // ================================================================
    // Shuffle int[]
    // ================================================================
    public static &lt;T&gt; void shuffle(int[] arr) {
        if (rand == null) {
            rand = new Random();
        }

        for (int i = arr.length - 1; i &gt; 0; i--) {
            swap(arr, i, rand.nextInt(i + 1));
        }
    }

    public static &lt;T&gt; void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    public static int[] shuffled(int[] arr) {
        int[] copy = Arrays.copyOf(arr, arr.length);
        shuffle(copy);
        return copy;
    }
</code></pre>

<h2>Utility Methods</h2>

<p>Simple utility methods to copy and convert arrays to lists and vice-versa.</p>

<pre><code>    // ================================================================
    // Utility methods
    // ================================================================
    protected static &lt;T&gt; List&lt;T&gt; copyList(List&lt;T&gt; list) {
        List&lt;T&gt; copy = new ArrayList&lt;T&gt;(list.size());
        for (T item : list) {
            copy.add(item);
        }
        return copy;
    }

    protected static int[] toPrimitive(Integer[] array) {
        if (array == null) {
            return null;
        } else if (array.length == 0) {
            return EMPTY_INT_ARRAY;
        }
        final int[] result = new int[array.length];
        for (int i = 0; i &lt; array.length; i++) {
            result[i] = array[i].intValue();
        }
        return result;
    }

    protected static Integer[] toArray(List&lt;Integer&gt; list) {
        return toArray(list, Integer.class);
    }

    protected static &lt;T&gt; T[] toArray(List&lt;T&gt; list, Class&lt;T&gt; clazz) {
        @SuppressWarnings("unchecked")
        final T[] arr = list.toArray((T[]) Array.newInstance(clazz, list.size()));
        return arr;
    }
</code></pre>

<h2>Range Class</h2>

<p>Generates a range of values, similar to Python's <code>range</code> function.</p>

<pre><code>    // ================================================================
    // Range class for generating a range of values.
    // ================================================================
    protected static List&lt;Integer&gt; range(int n) {
        return toList(new Range(n), new ArrayList&lt;Integer&gt;());
    }

    protected static &lt;T&gt; List&lt;T&gt; toList(Iterable&lt;T&gt; iterable) {
        return toList(iterable, new ArrayList&lt;T&gt;());
    }

    protected static &lt;T&gt; List&lt;T&gt; toList(Iterable&lt;T&gt; iterable, List&lt;T&gt; destination) {
        addAll(destination, iterable.iterator());

        return destination;
    }

    protected static &lt;T&gt; void addAll(Collection&lt;T&gt; collection, Iterator&lt;T&gt; iterator) {
        while (iterator.hasNext()) {
            collection.add(iterator.next());
        }
    }

    private static class Range implements Iterable&lt;Integer&gt; {
        private int start;
        private int stop;
        private int step;

        private Range(int n) {
            this(0, n, 1);
        }

        private Range(int start, int stop) {
            this(start, stop, 1);
        }

        private Range(int start, int stop, int step) {
            this.start = start;
            this.stop = stop;
            this.step = step;
        }

        @Override
        public Iterator&lt;Integer&gt; iterator() {
            final int min = start;
            final int max = stop / step;

            return new Iterator&lt;Integer&gt;() {
                private int current = min;

                @Override
                public boolean hasNext() {
                    return current &lt; max;
                }

                @Override
                public Integer next() {
                    if (hasNext()) {
                        return current++ * step;
                    } else {
                        throw new NoSuchElementException("Range reached the end");
                    }
                }

                @Override
                public void remove() {
                    throw new UnsupportedOperationException("Can't remove values from a Range");
                }
            };
        }
    }
}
</code></pre>
