<p>Well since so far there's only one solution that gives the "correct" result and that's.. really not a nice solution (using a string to count leading zeros? that'll haunt me in my dreams ;) )</p>

<p>So here we go with a nice clean solution that should work - haven't tested it thorough though, but you get the gist. Really, java not having an unsigned type is extremely annoying for this kind of problems, but it should be quite efficient nonetheless (and if I may say so MUCH more elegant than creating a string out of the number)</p>

<pre><code>private static int invert(int x) {
    if (x == 0) return 0; // edge case; otherwise returns -1 here
    int nlz = nlz(x);
    return ~x &amp; (0xFFFFFFFF &gt;&gt;&gt; nlz);
}

private static int nlz(int x) {
    // Replace with whatever number leading zero algorithm you want - I can think
    // of a whole list and this one here isn't that great (large immediates)
    if (x &lt; 0) return 0;
    if (x == 0) return 32;
    int n = 0;
    if ((x &amp; 0xFFFF0000) == 0) {
        n += 16;
        x &lt;&lt;= 16;
    }
    if ((x &amp; 0xFF000000) == 0) {
        n += 8;
        x &lt;&lt;= 8;
    }
    if ((x &amp; 0xF0000000) == 0) {
        n += 4;
        x &lt;&lt;= 4;
    }
    if ((x &amp; 0xC0000000) == 0) {
        n += 2;
        x &lt;&lt;= 2;
    }
    if ((x &amp; 0x80000000) == 0) {
        n++;
    }       
    return n;
}
</code></pre>
