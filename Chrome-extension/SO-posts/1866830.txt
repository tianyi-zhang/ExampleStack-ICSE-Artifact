<p>If you have the Java sources installed you can debug through the AbstractList equals implementation and see where it is failing.
Current implementation for Java 1.6 is:</p>

<pre><code>public boolean equals(Object o) {
if (o == this)
    return true;
if (!(o instanceof List))
    return false;

ListIterator&lt;E&gt; e1 = listIterator();
ListIterator e2 = ((List) o).listIterator();
while(e1.hasNext() &amp;&amp; e2.hasNext()) {
    E o1 = e1.next();
    Object o2 = e2.next();
    if (!(o1==null ? o2==null : o1.equals(o2)))
 return false;
}
return !(e1.hasNext() || e2.hasNext());
}
</code></pre>

<p>Apart from that a couple of comments, even though I don't think they are related to your issue:</p>

<p>1- If you override equals you have to override hashCode, I don't know if you have removed it on purpose or if you don't have it implemented. equals() and hashCode() are bound together by a joint contract that specifies if two objects are considered equal using the equals() method, then they must have identical hashcode values. (Borrowed from SCJP book).
You will have issues with these classe in HashMaps, HashSets and other collection classes otherwise.</p>

<p>2- In your equals implementations, instanceof checks for both null-ness and the class type, you can replace</p>

<pre><code>    if (obj == null)
            return false;
    if (getClass() != obj.getClass())
            return false;
</code></pre>

<p>with </p>

<pre><code>if (!(obj instanceof Car)){
            return false;
}
</code></pre>
