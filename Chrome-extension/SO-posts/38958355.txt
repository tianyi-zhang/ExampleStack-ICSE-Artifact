<p>For that purpose you have to specify <code>errorChannel</code> header for some <code>MessageChannel</code> which is exactly up to that your caller.</p>

<p>The <code>ExecutorChannel</code> is based on the <code>MessagePublishingErrorHandler</code> which has a code like:</p>

<pre><code>private MessageChannel resolveErrorChannel(Throwable t) {
    Message&lt;?&gt; failedMessage = (t instanceof MessagingException) ?
            ((MessagingException) t).getFailedMessage() : null;
    if (this.defaultErrorChannel == null &amp;&amp; this.channelResolver != null) {
        this.defaultErrorChannel = this.channelResolver.resolveDestination(
                IntegrationContextUtils.ERROR_CHANNEL_BEAN_NAME);
    }

    if (failedMessage == null || failedMessage.getHeaders().getErrorChannel() == null) {
        return this.defaultErrorChannel;
    }
    Object errorChannelHeader = failedMessage.getHeaders().getErrorChannel();
    if (errorChannelHeader instanceof MessageChannel) {
        return (MessageChannel) errorChannelHeader;
    }
    Assert.isInstanceOf(String.class, errorChannelHeader,
            "Unsupported error channel header type. Expected MessageChannel or String, but actual type is [" +
            errorChannelHeader.getClass() + "]");
    return this.channelResolver.resolveDestination((String) errorChannelHeader);
}
</code></pre>

<p>Pay attention to the part with the <code>failedMessage.getHeaders().getErrorChannel()</code>.</p>

<p>The good out-of-the-box solution for your is <code>@MessagingGateway</code> with the <code>errorChannel</code> option. This one use exactly the same <code>errorChannel</code> header technique and let handle or re-throw exception exactly just in the scope of that <code>@MessagingGateway</code>.</p>
