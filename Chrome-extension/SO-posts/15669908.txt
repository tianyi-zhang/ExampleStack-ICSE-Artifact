<p><strong>DISCLAIMER</strong></p>

<p><strong>The OP (Pimp Trizkit), is the one who found <a href="http://stackoverflow.com/a/15672400/814702">the right solution</a></strong>. I just used his solution (with minor change) to showcase the result and to have fun. All rights reserved)</p>

<p>Also, the bytes array to hex string converting algorithm offered by the OP  is <strong>much faster</strong>, than the ones in my example code. See <a href="http://stackoverflow.com/a/15672400/814702"><strong>his solution</strong></a> for the implementation.<br>
(For the details read the comments down below)</p>

<hr>

<p>One of the manual solutions:<br>
(<strong>Important!</strong> It was my first answer, but it's only for getting hash from the <em>text string</em>, not from the <em>hex string</em> as the OP asked. See the <strong>update</strong> below):
</p>

<pre class="lang-java prettyprint-override"><code>import java.security.MessageDigest;

public class TestHash {

    public static void main(String[] args) throws Exception {
        String password = "9a";

        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(password.getBytes());
        byte[] byteData = md.digest();
        // byte[] byteData = md.digest(password.getBytes());    // both updates and completes the hash computation

        // Method 1 of converting bytes to hex format
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i &lt; byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] &amp; 0xFF) + 0x100, 16).substring(1));
        }

        System.out.println("1) Hex format : " + sb.toString());

        // Method 2 of converting bytes to hex format
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i &lt; byteData.length; i++) {
            String hex = Integer.toHexString(0xff &amp; byteData[i]);
            // NB! E.g.: Integer.toHexString(0x0C) will return "C", not "0C"            
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }
        System.out.println("2) Hex format : " + hexString.toString());      
    }
}
</code></pre>

<p>Output:</p>

<pre class="lang-java prettyprint-override"><code>1) Hex format : e8eef065fb7295044d65b305bab18a9a645d1abf
2) Hex format : e8eef065fb7295044d65b305bab18a9a645d1abf
</code></pre>

<hr>

<p><strong>UPDATE</strong></p>

<p>Based on the <a href="http://stackoverflow.com/a/15672400/814702">OP found solution</a>, here is the  code, that showcases getting the SHA-1 hash from a <strong>hex string</strong> instead of a <em>text string</em>. Plus it presents several methods of manually converting byte arrays to hex string (just for fun). Sorry, I was in a mood ))</p>

<p><strong>See my comments</strong> inside the <code>main</code> method and inside different <code>bytesToHexString()</code> methods for the explanation of important moments.</p>

<pre class="lang-java prettyprint-override"><code>import java.security.MessageDigest;
import java.math.BigInteger;
import javax.xml.bind.DatatypeConverter;

public class TestHash3 {

    public static void main(String[] args) throws Exception {
        String hexString = "1234";

        /*
         * NB!
         * Before passing hex string to DatatypeConverter.parseHexBinary(),
         * we need to check if the hex sting is even-length, 
         * otherwise DatatypeConverter.parseHexBinary() will throw a
         * java.lang.IllegalArgumentException: hexBinary needs to be even-length
         */
        hexString = (hexString.length() % 2 == 0) ? hexString : "0" + hexString;
        byte[] bytes = DatatypeConverter.parseHexBinary(hexString);

        MessageDigest md = MessageDigest.getInstance("SHA-1");
        byte[] byteData = md.digest(bytes);

        System.out.println("1) SHA-1 hash for the hex string " + hexString + ": " +
                            bytesToHexString1(byteData));
        System.out.println("2) SHA-1 hash for the hex string " + hexString + ": " +
                            bytesToHexString2(byteData));
        System.out.println("3) SHA-1 hash for the hex string " + hexString + ": " +
                            bytesToHexString3(byteData));
        System.out.println("4) SHA-1 hash for the hex string " + hexString + ": " +
                            bytesToHexString4(byteData));
    }

    public static String bytesToHexString1(byte[] bytes) {
        StringBuffer hexBuffer = new StringBuffer();
        for (int i = 0; i &lt; bytes.length; i++) {
            hexBuffer.append(Integer.toString((bytes[i] &amp; 0xFF) + 0x100, 16).substring(1));
        }

        return hexBuffer.toString();
    }

    public static String bytesToHexString2(byte[] bytes) {
        StringBuffer hexBuffer = new StringBuffer(bytes.length * 2);
        for (byte b: bytes) {
            int n = b &amp; 0xFF;   // casting to integer to avoid problems with negative bytes
            if (n &lt; 0x10) {
                hexBuffer.append("0");
            }
            hexBuffer.append(Integer.toHexString(n));
        }

        return hexBuffer.toString();
    }       

    public static String bytesToHexString3(byte[] bytes) {
        StringBuffer hexBuffer = new StringBuffer();
        for (int i = 0; i &lt; bytes.length; i++) {
            String hexString = Integer.toHexString(0xff &amp; bytes[i]);
            // NB! E.g.: Integer.toHexString(0x0C) will return "C", not "0C"            
            if (hexString.length() == 1) {
                hexBuffer.append('0');
            }
            hexBuffer.append(hexString);
        }

        return hexBuffer.toString();
    }

    public static String bytesToHexString4(byte[] bytes) {
        String hexString = new BigInteger(1, bytes).toString(16);

        /*
         * NB!
         * We need an even-length hex string to propely represent bytes in hexadecimal.
         * A hexadecimal representation of one byte consists of two hex digits.
         * If the value is less than 16 (dec), it is prepended with zero
         * E.g.:
         * 1  (byte)    ==&gt; 01 (hex)    // pay attention to the prepended zero
         * 15 (byte)    ==&gt; 0F (hex)
         * 16 (byte)    ==&gt; 10 (hex)    // no need to prepend
         * 255(byte)    ==&gt; FF (hex)
         *
         * BigInteger.toString(16) can return both even and odd-length hex strings.
         * E.g.:
         * byte[] bytes = {15, 16}  // two bytes
         * BigInteger(1, bytes).toString(16) will produce (NB!): f10
         * But we need (NB!): 0f10
         * So we must check if the resulting hex string is even-length,
         * and if not, prepend it with zero.
         */
        return ((hexString.length() % 2 == 0) ? hexString : "0" + hexString);
    }
}
</code></pre>

<p>Output:</p>

<pre class="lang-java prettyprint-override"><code>1) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
2) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
3) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
4) SHA-1 hash for the hex string 1234: ffa76d854a2969e7b9d83868d455512fce0fd74d
</code></pre>

<p><br />
btw Checking if the hex string is even-length inside <code>byteToHexString4()</code> so it could be used independently.</p>

<hr>

<p><strong>UPDATE 2</strong></p>

<p>The user <a href="http://stackoverflow.com/users/438742/kan">@kan</a> brought one more method of converting byte array to hex string, very simple one liner and the <strong>second fastest</strong> after the OP's method.</p>

<p><a href="http://docs.oracle.com/javase/7/docs/api/javax/xml/bind/DatatypeConverter.html#printHexBinary%28byte%5b%5d%29" rel="nofollow">DatatypeConverter.printHexBinary(byte[] val)</a></p>
