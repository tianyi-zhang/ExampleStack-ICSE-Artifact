<p>I think better for this will be ByteToMessageDecoder and MessageToByteEncoder. Dont forget to send first length of data, or you don't recognize where one packet start and another end. There is my simple example :</p>

<pre><code>public class KryoDecoder extends ByteToMessageDecoder {

    private final Kryo kryo;

    public KryoDecoder(Kryo kryo) {
        this.kryo = kryo;
    }

    @Override
    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out) throws Exception {

        if (in.readableBytes() &lt; 2)
            return;

        in.markReaderIndex();

        int len = in.readUnsignedShort();

        if (in.readableBytes() &lt; len) {
            in.resetReaderIndex();
            return;
        }

        byte[] buf = new byte[len];
        in.readBytes(buf);
        Input input = new Input(buf);
        Object object = kryo.readClassAndObject(input);
        out.add(object);

    }
}
</code></pre>

<p>and Encoder </p>

<pre><code>public class KryoEncoder extends MessageToByteEncoder&lt;Object&gt; {

    private final Kryo kryo;

    public KryoEncoder(Kryo kryo) {
        this.kryo = kryo;
    }

    @Override
    protected void encode(ChannelHandlerContext ctx, Object in, ByteBuf out) throws Exception {
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        Output output = new Output(outStream, 4096);

        kryo.writeClassAndObject(output, in);
        output.flush();

        byte[] outArray = outStream.toByteArray();
        out.writeShort(outArray.length);
        out.writeBytes(outArray);
    }

}
</code></pre>
