<blockquote>
  <p>It works inside main activity, but I am traing call this from another
  activity, so I wrote</p>
  
  <p>MainActivity o = new MainActivity(); o.showDialog("t", "t", "t", "t");</p>
</blockquote>

<p>you shouldn't use the <code>new</code> operator on classes that extends <code>Activity</code>. 
Back to your problem, it looks to me like you want to minimize the repeating code. One way, in your case could be an utility class, which contains your <code>showDialog</code> method. Its signature would be slightly different because you need a <code>Context</code> object to instantiate the builder:</p>

<pre><code>public final class Utility { 

public static void showDialog(Context context, String title, String message, String accept, String denied){
    AlertDialog.Builder builder = new AlertDialog.Builder(context);
    builder.setTitle(title);
    builder.setMessage(message);
    builder.setCancelable(true);

    builder.setPositiveButton(accept, new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            dialog.dismiss();
        }
    });

    builder.setNegativeButton(denied, new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            dialog.dismiss();
        }
    });

    builder.create().show();
}

 private Utility() {}
}
</code></pre>

<p>Note also that the class Utility, has a <code>private default constructor</code>, which means that you can't explicitly instantiate it. </p>

<p>and the you can use like:</p>

<pre><code>  Utility.showDialog(ActivityName.class, "aa", "bb", "cc", "dd");
</code></pre>
