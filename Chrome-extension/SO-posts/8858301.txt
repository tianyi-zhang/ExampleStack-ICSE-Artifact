<p>As a follow up to Jon Skeet's answer I recently ran into a case where I needed to implement the hashCode method with only a subset of the fields used in the equals method. The (simplified) scenario is this: </p>

<p>I have two classes <code>A</code> and <code>B</code> that each contain a reference to the other in addition to having a String key defined. Using the automatic hashCode and equals generator in Eclipse (which, unlike Netbeans, only gives the option to use the same fields in both methods) I end up with the following classes:</p>

<pre><code>public class A {

    public B b;
    public String bKey;

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((b == null) ? 0 : b.hashCode());
        result = prime * result + ((bKey == null) ? 0 : bKey.hashCode());
        return result;
    }
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof A))
            return false;
        A other = (A) obj;
        if (b == null) {
            if (other.b != null)
                return false;
        } else if (!b.equals(other.b))
            return false;
        if (bKey == null) {
            if (other.bKey != null)
                return false;
        } else if (!bKey.equals(other.bKey))
            return false;
        return true;
    }
}

public class B {

    public A a;
    public String aKey;

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((a == null) ? 0 : a.hashCode());
        result = prime * result + ((aKey == null) ? 0 : aKey.hashCode());
        return result;
    }
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (!(obj instanceof B))
            return false;
        B other = (B) obj;
        if (a == null) {
            if (other.a != null)
                return false;
        } else if (!a.equals(other.a))
            return false;
        if (aKey == null) {
            if (other.aKey != null)
                return false;
        } else if (!aKey.equals(other.aKey))
            return false;
        return true;
    }
}
</code></pre>

<p>The problem came about when I tried to add class A to a HashSet in the following way:</p>

<pre><code>    public static void main(String[] args) {

        A a = new A();
        B b = new B();
        a.b = b;
        b.a = a;

        Set&lt;A&gt; aSet = new HashSet&lt;A&gt;();
        aSet.add(a);
    }
</code></pre>

<p>This will end in a StackOverflowError since adding <code>a</code> to <code>aSet</code> will result in <code>a</code>'s hashCode method being called, which will result in <code>b</code>'s <code>hashCode</code> being called, which will result in <code>a</code>'s <code>hashCode</code> being called, etc, etc, etc. The only way to get around this is to either remove the reference to <code>A</code> from <code>B</code>'s <code>hashCode</code> and <code>equals</code> OR only include the <code>String bKey</code> in <code>B</code>'s hashCode method. Since I wanted the <code>B.equals</code> method to include the reference A in checking for equality the only thing I could do was to make <code>B.hashCode</code> use only a subset of the fields that were used in <code>B.equals</code> i.e. only use the <code>B.bKey</code> in <code>B.hashCode</code>. I could see no other way around this.</p>

<p>Possibly my design is flawed and I welcome someone to point that out but this is essentially the way my domain objects are structured in my actual program.</p>
