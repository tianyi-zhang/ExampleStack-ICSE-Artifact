<p><strong>At first:</strong></p>

<pre><code>// GET IMAGEVIEW
ImageView photoFromCamera = (ImageView) rootView.findViewById(R.id.photo_from_camera);
// SET IMAGE
photoFromCamera.setImageBitmap(rotate(shrink(your_path, display_Width, display_height), getCameraPhotoOrientation(getActivity().getApplicationContext(), your_uri, your_path)));
</code></pre>

<p><strong>At second:</strong>
There this 3 methods which will rotate, resize and get orientation.</p>

<hr>

<pre><code>public static Bitmap rotate(Bitmap b, int degrees) {
    if (degrees != 0 &amp;&amp; b != null) {
        Matrix m = new Matrix();
        m.setRotate(degrees, (float) b.getWidth() / 2, (float) b.getHeight() / 2);

        try {
            Bitmap b2 = Bitmap.createBitmap(b, 0, 0, b.getWidth(), b.getHeight(), m, true);

            if (b != b2) {
                b.recycle();
                b = b2;
            }
        } catch (OutOfMemoryError ex) {
            throw ex;
        }
    }
    return b;
} 
</code></pre>

<hr>

<pre><code>public static int getCameraPhotoOrientation(Context context, Uri imageUri, String imagePath) {
    int rotate = 0;
    try {
        context.getContentResolver().notifyChange(imageUri, null);

        File imageFile = new File(imagePath);
        ExifInterface exif = new ExifInterface(imageFile.getAbsolutePath());

        int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);

        switch (orientation) {
            case ExifInterface.ORIENTATION_ROTATE_270:
                rotate = 270;
                break;
            case ExifInterface.ORIENTATION_ROTATE_180:
                rotate = 180;
                break;
            case ExifInterface.ORIENTATION_ROTATE_90:
                rotate = 90;
                break;
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    return rotate;
}
</code></pre>

<hr>

<pre><code>Bitmap shrinkmethod(String file,int width,int height){
    BitmapFactory.Options bitopt=new BitmapFactory.Options();
    bitopt.inJustDecodeBounds=true;
    Bitmap bit=BitmapFactory.decodeFile(file, bitopt);

    int h=(int) Math.ceil(bitopt.outHeight/(float)height);
    int w=(int) Math.ceil(bitopt.outWidth/(float)width);

    if(h&gt;1 || w&gt;1){
        if(h&gt;w){
            bitopt.inSampleSize=h;
        }else{
            bitopt.inSampleSize=w;
        }
    }

    bitopt.inJustDecodeBounds=false;
    bit=BitmapFactory.decodeFile(file, bitopt);

    return bit;
}
</code></pre>
