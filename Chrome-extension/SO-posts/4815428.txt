<p>I needed something similar so this is my implementation. It allows the caller to specify which implementation of List should be returned:</p>

<pre><code>package com.mrojas.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class ListUtils {

/**
 * Splits a list into smaller sublists.
 * The original list remains unmodified and changes on the sublists are not propagated to the original list.
 *
 *
 * @param original
 *            The list to split
 * @param maxListSize
 *            The max amount of element a sublist can hold.
 * @param listImplementation
 *            The implementation of List to be used to create the returned sublists
 * @return A list of sublists
 * @throws IllegalArgumentException
 *             if the argument maxListSize is zero or a negative number
 * @throws NullPointerException
 *             if arguments original or listImplementation are null
 */
public static final &lt;T&gt; List&lt;List&lt;T&gt;&gt; split(final List&lt;T&gt; original, final int maxListSize,
        final Class&lt;? extends List&gt; listImplementation) {
    if (maxListSize &lt;= 0) {
        throw new IllegalArgumentException("maxListSize must be greater than zero");
    }

    final T[] elements = (T[]) original.toArray();
    final int maxChunks = (int) Math.ceil(elements.length / (double) maxListSize);

    final List&lt;List&lt;T&gt;&gt; lists = new ArrayList&lt;List&lt;T&gt;&gt;(maxChunks);
    for (int i = 0; i &lt; maxChunks; i++) {
        final int from = i * maxListSize;
        final int to = Math.min(from + maxListSize, elements.length);
        final T[] range = Arrays.copyOfRange(elements, from, to);

        lists.add(createSublist(range, listImplementation));
    }

    return lists;
}

/**
 * Splits a list into smaller sublists. The sublists are of type ArrayList.
 * The original list remains unmodified and changes on the sublists are not propagated to the original list.
 *
 *
 * @param original
 *            The list to split
 * @param maxListSize
 *            The max amount of element a sublist can hold.
 * @return A list of sublists
 */
public static final &lt;T&gt; List&lt;List&lt;T&gt;&gt; split(final List&lt;T&gt; original, final int maxListSize) {
    return split(original, maxListSize, ArrayList.class);
}

private static &lt;T&gt; List&lt;T&gt; createSublist(final T[] elements, final Class&lt;? extends List&gt; listImplementation) {
    List&lt;T&gt; sublist;
    final List&lt;T&gt; asList = Arrays.asList(elements);
    try {
        sublist = listImplementation.newInstance();
        sublist.addAll(asList);
    } catch (final InstantiationException e) {
        sublist = asList;
    } catch (final IllegalAccessException e) {
        sublist = asList;
    }

    return sublist;
}
</code></pre>

<p>}</p>

<p>And some test cases:</p>

<pre><code>package com.mrojas.util;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.junit.Test;

public class ListUtilsTest {

@Test
public void evenSplitTest() {
    final List&lt;List&lt;Object&gt;&gt; sublists = ListUtils.split(getPopulatedList(10), 2, LinkedList.class);
    assertEquals(5, sublists.size());
    for (final List&lt;Object&gt; sublist : sublists) {
        assertEquals(2, sublist.size());
        assertTrue(sublist instanceof LinkedList&lt;?&gt;);
    }
}

@Test
public void unevenSplitTest() {
    final List&lt;List&lt;Object&gt;&gt; sublists = ListUtils.split(getPopulatedList(10), 3, LinkedList.class);
    assertEquals(4, sublists.size());

    assertEquals(3, sublists.get(0).size());
    assertEquals(3, sublists.get(1).size());
    assertEquals(3, sublists.get(2).size());
    assertEquals(1, sublists.get(3).size());
}

@Test
public void greaterThanSizeSplitTest() {
    final List&lt;List&lt;Object&gt;&gt; sublists = ListUtils.split(getPopulatedList(10), 20, LinkedList.class);
    assertEquals(1, sublists.size());
    assertEquals(10, sublists.get(0).size());
}

@Test
public void emptyListSplitTest() {
    final List&lt;List&lt;Object&gt;&gt; sublists = ListUtils.split(Collections.emptyList(), 10, LinkedList.class);
    assertEquals(0, sublists.size());
}

@Test(expected=IllegalArgumentException.class)
public void negativeChunkSizeTest() {
    ListUtils.split(getPopulatedList(5), -10, LinkedList.class);
}

@Test
public void invalidClassTest() {
    final List&lt;List&lt;Object&gt;&gt; sublists = ListUtils.split(getPopulatedList(10), 2, LinkedList.class);
    assertEquals(5, sublists.size());
    for (final List&lt;Object&gt; sublist : sublists) {
        assertEquals(2, sublist.size());
        assertTrue(sublist instanceof LinkedList&lt;?&gt;);
    }
}

private List&lt;Object&gt; getPopulatedList(final int size) {
    final List&lt;Object&gt; list = new ArrayList&lt;Object&gt;(10);
    for (int i = 0; i &lt; 10; i++) {
        list.add(new Object());
    }

    return list;
}
</code></pre>

<p>}</p>
