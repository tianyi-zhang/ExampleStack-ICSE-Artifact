<p>You never want to do expensive tasks like drawing and animations on the UI thread. There are two ways to utilize a worker thread...</p>

<p><strong>Thread with a runnable (this can be created inside your drawing surface, drawing surface must implement Runnable):</strong></p>

<pre><code>new Thread(new Runnable() {
            public void run() {
                update();
                render();
            }
        }).start();
</code></pre>

<p><strong>Extend Thread in a separate class:</strong></p>

<pre><code>class myThread extends Thread {
    Context context;
    //Everything that you currently have in your UI thread should be in here...

    /* Constructor for thread. Pass useful things like context, drawing surface, etc */
    public myThread(Context context) {
        this.context = context;
    }

    public void setRunning(Boolean running) {
        this.running = running;
    }

    @Override
    public void run() {

    Canvas canvas;

    Log.d(TAG, "Starting game loop");

    long beginTime; // The time when the cycle begun
    long timeDiff; // The time it took for the cycle to execute
    int sleepTime; // ms to sleep (&lt;0 if we're behind)
    int framesSkipped; // Number of frames being skipped

    sleepTime = 0;

    while (running) {
        canvas = null;

        // Try locking the canvas
        try {
            canvas = this.surfaceHolder.lockCanvas();
            if (canvas != null) {
                synchronized (surfaceHolder) {
                    beginTime = System.currentTimeMillis();
                    framesSkipped = 0; // resetting the frames skipped
                    // Update game state here!
                    this.gameView.update();
                    // Render state to the screen
                    // Draws the canvas on the panel
                    this.gameView.render(canvas);
                    // Calculate how long time the cycle took
                    timeDiff = System.currentTimeMillis() - beginTime;
                    // Calculate sleep time
                    sleepTime = (int) (FRAME_PERIOD - timeDiff);

                    if (sleepTime &gt; 0) {
                        try {
                            // Send the thread to sleep for a short period,
                            // very useful for battery saving
                            Thread.sleep(sleepTime);
                        } catch (InterruptedException e) {

                        }
                    }

                    while (sleepTime &lt; 0 &amp;&amp; framesSkipped &lt; MAX_FRAME_SKIPS) {
                        // Need to catch up by updating without rendering
                        // Update game state here!
                        this.gameView.update();

                        // Add frame period to check if in next frame
                        sleepTime += FRAME_PERIOD;
                        framesSkipped++;
                    }
                }
            }
            } finally {
                // In case of an exception the surface is not left in
                // an inconsistent state
                if (canvas != null) {
                    surfaceHolder.unlockCanvasAndPost(canvas);
                }
            } // End finally
        }
    }         
}
</code></pre>

<p>And when you create your drawing surface, assign the thread:</p>

<pre><code>Thread thread;

@Override
public void surfaceCreated(SurfaceHolder holder) {
    thread = new myThread(getContext());

    thread.setRunning(true);
    thread.start();
}
</code></pre>

<p>So that's pretty much it - note that you'll probably have to pass some other things to the thread in the second example through its constructor for it to work with your game, such as the surface on which you are drawing and the <code>SurfaceHolder</code>, but that's the idea.</p>

<p>Good luck with your game!</p>
