<p>Yes, your method is correct. I have to agree that the method <code>anagrams</code> has a lot of redundancy. Here's even simpler version for <code>anagrams2</code>:</p>

<pre><code>public static boolean anagram2(String s, String t) {
    if (s.length() != t.length()) return false;
    int[] letters = new int[256];
    char[] s_array = s.toCharArray();
    for (char c : s_array)
        ++letters[c];
    for (int i = 0; i &lt; t.length(); ++i) {
        int c = (int) t.charAt(i);
        if (letters[c] == 0)
            return false;
        --letters[c];
    }
    return true;
}
</code></pre>

<p>Here's a piece a code with which you can test your <code>anagram2</code> versions:</p>

<pre><code>static Random r = new Random();
public static String generateString(int n) {
    StringBuilder sb = new StringBuilder();
    for (int i =  0; i &lt; n; ++i)
        sb.append((char) (r.nextInt(3) + 'a'));
    return sb.toString();
}

static void test(int cases, int stringLength) {
    for (int i = 0; i &lt; cases; ++i) {
        String s = generateString(stringLength);
        String t = generateString(stringLength);
        boolean ans1 = anagram(s, t);
        boolean ans2 = anagram2(s, t);

        if (ans1 != ans2) {
            System.out.printf("TESTCASE %d: FAIL\n", i+1);
            System.out.printf("%b %b\n", ans1, ans2);
            System.out.printf("%s %s\n", s, t);
            return;
        } else {
            System.out.printf("TESTCASE %8d: OK\n", i + 1);
        }
    }
}
</code></pre>

<p>To test your code just call</p>

<pre><code>test(10000, 3);
</code></pre>

<p>depending on how many testcase you want to run with how long strings. Don't run it on long strings since the chance of create a anagram pair is small. Length <code>3</code> seems reasonable.</p>
