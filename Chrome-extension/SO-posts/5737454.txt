<p>Could it be that the output is <code>java.util.ArrayList&lt;String&gt;</code> and you don't see the <code>&lt;String&gt;</code> part since your browser interprets it as an unknown HTML tag?</p>

<p>You will have to escape the <code>&lt;</code> for HTML output.</p>

<p>If this is not the problem, show enough code so we can reproduce the problem.</p>

<hr>

<p>After seeing your example, I could reproduce it with this doclet:</p>

<pre><code>package de.fencing_game.paul.examples.doclet;

import com.sun.javadoc.*;
import java.util.ArrayList;

/**
 * A test doclet to see how generic fields work.
 *
 * Inspired by the question &lt;a href="http://stackoverflow.com/q/5731619/600500"&gt;Doclet- Get generics of a list&lt;/a&gt; on Stackoverflow.
 */
public class GenericTestDoclet&lt;Y&gt; extends Doclet {

    public ArrayList&lt;? extends Y&gt; stringList;

    /**
     * Erstellt ein(e(n)) neu(e(n)) &lt;code&gt;GenericTestDoclet&lt;/code&gt;.
     *
     */
    public GenericTestDoclet() {

    }


    public ArrayList&lt;? extends Y&gt; getList() {
        return stringList;
    }

    public void printType(Type fieldType, DocErrorReporter err) {
        err.printNotice("type: " + fieldType);
        if (fieldType.asParameterizedType() != null) {
            ParameterizedType paramType = fieldType.asParameterizedType();
            err.printNotice("paramType:" + paramType);
            String qualiName = paramType.qualifiedTypeName();
            err.printNotice("qualiName: " + qualiName);

            String typeName = fieldType.asParameterizedType().typeName();
            err.printNotice("typeName: " + typeName);

            Type[] parameters = paramType.typeArguments();
            err.printNotice("parameters.length: " + parameters.length);
            for(Type p : parameters) {
                err.printNotice("param: " + p);
            }
        }
        err.printNotice("");
    }


    public void listFields(ClassDoc classDoc, DocErrorReporter err) {
        FieldDoc[] fields = classDoc.fields();
        for (int k = 0; k &lt; fields.length; k++) {
            err.printNotice("field: " + fields[k]);
            Type fieldType = fields[k].type();
            printType(fieldType, err);
        }
    }


    public void listMethods(ClassDoc classDoc, DocErrorReporter err) {
        MethodDoc[] methods = classDoc.methods();
        for (int k = 0; k &lt; methods.length; k++) {
            err.printNotice("method: " + methods[k]);
            Type returnType = methods[k].returnType();
            printType(returnType, err);
        }
    }



    /**
     * The entry point of the doclet.
     * @return true if all the included elements have enough documentation,
     *   false if some documentation is missing.
     */
    public static boolean start(RootDoc root) {
        GenericTestDoclet&lt;?&gt; d = new GenericTestDoclet&lt;Integer&gt;();
        for(ClassDoc clazz : root.classes()) {
            d.listFields(clazz, root);
            d.listMethods(clazz, root);
        }
        return true;
    }

}
</code></pre>

<p>The output, if applied on itself:</p>

<pre><code>field: de.fencing_game.paul.examples.doclet.GenericTestDoclet.stringList
type: java.util.ArrayList
paramType:java.util.ArrayList
qualiName: java.util.ArrayList
typeName: ArrayList
parameters.length: 0

method: de.fencing_game.paul.examples.doclet.GenericTestDoclet.getList()
type: java.util.ArrayList
paramType:java.util.ArrayList
qualiName: java.util.ArrayList
typeName: ArrayList
parameters.length: 0

[more methods omitted]
</code></pre>

<p>It shows that also return types seem to be parameterless here.</p>

<p>I wanted to say that I already used this method to <a href="https://github.com/ePaul/ltxdoclet/blob/master/src/de/dclj/paul/ltxdoclet/LaTeXWriter.java#L274" rel="nofollow">print recursively a type name</a>, but it shows that my LaTeX-Doclet actually is not even using the recursive method I created (instead the types are <a href="https://github.com/ePaul/ltxdoclet/blob/master/src/de/dclj/paul/ltxdoclet/PrettyPrinter.java#L1524" rel="nofollow">printed from the compiler tree of the type</a>).</p>

<p>But somehow this has to be possible, since somehow the Standard Doclet <a href="http://download.oracle.com/javase/6/docs/api/java/awt/dnd/DragGestureRecognizer.html#events" rel="nofollow">manges to create the right output</a>.</p>
