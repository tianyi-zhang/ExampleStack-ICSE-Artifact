<p>Sorry for my poor english.</p>

<p><code>SurfaceView</code> and <code>GLSurfaceView</code> punch holes in their windows to allow their surfaces to be displayed. In other words, they have transparent areas. </p>

<p>So you cannot capture an image by calling <code>GLSurfaceView.getDrawingCache()</code>.</p>

<p>If you want to get an image from <code>GLSurfaceView</code>, you should invoke <code>gl.glReadPixels()</code> in <code>GLSurfaceView.onDrawFrame()</code>.</p>

<p>I patched <code>createBitmapFromGLSurface</code> method and call it in <code>onDrawFrame()</code>. </p>

<p>(The original code might be from <a href="http://stackoverflow.com/users/839992/skuld">skuld</a>'s code.)</p>

<pre><code>private Bitmap createBitmapFromGLSurface(int x, int y, int w, int h, GL10 gl)
        throws OutOfMemoryError {
    int bitmapBuffer[] = new int[w * h];
    int bitmapSource[] = new int[w * h];
    IntBuffer intBuffer = IntBuffer.wrap(bitmapBuffer);
    intBuffer.position(0);

    try {
        gl.glReadPixels(x, y, w, h, GL10.GL_RGBA, GL10.GL_UNSIGNED_BYTE, intBuffer);
        int offset1, offset2;
        for (int i = 0; i &lt; h; i++) {
            offset1 = i * w;
            offset2 = (h - i - 1) * w;
            for (int j = 0; j &lt; w; j++) {
                int texturePixel = bitmapBuffer[offset1 + j];
                int blue = (texturePixel &gt;&gt; 16) &amp; 0xff;
                int red = (texturePixel &lt;&lt; 16) &amp; 0x00ff0000;
                int pixel = (texturePixel &amp; 0xff00ff00) | red | blue;
                bitmapSource[offset2 + j] = pixel;
            }
        }
    } catch (GLException e) {
        return null;
    }

    return Bitmap.createBitmap(bitmapSource, w, h, Bitmap.Config.ARGB_8888);
}
</code></pre>
