<p>That algorithm is not the greatest.</p>

<p>The default algorithm in <a href="https://github.com/commonsguy/cwac-camera">my CWAC-Camera library</a> is now:</p>

<pre><code>  public static Camera.Size getBestAspectPreviewSize(int displayOrientation,
                                                     int width,
                                                     int height,
                                                     Camera.Parameters parameters,
                                                     double closeEnough) {
    double targetRatio=(double)width / height;
    Camera.Size optimalSize=null;
    double minDiff=Double.MAX_VALUE;

    if (displayOrientation == 90 || displayOrientation == 270) {
      targetRatio=(double)height / width;
    }

    List&lt;Size&gt; sizes=parameters.getSupportedPreviewSizes();

    Collections.sort(sizes,
                     Collections.reverseOrder(new SizeComparator()));

    for (Size size : sizes) {
      double ratio=(double)size.width / size.height;

      if (Math.abs(ratio - targetRatio) &lt; minDiff) {
        optimalSize=size;
        minDiff=Math.abs(ratio - targetRatio);
      }

      if (minDiff &lt; closeEnough) {
        break;
      }
    }

    return(optimalSize);
  }
</code></pre>

<p>This:</p>

<ul>
<li><p>Takes into account portrait versus landscape</p></li>
<li><p>Starts with the highest resolution previews and works its way down</p></li>
<li><p>Can be tailored via <code>closeEnough</code> to opt for higher resolution as opposed to best matching the aspect ratio of the preview area</p></li>
</ul>
