<p>Below code will helps you to implement pinch zoom on ImageView</p>

<pre><code>public class ZoomActivity extends Activity implements OnTouchListener 
{
private static final String TAG = "Touch";
 @SuppressWarnings("unused")
private static final float MIN_ZOOM = 1f,MAX_ZOOM = 1f;

// These matrices will be used to scale points of the image
Matrix matrix = new Matrix();
Matrix savedMatrix = new Matrix();

// The 3 states (events) which the user is trying to perform
static final int NONE = 0;
static final int DRAG = 1;
static final int ZOOM = 2;
int mode = NONE;

// these PointF objects are used to record the point(s) the user is touching
PointF start = new PointF();
PointF mid = new PointF();
float oldDist = 1f;

/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState) 
{
super.onCreate(savedInstanceState);
setContentView(R.layout.busmaps);
ImageView view = (ImageView) findViewById(R.id.imageViewmaps1);
view.setOnTouchListener(this);
}

@Override
public boolean onTouch(View v, MotionEvent event) 
{
    ImageView view = (ImageView) v;
    view.setScaleType(ImageView.ScaleType.MATRIX);
    float scale;

   // Handle touch events here...

switch (event.getAction() &amp; MotionEvent.ACTION_MASK) 
{
    case MotionEvent.ACTION_DOWN:   // first finger down only
                                        savedMatrix.set(matrix);
                                        start.set(event.getX(), event.getY());
                                        Log.d(TAG, "mode=DRAG"); // write to LogCat
                                        mode = DRAG;
                                        break;

    case MotionEvent.ACTION_UP: // first finger lifted

    case MotionEvent.ACTION_POINTER_UP: // second finger lifted

                                        mode = NONE;
                                        Log.d(TAG, "mode=NONE");
                                        break;

    case MotionEvent.ACTION_POINTER_DOWN: // first and second finger down

                                        oldDist = spacing(event);
                                        Log.d(TAG, "oldDist=" + oldDist);
                                        if (oldDist &gt; 5f) {
                                            savedMatrix.set(matrix);
                                            midPoint(mid, event);
                                            mode = ZOOM;
                                            Log.d(TAG, "mode=ZOOM");
                                        }
                                        break;

    case MotionEvent.ACTION_MOVE:

                                        if (mode == DRAG) 
                                        { 
                                            matrix.set(savedMatrix);
                                            matrix.postTranslate(event.getX() - start.x, event.getY() - start.y); // create the transformation in the matrix  of points
                                        } 
                                        else if (mode == ZOOM) 
                                        { 
                                            // pinch zooming
                                            float newDist = spacing(event);
                                            Log.d(TAG, "newDist=" + newDist);
                                            if (newDist &gt; 5f) 
                                            {
                                                matrix.set(savedMatrix);
                                                scale = newDist / oldDist; // setting the scaling of the
                                                                            // matrix...if scale &gt; 1 means
                                                                            // zoom in...if scale &lt; 1 means
                                                                            // zoom out
                                                matrix.postScale(scale, scale, mid.x, mid.y);
                                            }
                                        }
                                        break;
}

    view.setImageMatrix(matrix); // display the transformation on screen

    return true; // indicate event was handled
}



private float spacing(MotionEvent event) 
{
    float x = event.getX(0) - event.getX(1);
    float y = event.getY(0) - event.getY(1);
    return FloatMath.sqrt(x * x + y * y);
}



private void midPoint(PointF point, MotionEvent event) 
{
    float x = event.getX(0) + event.getX(1);
    float y = event.getY(0) + event.getY(1);
    point.set(x / 2, y / 2);
}
</code></pre>
