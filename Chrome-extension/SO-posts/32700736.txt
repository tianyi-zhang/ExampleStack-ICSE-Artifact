<p>Create a separate class to parse <code>JSON</code> like this:</p>

<pre><code>public class JSONParser {

/* Defining all variables */
static InputStream is = null;
static JSONObject jObj = null;
static String json = "";

/* Get Json object as respective response to url */
public JSONObject getJSONFromUrl(String url, JSONObject jObj) {

    Log.v("Requ. URL: ",url);
    // Making HTTP request
    try {
        // Default Http Client
        DefaultHttpClient httpClient = new DefaultHttpClient();
        // Http Post Header
        HttpPost httpPost = new HttpPost(url);
        StringEntity se = new StringEntity(jObj.toString());
        httpPost.setEntity(se);
        httpPost.setHeader("Content-type", "application/json");
        // Execute Http Post Request
        HttpResponse httpResponse = httpClient.execute(httpPost);
        HttpEntity httpEntity = httpResponse.getEntity();
        is = httpEntity.getContent();

    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (ClientProtocolException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    /*
     * To convert the InputStream to String we use the
     * BufferedReader.readLine() method. We iterate until the BufferedReader
     * return null which means there's no more data to read. Each line will
     * appended to a StringBuilder and returned as String.
     */
    try {
        // Getting Server Response
        BufferedReader reader = new BufferedReader(new InputStreamReader(
                is, "iso-8859-1"), 8);
        StringBuilder sb = new StringBuilder();
        String line = null;
        // Reading Server Response
        while ((line = reader.readLine()) != null) {
            sb.append(line + "\n");
        }
        is.close();
        json = sb.toString();
    } catch (Exception e) {
        Log.e("Buffer Error", "Error converting result " + e.toString());
    }

    // try parse the string to a JSON object
    try {
        jObj = new JSONObject(json);
    } catch (JSONException e) {
        Log.e("JSON Parser", "Error parsing data " + e.toString());
    }

    // return JSON String
    Log.e("JSON Parser", jObj.toString());
    return jObj;

}

}
</code></pre>

<p>And call this method from <code>AsyncTask</code></p>

<pre><code>// Async Class for fetching live metal price from webapi
private class YourClassToFetchData extends AsyncTask&lt;String, String, String&gt;
{



    @Override
    protected String doInBackground(String... params) {

    jParser = new JSONParser();
        JSONObject jsonObject = jParser.getJSONFromUrl(
                URL, getConvertedinJson());

        return null;
    }

    @Override
    protected void onPostExecute(String result) {
        // TODO Auto-generated method stub
        super.onPostExecute(result);
    }
</code></pre>

<p>// Method to create <code>JSON</code> Object</p>

<pre><code>private JSONObject getConvertedinJson() {

    JSONObject object = new JSONObject();
    try {
        object.put("", "");
    } catch (JSONException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    Log.v("JObj", "JObj " + object.toString());
    return object;
}
</code></pre>
