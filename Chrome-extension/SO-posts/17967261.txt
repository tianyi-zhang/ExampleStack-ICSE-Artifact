<p>You need to sort your array then then loop and remove duplicates. As you cannot use other tools you need to write be code yourself.</p>

<p>You can easily find examples of quicksort in Java <a href="http://www.vogella.com/articles/JavaAlgorithmsQuicksort/article.html" rel="nofollow">on the internet</a> (on which this example is based).</p>

<pre><code>public static void main(String[] args) throws Exception {
    final int[] original = new int[]{1, 1, 2, 8, 9, 8, 4, 7, 4, 9, 1};
    System.out.println(Arrays.toString(original));
    quicksort(original);
    System.out.println(Arrays.toString(original));
    final int[] unqiue = new int[original.length];
    int prev = original[0];
    unqiue[0] = prev;
    int count = 1;
    for (int i = 1; i &lt; original.length; ++i) {
        if (original[i] != prev) {
            unqiue[count++] = original[i];
        }
        prev = original[i];
    }
    System.out.println(Arrays.toString(unqiue));
    final int[] compressed = new int[count];
    System.arraycopy(unqiue, 0, compressed, 0, count);
    System.out.println(Arrays.toString(compressed));
}

private static void quicksort(final int[] values) {
    if (values.length == 0) {
        return;
    }
    quicksort(values, 0, values.length - 1);
}

private static void quicksort(final int[] values, final int low, final int high) {
    int i = low, j = high;
    int pivot = values[low + (high - low) / 2];
    while (i &lt;= j) {
        while (values[i] &lt; pivot) {
            i++;
        }
        while (values[j] &gt; pivot) {
            j--;
        }
        if (i &lt;= j) {
            swap(values, i, j);
            i++;
            j--;
        }
    }
    if (low &lt; j) {
        quicksort(values, low, j);
    }
    if (i &lt; high) {
        quicksort(values, i, high);
    }
}

private static void swap(final int[] values, final int i, final int j) {
    final int temp = values[i];
    values[i] = values[j];
    values[j] = temp;
}
</code></pre>

<p>So the process runs in 3 steps.</p>

<ol>
<li>Sort the array  - <code>O(nlgn)</code></li>
<li>Remove duplicates - <code>O(n)</code></li>
<li>Compact the array - <code>O(n)</code></li>
</ol>

<p>So this improves significantly on your <code>O(n^3)</code> approach.</p>

<p>Output:</p>

<pre><code>[1, 1, 2, 8, 9, 8, 4, 7, 4, 9, 1]
[1, 1, 1, 2, 4, 4, 7, 8, 8, 9, 9]
[1, 2, 4, 7, 8, 9, 0, 0, 0, 0, 0]
[1, 2, 4, 7, 8, 9]
</code></pre>

<p><strong>EDIT</strong></p>

<p>OP states <em>values inside array doesn't matter really. But I can assume that range is between 0-1000</em>. This is a classic case where an O(n) sort can be used.</p>

<p>We create an array of size <code>range +1</code>, in this case <code>1001</code>. We then loop over the data and increment the values on each index corresponding to the datapoint.</p>

<p>We can then compact the resulting array, dropping values the have not been incremented. This makes the values unique as we ignore the count.</p>

<pre><code>public static void main(String[] args) throws Exception {
    final int[] original = new int[]{1, 1, 2, 8, 9, 8, 4, 7, 4, 9, 1, 1000, 1000};
    System.out.println(Arrays.toString(original));
    final int[] buckets = new int[1001];
    for (final int i : original) {
        buckets[i]++;
    }
    final int[] unique = new int[original.length];
    int count = 0;
    for (int i = 0; i &lt; buckets.length; ++i) {
        if (buckets[i] &gt; 0) {
            unique[count++] = i;
        }
    }
    final int[] compressed = new int[count];
    System.arraycopy(unique, 0, compressed, 0, count);
    System.out.println(Arrays.toString(compressed));
}
</code></pre>

<p>Output:</p>

<pre><code>[1, 1, 2, 8, 9, 8, 4, 7, 4, 9, 1, 1000, 1000]
[1, 2, 4, 7, 8, 9, 1000]
</code></pre>
