<p><strong>Proposed Solution</strong></p>

<p>You can <a href="http://docs.oracle.com/javase/jp/8/javafx/api/javafx/application/Application.html#launch-java.lang.Class-java.lang.String...-" rel="nofollow">only launch an application once</a>, so there will only ever be a single instance of your application class.  </p>

<p>Because there is only a single instance of the application, you can store a reference to the instance in a static variable of the application when the application is started and you can get the instance as required from a static method (a kind of singleton pattern).</p>

<p><strong>Caveats</strong></p>

<p>Care must be taken to ensure:</p>

<ol>
<li>The instance is available before you try to use it. </li>
<li>That threading rules are appropriately observed.</li>
<li>That the JavaFX Platform is appropriately shutdown when it is no longer required.</li>
</ol>

<p><strong>Sample Solution</strong></p>

<p>The sample code below uses a lock and a condition to ensure that the application instance is available before you try to use it.  It will also require explicit shutdown of the JavaFX platform when it is no longer required.</p>

<p>Thanks to StackOverflow user James-D for some edit assistance with this code.</p>

<pre><code>import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.scene.Scene;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.stage.Stage;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class CPUUsageChart extends Application {
    private static CPUUsageChart appInstance;

    private static final Lock lock = new ReentrantLock();
    private static final Condition appStarted = lock.newCondition();

    /**
     * Starts the application and records the instance.
     * Sets the JavaFX platform not to exit implicitly. 
     * (e.g. an explicit call to Platform.exit() is required
     *       to exit the JavaFX Platform).
     */
    @Override 
    public void start(Stage primaryStage) {
        lock.lock();

        try {
            Platform.setImplicitExit(false);
            appInstance = this;
            appStarted.signalAll();
        } finally {
            lock.unlock();
        }
    }

    /**
     * Get an instance of the application.
     * If the application has not already been launched it will be launched.
     * This method will block the calling thread until the
     * start method of the application has been invoked and the instance set. 
     * @return application instance (will not return null).
     */
    public static CPUUsageChart getInstance() throws InterruptedException {
        lock.lock();

        try {
            if (appInstance == null) {
                Thread launchThread = new Thread(
                        () -&gt; launch(CPUUsageChart.class), 
                        "chart-launcher"
                );
                launchThread.setDaemon(true);
                launchThread.start();
                appStarted.await();
            }
        } finally {
            lock.unlock();
        }

        return appInstance;
    } 

    /**
     * Public method which can be called to perform the main operation 
     * for this application.
     * (render a chart and store the chart image to disk).
     * This method can safely be called from any thread.
     * Once this method is invoked, the data list should not be modified
     * off of the JavaFX application thread.
     */
    public void renderChart(
        ObservableList&lt;XYChart.Data&lt;Number, Number&gt;&gt; data
    ) {
        // ensure chart is rendered on the JavaFX application thread.
        if (!Platform.isFxApplicationThread()) {
            Platform.runLater(() -&gt; this.renderChartImpl(data));
        } else {
            this.renderChartImpl(data);
        } 
    }

    /**
     * Private method which can be called to perform the main operation 
     * for this application.
     * (render a chart and store the chart image to disk).
     * This method must be invoked on the JavaFX application thread.
     */
    private void renderChartImpl(
        ObservableList&lt;XYChart.Data&lt;Number, Number&gt;&gt; data
    ) {
        LineChart&lt;Number, Number&gt; chart = new LineChart&lt;&gt;(
                new NumberAxis(),
                new NumberAxis(0, 100, 10)
        );
        chart.setAnimated(false);
        chart.getData().add(
                new XYChart.Series&lt;&gt;("CPU Usage", data)
        );

        Scene scene = new Scene(chart);

        try {
            LocalDateTime now = LocalDateTime.now();
            File file = Paths.get(
                    System.getProperty("user.dir"),
                    "cpu-usage-chart-" + now + ".png"
            ).toFile();
            ImageIO.write(
                    SwingFXUtils.fromFXImage(
                            chart.snapshot(null, null),
                            null
                    ),
                    "png",
                    file
            );

            System.out.println("Chart saved as: " + file);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>To use this (from any thread):</p>

<pre><code>try {
     // get chartApp instance, blocking until it is available.
     CPUUsageChart chartApp = CPUUsageChart.getInstance();
     // call render chart as many times as you want
     chartApp.renderChart(cpuUsageData);
} catch (InterruptedException e) {
    Thread.currentThread().interrupt();
} finally {
     // note your program should only ever exit the platform once.
     Platform.exit(); 
}
</code></pre>

<p>Complete sample application which creates five graphs of cpu usage data with ten samples in each chart, each sample spaced by 100 milliseconds.  As the sample invokes the chart application to render the charts, it will create chart png image files in the current java working directory and the file names will be output to the system console.  No JavaFX stage or window is displayed. </p>

<p>Code to sample CPU usage copied from: <a href="http://stackoverflow.com/questions/18489273/how-to-get-percentage-of-cpu-usage-of-os-from-java">How to get percentage of CPU usage of OS from java</a></p>

<pre><code>import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.chart.XYChart;

import javax.management.*;
import java.lang.management.ManagementFactory;

public class ChartTest {
    public static void main(String[] args) {
        try {
            CPUUsageChart chart = CPUUsageChart.getInstance();
            for (int i = 0; i &lt; 5; i++) {
                ObservableList&lt;XYChart.Data&lt;Number, Number&gt;&gt; cpuUsageData = FXCollections.observableArrayList();
                for (int j = 0; j &lt; 10; j++) {
                    cpuUsageData.add(
                           new XYChart.Data&lt;&gt;(
                                   j / 10.0, 
                                   getSystemCpuLoad()
                           )
                    );
                    Thread.sleep(100);
                }
                chart.renderChart(cpuUsageData);
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        } catch (MalformedObjectNameException | ReflectionException | InstanceNotFoundException e) {
            e.printStackTrace();
        } finally {
            Platform.exit();
        }
    }

    public static double getSystemCpuLoad() throws MalformedObjectNameException, ReflectionException, InstanceNotFoundException {
        MBeanServer mbs    = ManagementFactory.getPlatformMBeanServer();
        ObjectName name    = ObjectName.getInstance("java.lang:type=OperatingSystem");
        AttributeList list = mbs.getAttributes(name, new String[]{ "SystemCpuLoad" });

        if (list.isEmpty())     return Double.NaN;

        Attribute att = (Attribute)list.get(0);
        Double value  = (Double)att.getValue();

        if (value == -1.0)      return Double.NaN;  // usually takes a couple of seconds before we get real values

        return ((int)(value * 1000) / 10.0);        // returns a percentage value with 1 decimal point precision
    }
}
</code></pre>

<p>Sample output (percentage CPU usage on the Y axis, and time in tenth of second sample spacing on the X axis).</p>

<p><img src="http://i.stack.imgur.com/onZKq.png" alt="enter image description here">
<img src="http://i.stack.imgur.com/auvMT.png" alt="enter image description here">
<img src="http://i.stack.imgur.com/TNq7l.png" alt="enter image description here">
<img src="http://i.stack.imgur.com/Ap4tf.png" alt="enter image description here">
<img src="http://i.stack.imgur.com/ua7AE.png" alt="enter image description here"></p>

<p><strong>Background Information</strong></p>

<ul>
<li><a href="http://docs.oracle.com/javase/jp/8/javafx/api/javafx/application/Application.html" rel="nofollow">Application javadoc</a> to further understand the JavaFX application lifecycle.</li>
<li>Related question: <a href="http://stackoverflow.com/questions/29766582/how-do-i-start-again-an-external-javafx-program-launch-prevents-this-even-if-t">How do I start again an external JavaFX program? Launch prevents this, even if the JavaFX program ended with Platform.Exit</a></li>
</ul>

<p><strong>Alternate Implementations</strong></p>

<ul>
<li>You could use a <a href="http://docs.oracle.com/javase/jp/8/javafx/api/javafx/embed/swing/JFXPanel.html" rel="nofollow">JFXPanel</a> rather than a class which extends Application.  Though, then your application would also have a dependency on Swing.</li>
<li>You could make the main class of your application extend Application, so the application is automatically launched when your application is started rather than having a separate Application just for your usage chart.</li>
<li>If you have lots and lots of charts to render you could look a this <a href="https://gist.github.com/jewelsea/5072743" rel="nofollow">off screen chart renderer implementation</a>.</li>
</ul>
