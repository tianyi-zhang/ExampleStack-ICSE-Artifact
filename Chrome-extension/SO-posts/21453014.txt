<p>To see if there is connection:</p>

<pre><code>ConnectivityManager cm = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);

NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
boolean network_connected = activeNetwork != null
                &amp;&amp; activeNetwork.isConnectedOrConnecting();
</code></pre>

<p>getActiveNetworkInfo is the best function you can use, since it already checks if there is any connection, you dont have to care about wifi or data or any details, since just give you the current active connection or null if there is nothing, and this is the best when you just need to know if there is any connection regardless or which one it is.</p>

<p>As you can read <a href="http://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkInfo%28%29" rel="nofollow">here</a></p>

<blockquote>
  <p>Returns details about the currently active default data network. When
  connected, this network is the default route for outgoing connections.
  You should always check isConnected() before initiating network
  traffic. This may return null when there is no default network.</p>
</blockquote>

<p>you need the permission</p>

<pre><code>&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
</code></pre>

<p>if it is not connected, you can open the wireless settings page of the device, by:</p>

<pre><code>context.startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));
</code></pre>

<p>for showing the dialog:</p>

<pre><code>AlertDialog.Builder bld = new AlertDialog.Builder(c);
bld.setMessage("The text you want to show");
    bld.setTitle(tit);
    bld.setPositiveButton(positiveButton, positiveOrNeutralCallback);

 bld.setNegativeButton("text for cancel button",new OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });

      bld.setPositiveButton("text for open settings button",new OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                 context.startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));
            }
        });


}
 bld.create().show();
</code></pre>

<p><strong>update</strong></p>

<p>your code would be:</p>

<pre><code> @Override
 protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  listView = (ListView) findViewById(R.id.listView1);
  accessWebService();
  registerCallClickBack();


 ConnectivityManager cm = (ConnectivityManager) context
         .getSystemService(Context.CONNECTIVITY_SERVICE);

NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
boolean network_connected = activeNetwork != null
         &amp;&amp; activeNetwork.isConnectedOrConnecting();


if (!network_connected)
  onDetectNetworkState().show();
 }


public AlertDialog onDetectNetworkState(){
AlertDialog.Builder builder1 = new AlertDialog.Builder(this);
builder1.setMessage("text for message")
.setTitle("text for title")
.setNegativeButton("Cancel",new DialogInterface.OnClickListener() {

    @Override
    public void onClick(DialogInterface dialog, int which) {
        // TODO Auto-generated method stub
        MainActivity.this.finish();
    }
})       
.setPositiveButton("??",new DialogInterface.OnClickListener() {

    @Override
    public void onClick(DialogInterface dialog, int which) {
        // TODO Auto-generated method stub
        startActivity(new Intent(Settings.ACTION_WIRELESS_SETTINGS));
    }
});
    return builder1.create();
} 
</code></pre>
