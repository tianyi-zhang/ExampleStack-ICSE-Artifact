<p>First, basically you define the hash function of a class by overriding the <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode%28%29" rel="nofollow">hashCode() method</a>. The Javadoc states:</p>

<blockquote>
  <p>The general contract of hashCode is:</p>
  
  <ul>
  <li>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.</li>
  <li><strong>If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result.</strong></li>
  <li>It is not required that if two objects are unequal according to the equals(java.lang.Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.</li>
  </ul>
</blockquote>

<p>So the more important question is: What makes two of your objects equal? Or vice versa: What properties make your objects unique? If you have an answer to that, create an <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals%28java.lang.Object%29" rel="nofollow">equals()</a> method that compares all of the properties and returns <code>true</code> if they're all the same and <code>false</code> otherwise.</p>

<p>The <code>hashCode()</code> method is a bit more involved, I would suggest that you do not create it yourself but let your IDE do it. In Eclipse, you can select <em>Source</em> and then <em>Generate hashCode() and equals()</em> from the menu. This also guarantees that the requirements from above hold.</p>

<hr>

<p>Here is a small (and simplified) example where the two methods have been generated using Eclipse. Notice that I chose not to include the <code>city</code> property since the <code>zipCode</code> already uniquely identifies the city within a country.</p>

<pre><code>public class Address {

    private String streetAndNumber;
    private String zipCode;
    private String city;
    private String country;

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((country == null) ? 0 : country.hashCode());
        result = prime * result
                + ((streetAndNumber == null) ? 0 : streetAndNumber.hashCode());
        result = prime * result + ((zipCode == null) ? 0 : zipCode.hashCode());
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        if(this == obj)
            return true;
        if(obj == null)
            return false;
        if(!(obj instanceof Address))
            return false;
        final Address other = (Address) obj;
        if(country == null) {
            if(other.country != null)
                return false;
        }
        else if(!country.equals(other.country))
            return false;
        if(streetAndNumber == null) {
            if(other.streetAndNumber != null)
                return false;
        }
        else if(!streetAndNumber.equals(other.streetAndNumber))
            return false;
        if(zipCode == null) {
            if(other.zipCode != null)
                return false;
        }
        else if(!zipCode.equals(other.zipCode))
            return false;
        return true;
    }
}
</code></pre>
