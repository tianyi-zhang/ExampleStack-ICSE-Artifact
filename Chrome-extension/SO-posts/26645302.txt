<p>Create Custom Expandable List for parent.
Like that:</p>

<p>xml:
</p>

<pre><code>&lt;View
    android:layout_width="wrap_content"
    android:layout_height="2dip"
    android:layout_alignParentLeft="true"
    android:layout_alignParentTop="true"
    android:layout_marginLeft="0dp"
    android:layout_marginTop="0dp"
    android:background="@color/list_divider" /&gt;

&lt;ImageView
    android:id="@+id/imgViewHeader"
    android:layout_width="80dp"
    android:layout_height="80dp"
    android:padding="8dp"
    android:layout_alignParentLeft="true" /&gt;

&lt;TextView
    android:id="@+id/lblListHeader"
    android:layout_width="wrap_content"
    android:layout_height="fill_parent"
    android:textColor="#FFFFFF"
    android:padding="8dp"
    android:gravity="center"
    android:layout_alignParentTop="true"
    android:layout_alignParentLeft="true"
    android:layout_marginLeft="90dp"
    android:layout_marginTop="10dp"
    android:textSize="30sp" /&gt;
</code></pre>

<p></p>

<p>Java Code: Adapter</p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter {

private Context _context;
private List&lt;String&gt; _listDataHeader;
private List&lt;Integer&gt; _listImageHeader;// header titles
// child data in format of header title, child title
private HashMap&lt;String, List&lt;String&gt;&gt; _listDataChild;
Typeface ttf;

public ExpandableListAdapter(Context context, List&lt;String&gt; listDataHeader,
        List&lt;Integer&gt; listImageHeader,
        HashMap&lt;String, List&lt;String&gt;&gt; listChildData,Typeface ttff) {
    this._context = context;
    this._listDataHeader = listDataHeader;
    this._listImageHeader = listImageHeader;
    this._listDataChild = listChildData;
    ttf=ttff;

}

@Override
public Object getChild(int groupPosition, int childPosititon) {
    return this._listDataChild.get(this._listDataHeader.get(groupPosition))
            .get(childPosititon);
}

@Override
public long getChildId(int groupPosition, int childPosition) {
    return childPosition;
}

// Set Inflater For Child View (Child)
@Override
public View getChildView(int groupPosition, final int childPosition,
        boolean isLastChild, View convertView, ViewGroup parent) {

    final String childText = (String) getChild(groupPosition, childPosition);

    if (convertView == null) {
        LayoutInflater infalInflater = (LayoutInflater) this._context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = infalInflater.inflate(R.layout.drawer_list_child_row, null);
    }

    TextView txtListChild = (TextView) convertView
            .findViewById(R.id.lblListItem);
    txtListChild.setTypeface(ttf);

    txtListChild.setText(childText);
    return convertView;
}

@Override
public int getChildrenCount(int groupPosition) {
    return this._listDataChild.get(this._listDataHeader.get(groupPosition))
            .size();
}

@Override
public Object getGroup(int groupPosition) {
    return this._listDataHeader.get(groupPosition);
}

@Override
public int getGroupCount() {
    return this._listDataHeader.size();
}

@Override
public long getGroupId(int groupPosition) {
    return groupPosition;
}

// Set Inflater For Group View (Parent)
@Override
public View getGroupView(int groupPosition, boolean isExpanded,
        View convertView, ViewGroup parent) {
    String headerTitle = (String) getGroup(groupPosition);
    // Log.i("groupPosition", getGroupId(groupPosition) + "");
    if (convertView == null) {
        LayoutInflater infalInflater = (LayoutInflater) this._context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView = infalInflater.inflate(R.layout.drawer_list_group_row, null);
    }

    TextView lblListHeader = (TextView) convertView
            .findViewById(R.id.lblListHeader);
    lblListHeader.setTypeface(ttf);
    lblListHeader.setText(headerTitle);

    ImageView imgViewHeader = (ImageView) convertView
            .findViewById(R.id.imgViewHeader);
    imgViewHeader.setBackgroundResource(this._listImageHeader
            .get(groupPosition));

    return convertView;
}

@Override
public boolean hasStableIds() {
    return false;
}

@Override
public boolean isChildSelectable(int groupPosition, int childPosition) {
    return true;
}
</code></pre>

<p>}</p>
