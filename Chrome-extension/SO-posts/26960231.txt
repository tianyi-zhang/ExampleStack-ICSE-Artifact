<p>To get it going your going to need to request <a href="https://developers.google.com/accounts/docs/OAuth2WebServer#offline" rel="nofollow">offline access for Google</a>. Mostly the change is just adding the query parameter 'access_type=offline' to however you got that oneTimeAuthorizationCode. Then you'll get a refresh token back after authorization.</p>

<p>For my own project, I ended up customizing ProviderSignInController to add the query param manually since it doesn't allow you to pass it in through REST:</p>

<pre><code>@RequestMapping(value="/{providerId}", method=RequestMethod.POST)
public RedirectView signIn(@PathVariable String providerId, NativeWebRequest request) {
    ConnectionFactory&lt;?&gt; connectionFactory = connectionFactoryLocator.getConnectionFactory(providerId);
    MultiValueMap&lt;String, String&gt; parameters = new LinkedMultiValueMap&lt;String, String&gt;(); 
    preSignIn(connectionFactory, parameters, request);

    // Request offline access for Google+. Will allow a refreshToken
    parameters.put("access_type", Arrays.asList("offline"));

    try {
        return new RedirectView(connectSupport.buildOAuthUrl(connectionFactory, request, parameters));
    } catch (Exception e) {
        logger.error("Exception while building authorization URL: ", e);
        return redirect(URIBuilder.fromUri(signInUrl).queryParam("error", "provider").build().toString());
    }
}
</code></pre>
