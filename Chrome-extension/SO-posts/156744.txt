<p>I found an interesting list in the <a href="http://www.w3.org/TR/2006/REC-xml11-20060816/#charsets">Xml Spec</a>:
According to that List its discouraged to use the Character #26 (Hex: <em>#x1A</em>).</p>

<blockquote>
  <p>The characters defined in the
  following ranges are also discouraged.
  They are either control characters or
  permanently undefined Unicode
  characters</p>
</blockquote>

<p>See the <a href="http://www.w3.org/TR/2006/REC-xml11-20060816/#charsets">complete ranges</a>.</p>

<p>This code replaces all non-valid Xml Utf8 from a String:</p>

<pre><code>public String stripNonValidXMLCharacters(String in) {
    StringBuffer out = new StringBuffer(); // Used to hold the output.
    char current; // Used to reference the current character.

    if (in == null || ("".equals(in))) return ""; // vacancy test.
    for (int i = 0; i &lt; in.length(); i++) {
        current = in.charAt(i);
        if ((current == 0x9) ||
            (current == 0xA) ||
            (current == 0xD) ||
            ((current &gt;= 0x20) &amp;&amp; (current &lt;= 0xD7FF)) ||
            ((current &gt;= 0xE000) &amp;&amp; (current &lt;= 0xFFFD)) ||
            ((current &gt;= 0x10000) &amp;&amp; (current &lt;= 0x10FFFF)))
            out.append(current);
    }
    return out.toString();
}
</code></pre>

<p>its taken from <a href="http://cse-mjmcl.cse.bris.ac.uk/blog/2007/02/14/1171465494443.html">Invalid XML Characters: when valid UTF8 does not mean valid XML</a></p>

<p>But with that I had the still UTF-8 compatility issue:</p>

<pre><code>org.xml.sax.SAXParseException: Invalid byte 1 of 1-byte UTF-8 sequence
</code></pre>

<p>After reading <a href="http://www.velocityreviews.com/forums/t166758-returning-xml-as-utf8-from-a-servlet.html">XML - returning XML as UTF-8 from a servlet</a> I just tried out what happens if I set the Contenttype like this:</p>

<pre><code>response.setContentType("text/xml;charset=utf-8");
</code></pre>

<p>And it worked ....</p>
