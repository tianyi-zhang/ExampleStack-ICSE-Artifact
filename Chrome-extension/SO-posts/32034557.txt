<p>The above DP solution using O(m*n) space, where m is the length of S, and n is the length of T. Below is the Solution that has only O(n) space.</p>

<pre><code>public class Solution {  
    public int numDistinct(String s, String t) {  
        if(s == null || t == null || t.length() == 0) return 0;  
        int[] dp = new int[t.length()];  

        for(int i = 0; i&lt;s.length(); i++){  
            char c = s.charAt(i);  
            for(int j=dp.length-1; j&gt;=0; j--){  
                if(c == t.charAt(j)){  
                    dp[j] = dp[j] + (j!=0?dp[j-1]: 1);  
                }  
            }  
        }  
        return dp[t.length()-1];  
    }  
}  
</code></pre>

<p>From <a href="http://traceformula.blogspot.com/2015/08/distinct-subsequences.html" rel="nofollow">this page</a>.</p>
