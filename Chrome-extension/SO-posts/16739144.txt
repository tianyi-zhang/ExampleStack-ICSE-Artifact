<p>While I did find some helpful bits in the links posted in the other answers there was no conclusive solution. I had to start afresh and find another way to do this and I've accomplished this with a custom horizontal ScrollView. I'm posting the code so anyone who come across this can find a ready made solution to help them out.</p>

<p>code is below</p>

<pre><code>Custom View

public class SlideMenu extends HorizontalScrollView {
public SlideMenu(Context context, AttributeSet attrs, int defStyle) {
    super(context, attrs, defStyle);
    init(context);
}

public SlideMenu(Context context, AttributeSet attrs) {
    super(context, attrs);
    init(context);
}

public SlideMenu(Context context) {
    super(context);
    init(context);
}

void init(Context context) {
    // remove the fading as the HSV looks better without it
    setHorizontalFadingEdgeEnabled(false);
    setVerticalFadingEdgeEnabled(false);
}

public void initViews(View[] children, int scrollToViewIdx, SizeCallback sizeCallback) {
    // A ViewGroup MUST be the only child of the HSV
    ViewGroup parent = (ViewGroup) getChildAt(0);

    // Add all the children, but add them invisible so that the layouts are calculated, but you can't see the Views
    for (int i = 0; i &lt; children.length; i++) {
        children[i].setVisibility(View.INVISIBLE);
        parent.addView(children[i]);
    }

    // Add a layout listener to this HSV
    // This listener is responsible for arranging the child views.
    OnGlobalLayoutListener listener = new MyOnGlobalLayoutListener(parent, children, scrollToViewIdx, sizeCallback);
    getViewTreeObserver().addOnGlobalLayoutListener(listener);
}

@Override
public boolean onTouchEvent(MotionEvent ev) {
    // Do not allow touch events.
    return false;
}

@Override
public boolean onInterceptTouchEvent(MotionEvent ev) {
    // Do not allow touch events.
    return false;
}

/**
 * An OnGlobalLayoutListener impl that passes on the call to onGlobalLayout to a SizeCallback, before removing all the Views
 * in the HSV and adding them again with calculated widths and heights.
 */
class MyOnGlobalLayoutListener implements OnGlobalLayoutListener {
    ViewGroup parent;
    View[] children;
    int scrollToViewIdx;
    int scrollToViewPos = 0;
    SizeCallback sizeCallback;

    public MyOnGlobalLayoutListener(ViewGroup parent, View[] children, int scrollToViewIdx, SizeCallback sizeCallback) {
        this.parent = parent;
        this.children = children;
        this.scrollToViewIdx = scrollToViewIdx;
        this.sizeCallback = sizeCallback;
    }

    @Override
    public void onGlobalLayout() {

        final HorizontalScrollView me = SlideMenu.this;

        // The listener will remove itself as a layout listener to the HSV
        me.getViewTreeObserver().removeGlobalOnLayoutListener(this);

        // Allow the SizeCallback to 'see' the Views before we remove them and re-add them.
        // This lets the SizeCallback prepare View sizes, ahead of calls to SizeCallback.getViewSize().
        sizeCallback.onGlobalLayout();

        parent.removeViewsInLayout(0, children.length);

        final int w = me.getMeasuredWidth();
        final int h = me.getMeasuredHeight();

        // System.out.println("w=" + w + ", h=" + h);
        // Add each view in turn, and apply the width and height returned by the SizeCallback.
        int[] dims = new int[2];
        scrollToViewPos = 0;
        for (int i = 0; i &lt; children.length; i++) {
            sizeCallback.getViewSize(i, w, h, dims);
            children[i].setVisibility(View.VISIBLE);
            parent.addView(children[i], dims[0], dims[1]);
            if (i &lt; scrollToViewIdx) {
                scrollToViewPos += dims[0];
            }
        }

        // For some reason we need to post this action, rather than call immediately.
        // If we try immediately, it will not scroll.
        new Handler().post(new Runnable() {
            @Override
            public void run() {
                me.scrollBy(scrollToViewPos, 0);
            }
        });
    }
}

/**
 * Callback interface to interact with the HSV.
 */
public interface SizeCallback {

    public void onGlobalLayout();

    public void getViewSize(int idx, int w, int h, int[] dims);
}
  }
</code></pre>

<p>To use it you need 3 xml layouts</p>

<pre><code>Acts as a container to switch between side menu and activity


 &lt;your.pakage.name.SlideMenu 
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:layout_margin="0px"
    android:background="#00ffffff"
    android:fadingEdge="none"
    android:fadingEdgeLength="0px"
    android:padding="0px"
    android:scrollbars="none" &gt;

    &lt;LinearLayout
        android:id="@+id/top"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:layout_margin="0px"
        android:background="#ffffffff"
        android:orientation="horizontal"
        android:padding="0px" &gt;
    &lt;/LinearLayout&gt;

&lt;/your.pakage.name.SlideMenu &gt;
</code></pre>

<p>Design contents of your menu here</p>

<p></p>

<pre><code>&lt;TextView
    android:id="@+id/text1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Option 1"         /&gt;

&lt;TextView
    android:id="@+id/2"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Option 2" /&gt;

&lt;TextView
    android:id="@+id/text3"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Option 3"         /&gt;

&lt;TextView
    android:id="@+id/text4"
    android:layout_width="324dp"
    android:layout_height="70dp"
    android:text="Option 4"     /&gt;
</code></pre>

<p></p>

<p>Some Activity and I'll use ImageView to activate slide menu</p>

<pre><code>&lt;LinearLayout 
android:layout_width="match_parent"
android:layout_height="match_parent"    
android:orientation="vertical" &gt;

&lt;ImageView
    android:id="@+id/imageView1"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:src="@drawable/ic_launcher" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>In your Activity you can use this code to make it work</p>

<pre><code>public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    requestWindowFeature(Window.FEATURE_NO_TITLE);

    LayoutInflater inflater = LayoutInflater.from(this);
    SlideMenu sMenu = (MyHorizontalScrollView) inflater.inflate(R.layout.xml_1, null);
    setContentView(sMenu);

    View menu = inflater.inflate(R.layout.xml_2, null);
    View app = inflater.inflate(R.layout.xml_3, null);
    ImageView menu_btn = (ImageView) app.findViewById(R.id.imageView1);


    menu_btn.setOnClickListener(new ClickListenerForScrolling(sMenu, menu));
    final View[] children = new View[] {menu, app};
    int scrollToViewIdx = 1;
    sMenu.initViews(children, scrollToViewIdx, new SizeCallbackForMenu(menu_btn));
}

//Then create some sub classes

class ClickListenerForScrolling implements OnClickListener {
    SlideMenu scrollView;
    View menu;
    boolean menuOut = false;

    public ClickListenerForScrolling(SlideMenu scrollView,
            View menu) {
        super();
        this.scrollView = scrollView;
        this.menu = menu;
    }

    @Override
    public void onClick(View v) {
        int menuWidth = menu.getMeasuredWidth();
        menu.setVisibility(View.VISIBLE);

        if (!menuOut) {
            int left = 0;
            scrollView.smoothScrollTo(left, 0);             
        } else {
            int left = menuWidth;
            scrollView.smoothScrollTo(left, 0);
        }
        menuOut = !menuOut;
    }
}

static class SizeCallbackForMenu implements SizeCallback {
    int btnWidth;
    View btnSlide;

    public SizeCallbackForMenu(View btnSlide) {
        super();
        this.btnSlide = btnSlide;
    }

    @Override
    public void onGlobalLayout() {
        //use this value to control how far the window will scroll horizontally
        btnWidth = btnSlide.getMeasuredWidth();
    }

    @Override
    public void getViewSize(int idx, int w, int h, int[] dims) {
        dims[0] = w;
        dims[1] = h;
        final int menuIdx = 0;
        if (idx == menuIdx) {
            dims[0] = w - btnWidth;
        }
    }
}
</code></pre>
