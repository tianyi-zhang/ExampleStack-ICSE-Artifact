<p>Having just kinda run into this problem myself, here's my solution (for both multiplication and addition):</p>

<pre><code>static boolean wouldOverflowOccurwhenMultiplying(int a, int b) {
    // If either a or b are Integer.MIN_VALUE, then multiplying by anything other than 0 or 1 will result in overflow
    if (a == 0 || b == 0) {
        return false;
    } else if (a &gt; 0 &amp;&amp; b &gt; 0) { // both positive, non zero
        return a &gt; Integer.MAX_VALUE / b;
    } else if (b &lt; 0 &amp;&amp; a &lt; 0) { // both negative, non zero
        return a &lt; Integer.MAX_VALUE / b;
    } else { // exactly one of a,b is negative and one is positive, neither are zero
        if (b &gt; 0) { // this last if statements protects against Integer.MIN_VALUE / -1, which in itself causes overflow.
            return a &lt; Integer.MIN_VALUE / b;
        } else { // a &gt; 0
            return b &lt; Integer.MIN_VALUE / a;
        }
    }
}

boolean wouldOverflowOccurWhenAdding(int a, int b) {
    if (a &gt; 0 &amp;&amp; b &gt; 0) {
        return a &gt; Integer.MAX_VALUE - b;
    } else if (a &lt; 0 &amp;&amp; b &lt; 0) {
        return a &lt; Integer.MIN_VALUE - b;
    }
    return false;
}
</code></pre>

<p>feel free to correct if wrong or if can be simplified. I've done some testing with the multiplication method, mostly edge cases, but it could still be wrong.</p>
