<p>I modified @wuppi's answer slightly to also hide class paths and long random name annotations to make the graph much more compact and readable.  His <a href="http://stackoverflow.com/a/9229158/403455">answer</a> with edited code follows:</p>

<p>I find this utility method pretty useful and it never pritned incorrect graphs for me. </p>

<p>Regarding the <code>style=invis</code> bug: The Guice grapher plugin generates a dot file, which styles some of the clases as invisible. The <code>replaceAll()</code> in the below posted method works around that. The rest of the code is nearly the same from the Guice example. </p>

<p>I've incorporated Scot's fix for Guice 4.x, which included Tim's answer as well:</p>

<pre><code>public class Grapher {
    public static void main(String[] args) throws Exception {
        Grapher.graph4("filename.dot", Guice.createInjector(new MyModule()));
    }
    public static void graph4(String filename, Injector inj) throws Exception {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PrintWriter out = new PrintWriter(baos);

        Injector injector = Guice.createInjector(new GraphvizModule());
        GraphvizGrapher renderer = injector.getInstance(GraphvizGrapher.class);
        renderer.setOut(out);
        renderer.setRankdir("TB");
        renderer.graph(inj);    

        out = new PrintWriter(new File(filename), "UTF-8");
        String s = baos.toString("UTF-8");
        s = fixGrapherBug(s);
        s = hideClassPaths(s);
        out.write(s);
        out.close();
    }

    public static String hideClassPaths(String s) {
        s = s.replaceAll("\\w[a-z\\d_\\.]+\\.([A-Z][A-Za-z\\d_\\$]*)", "$1");
        s = s.replaceAll("value=[\\w-]+", "random");
        return s;
    }

    public static String fixGrapherBug(String s) {
        s = s.replaceAll("style=invis", "style=solid");
        s = s.replaceAll("margin=(\\S+), ", " margin=\"$1\", ");
        return s;
    }
}
</code></pre>

<p>Of course you are free to generate any other Filename :)</p>
