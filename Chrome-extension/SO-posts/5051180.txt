<p>I came up with a solution, I don't know if it is the best solution, but it appears to work very well.  What I did was created a custom adapter that extends ArrayAdapter.  In the custom adapter I overrode getFilter and created my own Filter class that overrides performFiltering.  This starts a new thread so it doesn't interrupt the UI.  Below is a barebones example.</p>

<p>MyActivity.java</p>

<pre><code>public class MyActivity extends Activity {
    private AutoCompleteTextView style;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        ...
        style = (AutoCompleteTextView) findViewById(R.id.style);
        adapter = new AutoCompleteAdapter(this, android.R.layout.simple_dropdown_item_1line); 
        style.setAdapter(adapter);
    }
}
</code></pre>

<p>AutoCompleteAdapter.java</p>

<pre><code>public class AutoCompleteAdapter extends ArrayAdapter&lt;Style&gt; implements Filterable {
    private ArrayList&lt;Style&gt; mData;

    public AutoCompleteAdapter(Context context, int textViewResourceId) {
        super(context, textViewResourceId);
        mData = new ArrayList&lt;Style&gt;();
    }

    @Override
    public int getCount() {
        return mData.size();
    }

    @Override
    public Style getItem(int index) {
        return mData.get(index);
    }

    @Override
    public Filter getFilter() {
        Filter myFilter = new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults filterResults = new FilterResults();
                if(constraint != null) {
                    // A class that queries a web API, parses the data and returns an ArrayList&lt;Style&gt;
                    StyleFetcher fetcher = new StyleFetcher();
                    try {
                        mData = fetcher.retrieveResults(constraint.toString());
                    }
                    catch(Exception e) {
                        Log.e("myException", e.getMessage());
                    }
                    // Now assign the values and count to the FilterResults object
                    filterResults.values = mData;
                    filterResults.count = mData.size();
                }
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence contraint, FilterResults results) {
                if(results != null &amp;&amp; results.count &gt; 0) {
                notifyDataSetChanged();
                }
                else {
                    notifyDataSetInvalidated();
                }
            }
        };
        return myFilter;
    }
}
</code></pre>
