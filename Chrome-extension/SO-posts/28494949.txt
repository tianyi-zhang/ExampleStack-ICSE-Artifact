<p>The solutions to your question are :-</p>

<ol>
<li>The following code is used to display route from one point to another-</li>
</ol>

<p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>public class DirectionsJSONParser {
 
 /** Receives a JSONObject and returns a list of lists containing latitude and longitude */
 public List&lt;List&lt;HashMap&lt;String,String&gt;&gt;&gt; parse(JSONObject jObject){
  
  List&lt;List&lt;HashMap&lt;String, String&gt;&gt;&gt; routes = new ArrayList&lt;List&lt;HashMap&lt;String,String&gt;&gt;&gt;() ;
  JSONArray jRoutes = null;
  JSONArray jLegs = null;
  JSONArray jSteps = null; 
  
  try {   
   
   jRoutes = jObject.getJSONArray("routes");
   
   /** Traversing all routes */
   for(int i=0;i&lt;jRoutes.length();i++){   
    jLegs = ( (JSONObject)jRoutes.get(i)).getJSONArray("legs");
    List path = new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();
    
    /** Traversing all legs */
    for(int j=0;j&lt;jLegs.length();j++){
     jSteps = ( (JSONObject)jLegs.get(j)).getJSONArray("steps");
     
     /** Traversing all steps */
     for(int k=0;k&lt;jSteps.length();k++){
      String polyline = "";
      polyline = (String)((JSONObject)((JSONObject)jSteps.get(k)).get("polyline")).get("points");
      List&lt;LatLng&gt; list = decodePoly(polyline);
      
      /** Traversing all points */
      for(int l=0;l&lt;list.size();l++){
       HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();
       hm.put("lat", Double.toString(((LatLng)list.get(l)).latitude) );
       hm.put("lng", Double.toString(((LatLng)list.get(l)).longitude) );
       path.add(hm);      
      }        
     }
     routes.add(path);
    }
   }
   
  } catch (JSONException e) {   
   e.printStackTrace();
  }catch (Exception e){   
  }
  
  
  return routes;
 } 
 
 
 /**
  * Method to decode polyline points  
  * */
    private List&lt;LatLng&gt; decodePoly(String encoded) {

        List&lt;LatLng&gt; poly = new ArrayList&lt;LatLng&gt;();
        int index = 0, len = encoded.length();
        int lat = 0, lng = 0;

        while (index &lt; len) {
            int b, shift = 0, result = 0;
            do {
                b = encoded.charAt(index++) - 63;
                result |= (b &amp; 0x1f) &lt;&lt; shift;
                shift += 5;
            } while (b &gt;= 0x20);
            int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
            lat += dlat;

            shift = 0;
            result = 0;
            do {
                b = encoded.charAt(index++) - 63;
                result |= (b &amp; 0x1f) &lt;&lt; shift;
                shift += 5;
            } while (b &gt;= 0x20);
            int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
            lng += dlng;

            LatLng p = new LatLng((((double) lat / 1E5)),
                    (((double) lng / 1E5)));
            poly.add(p);
        }

        return poly;
    }
}</code></pre>
</div>
</div>
</p>

<p>Include the above class and then add the following codes to the class where you want to display the route to the map-</p>

<p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>/** A method to download json data from url */
 private String downloadUrl(String strUrl) throws IOException {
  String data = "";
  InputStream iStream = null;
  HttpURLConnection urlConnection = null;
  try {
   URL url = new URL(strUrl);

   // Creating an http connection to communicate with url
   urlConnection = (HttpURLConnection) url.openConnection();

   // Connecting to url
   urlConnection.connect();

   // Reading data from url
   iStream = urlConnection.getInputStream();

   BufferedReader br = new BufferedReader(new InputStreamReader(
     iStream));

   StringBuffer sb = new StringBuffer();

   String line = "";
   while ((line = br.readLine()) != null) {
    sb.append(line);
   }

   data = sb.toString();

   br.close();

  } catch (Exception e) {
   Log.d("Exception while downloading url", e.toString());
  } finally {
   iStream.close();
   urlConnection.disconnect();
  }
  return data;
 }

 // Fetches data from url passed
 private class DownloadTask extends AsyncTask&lt;String, Void, String&gt; {

  // Downloading data in non-ui thread
  @Override
  protected String doInBackground(String... url) {

   // For storing data from web service
   String data = "";

   try {
    // Fetching the data from web service
    data = downloadUrl(url[0]);
   } catch (Exception e) {
    Log.d("Background Task", e.toString());
   }
   return data;
  }

  // Executes in UI thread, after the execution of
  // doInBackground()
  @Override
  protected void onPostExecute(String result) {
   super.onPostExecute(result);

   ParserTask parserTask = new ParserTask();

   // Invokes the thread for parsing the JSON data
   parserTask.execute(result);

  }
 }

 /** A class to parse the Google Places in JSON format */
 private class ParserTask extends AsyncTask&lt;String, Integer, List&lt;List&lt;HashMap&lt;String, String&gt;&gt;&gt;&gt; {

  // Parsing the data in non-ui thread
  @Override
  protected List&lt;List&lt;HashMap&lt;String, String&gt;&gt;&gt; doInBackground(String... jsonData) {

   JSONObject jObject;
   List&lt;List&lt;HashMap&lt;String, String&gt;&gt;&gt; routes = null;

   try {
    jObject = new JSONObject(jsonData[0]);
    DirectionsJSONParser parser = new DirectionsJSONParser();

    // Starts parsing data
    routes = parser.parse(jObject);
   } catch (Exception e) {
    e.printStackTrace();
   }
   return routes;
  }

  // Executes in UI thread, after the parsing process
  @Override
  protected void onPostExecute(List&lt;List&lt;HashMap&lt;String, String&gt;&gt;&gt; result) {
   ArrayList&lt;LatLng&gt; points = null;
   PolylineOptions lineOptions = null;
   MarkerOptions markerOptions = new MarkerOptions();

   // Traversing through all the routes
   for (int i = 0; i &lt; result.size(); i++) {
    points = new ArrayList&lt;LatLng&gt;();
    lineOptions = new PolylineOptions();

    // Fetching i-th route
    List&lt;HashMap&lt;String, String&gt;&gt; path = result.get(i);

    // Fetching all the points in i-th route
    for (int j = 0; j &lt; path.size(); j++) {
     HashMap&lt;String, String&gt; point = path.get(j);

     double lat = Double.parseDouble(point.get("lat"));
     double lng = Double.parseDouble(point.get("lng"));
     LatLng position = new LatLng(lat, lng);

     points.add(position);
    }

    // Adding all the points in the route to LineOptions
    lineOptions.addAll(points);
    lineOptions.width(4);
    lineOptions.color(Color.RED);

   }

   // Drawing polyline in the Google Map for the i-th route
   map.addPolyline(lineOptions);
  }
 }

private String getDirectionsUrl(LatLng origin, LatLng dest) {

 // Origin of route
 String str_origin = "origin=" + origin.latitude + ","
   + origin.longitude;

 // Destination of route
 String str_dest = "destination=" + dest.latitude + "," + dest.longitude;

 // Sensor enabled
 String sensor = "sensor=false";

 // Building the parameters to the web service
 String parameters = str_origin + "&amp;" + str_dest + "&amp;" + sensor;

 // Output format
 String output = "json";

 // Building the url to the web service
 String url = "https://maps.googleapis.com/maps/api/directions/"
   + output + "?" + parameters;

 return url;
}</code></pre>
</div>
</div>
</p>

<p>Now the call starts as follows-</p>

<p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>// Getting URL to the Google Directions API

String url = getDirectionsUrl(new LatLng(userLocation.getLatitude(),
        userLocation.getLongitude()), new LatLng(
        dest_lat, dest_long));

    DownloadTask downloadTask = new DownloadTask();

    // Start downloading json data from Google Directions API
    downloadTask.execute(url);</code></pre>
</div>
</div>
</p>

<p>Here user userLocation is my current location and dest_lat, dest_long is the destination lat, long and in onPostExecute of ParserTask the line "map.addPolyline(lineOptions);" adds route to the map, so replace it with your own map.</p>

<ol start="2">
<li>Now for this problem create a thread and put a sleep of 2 min or more. Inside that thread call the database and retrive the lat,long and call the above methods(solution 1) , thus your route gets refreshed on every 2 min or more and don't forget to call map.clear() to clear the existing route. </li>
</ol>

<p>Here is my implementation of timerTask and its working fine -</p>

<p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>public class Test extends Activity {

 Timer timer;
 preciLoc loc;

 @Override
 protected void onCreate(Bundle savedInstanceState) {
  // TODO Auto-generated method stub
  super.onCreate(savedInstanceState);
  setContentView(R.layout.test);
  ..........
  timer = new Timer();
  loc = new preciLoc();
  timer.schedule(loc,5000, 10000);
 }

 class preciLoc extends TimerTask {
  @Override
  public void run() {
   Log.e("preciLoc", timer.toString());
  }
 }

}</code></pre>
</div>
</div>
</p>

<p>Here I have set a constant delay of 10 sec and a initial delay of 5 sec, its working fine.</p>
