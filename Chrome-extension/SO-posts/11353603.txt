<p>I needed this myself so I wrote a class to handle it.  All code in this answer is licensed under <a href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache License 2.0</a>.  Enjoy.</p>

<p>There are two static methods that mimic two <a href="http://developer.android.com/reference/android/util/TypedValue.html">TypedValue</a> methods. DimensionConverter.stringToDimension() mimics <a href="http://developer.android.com/reference/android/util/TypedValue.html#complexToDimension%28int,%20android.util.DisplayMetrics%29">TypedValue.complexToDimension</a>.  DimensionConverter.stringToDimensionPixelSize() mimics <a href="http://developer.android.com/reference/android/util/TypedValue.html#complexToDimensionPixelSize%28int,%20android.util.DisplayMetrics%29">TypedValue.complexToDimensionPixelSize</a>.</p>

<p>Supports all current units.  Will accept dimension strings like "33sp", " 44 dp " and throw an exception for bad formats.</p>

<p>Simple to use:</p>

<pre><code>String dimension = "38dp";
Log.i(TAG, "Testing: " + dimension);
try {
    Log.i(TAG, "Converts to: " + DimensionConverter.stringToDimension(dimension, resources.getDisplayMetrics()));
} catch (NumberFormatException exception) {
    Log.i(TAG, "Unable to convert.");
}
</code></pre>

<p>Class here:</p>

<pre><code>public class DimensionConverter {

    // -- Initialize dimension string to constant lookup.
    public static final Map&lt;String, Integer&gt; dimensionConstantLookup = initDimensionConstantLookup();
    private static Map&lt;String, Integer&gt; initDimensionConstantLookup() {
        Map&lt;String, Integer&gt; m = new HashMap&lt;String, Integer&gt;();  
        m.put("px", TypedValue.COMPLEX_UNIT_PX);
        m.put("dip", TypedValue.COMPLEX_UNIT_DIP);
        m.put("dp", TypedValue.COMPLEX_UNIT_DIP);
        m.put("sp", TypedValue.COMPLEX_UNIT_SP);
        m.put("pt", TypedValue.COMPLEX_UNIT_PT);
        m.put("in", TypedValue.COMPLEX_UNIT_IN);
        m.put("mm", TypedValue.COMPLEX_UNIT_MM);
        return Collections.unmodifiableMap(m);  
    }
    // -- Initialize pattern for dimension string.
    private static final Pattern DIMENSION_PATTERN = Pattern.compile("^\\s*(\\d+(\\.\\d+)*)\\s*([a-zA-Z]+)\\s*$");

    public static int stringToDimensionPixelSize(String dimension, DisplayMetrics metrics) {
        // -- Mimics TypedValue.complexToDimensionPixelSize(int data, DisplayMetrics metrics).
        InternalDimension internalDimension = stringToInternalDimension(dimension);
        final float value = internalDimension.value;
        final float f = TypedValue.applyDimension(internalDimension.unit, value, metrics);
        final int res = (int)(f+0.5f);
        if (res != 0) return res;
        if (value == 0) return 0;
        if (value &gt; 0) return 1;
        return -1;
    }

    public static float stringToDimension(String dimension, DisplayMetrics metrics) {
        // -- Mimics TypedValue.complexToDimension(int data, DisplayMetrics metrics).
        InternalDimension internalDimension = stringToInternalDimension(dimension);
        return TypedValue.applyDimension(internalDimension.unit, internalDimension.value, metrics);
    }

    private static InternalDimension stringToInternalDimension(String dimension) {
        // -- Match target against pattern.
        Matcher matcher = DIMENSION_PATTERN.matcher(dimension);
        if (matcher.matches()) {
            // -- Match found.
            // -- Extract value.
            float value = Float.valueOf(matcher.group(1)).floatValue();
            // -- Extract dimension units.
            String unit = matcher.group(3).toLowerCase();
            // -- Get Android dimension constant.
            Integer dimensionUnit = dimensionConstantLookup.get(unit);
            if (dimensionUnit == null) {
                // -- Invalid format.
                throw new NumberFormatException();
            } else {
                // -- Return valid dimension.
                return new InternalDimension(value, dimensionUnit);
            }
        } else {
            // -- Invalid format.
            throw new NumberFormatException();
        }        
    }

    private static class InternalDimension {
        float value;
        int unit;

        public InternalDimension(float value, int unit) {
            this.value = value;
            this.unit = unit;
        }
    }
}
</code></pre>
