<p>I'm sorry to make new answer but I had to include the new code @YShinkarev sorry for being late<br />
By modifying @Adrian answer to make challengeReceived we can use APIKey and accessToken all I modified was the composedResponse</p>

<pre><code>@Override
public void challengeReceived(String challenge) throws IOException {
    byte[] response = null;

    if (challenge != null) {
        String decodedChallenge = new String(Base64.decode(challenge));
        Map&lt;String, String&gt; parameters = getQueryMap(decodedChallenge);

        String version = "1.0";
        String nonce = parameters.get("nonce");
        String method = parameters.get("method");

        long callId = new GregorianCalendar().getTimeInMillis();

        String composedResponse = "api_key="
                + URLEncoder.encode(apiKey, "utf-8") + "&amp;call_id=" + callId
                + "&amp;method=" + URLEncoder.encode(method, "utf-8")
                + "&amp;nonce=" + URLEncoder.encode(nonce, "utf-8")
                + "&amp;access_token="
                + URLEncoder.encode(access_token, "utf-8") + "&amp;v="
                + URLEncoder.encode(version, "utf-8");

        response = composedResponse.getBytes("utf-8");
    }

    String authenticationText = "";

    if (response != null) {
        authenticationText = Base64.encodeBytes(response,
                Base64.DONT_BREAK_LINES);
    }

    // Send the authentication to the server
    getSASLAuthentication().send(new Response(authenticationText));
}
</code></pre>
