<p><strong>You have to return the view simply.</strong></p>

<p>Also For a better scrolling you need to implement and understand the <code>ViewHolder</code> pattern.
Reason why you should use it is because: </p>

<ol>
<li>layout inflations are expensive operations.</li>
</ol>

<p>If you do something like this: </p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {

    LayoutInflater mInflater = mContext.getLayoutInflater();
    View item = mInflater.inflate(R.layout.list_item, null);

    MyObj data = getItem(position);

   ((TextView) item.findViewById(R.id.text1)).setText(data.text1);
   ((TextView) item.findViewById(R.id.text2)).setText(data.text2);
   ((TextView) item.findViewById(R.id.longtext)).setText(data.longText);
   return item;
}
</code></pre>

<p>Please don't do it, because the adapter will create a new view for every position and if you have a very long list it will cause lag scroll. Imagine you have 500 item in the list, the adapter have to create 500 views!!!</p>

<p>So the ViewHolder pattern fix this problem by changing that code from above like this:</p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {
     Log.d(TAG, "position=" + position);

     ViewHolder holder;
     if (convertView == null) {
           convertView = mInflater.inflate(R.layout.list_item, parent, false);
           holder = new ViewHolder();
           holder.text1 = (TextView) convertView.findViewById(R.id.text1);
           holder.text2 = (TextView) convertView.findViewById(R.id.text2);
           holder.longtext = (TextView) convertView.findViewById(R.id.longtext);
           convertView.setTag(holder);
     } else {
           holder = (ViewHolder) convertView.getTag();
     }

     MyObj data = getItem(position);
     holder.text1.setText(data.text1);
     holder.text2.setText(data.text2);
     holder.longtext.setText(data.longText);

     return convertView;
 }
</code></pre>

<p>The <code>convertView</code> from the getView method will have a non-null value when ListView is asking you recycle the row layout. So, when convertView is not null, you should simply update its contents instead of inflating a new row layout.</p>

<p>What this snippet does goes like this:</p>

<p>If the ConvertView is null it will inflate the layout and save each view under the ViewHolder class, what ViewHolder does is to save the views, then you save the ViewHolder in the ConverView with setTag(Object object), If convertView isn't Null then it get the ViewHolder object like this: holder = (ViewHolder) convertView.getTag();
And then it get the current object from the list with the position variable from the getView method and reference everyView through the ViewHolder instance.</p>

<p>Also don't use <code>android:layout_height="wrap_content"</code> because the listView has to call getView() lot of time to know how big it should be, so use <code>android:layout_height="fill_parent"</code> instead.</p>
