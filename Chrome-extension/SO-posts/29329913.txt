<p>Instead of invoking clone you could also write everything to a ByteArrayOutputStream and read it in again.</p>

<p>See if this helps you:</p>

<pre><code>  static public &lt;T&gt; T deepCopy(T oldObj) throws Exception {
    ObjectOutputStream oos = null;
    ObjectInputStream ois = null;
    try {
      ByteArrayOutputStream bos = new ByteArrayOutputStream();
      oos = new ObjectOutputStream( bos);
      oos.writeObject( oldObj);
      oos.flush();
      ByteArrayInputStream bin = new ByteArrayInputStream( bos.toByteArray());
      ois = new ObjectInputStream( bin);

      return (T) ois.readObject();
    } catch( Exception e) {
      e.printStackTrace();
      throw ( e);
    } finally {
      if( oos != null) {
        oos.close();
      }
      if( ois != null) {
        ois.close();
      }
    }
  }
</code></pre>

<p>Usage e. g.:</p>

<pre><code>public class Testing {

  public static void main(String[] args) throws Exception {

    List&lt;Object&gt; list = new ArrayList&lt;&gt;();
    list.add( "A");
    list.add( "B");
    list.add( 1);
    list.add( 2);
    list.add( new BigDecimal( 123.456839572935879238579238754938741321321321321593857));
    list.add( new MyParentObject( 12345, "abcdef", new MyChildObject( "child")));

    List clone = (List) Tools.deepCopy( list);

    for( Object obj: clone) {
      System.out.println( obj);
    }

    System.exit(0);
  }

  private static class MyParentObject implements Serializable {
    int a;
    String b;
    MyChildObject child;

    public MyParentObject(int a, String b, MyChildObject child) {
      super();
      this.a = a;
      this.b = b;
      this.child = child;
    }

    public String toString() {
      return a + ", " + b + ", " + child;
    }
  }

  private static class MyChildObject implements Serializable {
    String s;

    public MyChildObject( String s) {
      this.s = s;
    }

    public String toString() {
      return s;
    }
  }
}
</code></pre>

<p>Output:</p>

<pre><code>A
B
1
2
123.456839572935876958581502549350261688232421875
12345, abcdef, child
</code></pre>
