<p>Because you are specifically asking for the order of the points from the <code>RotatedRect</code> data structure, that order is predictable and never changes (unless you update the library and the developers somehow needed to change that code -> very unlikely).</p>

<p>The order I got is quite odd and is the following:</p>

<pre><code>point[0] - bottom left
point[1] - top left
point[2] - top right
point[3] - bottom right
</code></pre>

<p>You can see in <a href="https://github.com/Itseez/opencv/blob/ef91d7e8830c36785f0b6fdbf2045da48413dd76/modules/java/generator/src/java/core+RotatedRect.java" rel="nofollow">OpenCV source code</a> how that list of points from the <code>RotatedRect</code> is created, based on its center and angle:</p>

<pre><code>public void points(Point pt[])
    {
        double _angle = angle * Math.PI / 180.0;
        double b = (double) Math.cos(_angle) * 0.5f;
        double a = (double) Math.sin(_angle) * 0.5f;

        pt[0] = new Point(
                center.x - a * size.height - b * size.width,
                center.y + b * size.height - a * size.width);

        pt[1] = new Point(
                center.x + a * size.height - b * size.width,
                center.y - b * size.height - a * size.width);

        pt[2] = new Point(
                2 * center.x - pt[0].x,
                2 * center.y - pt[0].y);

        pt[3] = new Point(
                2 * center.x - pt[1].x,
                2 * center.y - pt[1].y);
    }
</code></pre>

<p><strong>EDIT (after comments):</strong></p>

<p>If you realize that the corner order depends from the angle. It is easier to get the order based on the Pythagorean formula like it was said before by Sunil.</p>

<p>Depending which sign the variables <code>a</code> and <code>b</code> will have, the order will be different. Those signs depend from the <code>cos()</code> and <code>sin()</code> results which in turn depend from the angle. So you have 4 combinations of signs <code>(+a, +b), (-a ,-b), (+a, -b), (-a, +b)</code>. These will give, if my theory stands, the 4 different point orders.</p>

<p>You can get the top-left corner by getting all points distance to <code>(0,0)</code>. You will either get one minimum or 2 (equal) minimum distances. If you get 2 minimums, you chose one as the top-left rectangle corner: the one with smaller <code>x</code> coordinate is what makes more sense in my opinion and according to your drawing. The same process can be used for the other rectangle corners.</p>

<pre><code>// Distance (x1, y1) to (x2, y2) = abs( sqrt( (x2-x1)^2 + (y2-y1)^2 ) )
// Note:This is a quite literal translation of the formula, there are more efficient ways.
public static final double pointsDist(Point pt1, Point pt2){        
   return  Math.abs( Math.sqrt( Math.pow((double) (pt2.x - pt1.x), 2) + Math.pow((double) (pt2.y - pt1.y), 2) ) );          
}
</code></pre>
