<p>ResourceBase is an absolute path and/or URL to an absolute path.</p>

<p>The fact that it works without an absolute path is because of how the <code>new File(String).toAbsolutePath()</code> works.</p>

<p>Try looking up a resource that you know is in the ResourceBase, via the ClassPath, and then using the URL reference to set an absolute path.</p>

<p>Example:</p>

<p>Assuming you have a <code>src/main/resources/webroot/</code>, with your static content in it (such as <code>index.html</code>), then you can resolve it first, then pass it into the base resource.</p>

<pre class="lang-java prettyprint-override"><code>package jetty.resource;

import java.net.URI;
import java.net.URL;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.ResourceHandler;
import org.eclipse.jetty.util.resource.Resource;

public class ResourceHandlerExample
{
    public static void main(String[] args) throws Exception
    {
        Server server = new Server(8080);

        // Figure out what path to serve content from
        ClassLoader cl = ResourceHandlerExample.class.getClassLoader();
        // We look for a file, as ClassLoader.getResource() is not
        // designed to look for directories (we resolve the directory later)
        URL f = cl.getResource("webroot/index.html");
        if (f == null)
        {
            throw new RuntimeException("Unable to find resource directory");
        }

        // Resolve file to directory
        URI webRootUri = f.toURI().resolve("./").normalize();
        System.err.println("WebRoot is " + webRootUri);

        ResourceHandler handler = new ResourceHandler();
        handler.setBaseResource(Resource.newResource(webRootUri));

        server.setHandler(handler);

        server.start();
        server.join();
    }
}
</code></pre>

<p>Incidentally, you have a <code>src/main/webapp/</code> which tends to indicate a proper webapp / war file for Maven.  For a full blown webapp, it might be easier to skip <code>ResourceHandler</code> and just use <code>WebAppContext</code> directly (it wires everything up, and <em>does not use</em> <code>ResourceHandler</code>, but rather <code>DefaultServlet</code>, which is better all around for serving static files)</p>
