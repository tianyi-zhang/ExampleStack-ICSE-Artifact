<p>Op De Cirkel is mostly right.  His suggestion will work in most cases:</p>

<blockquote>
<pre><code>myString.replaceAll("\\p{C}", "?");
</code></pre>
</blockquote>

<p>But if <code>myString</code> might contain non-BMP codepoints then it's more complicated.  <code>\p{C}</code> contains the surrogate codepoints of <code>\p{Cs}</code>.  The replacement method above will corrupt non-BMP codepoints by sometimes replacing only half of the surrogate pair.  It's possible this is a Java bug rather than intended behavior.</p>

<p>Using the other constituent categories is an option:</p>

<pre><code>myString.replaceAll("[\\p{Cc}\\p{Cf}\\p{Co}\\p{Cn}]", "?");
</code></pre>

<p>However, solitary surrogate characters not part of a pair (each surrogate character has an assigned codepoint) will not be removed.  A non-regex approach is the only way I know to properly handle <code>\p{C}</code>:</p>

<pre><code>StringBuilder newString = new StringBuilder(myString.length());
for (int offset = 0; offset &lt; myString.length();)
{
    int codePoint = myString.codePointAt(offset);
    offset += Character.charCount(codePoint);

    // Replace invisible control characters and unused code points
    switch (Character.getType(codePoint))
    {
        case Character.CONTROL:     // \p{Cc}
        case Character.FORMAT:      // \p{Cf}
        case Character.PRIVATE_USE: // \p{Co}
        case Character.SURROGATE:   // \p{Cs}
        case Character.UNASSIGNED:  // \p{Cn}
            newString.append('?');
            break;
        default:
            newString.append(Character.toChars(codePoint));
            break;
    }
}
</code></pre>
