<p>If I understand correctly you want to save data to your database from various parts of your app. I would suggest you use ContentProvider/ContentResolver for this. With this approach you would implement a ContentProvider which interacts with your database and from anywhere else in the app you would use a ContentResolver to interact with the ContentProvider. </p>

<p>In your ContentProvider you would have to implement the methods, query(), insert(), delete(), update(), onCreate() and getType(). Uris are used to identify what you want to insert or select from the ContentProvider. You can use a static UriMatcher to make parsing of the Uris very simple. I will give you an example on how to implement the query method with a sqlite database:</p>

<p>This is how you would define an UriMatcher in your Provider:</p>

<pre><code>private static final UriMatcher sURIMatcher = new UriMatcher(UriMatcher.NO_MATCH);
static {
    // Here you define your Uris, in this case for a table I called TABLE_ONE.
    // If you want to know what each of these parameters means I suggest you view the documentation
    sURIMatcher.addURI(AUTHORITY, BASE_PATH, TABLE_ONE_ID);
}

// I suggest you define all constants like the AUTHORITY and BASEPATH and Uri's in a Contract class.
// You create the Uris from the value of AUTHORITY and BASE_PATH like this:
public static final Uri TABLE_ONE_URI = Uri.parse("content://" + AUTHORITY + "/" + BASE_PATH);
</code></pre>

<p>And this is a rudimentary implementation of the query method:</p>

<pre><code>public Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {
    Cursor c = null;

    // The UriMatcher gives you the id of the uri if you added it like in the above example
    int uriId = sURIMatcher.match(uri);
    switch (uriId ) {
        case TABLE_ONE_ID:
            SQLiteDatabase db = database.getWritableDatabase();
            c = db.query(TABLE_ONE_NAME, projecton, selection, selectionArgs, sortOrder);
            c.setNotificationUri(getContext().getContentResolver(), uri);
            break;
        default:
            throw new IllegalArgumentException("Unknown URI: " + uri);
    }

    return c;
}
</code></pre>

<p>And then in your app you can select data from the db using a ContentResolver like this:</p>

<pre><code>// Note that getContentResolver is a method of Activity, in a Fragment you have to call getActivity().getContentResolver()
getContentResolver().query(TABLE_ONE_URI, projection, selection, selectionArgs, sortOrder);
</code></pre>

<p>Here is the link to a complete Tutorial about pretty much anything important regarding SQLite and ContentProviders in Android:<br>
<a href="http://www.vogella.com/articles/AndroidSQLite/article.html" rel="nofollow">http://www.vogella.com/articles/AndroidSQLite/article.html</a><br>
Here you can find the official guide from Google on how to implement a ContentProvider:<br>
<a href="http://developer.android.com/guide/topics/providers/content-provider-creating.html" rel="nofollow">http://developer.android.com/guide/topics/providers/content-provider-creating.html</a></p>
