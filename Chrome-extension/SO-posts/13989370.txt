<p>You could do something like the following where after the document is parser the resulting DOM is validated against the XML schema.  You can set an instance of <code>ErrorHandler</code> so that you can choose what to do with an validation errors.</p>

<pre class="lang-java prettyprint-override"><code>public class Demo {

    public static void main(String[] args) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder parser = factory.newDocumentBuilder();
        Document document = parser.parse(args[1]);
        DOMSouce source = new DOMSource(document);

        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = sf.newSchema(new File("customer.xsd"));

        Validator validator = schema.newValidator();
        validator.setErrorHandler(new MyErrorHandler());
        validator.validate(source);
    }

}
</code></pre>

<p>Alternatively you could call <code>setSchema</code> on the <code>DocumentBuilderFactory</code> so that validation will happen during the parse, but this isn't supported by all DOM parsers:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#setSchema%28javax.xml.validation.Schema%29" rel="nofollow">http://docs.oracle.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#setSchema%28javax.xml.validation.Schema%29</a></li>
</ul>

<p><strong>For More Information</strong></p>

<p>Below is a link to an example from my blog where this schema validation approach is used.  In that example a <code>JAXBSource</code> instead of a <code>DOMSource</code> is used, but everything else is the same.</p>

<ul>
<li><a href="http://blog.bdoughan.com/2010/11/validate-jaxb-object-model-with-xml.html" rel="nofollow">http://blog.bdoughan.com/2010/11/validate-jaxb-object-model-with-xml.html</a></li>
</ul>
