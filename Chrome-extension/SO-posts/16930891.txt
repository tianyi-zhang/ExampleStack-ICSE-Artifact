<p>So I sacrified few MB of app's size for the sake of speed and used <a href="http://www.docjar.com/docs/api/org/apache/tools/ant/DirectoryScanner.html" rel="nofollow">Ant's <code>DirectoryScanner</code></a> in the end.</p>

<p>Also, there's Spring's <a href="http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/core/io/support/PathMatchingResourcePatternResolver.html" rel="nofollow">PathMatchingResourcePatternResolver</a>.</p>

<pre><code>//files = new PatternDirWalker( filesPattern ).list( baseDir );
files = new DirScanner( filesPattern ).list( baseDir );


public class DirScanner {

    private String pattern;

    public DirScanner( String pattern ) {
        this.pattern = pattern;
    }

    public List&lt;File&gt; list( File dirToScan ) throws IOException {

            DirectoryScanner ds = new DirectoryScanner();
            String[] includes = {  this.pattern };
            //String[] excludes = {"modules\\*\\**"};
            ds.setIncludes(includes);
            //ds.setExcludes(excludes);
            ds.setBasedir( dirToScan );
            //ds.setCaseSensitive(true);
            ds.scan();

            String[] matches = ds.getIncludedFiles();
            List&lt;File&gt; files = new ArrayList(matches.length);
            for (int i = 0; i &lt; matches.length; i++) {
                files.add( new File(matches[i]) );
            }
            return files;
    }

}// class
</code></pre>

<p>And here's my impl I started to code, not finished, just if someone would like to finish it. The idea was it would keep a stack of patterns, traverse the dir tree and compare the contents to the actual stack depth and the rest of it in case of <code>**</code>.</p>

<p>But I resorted to <code>PathMatcher</code> and then to Ant's impl.</p>

<pre><code>public class PatternDirWalker {
    //private static final Logger log = LoggerFactory.getLogger( PatternDirWalker.class );

    private String pattern;
    private List segments;
    private PathMatcher mat;

    public PatternDirWalker( String pattern ) {
        this.pattern = pattern;
        this.segments = parseSegments(pattern);
        this.mat = FileSystems.getDefault().getPathMatcher("glob:" + pattern);
    }

    public List&lt;File&gt; list( File dirToScan ) throws IOException{

        return new DirectoryWalker() {
            List&lt;File&gt; files = new LinkedList();

            @Override protected void handleFile( File file, int depth, Collection results ) throws IOException {
                if( PatternDirWalker.this.mat.matches( file.toPath()) )
                    results.add( file );
            }

            public List&lt;File&gt; findMatchingFiles( File dirToWalk ) throws IOException {
                this.walk( dirToWalk, this.files );
                return this.files;
            }
        }.findMatchingFiles( dirToScan );

    }// list()

    private List&lt;Segment&gt; parseSegments( String pattern ) {
        String[] parts = StringUtils.split("/", pattern);
        List&lt;Segment&gt; segs = new ArrayList(parts.length);
        for( String part : parts ) {
            Segment seg = new Segment(part);
            segs.add( seg );
        }
        return segs;
    }

    class Segment {
        public final String pat;  // TODO: Tokenize
        private Segment( String pat ) {
            this.pat = pat;
        }
    }

}// class
</code></pre>
