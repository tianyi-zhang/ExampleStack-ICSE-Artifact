<p>The <a href="http://docs.oracle.com/javase/tutorial/uiswing/components/progress.html">Swing tutorial about progress bars</a> (and showing progress in general) is a very good place to start. It shows you how to perform long-lasting operations on a worker thread by using a <code>SwingWorker</code>, and updating your UI at certain intervals to show progress of the long-lasting operation to the user. There is another tutorial available for more information on the <a href="http://docs.oracle.com/javase/tutorial/uiswing/concurrency/"><code>SwingWorker</code> and concurrency in Swing</a></p>

<p>And as always, this site is filled with examples. For example <a href="http://stackoverflow.com/questions/8916721/java-swing-update-label/8917565#8917565">a previous answer of mine</a> uses the <code>SwingWorker</code> class to show progress to a user</p>

<p><em>Edit</em></p>

<p>As I missed the <em>title of tab</em> part of your question. You could create a 'progress icon' and set that on the tab. The <code>SwingWorker</code> can then be used to update the icon.</p>

<p>An example of such an icon is <img src="http://i.stack.imgur.com/mRZZu.gif" alt="example progress icon">, which is basically an image you rotate each time some progress is made. The <a href="http://docs.oracle.com/javase/tutorial/uiswing/components/tabbedpane.html">tabbed pane tutorial</a> shows you how to add icons to your tabs (or even use custom components)</p>

<p><em>Edit2</em></p>

<p>As it seems my Mac in combination with JDK1.7 makes it much easier to show an animated gif then on other systems, I created a small SSCCE as well, quite similar to that of Andrew but with a rotating icon which does not look like it has been created by, and I quote, 'demented Chimpanzee'. The rotating icon code comes from <a href="http://tips4java.wordpress.com/2009/04/06/rotated-icon/">this site</a> (I used a stripped down version and added the timer). Only thing I am not too happy about is the fact I need to pass my tabbed pane to the rotating icon to trigger. Possible solution is to pull the timer outside the <code>RotatingIcon</code> class, but hey, it's only an SSCCE . Images are not included but were found with Google. </p>

<pre><code>import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.Timer;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.AffineTransform;

public class ProgressTabbedPane {

  public static void main( String[] args ) {
    EventQueue.invokeLater( new Runnable() {
      @Override
      public void run() {
        JFrame frame = new JFrame( "RotatingIcon" );
        JTabbedPane tabbedPane = new JTabbedPane(  );
        tabbedPane.addTab( "Searching", new RotatingIcon( new ImageIcon( "resources/images/progress-indeterminate.png" ), tabbedPane ),
                           new JLabel( new ImageIcon( "resources/images/rotatingIcon.gif" ) ) );
        frame.getContentPane().add( tabbedPane );
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
        frame.pack();
        frame.setVisible( true );
      }
    } );
  }

  private static class RotatingIcon implements Icon{
    private final Icon delegateIcon;
    private double angleInDegrees = 90;
    private final Timer rotatingTimer;
    private RotatingIcon( Icon icon, final JComponent component ) {
      delegateIcon = icon;
      rotatingTimer = new Timer( 100, new ActionListener() {
        @Override
        public void actionPerformed( ActionEvent e ) {
          angleInDegrees = angleInDegrees + 10;
          if ( angleInDegrees == 360 ){
            angleInDegrees = 0;
          }
          component.repaint();
        }
      } );
      rotatingTimer.setRepeats( false );
      rotatingTimer.start();
    }

    @Override
    public void paintIcon( Component c, Graphics g, int x, int y ) {
      rotatingTimer.stop();
      Graphics2D g2 = (Graphics2D )g.create();
      int cWidth = delegateIcon.getIconWidth() / 2;
      int cHeight = delegateIcon.getIconHeight() / 2;
      Rectangle r = new Rectangle(x, y, delegateIcon.getIconWidth(), delegateIcon.getIconHeight());
      g2.setClip(r);
      AffineTransform original = g2.getTransform();
      AffineTransform at = new AffineTransform();
      at.concatenate(original);
      at.rotate(Math.toRadians( angleInDegrees ), x + cWidth, y + cHeight);
      g2.setTransform(at);
      delegateIcon.paintIcon(c, g2, x, y);
      g2.setTransform(original);
      rotatingTimer.start();
    }

    @Override
    public int getIconWidth() {
      return delegateIcon.getIconWidth();
    }

    @Override
    public int getIconHeight() {
      return delegateIcon.getIconHeight();
    }
  } 
}
</code></pre>

<p>A screenshot for reference. A shame the icons do not rotate in the screenshot.
<img src="http://i.stack.imgur.com/HgshV.png" alt="SSCCE screenshot"></p>
