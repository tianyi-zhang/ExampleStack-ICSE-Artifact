<pre><code>private static Integer DEFAULT_WIDTH = {Your value};
private static Integer DEFAULT_HEIGHT = {Your value};

private static Integer DEFAULT_LARGE_WIDTH = {Your value};
private static Integer DEFAULT_LARGE_HEIGHT = {Your value};

public static Bitmap reduceImageQuality(String path, Integer width,
      Integer height, Context context) {

    BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;

    BitmapFactory.decodeFile(path, options);

    if (width == null || height == null) {
      if (InputOutput.isLargeScreen(context)) {
        options.inSampleSize = calculateInSampleSize(options,
            DEFAULT_LARGE_WIDTH, DEFAULT_LARGE_HEIGHT);
      } else {
        options.inSampleSize = calculateInSampleSize(options,
            DEFAULT_WIDTH, DEFAULT_HEIGHT);
      }
    } else {
      options.inSampleSize = calculateInSampleSize(options, width, height);
    }

    options.inJustDecodeBounds = false;

    Bitmap bitmap = BitmapFactory.decodeFile(path, options);

    return bitmap;
  }

  public static int calculateInSampleSize(BitmapFactory.Options options,
      Integer reqWidth, Integer reqHeight) {
    // Raw height and width of image
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {

      final int halfHeight = height / 2;
      final int halfWidth = width / 2;

      // Calculate the largest inSampleSize value that is a power of 2 and keeps
      // both
      // height and width larger than the requested height and width.
      while ((halfHeight / inSampleSize) &gt; reqHeight
          &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
        inSampleSize *= 2;
      }
    }

    return inSampleSize;
  }

public static boolean isLargeScreen(Context context) {
    int screenSize = context.getResources().getConfiguration().screenLayout
        &amp; Configuration.SCREENLAYOUT_SIZE_MASK;
    if (screenSize == Configuration.SCREENLAYOUT_SIZE_LARGE
        || screenSize == Configuration.SCREENLAYOUT_SIZE_XLARGE) {
      return true;
    }
    return false;
  }
</code></pre>

<p>You can use <a href="http://developer.android.com/reference/android/graphics/BitmapFactory.Options.html" rel="nofollow">inSampleSize</a> option to reduce quality. But 800x3980 resolution is too much. Isn't it possible to resize it and place it in drawable folder and then reduce the quality for performance? I totally would recommend that.</p>

<p><strong>Edit:</strong> I have added one method that checks whether the screen is large or not. And I initialized default width and height values for the image. If your image will have same witdh and height for everywhere, then you can remove 2nd and 3rd parameter in reduceImageQuality method. You can use directly default values. </p>

<p>Then put your original image in drawable-x drawable-xx and the resized one would be put the others</p>
