<p>The Song class:</p>

<pre><code>import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import utils.Utils;

public class Song {

    private String title;
    private String artist;
    private int rank;
    private int year;

    public Song(String title, String artist, int rank, int year){
        this.title = title;
        this.artist = artist;
        this.year = year;
        this.rank = rank;
    }

    public String getTitle() {
        return title;
    }

    public String getArtist() {
        return artist;
    }

    public int getRank() {
        return rank;
    }

    public int getYear() {
        return year;
    }

    public static Song parseLine(String line, String delimiter) {
        String[] parts = Utils.splitLine(line, delimiter);
        return new Song(parts[0], parts[1], Integer.parseInt(parts[2]),Integer.parseInt(parts[3]));
    }

    public static List&lt;Song&gt; readFile(String dataFile) {
        List&lt;Song&gt; lines = new ArrayList&lt;Song&gt;();
        String line = null;


        try{
            FileReader fr = new FileReader(new File(dataFile));
            BufferedReader br = new BufferedReader(fr);

            while((line = br.readLine()) != null){
                lines.add(parseLine(line, "\t"));
            }

        }catch(IOException e){
            e.printStackTrace();
        }

        return lines;
    }

        @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((artist == null) ? 0 : artist.hashCode());
        result = prime * result + rank;
        result = prime * result + ((title == null) ? 0 : title.hashCode());
        result = prime * result + year;
        return result;
    }

    @Override
public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Song other = (Song) obj;
        if (artist == null) {
            if (other.artist != null)
                return false;
        } else if (!artist.equals(other.artist))
            return false;
        if (rank != other.rank)
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        } else if (!title.equals(other.title))
            return false;
        if (year != other.year)
            return false;
        return true;
    }


}    
</code></pre>

<p>Utils.splitLine() :</p>

<pre><code>public class Utils {

    public static String[] splitLine(String line, String delimiter) {
        if(delimiter.equals("|")){
            delimiter = "\\|";
        }

        if(delimiter.equals(".")){
            delimiter = "\\.";
            }

        String[] rtn = line.split(delimiter);
        for(int i=0;i&lt;rtn.length;i++){
            rtn[i] = rtn[i].trim();
        }

        return rtn;
    }
}
</code></pre>

<p>Tests:</p>

<pre><code>import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;


public class HelpTest {

    @Test
    public void test_parseLine() {
        // tabs betwen the title artist year and rank
        String line = "Run Runaway  Slade   20  1984";
        Song expected = new Song("Run Runaway","Slade", 20, 1984);
        Song actual = Song.parseLine(line, "\t");   
        assertEquals(expected, actual);

    }

    @Test
    public void test_readFile() {
        String path = "src/testSongData";
        Song song = new Song("Run Runaway","Slade", 20, 1984);
        List&lt;Song&gt; expected = new ArrayList&lt;Song&gt;();
        expected.add(song);
        List&lt;Song&gt; actual = Song.readFile(path);
        assertEquals(expected, actual);

    }

}
</code></pre>

<p>text file <code>src/testSongData</code> used to <code>readFile()</code>:</p>

<pre><code>Run Runaway Slade   20  1984
</code></pre>
