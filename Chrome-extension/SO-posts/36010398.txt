<p>I would like to give u an example where i have set a gesture listener on a image view and have various method to actually get how the image view was swiped:
Inside the activity:</p>

<pre><code>public class SwipeImageDemo extends Activity{


ImageView ivSwipe ;

int[] arrImages = new int[]{R.drawable.bot1, R.drawable.bot2, R.drawable.bot3,
        R.drawable.bot4, R.drawable.bot5, R.drawable.bot6, R.drawable.bot7}; 


int currentIndex = 0;

final int MAX_IMAGES = arrImages.length - 1;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    ivSwipe = (ImageView) findViewById(R.id.ivSwipe);
    ivSwipe.setImageResource(arrImages[currentIndex]);

    ivSwipe.setOnTouchListener(new SwipeHelper(getBaseContext()){


        @Override
        public void onSwipeLeftToRight() {

            currentIndex--;
            if(currentIndex&lt;0){

                currentIndex = 0;
                return; 
            }

            Toast.makeText(getBaseContext(), "swipe right", Toast.LENGTH_SHORT).show();

            ivSwipe.setImageResource(arrImages[currentIndex]);

        }

        @Override
        public void onSwipeRightToLeft() {


            currentIndex++;
            if(currentIndex &gt; MAX_IMAGES){

                currentIndex = MAX_IMAGES;
                return;
            }



            Toast.makeText(getBaseContext(), "swipe left", Toast.LENGTH_SHORT).show();
            ivSwipe.setImageResource(arrImages[currentIndex]);
        }

        @Override
        public void onSwipeBottomToTop() {

            Toast.makeText(getBaseContext(), "SwipeTop", Toast.LENGTH_SHORT).show();

        }

        @Override
        public void onSwipeTopToBottom() {

            Toast.makeText(getBaseContext(), "Swipe bottom", Toast.LENGTH_SHORT).show();

        }


    });
}
</code></pre>

<p>}</p>

<p>The swipe helper class:</p>

<pre><code>public class SwipeHelper implements OnTouchListener{

private GestureDetector mGestureDetector;

public SwipeHelper(Context mContext){

    mGestureDetector = new GestureDetector(mContext, new MyGestureListener());


}


private class MyGestureListener extends SimpleOnGestureListener{

    private static final int SWIPE_THRESHOLD = 100;
    private static final int SWIPE_VELOCITY_THRESHOLD = 100;


    @Override
    public boolean onDown(MotionEvent e) {

        return true;
    }



    @Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
            float velocityY) {
        boolean result = false;
        try {
            float diffY = e2.getY() - e1.getY();
            float diffX = e2.getX() - e1.getX();
            if (Math.abs(diffX) &gt; Math.abs(diffY)) {
                if (Math.abs(diffX) &gt; SWIPE_THRESHOLD &amp;&amp; Math.abs(velocityX) &gt; SWIPE_VELOCITY_THRESHOLD) {
                    if (diffX &gt; 0) {
                        onSwipeLeftToRight();
                    } else {
                        onSwipeRightToLeft();
                    }
                }
                result = true;
            } 
            else if (Math.abs(diffY) &gt; SWIPE_THRESHOLD &amp;&amp; Math.abs(velocityY) &gt; SWIPE_VELOCITY_THRESHOLD) {
                    if (diffY &gt; 0) {
                        onSwipeTopToBottom();
                    } else {
                        onSwipeBottomToTop();
                    }
                }
                result = true;

        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return result;
    }




}

public boolean onTouch(View v, MotionEvent event) {
    return mGestureDetector.onTouchEvent(event);
}




public void onSwipeRightToLeft() {
}

public void onSwipeLeftToRight() {
}

public void onSwipeBottomToTop() {
}

public void onSwipeTopToBottom() {
}
</code></pre>

<p>}</p>

<p>Try some workaround and u should be able to get what u want</p>
