<p>What you did was not to create a copy of the map, but of the reference to it. when two references point to the same object, changes to one will reflect in the other.</p>

<p>Solution 1: If this was a Map from some simple type to another, you would do this instead:</p>

<pre><code>Map&lt;SomeType, OtherType&gt; map1 = new HashMap&lt;SomeType, OtherType&gt;(original); 
</code></pre>

<p>This is called a <a href="http://www.javapractices.com/topic/TopicAction.do?Id=12">Copy Constructor</a>. Almost All standard Collection and Map implementations have one, and it's usually the simplest way to clone a simple structure.
This will work fine as long as <code>SomeType</code> and <code>OtherType</code> are <a href="http://en.wikipedia.org/wiki/Immutable_object">immutable</a> (e.g. <code>Integer</code> and other <code>Number</code> types, <code>Boolean</code>, <code>String</code>, but not Collections, Dates, Maps, Arrays etc.)</p>

<p>If not, as other answerers and commenters have pointed out, you also need to copy the map values.</p>

<p>Solution 2: Here's a quick and dirty version that should be safe:</p>

<pre><code>Map&lt;Integer, Map&lt;String, Object&gt;&gt; original=new HashMap&lt;Integer, Map&lt;String,Object&gt;&gt;();
Map&lt;Integer, Map&lt;String, Object&gt;&gt; copy = 
        new HashMap&lt;Integer, Map&lt;String, Object&gt;&gt;();
for(Entry&lt;Integer, Map&lt;String, Object&gt;&gt; entry : original.entrySet()){
    copy.put(entry.getKey(), new HashMap&lt;String, Object&gt;(entry.getValue()));
}
</code></pre>

<p>But actually, I like Hunter's idea of providing a deep copy method. So here's Solution 3:
my own version using generic parameters:</p>

<pre><code>public static &lt;K1, K2, V&gt; Map&lt;K1, Map&lt;K2, V&gt;&gt; deepCopy(
    Map&lt;K1, Map&lt;K2, V&gt;&gt; original){

    Map&lt;K1, Map&lt;K2, V&gt;&gt; copy = new HashMap&lt;K1, Map&lt;K2, V&gt;&gt;();
    for(Entry&lt;K1, Map&lt;K2, V&gt;&gt; entry : original.entrySet()){
        copy.put(entry.getKey(), new HashMap&lt;K2, V&gt;(entry.getValue()));
    }
    return copy;
}
</code></pre>

<p>You can call it like this:</p>

<pre><code>Map&lt;Integer, Map&lt;String, Object&gt;&gt; original=new HashMap&lt;Integer, Map&lt;String,Object&gt;&gt;();
// do stuff here
Map&lt;Integer, Map&lt;String, Object&gt;&gt; copy = deepCopy(original);
</code></pre>

<hr>

<p><strong>Update</strong></p>

<p>I've hacked together a class that performs deep cloning for Maps, Collections and Arrays (primitive and otherwise). Usage:</p>

<pre><code>Something clone = DeepClone.deepClone(original);
</code></pre>

<p>Here it is:</p>

<pre><code>public final class DeepClone {

    private DeepClone(){}

    public static &lt;X&gt; X deepClone(final X input) {
        if (input == null) {
            return input;
        } else if (input instanceof Map&lt;?, ?&gt;) {
            return (X) deepCloneMap((Map&lt;?, ?&gt;) input);
        } else if (input instanceof Collection&lt;?&gt;) {
            return (X) deepCloneCollection((Collection&lt;?&gt;) input);
        } else if (input instanceof Object[]) {
            return (X) deepCloneObjectArray((Object[]) input);
        } else if (input.getClass().isArray()) {
            return (X) clonePrimitiveArray((Object) input);
        }

        return input;
    }

    private static Object clonePrimitiveArray(final Object input) {
        final int length = Array.getLength(input);
        final Object copy = Array.newInstance(input.getClass().getComponentType(), length);
        // deep clone not necessary, primitives are immutable
        System.arraycopy(input, 0, copy, 0, length);
        return copy;
    }

    private static &lt;E&gt; E[] deepCloneObjectArray(final E[] input) {
        final E[] clone = (E[]) Array.newInstance(input.getClass().getComponentType(), input.length);
        for (int i = 0; i &lt; input.length; i++) {
            clone[i] = deepClone(input[i]);
        }

        return clone;
    }

    private static &lt;E&gt; Collection&lt;E&gt; deepCloneCollection(final Collection&lt;E&gt; input) {
        Collection&lt;E&gt; clone;
        // this is of course far from comprehensive. extend this as needed
        if (input instanceof LinkedList&lt;?&gt;) {
            clone = new LinkedList&lt;E&gt;();
        } else if (input instanceof SortedSet&lt;?&gt;) {
            clone = new TreeSet&lt;E&gt;();
        } else if (input instanceof Set) {
            clone = new HashSet&lt;E&gt;();
        } else {
            clone = new ArrayList&lt;E&gt;();
        }

        for (E item : input) {
            clone.add(deepClone(item));
        }

        return clone;
    }

    private static &lt;K, V&gt; Map&lt;K, V&gt; deepCloneMap(final Map&lt;K, V&gt; map) {
        Map&lt;K, V&gt; clone;
        // this is of course far from comprehensive. extend this as needed
        if (map instanceof LinkedHashMap&lt;?, ?&gt;) {
            clone = new LinkedHashMap&lt;K, V&gt;();
        } else if (map instanceof TreeMap&lt;?, ?&gt;) {
            clone = new TreeMap&lt;K, V&gt;();
        } else {
            clone = new HashMap&lt;K, V&gt;();
        }

        for (Entry&lt;K, V&gt; entry : map.entrySet()) {
            clone.put(deepClone(entry.getKey()), deepClone(entry.getValue()));
        }

        return clone;
    }
}
</code></pre>
