<p>Refer to any Navigation Drawer example on web. You have to implement Nav Drawer in a Base Activity &amp; all your activities should extend the BaseActivity.</p>

<p>Here is my working code :</p>

<p><strong>BaseActivity</strong></p>

<pre><code>package com.projects.activity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.FrameLayout;
import android.widget.ListView;

import com.ajay.projects.adapters.NavigationDrawerListAdapter;
import com.ajay.projects.models.Items;

import java.util.ArrayList;

/**
 * @author ajay.barve@gmail.com
 *         &lt;p/&gt;
 *         This activity will add Navigation Drawer for our application and all the code related to navigation drawer.
 *         We are going to extend all our other activities from this BaseActivity so that every activity will have Navigation Drawer in it.
 *         This activity layout contain one frame layout in which we will add our child activity layout.
 */
public class BaseActivity extends Activity implements View.OnClickListener, AdapterView.OnItemSelectedListener {

    /**
     * Static variable for selected item position. Which can be used in child activity to know which item is selected from the list.
     */
    protected static int position;
    /**
     * This flag is used just to check that launcher activity is called first time so that we can open appropriate Activity on launch and make list item position selected accordingly.
     */
    private static boolean isLaunch = true;
    /**
     * Frame layout: Which is going to be used as parent layout for child activity layout.
     * This layout is protected so that child activity can access this
     */
    protected FrameLayout frameLayout;
    /**
     * ListView to add navigation drawer item in it.
     * We have made it protected to access it in child class. We will just use it in child class to make item selected according to activity opened.
     */

    protected ListView mDrawerList;
    /**
     * List item array for navigation drawer items.
     */
    protected String[] listArray = {"About CML Dashboard", "About Jaslok Onchology Department", "View Report", "Add Record", "CBC Trend", "Tabular Report"};
    protected ArrayList&lt;Items&gt; _items;
    boolean dataExists = false;
    /**
     * Base layout node of this Activity
     */
    private DrawerLayout mDrawerLayout;
    /**
     * Drawer listner class for drawer open, close etc.
     */
    private ActionBarDrawerToggle actionBarDrawerToggle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.navigation_drawer_base_layout);

        frameLayout = (FrameLayout) findViewById(R.id.content_frame);
        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerList = (ListView) findViewById(R.id.left_drawer);

        // set a custom shadow that overlays the main content when the drawer opens
        //mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);

        _items = new ArrayList&lt;Items&gt;();
        _items.add(new Items("About Jaslok Hospital", "Lean about Jaslok Hospital &amp; Jaslok onchology department", R.drawable.item_1));
        _items.add(new Items("View Report", "View CBC Reports stored int he device", R.drawable.item_2));
        _items.add(new Items("Add Record", "Add a new CBC Report", R.drawable.item_3));
        _items.add(new Items("CBC Trend", "View trends of each parameter in CBC Report", R.drawable.item_4));
        _items.add(new Items("Tabular Report", "View tabular   CBC Report", R.drawable.item_5));
        //Adding header on list view
        View header = getLayoutInflater().inflate(R.layout.list_view_header_layout, null);
        mDrawerList.addHeaderView(header);

        // set up the drawer's list view with items and click listener
        mDrawerList.setAdapter(new NavigationDrawerListAdapter(this, _items));
        mDrawerList.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(AdapterView&lt;?&gt; parent, View view,
                                    int position, long id) {

                openActivity(position);
                Log.e("Logger:BaseActivity", "onItemClick-Enter");
            }
        });

        // enable ActionBar app icon to behave as action to toggle nav drawer
        getActionBar().setDisplayHomeAsUpEnabled(true);
        getActionBar().setHomeButtonEnabled(true);


        // ActionBarDrawerToggle ties together the the proper interactions between the sliding drawer and the action bar app icon
        actionBarDrawerToggle = new ActionBarDrawerToggle(
                this,                       /* host Activity */
                mDrawerLayout,              /* DrawerLayout object */
                R.drawable.aj_launcher,     /* nav drawer image to replace 'Up' caret */
                R.string.open_drawer,       /* "open drawer" description for accessibility */
                R.string.close_drawer)      /* "close drawer" description for accessibility */ {
            @Override
            public void onDrawerClosed(View drawerView) {
                getActionBar().setTitle(listArray[position]);
                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
                super.onDrawerClosed(drawerView);
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                getActionBar().setTitle(getString(R.string.app_name));
                invalidateOptionsMenu(); // creates call to onPrepareOptionsMenu()
                super.onDrawerOpened(drawerView);
            }

            @Override
            public void onDrawerSlide(View drawerView, float slideOffset) {
                super.onDrawerSlide(drawerView, slideOffset);
            }

            @Override
            public void onDrawerStateChanged(int newState) {
                super.onDrawerStateChanged(newState);
            }
        };
        mDrawerLayout.setDrawerListener(actionBarDrawerToggle);

    }

    /*End of OnCreate*/

    /*Start OnClick*/
    /* Comment : Have to implement with the OnClickListner onClick is called when a view has been clicked.*/
    public void onClick(View v) { // Parameter v stands for the view that was clicked.

        Log.e("Logger:BaseActivity", "onClick:Enter");
        final Context context = this;
    }
    /*End of onClick*/

    /**
     * @param position Launching activity when any list item is clicked.
     */
    protected void openActivity(int position) {
        Log.e("Logger:BaseActivity", "openActivity-Enter");
        /**
         * We can set title &amp; itemChecked here but as this BaseActivity is parent for other activity,
         * So whenever any activity is going to launch this BaseActivity is also going to be called and
         * it will reset this value because of initialization in onCreate method.
         * So that we are setting this in child activity.
         */
//      mDrawerList.setItemChecked(position, true);
//      setTitle(listArray[position]);
        mDrawerLayout.closeDrawer(mDrawerList);
        BaseActivity.position = position; //Setting currently selected position in this field so that it will be available in our child activities.

        switch (position) {
            case 0:
                startActivity(new Intent(this, HomeActivity.class));
                break;
            case 1:
                startActivity(new Intent(this, AboutActivity.class));
                break;
            case 2:
                startActivity(new Intent(this, MainActivity.class));
                break;
            case 3:
                startActivity(new Intent(this, AddActivity.class));
                break;
            case 4:
                startActivity(new Intent(this, TrendActivity.class));
                break;
            case 5:
                startActivity(new Intent(this, TabularActivity.class));
                break;
            default:
                break;
        }

//      Toast.makeText(this, "Selected Item Position::"+position, Toast.LENGTH_LONG).show();
    }

    //@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        Log.e("Logger:BaseActivity", "onCreateOptionsMenu-Enter");
        getMenuInflater().inflate(R.menu.main, menu);
        return super.onCreateOptionsMenu(menu);

    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        Log.e("Logger:BaseActivity", "onOptionsItemSelected-Enter");
        // The action bar home/up action should open or close the drawer.
        // ActionBarDrawerToggle will take care of this.

        if (actionBarDrawerToggle.onOptionsItemSelected(item)) {
            Log.e("Logger:BaseActivity", "onOptionsItemSelected-Enter"+item);
            return true;
        }

        switch (item.getItemId()) {
            case R.id.action_settings:
                Log.e("Logger:BaseActivity", "onOptionsItemSelected-getItemId"+item.getItemId());

                return true;

            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /* Called whenever we call invalidateOptionsMenu() */
    //@Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        Log.e("Logger:BaseActivity", "onPrepareOptionsMenu-Enter");
        // If the nav drawer is open, hide action items related to the content view
        boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
        menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
        return super.onPrepareOptionsMenu(menu);
    }

    /* We can override onBackPressed method to toggle navigation drawer*/
    @Override
    public void onBackPressed() {
        Log.e("Logger:BaseActivity", "onBackPressed-Enter");
        if (mDrawerLayout.isDrawerOpen(mDrawerList)) {
            mDrawerLayout.closeDrawer(mDrawerList);
        } else {
            mDrawerLayout.openDrawer(mDrawerList);
        }
    }

    @Override
    public void onItemSelected(AdapterView&lt;?&gt; adapterView, View view, int i, long l) {
        Log.e("Logger:BaseActivity", "onItemSelected-Enter");

    }

    @Override
    public void onNothingSelected(AdapterView&lt;?&gt; adapterView) {

    }

}
</code></pre>

<hr>

<p><strong>HomeActivity</strong></p>

<pre><code>package com.projects.activity;

import android.os.Bundle;
import android.widget.ListView;

import com.ajay.projects.adapters.HomeScreenGridViewAdapter;

/**
 * @author ajay.barve@gmail.com
 */
public class HomeActivity extends BaseActivity {


    //private GridView gridview;
    private ListView gridview;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        /**
         * We will not use setContentView in this activty Rather than we will
         * use layout inflater to add view in FrameLayout of our base activity
         * layout
         */

        /**
         * Adding our layout to parent class frame layout.
         */
        getLayoutInflater().inflate(R.layout.home_layout, frameLayout);

        /**
         * Setting title and itemChecked
         */
        mDrawerList.setItemChecked(position, true);
        setTitle(listArray[position]);

        initializeActivity();
    }

    private void initializeActivity() {

        gridview = (ListView) findViewById(R.id.gridview);
        gridview.setAdapter(new HomeScreenGridViewAdapter(this, _items));
    }
}
</code></pre>

<hr>

<p>Code is self explanatory. Hope this example helps.</p>
