<p>Every SQL reference I can find says the "any single character" wildcard is the underscore (<code>_</code>), not the question mark (<code>?</code>).  That simplifies things a bit, since the underscore is not a regex metacharacter.  However, you still can't use <code>Pattern.quote()</code> for the reason given by mmyers.  I've got another method here for escaping regexes when I might want to edit them afterward.  With that out of the way, the <code>like()</code> method becomes pretty simple:</p>

<pre><code>public static boolean like(final String str, final String expr)
{
  String regex = quotemeta(expr);
  regex = regex.replace("_", ".").replace("%", ".*?");
  Pattern p = Pattern.compile(regex,
      Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
  return p.matcher(str).matches();
}

public static String quotemeta(String s)
{
  if (s == null)
  {
    throw new IllegalArgumentException("String cannot be null");
  }

  int len = s.length();
  if (len == 0)
  {
    return "";
  }

  StringBuilder sb = new StringBuilder(len * 2);
  for (int i = 0; i &lt; len; i++)
  {
    char c = s.charAt(i);
    if ("[](){}.*+?$^|#\\".indexOf(c) != -1)
    {
      sb.append("\\");
    }
    sb.append(c);
  }
  return sb.toString();
}
</code></pre>

<p>If you really want to use <code>?</code> for the wildcard, your best bet would be to remove it from the list of metacharacters in the <code>quotemeta()</code> method.  Replacing its escaped form -- <code>replace("\\?", ".")</code> -- wouldn't be safe because there might be backslashes in the original expression.</p>

<p>And that brings us to the real problems: most SQL flavors seem to support character classes in the forms <code>[a-z]</code> and <code>[^j-m]</code> or <code>[!j-m]</code>, and they all provide a way to escape wildcard characters.  The latter is usually done by means of an <code>ESCAPE</code> keyword, which lets you define a different escape character every time.  As you can imagine, this complicates things quite a bit.  Converting to a regex is probably still the best option, but parsing the original expression will be much harder--in fact, the first thing you would have to do is formalize the syntax of the <code>LIKE</code>-like expressions themselves.</p>
