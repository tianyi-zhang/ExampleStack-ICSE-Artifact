<p>I feel there is a better way to handle this scenario which obviates the use of <a href="http://developer.android.com/reference/android/os/AsyncTask.html" rel="nofollow">AsyncTask</a>. Instead a <a href="http://developer.android.com/reference/android/widget/Filter.html" rel="nofollow">Filter</a> can be used, which provides <a href="http://developer.android.com/reference/android/widget/Filter.html#performFiltering(java.lang.CharSequence)" rel="nofollow">performFiltering()</a> callback that actually runs in a worker thread. Here the matching data can be decided / prepared (like by a server call or similar). When the results are prepared the <a href="http://developer.android.com/reference/android/widget/Filter.html#publishResults(java.lang.CharSequence,%20android.widget.Filter.FilterResults)" rel="nofollow">publishResults</a> callback which runs on UI thread, can be used to modifiy the list backing the Custom Adapter. I am just beginning to understand the Android Adapters so I may be incorrect here though. Here is the code that I am using</p>

<pre><code>public class LocalityListAdapter  extends ArrayAdapter&lt;Locality&gt; {

    List&lt;Locality&gt; localities;
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View view = convertView;
        if (view == null) {
            LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            view = inflater.inflate(R.layout.locality_row, null);
        }
        Locality currentLocality = localities.get(position);
        if (currentLocality != null) {
            TextView txvLocalityName = (TextView) view.findViewById(R.id.txvLocalityName);
            txvLocalityName.setText(currentLocality.getName());
        }
        return view;
    }

    @Override
    public Filter getFilter() {
        return localityFilter;
    }

    Filter localityFilter = new Filter() {
        @Override
        public CharSequence convertResultToString(Object resultValue) {
            Locality locality = (Locality) resultValue;
            return locality.getName();
        }

        protected FilterResults performFiltering(CharSequence constraint) {
            List&lt;Locality&gt; localityList = new ArrayList&lt;Locality&gt;();
            ...Get Data from Server 
            //Return FilterResults created from response
            FilterResults filterResults = new FilterResults();
            filterResults.values = localityList;
            filterResults.count = localityList.size();
            return filterResults;
        }

        @Override
        protected void publishResults(CharSequence charSequence, FilterResults filterResults) {
            localities.clear();
            List&lt;Locality&gt; filteredList = (List&lt;Locality&gt;) filterResults.values;
            for(Locality locality : filteredList) {
                localities.add(locality);
            }
            notifyDataSetChanged();
        }
    }
}            
</code></pre>

<p><strong>DonorSearchFragment.java (From MainActivity)</strong></p>

<pre><code>public class DonorSearchFragment extends Fragment {
    ...
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        searchFragmentView = inflater.inflate(R.layout.fragment_donor_search, container, false);

        //Locality AutoComplete
        localityList = new ArrayList&lt;Locality&gt;();
        actLocality = (AutoCompleteTextView) searchFragmentView.findViewById(R.id.actLocality);
        localityListAdapter = new LocalityListAdapter(this.getActivity(), R.layout.locality_row, localityList);
        actLocality.setAdapter(localityListAdapter);
        ...
        return searchFragmentView;
    }
}
</code></pre>
