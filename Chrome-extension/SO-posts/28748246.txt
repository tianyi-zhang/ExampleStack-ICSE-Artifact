<p>After careful reconstruction of the Comparator and all the comments I finally figured out how to do this.  </p>

<p><strong>Question:</strong>
To reiterate what my goal is, as well as the solution.  I have an <code>ArrayList&lt;HashMap&lt;String, String&gt;&gt;</code>.  I want to sort the ArrayList by one object in the HashMap.  My HashMap has more than 1 object in it so I want to retain the entire index of the Array.  I also want to sort alphanumerically where numeric values are the first to be sorted, than I sort alphabetically.  i.e., 1,2,3,4,... A,B,C,D,...</p>

<p><strong>References:</strong> 
<a href="http://sanjaal.com/java/206/java-data-structure/alphanumeric-string-sorting-in-java-implementation/" rel="nofollow">http://sanjaal.com/java/206/java-data-structure/alphanumeric-string-sorting-in-java-implementation/</a> </p>

<p><strong>TL;DR Solution:</strong>
In my custom Comparator function <code>public int compare(object firstObj, Object secondObj)</code> I needed to change the String values to HashMap object references/values.  Here the KEY_ID is the object that I wanted to sort by.  Once I did this I used Collections.sort to sort by the HashMap comparator rather than the Arrays.sort (Collections handles ArrayList/HashMaps).</p>

<p><strong>Code Solution:</strong></p>

<pre><code>import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;

/** 
 * DOCUMENTATION: 
 * http://sanjaal.com/java/206/java-data-structure/alphanumeric-string-sorting-in-java-implementation/ 
 **/

@SuppressWarnings({"rawtypes", "unchecked"})
public class AlphanumericSorting implements Comparator 
{
    public int compare(Object firstObjToCompare, Object secondObjToCompare) 
    {
        String firstString  = ((HashMap&lt;String,String&gt;) firstObjToCompare).get("KEY_ID");
        String secondString = ((HashMap&lt;String,String&gt;) secondObjToCompare).get("KEY_ID");

        //String firstString    = firstObjToCompare.toString();
        //String secondString = secondObjToCompare.toString();

        if (secondString == null || firstString == null) 
        {
            return 0;
        }

        int lengthFirstStr  = firstString.length();
        int lengthSecondStr = secondString.length();

        int index1 = 0;
        int index2 = 0;

        while(index1 &lt; lengthFirstStr &amp;&amp; index2 &lt; lengthSecondStr) 
        {
            char ch1 = firstString.charAt(index1);
            char ch2 = secondString.charAt(index2);

            char[] space1 = new char[lengthFirstStr];
            char[] space2 = new char[lengthSecondStr];

            int loc1 = 0;
            int loc2 = 0;

            do 
            {
                space1[loc1++] = ch1;
                index1++;

                if (index1 &lt; lengthFirstStr) 
                {
                    ch1 = firstString.charAt(index1);
                } 
                else 
                {
                    break;
                }
            } 
            while (Character.isDigit(ch1) == Character.isDigit(space1[0]));

            do 
            {
                space2[loc2++] = ch2;
                index2++;

                if (index2 &lt; lengthSecondStr) 
                {
                    ch2 = secondString.charAt(index2);
                } else 
                {
                    break;
                }
            } 
            while (Character.isDigit(ch2) == Character.isDigit(space2[0]));

            String str1 = new String(space1);
            String str2 = new String(space2);

            int result;

            if (Character.isDigit(space1[0]) &amp;&amp; Character.isDigit(space2[0])) 
            {
                Integer firstNumberToCompare    = new Integer(Integer.parseInt(str1.trim()));
                Integer secondNumberToCompare   = new Integer(Integer.parseInt(str2.trim()));

                result = firstNumberToCompare.compareTo(secondNumberToCompare);
            } 
            else 
            {
                result = str1.compareTo(str2);
            }

            if (result != 0) 
            {
                return result;
            }
        }

        return lengthFirstStr - lengthSecondStr;
    }

    /**
     * ALPHANUMERIC SORTING
     */
    public static ArrayList&lt;HashMap&lt;String, String&gt;&gt; sortArrayList(ArrayList&lt;HashMap&lt;String, String&gt;&gt; al)
    {
        Collections.sort(al, new AlphanumericSorting());

        return al;
    }
}
</code></pre>

<p><strong>To return the sorted ArrayList:</strong></p>

<pre><code>myArrayList = AlphanumericSorting.sortArrayList(myArrayList);
</code></pre>

<p>Where, </p>

<pre><code>ArrayList&lt;HashMap&lt;String, String&gt;&gt; myArrayList;
</code></pre>
