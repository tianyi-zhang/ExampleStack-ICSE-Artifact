<p>Using Java7+ this can be achieved by creating <code>FileSystem</code> and then using <code>walkFileTree</code> to copy files recursively.</p>

<pre><code>public void copyFromJar(String source, final Path target) throws URISyntaxException, IOException {
    URI resource = getClass().getResource("").toURI();
    FileSystem fileSystem = FileSystems.newFileSystem(
            resource,
            Collections.&lt;String, String&gt;emptyMap()
    );


    final Path jarPath = fileSystem.getPath(source);

    Files.walkFileTree(jarPath, new SimpleFileVisitor&lt;Path&gt;() {

        private Path currentTarget;

        @Override
        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
            currentTarget = target.resolve(jarPath.relativize(dir).toString());
            Files.createDirectories(currentTarget);
            return FileVisitResult.CONTINUE;
        }

        @Override
        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
            Files.copy(file, target.resolve(jarPath.relativize(file).toString()), REPLACE_EXISTING);
            return FileVisitResult.CONTINUE;
        }

    });
}
</code></pre>

<p>The method can be used like this:</p>

<pre><code>copyFromJar("/path/to/the/template/in/jar", Paths.get("/tmp/from-jar"))
</code></pre>
