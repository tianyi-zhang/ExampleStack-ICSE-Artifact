<p>this is because of convertView. convertView is a view thats created and recycled through scrolling the list. this view makes GC be called less and also save memory for you. it first assigned by your earliest items of list after you scroll the list, for example item one of list disappears and you see item 15 the convertView of item one is passed again to you. in this time it is not null so you skip assignment to it and it holdes the reference of last  assignments that is the assignment of item one. </p>

<pre><code>   @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if (convertView == null) {
            convertView = inflater.inflate(R.layout.item_view_template, parent, false);
            holder = new ViewHolder();
            holder.itemImg = (ImageView) convertView.findViewById(R.id.img_item);
            holder.itemTv = (TextView) convertView.findViewById(R.id.tv_item_name);
            holder.opTv = (TextView) convertView.findViewById(R.id.tv_item_op);
            holder.itemTv.setText(list.get(position).getName());
            convertView.setTag(holder);
        }else{
            holder = (ViewHolder) convertView.getTag(); 
        }
       // here you must use holder.opTv to change values for example initialize to new one
       //  here you must use holder.itemTv to change values for example initialize to new one
      // .....

        return convertView;
    }
</code></pre>
