<p>the following code worked for me, I hope it helps you,
also I think a lot of people are facing the same problem, so this is what I did to get the <strong>HTML5 video</strong> to run in my Applications <strong>WebView</strong>.</p>

<p>I'll walk you through the <strong>procedure</strong>.</p>

<p>I wanted to load multiple HTML pages, one after another, inside my <strong>App's WebView</strong>. These HTML pages contained either a <strong>Audio followed by a Video</strong>, or a <strong>Video followed by a Audio</strong>.</p>

<p>Here is a sample of one such HTML page.</p>

<pre><code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;screen2&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;link href="css/main-v1.css" rel="stylesheet" type="text/css"&gt;
        &lt;link href="css/screen2-v1.css" rel="stylesheet" type="text/css"&gt;
        &lt;script src="js/jQueryTest.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;          
        &lt;audio id="audio1" src="audio/screen2_a.mp3"&gt;&lt;/audio&gt;
        &lt;video id="video1" src="video/mov_bbb.mp4"&gt;&lt;/video&gt; 
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Now I created Class to act as an <strong>interface between Android</strong> and the <strong>Javascript in the HTML pages</strong>.</p>

<p>Here is the JavaScriptInterface class named <strong>JsHandler.java</strong> in my Projects <strong>src</strong> folder</p>

<pre><code>package com.example.dms;

import java.io.IOException;

import com.example.dms.R;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.util.Log;
import android.webkit.JavascriptInterface;
import android.webkit.WebView;

public class JsHandler {
    Activity activity;
    String TAG = "JsHandler";
    WebView webView;

    public JsHandler(Activity _contxt,WebView _webView) {
        activity = _contxt;
        webView = _webView;
    }

    /**
     * This function handles call from JS
     */
    @JavascriptInterface 
    public void initVideo()
    {
        webView.loadUrl("javascript:playVideo()");
    }

    public void initAudio()
    {
        webView.loadUrl("javascript:playAudio()");
    }

    /**
     * This function handles call from Android-Java
     */
    public void javaFnCall(String jsString) {

        final String webUrl = "javascript:diplayJavaMsg('"+jsString+"')";
        // Add this to avoid android.view.windowmanager$badtokenexception unable to add window
        if(!activity.isFinishing()) 
            // loadurl on UI main thread
        activity.runOnUiThread(new Runnable() {

            @Override
            public void run() {
                webView.loadUrl(webUrl); 
            }
        });
    }

    /**
     * function shows Android-Native Alert Dialog
     */
    public void showDialog(String msg){

        AlertDialog alertDialog = new AlertDialog.Builder(activity).create();  
        alertDialog.setTitle(activity.getString(R.string.app_dialog_title));
        alertDialog.setMessage(msg);  
        alertDialog.setButton(DialogInterface.BUTTON_POSITIVE,activity.getString(R.string.ok_text), new DialogInterface.OnClickListener() 
        {  
            public void onClick(DialogInterface dialog, int which) 
            {  
                dialog.dismiss();
            }
        }); 
        alertDialog.setButton(DialogInterface.BUTTON_NEGATIVE,activity.getString(R.string.cancel_text), new DialogInterface.OnClickListener() 
        {
            @Override
            public void onClick(DialogInterface dialog, int which)
            {
                dialog.dismiss();
            }
        }); 
        alertDialog.show();
    }
}
</code></pre>

<p>This is the code in my MainActivity, that loads the HTML page inside the WebView</p>

<pre><code>public class MainActivity extends Activity{

//WebView Variables
private JsHandler _jsHandler;
private WebView myWebView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    myWebView = (WebView) findViewById(R.id.webView);

    myWebView.setOnTouchListener(new View.OnTouchListener() {
        @Override
        public boolean onTouch(View view, MotionEvent event) {
            // TODO Auto-generated method stub
             if(event.getAction() == MotionEvent.ACTION_DOWN &amp;&amp; !view.hasFocus()) {
                    view.requestFocus();
                }
            return false;
        }
    });

    initWebView();   
}

private void initWebView(){

    //Tell the WebView to enable javascript execution.
    myWebView.getSettings().setJavaScriptEnabled(true);
    myWebView.setBackgroundColor(Color.parseColor("#808080"));

        //Set whether the DOM storage API is enabled.
    myWebView.getSettings().setDomStorageEnabled(true);

        //setBuiltInZoomControls = false, removes +/- controls on screen
    myWebView.getSettings().setBuiltInZoomControls(false);

    myWebView.getSettings().setPluginState(PluginState.ON);
    myWebView.getSettings().setAllowFileAccess(true);

    myWebView.getSettings().setAppCacheMaxSize(1024 * 8);
    myWebView.getSettings().setAppCacheEnabled(true);

    _jsHandler = new JsHandler(this, myWebView);        
    myWebView.addJavascriptInterface(_jsHandler, "JsHandler");

    myWebView.getSettings().setUseWideViewPort(false);
    myWebView.setWebChromeClient(new WebChromeClient());
    myWebView.setWebViewClient(new WebViewClient());

    // these settings speed up page load into the webview
    myWebView.getSettings().setRenderPriority(RenderPriority.HIGH);
    myWebView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
    myWebView.requestFocus(View.FOCUS_DOWN);
    myWebView.loadUrl("file:///android_asset/screen2.html");

}
</code></pre>

<p>}</p>

<p>This is considering that your <strong>HTML page</strong> which is <strong>to be loaded resides in the assets folder</strong> of the project.</p>

<p>What I did is I placed the <strong>Media files</strong> in the <strong>mnt/sdcard/</strong> </p>

<p>For which I need to change the <strong>src</strong> attribute of the <strong>audio and video</strong> tags accordingly. Also as I mentioned earlier the JavaScriptInterface class that I created, I'll use that class to call the Audio or the Video to play from Java, instead of HTML handling it.</p>

<p>So, here is how the new HTML page looks like</p>

<pre><code>    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;screen2&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;link href="css/main-v1.css" rel="stylesheet" type="text/css"&gt;
        &lt;link href="css/screen2-v1.css" rel="stylesheet" type="text/css"&gt;
        &lt;script src="js/jQueryTest.js"&gt;&lt;/script&gt;

        &lt;script&gt;
            function playVideo()
            {
                var cV = document.getElementById("video1");
                cV.addEventListener('ended', function ()
                                                {
                                                    cV.removeEventListener('ended'); 
                                                    playAudio();
                                                }, false);
                cV.play();
            }

            function playAudio()
            {
                var cA = document.getElementById("audio1");
                cA.addEventListener('ended', function ()
                                                {
                                                    cA.removeEventListener('ended'); 
                                                    playVideo();
                                                }, false);
                cA.play();
            }
            function init(){

                JsHandler.initVideo();
            }
        &lt;/script&gt;
        &lt;script&gt;
             $(document).ready(function(){
                init();
            });
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
            &lt;audio id="audio1" src="/mnt/sdcard/Android/data/com.exapmle.dms/files/resources/audio/screen2_a.mp3"&gt;&lt;/audio&gt;
            &lt;video id="video1" src="/mnt/sdcard/Android/data/com.exapmle.dms/files/resources/video/mov_bbb.mp4"&gt;&lt;/video&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>To explain what's happening here is that, when the HTML page loads completely, I've called the <strong>init();</strong> method defined in the HTML page.</p>

<p>This method calls the <strong>initVideo();</strong> method defined in the <strong>JsHandler Class</strong></p>

<p>As you can see, this <strong>initVideo();</strong> method gives a call to <strong>playVideo();</strong> method defined in the HTML page.</p>

<p>You may be wondering why not call the <strong>playVideo();</strong> method directly on <strong>page load</strong>,
well I've tried it and it didn't work, (atleast for me). </p>

<p>I hope it helps you or anyone else who's facing a similar problem in loading <strong>HTML 5 Video</strong> in <strong>WebView</strong></p>
