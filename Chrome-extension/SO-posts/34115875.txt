<p>Google's Caliper project (micro-benchmarker for Java) has one:
<a href="https://github.com/google/caliper/blob/master/caliper/src/main/java/com/google/caliper/json/ImmutableMapTypeAdapterFactory.java" rel="nofollow">https://github.com/google/caliper/blob/master/caliper/src/main/java/com/google/caliper/json/ImmutableMapTypeAdapterFactory.java</a></p>

<p>Reference (in case it moves, or is deleted in the future):</p>

<pre><code>/**
 * Serializes and deserializes {@link ImmutableMap} instances using a {@link HashMap} as an
 * intermediary.
 */
final class ImmutableMapTypeAdapterFactory implements TypeAdapterFactory {
  @SuppressWarnings("unchecked")
  @Override public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; typeToken) {
    Type type = typeToken.getType();
    if (typeToken.getRawType() != ImmutableMap.class
        || !(type instanceof ParameterizedType)) {
      return null;
    }

    com.google.common.reflect.TypeToken&lt;ImmutableMap&lt;?, ?&gt;&gt; betterToken =
        (com.google.common.reflect.TypeToken&lt;ImmutableMap&lt;?, ?&gt;&gt;)
            com.google.common.reflect.TypeToken.of(typeToken.getType());
    final TypeAdapter&lt;HashMap&lt;?, ?&gt;&gt; hashMapAdapter =
        (TypeAdapter&lt;HashMap&lt;?, ?&gt;&gt;) gson.getAdapter(
            TypeToken.get(betterToken.getSupertype(Map.class).getSubtype(HashMap.class)
                .getType()));
    return new TypeAdapter&lt;T&gt;() {
      @Override public void write(JsonWriter out, T value) throws IOException {
        HashMap&lt;?, ?&gt; hashMap = Maps.newHashMap((Map&lt;?, ?&gt;) value);
        hashMapAdapter.write(out, hashMap);
      }

      @Override public T read(JsonReader in) throws IOException {
        HashMap&lt;?, ?&gt; hashMap = hashMapAdapter.read(in);
        return (T) ImmutableMap.copyOf(hashMap);
      }
    };
  }
}
</code></pre>
