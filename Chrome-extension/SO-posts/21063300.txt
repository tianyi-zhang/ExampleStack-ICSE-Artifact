<p><code>DecimalFormat</code> inherits <code>Format#format(Object)</code> which delegates to <code>DecimalFormat#format(Object, StringBuffer, FieldPosition)</code>. This is implemented as</p>

<pre><code>public final StringBuffer format(Object number,
                                 StringBuffer toAppendTo,
                                 FieldPosition pos) {
    if (number instanceof Long || number instanceof Integer ||
               number instanceof Short || number instanceof Byte ||
               number instanceof AtomicInteger ||
               number instanceof AtomicLong ||
               (number instanceof BigInteger &amp;&amp;
                ((BigInteger)number).bitLength () &lt; 64)) {
        return format(((Number)number).longValue(), toAppendTo, pos);
    } else if (number instanceof BigDecimal) {
        return format((BigDecimal)number, toAppendTo, pos);
    } else if (number instanceof BigInteger) {
        return format((BigInteger)number, toAppendTo, pos);
    } else if (number instanceof Number) {
        return format(((Number)number).doubleValue(), toAppendTo, pos);
    } else {
        throw new IllegalArgumentException("Cannot format given Object as a Number");
    }
}
</code></pre>

<p>So you see, you cannot pass a <code>String</code> argument.</p>

<p>The String <code>62.42</code> is already formatted the way you want it.</p>
