<p>Here is my simple Quaternion class.  It uses a lot of the semantics found in <a href="http://www.cprogramming.com/tutorial/3d/quaternions.html" rel="nofollow">this</a> tutorial:</p>

<pre><code>public class Quaternion {
    public double w, x, y, z;
    public Quaternion(double angleRadian, double x, double y, double z){
        double dAngle=angleRadian/2; //might as well divide by 2 here
        this.w=Math.cos(dAngle);
        this.x=x * Math.sin(dAngle);
        this.y=y * Math.sin(dAngle);
        this.z=z * Math.sin(dAngle);
    }
    public Quaternion(){
        x=y=z=0; w=1;
    }
    public void norm(){
        double magnitude = Math.sqrt(w*w + x*x + y*y + z*z);
        w = w / magnitude;
        x = x /  magnitude;
        y = y / magnitude;
        z = z / magnitude;
    }
    public Quaternion conj(){
        Quaternion ans = new Quaternion();
        ans.set(this);
        ans.conjLocal();
        return ans;
    }
    public void conjLocal(){
        x=-x;
        y=-y;
        z=-z;
    }
    public void set(Quaternion q){
        w=q.w;
        x=q.x;
        y=q.y;
        z=q.z;
    }
    public void set(double w, double x, double y, double z){
        this.w=w;
        this.x=x;
        this.y=y;
        this.z=z;
    }
    public Quaternion mult(Quaternion q){
        Quaternion ans = new Quaternion();
        ans.w = (this.w*q.w - this.x*q.x - this.y*q.y - this.z*q.z);
        ans.x = (this.w*q.x + this.x*q.w + this.y*q.z - this.z*q.y);
        ans.y = (this.w*q.y - this.x*q.z + this.y*q.w + this.z*q.x);
        ans.z = (this.w*q.z + this.x*q.y - this.y*q.x + this.z*q.w);
        return ans;
    }
    public void multLocal(Quaternion q){
        Quaternion temp=this.mult(q);
        this.set(temp);
    }
    public String toString(){ return "&lt;"+w+", "+x+", "+y+", "+z+"&gt;"; }
}
</code></pre>

<p>To rotate a vector <code>v</code> by quaternion <code>q</code> to get a resulting vector <code>v'</code>, the following equation must be used:</p>

<pre><code>v' = q * v * q.conj()
</code></pre>

<p>Here is a demonstration that rotates a vector (or position coordinate) around a quaternion. </p>

<pre><code>public class QuaternionExample {
    public static void main(String[] args) {
        /*
         * Let's say we have a vector &lt;1,0,0&gt;, and we want to rotate it
         * such that the result will be in the other unit axiis: &lt;0,1,0&gt;
         * and &lt;0,0,1&gt;.  Right hand rule applies for rotating about an axis!
         * Convince yourself of the following through mental imagery:
         * 1. For &lt;0,1,0&gt;, we want to rotate &lt;1,0,0&gt; by 90 degrees about the z axis
         * 2. For &lt;0,0,1&gt;, we want to rotate &lt;1,0,0&gt; by 90 degrees about the -y axis (or -90 degrees also works)
         */

        //the quaternion form of a 3d vector is simply &lt;0,Vec3&gt; or &lt;0,x,y,z&gt;
        Quaternion x=new Quaternion(); 
        x.set(0,1,0,0);

        //1, we want &lt;0,1,0&gt;
        Quaternion rot = new Quaternion(Math.PI/2,0,0,1);
        System.out.println( rot.mult(x).mult(rot.conj()) );

        //2, we want &lt;0,0,1&gt;
        rot = new Quaternion(Math.PI/2,0,-1,0);
        System.out.println( rot.mult(x).mult(rot.conj()) );
        rot = new Quaternion(-Math.PI/2,0,1,0);
        System.out.println( rot.mult(x).mult(rot.conj()) );
    }
}
</code></pre>

<p>I wanted to rotate my vector (or position coordinate) around the origin.  If I wanted to rotate it about a different point (for instance, an object's centroid <code>c</code>), I would need to subtract the centroid of the object first, and then add it to the result:</p>

<pre><code>v' = q * (v-c) * q.conj() + c
</code></pre>
