<p>you should call the picdownloadertask  in onViewCreated()</p>

<pre><code>    @Override
            public void onViewCreated(View view, Bundle savedInstanceState) {
                super.onViewCreated(view, savedInstanceState);
                ImageView imageView = (ImageView) view.findViewById(R.id.image);
               new PicDownladerTask().execute(url)


            }
</code></pre>

<p>class PicDownloaderTask extends AsyncTask {</p>

<pre><code>        @Override
        protected Bitmap doInBackground(String... strings) {
            Bitmap bitmap = getBitmap(strings[0]);
            return bitmap;
        }

        @Override
        protected void onPostExecute(Bitmap bitmap) {
            super.onPostExecute(bitmap);
               BitmapFactory.Options o = new BitmapFactory.Options();
            o.inSampleSize = 4;
            o.inDither = false;
            bitmap = BitmapFactory.decodeResource(getResources(), imageResource, o);
            imageView.setImageBitmap(bitmap);
        }
</code></pre>

<p>this is the method to get images from url </p>

<pre><code> public static Bitmap getBitmap(String url)
    {
        try {
            Bitmap bitmap=null;
            URL imageUrl = new URL(url);

            HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();
            conn.setConnectTimeout(70000);
            conn.setReadTimeout(70000);

            conn.setInstanceFollowRedirects(true);
            InputStream is=conn.getInputStream();
//            OutputStream os = new FileOutputStream(f);
//            Utils.CopyStream(is, os);
//            os.close();
            bitmap = BitmapFactory.decodeStream(is);
            conn.disconnect();
//            bitmap = decodeFile(f);
            return bitmap;
        } catch (Throwable ex){
            ex.printStackTrace();
            if(ex instanceof OutOfMemoryError){}
//                memoryCache.clear();
            return null;
        }
    }
</code></pre>
