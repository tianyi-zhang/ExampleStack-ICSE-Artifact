<p>Here you are trying to override the method of SimpleUrlAuthenticationFailureHandler. </p>

<p>This method is defined in SimpleUrlAuthenticationFailureHandler:</p>

<pre><code>public void onAuthenticationFailure(HttpServletRequest request,
            HttpServletResponse response, AuthenticationException exception)
            throws IOException, ServletException {
        if (this.defaultFailureUrl == null) {
            this.logger.debug("No failure URL set, sending 401 Unauthorized error");
            response.sendError(401,"Authentication Failed: " + exception.getMessage());
        } else {
            saveException(request, exception);

            if (this.forwardToDestination) {
                this.logger.debug("Forwarding to " + this.defaultFailureUrl);
                request.getRequestDispatcher(this.defaultFailureUrl).forward(request, response);
            } else {
                this.logger.debug("Redirecting to " + this.defaultFailureUrl);
                this.redirectStrategy.sendRedirect(request, response,
                        this.defaultFailureUrl);
            }
        }
    }
</code></pre>

<p>In your CustomAuthenticationFailureHandler you are overriding the method of SimpleUrlAuthenticationFailureHandler:</p>

<p>Basically here you are only setting the default url. And you need to write the redirect strategy. But it is defined in the super class SimpleUrlAuthenticationFailureHandler. So you need to call super.onAuthenticationFailure(request, response, exception);</p>
