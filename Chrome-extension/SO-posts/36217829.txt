<p>Let's start with Google recommendation which says to use DialogFragment instead of a simple Dialog.</p>

<p>@rekire is right that margins set by drawable, going forward it is set by either 9 patch or programmatically depending on theme.</p>

<p>So you either can set your padding to your content view or create dialog using DialogFragment here is an example which changes height of dialog based on it's content, and note you don't need to use tree observer which is as mentioned before may cause performance issue.</p>

<p>So the <strong>example</strong></p>

<p><code>dialog_confirm.xml</code></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:padding="20dp"&gt;

    &lt;LinearLayout android:id="@+id/container"
                  xmlns:android="http://schemas.android.com/apk/res/android"
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content"
                  android:background="@android:color/white"
                  android:orientation="vertical"
                  android:animateLayoutChanges="true"
                  android:padding="15dp"&gt;

        &lt;TextView
            android:id="@+id/textView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:padding="10dp"
            android:text="A label text"
            android:textAppearance="?android:attr/textAppearanceLarge"/&gt;

        &lt;TextView
            android:id="@+id/textView2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:padding="10dp"
            android:text="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque mauris mi, dictum a lectus ut, facilisis"
            android:textAppearance="?android:attr/textAppearanceMedium"/&gt;

        &lt;Button
            android:id="@+id/button1"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:text="Remove Me"/&gt;

        &lt;Button
            android:id="@+id/button2"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:text="Remove Me"/&gt;

        &lt;Button
            android:id="@+id/button3"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_gravity="center_horizontal"
            android:text="Remove Me"/&gt;

        &lt;!-- as much content as you need --&gt;

    &lt;/LinearLayout&gt;
&lt;/ScrollView&gt;
</code></pre>

<p>Note: I wrapped everything into scroll view and set padding you can skip it if you want.</p>

<p><code>ConfirmDialog.java</code> </p>

<pre><code>//here goes package name and  imports

/**
 * Created by Vilen - virtoos.com;
 * fragment dialog example
 */
public class ConfirmDialog extends DialogFragment implements View.OnClickListener {

    private Button button1;
    private Button button2;
    private Button button3;
    private LinearLayout containerLayout;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStyle(DialogFragment.STYLE_NO_TITLE, 0);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.dialog_confirm, container, false);
        containerLayout = (LinearLayout)v.findViewById(R.id.container);
        button1 = (Button)v.findViewById(R.id.button1);
        button2 = (Button)v.findViewById(R.id.button2);
        button3 = (Button)v.findViewById(R.id.button3);
        button1.setOnClickListener(this);
        button2.setOnClickListener(this);
        button3.setOnClickListener(this);
        return v;
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        // make background transparent if you want
        //getDialog().getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
    }

    @NonNull
    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {

        return super.onCreateDialog(savedInstanceState);

    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.button1:
                containerLayout.removeView(button1);
                break;
            case R.id.button2:
                containerLayout.removeView(button2);
                break;
            case R.id.button3:
                containerLayout.removeView(button3);
                break;
        }
    }
}
</code></pre>

<p>and finally you can show your dialog with this piece of code</p>

<pre><code>ConfirmDialog confirmDialog = new ConfirmDialog();
confirmDialog.show(getSupportFragmentManager(), "dialog");
</code></pre>

<p><a href="http://i.stack.imgur.com/6mK3E.png" rel="nofollow"><img src="http://i.stack.imgur.com/6mK3E.png" alt="enter image description here"></a></p>

<p>I will not go into details why Fragment dialog is better but one thing is clear that you can encapsulate logic for it and have separate class.
Hope this solves your issue.</p>
