<p><strong>Try to replace adapter code.</strong></p>

<pre><code>  public class SelectImageAdapter extends BaseAdapter {

        Context mContext;
        ViewHolder holder;

        public SelectImageAdapter(Context context, ArrayList&lt;String&gt; imageList) {
            // TODO Auto-generated constructor stub
            mContext = context;
            imageLoader = ImageLoader.getInstance();
        }

        @Override
        public int getCount() {
            // TODO Auto-generated method stub
            return selectImageUrls.size();
        }

        @Override
        public Object getItem(int position) {
            // TODO Auto-generated method stub
            return null;
        }

        @Override
        public long getItemId(int position) {
            // TODO Auto-generated method stub

            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if (convertView == null) {
                holder = new ViewHolder();
                convertView = LayoutInflater.from(mContext).inflate(R.layout.select_image, null);
                holder.imageView =  (ImageView) convertView.findViewById(R.id.select_images);
                holder.spinner = (ProgressBar)convertView.findViewById(R.id.select_image_loading);
                convertView.setTag(holder);
            }else{
                holder = (ViewHolder) convertView.getTag();
            }

            //final ViewAnimator animator = (ViewAnimator)convertView.findViewById(R.id.animator);
            imageLoader.displayImage("file://" + selectImageUrls.get(position),holder.imageView,
                    options, new SimpleImageLoadingListener() {
                        @Override
                        public void onLoadingStarted(String imageUri, View view) {
                            holder.spinner.setVisibility(View.VISIBLE);
                            //animator.setDisplayedChild(1);
                        }

                        @Override
                        public void onLoadingFailed(String imageUri, View view,
                                                    FailReason failReason) {
                            String message = null;
                            switch (failReason.getType()) {
                                case IO_ERROR:
                                    message = "Input/Output error";
                                    break;
                                case DECODING_ERROR:
                                    message = "Image can't be decoded";
                                    break;
                                case NETWORK_DENIED:
                                    message = "Downloads are denied";
                                    break;
                                case OUT_OF_MEMORY:
                                    message = "Out Of Memory error";
                                    break;
                                case UNKNOWN:
                                    message = "Unknown error";
                                    break;
                            }
                            Toast.makeText(AddProductActivity.this, message,Toast.LENGTH_SHORT).show();
                            holder.spinner.setVisibility(View.GONE);
                            //animator.setDisplayedChild(0);
                        }

                        @Override
                        public void onLoadingComplete(String imageUri,
                                                      View view, Bitmap loadedImage) {
                            // Animation anim =
                            // AnimationUtils.loadAnimation(Sdcard.this,
                            // R.anim.push_left_in);
                            // imageView.setAnimation(anim);
                            // anim.start();
                            holder.spinner.setVisibility(View.GONE);
                        }
                    });

            return convertView;
        }

        class ViewHolder {
            ImageView imageView;
            ProgressBar spinner;
        }

    }
</code></pre>
