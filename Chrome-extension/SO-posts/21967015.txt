<p>You can not place a 2 dimensional array inside a one dimensional array.
This</p>

<pre><code>int[][] b={{1,2},{2,3}};
int[] a=b[0];
</code></pre>

<p>Will work</p>

<p>And sorting this will check all elements.</p>

<pre><code>    int[][] temp = { { 1, 50, 5 }, { 2, 30, 8 }, { 3, 90, 6 },{ 4, 20, 7 }, { 5, 80, 9 }, };
    Arrays.sort(temp, new Comparator&lt;int[]&gt;() {
    @Override
    public int compare(int[] o1, int[] o2) {
        for(int i=0;i&lt;((o1.length&lt;o2.length)?o1.length:o2.length);i++) {
            if (o1[i]!=o2[i])
                return o1[i]-o2[i];
        }
        if (o1.length!=o2.length)
            return o1.length-o2.length;
        return 0;
    }
    });
</code></pre>

<p>If you want to sort the internal Arrays also you need to call sort on each Array first, however this will do double work and can be improved.</p>

<pre><code>    int[][] temp = { { 1, 50, 5 }, { 2, 30, 8 }, { 3, 90, 6 },{ 4, 20, 7 }, { 5, 80, 9 }, };
    Arrays.sort(temp, new Comparator&lt;int[]&gt;() {
    @Override
    public int compare(int[] o1, int[] o2) {
        Arrays.sort(o1);
        Arrays.sort(o2);
        for(int i=0;i&lt;((o1.length&lt;o2.length)?o1.length:o2.length);i++) {
            if (o1[i]!=o2[i])
                return o1[i]-o2[i];
        }
        if (o1.length!=o2.length)
            return o1.length-o2.length;
        return 0;
    }
    });     
</code></pre>
