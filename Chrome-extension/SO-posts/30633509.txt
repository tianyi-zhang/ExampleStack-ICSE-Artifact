<p>I reviewed your code in DynamicListView and NavigationDrawerListViewAdapter class, mainly. As I said in my comments, I am familiar with the DynamicListView code and your code seems fine.</p>

<p>The problem that I see is that your <code>originalItem</code> stays visible in the original (wrong) position but internally the item (in the ArrayList object in NavigationDrawerListViewAdapter) is <strong>no longer in the same position</strong> in the ArrayList. This is a strong sign that the item is not being refreshed at the right time. You did call getAdapter().notifyDataSetChanged() in DynamicListView but that is good only for the 2 items being moved. The item not being moved, the original item, stays in the same wrong position but needs to be refreshed to be updated to the correct position. Visually I know this is not obvious!</p>

<p>I suspect the <strong>getView</strong> method in NavigationDrawerListViewAdapter needs the update. Method getView is responsible for displaying all the items in the Listiview! The code in getView has rather odd coding technique and needs to be coded in the conventional way, as suggested by Google developer.android.com. The good part is I think you don't need major code updates to fix your problem.</p>

<p>Code suggestion:</p>

<pre><code>public View getView(final int position, View convertView, final ViewGroup parent) {
    ViewHolder holder = null;

    final NavigationDrawerFragment.ListItem i = myItems.get(position);

    if (convertView == null) {
        holder = new ViewHolder();
        convertView = mInflater.inflate(R.layout.navigation_drawer_listview_simple, null);

        holder.text = (TextView) convertView.findViewById(R.id.textView123);
        convertView.setTag(holder);
    }
    else {
        holder = (ViewHolder) convertView.getTag();
    }

    holder.text.setText(i.textdata);

    return convertView;
}
</code></pre>

<p>Notes:</p>

<ol>
<li>The code <code>holder.text.setText</code> ensures that even the items that are not moving is refreshed like others.</li>
<li>For clarification, if <code>convertView</code> is not = null, it means the view is recycled and has been displayed in the current view. I think this is your issue.</li>
<li>I noticed the code using setTag method calls, and I skipped them because I don't see which code is referencing those tags anyway. Maybe you know better.</li>
</ol>
