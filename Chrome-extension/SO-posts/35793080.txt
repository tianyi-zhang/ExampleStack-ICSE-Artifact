<pre><code>Try this way to implement clickListener
public class CustomDialogAdapterBasic extends ArrayAdapter&lt;String&gt; implements Filterable {

    Context context;
    List&lt;String&gt; valuesComingIn = new ArrayList&lt;String&gt;();
    List&lt;String&gt; valuesFiltered = new ArrayList&lt;String&gt;();
    private ItemFilter mFilter = new ItemFilter();


    public CustomDialogAdapterBasic(Context context, int resource, List&lt;String&gt; listComingIn) {
        super(context, resource);
        this.context = context;
        this.valuesComingIn = listComingIn;
        this.valuesFiltered = listComingIn;
    }


    public void updateBrowser() {
        this.notifyDataSetChanged();
    }

    @Override
    public int getCount() {
        return valuesFiltered.size();
    }

    public String getItem(int position) throws IndexOutOfBoundsException {
        return valuesFiltered.get(position);
    }

    public long getItemId(int position) {
        return position;
    }

    @Override
    public boolean isEnabled(int position) {
        return true;
    }



    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        LayoutInflater inflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View rowView = inflater.inflate(R.layout.qustom_layout_list, parent, false);
        TextView textView = (TextView) rowView.findViewById(R.id.basic_text_view);

        textView.setTypeface(TypeFaceController.generalTextFace(context));
        textView.setText(getItem(position));
textView.setOnClickListener(new Listener(getItem(position)));
        return rowView;
    }

    public Filter getFilter() {
        return mFilter;
    }

    class Listener implements View.OnClickListener
    {
    String textData;
    Listener(String textData)
    {
    this.textData = textData;
    }

     @Override
        public void onClick(View v) {
          // Implement your click functionality here and call any method of activity like this
          // ((ActivityName)context).methodName();
        }
    }

    private class ItemFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {

            String filterString = constraint.toString().toLowerCase();
            Log.e("filterString", filterString);

            FilterResults results = new FilterResults();

            final List&lt;String&gt; list = valuesComingIn;

            int count = list.size();
            final ArrayList&lt;String&gt; nlist = new ArrayList&lt;String&gt;(count);

            String filterableString ;

            for (int i = 0; i &lt; count; i++) {
                filterableString = list.get(i);
                if (filterableString.toLowerCase().contains(filterString)) {
                    nlist.add(filterableString);
                }
            }

            results.values = nlist;
            results.count = nlist.size();

            return results;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            valuesFiltered = (ArrayList&lt;String&gt;) results.values;
            notifyDataSetChanged();
        }

    }

}
</code></pre>
