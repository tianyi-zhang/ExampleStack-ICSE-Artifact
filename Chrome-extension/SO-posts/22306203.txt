<p>Combining steps from official <a href="https://spark.apache.org/docs/latest/quick-start.html">Quick Start Guide</a> and <a href="https://spark.apache.org/docs/latest/running-on-yarn.html">Launching Spark on YARN</a> we get:</p>

<p>We’ll create a very simple Spark application, SimpleApp.java:</p>

<pre class="lang-java prettyprint-override"><code>/*** SimpleApp.java ***/
import org.apache.spark.api.java.*;
import org.apache.spark.api.java.function.Function;

public class SimpleApp {
  public static void main(String[] args) {
    String logFile = "$YOUR_SPARK_HOME/README.md"; // Should be some file on your system
    JavaSparkContext sc = new JavaSparkContext("local", "Simple App",
      "$YOUR_SPARK_HOME", new String[]{"target/simple-project-1.0.jar"});
    JavaRDD&lt;String&gt; logData = sc.textFile(logFile).cache();

    long numAs = logData.filter(new Function&lt;String, Boolean&gt;() {
      public Boolean call(String s) { return s.contains("a"); }
    }).count();

    long numBs = logData.filter(new Function&lt;String, Boolean&gt;() {
      public Boolean call(String s) { return s.contains("b"); }
    }).count();

    System.out.println("Lines with a: " + numAs + ", lines with b: " + numBs);
  }
}
</code></pre>

<p>This program just counts the number of lines containing ‘a’ and the number containing ‘b’ in a text file. Note that you’ll need to replace $YOUR_SPARK_HOME with the location where Spark is installed. As with the Scala example, we initialize a <em>SparkContext</em>, though we use the special JavaSparkContext class to get a Java-friendly one. We also create RDDs (represented by JavaRDD) and run transformations on them. Finally, we pass functions to Spark by creating classes that extend spark.api.java.function.Function. The Java programming guide describes these differences in more detail.</p>

<p>To build the program, we also write a Maven <a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html">pom.xml</a> file that lists Spark as a dependency. Note that Spark artifacts are tagged with a Scala version.</p>

<pre class="lang-xml prettyprint-override"><code>&lt;project&gt;
  &lt;groupId&gt;edu.berkeley&lt;/groupId&gt;
  &lt;artifactId&gt;simple-project&lt;/artifactId&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;name&gt;Simple Project&lt;/name&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;repositories&gt;
    &lt;repository&gt;
      &lt;id&gt;Akka repository&lt;/id&gt;
      &lt;url&gt;http://repo.akka.io/releases&lt;/url&gt;
    &lt;/repository&gt;
  &lt;/repositories&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt; &lt;!-- Spark dependency --&gt;
      &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
      &lt;artifactId&gt;spark-core_2.10&lt;/artifactId&gt;
      &lt;version&gt;0.9.0-incubating&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</code></pre>

<p>If you also wish to read data from Hadoop’s HDFS, you will also need to add a dependency on hadoop-client for your version of HDFS:</p>

<pre class="lang-xml prettyprint-override"><code>&lt;dependency&gt;
  &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;
  &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;
  &lt;version&gt;...&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p>We lay out these files according to the canonical Maven directory structure:</p>

<pre class="lang-bash prettyprint-override"><code>$ find .
./pom.xml
./src
./src/main
./src/main/java
./src/main/java/SimpleApp.java
</code></pre>

<p>Now, we can execute the application using Maven:</p>

<pre class="lang-bash prettyprint-override"><code>$ mvn package
$ mvn exec:java -Dexec.mainClass="SimpleApp"
...
Lines with a: 46, Lines with b: 23
</code></pre>

<p>And then follow the steps from <a href="https://spark.apache.org/docs/latest/running-on-yarn.html">Launching Spark on YARN</a>:</p>

<p><strong>Building a YARN-Enabled Assembly JAR</strong></p>

<p>We need a consolidated Spark JAR (which bundles all the required dependencies) to run Spark jobs on a YARN cluster. This can be built by setting the Hadoop version and SPARK_YARN environment variable, as follows:</p>

<pre class="lang-bash prettyprint-override"><code>SPARK_HADOOP_VERSION=2.0.5-alpha SPARK_YARN=true sbt/sbt assembly
</code></pre>

<p>The assembled JAR will be something like this: ./assembly/target/scala-2.10/spark-assembly_0.9.0-incubating-hadoop2.0.5.jar.</p>

<p>The build process now also supports new YARN versions (2.2.x). See below.</p>

<p><strong>Preparations</strong></p>

<ul>
<li>Building a YARN-enabled assembly (see above). </li>
<li>The assembled jar can be installed into HDFS or used locally. </li>
<li>Your application code must be packaged into a separate JAR file.</li>
</ul>

<p>If you want to test out the YARN deployment mode, you can use the current Spark examples. A spark-examples_2.10-0.9.0-incubating file can be generated by running: </p>

<pre class="lang-bash prettyprint-override"><code>sbt/sbt assembly 
</code></pre>

<p><strong>NOTE:</strong> since the documentation you’re reading is for Spark version 0.9.0-incubating, we are assuming here that you have downloaded Spark 0.9.0-incubating or checked it out of source control. If you are using a different version of Spark, the version numbers in the jar generated by the sbt package command will obviously be different.</p>

<p><strong>Configuration</strong></p>

<p>Most of the configs are the same for Spark on YARN as other deploys. See the Configuration page for more information on those. These are configs that are specific to SPARK on YARN.</p>

<p><strong>Environment variables:</strong></p>

<ul>
<li><strong>SPARK_YARN_USER_ENV</strong>, to add environment variables to the Spark processes launched on YARN. This can be a comma separated list of environment variables, e.g.</li>
</ul>

<pre class="lang-bash prettyprint-override"><code>SPARK_YARN_USER_ENV="JAVA_HOME=/jdk64,FOO=bar"
</code></pre>

<p><strong>System Properties:</strong></p>

<ul>
<li><em>spark.yarn.applicationMaster.waitTries</em>, property to set the number of times the ApplicationMaster waits for the the spark master and then also the number of tries it waits for the Spark Context to be intialized. Default is 10.</li>
<li><em>spark.yarn.submit.file.replication</em>, the HDFS replication level for the files uploaded into HDFS for the application. These include things like the spark jar, the app jar, and any distributed cache files/archives.</li>
<li><em>spark.yarn.preserve.staging.files</em>, set to true to preserve the staged files(spark jar, app jar, distributed cache files) at the end of the job rather then delete them.</li>
<li><em>spark.yarn.scheduler.heartbeat.interval-ms</em>, the interval in ms in which the Spark application master heartbeats into the YARN ResourceManager. Default is 5 seconds.</li>
<li><em>spark.yarn.max.worker.failures</em>, the maximum number of worker failures before failing the application. Default is the number of workers requested times 2 with minimum of 3.</li>
</ul>

<p><strong>Launching Spark on YARN</strong></p>

<p>Ensure that <strong>HADOOP_CONF_DIR</strong> or <strong>YARN_CONF_DIR</strong> points to the directory which contains the (client side) configuration files for the hadoop cluster. This would be used to connect to the cluster, write to the dfs and submit jobs to the resource manager.</p>

<p>There are two scheduler mode that can be used to launch spark application on YARN.</p>

<p><strong>Launch spark application by YARN Client with yarn-standalone mode.</strong></p>

<p>The command to launch the YARN Client is as follows:</p>

<pre class="lang-bash prettyprint-override"><code>SPARK_JAR=&lt;SPARK_ASSEMBLY_JAR_FILE&gt; ./bin/spark-class org.apache.spark.deploy.yarn.Client \
  --jar &lt;YOUR_APP_JAR_FILE&gt; \
  --class &lt;APP_MAIN_CLASS&gt; \
  --args &lt;APP_MAIN_ARGUMENTS&gt; \
  --num-workers &lt;NUMBER_OF_WORKER_MACHINES&gt; \
  --master-class &lt;ApplicationMaster_CLASS&gt;
  --master-memory &lt;MEMORY_FOR_MASTER&gt; \
  --worker-memory &lt;MEMORY_PER_WORKER&gt; \
  --worker-cores &lt;CORES_PER_WORKER&gt; \
  --name &lt;application_name&gt; \
  --queue &lt;queue_name&gt; \
  --addJars &lt;any_local_files_used_in_SparkContext.addJar&gt; \
  --files &lt;files_for_distributed_cache&gt; \
  --archives &lt;archives_for_distributed_cache&gt;
</code></pre>

<p>For example:</p>

<pre class="lang-bash prettyprint-override"><code># Build the Spark assembly JAR and the Spark examples JAR
$ SPARK_HADOOP_VERSION=2.0.5-alpha SPARK_YARN=true sbt/sbt assembly

# Configure logging
$ cp conf/log4j.properties.template conf/log4j.properties

# Submit Spark's ApplicationMaster to YARN's ResourceManager, and instruct Spark to run the SparkPi example
$ SPARK_JAR=./assembly/target/scala-2.10/spark-assembly-0.9.0-incubating-hadoop2.0.5-alpha.jar \
    ./bin/spark-class org.apache.spark.deploy.yarn.Client \
      --jar examples/target/scala-2.10/spark-examples-assembly-0.9.0-incubating.jar \
      --class org.apache.spark.examples.SparkPi \
      --args yarn-standalone \
      --num-workers 3 \
      --master-memory 4g \
      --worker-memory 2g \
      --worker-cores 1

# Examine the output (replace $YARN_APP_ID in the following with the "application identifier" output by the previous command)
# (Note: YARN_APP_LOGS_DIR is usually /tmp/logs or $HADOOP_HOME/logs/userlogs depending on the Hadoop version.)
$ cat $YARN_APP_LOGS_DIR/$YARN_APP_ID/container*_000001/stdout
Pi is roughly 3.13794
</code></pre>

<p>The above starts a YARN Client programs which start the default Application Master. Then SparkPi will be run as a child thread of Application Master, YARN Client will periodically polls the Application Master for status updates and displays them in the console. The client will exit once your application has finished running.</p>

<p>With this mode, your application is actually run on the remote machine where the Application Master is run upon. Thus application that involve local interaction will not work well, e.g. spark-shell.</p>
