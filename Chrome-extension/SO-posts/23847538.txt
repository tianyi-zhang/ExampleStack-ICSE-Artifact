<p><em>Mastering Regular Expressions (Third Edition)</em> gives a pattern that will validate an IPv4 address, having four dot-separated integers in the range 0-255:</p>

<pre><code>^(?:[01]?\d\d?|2[0-4]\d|25[0-5])\.
(?:[01]?\d\d?|2[0-4]\d|25[0-5])\.
(?:[01]?\d\d?|2[0-4]\d|25[0-5])\.
(?:[01]?\d\d?|2[0-4]\d|25[0-5])$
</code></pre>

<p>Modifying that to find (rather than validate) an IP, to exclude things that look like IPs turning up within longer strings of dotted digits, and escape backslashes for Java string syntax, we can render it in a Java method as:</p>

<pre><code>public static String extractIP(String s) {
    java.util.regex.Matcher m = java.util.regex.Pattern.compile(
        "(?&lt;!\\d|\\d\\.)" +
        "(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
        "(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
        "(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])\\." +
        "(?:[01]?\\d\\d?|2[0-4]\\d|25[0-5])" +
        "(?!\\d|\\.\\d)").matcher(s);
    return m.find() ? m.group() : null;
}
</code></pre>

<p>That will return the IP if one is found in the string, or <code>null</code> otherwise.</p>

<p>To check simply if it <em>contains</em> an IP, do <code>if (extractIP(str) != null) ...</code>.</p>
