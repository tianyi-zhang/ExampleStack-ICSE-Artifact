<p>this actually works as i use it in my application. My nodes are all defaultmutabletreenodes with no changes.
The node to be sorted is passed in and changed.
It makes an arraylist of the child nodes. Then two arraylists of the text of the nodes which one gets sorted. The other is used to find the nodes in the arralylist.
The nodes are all moved off of the initial node then added back in from the arraylist.
Works a charm, may be overkill to use an arraylist but I like them.</p>

<pre><code>private void sortchildren(DefaultMutableTreeNode node) {
        ArrayList children = Collections.list(node.children());
        // for getting original location
        ArrayList&lt;String&gt; orgCnames = new ArrayList&lt;String&gt;();
        // new location
        ArrayList&lt;String&gt; cNames = new ArrayList&lt;String&gt;();
        //move the child to here so we can move them back
        DefaultMutableTreeNode temParent = new DefaultMutableTreeNode();
        for(Object child:children) {
            DefaultMutableTreeNode ch = (DefaultMutableTreeNode)child;
            temParent.insert(ch,0);
            cNames.add(ch.toString().toUpperCase());
            orgCnames.add(ch.toString().toUpperCase());
        }
        Collections.sort(cNames);
        for(String name:cNames) {
            // find the original location to get from children arrayList
            int indx = orgCnames.indexOf(name);
            node.insert((DefaultMutableTreeNode)children.get(indx),node.getChildCount());
        }
    }
</code></pre>
