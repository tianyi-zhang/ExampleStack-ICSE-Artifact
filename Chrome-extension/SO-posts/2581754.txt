<p>Here's a generic-friendly version you're free to use:</p>

<pre><code>import java.util.*;

public class MapUtil
{
    public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; 
        sortByValue( Map&lt;K, V&gt; map )
    {
        List&lt;Map.Entry&lt;K, V&gt;&gt; list =
            new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;( map.entrySet() );
        Collections.sort( list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()
        {
            public int compare( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )
            {
                return (o1.getValue()).compareTo( o2.getValue() );
            }
        } );

        Map&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;();
        for (Map.Entry&lt;K, V&gt; entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }
}
</code></pre>

<p>And an associated JUnit4 test so you don't have to take my word for it:</p>

<pre><code>import java.util.*;
import org.junit.*;

public class MapUtilTest
{
    @Test
    public void testSortByValue()
    {
        Random random = new Random(System.currentTimeMillis());
        Map&lt;String, Integer&gt; testMap = new HashMap&lt;String, Integer&gt;(1000);
        for(int i = 0 ; i &lt; 1000 ; ++i) {
            testMap.put( "SomeString" + random.nextInt(), random.nextInt());
        }

        testMap = MapUtil.sortByValue( testMap );
        Assert.assertEquals( 1000, testMap.size() );

        Integer previous = null;
        for(Map.Entry&lt;String, Integer&gt; entry : testMap.entrySet()) {
            Assert.assertNotNull( entry.getValue() );
            if (previous != null) {
                Assert.assertTrue( entry.getValue() &gt;= previous );
            }
            previous = entry.getValue();
        }
    }

}
</code></pre>

<p>Java 7 Version</p>

<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; 
    sortByValue( Map&lt;K, V&gt; map )
{
    List&lt;Map.Entry&lt;K, V&gt;&gt; list =
        new LinkedList&lt;&gt;( map.entrySet() );
    Collections.sort( list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()
    {
        @Override
        public int compare( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )
        {
            return ( o1.getValue() ).compareTo( o2.getValue() );
        }
    } );

    Map&lt;K, V&gt; result = new LinkedHashMap&lt;&gt;();
    for (Map.Entry&lt;K, V&gt; entry : list)
    {
        result.put( entry.getKey(), entry.getValue() );
    }
    return result;
}
</code></pre>

<p>Java 8 Version. This will sort according to the value in ascending order; for descending order, it is just possible to uncomment the call to <code>Collections.reverseOrder()</code>.</p>

<pre><code>public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt; sortByValue(Map&lt;K, V&gt; map) {
    return map.entrySet()
              .stream()
              .sorted(Map.Entry.comparingByValue(/*Collections.reverseOrder()*/))
              .collect(Collectors.toMap(
                Map.Entry::getKey, 
                Map.Entry::getValue, 
                (e1, e2) -&gt; e1, 
                LinkedHashMap::new
              ));
}
</code></pre>
