<p>10 month later, I'm giving the work around I used (10 month ago), who knows, perhaps it will helps someone :).</p>

<p>In order to handle clicks/touch on map routes, one method can be to estimate if the clicked point is located near a displayed route.</p>

<p>Using the OnTouchEvent method, you should calculate if the clicked point is near a segment (a route part).</p>

<p>A route can be represented as a list of segments.</p>

<p>The following method let you calculate the distance between a point and a segment (from Java java.awt.geom.Line2D) :</p>

<pre><code>/**
 * Get the closest distance between a point and a segment
 * 
 * @param x1 , x coordinate of the 1st segment point
 * @param y1 , y coordinate of the 1st segment point
 * @param x2 , x coordinate of the 2st segment point
 * @param y2 , y coordinate of the 2st segment point
 * @param x , x coordinate of the point from which distance will be calculated
 * @param y , y coordinate of the point from which distance will be calculated
 * 
 * @return the distance
 * 
 */
public static float ptSegDistSq(float x1, float y1, float x2, float y2, float px, float py){
    // Adjust vectors relative to x1,y1
    // x2,y2 becomes relative vector from x1,y1 to end of segment
    x2 -= x1;
    y2 -= y1;
    // px,py becomes relative vector from x1,y1 to test point
    px -= x1;
    py -= y1;
    float dotprod = px * x2 + py * y2;
    float projlenSq;
    if (dotprod &lt;= 0.0) {
        // px,py is on the side of x1,y1 away from x2,y2
        // distance to segment is length of px,py vector
        // "length of its (clipped) projection" is now 0.0
        projlenSq = (float) 0.0;
    } else {
        // switch to backwards vectors relative to x2,y2
        // x2,y2 are already the negative of x1,y1=&gt;x2,y2
        // to get px,py to be the negative of px,py=&gt;x2,y2
        // the dot product of two negated vectors is the same
        // as the dot product of the two normal vectors
        px = x2 - px;
        py = y2 - py;
        dotprod = px * x2 + py * y2;
        if (dotprod &lt;= 0.0) {
            // px,py is on the side of x2,y2 away from x1,y1
            // distance to segment is length of (backwards) px,py vector
            // "length of its (clipped) projection" is now 0.0
            projlenSq = (float) 0.0;
        } else {
            // px,py is between x1,y1 and x2,y2
            // dotprod is the length of the px,py vector
            // projected on the x2,y2=&gt;x1,y1 vector times the
            // length of the x2,y2=&gt;x1,y1 vector
            projlenSq = dotprod * dotprod / (x2 * x2 + y2 * y2);
        }
    }
    // Distance to line is now the length of the relative point
    // vector minus the length of its projection onto the line
    // (which is zero if the projection falls outside the range
    //  of the line segment).
    float lenSq = px * px + py * py - projlenSq;
    if (lenSq &lt; 0) {
        lenSq = 0;
    }
    return lenSq;
}
</code></pre>

<p>Having this distance, you can establish fixed rules to estimate if the point is near a route, taking in count the map zoom level (at each zoom level correspond a maximum distance tolerance).</p>
