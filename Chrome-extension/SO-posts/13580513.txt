<ol>
<li><p>You should use pattern ViewHolder:</p>

<pre><code>public class NewHolder {
    public ImageView ivIcon;
    public TextView tvTitle;
    public int position;
}
</code></pre></li>
<li><pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    NewHolder holder = null;

    UBRNew item = data.get(position);

    if (convertView == null) {
        holder = new NewHolder();
        convertView = inflater.inflate(R.layout.item_new, null);
        holder.tvTitle = (TextView) convertView.findViewById(R.id.tvTitle);
        holder.ivIcon = (ImageView) convertView.findViewById(R.id.ivIcon);
        convertView.setTag(holder);
    } else {
        holder = (NewHolder) convertView.getTag();
    }

holder.position = position;

holder.tvTitle.setText(Tools.replaceCharactersInEllipsis(item.getTitle()));
holder.ivIcon.setImageBitmap(((item.getIcon() == null) ? defaultIconForNew : item.getIcon()));

if ((!isFling) &amp;&amp; (!item.isDownloadedIcon())) {
    new LazyLoadImage(context, 
                      this, 
                      item, 
                      holder, 
                      position, 
                      64,
                      64).execute();
}

    return convertView;
}
</code></pre></li>
</ol>

<p>3.</p>

<p>public class LazyLoadImage extends AsyncTask {</p>

<pre><code>private final String TAG = "LazyLoadThumbnail";

private NewHolder holder = null;
private UBRNew ubrNew = null;
private int position = 0;
private AdapterUbrNews adapter = null;
private int widthIcon = 0;
private int heightIcon = 0;
private DBNews db = null;
private Context context = null;

public LazyLoadImage(Context context,
                     AdapterUbrNews adapter, 
                     UBRNew ubrNew, 
                     NewHolder holder, 
                     int position, 
                     int widthIcon, 
                     int heightIcon) {
    this.adapter = adapter;
    this.holder = holder;
    this.position = position;
    this.ubrNew = ubrNew;
    this.widthIcon = widthIcon;
    this.heightIcon = heightIcon;

    this.ubrNew.setDownloadedIcon(true);

    db = DBNews.getInstance(context);

    this.context = context;
}

@Override
protected Bitmap doInBackground(Void... voids) {
    Bitmap result = null;

    try {
        Bitmap temp = download(ubrNew.getUrlIcon()); 

        if (temp != null) {
            result = Bitmap.createScaledBitmap(temp, widthIcon, heightIcon, true);
        }
    } catch (MalformedURLException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

     return result;
}

@Override
protected void onPostExecute(Bitmap bitmap) {
    if (bitmap != null) {
        ubrNew.setIcon(bitmap);

        if (position == holder.position) {
            holder.ivIcon.setImageBitmap(bitmap);
        } else {
            adapter.notifyDataSetChanged();
        }
    } else {
        ubrNew.setDownloadedIcon(false);
    }
}

private Bitmap download(String urlString) throws MalformedURLException, IOException {
    if ((urlString == null) || (urlString.equals(""))) {
        return null;
    }

    DefaultHttpClient client = new DefaultHttpClient();
    HttpGet getRequest = new HttpGet(urlString);

    try {
        HttpResponse response = client.execute(getRequest);
        final int statusCode = response.getStatusLine().getStatusCode();
        if (statusCode != HttpStatus.SC_OK) {  
            return null;
        }

        final HttpEntity entity = response.getEntity();
        if (entity != null) {
            InputStream inputStream = null;
            try {
                inputStream = entity.getContent(); 
                return BitmapFactory.decodeStream(inputStream);
            } finally {
                if (inputStream != null) {
                    inputStream.close();  
                }
            }
        }
    } catch (Exception e) {}

    return null;
}
</code></pre>

<p>}</p>

<p>All feature in LazyLoadImage in snippet:</p>

<pre><code>if (position == holder.position) {
            holder.ivIcon.setImageBitmap(bitmap);
        } else {
            adapter.notifyDataSetChanged();
        }
</code></pre>
