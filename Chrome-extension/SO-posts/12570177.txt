<p>Thank you Jim Buck.
Just as yousaid. On some devices jpg must be interpreted wrongly and falls into "no alpha if" yet being an RGBA format .
This if statment is unnecessary and it's better to use basic texImage2D method: </p>

<pre><code>        gl.glBindTexture(GL10.GL_TEXTURE_2D, textures[i]);
        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MAG_FILTER, GL10.GL_NEAREST);
        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_MIN_FILTER, GL10.GL_NEAREST);
        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_S, GL10.GL_REPEAT);
        gl.glTexParameterf(GL10.GL_TEXTURE_2D, GL10.GL_TEXTURE_WRAP_T, GL10.GL_REPEAT);
        GLUtils.texImage2D(GL10.GL_TEXTURE_2D, 0, bitmaps[i], 0);
</code></pre>

<p>On my previous ogl configurations though, it happened that texture's colors where displayed wrongly. So below is my configuration that works good on all of my devices.</p>

<pre><code>    private void configureGL(GL10 gl) {
        gl.glDisable(GL10.GL_DITHER);
        gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_FASTEST);
        gl.glClearColor(1, 0, 0, 1);
        gl.glEnable(GL10.GL_CULL_FACE);
        gl.glShadeModel(GL10.GL_SMOOTH);
        gl.glEnable(GL10.GL_DEPTH_TEST);
        gl.glViewport(0, 0, screenWidth, screenHeight);
        gl.glMatrixMode(GL10.GL_PROJECTION);
        gl.glLoadIdentity();
        GLU.gluOrtho2D(gl, 0.0f, BASE_SCREEN_WIDTH, 0.0f, BASE_SCREEN_HEIGHT);
        gl.glEnable(GL10.GL_TEXTURE_2D);
        gl.glShadeModel(GL10.GL_FLAT);
        gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
        gl.glEnable(GL10.GL_ALPHA_TEST);
        //that's a temporal hack below for removing white borders around textures (not a good practice :P)
        gl.glAlphaFunc(GL10.GL_GREATER, 0.4f); 
    }
</code></pre>

<p>For ppl with similar problems:</p>

<p>Before, I was using my own drawing thread and building configuration from scratch. This caused weird colors on some devices and made me use this "if aplha" statement. Now, I used GLSurfaceView with implemented Renderer (sample taken from " Android Wireless Application Developement, Second Edition") and basic texImage2D works like a charm.</p>
