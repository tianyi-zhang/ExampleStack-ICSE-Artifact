<p>This is already handled for you by the framework</p>

<p>Let's take a small example (very bad code):
    import static org.junit.Assert.*;</p>

<pre><code>import org.junit.Test;


public class TestExpect {

@Test(expected=MyException.class)
public void test() throws MyException {
    new Foo().foo();
}

}
</code></pre>

<p>With 2 exception classes MyException and MyExtendedException inheriting from the previous one and a simple Foo class like this one:</p>

<pre><code>public class Foo {

public void foo() throws MyException{
    throw new MyExtendedException();
}
}
</code></pre>

<p>Launching the test using the Eclipse runner prints a green bar because the test raises one instance of Myexception (is a relationship  in POO)</p>

<p>If you prefer to read source code this is an exxcerpt from the Junit source code (ExpectException.java):</p>

<pre><code>   @Override
    public void evaluate() throws Exception {
        boolean complete = false;
        try {
            fNext.evaluate();
            complete = true;
        } catch (AssumptionViolatedException e) {
            throw e;
        } catch (Throwable e) {
            if (!fExpected.isAssignableFrom(e.getClass())) {
                String message= "Unexpected exception, expected&lt;"
                            + fExpected.getName() + "&gt; but was&lt;"
                            + e.getClass().getName() + "&gt;";
                throw new Exception(message, e);
            }
        }
        if (complete)
            throw new AssertionError("Expected exception: "
                    + fExpected.getName());
    }
</code></pre>
