<p>Is your question up to date or did you solved your problem already?</p>

<p>Edit:</p>

<p>Here a little Basic info how to implement the GoogleCalendar:</p>

<p>1.Create a Class to handle a calendar :</p>

<pre><code>public class MyCalendar
{
  private static final String   AUTH_TOKEN_TYPE = "cl";
  public static final String KEY = "YOUR_API_KEY";  //You can find below Simple API Access at GoogleApiConsole
  final HttpTransport   transport = AndroidHttp.newCompatibleTransport();
  final JsonFactory factory = new GsonFactory();
  GoogleAccountManager accountManager;
  String name;
  String token;
  public com.google.api.services.calendar.Calendar mycalendar;

  private HttpRequestInitializer initializer = new HttpRequestInitializer() 
  {
     public void initialize(HttpRequest request) throws IOException
     {           
        request.getHeaders().setAuthorization(GoogleHeaders.getGoogleLoginValue(authToken));
     }
  };

  public MyCalendar()
  {
  }
}
</code></pre>

<ol>
<li><p>Create an Calendar object (I do this into MyCalendar's constructor</p>

<pre><code>mycalendar = com.google.api.services.calendar.Calendar.builder(transport,jsonFactory)
              .setApplicationName("CHOOSE_A_APPNAME")                      
              .setHttpRequestInitializer(initializer)
              .setJsonHttpRequestInitializer(new GoogleKeyInitializer(KEY))
              .build();
accountManager = new GoogleAccountManager(TimetableApplication.getInstance().getActivity());
findGoogleAcc();
</code></pre></li>
</ol>

<p>The initializer's initialize method [;-)] will call later, if u want to acces your calendar.</p>

<p>2.Search for GoogleAccount refered to user's phone</p>

<pre><code>void findGoogleAcc()
{
    Account account = accountManager.getAccountByName(name);
    if(account == null)
    {
        //Handle wrong name, or if user connect more than one accounts to phone
    }
    if(token != null)
    {
        //you already got your token for user's account and these method is not necessary
    }
    accountManager.getAccountManager().getAuthToken(account, AUTH_TOKEN_TYPE, true, new AccountManagerCallback&lt;Bundle&gt;() {

        public void run(AccountManagerFuture&lt;Bundle&gt; future)
        {
            try
            {
                Bundle bundle = future.getResult();
                if(bundle.containsKey(AccountManager.KEY_INTENT))
                {
                    // Allow app to connect to googleaccount
                    Intent intent = bundle.getParcelable(AccountManager.KEY_INTENT);
                    intent.setFlags(intent.getFlags() &amp; ~ Intent.FLAG_ACTIVITY_NEW_TASK);
                    activity.startActivityForResult(intent, 0);
                }
                else
                    if(bundle.containsKey(AccountManager.KEY_AUTHTOKEN))
                    {
                        this.authToken = authToken;
                        gotSmthFromCalendar();
                    }
            }
            catch(Exception e)
            {
            }
        }
    }, null);
}
</code></pre>

<p>3.Use your calendar on Method :</p>

<pre><code>     void gotSmthFromCalendar()
     {
         //Here u can do whatever u want.
     }
</code></pre>

<p>I think on gotSmthFromCalendar() you should use an AsyncTask to requezst data. for example you can do :</p>

<pre><code>   List&lt;CalendarListEntry&gt; calendarList = mycalendar.calendarList().list().execute().getItems();
   for(CalendarListEntry calendarEntry : calendarList)
   {
        String summary = calendarEntry.getSummary();
        String id = calendarEntry.getId();
        Log.v("Calendar","Found a calendar with summary : " + summary + " an id: " + id);
   }
</code></pre>

<p>Hope these basics can help you to use v3. If u need additional help ask me everytime!!</p>

<p>Kooki</p>
