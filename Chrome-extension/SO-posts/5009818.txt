<p>You can loop through the string and build the replacement string by examining each character. Something like this:</p>

<pre><code>String testString = "Hello World.";
StringBuilder sb = new StringBuilder();
for (int i=0, length=testString.length(); i&lt;length; i++) {
    char ch = testString.charAt(i);
    switch (ch) {
          case 'e':
              sb.append('o');
              break;
          case 'o':
              sb.append('e');
              break;
          default:
              sb.append(ch);
    }
}
String replacedString = sb.toString();
</code></pre>

<p>If you want to swap capital letters too you can do this:</p>

<pre><code>String testString = "Hello World.";
StringBuilder sb = new StringBuilder();
for (int i=0, length=testString.length(); i&lt;length; i++) {
    char ch = testString.charAt(i);
    switch (ch) {
          case 'e':
              sb.append('o');
              break;
          case 'E':
              sb.append('O');
              break;
          case 'o':
              sb.append('e');
              break;
          case 'O':
              sb.append('E');
              break;
          default:
              sb.append(ch);
    }
}
String replacedString = sb.toString();
</code></pre>

<p>But the switch statement is starting to get a bit long and messy. If you needed to add much more to it, it might get out of hand. A little refactoring might lead to this:</p>

<pre><code>String testString = "Hello World.";

Map&lt;Character,Character&gt; replacementMap = new HashMap&lt;Character,Character&gt;();
replacementMap.put('e', 'o');
replacementMap.put('o', 'e');
replacementMap.put('E', 'O');
replacementMap.put('O', 'E');

StringBuilder sb = new StringBuilder();
for (int i=0, length=testString.length(); i&lt;length; i++) {
    char ch = testString.charAt(i);
    Character replacement = replacementMap.get(ch);
    sb.append(replacement != null ? replacement : ch);
}
String replacedString = sb.toString();
</code></pre>
