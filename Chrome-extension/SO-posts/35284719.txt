<p>Unfortunately, onClick() &amp; onTouch() cannot behave normally when used together.
I use a work-around to detect a click using onTouch.
I am not sure how it will behave with gesture detector present.
I will share my code.. It works fine without gesture detector. Let me know if it's not working.</p>

<p>Initializing your listeners :</p>

<pre><code>GestureDetector gdt;
View.OnTouchListener touchListener;
private void initializeListener()
{
    gdt =  new GestureDetector(mContext,new GestureListener());
    touchListener = new View.OnTouchListener() {
        float startX;
        float startY;
        float CLICK_ACTION_THRESHOLD = 5;
        //Uses the touched coordinates recorded through MOTION_DOWN &amp; MOTION_UP to detect whether the action performed was a click
        private boolean isAClick(float startX, float endX, float startY, float endY) {
            if(isLoadingView)
                return false;

            float differenceX = Math.abs(startX - endX);
            float differenceY = Math.abs(startY - endY);
            return !(differenceX &gt; CLICK_ACTION_THRESHOLD || differenceY &gt; CLICK_ACTION_THRESHOLD);
        }
        @Override
        public boolean onTouch(View v, MotionEvent event) {
            switch (event.getAction()) {
                case MotionEvent.ACTION_DOWN:
                    startX = event.getX();
                    startY = event.getY();
                    break;
                case MotionEvent.ACTION_UP: {
                    float endX = event.getX();
                    float endY = event.getY();

                    if (isAClick(startX, endX, startY, endY))
                    {
                        switch (v.getId())
                        {
                            case R.id.view_id:
                            break

                        }
                    }
                }
                break;
            }
            gdt.onTouchEvent(event);
            return true;
        }
    };
}
</code></pre>

<p>Add Listener to views :</p>

<pre><code>private void addTouchListenerToView(View v) {
    v.setOnTouchListener(touchListener);
}
</code></pre>

<p>Sample Gesture Listener Class: </p>

<pre><code>private class GestureListener extends GestureDetector.SimpleOnGestureListener {
    private final int SWIPE_MIN_DISTANCE = 153;
    private final int SWIPE_THRESHOLD_VELOCITY = 20;

    @Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
        if(e1.getX() - e2.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY)
        {
            return false; // Right to left
        }
        else if (e2.getX() - e1.getX() &gt; SWIPE_MIN_DISTANCE ) //&amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY)
        {
            return false; // Left to right
        }

        if(e1.getY() - e2.getY() &gt; SWIPE_MIN_DISTANCE)// &amp;&amp; Math.abs(velocityY) &gt; SWIPE_THRESHOLD_VELOCITY)
        {
            return false; // Bottom to top
        }
        else if (e2.getY() - e1.getY() &gt; SWIPE_MIN_DISTANCE)// &amp;&amp; Math.abs(velocityY) &gt; SWIPE_THRESHOLD_VELOCITY)
        {
            return false; // Top to bottom
        }

        return true;
    }

    @Override
    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
                            float distanceY) {
        if(e1.getX() - e2.getX() &gt; SWIPE_MIN_DISTANCE*10 ) //&amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY)
        {
            return false; // Right to left
        }
        else if (e2.getX() - e1.getX() &gt; SWIPE_MIN_DISTANCE*10 ) //&amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY)
        {
            return false; // Left to right
        }
        return true;
    }
}
</code></pre>
