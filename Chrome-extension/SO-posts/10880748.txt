<p>In <code>isPrime</code> you are only testing division by 2:</p>

<pre><code>private static boolean isPrime(long n) {
    boolean result = false;

    for(long i=1; i&lt;n/2; i++) {
        if(n%2 == 0) {
            result = false;
            break;
        }
        else result = true;
    }
    return result;

}
</code></pre>

<p>it should be division by every <code>i</code> and starting from 2:</p>

<pre><code>for(long i=2; i&lt;n/2; i++) {
    if(n%i == 0) {
      ...
</code></pre>

<p>Practically in your current version an odd number <code>n</code> will keep dividing by 2 up to <code>n/2</code> instead of stopping much sooner. Consider n = 21. You are dividing by 2 from 1 to 10, instead of dividing by 3 at the 3rd step and exiting.</p>

<p>It not only gives incorrect results, but also takes much longer than needed to reach a <code>return</code> statement.</p>

<p><strong>Edit</strong>: For faster results check out this sieve of Erathostenes method:</p>

<pre><code>public static long sumOfPrimes(int n) {

    long sum = 0;

    boolean[] sieve = new boolean[n];
    for(int i = 2; i &lt; Math.sqrt(n); i++) {
        if(!sieve[i]) {
            for(int j = i * i; j &lt; n; j += i) {
                sieve[j] = true;
            }
        }
    }

    for(int i = 2; i &lt; n; i++) {
        if(!sieve[i]) {             
            sum += i;
        }
    }

    return sum;
}
</code></pre>

<p><strong>Edit #2</strong>: Found some bugs with your new version. Here's the corrected one:</p>

<pre><code>private static boolean isPrime(long n) {
    boolean result = false;

    if(n == 2 || n == 3) return true;

    for (long i = 2; i &lt;= (long) Math.sqrt(n); i++) {
        if (n % i == 0) {
            result = false;
            break;
        } else
            result = true;
    }

    System.out.println(n + " " + result);
    return result;
}
</code></pre>
