<p>Android app side:</p>

<pre><code>private ArrayList&lt;String&gt; receiveData(String file, ArrayList&lt;NameValuePair&gt; data)
{
    InputStream is = null;
    ArrayList&lt;String&gt; output = new ArrayList&lt;String&gt;();
    String line = null;

    //Connect and obtain data via HTTP.
    try
    {
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost("http://www.blah.com/"+file);
        httppost.setEntity(new UrlEncodedFormEntity(data));
        HttpResponse response = httpclient.execute(httppost);
        HttpEntity entity = response.getEntity();
        is = entity.getContent();

    }
    catch(Exception e)
    {
        Log.e("log_tag", "Error in http connection "+e.toString());
    }

    //Parse data into ArrayList and return.
    try
    {
        BufferedReader reader = 
            new BufferedReader(new InputStreamReader(is,"iso-8859-1"));

        while ((line = reader.readLine()) != null) 
        {
            //Parse data into tokens and removing unimportant tokens.
            StringTokenizer st = new StringTokenizer(line, delims, false);

            while(st.hasMoreTokens())
            {
                String token = st.nextToken();
                output.add(token);
            }
        }

        is.close();
        //Log output of data in LogCat.
        Log.d("DATA","DATA:"+output);

    }
    catch(Exception e)
    {
        Log.e("log_tag", "Error converting result "+e.toString());
    }
    return output;
}

/**
 * Gets all  data from GetAllData.php
 * @return output - ArrayList containing  data.
 */
public ArrayList&lt;String&gt; getAllData(String row)
{
    fileName = "GetAllData.php";

    //Add arguments to arrayList&lt;NameValuePairs&gt; so we can encode the data and send it on.
    ArrayList&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;(1);
    nameValuePairs.add(new BasicNameValuePair("row", row));

    ArrayList&lt;String&gt; output = this.receiveData(fileName, nameValuePairs);
    return output;
}
</code></pre>

<p>Server side:</p>

<p>so then the GetAllData.php file on server is:</p>

<pre><code>&lt;?php
/*
 * What this file does is it:
 * 1) Creates connection to database.
 * 2) Gets data from database.
 * 3) Encodes data to JSON. So this data can then be used by Android Application.
 * 4) Close database connection.
 */
 require_once $_SERVER['DOCUMENT_ROOT'].'/Clarity/Connection.php';
 require_once $_SERVER['DOCUMENT_ROOT'].'/Clarity/ReceiveAPI.php';

 $server = new Connection();
 $receive = new ReceiveAPI();

 //Retrieve information.
 $row = $_POST['row'];

//Connect to database.
$server-&gt;connectDB();
$output = $receive-&gt;getAllData($row); //basically method to query database.
print(json_encode($output)); //output is result of the query given back to app.

//Disconnect from database.
$server-&gt;disconnectDB();
?&gt;
</code></pre>

<p>This is an example I used recently. Just to note in the php file. I import Connection.php
this just deals with the connection to the database. So just replace that with your code for connecting to MYSQL db. Also I imported SendAPI.php (which you can just ignore)This was just my class for sending data. Basically it contained some of the querys I wanted to use. Such as sendAccelerationData(). Basically class was similar to that of stored procedures.</p>

<p>How I connected to database was in my Connection.php class.</p>

<pre><code>//Connect to a database.
public function connectDB()
{
    //Connect to SQL server.
    $this-&gt;connection = mysql_connect($this-&gt;hostName,$this-&gt;user,$this-&gt;password);

    if (!$this-&gt;connection) 
    {
        die('Could not connect: ' . mysql_error());
    }
    //Print("Connected to MySQL. &lt;/br&gt;");

    //Select Database to query.
    $db_selected = mysql_select_db($this-&gt;database);
    if (!$db_selected) 
    {
        die('Could not select database' . mysql_error());
    }
    //Print("Database \"$this-&gt;database\" selected. &lt;/br&gt;");
}

//Disconnect from database.
public function disconnectDB() 
{
    mysql_close($this-&gt;connection);
}
}
</code></pre>

<p>Note in error messages I printed out schema out db such as db name/table name. This was just troubleshooting. I advice against this. YOU DO NOT want to display that information to the user.</p>
