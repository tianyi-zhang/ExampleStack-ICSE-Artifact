<pre><code> public class sendMesgTask extends AsyncTask&lt;Object, Void, String&gt; {

    String msg = "";

    @Override
    protected void onPreExecute() {
        super.onPreExecute();

    }

    @Override
    protected Void doInBackground(Object... params) {
        try {
            String result = sendMsg(params[0]);
            msg = getResult(result);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return null;
    }

    @Override
    protected void onPostExecute(Void result) {
        if (msg.equals("1")) {

        }
    }

    public String sendMsg(String message) throws IOException, JSONException {

        try {

            String sendmsgurl = "http://api.lociiapp.com/api/message/sendmessage?member_id="
                    + 452
                    + "&amp;to_id="
                    + 452
                    + "&amp;message="
                    + message
                    + "&amp;Notificationtype="
                    + "3"
                    + "&amp;notificationId="
                    + (int) (Math.random() * 100000000)
                    + "&amp;notify_status="
                    + "false";
            Log.e("Valueeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee", sendmsgurl);

            System.out.println("Valueeeeeeeeeeeeeeeeeee" + sendmsgurl);
            URL url = new URL(sendmsgurl);
            URLConnection urlcon = url.openConnection();
            jsonResp = convertToString(urlcon.getInputStream());

        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return jsonResp;
    }

    public String convertToString(InputStream is) {
        if (is != null) {
            Writer writer = new StringWriter();
            char[] buffer = new char[1024];
            try {
                Reader reader = new BufferedReader(new InputStreamReader(
                        is, "UTF-8"));
                int n;
                while ((n = reader.read(buffer)) != -1) {
                    writer.write(buffer, 0, n);
                }
            } catch (UnsupportedEncodingException e) {
                // TODO: handle exception
            } catch (IOException e) {

            } finally {
                try {
                    is.close();
                } catch (IOException e) {

                }
            }
            return writer.toString();
        } else {
            return "";
        }
    }

    private String getResult(String response) {

        String test = "";
        try {
            JSONObject json = (JSONObject) new JSONTokener(response)
                    .nextValue();
            test = json.getString("responseCode");
        } catch (JSONException e) {

        }
        return test;
    }
</code></pre>
