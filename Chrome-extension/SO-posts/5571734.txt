<p>You can use this method to decode the images. It may make them much lighter. Remember that images become bitmaps when they are shown increasing their memory consuption.</p>

<pre><code>public static Bitmap decode(byte[] imageByteArray, int width, int height) {
    // Decode image size
    BitmapFactory.Options o = new BitmapFactory.Options();
    o.inJustDecodeBounds = true;
    BitmapFactory.decodeByteArray(imageByteArray, 0, imageByteArray.length,
            o);

    // Find the correct scale value. It should be the power of 2.
    int width_tmp = o.outWidth, height_tmp = o.outHeight;
    int scale = 1;
    while (true) {
        if (width_tmp / 2 &lt; width || height_tmp / 2 &lt; height)
            break;
        width_tmp /= 2;
        height_tmp /= 2;
        scale *= 2;
    }

    // Decode with inSampleSize
    BitmapFactory.Options o2 = new BitmapFactory.Options();
    o2.inSampleSize = scale;
    o2.inTempStorage = new byte[Math.max(16 * 1024, width * height * 4)];
    return BitmapFactory.decodeByteArray(imageByteArray, 0,
            imageByteArray.length, o2);

    // return BitmapFactory.decodeByteArray(imageByteArray, 0,
    // imageByteArray.length);
}
</code></pre>

<p>where</p>

<p>width  - MAX width in pixels that the imageView might have.
height - MAX height in pixels that the imageView might have.</p>

<p>That way, the bitmap will become lighter and the app might consume less memory.</p>

<p>(NOTE: I copied this method and modified it a little bit, I don't remember the original question so i cant put the url)</p>

<p>I use to strore the images in byte arrays and I only decode them just before showing them.</p>

<p>Now, like James L says, its best to keep the images in the fileSystem and only bring to memory when needed, but if you an't do that (my case). you can download images with:</p>

<pre><code>public static byte[] getBytes(InputStream is) throws IOException {

    int len;
    int size = 1024;
    byte[] buf;

    if (is instanceof ByteArrayInputStream) {
        size = is.available();
        buf = new byte[size];
        len = is.read(buf, 0, size);
    } else {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        buf = new byte[size];
        while ((len = is.read(buf, 0, size)) != -1)
            bos.write(buf, 0, len);
        buf = bos.toByteArray();
    }
    return buf;
}

public static byte[] downloadFileByteArray(String fileUrl)
            throws IOException, MalformedURLException {

    URL myFileUrl = null;

    myFileUrl = new URL(fileUrl);

    HttpURLConnection conn = (HttpURLConnection) myFileUrl.openConnection();
    conn.setDoInput(true);
    conn.connect();
    InputStream is = conn.getInputStream();

    return getBytes(is);
}
</code></pre>

<p>If you allready have the images in memory you will be able to turn them into byte arrays by loking at the methods I present.</p>

<p>Other than that (and calling System.gc()) there is not much you can do (that I know of). Maybe dleting the BMPs in the onPause() and onDestroy() and recostructing them in the onResume() if necesary.</p>
