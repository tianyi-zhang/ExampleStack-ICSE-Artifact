<p>Michael Cheng is right,because volley had start the RequestQueue when we call newRequestQueue as below:</p>

<pre><code>public static RequestQueue newRequestQueue(Context context, HttpStack stack) {
    File cacheDir = new File(context.getCacheDir(), DEFAULT_CACHE_DIR);

    String userAgent = "volley/0";
    try {
        String packageName = context.getPackageName();
        PackageInfo info = context.getPackageManager().getPackageInfo(packageName, 0);
        userAgent = packageName + "/" + info.versionCode;
    } catch (NameNotFoundException e) {
    }

    if (stack == null) {
        if (Build.VERSION.SDK_INT &gt;= 9) {
            stack = new HurlStack();
        } else {
            // Prior to Gingerbread, HttpUrlConnection was unreliable.
            // See: http://android-developers.blogspot.com/2011/09/androids-http-clients.html
            stack = new HttpClientStack(AndroidHttpClient.newInstance(userAgent));
        }
    }

    Network network = new BasicNetwork(stack);

    RequestQueue queue = new RequestQueue(new DiskBasedCache(cacheDir), network);
    queue.start();

    return queue;
}
</code></pre>

<p>and when we call start, volley will call stop to “make sure any currently running dispatchers are stopped”?in stop method volley does this below:</p>

<pre><code>public void stop() {
    if (mCacheDispatcher != null) {
        mCacheDispatcher.quit();
    }
    for (int i = 0; i &lt; mDispatchers.length; i++) {
        if (mDispatchers[i] != null) {
            mDispatchers[i].quit();
        }
    }
}
</code></pre>

<p>and the quit method does this below:</p>

<pre><code> public void quit() {
    mQuit = true;
    interrupt();
}
</code></pre>

<p>maybe you can see the reason,why interrupted.<br>
More, interrupt method does this below:</p>

<pre><code>public void interrupt() {
    // Interrupt this thread before running actions so that other
    // threads that observe the interrupt as a result of an action
    // will see that this thread is in the interrupted state.
    nativeInterrupt();

    synchronized (interruptActions) {
        for (int i = interruptActions.size() - 1; i &gt;= 0; i--) {
            interruptActions.get(i).run();
        }
    }
}
</code></pre>

<p>the reason maybe this as metioned above:</p>

<blockquote>
  <p>Interrupt this thread before running actions so that other threads that observe the interrupt as a result of an action will see that this thread is in the interrupted state.</p>
</blockquote>
