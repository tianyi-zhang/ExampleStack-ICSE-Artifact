<pre><code>/**
 * @return the key of the highest value of this map. Note: if this map has
 *         multiple values that are the highest, it returns one of its
 *         corresponding keys.
 */
public static &lt;K, V extends Comparable&lt;V&gt;&gt; K keyOfHighestValue(Map&lt;K, V&gt; map) {
    K bestKey = null;
    V bestValue = null;
    for (Entry&lt;K, V&gt; entry : map.entrySet()) {
        if (bestValue == null || entry.getValue().compareTo(bestValue) &gt; 0) {
            bestKey = entry.getKey();
            bestValue = entry.getValue();
        }
    }
    return bestKey;
}
</code></pre>

<p>And one test:</p>

<pre><code>import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;

public class MapUtilsTest {

    @Test
    public void testKeyOfHighestValue() {

        Map&lt;String, Double&gt; mapp = new HashMap&lt;String, Double&gt;();
        mapp.put("s3.5", 3.5);
        mapp.put("s1.5", 1.5);
        mapp.put("s0.5", 0.5);
        mapp.put("s0.6", 0.6);
        mapp.put("2s3.5", 123.5); 
        mapp.put("s2.6", 2.6);

        assertEquals("2s3.5", MapUtils.keyOfHighestValue(mapp));
    }
}
</code></pre>
