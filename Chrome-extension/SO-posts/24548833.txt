<p>The correct way to use the holder should be like that:</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent)
{
    ViewHolder holder = null;
    if (convertView == null)
    {
        LayoutInflater inflater = LayoutInflater.from(context);
        convertView = inflater.inflate(R.layout.row_item, null);
        holder = new ViewHolder();

        holder.name = (TextView) convertView.findViewById(R.id.name);
        holder.startingAt = (TextView) convertView.findViewById(R.id.starting_at);

        convertView.setTag(viewHolder);
    }
    else
    {
        holder = (ViewHolder) convertView.getTag();
    }

    Model current = list.get(position);
    holder.name.setText(current.name);

    return convertView;
}
</code></pre>

<p>EDIT:</p>

<p>You should not set the <code>TextView</code> value from a running thread but directly from the <code>getView</code> method.</p>

<p>Add this line right before <code>return convertView;</code>:</p>

<pre><code>holder.startingAt.setText(current.timer);
</code></pre>

<p>And in your <code>Model</code> class, add a new field:</p>

<pre><code>public String timer = null;
</code></pre>

<p>Then in your running thread (Countdown timer):</p>

<pre><code>@Override
public void run()
{
    for (int i = 0; i &lt;= listOfTimes.size(); i++)
    {
        long lTimeFromList = listOfTimes.get(i);

        // transform timestamp to readable date
        long weeks = TimeUnit.SECONDS.toDays(lTimeFromList) / 7;
        long days = TimeUnit.SECONDS.toDays(lTimeFromList) - (7 * weeks);
        long hours = TimeUnit.SECONDS.toHours(lTimeFromList) - TimeUnit.DAYS.toHours(days) - TimeUnit.DAYS.toHours(7 * weeks);
        long minute = TimeUnit.SECONDS.toMinutes(lTimeFromList) - (TimeUnit.SECONDS.toHours(lTimeFromList) * 60);
        long second = TimeUnit.SECONDS.toSeconds(lTimeFromList) - (TimeUnit.SECONDS.toMinutes(lTimeFromList) * 60);

        listOfTimes.get(i).timer = weeks + "w " + days + "d " + hours + "h " + minute + "m " + second + "s ";
    }
    mHandler.postDelayed(this, 1000);
}
</code></pre>
