<p>It depends upon the response from the server,i.e in which form it is providing the image .
It can be in form of <strong>base 64 string or a URL</strong>.</p>

<p>If it is a base 64 string then you to encode it back using base64 class in java and if its url then you simply need to set image using  bitmap by convrting image to bitmap from url.
You need to make a get request to server using httpGet in following manner.</p>

<pre><code>public static String connect(String url) throws IOException {
    HttpClient httpclient = new DefaultHttpClient();
    HttpGet httpget = new HttpGet(url);
    HttpResponse response;
    try {
        response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            InputStream instream = entity.getContent();
            result = convertStreamToString(instream);
            instream.close();
        }
    } catch (ClientProtocolException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    return result;
}


private static String convertStreamToString(InputStream input) {
    /*
     * To convert the InputStream to String we use the
     * BufferedReader.readLine() method. We iterate until the BufferedReader
     * return null which means there's no more data to read. Each line will
     * appended to a StringBuilder and returned as String.
     */
    BufferedReader reader = new BufferedReader(new InputStreamReader(input));
    StringBuilder buffer = new StringBuilder();
    String line = null;
    try {
        while ((line = reader.readLine()) != null) {
            buffer.append(line + "\n");
        }
    } catch (IOException e) {
        e.printStackTrace();
    } finally {
        try {
            input.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    return buffer.toString();
}
</code></pre>
