<p>You have 2 options to achieve this...</p>

<p>1st one is out of the box:</p>

<p>you need to use a Set, this collection doesnt allow duplicates, but you has no insertion order </p>

<p>2nd option.
you can write a method that is checking in the list is the element you are trying to insert is already there... list.contains(bank); where bank is the mthod to check...</p>

<p>in both cases is necessary to override the methods <code>hashcode</code> and <code>equals</code>(you already have this) in the class bank.</p>

<h1>Example:</h1>

<pre><code>static List&lt;Bank&gt; al;

public static void main(String[] args) {
    al = new ArrayList&lt;Bank&gt;();
    Bank a = new Bank(11, "employee");
    Bank b = new Bank(11, "employee");
    Bank c = new Bank(12, "Bank");
    Bank d = new Bank(12, "Bank");
    addIfNotinList(a);
    addIfNotinList(b);
    addIfNotinList(c);
    addIfNotinList(d);
    System.out.println(al);

}

private static void addIfNotinList(Bank bank) {
    if (!al.contains(bank)) {
        al.add(bank);
    }
}
</code></pre>

<hr>

<p>and the Bank class</p>

<p>public class Bank {
    int id;
    String name;</p>

<pre><code>@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + id;
    result = prime * result + ((name == null) ? 0 : name.hashCode());
    return result;
}

@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Bank other = (Bank) obj;
    if (id != other.id)
        return false;
    if (name == null) {
        if (other.name != null)
            return false;
    } else if (!name.equals(other.name))
        return false;
    return true;
}

public Bank(int id, String name) {
    this.id = id;
    this.name = name;
}

@Override
public String toString() {
    return "Bank [id=" + id + ", name=" + name + "]";
}
</code></pre>

<p>}</p>
