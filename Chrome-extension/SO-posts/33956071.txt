<p>Since the key and value in your collection are your self define class.
Those content int the map are not really copied but share the same instance of your "TYPE".
You need to do something like this to copy the value from all the content.
This is just a very simple example, so there's no any encapsulation.</p>

<pre><code>public class Foo1 {
    public Integer a = 0;

    public Foo1() {

    }

    public Foo1(Integer a) {
        this.a = a;
    }

    public Foo1 clone() {
        return new Foo1();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + getOuterType().hashCode();
        result = prime * result + ((a == null) ? 0 : a.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Foo1 other = (Foo1) obj;
        if (!getOuterType().equals(other.getOuterType()))
            return false;
        if (a == null) {
            if (other.a != null)
                return false;
        } else if (!a.equals(other.a))
            return false;
        return true;
    }
}

public class Foo2 {
    public Integer a = 0;

    public Foo2() {

    }

    public Foo2(Integer a) {
        this.a = a;
    }

    public Foo2 clone() {
        return new Foo2();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + getOuterType().hashCode();
        result = prime * result + ((a == null) ? 0 : a.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Foo1 other = (Foo1) obj;
        if (!getOuterType().equals(other.getOuterType()))
            return false;
        if (a == null) {
            if (other.a != null)
                return false;
        } else if (!a.equals(other.a))
            return false;
        return true;
    }
}

public class Foo3 {

    public Integer a = 0;

    public Foo3() {

    }

    public Foo3(Integer a) {
        this.a = a;
    }

    public Foo3 clone() {
        return new Foo3();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + getOuterType().hashCode();
        result = prime * result + ((a == null) ? 0 : a.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Foo1 other = (Foo1) obj;
        if (!getOuterType().equals(other.getOuterType()))
            return false;
        if (a == null) {
            if (other.a != null)
                return false;
        } else if (!a.equals(other.a))
            return false;
        return true;
    }
}
</code></pre>

<p>Copy your value by your own.</p>

<pre><code>    Map&lt;Foo1, Map&lt;Foo2, Foo3&gt;&gt; map1 = new HashMap&lt;Foo1, Map&lt;Foo2, Foo3&gt;&gt;();
    Map&lt;Foo1, Map&lt;Foo2, Foo3&gt;&gt; map2 = new HashMap&lt;Foo1, Map&lt;Foo2, Foo3&gt;&gt;();

    Map&lt;Foo2, Foo3&gt; tmp = new HashMap&lt;Foo2, Foo3&gt;();
    tmp.put(foo.new Foo2(), foo.new Foo3());
    map1.put(foo.new Foo1(), tmp);

    for (Foo1 key : map1.keySet()) {
        Map&lt;Foo2, Foo3&gt; tmp2 = new HashMap&lt;&gt;();
        for (Foo2 key2 : map1.get(key).keySet()) {
            tmp2.put(key2.clone(), map1.get(key).get(key2).clone());
        }

        map2.put(key, tmp2);
    }
    for (Foo1 key : map1.keySet()) {
        for (Foo2 key2 : map1.get(key).keySet()) {
            map1.get(key).get(key2).a = 10;//change map1's value
        }
    }

    for (Foo1 key : map2.keySet()) {
        for (Foo2 key2 : map2.get(key).keySet()) {
            System.out.println(map2.get(key).get(key2).a);// the value in map2 still 0
        }
    }
</code></pre>
