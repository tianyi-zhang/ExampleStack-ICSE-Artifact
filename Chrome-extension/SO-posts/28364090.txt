<pre><code>public static long getAvailableStorage() {
        File path = StorageUtils.getCacheDirectory(ApplicationController.getInstance(), true);
        long blockSize = 0;
        long availableBlocks = 0;
        StatFs stat = new StatFs(path.getPath());
        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN_MR2) {
            blockSize = stat.getBlockSizeLong();
            availableBlocks = stat.getAvailableBlocksLong();
        } else {
            blockSize = stat.getBlockSize();
            availableBlocks = stat.getAvailableBlocks();
        }
        return availableBlocks * blockSize;
    }

public static File getCacheDirectory(Context context,
        boolean preferExternal) {
    File appCacheDir = null;
    String externalStorageState;
    try {
        externalStorageState = Environment.getExternalStorageState();
    } catch (NullPointerException e) { // (sh)it happens (Issue #660)
        externalStorageState = "";
    }
    if (preferExternal &amp;&amp; MEDIA_MOUNTED.equals(externalStorageState)
        &amp;&amp; hasExternalStoragePermission(context)) {
        appCacheDir = getExternalCacheDir(context);
    }
    if (appCacheDir == null) {
        appCacheDir = context.getCacheDir();
    }
    if (appCacheDir == null) {
        String cacheDirPath = "/data/data/" + context.getPackageName()
            + "/"+DOWNLOAD_SUB_DIRECTORY+"/";

        appCacheDir = new File(cacheDirPath);
    }
    return appCacheDir;
    }

private static File getExternalCacheDir(Context context) {
    File dataDir = new File(new File(
        Environment.getExternalStorageDirectory(), "Android"), "data");
    File appCacheDir = new File(
        new File(dataDir, context.getPackageName()), DOWNLOAD_SUB_DIRECTORY);
    if (!appCacheDir.exists()) {
        if (!appCacheDir.mkdirs()) {
        L.w("Unable to create external cache directory");
        return null;
        }
        try {
        new File(appCacheDir, ".nomedia").createNewFile();
        } catch (IOException e) {

        }
    }
    return appCacheDir;
    }
</code></pre>
