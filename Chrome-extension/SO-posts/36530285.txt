<p>here 5 way to do this(you can add more):<br>
as this 
<a href="http://www.algolist.net/Algorithms/Sorting/Quicksort" rel="nofollow">http://www.algolist.net/Algorithms/Sorting/Quicksort</a><br>
said + your code with some edit:  </p>

<pre><code>package AR;

class Node {
    public int frequency;
    public char value;

    public Node(int frequency, char value) {
        this.frequency = frequency;
        this.value = value;
    }
}

final class Sort {

    int partition(Node arr[], int left, int right) {
        int i = left, j = right;
        Node tmp;
        Node pivot = arr[(left + right) / 2];

        while (i &lt;= j) {
            while (i &lt;= j &amp;&amp; (arr[i].frequency &lt; pivot.frequency || (arr[i].frequency == pivot.frequency &amp;&amp; arr[i].value &lt; pivot.value)))
                i++;
            while (i &lt;= j &amp;&amp; (arr[j].frequency &gt; pivot.frequency || (arr[j].frequency == pivot.frequency &amp;&amp; arr[j].value &gt; pivot.value)))
                j--;
            if (i &lt;= j) {
                tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
                i++;
                j--;
            }
        }
        return i;
    }

    public void quickSort(Node arr[], int left, int right) {
        if (left &gt; right) return;
        int index = partition(arr, left, right);
        if (left &lt; index - 1)
            quickSort(arr, left, index - 1);
        if (index &lt; right)
            quickSort(arr, index, right);
    }
}

final class Main {
    public static void main(String[] args) {

        Node[] ns = new Node[]{new Node(10, 'a'), new Node(10, 'c'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(0, 'z'), new Node(1, 'z')};
        int n = ns.length;
        Sort cl = new Sort();
        cl.quickSort(ns, 0, n - 1);
        for (int i = 0; i &lt; n; i++) {
            System.out.print("(" + ns[i].frequency + "," + ns[i].value + "), ");
            //(0,z), (1,b), (1,b), (1,b), (1,z), (8,a), (8,a), (8,a), (10,a), (10,a), (10,a), (10,b), (10,b), (10,c),
        }
    }
}
</code></pre>

<p>//in  @Debosmit Ray   way: (just change int to T) using Generics in Java::</p>

<pre><code>package AR;

class Node implements Comparable&lt;Node&gt; {
    public int frequency;
    public char value;

    public Node(int frequency, char value) {
        this.frequency = frequency;
        this.value = value;
    }

    @Override
    public int compareTo(Node o) {
        if (this.frequency &gt; o.frequency) return 1;
        if (this.frequency &lt; o.frequency) return -1;
        if (this.value &gt; o.value) return 1;
        if (this.value &lt; o.value) return -1;
        return 0;
    }
}

final class Sort&lt;T extends Comparable&lt;T&gt;&gt; {

    int partition(T arr[], int left, int right) {
        int i = left, j = right;
        T tmp;
        T pivot = arr[(left + right) / 2];

        while (i &lt;= j) {
            while (i &lt;= j &amp;&amp; arr[i].compareTo(pivot) &lt; 0)
                i++;
            while (i &lt;= j &amp;&amp; arr[j].compareTo(pivot) &gt; 0)
                j--;
            if (i &lt;= j) {
                tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
                i++;
                j--;
            }
        }
        return i;
    }

    public void quickSort(T arr[], int left, int right) {
        if (left &gt; right) return;
        int index = partition(arr, left, right);
        if (left &lt; index - 1)
            quickSort(arr, left, index - 1);
        if (index &lt; right)
            quickSort(arr, index, right);
    }
}

final class Main {
    public static void main(String[] args) {

        Node[] ns = new Node[]{new Node(10, 'a'), new Node(10, 'c'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(0, 'z'), new Node(1, 'z')};
        int n = ns.length;
        Sort cl = new Sort();
        cl.quickSort(ns, 0, n - 1);
        for (int i = 0; i &lt; n; i++) {
            System.out.print("(" + ns[i].frequency + "," + ns[i].value + "), ");
            //(0,z), (1,b), (1,b), (1,b), (1,z), (8,a), (8,a), (8,a), (10,a), (10,a), (10,a), (10,b), (10,b), (10,c),
        }
    }
}
</code></pre>

<p>//place pivot in left side of array, and compare in one loop, like this:</p>

<pre><code>package AR;

class Node {
    public int frequency;
    public char value;
    public Node(int frequency, char value) {
        this.frequency = frequency;
        this.value = value;
    }
}
final class Main {
    static int partition(Node[] arr, int left, int right) {
        int i = left+1, j = right;
        Node tmp;
        int pivot =  left  ;
        while (i &lt;= j) {
            while (i &lt;= j &amp;&amp; (arr[i].frequency &lt; arr[pivot].frequency || (arr[i].frequency == arr[pivot].frequency &amp;&amp; arr[i].value &lt;= arr[pivot].value)))
                i++;
            while (i &lt;= j &amp;&amp; (arr[j].frequency &gt; arr[pivot].frequency || (arr[j].frequency == arr[pivot].frequency &amp;&amp; arr[j].value &gt; arr[pivot].value)))
                j--;
            if (i &gt; j) break;
            tmp = arr[i];
            arr[i] = arr[j];
            arr[j] = tmp;
        }
        tmp = arr[pivot];
        arr[pivot] = arr[j];
        arr[j] = tmp;
        return j;
    }
    public static void quickSort(Node arr[], int left, int right) {
        if (left &gt;= right) return;
        int i = partition(arr, left, right);
        quickSort(arr, left, i - 1);
        quickSort(arr, i + 1, right);
    }
    public static void main(String[] args) {
        Node[] ns = new Node[]{new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(0, 'z'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(1, 'z')};
        int n = ns.length;
        quickSort(ns, 0, n - 1);
        for (int i = 0; i &lt; n; i++) {
            System.out.print("(" + ns[i].frequency + "," + ns[i].value + "), ");
            //(0,z), (1,b), (1,b), (1,b), (1,z), (8,a), (8,a), (8,a), (10,a), (10,a), (10,a), (10,b), (10,b), (10,b),
        }
    }
}
</code></pre>

<p>//@Debosmit Ray    way to compare is very nice and it simplifies the code:</p>

<pre><code>package AR;
class Node implements Comparable&lt;Node&gt; {
    public int frequency;
    public char value;
    public Node(int frequency, char value) {
        this.frequency = frequency;
        this.value = value;
    }
    @Override
    public int compareTo(Node o) {
        if (this.frequency &gt; o.frequency) return 1;
        if (this.frequency &lt; o.frequency) return -1;
        if (this.value &gt; o.value) return 1;
        if (this.value &lt; o.value) return -1;
        return 0;
    }
}
final class Main {
    static void swap(Node[] arr, int i, int j) {
        Node temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    static int partition(Node[] arr, int left, int right) {
        int i = left;
        Node pivot = arr[left++];
        while (left &lt;= right) {
            while (left &lt;= right &amp;&amp; arr[left].compareTo(pivot) &lt;= 0) left++;
            while (left &lt;= right &amp;&amp; arr[right].compareTo(pivot) &gt; 0) right--;
            if (left &gt; right)break;
            swap(arr, left++, right--);
        }
        swap(arr, i, right);
        return right;
    }
    public static void quickSort(Node arr[], int left, int right) {
        if (left &gt;= right) return;
        int i = partition(arr, left, right);
        quickSort(arr, left, i - 1);
        quickSort(arr, i + 1, right);
    }
    public static void main(String[] args) {

        Node[] ns = new Node[]{new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(0, 'z'), new Node(1, 'z')};
        int n = ns.length;
        quickSort(ns, 0, n - 1);
        for (int i = 0; i &lt; n; i++) {
            System.out.print("(" + ns[i].frequency + "," + ns[i].value + "), ");
            //(0,z), (1,b), (1,b), (1,b), (1,z), (8,a), (8,a), (8,a), (10,a), (10,a), (10,a), (10,b), (10,b), (10,b), 
        }
    }
}
</code></pre>

<p>//using Generics in Java:</p>

<pre><code>package AR;

class Node implements Comparable&lt;Node&gt; {
    public int frequency;
    public char value;

    public Node(int frequency, char value) {
        this.frequency = frequency;
        this.value = value;
    }

    @Override
    public int compareTo(Node o) {
        if (this.frequency &gt; o.frequency) return 1;
        if (this.frequency &lt; o.frequency) return -1;
        if (this.value &gt; o.value) return 1;
        if (this.value &lt; o.value) return -1;
        return 0;
    }
}

final class Sort&lt;T extends Comparable&lt;T&gt;&gt; {
    void swap(T[] arr, int i, int j) {
        T temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    int partition(T[] arr, int left, int right) {
        int i = left;
        T pivot = arr[left++];
        while (left &lt;= right) {
            while (left &lt;= right &amp;&amp; arr[left].compareTo(pivot) &lt;= 0) left++;
            while (left &lt;= right &amp;&amp; arr[right].compareTo(pivot) &gt; 0) right--;
            if (left &gt; right) break;
            swap(arr, left++, right--);
        }
        swap(arr, i, right);
        return right;
    }

    public void quickSort(T arr[], int left, int right) {
        if (left &gt;= right) return;
        int i = partition(arr, left, right);
        quickSort(arr, left, i - 1);
        quickSort(arr, i + 1, right);
    }

}

final class Main {
    public static void main(String[] args) {

        Node[] ns = new Node[]{new Node(10, 'a'), new Node(10, 'c'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(10, 'a'), new Node(10, 'b'), new Node(8, 'a'), new Node(1, 'b'), new Node(0, 'z'), new Node(1, 'z')};
        int n = ns.length;
        Sort cl = new Sort();
        cl.quickSort(ns, 0, n - 1);
        for (int i = 0; i &lt; n; i++) {
            System.out.print("(" + ns[i].frequency + "," + ns[i].value + "), ");
            //(0,z), (1,b), (1,b), (1,b), (1,z), (8,a), (8,a), (8,a), (10,a), (10,a), (10,a), (10,b), (10,b), (10,c),
        }
    }
}
</code></pre>
