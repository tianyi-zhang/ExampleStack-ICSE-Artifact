<p>to know about the AsynkTask or threding read Article posted hear 
<a href="http://android-developers.blogspot.com/2009/05/painless-threading.html" rel="nofollow">http://android-developers.blogspot.com/2009/05/painless-threading.html</a> and <a href="http://developer.android.com/reference/android/os/AsyncTask.html" rel="nofollow">http://developer.android.com/reference/android/os/AsyncTask.html</a></p>

<p>Hear is the code snippet for the download the image using <code>AsyncTask</code></p>

<pre><code>public class AsyncFetchImage extends AsyncTask&lt;String, Void, Bitmap&gt;{

    private WeakReference&lt;ImageView&gt; imageReference;
//  private WeakReference&lt;Dialog&gt; dialogReferance;

    public AsyncFetchImage(ImageView imageview) {
        imageReference = new WeakReference&lt;ImageView&gt;(imageview);
//      dialogReferance = new WeakReference&lt;Dialog&gt;(dialog);
    }

    @Override
    protected Bitmap doInBackground(String... s) {

        return downloadImage(s[0]);
    }

    private Bitmap downloadImage(String url) {

        final AndroidHttpClient client = AndroidHttpClient.newInstance("Nixit");
        final HttpGet getRequest = new HttpGet(url);
        try {

            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();

            if(statusCode != HttpStatus.SC_OK){
                Log.w("ImageDownloader", "Error " + statusCode + " while retrieving bitmap from " + url); 
                return null;
            }
            final HttpEntity entity = response.getEntity();
            if(entity != null){
                InputStream is = null;
                try{
                    is = entity.getContent();
                    final Bitmap bit = BitmapFactory.decodeStream(is);
                    return bit;
                }finally{
                    if(is != null)
                        is.close();
                    entity.consumeContent();
                }
            }


        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally{
            if(client != null){
                client.close();
            }
        }
        Log.i("Image Fetch","Image Fetch Complete");
        return null;
    }

    @Override
    protected void onPostExecute(Bitmap result) {
        if(isCancelled()){
            result = null;
        }
        if(imageReference != null){
            ImageView imageView = imageReference.get();
//          Dialog di = dialogReferance.get();
            if (imageView != null) {
                imageView.setImageBitmap(result);
//                di.show();
            }

        }
    }


}
</code></pre>
