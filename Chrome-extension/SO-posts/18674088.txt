<p>I have done creating the 3d bar graph though I have some other issues right now
but I believe some one might be helpful with this code.</p>

<p>Myrenderer class:</p>

<pre><code>public class BarRenderer implements GLSurfaceView.Renderer {

int[] vals;
private float translatex, scaly;
// For controlling cube's z-position, x and y angles and speeds (NEW)
float angleX = 0; // (NEW)
float angleY = 0; // (NEW)
float speedX = 0; // (NEW)
float speedY = 0; // (NEW)
float translatez;

public BarRenderer(Context context, boolean useTranslucentBackground,
        int[] vals) {
    mTranslucentBackground = useTranslucentBackground;
    mfloor = new Cube(0);
    mwall = new Cube(0);

    this.vals = vals;
    for (int i = 0; i &lt; this.vals.length; i++) {
        mcube[i] = new Cube(i);
    }
}

public void onDrawFrame(GL10 gl) {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glClearColor(0.0f, 0.5f, 0.5f, 1.0f);
    gl.glMatrixMode(GL10.GL_MODELVIEW);
    gl.glLoadIdentity();

    translatex = 2.0f;
    scaly = 0.8f;
    for (int i = 0; i &lt; vals.length; i++) {
        gl.glPushMatrix();
        mTransY = -5 + (scaly * vals[i]);
        gl.glTranslatef((-3.0f + (translatex * i)), mTransY, translatez);
        gl.glRotatef(mAngleX, 1.0f, 0.0f, 0.0f);
        gl.glRotatef(mAngleY, 0.0f, 1.0f, 0.0f);
        gl.glScalef(0.4f, scaly * vals[i], 0.4f);
        gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
        gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
        mcube[i].draw(gl);
        gl.glPopMatrix();
    }
     mTransY = .075f;
//      mAngleX = -90.0f;
//      mAngleY = -0.01f;
    mAngleX += speedX;
    mAngleY += speedY;
    translatez = -6.0f;
}

public void onSurfaceChanged(GL10 gl, int width, int height) {
    gl.glViewport(0, 0, width, height);
    float aspectRatio;
    float zNear = .1f;
    float zFar = 1000;
    float fieldOfView = 80.0f / 57.3f;
    float size;
    gl.glEnable(GL10.GL_NORMALIZE);
    aspectRatio = (float) width / (float) height;
    gl.glMatrixMode(GL10.GL_PROJECTION);
    size = zNear * (float) (Math.tan((double) (fieldOfView / 2.0f)));
    gl.glFrustumf(-size, size, -size / aspectRatio, size / aspectRatio,
            zNear, zFar);
    gl.glMatrixMode(GL10.GL_MODELVIEW);
}

public void onSurfaceCreated(GL10 gl, EGLConfig config) {
    gl.glDisable(GL10.GL_DITHER);
    gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_FASTEST);
    if (mTranslucentBackground) {
        gl.glClearColor(0, 0, 0, 0);
    } else {
        gl.glClearColor(1, 1, 1, 1);
    }
    gl.glEnable(GL10.GL_CULL_FACE);
    gl.glShadeModel(GL10.GL_SMOOTH);
    gl.glEnable(GL10.GL_POINT_SMOOTH);
    gl.glEnable(GL10.GL_DEPTH_TEST);
}

private boolean mTranslucentBackground;
private Cube[] mcube = new Cube[4];
private Cube mfloor, mwall;
private float mTransY;
private float mAngleX,mAngleY;

}
</code></pre>

<p>and myGLsurfaceview class:</p>

<pre><code>public class MyBarGLSurfaceView extends GLSurfaceView {

BarRenderer renderer; // Custom GL Renderer

// For touch event
private final float TOUCH_SCALE_FACTOR = 180.0f / 320.0f;
private float previousX;
private float previousY;

public MyBarGLSurfaceView(Context context,
        boolean useTranslucentBackground, int[] vals) {
    super(context);
    renderer = new BarRenderer(context, useTranslucentBackground, vals);
    this.setRenderer(renderer);
    // Request focus, otherwise key/button won't react
    this.requestFocus();
    this.setFocusableInTouchMode(true);
}

// Handler for key event
@Override
public boolean onKeyUp(int keyCode, KeyEvent evt) {
    switch (keyCode) {
    case KeyEvent.KEYCODE_DPAD_LEFT: // Decrease Y-rotational speed
        renderer.speedY -= 01.1f;
        break;
    case KeyEvent.KEYCODE_DPAD_RIGHT: // Increase Y-rotational speed
        renderer.speedY += 01.1f;
        break;
    case KeyEvent.KEYCODE_DPAD_UP: // Decrease X-rotational speed
        renderer.speedX -= 01.1f;
        break;
    case KeyEvent.KEYCODE_DPAD_DOWN: // Increase X-rotational speed
        renderer.speedX += 01.1f;
        break;
    case KeyEvent.KEYCODE_A: // Zoom out (decrease z)
        renderer.translatez -= 0.2f;
        break;
    case KeyEvent.KEYCODE_Z: // Zoom in (increase z)
        renderer.translatez += 0.2f;
        break;
    }
    return true; // Event handled
}

// Handler for touch event
@Override
public boolean onTouchEvent(final MotionEvent evt) {
    float currentX = evt.getX();
    float currentY = evt.getY();
    float deltaX, deltaY;
    switch (evt.getAction()) {
    case MotionEvent.ACTION_MOVE:
        // Modify rotational angles according to movement
        deltaX = currentX - previousX;
        deltaY = currentY - previousY;
        renderer.angleX += deltaY * TOUCH_SCALE_FACTOR;
        renderer.angleY += deltaX * TOUCH_SCALE_FACTOR;
    }
    // Save current x, y
    previousX = currentX;
    previousY = currentY;
    return true; // Event handled
}
}
</code></pre>

<p>though it is done still I would like if anyone can please answer me </p>

<p>1> how to make this bar graphs to grow animatedly, right now when this bar graph activity starts the bar graph appears but i want the bar graph to grow animatedly not just show it</p>

<p>2> how to create a base and a background wall to the bar graph like this link <a href="http://www.fusioncharts.com/demos/gallery/#column-and-bar" rel="nofollow">http://www.fusioncharts.com/demos/gallery/#column-and-bar</a></p>

<p>3> and I was trying to rotate or move the bar graph as per user touch movements i tried the code like another example, you will see that code too and that is why i created this glsurfaceview class of my own, but for some reason it is not working, don't know where and what i have missed, if anyone have any idea please point it out to me</p>

<p>thanks</p>
