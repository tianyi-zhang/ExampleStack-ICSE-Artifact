<p>The general approach is iterate through first list and check for element if it is contained in second list, if it exist add the element to the result list
Below is the complete solution  </p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class CompareListofObj {

public static void main(String[] args) {

    List&lt;Student&gt; listStd1 = new ArrayList&lt;Student&gt;();
    List&lt;Student&gt; listStd2 = new ArrayList&lt;Student&gt;();

    Student std1 = new Student(1, 1, "a");
    Student std2 = new Student(2, 1, "b");
    Student std3 = new Student(3, 3, "c");
    Student std4 = new Student(4, 4, "d");
    listStd1.add(std1);
    listStd1.add(std2);
    listStd1.add(std3);
    listStd1.add(std4);

    Student std5 = new Student(1, 1, "a");
    Student std6 = new Student(2, 1, "b");
    Student std7 = new Student(7, 7, "c");
    Student std8 = new Student(8, 8, "d");
    listStd2.add(std5);
    listStd2.add(std6);
    listStd2.add(std7);
    listStd2.add(std8);

    List&lt;Student&gt; listResult = new ArrayList&lt;Student&gt;();

    for (int i = 0; i &lt; listStd1.size(); i++) {
        if (listStd2.contains(listStd1.get(i))) {

            listResult.add(listStd1.get(i));

        } else {

        }
    }

    for (int i = 0; i &lt; listResult.size(); i++) {
        System.out.println("common elt" + listResult.get(i).getA() + ", " + listResult.get(i).getB() + ", "
                + listResult.get(i).getC());
    }

}
}
</code></pre>

<p>Student class</p>

<pre><code>package sample;

public class Student {

int A;
int B;
String C;

public Student(int a, int b, String c) {
    super();
    A = a;
    B = b;
    C = c;
}

public int getA() {
    return A;
}

public void setA(int a) {
    A = a;
}

public int getB() {
    return B;
}

public void setB(int b) {
    B = b;
}

public String getC() {
    return C;
}

public void setC(String c) {
    C = c;
}

@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + A;
    result = prime * result + B;
    result = prime * result + ((C == null) ? 0 : C.hashCode());
    return result;
}

@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Student other = (Student) obj;
    if (A != other.A)
        return false;
    if (B != other.B)
        return false;
    if (C == null) {
        if (other.C != null)
            return false;
    } else if (!C.equals(other.C))
        return false;
    return true;
}
}
</code></pre>
