<p>If your serious about doing this only for the dialog (&amp; not effecting any other components within the GUI), you are going to need to recursively walk the component hierarchy stating at the content pane (you coukd start higher, but let's makes this easy)</p>

<pre><code>protected void changeContent(Container parent) {
    for (Component comp : parent.getComponents()) {
        adjustFont(comp);
        if (comp instanceof Container) {
            changeContent((Container)comp);
        }
    }
}

protected void changeFont(Component comp) {
    AffineTransformation at = AffineTransformation.getScaleInstance(2, 2);
    Font font = comp.getFont().deriveFont(at);
    comp.setFont(font);
}

public MyDialog() {
    changeContent(getConentPane());
}
</code></pre>

<p>Of course, you should be able to fill the parameter requirements for the constructor &amp; it's logic</p>

<p><strong>UPDATE</strong></p>

<p>First apologies, I typed the original code out on my ipad without the benefit of auto complete, so <code>AffineTransformation</code> should be <code>AffineTransform</code></p>

<p>I put this together and get really awesome results.  I may keep this idea for use in my own code, thanks!</p>

<pre><code>/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.geom.AffineTransform;

/**
 *
 * @author swhitehead
 * /
public class TestFrame extends javax.swing.JFrame {

    private float scale = 1f;

    /**
     * Creates new form TestFrame    
     */
public TestFrame() {
    initComponents();
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
// &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;
private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    jLabel1 = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    jPanel1 = new javax.swing.JPanel();
    btnUp = new javax.swing.JButton();
    btnDown = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    jLabel1.setText("Hello world!");
    getContentPane().add(jLabel1, new java.awt.GridBagConstraints());

    jTextField1.setColumns(12);
    jTextField1.setText("Say something");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
    getContentPane().add(jTextField1, gridBagConstraints);

    jList1.setModel(new javax.swing.AbstractListModel() {
        String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
        public int getSize() { return strings.length; }
        public Object getElementAt(int i) { return strings[i]; }
    });
    jScrollPane1.setViewportView(jList1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(jScrollPane1, gridBagConstraints);

    jPanel1.setLayout(new java.awt.GridBagLayout());

    btnUp.setText("Up");
    btnUp.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnUpActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    jPanel1.add(btnUp, gridBagConstraints);

    btnDown.setText("Down");
    btnDown.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDownActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    jPanel1.add(btnDown, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.gridwidth = 2;
    getContentPane().add(jPanel1, gridBagConstraints);

    pack();
}// &lt;/editor-fold&gt;

private void btnUpActionPerformed(java.awt.event.ActionEvent evt) {

    scale += 0.1;
    changeContent(getContentPane());

    invalidate();
    repaint();

}

private void btnDownActionPerformed(java.awt.event.ActionEvent evt) {

    scale -= 0.1;
    if(scale &lt;= 0) scale = 0.1f;

    changeContent(getContentPane());

    invalidate();
    repaint();

}

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    /*
     * Set the Nimbus look and feel
     */
    //&lt;editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) "&gt;
    /*
     * If Nimbus (introduced in Java SE 6) is not available, stay with the
     * default look and feel. For details see
     * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //&lt;/editor-fold&gt;

    /*
     * Create and display the form
     */
    java.awt.EventQueue.invokeLater(new Runnable() {

        public void run() {
            new TestFrame().setVisible(true);
        }
    });
}
// Variables declaration - do not modify
private javax.swing.JButton btnDown;
private javax.swing.JButton btnUp;
private javax.swing.JLabel jLabel1;
private javax.swing.JList jList1;
private javax.swing.JPanel jPanel1;
private javax.swing.JScrollPane jScrollPane1;
private javax.swing.JTextField jTextField1;
// End of variables declaration

protected void changeContent(Container parent) {
    for (Component comp : parent.getComponents()) {
        adjustFont(comp);
        if (comp instanceof Container) {
            changeContent((Container) comp);
        }
    }
}

protected void adjustFont(Component comp) {
    AffineTransform at = AffineTransform.getScaleInstance(scale, scale);
    Font font = comp.getFont();
    System.out.println("Font.orignal = " + font.getSize());
    font = font.deriveFont(at);
    System.out.println("Font.scaled = " + font.getSize());
    comp.setFont(font);
}
}
</code></pre>

<p>One thing I did note is that the output for the Font.original and Font.scaled is the same.  The transformation is occurring at the paint stage and does not effect the base line font, just it's paint matrix</p>
