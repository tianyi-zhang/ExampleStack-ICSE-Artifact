<p>According to <a href="http://www.coderanch.com/t/250475/java-programmer-SCJP/certification/toString-Integer-class">this page</a>, the <code>Integer#toString</code> method (which is called by <code>String#valueOf(int)</code>) is implemented like this in 1.4:</p>

<pre><code>public static String toString(int i) {  
    switch(i) {  
        case Integer.MIN_VALUE: return "-2147483648";  
        case -3: return "-3";  
        case -2: return "-2";  
        case -1: return "-1";  
        case 0: return "0";  
        case 1: return "1";  
        case 2: return "2";  
        case 3: return "3";  
        case 4: return "4";  
        case 5: return "5";  
        case 6: return "6";  
        case 7: return "7";  
        case 8: return "8";  
        case 9: return "9";  
        case 10: return "10";  
    }  
    char[] buf = (char[])(perThreadBuffer.get());  
    int charPos = getChars(i, buf);  
    return new String(buf, charPos, 12 - charPos);  
}
</code></pre>

<p>That would explain your result because the string literal <code>"3"</code> is interned and <code>"3" == "3"</code> always returns true.</p>

<p>You can try with 10 and 11 to verify this.</p>

<p>Note: as already mentioned, the javadoc of <code>Integer#toString</code> does not say whether the returned string will be interned or not so both outputs in your question are equally valid.</p>
