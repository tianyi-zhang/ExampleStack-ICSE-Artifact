<p>even a more optimized solution - is to use the <code>findElements(locator).size()</code>...</p>

<pre><code>    /**
     * Private method that acts as an arbiter of implicit timeouts of sorts.. sort of like a Wait For Ajax method.
     */
    private WebElement waitForElement(By by) {
        int attempts = 0;
        int size = driver.findElements(by).size();

        while (size == 0) {
            size = driver.findElements(by).size();
            if (attempts == MAX_ATTEMPTS) fail(String.format("Could not find %s after %d seconds",
                                                             by.toString(),
                                                             MAX_ATTEMPTS));
            attempts++;
            try {
                Thread.sleep(1000); // sleep for 1 second.
            } catch (Exception x) {
                fail("Failed due to an exception during Thread.sleep!");
                x.printStackTrace();
            }
        }

        if (size &gt; 1) System.err.println("WARN: There are more than 1 " + by.toString() + " 's!");

        return driver.findElement(by);
    }
</code></pre>

<p>The way this is built, is you'd call this before operating on it.  Something like,</p>

<pre><code>WebElement myElement = waitforElement(By.cssSelector("input#someInput"));
myElement.sendKeys("something");
</code></pre>

<p>This is a proven solution that i've tested and actively use in production-grade regression testing systems.</p>
