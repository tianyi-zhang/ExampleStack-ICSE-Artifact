<p>(Copied from my answer: <a href="https://stackoverflow.com/questions/14479078/smoothscrolltopositionfromtop-is-not-always-working-like-it-should/20997828#20997828">smoothScrollToPositionFromTop() is not always working like it should</a>)</p>

<p><strong>This is a known bug.</strong> See <a href="https://code.google.com/p/android/issues/detail?id=36062" rel="nofollow">https://code.google.com/p/android/issues/detail?id=36062</a></p>

<p>However, I implemented this workaround that deals with all edge cases that might occur:</p>

<p>First call <code>smothScrollToPositionFromTop(position)</code> and then, when scrolling has finished, call <code>setSelection(position)</code>. The latter call corrects the incomplete scrolling by jumping directly to the desired position. Doing so the user still has the impression that it is being animation-scrolled to this position.</p>

<p>I implemented this workaround within two helper methods:</p>

<p><strong>smoothScrollToPosition()</strong></p>

<pre><code>public static void smoothScrollToPosition(final AbsListView view, final int position) {
    View child = getChildAtPosition(view, position);
    // There's no need to scroll if child is already at top or view is already scrolled to its end
    if ((child != null) &amp;&amp; ((child.getTop() == 0) || ((child.getTop() &gt; 0) &amp;&amp; !view.canScrollVertically(1)))) {
        return;
    }

    view.setOnScrollListener(new AbsListView.OnScrollListener() {
        @Override
        public void onScrollStateChanged(final AbsListView view, final int scrollState) {
            if (scrollState == SCROLL_STATE_IDLE) {
                view.setOnScrollListener(null);

                // Fix for scrolling bug
                new Handler().post(new Runnable() {
                    @Override
                    public void run() {
                        view.setSelection(position);
                    }
                });
            }
        }

        @Override
        public void onScroll(final AbsListView view, final int firstVisibleItem, final int visibleItemCount,
                                 final int totalItemCount) { }
    });

    // Perform scrolling to position
    new Handler().post(new Runnable() {
        @Override
        public void run() {
            view.smoothScrollToPositionFromTop(position, 0);
        }
    });
}
</code></pre>

<p><strong>getChildAtPosition()</strong></p>

<pre><code>public static View getChildAtPosition(final AdapterView view, final int position) {
    final int index = position - view.getFirstVisiblePosition();
    if ((index &gt;= 0) &amp;&amp; (index &lt; view.getChildCount()))Â {
        return view.getChildAt(index);
    } else {
        return null;
    }
}
</code></pre>
