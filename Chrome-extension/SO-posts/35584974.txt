<p>I am getting accelerometer data in Wallpaper Service. Here is my code:</p>

<pre><code>public class MyWallpaperService extends WallpaperService {

Context context;

public void onCreate() {
    context = this;
    super.onCreate();
}

public void onDestroy() {
    super.onDestroy();
}

public Engine onCreateEngine() {
    return new MyWallpaperEngine();
}

class MyWallpaperEngine extends Engine implements SensorEventListener {

    private final Handler handler = new Handler();
    private final Runnable drawRunner = new Runnable() {
        @Override
        public void run() {
            draw();
        }
    };
    private boolean visible = true;

    private SensorManager mSensorManager;
    private Sensor mAccelerometer;
    private Display mDisplay;

    private Bitmap mBackground;

    private float mSensorX;
    private float mSensorY;
    private float mSensorZ;

    MyWallpaperEngine() {

        mBackground = BitmapFactory.decodeResource(getResources(), R.drawable.background);

        mSensorManager = (SensorManager) context.getSystemService(Context.SENSOR_SERVICE);
        mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        WindowManager mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        mDisplay = mWindowManager.getDefaultDisplay();

        BitmapFactory.Options opts = new BitmapFactory.Options();
        opts.inDither = true;
        opts.inPreferredConfig = Bitmap.Config.RGB_565;
        mBackground = BitmapFactory.decodeResource(getResources(), R.drawable.grass, opts);
    }

    public void registerSensors() {
        Log.d(TAG, "registerSensors()");
        mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_UI);
    }

    public void unregisterSensors() {
        Log.d(TAG, "unregisterSensors()");
        mSensorManager.unregisterListener(this);
    }

    @Override
     public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() != Sensor.TYPE_ACCELEROMETER)
            return;

        switch (mDisplay.getRotation()) {
            case Surface.ROTATION_0:
                mSensorX = event.values[0];
                mSensorY = event.values[1];
                break;
            case Surface.ROTATION_90:
                mSensorX = -event.values[1];
                mSensorY = event.values[0];
                break;
            case Surface.ROTATION_180:
                mSensorX = -event.values[0];
                mSensorY = -event.values[1];
                break;
            case Surface.ROTATION_270:
                mSensorX = event.values[1];
                mSensorY = -event.values[0];
                break;
        }
        mSensorZ = event.values[2];
        //This is your Accelerometer X,Y,Z values
        Log.d(TAG, "X: " + mSensorX + ", Y: " + mSensorY + ", Z: " + mSensorZ);
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }


    public void onCreate(SurfaceHolder surfaceHolder) {
        super.onCreate(surfaceHolder);
        registerSensors();
    }

    @Override
    public void onVisibilityChanged(boolean visible) {
        this.visible = visible;
        // if screen wallpaper is visible then draw the image otherwise do not draw
        if (visible) {
            handler.post(drawRunner);
        } else {
            handler.removeCallbacks(drawRunner);
        }
    }

    @Override
    public void onSurfaceDestroyed(SurfaceHolder holder) {
        super.onSurfaceDestroyed(holder);
        this.visible = false;
        handler.removeCallbacks(drawRunner);
    }

    public void onOffsetsChanged(float xOffset, float yOffset, float xStep, float yStep, int xPixels, int yPixels) {
        final SurfaceHolder holder = getSurfaceHolder();


            draw();
    }

    void draw() {
        final SurfaceHolder holder = getSurfaceHolder();

        Canvas c = null;
        try {
            c = holder.lockCanvas();
            // clear the canvas
            c.drawColor(Color.BLACK);

            if (c != null) {
                c.drawBitmap(mBackground, 0, 0, null);

            }
        }
        finally {
            if (c != null)
                holder.unlockCanvasAndPost(c);
        }

        handler.removeCallbacks(drawRunner);
        if (visible) {
            handler.postDelayed(drawRunner, 10); // delay 10 mileseconds
        }

    }

    @Override
    public void onDestroy() {
        unregisterSensors();
        super.onDestroy();
    }
}
</code></pre>

<p>}</p>
