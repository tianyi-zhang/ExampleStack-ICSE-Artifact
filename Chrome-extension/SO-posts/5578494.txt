<p>Here is the generic and iterative permutation, kpermutation and combination generator classes that I wrote based on the implementations <a href="http://www.merriampark.com/perm.htm" rel="nofollow">here</a> and <a href="http://www.merriampark.com/comb.htm" rel="nofollow">here</a>. My classes use those as inner classes. They also implement Iterable Interface to be foreachable.</p>

<pre><code> List&lt;String&gt; objects = new ArrayList&lt;String&gt;();
    objects.add("A");
    objects.add("B");
    objects.add("C");

    Permutations&lt;String&gt; permutations = new Permutations&lt;String&gt;(objects);
    for (List&lt;String&gt; permutation : permutations) {
        System.out.println(permutation);
    }

    Combinations&lt;String&gt; combinations = new Combinations&lt;String&gt;(objects, 2);
    for (List&lt;String&gt; combination : combinations) {
        System.out.println(combination);
    }

    KPermutations&lt;String&gt; kPermutations = new KPermutations&lt;String&gt;(objects, 2);
    for (List&lt;String&gt; kPermutation : kPermutations) {
        System.out.println(kPermutation);
    }
</code></pre>

<p>The Combinations class:</p>

<pre><code>public class Combinations&lt;T&gt; implements Iterable&lt;List&lt;T&gt;&gt; {

    CombinationGenerator cGenerator;
    T[] elements;
    int[] indices;

    public Combinations(List&lt;T&gt; list, int n) {
        cGenerator = new CombinationGenerator(list.size(), n);
        elements = (T[]) list.toArray();
    }

    public Iterator&lt;List&lt;T&gt;&gt; iterator() {
        return new Iterator&lt;List&lt;T&gt;&gt;() {

            int pos = 0;

            public boolean hasNext() {
                return cGenerator.hasMore();
            }

            public List&lt;T&gt; next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                indices = cGenerator.getNext();
                List&lt;T&gt; combination = new ArrayList&lt;T&gt;();
                for (int i = 0; i &lt; indices.length; i++) {
                    combination.add(elements[indices[i]]);
                }
                return combination;
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }

    private final class CombinationGenerator {

        private int[] a;
        private int n;
        private int r;
        private BigInteger numLeft;
        private BigInteger total;

        //------------
        // Constructor
        //------------
        public CombinationGenerator(int n, int r) {
            if (n &lt; 1) {
                throw new IllegalArgumentException("Set must have at least one element");
            }
            if (r &gt; n) {
                throw new IllegalArgumentException("Subset length can not be greater than set length");
            }
            this.n = n;
            this.r = r;
            a = new int[r];
            BigInteger nFact = getFactorial(n);
            BigInteger rFact = getFactorial(r);
            BigInteger nminusrFact = getFactorial(n - r);
            total = nFact.divide(rFact.multiply(nminusrFact));
            reset();
        }

        //------
        // Reset
        //------
        public void reset() {
            for (int i = 0; i &lt; a.length; i++) {
                a[i] = i;
            }
            numLeft = new BigInteger(total.toString());
        }

        //------------------------------------------------
        // Return number of combinations not yet generated
        //------------------------------------------------
        public BigInteger getNumLeft() {
            return numLeft;
        }

        //-----------------------------
        // Are there more combinations?
        //-----------------------------
        public boolean hasMore() {
            return numLeft.compareTo(BigInteger.ZERO) == 1;
        }

        //------------------------------------
        // Return total number of combinations
        //------------------------------------
        public BigInteger getTotal() {
            return total;
        }

        //------------------
        // Compute factorial
        //------------------
        private BigInteger getFactorial(int n) {
            BigInteger fact = BigInteger.ONE;
            for (int i = n; i &gt; 1; i--) {
                fact = fact.multiply(new BigInteger(Integer.toString(i)));
            }
            return fact;
        }

        //--------------------------------------------------------
        // Generate next combination (algorithm from Rosen p. 286)
        //--------------------------------------------------------
        public int[] getNext() {

            if (numLeft.equals(total)) {
                numLeft = numLeft.subtract(BigInteger.ONE);
                return a;
            }

            int i = r - 1;
            while (a[i] == n - r + i) {
                i--;
            }
            a[i] = a[i] + 1;
            for (int j = i + 1; j &lt; r; j++) {
                a[j] = a[i] + j - i;
            }

            numLeft = numLeft.subtract(BigInteger.ONE);
            return a;

        }
    }
}
</code></pre>

<p>The Permutations Class: </p>

<pre><code>public class Permutations&lt;T&gt; implements Iterable&lt;List&lt;T&gt;&gt; {

    PermutationGenerator pGenerator;
    T[] elements;
    int[] indices;

    public Permutations(List&lt;T&gt; list) {
        pGenerator = new PermutationGenerator(list.size());
        elements = (T[]) list.toArray();
    }

    public Iterator&lt;List&lt;T&gt;&gt; iterator() {
        return new Iterator&lt;List&lt;T&gt;&gt;() {

            int pos = 0;

            public boolean hasNext() {
                return pGenerator.hasMore();
            }

            public List&lt;T&gt; next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                indices = pGenerator.getNext();
                List&lt;T&gt; permutation = new ArrayList&lt;T&gt;();
                for (int i = 0; i &lt; indices.length; i++) {
                    permutation.add(elements[indices[i]]);
                }
                return permutation;
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }

    private final class PermutationGenerator {

        private int[] a;
        private BigInteger numLeft;
        private BigInteger total;

        //-----------------------------------------------------------
        // Constructor. WARNING: Don't make n too large.
        // Recall that the number of permutations is n!
        // which can be very large, even when n is as small as 20 --
        // 20! = 2,432,902,008,176,640,000 and
        // 21! is too big to fit into a Java long, which is
        // why we use BigInteger instead.
        //----------------------------------------------------------
        public PermutationGenerator(int n) {
            if (n &lt; 1) {
                throw new IllegalArgumentException("Set must have at least one element");
            }
            a = new int[n];
            total = getFactorial(n);
            reset();
        }

        //------
        // Reset
        //------
        public void reset() {
            for (int i = 0; i &lt; a.length; i++) {
                a[i] = i;
            }
            numLeft = new BigInteger(total.toString());
        }

        //------------------------------------------------
        // Return number of permutations not yet generated
        //------------------------------------------------
        public BigInteger getNumLeft() {
            return numLeft;
        }

        //------------------------------------
        // Return total number of permutations
        //------------------------------------
        public BigInteger getTotal() {
            return total;
        }

        //-----------------------------
        // Are there more permutations?
        //-----------------------------
        public boolean hasMore() {
            return numLeft.compareTo(BigInteger.ZERO) == 1;
        }

        //------------------
        // Compute factorial
        //------------------
        private BigInteger getFactorial(int n) {
            BigInteger fact = BigInteger.ONE;
            for (int i = n; i &gt; 1; i--) {
                fact = fact.multiply(new BigInteger(Integer.toString(i)));
            }
            return fact;
        }

        //--------------------------------------------------------
        // Generate next permutation (algorithm from Rosen p. 284)
        //--------------------------------------------------------
        public int[] getNext() {

            if (numLeft.equals(total)) {
                numLeft = numLeft.subtract(BigInteger.ONE);
                return a;
            }

            int temp;

            // Find largest index j with a[j] &lt; a[j+1]

            int j = a.length - 2;
            while (a[j] &gt; a[j + 1]) {
                j--;
            }

            // Find index k such that a[k] is smallest integer
            // greater than a[j] to the right of a[j]

            int k = a.length - 1;
            while (a[j] &gt; a[k]) {
                k--;
            }

            // Interchange a[j] and a[k]

            temp = a[k];
            a[k] = a[j];
            a[j] = temp;

            // Put tail end of permutation after jth position in increasing order

            int r = a.length - 1;
            int s = j + 1;

            while (r &gt; s) {
                temp = a[s];
                a[s] = a[r];
                a[r] = temp;
                r--;
                s++;
            }

            numLeft = numLeft.subtract(BigInteger.ONE);
            return a;

        }
    }
}
</code></pre>

<p>And the KPermutations class that actually using Permutations and Combinations classes:</p>

<pre><code>public class KPermutations&lt;T&gt; implements Iterable&lt;List&lt;T&gt;&gt; {
    Combinations&lt;T&gt; combinations;

    public KPermutations(List&lt;T&gt; list, int k) {
        if (k&lt;1){
            throw new IllegalArgumentException("Subset length k must me at least 1");
        }
        combinations = new Combinations&lt;T&gt;(list, k);
    }

    public Iterator&lt;List&lt;T&gt;&gt; iterator() {
        return new Iterator&lt;List&lt;T&gt;&gt;() {
            Iterator&lt;List&lt;T&gt;&gt; it = combinations.iterator();
            Permutations&lt;T&gt; permutations = new Permutations&lt;T&gt;(combinations.iterator().next());

            // Has more combinations but no more permutation for current combination
            public boolean hasNext() {
                if (combinations.iterator().hasNext() &amp;&amp; !permutations.iterator().hasNext()){
                    permutations = new Permutations&lt;T&gt;(combinations.iterator().next());
                    return true;
                }
                //Has more permutation for current combination
                else if (permutations.iterator().hasNext()){
                    return true;
                }
                // No more combination and permutation
                return false;
            }

            public List&lt;T&gt; next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }
                return permutations.iterator().next();
            }

            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }


}
</code></pre>
