<p>Well, after some time, I first made the <a href="http://stackoverflow.com/a/7044750/2692914">conversion of the RenderedImage to a BufferedImage</a>, then a loop over the RGB values and the thresholding is done. Finally, I encoded the resulting image into a PNG (bit depth=1). This is it:</p>

<pre><code>public byte[]tiffToPng(byte[]tiffBytes) throws IOException {
    SeekableStream stream = new ByteArraySeekableStream(tiffBytes);
    ImageDecoder decoder = ImageCodec.createImageDecoder("tiff", stream, null);
    RenderedImage tiffRenderedImage = decoder.decodeAsRenderedImage(0);

    BufferedImage tiffBufferedImage = toBufferedImage(tiffRenderedImage);
    for (int y = 0; y &lt; tiffBufferedImage.getHeight(); y++) {
        for (int x = 0; x &lt; tiffBufferedImage.getWidth(); x++) {
            int rgb = tiffBufferedImage.getRGB(x, y);
            int a = (rgb&gt;&gt;24)&amp;0xFF;
            int r = (rgb&gt;&gt;16)&amp;0xFF;
            int g = (rgb&gt;&gt;8)&amp;0xFF;
            int b = (rgb&gt;&gt;0)&amp;0xFF;
            if(a == 0xFF &amp;&amp; r == g &amp;&amp; g == b) {
                if(r &lt; 254) {
                    tiffBufferedImage.setRGB(x, y, 0xFF000000);
                } else {
                    tiffBufferedImage.setRGB(x, y, 0xFFFFFFFF);
                }
            }
        }
    }

    PNGEncodeParam pngEncodeParam = PNGEncodeParam.getDefaultEncodeParam(tiffBufferedImage);
    pngEncodeParam.setBitDepth(1);
    ByteArrayOutputStream pngBytesStream = new ByteArrayOutputStream();
    ImageEncoder encoder = ImageCodec.createImageEncoder("png", pngBytesStream, pngEncodeParam);
    encoder.encode(tiffBufferedImage);
    pngBytesStream.flush();
    return pngBytesStream.toByteArray();
}

public BufferedImage toBufferedImage(RenderedImage img) {
        if (img instanceof BufferedImage) {
            return (BufferedImage) img;
        }
        ColorModel cm = img.getColorModel();
        int width = img.getWidth();
        int height = img.getHeight();
        WritableRaster raster = cm.createCompatibleWritableRaster(width, height);
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        Hashtable properties = new Hashtable();
        String[] keys = img.getPropertyNames();
        if (keys != null) {
            for (int i = 0; i &lt; keys.length; i++) {
                properties.put(keys[i], img.getProperty(keys[i]));
            }
        }
        BufferedImage result = new BufferedImage(cm, raster, isAlphaPremultiplied, properties);
        img.copyData(raster);
        return result;
    }
</code></pre>

<p>And this is the final image:</p>

<p><img src="http://i.stack.imgur.com/SOTb3.png" alt="signature succesfully converted PNG 1 bit depth"></p>
