<p>If you know you are going to return two objects, you can also use a generic pair:</p>

<pre><code>public class Pair&lt;A,B&gt; {
    public final A a;
    public final B b;

    public Pair(A a, B b) {
        this.a = a;
        this.b = b;
    }
};
</code></pre>

<p><strong>Edit</strong> A more fully formed implementation of the above: </p>

<pre><code>package util;

public class Pair&lt;A,B&gt; {

    public static &lt;P, Q&gt; Pair&lt;P, Q&gt; makePair(P p, Q q) {
        return new Pair&lt;P, Q&gt;(p, q);
    }

    public final A a;
    public final B b;

    public Pair(A a, B b) {
        this.a = a;
        this.b = b;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((a == null) ? 0 : a.hashCode());
        result = prime * result + ((b == null) ? 0 : b.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        @SuppressWarnings("rawtypes")
        Pair other = (Pair) obj;
        if (a == null) {
            if (other.a != null) {
                return false;
            }
        } else if (!a.equals(other.a)) {
            return false;
        }
        if (b == null) {
            if (other.b != null) {
                return false;
            }
        } else if (!b.equals(other.b)) {
            return false;
        }
        return true;
    }

    public boolean isInstance(Class&lt;?&gt; classA, Class&lt;?&gt; classB) {
        return classA.isInstance(a) &amp;&amp; classB.isInstance(b);
    }

    @SuppressWarnings("unchecked")
    public static &lt;P, Q&gt; Pair&lt;P, Q&gt; cast(Pair&lt;?, ?&gt; pair, Class&lt;P&gt; pClass, Class&lt;Q&gt; qClass) {

        if (pair.isInstance(pClass, qClass)) {
            return (Pair&lt;P, Q&gt;) pair;
        }

        throw new ClassCastException();

    }

}
</code></pre>

<p>Notes, mainly around rustiness with Java &amp; generics:</p>

<ul>
<li>both <code>a</code> and <code>b</code> are immutable. </li>
<li><code>makePair</code> static method helps you with boiler plate typing, which the diamond operator in Java 7 will make less annoying. There's some work to make this really nice re: generics, but it should be ok-ish now. (c.f. PECS)</li>
<li><code>hashcode</code> and <code>equals</code> are generated by eclipse.</li>
<li>the compile time casting in the <code>cast</code> method is ok, but doesn't seem quite right.</li>
<li>I'm not sure if the wildcards in <code>isInstance</code> are necessary.</li>
<li>I've just written this in response to comments, for illustration purposes only.</li>
</ul>
