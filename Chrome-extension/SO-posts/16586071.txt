<blockquote>
  <p><strong>Takepicture Button onClickListener:</strong></p>
</blockquote>

<pre><code>TakePicture.setOnClickListener(new OnClickListener() {

        @Override
        public void onClick(View v) {

            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
            File file = new File(Environment.getExternalStorageDirectory().getPath(), "MyPic-"+ System.currentTimeMillis() + ".jpg");
            SelectedImage = Uri.fromFile(file);
            intent.putExtra(MediaStore.EXTRA_OUTPUT, SelectedImage);
            startActivityForResult(intent,CAMERA_PIC_REQUEST);

        }
    });
</code></pre>

<blockquote>
  <p><strong>Select From Gallery Button onClickListener:</strong></p>
</blockquote>

<pre><code>SelectfromGallery.setOnClickListener(new OnClickListener() {

        @Override
        public void onClick(View v) {

             Intent intent = new Intent();
             intent.setType("image/*");
             intent.setAction(Intent.ACTION_GET_CONTENT);
             startActivityForResult(Intent.createChooser(intent,"Select Picture"), RESULT_LOAD_IMAGE);

        }
    });
</code></pre>

<blockquote>
  <p><strong>onActivityResult:</strong></p>
</blockquote>

<pre><code>@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);

    if (requestCode == RESULT_LOAD_IMAGE &amp;&amp; resultCode == RESULT_OK &amp;&amp; null != data) {

        SelectedImage = data.getData();
        String filePath = null;

        try {
            // IO FILE Manager
            String filemanagerstring = SelectedImage.getPath();

            // MEDIA GALLERY
            String selectedImagePath = getPath(SelectedImage);

            if (selectedImagePath != null) {
                filePath = selectedImagePath;
            } else if (filemanagerstring != null) {
                filePath = filemanagerstring;
            } else {
                Toast.makeText(getApplicationContext(), "Unknown path",
                        Toast.LENGTH_LONG).show();
                Log.e("Bitmap", "Unknown path");
            }

            if (filePath != null) {
                decodeFile(filePath);   
            } else {
                bitmap = null;
            }
            FROM_GALLERY = true;

        } catch (Exception e) {
            Log.e("Uploaderror", e.getLocalizedMessage());
        }
    }
    else if(requestCode==CAMERA_PIC_REQUEST &amp;&amp; resultCode == RESULT_OK){

        /*//SelectedImage = data.getData();
        Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
        ProfilePic.setImageBitmap(thumbnail);*/
        String filePath = null;
        try {
            // OI FILE Manager
            String filemanagerstring = SelectedImage.getPath();

            // MEDIA GALLERY
            String selectedImagePath = getPath(SelectedImage);

            if (selectedImagePath != null) {
                filePath = selectedImagePath;
            } else if (filemanagerstring != null) {
                filePath = filemanagerstring;
            } else {
                Toast.makeText(getApplicationContext(), "Unknown path",
                        Toast.LENGTH_LONG).show();
                Log.e("Bitmap", "Unknown path");
            }

            if (filePath != null) {
                decodeFile(filePath);
                FROM_GALLERY = false;
            } else {
                bitmap = null;
            }

        } catch (Exception e) {
            Log.e("error:", e.getLocalizedMessage());
        }

    }
    else if (resultCode == Activity.RESULT_CANCELED) 
      {
        Log.e("STATUS:", "Selecting picture cancelled"); 
      } 
}
</code></pre>

<blockquote>
  <p><strong>decodeFile method:</strong></p>
</blockquote>

<pre><code>   public void decodeFile(String filePath) {
    // Decode image size
    BitmapFactory.Options o = new BitmapFactory.Options();
    o.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(filePath, o);

    // The new size we want to scale to
    final int REQUIRED_SIZE = 1024;

    // Find the correct scale value. It should be the power of 2.
    int width_tmp = o.outWidth, height_tmp = o.outHeight;
    int scale = 1;
    while (true) {
        if (width_tmp &lt; REQUIRED_SIZE &amp;&amp; height_tmp &lt; REQUIRED_SIZE)
            break;
        width_tmp /= 2;
        height_tmp /= 2;
        scale *= 2;
    }

    // Decode with inSampleSize
    BitmapFactory.Options o2 = new BitmapFactory.Options();
    o2.inSampleSize = scale;
    bitmap = BitmapFactory.decodeFile(filePath, o2);

    ProfilePic.setImageBitmap(bitmap);
}
</code></pre>

<p>here you go. My complete code to achieve that objective. I couldn't do thorough testing as i had limited devices. So, can't say for sure that this would work on all devices. if you find out a solution for your issue or if this code works then let me know. Thanks. Happy coding.</p>
