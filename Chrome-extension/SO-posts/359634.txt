<p>I don't believe there's anything built into Java to do it faster and still reliably, assuming that later on you'll want to actually parse it with Double.valueOf (or similar).</p>

<p>I'd use Double.parseDouble instead of Double.valueOf to avoid creating a Double unnecessarily, <em>and</em> you can also get rid of blatantly silly numbers quicker than the exception will by checking for digits, e/E, - and . beforehand. So, something like:</p>

<pre><code>public boolean isDouble(String value)
{        
    boolean seenDot = false;
    boolean seenExp = false;
    boolean justSeenExp = false;
    boolean seenDigit = false;
    for (int i=0; i &lt; value.length(); i++)
    {
        char c = value.charAt(i);
        if (c &gt;= '0' &amp;&amp; c &lt;= '9')
        {
            seenDigit = true;
            continue;
        }
        if ((c == '-' || c=='+') &amp;&amp; (i == 0 || justSeenExp))
        {
            continue;
        }
        if (c == '.' &amp;&amp; !seenDot)
        {
            seenDot = true;
            continue;
        }
        justSeenExp = false;
        if ((c == 'e' || c == 'E') &amp;&amp; !seenExp)
        {
            seenExp = true;
            justSeenExp = true;
            continue;
        }
        return false;
    }
    if (!seenDigit)
    {
        return false;
    }
    try
    {
        Double.parseDouble(value);
        return true;
    }
    catch (NumberFormatException e)
    {
        return false;
    }
}
</code></pre>

<p>Note that despite taking a couple of tries, this <em>still</em> doesn't cover "NaN" or hex values. Whether you want those to pass or not depends on context.</p>

<p>In my experience regular expressions are slower than the hard-coded check above.</p>
