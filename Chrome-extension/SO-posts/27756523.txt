<p>My version of binary search algorithm implementation in <strong>Java</strong>:</p>

<pre><code>/**
 * Works only for arrays with NO duplicates.
 * Work also for zero-shifted array, e.g fully sorted, when shift = 0.
 */
public static int searchInShiftedArr(int[] arr, int key) {
    if (arr == null || arr.length == 0) {
        return -1;
    }
    int low = 0;
    int high = arr.length - 1;
    int mid; // declared outside loop to avoid constant memory allocation for this variable
    while (low &lt;= high) {
        mid = (low + high) &gt;&gt;&gt; 1; // same as "(low + high) / 2", but avoid negative overflow and should be faster than "low + (high - low)/2"
        if (arr[mid] == key) {
            return mid;
        }
        if (arr[low] &lt;= arr[mid]) { // means left half of the array is sorted
            if (arr[low] &lt;= key &amp;&amp; key &lt; arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        } else { // means right half of the array is sorted
            if (arr[mid] &lt; key &amp;&amp; key &lt;= arr[high]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
    }
    return -1;
}
</code></pre>

<p>Code <strong>successfully passed 5000 TestCases</strong>, so I think it's production ready.</p>
