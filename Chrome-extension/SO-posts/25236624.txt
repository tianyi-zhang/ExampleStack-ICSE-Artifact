<p>You can use <code>AsyncTask</code> class, where you read your data in <code>doInBackground()</code> return the <code>CharSequence</code> and do the dialog.show() in <code>onPostExecute()</code>.</p>

<p>EDIT:</p>

<p>heres what you can do,</p>

<p>create a class</p>

<pre><code>private static class MyAsyncClass extends AsyncTask&lt;Void,Void,CharSequence &gt; {

    Activity activity;
    ProgressDialog dialog 

    public MyAsyncClass(Activity activity){
        this.activity = activity;
    }

    @Override
    protected void onPreExecute() {
        dialog = new ProgressDialog(activity);
        dialog.setMessage("Reading data");
        dialog.setCancelable(false);
        dialog.show();
    }

    @Override
    protected CharSequence doInBackground(Void... params) {
        return readEula(activity);
    }

    protected void onPostExecute(CharSequence data) {
        if(dialog!=null &amp;&amp; dialog.isShowing())
                dialog.dismiss();

        final AlertDialog.Builder builder = new AlertDialog.Builder(
                activity);
        Log.d(TAG, "insideEulaLaunch");
        builder.setTitle(R.string.eula_title);
        builder.setCancelable(true);
        builder.setPositiveButton(R.string.eula_accept,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        prefs.setEulaStatus(context, true);
                        if (activity instanceof OnEulaAgreedTo) {
                            ((OnEulaAgreedTo) activity).onEulaAgreedTo();

                        }

                    }
                });
        builder.setNegativeButton(R.string.eula_refuse,
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        refuse(activity);

                    }
                });
        builder.setOnCancelListener(new DialogInterface.OnCancelListener() {
            public void onCancel(DialogInterface dialog) {
                refuse(activity);
            }
        });

        builder.setMessage(data); 
        builder.create().show();
    }
}
</code></pre>

<p>then call this class as,</p>

<pre><code>if (!prefs.getEulaStatus(context)) {
    MyAsyncClass myAsyncClass = new MyAsyncClass(activity);
    myAsyncClass.execute();
}
</code></pre>

<p><strong>Correction to your Edit:</strong></p>

<ol>
<li><p>in your Eula class,<br>
change this,</p>

<p>MyAsync async= new MyAsync(activity, new TaskCompleteListner() {
        public boolean onComplete(String result) {
            builder.setMessage(data);
            builder.create().show();
            return false;
          }
        }) ; </p>

<pre><code>    MyAsync async= new MyAsync(this, activity) ; 
    async.excecute();
</code></pre></li>
</ol>

<p>to this, </p>

<pre><code>MyAsync async= new MyAsync(activity, new TaskCompleteListner() {
        public boolean onComplete(String result) {
            builder.setMessage(data);
            builder.create().show();
            return false;
          }
        }) ; 

        async.excecute();
</code></pre>

<ol>
<li><p>in your Async class,</p>

<p>change your constructor to,</p>

<p>public MyAsync(Activity activity, TaskCompleteListner taskCompleteListner) {
    this.taskCompleteListner = taskCompleteListner;
    this.activity=activity;
}</p></li>
</ol>
