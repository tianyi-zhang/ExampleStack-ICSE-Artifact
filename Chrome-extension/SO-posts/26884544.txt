<p>You can use   </p>

<pre><code>unregisterReceiver(nameofyourbroadcastreceiver);
</code></pre>

<p>Sample Code</p>

<pre><code>public class MyActivity extends Activity
{
  private final BroadcastReceiver mybroadcast = new SomeBroadcastReceiver();

  public void onResume()
  {
    IntentFilter filter = new IntentFilter();
    filter.addAction("android.provider.Telephony.SMS_RECEIVED");
    registerReceiver(mybroadcast, filter);  

  }

  public void onPause()
  {
    unregisterReceiver(mybroadcast);
  }
}
</code></pre>

<p>Your code:</p>

<pre><code>IntentFilter filter = new IntentFilter("SENT");

BroadcastReceiver br =  new BroadcastReceiver() {

    @Override
    public void onReceive (Context context, Intent intent) {

        switch (getResultCode())
           {
               case Activity.RESULT_OK:
                  Toast.makeText(getBaseContext(), "SMS sent waiting room", 
                           Toast.LENGTH_SHORT).show();
                  unregisterReceiver(br); 
                   break;
               case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
                   Toast.makeText(getBaseContext(), "Generic failure", 
                           Toast.LENGTH_SHORT).show();
                   break;
               case SmsManager.RESULT_ERROR_NO_SERVICE:
                   Toast.makeText(getBaseContext(), "No service", 
                           Toast.LENGTH_SHORT).show();
                   break;
               case SmsManager.RESULT_ERROR_NULL_PDU:
                   Toast.makeText(getBaseContext(), "Null PDU", 
                           Toast.LENGTH_SHORT).show();
                   break;
               case SmsManager.RESULT_ERROR_RADIO_OFF:
                   Toast.makeText(getBaseContext(), "No Network Detected", 
                           Toast.LENGTH_SHORT).show();
                   break;
           }

    }
};

registerReceiver (br, filter);
</code></pre>
