<p>I solved by myself so, here is the working solution for an expandable layout.</p>

<p>Use: </p>

<pre><code>addAction(YourLayout, LayoutToBeExpanded)
</code></pre>

<p>Function:</p>

<pre><code>    public void addAction(final View layout, final View summary) {



    layout.setOnClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {
            if (summary.getVisibility() == View.GONE) {
                expand(summary);
            } else {
                collapse(summary);
            }
        }
    });
}

private void expand(View summary) {
    //set Visible
    summary.setVisibility(View.VISIBLE);

            final int widthSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
            summary.measure(widthSpec, 300);

            mAnimator = slideAnimator(0, 300, summary);

    mAnimator.start();
}

private void collapse(final View summary) {
    int finalHeight = summary.getHeight();

    ValueAnimator mAnimator = slideAnimator(finalHeight, 0, summary);

    mAnimator.addListener(new Animator.AnimatorListener() {
        @Override
        public void onAnimationEnd(Animator animator) {
            //Height=0, but it set visibility to GONE
            summary.setVisibility(View.GONE);
        }

        @Override
        public void onAnimationStart(Animator animator) {
        }

        @Override
        public void onAnimationCancel(Animator animator) {
        }

        @Override
        public void onAnimationRepeat(Animator animator) {
        }
    });
    mAnimator.start();
}


private ValueAnimator slideAnimator(int start, int end, final View summary) {

    ValueAnimator animator = ValueAnimator.ofInt(start, end);


    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
        @Override
        public void onAnimationUpdate(ValueAnimator valueAnimator) {
            //Update Height
            int value = (Integer) valueAnimator.getAnimatedValue();

            ViewGroup.LayoutParams layoutParams = summary.getLayoutParams();
            layoutParams.height = value;
            summary.setLayoutParams(layoutParams);
        }
    });
    return animator;
}
</code></pre>

<p>If you would like to also collapse the "mLayoutToBeExpanded" on self click use this:</p>

<pre><code>    public void addAction(final View layout, final View summary) {
    layout.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if (summary.getVisibility() == View.GONE) {
                expand(summary);
            } else {
                collapse(summary);
            }
        }
    });

    summary.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View view) {
            if (summary.getVisibility() == View.VISIBLE) {
                collapse(summary);
            } else {
                //nothing
            }
        }
    });
}
</code></pre>
