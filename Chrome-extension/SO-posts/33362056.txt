<p>Or simpler option is to override the <code>getEditorComponent()</code> method of <code>BasicComboBoxEditor</code>:</p>

<pre><code>import java.awt.*;
import javax.swing.*;
import javax.swing.plaf.LayerUI;
import javax.swing.plaf.basic.BasicComboBoxEditor;
//import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.text.*;

public class ComboEditorJLayerTest {
  public JComponent makeUI() {
    JComboBox&lt;String&gt; comboBox = new JComboBox&lt;&gt;(new String[] {"aaaaaaa", "bbb"});
    comboBox.setEditable(true);
    comboBox.setEditor(new BasicComboBoxEditor() {
      private Component editorComponent;
      //@see javax/swing/plaf/synth/SynthComboBoxUI.java
      @Override public JTextField createEditorComponent() {
        JTextField f = new JTextField("", 9);
        f.setName("ComboBox.textField");
        return f;
      }
      @Override public Component getEditorComponent() {
        if (editorComponent == null) {
          JTextComponent tc = (JTextComponent) super.getEditorComponent();
          editorComponent = new JLayer&lt;JTextComponent&gt;(tc, new ValidationLayerUI());
        }
        return editorComponent;
      }
    });
    JPanel p = new JPanel();
    p.add(comboBox);
    return p;
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() { 
    try {
      for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(laf.getName())) {
          UIManager.setLookAndFeel(laf.getClassName());
        }
      }
    }catch(Exception e) {
      e.printStackTrace();
    }
    JFrame f = new JFrame();
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new ComboEditorJLayerTest().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}

//@see http://docs.oracle.com/javase/tutorial/uiswing/examples/misc/FieldValidatorProject/src/FieldValidator.java
class ValidationLayerUI extends LayerUI&lt;JTextComponent&gt; {
  @Override public void paint(Graphics g, JComponent c) {
    super.paint(g, c);
    JLayer jlayer = (JLayer) c;
    JTextComponent tc = (JTextComponent) jlayer.getView();
    if (tc.getText().length() &gt; 6) {
      Graphics2D g2 = (Graphics2D) g.create();
      g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
      int w = c.getWidth();
      int h = c.getHeight();
      int s = 8;
      int pad = 4;
      int x = w - pad - s;
      int y = (h - s) / 2;
      g2.setPaint(Color.RED);
      g2.fillRect(x, y, s + 1, s + 1);
      g2.setPaint(Color.WHITE);
      g2.drawLine(x, y, x + s, y + s);
      g2.drawLine(x, y + s, x + s, y);
      g2.dispose();
    }
  }
}
</code></pre>
