<p>In Java 8 you can have your sort method take a function interface. This is modified code from OpenJDK (Copyright 1997-2007 Sun Microsystems, Inc. <a href="http://www.gnu.org/licenses/gpl-2.0.html" rel="nofollow">GPLv2</a>):</p>

<pre><code>import java.util.function.LongBinaryOperator;

public class ArraySort {
    public static void sort(long[] x, LongBinaryOperator op) {
        sort1(x, 0, x.length, op);
    }

    private static void sort1(long x[], int off, int len, LongBinaryOperator op) {
        if (len &lt; 7) {
            for (int i=off; i&lt;len+off; i++)
                // Use custom comparator for insertion sort fallback
                for (int j=i; j&gt;off &amp;&amp; (op.applyAsLong(x[j-1], x[j]) &gt; 0); j--)
                    swap(x, j, j-1);
            return;
        }

        int m = off + (len &gt;&gt; 1);
        if (len &gt; 7) {
            int l = off;
            int n = off + len - 1;
            if (len &gt; 40) {
                int s = len/8;
                l = med3(x, l,     l+s, l+2*s);
                m = med3(x, m-s,   m,   m+s);
                n = med3(x, n-2*s, n-s, n);
            }
            m = med3(x, l, m, n);
        }
        long v = x[m];

        int a = off, b = a, c = off + len - 1, d = c;
        while(true) {
            // Use custom comparator for checking elements
            while (b &lt;= c &amp;&amp; (op.applyAsLong(x[b], v) &lt;= 0)) {
                if (x[b] == v)
                    swap(x, a++, b);
                b++;
            }
            // Use custom comparator for checking elements
            while (c &gt;= b &amp;&amp; (op.applyAsLong(x[c], v) &gt;= 0)) {
                if (x[c] == v)
                    swap(x, c, d--);
                c--;
            }
            if (b &gt; c)
                break;
            swap(x, b++, c--);
        }

        int s, n = off + len;
        s = Math.min(a-off, b-a  );  vecswap(x, off, b-s, s);
        s = Math.min(d-c,   n-d-1);  vecswap(x, b,   n-s, s);

        if ((s = b-a) &gt; 1)
            sort1(x, off, s, op);
        if ((s = d-c) &gt; 1)
            sort1(x, n-s, s, op);
    }

    private static void swap(long x[], int a, int b) {
        long t = x[a];
        x[a] = x[b];
        x[b] = t;
    }

    private static void vecswap(long x[], int a, int b, int n) {
        for (int i=0; i&lt;n; i++, a++, b++)
            swap(x, a, b);
    }

    private static int med3(long x[], int a, int b, int c) {
        return (x[a] &lt; x[b] ?
                (x[b] &lt; x[c] ? b : x[a] &lt; x[c] ? c : a) :
                (x[b] &gt; x[c] ? b : x[a] &gt; x[c] ? c : a));
    }
}
</code></pre>

<p>And call it with lambdas or anything else implementing the <code>LongBinaryOperator</code> interface:</p>

<pre><code>import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        long x[] = {5, 5, 7, 1, 2, 5, 8, 9, 23, 5, 32, 45, 76};
        ArraySort.sort(x, (a, b) -&gt; b - a);         // sort descending
        System.out.println(Arrays.toString(x));
    }
}
</code></pre>

<p>Output:</p>

<pre><code>[76, 45, 32, 23, 9, 8, 7, 5, 5, 5, 5, 2, 1]
</code></pre>
