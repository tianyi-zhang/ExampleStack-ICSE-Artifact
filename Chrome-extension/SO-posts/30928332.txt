<ol>
<li><code>while (low &lt; high)</code> is used when you're searching the range <code>[low, high)</code>. When updating <code>high</code>, use <code>high = mid</code>. When updating <code>low</code>, use <code>low = mid + 1</code>.</li>
<li><code>while (high - low &gt; 1)</code> is used when you're searching the range <code>(low, high)</code>. When updating <code>high</code>, use <code>high = mid</code>. When updating <code>low</code>, use <code>low = mid</code>.</li>
<li><code>while (low &lt;= high)</code> is used when you're searching the range <code>[low, high]</code>. When updating <code>high</code>, use <code>high = mid - 1</code>. When updating <code>low</code>, use <code>low = mid + 1</code>.</li>
</ol>

<p>Code below:</p>

<pre><code>public class BinarySearch {
    public static void main(String[] args) {
        Integer[] nums = { 4, 9, 12, 18, 20, 26, 28, 29, 55 };

        for (int i = 0; i &lt; nums.length; ++i) {
            System.out.println(binarySearch1(nums, nums[i]));
            System.out.println(binarySearch2(nums, nums[i]));
            System.out.println(binarySearch3(nums, nums[i]));
        }
    }

    public static &lt;T extends Comparable&lt;T&gt;&gt; int binarySearch1(T[] array, T value) {
        final int NOT_FOUND = -1;
        int low = 0;
        int high = array.length;

        while (low &lt; high) {
            int mid = low + (high - low) / 2;
            int comparison = array[mid].compareTo(value);

            if (comparison == 0) {
                return mid;
            } else if (comparison &gt; 0) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        return NOT_FOUND;
    }

    public static &lt;T extends Comparable&lt;T&gt;&gt; int binarySearch2(T[] array, T value) {
        final int NOT_FOUND = -1;
        int low = -1;
        int high = array.length;

        while (high - low &gt; 1) {
            int mid = low + (high - low) / 2;
            int comparison = array[mid].compareTo(value);

            if (comparison == 0) {
                return mid;
            } else if (comparison &gt; 0) {
                high = mid;
            } else {
                low = mid;
            }
        }

        return NOT_FOUND;
    }

    public static &lt;T extends Comparable&lt;T&gt;&gt; int binarySearch3(T[] array, T value) {
        final int NOT_FOUND = -1;
        int low = 0;
        int high = array.length - 1;

        while (low &lt;= high) {
            int mid = low + (high - low) / 2;
            int comparison = array[mid].compareTo(value);

            if (comparison == 0) {
                return mid;
            } else if (comparison &gt; 0) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return NOT_FOUND;
    }
}
</code></pre>
