<p>Here, this is my code, which work for me:</p>

<pre><code>public class MainActivity extends Activity
{
    AudioRecord record = null;
    AudioTrack track = null;

    boolean isRecording;
    int sampleRate = 44100;

    Button startRecord, stopRecord, playRecord = null;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        setVolumeControlStream(AudioManager.MODE_IN_COMMUNICATION);
        startRecord = (Button) findViewById(R.id.start_recording);
        stopRecord = (Button) findViewById(R.id.stop_recording);
        playRecord = (Button) findViewById(R.id.play_recording);
        startRecord.setOnClickListener(new StartRecordListener());
        stopRecord.setOnClickListener(new StopRecordListener());
        playRecord.setOnClickListener(new PlayRecordListener());

        stopRecord.setEnabled(false);
    }

    private void startRecord()
    {
        File recordFile = new File(Environment.getExternalStorageDirectory(), "Record.pcm");
        try
        {
            recordFile.createNewFile();

            OutputStream outputStream = new FileOutputStream(recordFile);
            BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(outputStream);
            DataOutputStream dataOutputStream = new DataOutputStream(bufferedOutputStream);

            int minBufferSize = AudioRecord.getMinBufferSize(sampleRate, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);

            short[] audioData = new short[minBufferSize];

            record = new AudioRecord(MediaRecorder.AudioSource.MIC, sampleRate, AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT,
                                     minBufferSize);
            record.startRecording();

            while (isRecording)
            {
                int numberOfShort = record.read(audioData, 0, minBufferSize);
                for (int i = 0; i &lt; numberOfShort; i++)
                {
                    dataOutputStream.writeShort(audioData[i]);
                }
            }
            record.stop();
            dataOutputStream.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public void playRecord()
    {
        File recordFile = new File(Environment.getExternalStorageDirectory(), "Record.pcm");

        int shortSizeInBytes = Short.SIZE / Byte.SIZE;
        int bufferSizeInBytes = (int) (recordFile.length() / shortSizeInBytes);
        short[] audioData = new short[bufferSizeInBytes];
        try
        {
            InputStream inputStream = new FileInputStream(recordFile);
            BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream);
            DataInputStream dataInputStream = new DataInputStream(bufferedInputStream);

            int i = 0;
            while (dataInputStream.available() &gt; 0)
            {
                audioData[i] = dataInputStream.readShort();
                i++;
            }

            dataInputStream.close();

            track = new AudioTrack(AudioManager.STREAM_MUSIC, sampleRate, AudioFormat.CHANNEL_OUT_MONO, AudioFormat.ENCODING_PCM_16BIT,
                                   bufferSizeInBytes, AudioTrack.MODE_STREAM);

            track.play();
            track.write(audioData, 0, bufferSizeInBytes);
        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }


    public class StartRecordListener implements View.OnClickListener
    {
        @Override
        public void onClick(View v)
        {
            Thread recordThread = new Thread(new Runnable()
            {
                @Override
                public void run()
                {
                    isRecording = true;
                    MainActivity.this.startRecord();
                }
            });
            recordThread.start();
            startRecord.setEnabled(false);
            stopRecord.setEnabled(true);
        }
    }

    public class StopRecordListener implements View.OnClickListener
    {
        @Override
        public void onClick(View v)
        {
            isRecording = false;
            startRecord.setEnabled(true);
            stopRecord.setEnabled(false);
        }
    }

    public class PlayRecordListener implements View.OnClickListener
    {
        @Override
        public void onClick(View v)
        {
            MainActivity.this.playRecord();
        }
    }
}
</code></pre>

<p>XML layout contains 3 buttons with the following ids: start_recording, stop_recording, play_recording
</p>

<p>And add to following permissions:</p>

<pre><code>&lt;uses-permission android:name="android.permission.RECORD_AUDIO"/&gt;
&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;
</code></pre>

<p>Good luck and I hope it's okay for you, that I'm using 3 buttons in the code above.</p>
