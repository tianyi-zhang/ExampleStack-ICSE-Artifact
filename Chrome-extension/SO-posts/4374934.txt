<p><em><strong>Part 1: Creating a WEP WiFi configuration programatically</em></strong>  </p>

<p>This is pretty much straightforward, <a href="http://developer.android.com/reference/android/net/wifi/WifiConfiguration.html">WifiConfiguration</a> exposes the interface to create the same. Here is the sample code:</p>

<pre><code>void saveWepConfig()
{
    WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);
    WifiConfiguration wc = new WifiConfiguration(); 
    wc.SSID = "\"SSID_NAME\""; //IMP! This should be in Quotes!!
    wc.hiddenSSID = true;
    wc.status = WifiConfiguration.Status.DISABLED;     
    wc.priority = 40;
    wc.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
    wc.allowedProtocols.set(WifiConfiguration.Protocol.RSN); 
    wc.allowedProtocols.set(WifiConfiguration.Protocol.WPA);
    wc.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);
    wc.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);
    wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);
    wc.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);
    wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);
    wc.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);

    wc.wepKeys[0] = "\"aaabbb1234\""; //This is the WEP Password
    wc.wepTxKeyIndex = 0;

    WifiManager  wifiManag = (WifiManager) this.getSystemService(WIFI_SERVICE);
    boolean res1 = wifiManag.setWifiEnabled(true);
    int res = wifi.addNetwork(wc);
    Log.d("WifiPreference", "add Network returned " + res );
    boolean es = wifi.saveConfiguration();
    Log.d("WifiPreference", "saveConfiguration returned " + es );
    boolean b = wifi.enableNetwork(res, true);   
    Log.d("WifiPreference", "enableNetwork returned " + b );  

}
</code></pre>

<p>Following the permissions needed in AndroidManifest.xml</p>

<pre><code>    &lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE"&gt;
    &lt;/uses-permission&gt;
    &lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"&gt;
    &lt;/uses-permission&gt;
    &lt;uses-permission android:name="android.permission.CHANGE_WIFI_STATE"&gt;
    &lt;/uses-permission&gt;
</code></pre>

<p><em><strong>Part 2: Read a WEP WiFi configuration programatically</em></strong><br>
Straighforward again. Here is the sample code:</p>

<pre><code>    void readWepConfig()
    { 
        WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE); 
        List&lt;WifiConfiguration&gt; item = wifi.getConfiguredNetworks();
        int i = item.size();
        Log.d("WifiPreference", "NO OF CONFIG " + i );
        Iterator&lt;WifiConfiguration&gt; iter =  item.iterator();
        WifiConfiguration config = item.get(0);
        Log.d("WifiPreference", "SSID" + config.SSID);
        Log.d("WifiPreference", "PASSWORD" + config.preSharedKey);
        Log.d("WifiPreference", "ALLOWED ALGORITHMS");
        Log.d("WifiPreference", "LEAP" + config.allowedAuthAlgorithms.get(AuthAlgorithm.LEAP));
        Log.d("WifiPreference", "OPEN" + config.allowedAuthAlgorithms.get(AuthAlgorithm.OPEN));
        Log.d("WifiPreference", "SHARED" + config.allowedAuthAlgorithms.get(AuthAlgorithm.SHARED));
        Log.d("WifiPreference", "GROUP CIPHERS");
        Log.d("WifiPreference", "CCMP" + config.allowedGroupCiphers.get(GroupCipher.CCMP));
        Log.d("WifiPreference", "TKIP" + config.allowedGroupCiphers.get(GroupCipher.TKIP));
        Log.d("WifiPreference", "WEP104" + config.allowedGroupCiphers.get(GroupCipher.WEP104));
        Log.d("WifiPreference", "WEP40" + config.allowedGroupCiphers.get(GroupCipher.WEP40));
        Log.d("WifiPreference", "KEYMGMT");
        Log.d("WifiPreference", "IEEE8021X" + config.allowedKeyManagement.get(KeyMgmt.IEEE8021X));
        Log.d("WifiPreference", "NONE" + config.allowedKeyManagement.get(KeyMgmt.NONE));
        Log.d("WifiPreference", "WPA_EAP" + config.allowedKeyManagement.get(KeyMgmt.WPA_EAP));
        Log.d("WifiPreference", "WPA_PSK" + config.allowedKeyManagement.get(KeyMgmt.WPA_PSK));
        Log.d("WifiPreference", "PairWiseCipher");
        Log.d("WifiPreference", "CCMP" + config.allowedPairwiseCiphers.get(PairwiseCipher.CCMP));
        Log.d("WifiPreference", "NONE" + config.allowedPairwiseCiphers.get(PairwiseCipher.NONE));
        Log.d("WifiPreference", "TKIP" + config.allowedPairwiseCiphers.get(PairwiseCipher.TKIP));
        Log.d("WifiPreference", "Protocols");
        Log.d("WifiPreference", "RSN" + config.allowedProtocols.get(Protocol.RSN));
        Log.d("WifiPreference", "WPA" + config.allowedProtocols.get(Protocol.WPA));
        Log.d("WifiPreference", "WEP Key Strings");
        String[] wepKeys = config.wepKeys;
        Log.d("WifiPreference", "WEP KEY 0" + wepKeys[0]);
        Log.d("WifiPreference", "WEP KEY 1" + wepKeys[1]);
        Log.d("WifiPreference", "WEP KEY 2" + wepKeys[2]);
        Log.d("WifiPreference", "WEP KEY 3" + wepKeys[3]);
    }
</code></pre>

<p><em><strong>Part 3: Read a EAP WiFi Configuration programatically</em></strong><br>
Now this is tricky. You can find the code which saves a EAP WiFi configuration through the vanilla Android UI in <a href="http://hi-android.info/src/com/android/settings/wifi/WifiDialog.java.html">WifiDialog.java</a>. Well easy enough We can use the same code in our Application, Well NO! If you happen to try this you will get errors saying cannot find the symbols <code>eap</code>, <code>phase</code>, <code>client_cert</code> and so on. A little detailed investigation tells us <a href="http://www.kiwidoc.com/java/l/p/android/android/5/p/android.net.wifi/c/WifiConfiguration">EnterpriseField</a><code>is private</code> inside <code>WiFiConfiguration</code> class and all the symbols we cannot find are of the type <code>EnterpriseField</code>. Well we've hit a roadblock, We need these fields for reading/saving a EAP config but we don't have programmatic access to them!  </p>

<p><em><strong><code>Java Reflection API</code> to the rescue</em></strong>
Well I am not a Java expert so I wont be getting in to details of Reflection API as such and you can google for tutorials or get more information <a href="http://download.oracle.com/javase/tutorial/reflect/index.html">here</a>.
To keep it Short and Sweet, Reflection API allows you to inspect classes, interfaces, fields and methods at runtime, without knowing the names of the classes, methods etc. at compile time. It is also possible to instantiate new objects, invoke methods and get/set field values using reflection.And, Importantly <strong><em>Reflection can help you access private data members inside a class</em></strong> Well this is what we need don't we? :)  </p>

<p>Let's check the code example now which shows how to read a EAP WiFi configuration using Reflection Api. As a bonus the snippet will log the config to a file and save it on the SD Card....pretty slick ..eh ;) A little bit of overview of Reflection Api and I am sure grasping the code below is easy.</p>

<pre><code>    private static final String INT_PRIVATE_KEY = "private_key";
    private static final String INT_PHASE2 = "phase2";
    private static final String INT_PASSWORD = "password";
    private static final String INT_IDENTITY = "identity";
    private static final String INT_EAP = "eap";
    private static final String INT_CLIENT_CERT = "client_cert";
    private static final String INT_CA_CERT = "ca_cert";
    private static final String INT_ANONYMOUS_IDENTITY = "anonymous_identity";
    final String INT_ENTERPRISEFIELD_NAME = "android.net.wifi.WifiConfiguration$EnterpriseField";
</code></pre>

<p>This is the code to create a logfile on to SD card before calling the <code>readEapConfig()</code> function.</p>

<pre><code>        BufferedWriter out = null;
        try 
        {
            File root = Environment.getExternalStorageDirectory();
            Toast toast = Toast.makeText(this, "SD CARD mounted and writable? " + root.canWrite(), 5000);
            toast.show();
            if (root.canWrite())
            {
                File gpxfile = new File(root, "ReadConfigLog.txt");
                FileWriter gpxwriter = new FileWriter(gpxfile);
                out = new BufferedWriter(gpxwriter);
                out.write("Hello world");
                //out.close();
            }
        } catch (IOException e) 
        {
            Toast toast = Toast.makeText(this, "Problem reading SD CARD", 3000);
            Toast toast2 = Toast.makeText(this, "Please take logs using Logcat", 5000);
            Log.e("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "Could not write file " + e.getMessage());
        }
</code></pre>

<p>Now the <code>readEapConfig()</code> function itself: </p>

<pre><code>    void readEapConfig(BufferedWriter out)
    {
        /*Get the WifiService */        
        WifiManager wifi = (WifiManager)getSystemService(WIFI_SERVICE);
        /*Get All WIfi configurations*/
        List&lt;WifiConfiguration&gt; configList = wifi.getConfiguredNetworks();
        /*Now we need to search appropriate configuration i.e. with name SSID_Name*/
        for(int i = 0;i&lt;configList.size();i++)
        {
            if(configList.get(i).SSID.contentEquals("\"SSID_NAME\""))
            {
                /*We found the appropriate config now read all config details*/
                Iterator&lt;WifiConfiguration&gt; iter =  configList.iterator();
                WifiConfiguration config = configList.get(i);

                /*I dont think these fields have anything to do with EAP config but still will
                 * print these to be on safe side*/
                try {
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[SSID]" + config.SSID);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[SSID]" + config.SSID);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[BSSID]" + config.BSSID);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" +"[BSSID]" + config.BSSID);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[HIDDEN SSID]" + config.hiddenSSID);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[HIDDEN SSID]" + config.hiddenSSID);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[PASSWORD]" + config.preSharedKey);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+ "[PASSWORD]" + config.preSharedKey);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[ALLOWED ALGORITHMS]");
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+ "[ALLOWED ALGORITHMS]");
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[LEAP]" + config.allowedAuthAlgorithms.get(AuthAlgorithm.LEAP));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[LEAP]" + config.allowedAuthAlgorithms.get(AuthAlgorithm.LEAP));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[OPEN]" + config.allowedAuthAlgorithms.get(AuthAlgorithm.OPEN));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[OPEN]" + config.allowedAuthAlgorithms.get(AuthAlgorithm.OPEN));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[SHARED]" + config.allowedAuthAlgorithms.get(AuthAlgorithm.SHARED));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[SHARED]" + config.allowedAuthAlgorithms.get(AuthAlgorithm.SHARED));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[GROUP CIPHERS]");
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[GROUP CIPHERS]");
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[CCMP]" + config.allowedGroupCiphers.get(GroupCipher.CCMP));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[CCMP]" + config.allowedGroupCiphers.get(GroupCipher.CCMP));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" , "[TKIP]" + config.allowedGroupCiphers.get(GroupCipher.TKIP));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+ "[TKIP]" + config.allowedGroupCiphers.get(GroupCipher.TKIP));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP104]" + config.allowedGroupCiphers.get(GroupCipher.WEP104));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP104]" + config.allowedGroupCiphers.get(GroupCipher.WEP104));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP40]" + config.allowedGroupCiphers.get(GroupCipher.WEP40));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP40]" + config.allowedGroupCiphers.get(GroupCipher.WEP40));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[KEYMGMT]");
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[KEYMGMT]");
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[IEEE8021X]" + config.allowedKeyManagement.get(KeyMgmt.IEEE8021X));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"+ "[IEEE8021X]" + config.allowedKeyManagement.get(KeyMgmt.IEEE8021X));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[NONE]" + config.allowedKeyManagement.get(KeyMgmt.NONE));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[NONE]" + config.allowedKeyManagement.get(KeyMgmt.NONE));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WPA_EAP]" + config.allowedKeyManagement.get(KeyMgmt.WPA_EAP));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WPA_EAP]" + config.allowedKeyManagement.get(KeyMgmt.WPA_EAP));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WPA_PSK]" + config.allowedKeyManagement.get(KeyMgmt.WPA_PSK));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WPA_PSK]" + config.allowedKeyManagement.get(KeyMgmt.WPA_PSK));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[PairWiseCipher]");
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[PairWiseCipher]");
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[CCMP]" + config.allowedPairwiseCiphers.get(PairwiseCipher.CCMP));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[CCMP]" + config.allowedPairwiseCiphers.get(PairwiseCipher.CCMP));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[NONE]" + config.allowedPairwiseCiphers.get(PairwiseCipher.NONE));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[NONE]" + config.allowedPairwiseCiphers.get(PairwiseCipher.NONE));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[TKIP]" + config.allowedPairwiseCiphers.get(PairwiseCipher.TKIP));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[TKIP]" + config.allowedPairwiseCiphers.get(PairwiseCipher.TKIP));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[Protocols]");
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[Protocols]");
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[RSN]" + config.allowedProtocols.get(Protocol.RSN));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[RSN]" + config.allowedProtocols.get(Protocol.RSN));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WPA]" + config.allowedProtocols.get(Protocol.WPA));
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WPA]" + config.allowedProtocols.get(Protocol.WPA));
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[PRE_SHARED_KEY]" + config.preSharedKey);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[PRE_SHARED_KEY]" + config.preSharedKey);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP Key Strings]");
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP Key Strings]");
                String[] wepKeys = config.wepKeys;
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP KEY 0]" + wepKeys[0]);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP KEY 0]" + wepKeys[0]);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP KEY 1]" + wepKeys[1]);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP KEY 1]" + wepKeys[1]);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP KEY 2]" + wepKeys[2]);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP KEY 2]" + wepKeys[2]);
                Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[WEP KEY 3]" + wepKeys[3]);
                out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[WEP KEY 3]" + wepKeys[3]);

                }
                catch(IOException e) 
                {
                    Toast toast1 = Toast.makeText(this, "Failed to write Logs to ReadConfigLog.txt", 3000);
                    Toast toast2 = Toast.makeText(this, "Please take logs using Logcat", 5000);
                    Log.e("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "Could not write to ReadConfigLog.txt" + e.getMessage());
                }
                /*reflection magic*/
                /*These are the fields we are really interested in*/
                try 
                {
                    // Let the magic start
                    Class[] wcClasses = WifiConfiguration.class.getClasses();
                    // null for overzealous java compiler
                    Class wcEnterpriseField = null;

                    for (Class wcClass : wcClasses)
                        if (wcClass.getName().equals(INT_ENTERPRISEFIELD_NAME)) 
                        {
                            wcEnterpriseField = wcClass;
                            break;
                        }
                    boolean noEnterpriseFieldType = false; 
                    if(wcEnterpriseField == null)
                        noEnterpriseFieldType = true; // Cupcake/Donut access enterprise settings directly

                    Field wcefAnonymousId = null, wcefCaCert = null, wcefClientCert = null, wcefEap = null, wcefIdentity = null, wcefPassword = null, wcefPhase2 = null, wcefPrivateKey = null;
                    Field[] wcefFields = WifiConfiguration.class.getFields();
                    // Dispatching Field vars
                    for (Field wcefField : wcefFields) 
                    {
                        if (wcefField.getName().trim().equals(INT_ANONYMOUS_IDENTITY))
                            wcefAnonymousId = wcefField;
                        else if (wcefField.getName().trim().equals(INT_CA_CERT))
                            wcefCaCert = wcefField;
                        else if (wcefField.getName().trim().equals(INT_CLIENT_CERT))
                            wcefClientCert = wcefField;
                        else if (wcefField.getName().trim().equals(INT_EAP))
                            wcefEap = wcefField;
                        else if (wcefField.getName().trim().equals(INT_IDENTITY))
                            wcefIdentity = wcefField;
                        else if (wcefField.getName().trim().equals(INT_PASSWORD))
                            wcefPassword = wcefField;
                        else if (wcefField.getName().trim().equals(INT_PHASE2))
                            wcefPhase2 = wcefField;
                        else if (wcefField.getName().trim().equals(INT_PRIVATE_KEY))
                            wcefPrivateKey = wcefField;
                    }
                Method wcefValue = null;
                if(!noEnterpriseFieldType)
                {
                for(Method m: wcEnterpriseField.getMethods())
                //System.out.println(m.getName());
                if(m.getName().trim().equals("value")){
                    wcefValue = m;
                    break;
                }
                }

                /*EAP Method*/
                String result = null;
                Object obj = null;
                if(!noEnterpriseFieldType)
                {
                    obj = wcefValue.invoke(wcefEap.get(config), null);
                    String retval = (String)obj;
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP METHOD]" + retval);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP METHOD]" + retval);
                }
                else
                {
                    obj = wcefEap.get(config);
                    String retval = (String)obj;                        
                }

                /*phase 2*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefPhase2.get(config), null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP PHASE 2 AUTHENTICATION]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP PHASE 2 AUTHENTICATION]" + result);
                }
                else
                {
                    result = (String) wcefPhase2.get(config);
                }

                /*Anonymous Identity*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefAnonymousId.get(config),null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP ANONYMOUS IDENTITY]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP ANONYMOUS IDENTITY]" + result);
                }
                else
                {
                    result = (String) wcefAnonymousId.get(config);
                }

                /*CA certificate*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefCaCert.get(config), null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP CA CERTIFICATE]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP CA CERTIFICATE]" + result);
                }
                else
                {
                    result = (String)wcefCaCert.get(config);

                }

                /*private key*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefPrivateKey.get(config),null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP PRIVATE KEY]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP PRIVATE KEY]" + result);
                }
                else
                {
                    result = (String)wcefPrivateKey.get(config);
                }

                /*Identity*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefIdentity.get(config), null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP IDENTITY]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP IDENTITY]" + result);
                }
                else
                {
                    result = (String)wcefIdentity.get(config);
                }

                /*Password*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefPassword.get(config), null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP PASSWORD]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP PASSWORD]" + result);
                }
                else
                {
                    result = (String)wcefPassword.get(config);
                }

                /*client certificate*/
                if(!noEnterpriseFieldType)
                {
                    result = (String) wcefValue.invoke(wcefClientCert.get(config), null);
                    Log.d("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "[EAP CLIENT CERT]" + result);
                    out.write("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;" + "[EAP CLIENT CERT]" + result);
                    Toast toast1 = Toast.makeText(this, "All config data logged to ReadConfigLog.txt", 3000);
                    Toast toast2 = Toast.makeText(this, "Extract ReadConfigLog.txt from SD CARD", 5000);
                }
                else
                {
                    result = (String)wcefClientCert.get(config);
                }

                out.close();

                }
                catch(IOException e) 
                {
                    Toast toast1 = Toast.makeText(this, "Failed to write Logs to ReadConfigLog.txt", 3000);
                    Toast toast2 = Toast.makeText(this, "Please take logs using Logcat", 5000);
                    Log.e("&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;WifiPreference&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;", "Could not write to ReadConfigLog.txt" + e.getMessage());
                }
                catch(Exception e)
                {
                    e.printStackTrace();
                }

            }
        }
    }
</code></pre>
