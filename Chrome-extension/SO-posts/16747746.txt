<p>Raghunandan is right. However if your aim is to just get the 'long_name', locality etc  using Google maps API, you might want to try the following way to get it. You can get the response is in form of JSON which I feel is more structured. You can yourself try the URL first: <a href="http://maps.google.com/maps/api/geocode/json?latlng=23.0043673,72.5411868999996&amp;sensor=false">http://maps.google.com/maps/api/geocode/json?latlng=23.0043673,72.5411868999996&amp;sensor=false</a> </p>

<p>I use the following method all the time and it works for me. It might help you get what you are trying:</p>

<p>You can get the latitude and longitude and then request google servers, to reply with a JSON object containing various information about the location co-ordinates. Here is the function: </p>

<pre><code>public JSONObject getLocationInfo( double lat, double lng) {

    HttpGet httpGet = new HttpGet("http://maps.google.com/maps/api/geocode/json?latlng="+lat+","+lng+"&amp;sensor=false");
    HttpClient client = new DefaultHttpClient();
    HttpResponse response;
    StringBuilder stringBuilder = new StringBuilder();

    try {
        response = client.execute(httpGet);
        HttpEntity entity = response.getEntity();
        InputStream stream = entity.getContent();
        int b;
        while ((b = stream.read()) != -1) {
            stringBuilder.append((char) b);
        }
    } catch (ClientProtocolException e) {
        } catch (IOException e) {
    }

    JSONObject jsonObject = new JSONObject();
    try {
        jsonObject = new JSONObject(stringBuilder.toString());
    } catch (JSONException e) {
        e.printStackTrace();
    }
    return jsonObject;
}
</code></pre>

<p>Now you can parse the JSON to get whatever you want. For example, suppose you want complete formatted_address, here is how you can get:</p>

<pre><code>// get lat and lng value
JSONObject ret = getLocationInfo(lat, lng); 
JSONObject location;
String location_string;
try {
    //Get JSON Array called "results" and then get the 0th complete object as JSON        
    location = ret.getJSONArray("results").getJSONObject(0); 
    // Get the value of the attribute whose name is "formatted_string"
    location_string = location.getString("formatted_address");
    Log.d("test", "formattted address:" + location_string);
} catch (JSONException e1) {
    e1.printStackTrace();

}
</code></pre>

<p>If you want to know more of how to extract the desired data from the type of JSON that you'll get in response, see answers on <a href="http://stackoverflow.com/questions/6350540/android-how-to-parse-jsonobject-and-jsonarrays">Android - How to parse JSONObject and JSONArrays</a> question. Hope it helps you. </p>

<p><strong>Update</strong>:</p>

<p>Hope you've read the answers on above question. Now, For example: If you want to get JSON Array of <code>address_components</code>, then just do something like  </p>

<pre><code>JSONArray addressComp = ret.getJSONArray("results").getJSONObject(0).getJSONArray("address_components");
</code></pre>

<p>Now you can get the first <code>long_name</code> as follows:</p>

<pre><code>String long_name1 = addressComp.getJSONObject(0).getString("long_name");
</code></pre>

<p>So try to see compare the pattern here to the JSON response that you are getting. This will make you understand how to approach for getting any element. Here, <code>result</code> was JSONARray, so I got it as JSONArray. Then I took the first object of the <code>result</code> JSONArray whose <code>name</code> was<code>address_components</code> and the <code>value</code> was another JSONArray. Then because I wanted to get the first <code>long_name</code>, so I again took the first object of the <code>address_component</code> JSONArray and then asked to get the <code>value</code> of the component whose name was <code>long_name</code>. Hope now you understand a bit how you can read values. </p>

<p>P.S: I didn't run the last two lines but formulated logically. Hope it makes you understand. All the best!  </p>
