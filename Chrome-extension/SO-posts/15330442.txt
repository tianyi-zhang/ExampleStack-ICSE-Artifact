<p>There are two ways to use a <code>TreeSet</code>.</p>

<ol>
<li>Have it contain objects that implement <code>Comparable</code></li>
<li>Have a custom <code>Comparator</code> object that compares the elements of your <code>TreeSet</code>.</li>
</ol>

<p>Since you want to have your <code>TreeSet</code> contain <code>BitSet</code>s, and <code>BitSet</code> does not implement <code>Comparable</code>, you need to give your <code>TreeSet</code> a custom <code>Comparator</code>. How you implement that <code>Comparator</code> is up to you.</p>

<pre><code>SortedSet&lt;BitSet&gt; s = new TreeSet&lt;BitSet&gt;(new CustomBitSetComparator());
s.add(bitSet1);
s.add(bitSet2);
//etc ...
</code></pre>

<p>The Comparator may look something like this</p>

<pre><code>class CustomBitSetComparator implements Comparator&lt;BitSet&gt;{
    int compare(BitSet a, BitSet b) {
        if(a == b){
            return 0;
        } else if(a == null) {
            return -1;
        } else if(b == null) {
            return 1;
        } else if(a.equals(b)) {
            return 0;
        } else if(a.length() &gt; b.length()) {
            return 1;
        } else if(b.lenght() &gt; a.length()) {
            return -1;
        } else {
            for(int i = 0; i &lt; a.length(); i++) {
               if(a.get(i) != b.get(i)) {
                   if(a.get(i)) {
                      return 1;
                   } else {
                      return -1;
                   }
                }
             }
             return 0;
         }
    }
}
</code></pre>
