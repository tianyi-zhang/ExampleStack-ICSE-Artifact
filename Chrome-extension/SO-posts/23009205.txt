<p><strong><a href="http://www.a4ios.com/outofmemory-exception-on-animationlarge-image-loading-in-android/" rel="nofollow" title="Read Article">Read Article</a></strong></p>

<p>Image Size : 4000*3000 in px</p>

<p>When the image load :  4000*3000*4 = ? KB </p>

<p>So,Vitrual Heap Memory of the Android device are : 32 MB, 64 MB , 128 MB ... so on</p>

<p>if you using:</p>

<pre><code>&lt;application

    android:largeHeap="true"&gt;

&lt;/application&gt;
</code></pre>

<p>This will increase the VHM double (if 32 MB = 2* 32 MB). BUt this will not an good way to do this, effect on OS</p>

<p>You need to decrease the size of the image.</p>

<hr>

<p>Use the below class and pass the path of the image and width , height what you want </p>

<blockquote>
  <blockquote>
    <blockquote>
      <blockquote>
        <p>Bitmap bitmap = BitmapSize.getDecodedBitmap(path, 400, 400);</p>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<p>Class::::</p>

<pre><code>public class BitmapSize{



public static Bitmap getDecodedBitmap(String path, float target_width, float target_height) {
    Bitmap outBitmap = null;
    try {
        Options decode_options = new Options();
        decode_options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(path,decode_options);  //This will just fill the output parameters
        int inSampleSize = calculateInSampleSize(decode_options, target_width, target_height);

        Options outOptions = new Options();
        outOptions.inJustDecodeBounds = false;
        outOptions.inSampleSize = inSampleSize;
        outOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;
        outOptions.inScaled = false;

        Bitmap decodedBitmap = BitmapFactory.decodeFile(path,outOptions);
        outBitmap = Bitmap.createScaledBitmap(decodedBitmap,// (int)target_width, (int)target_height, true);
                (int)((float)decodedBitmap.getWidth() / inSampleSize),
                (int)((float)decodedBitmap.getHeight() / inSampleSize), true);
        System.out.println("Decoded Bitmap: Width "  + outBitmap.getWidth() + " Height = " + outBitmap.getHeight() + " inSampleSize = " + inSampleSize);

    } catch (Exception e) {
        // TODO: handle exception
    }

    return outBitmap;
}

public static int calculateInSampleSize(Options options, float reqWidth, float reqHeight) {
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {

        final int heightRatio = Math.round((float) height
                / (float) reqHeight);
        final int widthRatio = Math.round((float) width / (float) reqWidth);

        inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;
    }

    return inSampleSize;
}

}
</code></pre>
