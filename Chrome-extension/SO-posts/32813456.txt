<p><strong>UPDATE</strong></p>

<p>You should put image that you will load with <code>BitmapFactory.decodeResource()</code> to <code>drawable-nodpi</code> directory to avoid scaling from density that used in <code>drawable-&lt;density&gt;</code> directory name to your device screen density.</p>

<p>In your case you putted image in <code>drawable-hdpi</code> directory and your device has <code>xxhdpi</code> screen so in <code>BitmapFactory.decodeResource()</code> with <code>inSampleSize=2</code> image were 2x scaled up (from <code>hdpi</code> to <code>xxhdpi</code>) and 2x scaled down (by <code>inSampleSize</code>) remaining at original size and causing application crash by <code>OutOfMemoryError</code>.</p>

<p><strong>ORIGINAL ANSWER</strong></p>

<p>1.5MB is the size of compressed image. When you load it to <code>ImageView</code> or background of some other view then <code>Bitmap</code> is implicitly created. In <code>Bitmap</code> every pixel of image takes 4 bytes. So if your image has a resolution of 4096x4096 pixels then it takes 64 megabytes in memory though image could be filled with single color and takes only few kilobytes compressed to png or jpeg.</p>

<p>You should determine real size of your view and load scaled image:</p>

<pre><code>view.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            view.getViewTreeObserver().removeGlobalOnLayoutListener(this);
            Bitmap bitmap = ImageUtils.decodeSampledBitmapFromFile(backgroundImageFile, view.getWidth(), view.getHeight());
            view.setBackground(new BitmapDrawable(getResources(), bitmap));
        }
    });
</code></pre>

<p>There is my utility method to load scaled <code>Bitmap</code> from <code>File</code>:</p>

<pre><code>public class ImageUtils {
    public static Bitmap decodeSampledBitmapFromFile(File file, int reqWidth, int reqHeight) {

        // First decode with inJustDecodeBounds=true to check dimensions
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(file.getAbsolutePath(), options);

        // Calculate inSampleSize
        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        // Decode bitmap with inSampleSize set
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeFile(file.getAbsolutePath(), options);
    }

     public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height &gt; reqHeight || width &gt; reqWidth) {

            // Calculate ratios of height and width to requested height and width
            final int heightRatio = Math.floor((float) height / (float) reqHeight);
            final int widthRatio = Math.floor((float) width / (float) reqWidth);

            // Choose the smallest ratio as inSampleSize value, this will guarantee
            // a final image with both dimensions larger than or equal to the
            // requested height and width.
            inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;
        }

        return inSampleSize;
    }
}
</code></pre>

<p>You can use other <code>BitmapFactory</code> methods to decode <code>Bitmap</code> from stream, resource and byte array.</p>
