<p>As others pointed out, it is not possible to generate a <strong>unique alphanumeric string with length 11</strong> from each email address, as the <strong>alphanumeric strings with length 11</strong> are less than all the possible email addresses. So there will always be two different email addresses e1 and e2 such that <strong>F(e1) = F(e2) = S</strong> for some string <strong>S</strong> which you generate.</p>

<p>Still, given an email address <strong>e1</strong>, you can generate a string which is (let's call it) "pseudo-unique" i.e. a string <strong>S = F(e1)</strong> for which it is <strong>practically very hard</strong> to find another email address <strong>e2 != e1</strong> such that <strong>F(e2) = S</strong>. And as others pointed out, you can use e.g. MD5 to achieve this.</p>

<p>Look at this class and call it on the byte array obtained from your email address.</p>

<p><a href="http://docs.oracle.com/javase/7/docs/api/java/security/MessageDigest.html" rel="nofollow">http://docs.oracle.com/javase/7/docs/api/java/security/MessageDigest.html</a></p>

<p>Actually here is an example using MD5.</p>

<pre><code>import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class Test003 {

    public static void main(String[] args) throws Exception {
        System.out.println(getPseudoUniqueString("test1@test.com"));
        System.out.println(getPseudoUniqueString("test2@test.com"));            
    }

    private static String getPseudoUniqueString(String str) 
        throws NoSuchAlgorithmException 
    {
        MessageDigest md1 = MessageDigest.getInstance("MD5");
        md1.update(str.getBytes());
        byte[] bd1 = md1.digest();

        StringBuffer hexString = new StringBuffer();
        for (int i=0;i&lt;bd1.length;i++) {
            String hex=Integer.toHexString(0xff &amp; bd1[i]);
            if(hex.length()==1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }

        return hexString.toString().substring(0,11);
    }
}
</code></pre>
