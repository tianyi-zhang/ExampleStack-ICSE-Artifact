<p>It is possible using <a href="http://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.html" rel="nofollow">MultiAutoCompleteTextView</a> and a custom <a href="http://developer.android.com/reference/android/widget/MultiAutoCompleteTextView.Tokenizer.html" rel="nofollow">Tokenizer</a></p>

<p>I have repurposed the CommaTokenizer from Android's source code so that any character can be used to split up the words in MultiAutoCompleteTextView. Beware, untested code</p>

<pre><code>public static class CustomTokenizer implements MultiAutoCompleteTextView.Tokenizer {
    private final char WHITE_SPACE = ' ';
    private final char TOKEN_TERMINATING_CHAR;
    private final String TOKEN_TERMINATING_STRING;

    public CustomTokenizer(char tokenTerminatingChar) {
        TOKEN_TERMINATING_CHAR = tokenTerminatingChar;
        if (TOKEN_TERMINATING_CHAR == WHITE_SPACE) {
            TOKEN_TERMINATING_STRING = String.valueOf(TOKEN_TERMINATING_CHAR);
        } else {
            TOKEN_TERMINATING_STRING = String.valueOf(TOKEN_TERMINATING_CHAR) + String.valueOf(WHITE_SPACE);
        }
    }

    @Override
    public int findTokenStart(CharSequence text, int cursor) {
        int i = cursor;

        while (i &gt; 0 &amp;&amp; text.charAt(i - 1) != TOKEN_TERMINATING_CHAR) {
            i--;
        }
        while (i &lt; cursor &amp;&amp; text.charAt(i) == WHITE_SPACE) {
            i++;
        }

        return i;
    }

    @Override
    public int findTokenEnd(CharSequence text, int cursor) {
        int i = cursor;
        int len = text.length();

        while (i &lt; len) {
            if (text.charAt(i) == TOKEN_TERMINATING_CHAR) {
                return i;
            } else {
                i++;
            }
        }

        return len;
    }

    @Override
    public CharSequence terminateToken(CharSequence text) {
        int i = text.length();

        while (i &gt; 0 &amp;&amp; text.charAt(i - 1) == WHITE_SPACE) {
            i--;
        }

        if (i &gt; 0 &amp;&amp; text.charAt(i - 1) == TOKEN_TERMINATING_CHAR) {
            return text;
        } else {
            if (text instanceof Spanned) {
                SpannableString sp = new SpannableString(text + TOKEN_TERMINATING_STRING);
                TextUtils.copySpansFrom((Spanned) text, 0, text.length(),
                        Object.class, sp, 0);
                return sp;
            } else {
                return text + TOKEN_TERMINATING_STRING;
            }
        }
    }
}
</code></pre>
