<p>Okay. Here is my <code>ReflectionUtils#getMethod</code> I came up with:</p>

<pre><code>public static Method getMethod(Class&lt;?&gt; instanceClass, String name, Class&lt;?&gt;... parameterTypes) {
    if(ObjectUtils.notEqual(instanceClass,null) &amp;&amp; StringUtils.isNotEmpty(name)) {
        Class&lt;?&gt; searchType = instanceClass;

        while (searchType != null) {
            Method[] methods = (searchType.isInterface() ? searchType.getMethods() : searchType.getDeclaredMethods());

            for (Method method : methods) {
                if (name.equals(method.getName()) &amp;&amp; (parameterTypes == null || Arrays.equals(parameterTypes, method.getParameterTypes()))) {                           
                    return method;
                }
            }

            searchType = searchType.getSuperclass();
        }
    }       

    return null;
}
</code></pre>

<p>And it works. Event it returns private method of the super class and after making that method accessible you can invoke that private method with the child object as target instance.</p>

<p>I created a method <code>test(String message)</code> in <code>SortableDTO</code> which simply prints the message which is passed as argument in the console.</p>

<p>Then I did:</p>

<pre><code>SearchNeedsYearPlus2ArticleDTO dto = new SearchNeedsYearPlus2ArticleDTO();
Method test = ReflectionUtils.getMethod(dto.getClass(),"test",String.class);
System.out.println("Modifier of the method is private? : " + Modifier.isPrivate(test.getModifiers()));
ReflectionUtils.makeAccessible(test);
ReflectionUtils.invokeMethod(test,dto,"JYM");
</code></pre>

<p>And voila. It works. Note for the sake of brevity the definition of the method <code>ReflectionUtils#makeAccessible</code> and <code>ReflectionUtils#invokeMethod</code> has been omitted. :-)</p>

<p>Here is the output:</p>

<p><img src="http://i.stack.imgur.com/IAIzL.png" alt="enter image description here"></p>
