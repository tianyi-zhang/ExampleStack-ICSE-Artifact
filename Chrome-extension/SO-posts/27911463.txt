<p>first thing create a broadcast reciever:
1)add to manifest </p>

<p>2)the reciever:</p>

<pre><code>public class CallReciever extends BroadcastReceiver 
{

@Override
public void onReceive(Context context, Intent intent) 
{
    String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);
    ArrayList&lt;String&gt; rejectList=getListFromDb()//you need to implement this method
    if (state.equals(TelephonyManager.EXTRA_STATE_RINGING))
    {
        String num = intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER);
        if (rejectList.Contains(num))
        {
            disconnectCall();


        }
    }
 public void disconnectCall(){
     try {

        String serviceManagerName = "android.os.ServiceManager";
        String serviceManagerNativeName = "android.os.ServiceManagerNative";
        String telephonyName = "com.android.internal.telephony.ITelephony";
        Class&lt;?&gt; telephonyClass;
        Class&lt;?&gt; telephonyStubClass;
        Class&lt;?&gt; serviceManagerClass;
        Class&lt;?&gt; serviceManagerNativeClass;
        Method telephonyEndCall;
        Object telephonyObject;
        Object serviceManagerObject;
        telephonyClass = Class.forName(telephonyName);
        telephonyStubClass = telephonyClass.getClasses()[0];
        serviceManagerClass = Class.forName(serviceManagerName);
        serviceManagerNativeClass = Class.forName(serviceManagerNativeName);
        Method getService = // getDefaults[29];
        serviceManagerClass.getMethod("getService", String.class);
        Method tempInterfaceMethod = serviceManagerNativeClass.getMethod("asInterface", IBinder.class);
        Binder tmpBinder = new Binder();
        tmpBinder.attachInterface(null, "fake");
        serviceManagerObject = tempInterfaceMethod.invoke(null, tmpBinder);
        IBinder retbinder = (IBinder) getService.invoke(serviceManagerObject, "phone");
        Method serviceMethod = telephonyStubClass.getMethod("asInterface", IBinder.class);
        telephonyObject = serviceMethod.invoke(null, retbinder);
        telephonyEndCall = telephonyClass.getMethod("endCall");
        telephonyEndCall.invoke(telephonyObject);

      } catch (Exception e) {
        e.printStackTrace();
        Log.e("GABI",
                "FATAL ERROR: could not connect to telephony subsystem");
        Log.e("GABI", "Exception object: " + e); 
     }
    }

}
</code></pre>

<p>now this will only work once you started your app at least once. 
(you can call your app to start a service on boot using another reciever that will call startActivity)
the permisions and declaration for it are:</p>

<pre><code>&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" /&gt;
&lt;receiver android:name="com.my.CustomReceiver"&gt;  
    &lt;intent-filter&gt;  
        &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;  
    &lt;/intent-filter&gt;  
&lt;/receiver&gt; 
</code></pre>
