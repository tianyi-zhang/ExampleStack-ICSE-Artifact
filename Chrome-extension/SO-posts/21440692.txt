<p>Here is my new code:</p>

<pre><code>public class Earthquake extends Activity {

ListView earthquakeListView;
ArrayAdapter&lt;Quake&gt; aa;

ArrayList&lt;Quake&gt; earthquakes = new ArrayList&lt;Quake&gt;();

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    earthquakeListView = (ListView) this
            .findViewById(R.id.earthquakeListView);

    int layoutID = android.R.layout.simple_list_item_1;
    aa = new ArrayAdapter&lt;Quake&gt;(this, layoutID, earthquakes);
    earthquakeListView.setAdapter(aa);

    new DataLoadAsync().execute();
}   

public class DataLoadAsync extends AsyncTask&lt;Object, Object, Object&gt;{

       private Quake quake;

       protected void doInBackground(){
          // handle network data in here and put the result to quake in here.
          refreshEarthquakes();
       }

       protected void onPostExecute(){
          // use the result
          addNewQuake(quake);
       }

    @Override
    protected Object doInBackground(Object... arg0) {
        // TODO Auto-generated method stub
        return null;
    }
    }

     void refreshEarthquakes() {
        //get the XML
        URL url;
        try {
            String quakeFeed = getString(R.string.quake_feed);
            url = new URL(quakeFeed);

            URLConnection connection;
            connection = url.openConnection();

            HttpURLConnection httpConnection = (HttpURLConnection)connection;
            int responseCode = httpConnection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                InputStream in = httpConnection.getInputStream();

                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                DocumentBuilder db = dbf.newDocumentBuilder();

                //Parse the earthquake feed
                Document dom = db.parse(in);
                Element docEle = dom.getDocumentElement();

                //Clear the old earthquakes
                earthquakes.clear();

                //Get a list of each earthquake entry
                NodeList nl = docEle.getElementsByTagName("entry");
                if (nl != null &amp;&amp; nl.getLength() &gt; 0) {
                    for (int i = 0 ; i &lt; nl.getLength(); i++) {
                        Element entry = (Element)nl.item(i);
                        Element title = (Element)entry.getElementsByTagName("title").item(0);
                        Element g = (Element)entry.getElementsByTagName("georss:point").item(0);
                        Element when = (Element)entry.getElementsByTagName("updated").item(0);
                        Element link = (Element)entry.getElementsByTagName("link").item(0);

                        String details = title.getFirstChild().getNodeValue();
                        String hostname = "http://earthquake.usgs.gov";
                        String linkString = hostname + link.getAttribute("href");

                        String point = g.getFirstChild().getNodeValue();
                        String dt = when.getFirstChild().getNodeValue();
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss'Z'");
                        Date qdate = new GregorianCalendar(0,0,0).getTime();
                        try {
                            qdate = sdf.parse(dt);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }

                        String[] location = point.split(" ");
                        Location l = new Location("dummyGPS");
                        l.setLatitude(Double.parseDouble(location[0]));
                        l.setLongitude(Double.parseDouble(location[1]));

                        String magnitudeString = details.split(" ")[1];
                        int end = magnitudeString.length()-1;
                        double magnitude = Double.parseDouble(magnitudeString.substring(0, end));

                        details = details.split(",")[1].trim();

                        Quake quake = new Quake(qdate, details, l, magnitude, linkString);
                    }
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParserConfigurationException e) {
            e.printStackTrace();
        } catch (SAXException e) {
            e.printStackTrace();
        }
        finally {
        } 
    }

private void addNewQuake (Quake _quake) {
    //Add the new quake to our list of earthquakes
    earthquakes.add(_quake);

    //Notify the array adapter of a change
    aa.notifyDataSetChanged();
}
}
</code></pre>
