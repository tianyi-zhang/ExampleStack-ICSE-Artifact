<p>you need to explain a bit more about what is not working for you. If i look at the code in the protobuf RPC java library (<a href="https://code.google.com/p/protobuf-rpc-pro/" rel="nofollow">https://code.google.com/p/protobuf-rpc-pro/</a> ) the class is DuplexTcpClientPipelineFactory or  DuplexTcpServerPipelineFactory, which is basically the same code as your's and it "works". Maybe the protobuf-rpc-pro library can already do what you need.  </p>

<pre><code>public ChannelPipeline getPipeline() throws Exception {
    ChannelPipeline p = pipeline();

    RpcSSLContext ssl = bootstrap.getSslContext();
    if ( ssl != null ) {
            p.addLast(Handler.SSL, new SslHandler(ssl.createClientEngine()) );
    }

    p.addLast(Handler.FRAME_DECODER, new ProtobufVarint32FrameDecoder());
    p.addLast(Handler.PROTOBUF_DECODER, new ProtobufDecoder(DuplexProtocol.WirePayload.getDefaultInstance(),bootstrap.getExtensionRegistry()));

    p.addLast(Handler.FRAME_ENCODER, new ProtobufVarint32LengthFieldPrepender());
    p.addLast(Handler.PROTOBUF_ENCODER, new ProtobufEncoder());

    // the connectResponseHandler is swapped after the client connection
    // handshake with the RpcClient for the Channel
    p.addLast(Handler.CLIENT_CONNECT, new ClientConnectResponseHandler());

    return p;
}
</code></pre>

<p>is your server a netty server , or just a netty client?</p>
