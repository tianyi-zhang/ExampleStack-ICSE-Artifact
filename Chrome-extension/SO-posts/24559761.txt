<p>Start with:
<br></p>

<ol>
<li><p>Converting your largest images from png to jpeg. Jpeg has some disadvantages for a mobile env. but it does produce as smaller image.</p></li>
<li><p>Try using png 'reducer' tools like <a href="http://optipng.sourceforge.net/" rel="nofollow">OptiPNG</a> or <a href="http://pmt.sourceforge.net/pngcrush/" rel="nofollow">PNGCrush</a> to reduce png image size. You will usually not see a noticeable difference in image quality.</p></li>
</ol>

<p><br></p>

<p>And, if that does not solve your problem consider zipping all (or at least the largest) of your images into a zip file to be stored in assets/ directory and, at first run, open it to an sdcard folder.</p>

<p>After you do that you will need to populate your ImageViews as follows:</p>

<pre><code>Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
ImageView myImage = (ImageView) findViewById(R.id.imageviewTest);
myImage.setImageBitmap(myBitmap);
</code></pre>

<p><br>
Which is a pain but if you have no other choice..</p>

<p>Extraction of assets/zip file goes like this:</p>

<pre><code>public void unzipFromAssets(String zipFileInAssets, String destFolder) {
      FileInputStream fin = new FileInputStream(zipFileInAssets);
      ZipInputStream zin = new ZipInputStream(fin);
      ZipEntry ze = null;
      while ((ze = zin.getNextEntry()) != null) {
          if(ze.isDirectory()) {
              File f = new File(_location + ze.getName());
              if(!f.isDirectory()) {
                 f.mkdirs();
              }
          } else {
               FileOutputStream fout = new FileOutputStream(destFolder + ze.getName());
               for (int c = zin.read(); c != -1; c = zin.read()) {
                  fout.write(c);
               }
               zin.closeEntry();
               fout.close();
         }
      }
      zin.close();
}
</code></pre>

<p>You will need to work a bit on this method - try..catch, getting path for asserts/ files etc.</p>

<p>Good luck.</p>
