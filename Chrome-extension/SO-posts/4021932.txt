<p>Let's try it out.</p>

<p>Here is a program in which multiple threads use a shared <code>SimpleDateFormat</code>.</p>

<p><strong>Program</strong>:</p>

<pre><code>public static void main(String[] args) throws Exception {

    final DateFormat format = new SimpleDateFormat("yyyyMMdd");

    Callable&lt;Date&gt; task = new Callable&lt;Date&gt;(){
        public Date call() throws Exception {
            return format.parse("20101022");
        }
    };

    //pool with 5 threads
    ExecutorService exec = Executors.newFixedThreadPool(5);
    List&lt;Future&lt;Date&gt;&gt; results = new ArrayList&lt;Future&lt;Date&gt;&gt;();

    //perform 10 date conversions
    for(int i = 0 ; i &lt; 10 ; i++){
        results.add(exec.submit(task));
    }
    exec.shutdown();

    //look at the results
    for(Future&lt;Date&gt; result : results){
        System.out.println(result.get());
    }
}
</code></pre>

<p>Run this a few times and you will see:</p>

<p><strong>Exceptions</strong>:</p>

<p>Here are a few examples:</p>

<p>1.</p>

<pre><code>Caused by: java.lang.NumberFormatException: For input string: ""
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)
    at java.lang.Long.parseLong(Long.java:431)
    at java.lang.Long.parseLong(Long.java:468)
    at java.text.DigitList.getLong(DigitList.java:177)
    at java.text.DecimalFormat.parse(DecimalFormat.java:1298)
    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1589)
</code></pre>

<p>2.</p>

<pre><code>Caused by: java.lang.NumberFormatException: For input string: ".10201E.102014E4"
    at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1224)
    at java.lang.Double.parseDouble(Double.java:510)
    at java.text.DigitList.getDouble(DigitList.java:151)
    at java.text.DecimalFormat.parse(DecimalFormat.java:1303)
    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1589)
</code></pre>

<p>3.</p>

<pre><code>Caused by: java.lang.NumberFormatException: multiple points
    at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1084)
    at java.lang.Double.parseDouble(Double.java:510)
    at java.text.DigitList.getDouble(DigitList.java:151)
    at java.text.DecimalFormat.parse(DecimalFormat.java:1303)
    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1936)
    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1312)
</code></pre>

<p><strong>Incorrect Results</strong>:</p>

<pre><code>Sat Oct 22 00:00:00 BST 2011
Thu Jan 22 00:00:00 GMT 1970
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Thu Oct 22 00:00:00 GMT 1970
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
</code></pre>

<p><strong>Correct Results</strong>:</p>

<pre><code>Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
Fri Oct 22 00:00:00 BST 2010
</code></pre>

<hr>

<p>Another approach to safely use DateFormats in a multi-threaded environment is to use a  <code>ThreadLocal</code> variable to hold the <code>DateFormat</code>  object, which means that each thread will have its own copy and doesn't need to wait for other threads to release it. This is how:</p>

<pre><code>public class DateFormatTest {

  private static final ThreadLocal&lt;DateFormat&gt; df = new ThreadLocal&lt;DateFormat&gt;(){
    @Override
    protected DateFormat initialValue() {
        return new SimpleDateFormat("yyyyMMdd");
    }
  };

  public Date convert(String source) throws ParseException{
    Date d = df.get().parse(source);
    return d;
  }
}
</code></pre>

<p>Here is a good <a href="http://fahdshariff.blogspot.com/2010/08/dateformat-with-multiple-threads.html">post</a> with more details. </p>
