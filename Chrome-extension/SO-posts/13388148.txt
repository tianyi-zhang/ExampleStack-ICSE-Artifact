<p>The solution was this! Replace the following:</p>

<p>In <strong>decodeSampledBitmapFromStream</strong> function:</p>

<pre><code>    private Bitmap decodeSampledBitmapFromStream(InputStream is,
                                                    int reqWidth,
                                                    int reqHeight) {

    // First decode with inJustDecodeBounds=true to check dimensions
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;

    InputStream aux = inputStreamCopy(is);
    BitmapFactory.decodeStream(aux, null, options);  // SkImageDecoder::Factory returned null
    try {
        aux.reset();
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Calculate inSampleSize
    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

    // Decode bitmap with inSampleSize set
    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeStream(aux, null, options);
}
</code></pre>

<p>And in <strong>doInBackground</strong> method:</p>

<pre><code>        @Override
    protected String doInBackground(Object... params) {
        try {
            InputStream is = ((android.app.Activity) params[1]).getContentResolver().openInputStream((Uri) params[0]);
            Bitmap bitmap = decodeSampledBitmapFromStream(is, 300, 300);
            System.gc();
            int bytes = bitmap.getWidth()*bitmap.getHeight()*2;
            ByteBuffer buffer = ByteBuffer.allocate(bytes);
            bitmap.copyPixelsToBuffer(buffer);
            return Base64.encodeToString(buffer.array(), Base64.DEFAULT);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
</code></pre>

<p>:)</p>
