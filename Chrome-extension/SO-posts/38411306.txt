<p>You need to take application permissions at runtime instead of taking when install/update as convention</p>

<blockquote>
  <p>Beginning in Android 6.0 (API level 23), users grant permissions to
  apps while the app is running, not when they install the app. This
  approach streamlines the app install process, since the user does not
  need to grant permissions when they install or update the app</p>
</blockquote>

<p><strong>For more help:</strong> <a href="https://developer.android.com/training/permissions/requesting.html" rel="nofollow">Requesting Permissions at Run Time</a></p>

<p>By focusing on the documentation and after doing some google searches, finally I have compiled the code below to handle runtime permissions efficiently</p>

<p>To make it work, you need to follow the instructions below:</p>

<p>Call this method to check if storage permission is granted by user?
If not, then you need to request for it</p>

<pre><code>public static boolean isStoragePermissionGranted(Activity activity) {
    boolean flag = false;
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {
        flag = activity.checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED;
    }
    return flag;
}
</code></pre>

<p>Call this method to request storage permission</p>

<pre><code>public static void requestStoragePermission(Activity activity) {
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {
        if (isStoragePermissionGranted(activity)) {
            return;
        }

        // Fire off an async request to actually get the permission
        // This will show the standard permission request dialog UI
        activity.requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},
                REQUEST_CODE_STORAGE_PERMISSION);
    }
}
</code></pre>

<p>Implement this method in your activity to handle response of permission callback</p>

<pre><code>@Override
public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
    super.onRequestPermissionsResult(requestCode, permissions, grantResults);

    switch (requestCode) {
        case REQUEST_CODE_STORAGE_PERMISSION:
            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {
                if (grantResults.length &gt; 0) {
                    if (grantResults[0] == PackageManager.PERMISSION_DENIED) {
                        boolean shouldShowRationale = shouldShowRequestPermissionRationale(permissions[0]);
                        if (!shouldShowRationale) {
                            // user denied flagging NEVER ASK AGAIN, you can either enable some fall back,
                            // disable features of your app or open another dialog explaining again the permission and directing to
                            // the app setting
                            dialogReasonStoragePermissionToSettings(this);
                        } else if (Manifest.permission.WRITE_EXTERNAL_STORAGE.equals(permissions[0])) {
                            // user denied WITHOUT never ask again, this is a good place to explain the user
                            // why you need the permission and ask if he want to accept it (the rationale)
                            dialogReasonStoragePermission(this);
                        }
                    } /*else {
                        // Do on permission granted work here
                    }*/
                }
            }

            break;
    }
}

public static void dialogReasonStoragePermission(final Activity activity) {
    AlertDialog.Builder builder = new AlertDialog.Builder(activity);
    builder.setMessage(activity.getString(R.string.reason_storage_permission));
    builder.setCancelable(false);
    builder.setPositiveButton("Retry", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int id) {
            requestStoragePermission(activity);
        }
    });
    builder.setNegativeButton("Dismiss", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int id) {
            dialog.dismiss();
        }
    });

    AlertDialog dialog = builder.create();
    dialog.show();
}

public static void dialogReasonStoragePermissionToSettings(final Activity activity) {
    AlertDialog.Builder builder = new AlertDialog.Builder(activity);
    builder.setMessage(activity.getString(R.string.reason_storage_permission));
    builder.setCancelable(false);
    builder.setPositiveButton("Go to Settings", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int id) {
            goToAppDetailsForPermissionSettings(activity);
        }
    });
    builder.setNegativeButton("Dismiss", new DialogInterface.OnClickListener() {
        public void onClick(DialogInterface dialog, int id) {
            dialog.dismiss();
        }
    });

    AlertDialog dialog = builder.create();
    dialog.show();
}

private static final int REQUEST_CODE_APP_DETAILS_PERMISSION_SETTING = 3995;
private static void goToAppDetailsForPermissionSettings(Activity activity) {
    Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
    Uri uri = Uri.fromParts("package", activity.getPackageName(), null);
    intent.setData(uri);
    activity.startActivityForResult(intent, REQUEST_CODE_APP_DETAILS_PERMISSION_SETTING);
}
</code></pre>
