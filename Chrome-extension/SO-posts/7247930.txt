<pre><code>public class CityParser {
    DocumentBuilderFactory factory;
    DocumentBuilder builder;
    Document doc;

    Element ele;

    int mediaThumbnailCount;`enter code here`
    boolean urlflag;
    CityListBean objBean = null;

    Vector&lt;CityListBean&gt; vecCityList;

    public CityParser() {

    }

    public Vector&lt;CityListBean&gt; getCityData() {

        vecCityList = new Vector&lt;CityListBean&gt;();
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpContext localContext = new BasicHttpContext();
            HttpGet httpGet = new HttpGet(
                    "http://heresmyparty.com/cms/index.php?option=com_chronocontact&amp;chronoformname=add_event_form_download");
            HttpResponse response = httpClient.execute(httpGet, localContext);
            // String result = "";

            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    response.getEntity().getContent()));

            CSVReader csvreader = new CSVReader(reader);
            String[] nextLine;
            while ((nextLine = csvreader.readNext()) != null) {

                CityListBean objcitylist = new CityListBean();
                // nextLine[] is an array of values from the line
                objcitylist.setText_title(nextLine[5]);
                objcitylist.setText_host(nextLine[6]);
                objcitylist.setText_price(nextLine[7]);
                objcitylist.setDate(nextLine[8]);
                objcitylist.setText_venue(nextLine[11]);
                objcitylist.setAddress(nextLine[12]);
                objcitylist.setLatitude(nextLine[13]);
                objcitylist.setLongitude(nextLine[14]);
                objcitylist.setFile(nextLine[15]);
                objcitylist.setText_description(nextLine[16]);
                objcitylist.setCity(nextLine[17]);
                vecCityList.addElement(objcitylist);

            }


              /*for (int i = 0; i &lt; vecCityList.size(); i++) { CityListBean
              objcity = (CityListBean) vecCityList.get(i);

              System.out.println("Cf_id : " + objcity.getCityName());
              System.out.println("-----------------------------------"); }*/


        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return vecCityList;
    }
}

==========================================================================================

public class CSVReader {

    private BufferedReader br;

    private boolean hasNext = true;

    private char separator;

    private char quotechar;

    private int skipLines;

    private boolean linesSkiped;


    public static final char DEFAULT_SEPARATOR = ',';

    public static final char DEFAULT_QUOTE_CHARACTER = '"';

    public static final int DEFAULT_SKIP_LINES = 0;

    public CSVReader(Reader reader) {
        this(reader, DEFAULT_SEPARATOR, DEFAULT_QUOTE_CHARACTER,
            DEFAULT_SKIP_LINES);
    }

    public CSVReader(Reader reader, char separator, char quotechar, int line) {
        this.br = new BufferedReader(reader);
        this.separator = separator;
        this.quotechar = quotechar;
        this.skipLines = line;
    }

    public String[] readNext() throws IOException {

        String nextLine = getNextLine();
        return hasNext ? parseLine(nextLine) : null;
    }

    private String getNextLine() throws IOException {
        if (!this.linesSkiped) {
            for (int i = 0; i &lt; skipLines; i++) {
                br.readLine();
            }
            this.linesSkiped = true;
        }
        String nextLine = br.readLine();
        if (nextLine == null) {
            hasNext = false;
        }
        return hasNext ? nextLine : null;
    }

    private String[] parseLine(String nextLine) throws IOException {

        if (nextLine == null) {
            return null;
        }

        List&lt;String&gt; tokensOnThisLine = new ArrayList&lt;String&gt;();
        StringBuffer sb = new StringBuffer();
        boolean inQuotes = false;
        do {
                if (inQuotes) {
                // continuing a quoted section, reappend newline
                sb.append("\n");
                nextLine = getNextLine();
                if (nextLine == null)
                    break;
            }
            for (int i = 0; i &lt; nextLine.length(); i++) {

                char c = nextLine.charAt(i);
                if (c == quotechar) {
                        // this gets complex... the quote may end a quoted block, or escape another quote.
                        // do a 1-char lookahead:
                        if( inQuotes  // we are in quotes, therefore there can be escaped quotes in here.
                            &amp;&amp; nextLine.length() &gt; (i+1)  // there is indeed another character to check.
                            &amp;&amp; nextLine.charAt(i+1) == quotechar ){ // ..and that char. is a quote also.
                                // we have two quote chars in a row == one quote char, so consume them both and
                                // put one on the token. we do *not* exit the quoted text.
                                sb.append(nextLine.charAt(i+1));
                                i++;
                        }else{
                                inQuotes = !inQuotes;
                                // the tricky case of an embedded quote in the middle: a,bc"d"ef,g
                                if(i&gt;2 //not on the begining of the line
                                                &amp;&amp; nextLine.charAt(i-1) != this.separator //not at the begining of an escape sequence
                                                &amp;&amp; nextLine.length()&gt;(i+1) &amp;&amp;
                                                nextLine.charAt(i+1) != this.separator //not at the     end of an escape sequence
                                ){
                                        sb.append(c);
                                }
                        }
                } else if (c == separator &amp;&amp; !inQuotes) {
                    tokensOnThisLine.add(sb.toString());
                    sb = new StringBuffer(); // start work on next token
                } else {
                    sb.append(c);
                }
            }
        } while (inQuotes);
        tokensOnThisLine.add(sb.toString());
        return (String[]) tokensOnThisLine.toArray(new String[0]);

    }

    public void close() throws IOException{
        br.close();
    }

}
</code></pre>
