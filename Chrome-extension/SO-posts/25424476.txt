<p>You have to implement a custom <code>Adapter</code> for that. First we have to fix your view model, you call it <code>Item</code>:</p>

<pre><code>public class Item
{
    public String displayText;
    public String meta;
}
</code></pre>

<p>Those fields should be private with appropriate getters and setters and constructors. If you want to modify such <code>Items</code> in a <code>List</code> you also need to implement <code>equals()</code> and <code>hashCode()</code>. If you do all that your <code>Item</code> class should look something like this:</p>

<pre><code>public class Item {
    private String displayText;
    private String meta;

    public Item(String displayText, String meta) {
        this.displayText = displayText;
        this.meta = meta;
    }

    public Item() {
    }

    public String getDisplayText() {
        return displayText;
    }

    public void setDisplayText(String displayText) {
        this.displayText = displayText;
    }

    public String getMeta() {
        return meta;
    }

    public void setMeta(String meta) {
        this.meta = meta;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Item item = (Item) o;

        if (displayText != null ? !displayText.equals(item.displayText) : item.displayText != null) return false;
        return !(meta != null ? !meta.equals(item.meta) : item.meta != null);
    }

    @Override
    public int hashCode() {
        int result = displayText != null ? displayText.hashCode() : 0;
        result = 31 * result + (meta != null ? meta.hashCode() : 0);
        return result;
    }
}
</code></pre>

<p>Now we need to create a layout for the <code>Items</code> in the <code>ListView</code>, for example something simple like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/rlRoot"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="12dp"
    android:clickable="true"
    android:background="@drawable/list_item_background"&gt;

    &lt;TextView
        style="@style/DefaultTextView"
        android:id="@+id/tvDisplayText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_centerVertical="true" /&gt;

    &lt;TextView
        style="@style/DefaultTextView"
        android:id="@+id/tvMeta"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_toLeftOf="@id/tvDisplayText"
        android:layout_toStartOf="@id/tvDisplayText"
        android:layout_centerVertical="true" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>In this layout we have two <code>TextViews</code> to display both the <code>Strings</code> from each <code>Item</code>. To increase <code>ListView</code> performance you should always implement the view holder pattern. For this purpose we create a <code>ViewHolder</code> class. Its purpose is to hold a reference to the relevant <code>Views</code> in each row of the <code>ListView</code> so we don't have to perform the expensive <code>findViewById()</code> as often: </p>

<pre><code>public class ViewHolder {
    public TextView tvDisplayText;
    public TextView tvMeta;
}
</code></pre>

<p>Note that we don't need getters and setters or anything in this view holder. We will access the public fields directly.</p>

<p>Now we can implement our custom <code>Adapter</code>. This is actually pretty straight forward, I will comment the most important parts. </p>

<pre><code>public class ExampleAdapter extends BaseAdapter {

    private final LayoutInflater inflater;
    private final List&lt;Item&gt; items;

    private ExampleAdapter(Context context, List&lt;Item&gt; items) {
        this.inflater = LayoutInflater.from(context);
        this.items = items;
    }

    @Override
    public int getCount() {
        return this.items.size();
    }

    @Override
    public Item getItem(int position) {
        return this.items.get(position);
    }

    @Override
    public long getItemId(int position) {
        return this.items.get(position).hashCode();
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        final Item item = getItem(position);

        if(convertView == null) {
            // If convertView is null we have to inflate a new layout
            convertView = this.inflater.inflate(R.layout.example_list_item, parent, false);
            final ViewHolder viewHolder = new ViewHolder();
            viewHolder.tvDisplayText = (TextView) convertView.findViewById(R.id.tvDisplayText);
            viewHolder.tvMeta = (TextView) convertView.findViewById(R.id.tvMeta);

            // We set the view holder as tag of the convertView so we can access the view holder later on.
            convertView.setTag(viewHolder);
        }

        // Retrieve the view holder from the convertView
        final ViewHolder viewHolder = (ViewHolder) convertView.getTag();

        // Bind the values to the views
        viewHolder.tvDisplayText.setText(item.getDisplayText());
        viewHolder.tvMeta.setText(item.getMeta());

        return convertView;
    }
}
</code></pre>

<p>And you would use this custom <code>Adapter</code> like this:</p>

<pre><code>final List&lt;Item&gt; items = new ArrayList&lt;Item&gt;();
items.add(new Item("a", "b"));
items.add(new Item("c", "d"));
items.add(new Item("e", "f"));
items.add(new Item("g", "h"));

final ExampleAdapter adapter = new ExampleAdapter(context, items);
listView.setAdapter(adapter);
</code></pre>
