<p>I investigated a bit regarding the google-services plugin and json and found the sources to this plugin.</p>

<p>First things first:</p>

<p>The gradle-plugin google-services that is referenced by classpath and with apply is a build-time plugin only! So it only influences the build-process of your app, but not the runtime-process!</p>

<p>This plugin is only meant as a quickstart-helper to integrating Google-services quickly in your app. Obviously, the process is somewhat convoluted and not documented, so Google should have made it clear what this process does.</p>

<p>In fact, I found the source code for the plugin version com.google.gms:google-services:1.4.0-beta3 and didnt find any specific reference in it regarding appinvites nor did I find any Google API for App Invites! (But maybe it just uses a generic API project with its project id, I didnt try this)</p>

<p>What it does:</p>

<p>The google-services gradle-plugin looks for the mentioned google-services.json file in your app-module. Then it looks for configured settings like project-id's and tracking-id's and such, generated by the Google API developer console into the google-services.json file.
From the settings it found, Android resource values are generated into the following path:</p>

<pre><code>$project.buildDir/generated/res/google-services/$variant.dirName/values/values.xml
</code></pre>

<p>For example for a debug-build of your app:</p>

<pre><code>app/generated/res/google-services/debug/values/values.xml
</code></pre>

<p>E.g. if you followed the GCM tutorial, the JSON file would include the API project's id as the following android-resource:</p>

<pre><code>&lt;string name="gcm_defaultSenderId"&gt;project-id&lt;/string&gt;
</code></pre>

<p>So this plugin and JSON file are not essential to running or publishing your app, it is just a quickstart helper to generate some basic android-resource files for easier integration of specific Google API features.</p>

<p>Notice in the source code referenced below that the google-services plugin always generates those android-resources for every app-variant that is defined in your app/build.gradle.</p>

<p>If you don't want that, you should use those generated resources in the app-variants you want, and delete the others. Don't forget to remove the google-services plugin apply from app/build.gradle, or else it will be regenerated for all app-variants.</p>

<p>What it does not:</p>

<p>This plugin and JSON-file do NOT directly influence the inner workings of said Google-features for your app!
If you already have followed older tutorials on developer.android.com on how to integrate e.g. GCM or Google Analytics, then you don't even need to integrate either the gradle-plugin google-services or the google-services.json file!</p>

<p>Notice about where I found the sources:</p>

<p>After you integrated the google-services gradle-plugin and when sync your project, Gradle automatically downloads the google-services dependency to a path similar to this (on Windows, you might need to look into your home/.gradle for Linux):</p>

<p>C:\Users\user\.gradle\caches\modules-2\files-2.1\com.google.gms\google-services\1.4.0-beta3\f1580f62e3be313eba041ce19b64fd3f44cf8951\google-services-1.4.0-beta3-sources.jar</p>

<p>If you extract this jar-file, you will find two files:</p>

<pre><code>GoogleServicesPlugin.groovy
GoogleServicesTask.java
</code></pre>

<p>which contain the plain source code of the gradle-plugin.</p>

<pre><code>GoogleServicesPlugin.groovy
</code></pre>

<p>contains the handling of the app-variants and basic definitions of paths etc.</p>

<pre><code>GoogleServicesTask.java
</code></pre>

<p>contains the actual task-definition, look for the following method to see what it really does:</p>

<pre><code>@TaskAction
public void action() throws IOException {
    checkVersionConflict();
    // google-services.json
    if (!quickstartFile.isFile()) {
        getLogger().warn("File " + quickstartFile.getName() + " is missing from module root folder." +
                " The Google Services Plugin cannot function without it.");

        // Skip the rest of the actions because it would not make sense if `quickstartFile` is missing.
        return;
    }

    // delete content of outputdir.
    deleteFolder(intermediateDir);
    if (!intermediateDir.mkdirs()) {
        throw new GradleException("Failed to create folder: " + intermediateDir);
    }

    JsonElement root = new JsonParser().parse(Files.newReader(quickstartFile, Charsets.UTF_8));

    if (!root.isJsonObject()) {
        throw new GradleException("Malformed root json");
    }

    JsonObject rootObject = root.getAsJsonObject();

    Map&lt;String, String&gt; resValues = new TreeMap&lt;String, String&gt;();

    handleProjectNumber(rootObject, resValues);

    JsonObject clientObject = getClientForPackageName(rootObject);

    if (clientObject != null) {
        handleAnalytics(clientObject, resValues);
        handleAdsService(clientObject, resValues);
        handleGoogleAppId(clientObject, resValues);
    } else {
        getLogger().warn("No matching client found for package name '" + packageName + "'");
    }

    // write the values file.
    File values = new File(intermediateDir, "values");
    if (!values.exists() &amp;&amp; !values.mkdirs()) {
        throw new GradleException("Failed to create folder: " + values);
    }

    Files.write(getValuesContent(resValues), new File(values, "values.xml"), Charsets.UTF_8);
} 
</code></pre>

<p>So if the Google-docs donâ€™t say which resources are needed for specific Google-features, I would suggest to generate the JSON-file for each relevant buildtype/flavor, see what resources get generated by the plugin and then put those resources manually into their respective src/buildtypeORflavor/res directories.</p>

<p>Delete the references to google-services plugin and the JSON-file after that, and you are done.</p>
