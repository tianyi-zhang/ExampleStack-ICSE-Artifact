<p>try the  following code. it is simplest sample to post the update:</p>

<p>put the code after the seeson login in:</p>

<pre><code>session.addCallback(new StatusCallback() {

    @Override
    public void call(Session session, SessionState state,
        Exception exception) {
        List&lt;String&gt; PERMISSIONS = Arrays
            .asList("publish_actions");
        session
            .requestNewPublishPermissions(new Session.NewPermissionsRequest(
                getActivity(), PERMISSIONS));

        Request request = Request.newStatusUpdateRequest(
            session, "Temple Hello Word Sample",
            new Request.Callback() {
                @Override
                public void onCompleted(Response response) {
                    L.d("fb:done = "
                        + response.getGraphObject() + ","
                        + response.getError());
                }
            });
        request.executeAsync();

    }

});
</code></pre>

<p>The following is the whole code that from the sample session login of Facebook SDK3.0:</p>

<pre><code>package com.facebook.samples.sessionlogin;

import java.util.Arrays;
import java.util.List;

import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import com.facebook.LoggingBehavior;
import com.facebook.Request;
import com.facebook.Response;
import com.facebook.Session;
import com.facebook.Session.StatusCallback;
import com.facebook.SessionState;
import com.facebook.Settings;
import com.microtemple.android.lib.common.L;

public class SessionLoginFragment extends Fragment {
    private static final String         URL_PREFIX_FRIENDS  = "https://graph.facebook.com/me/friends?access_token=";

    private TextView                    textInstructionsOrLink;
    private Button                      buttonLoginLogout;
    private final Session.StatusCallback    statusCallback      = new SessionStatusCallback();

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment, container, false);

        buttonLoginLogout = (Button) view
            .findViewById(R.id.buttonLoginLogout);
        textInstructionsOrLink = (TextView) view
            .findViewById(R.id.instructionsOrLink);

        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);

        Session session = Session.getActiveSession();
        if (session == null) {
            if (savedInstanceState != null) {
                session = Session.restoreSession(getActivity(), null,
                    statusCallback, savedInstanceState);
            }
            if (session == null) {
                session = new Session(getActivity());
            }
            Session.setActiveSession(session);
            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
                session.openForRead(new Session.OpenRequest(this)
                    .setCallback(statusCallback));
            }
        }

        updateView();

        return view;
    }

    @Override
    public void onStart() {
        super.onStart();
        Session.getActiveSession().addCallback(statusCallback);
    }

    @Override
    public void onStop() {
        super.onStop();
        Session.getActiveSession().removeCallback(statusCallback);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        Session.getActiveSession().onActivityResult(getActivity(),
            requestCode, resultCode, data);
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        Session session = Session.getActiveSession();
        Session.saveSession(session, outState);
    }

    private void updateView() {
        Session session = Session.getActiveSession();
        if (session.isOpened()) {
            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS
                + session.getAccessToken());
            buttonLoginLogout.setText(R.string.logout);
            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    onClickLogout();
                }
            });

            session.addCallback(new StatusCallback() {

                @Override
                public void call(Session session, SessionState state,
                    Exception exception) {
                    List&lt;String&gt; PERMISSIONS = Arrays
                        .asList("publish_actions");
                    session
                        .requestNewPublishPermissions(new Session.NewPermissionsRequest(
                            getActivity(), PERMISSIONS));

                    Request request = Request.newStatusUpdateRequest(
                        session, "getActiveSession",
                        new Request.Callback() {
                            @Override
                            public void onCompleted(Response response) {
                                L.d("fb:done = "
                                    + response.getGraphObject() + ","
                                    + response.getError());
                            }
                        });
                    request.executeAsync();

                }

            });


        } else {
            textInstructionsOrLink.setText(R.string.instructions);
            buttonLoginLogout.setText(R.string.login);
            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    onClickLogin();
                }
            });
        }
    }

    private void onClickLogin() {
        Session session = Session.getActiveSession();
        if (!session.isOpened() &amp;&amp; !session.isClosed()) {
            session.openForRead(new Session.OpenRequest(this)
                .setCallback(statusCallback));
        } else {
            Session.openActiveSession(getActivity(), this, true,
                statusCallback);
        }
    }

    private void onClickLogout() {
        Session session = Session.getActiveSession();
        if (!session.isClosed()) {
            session.closeAndClearTokenInformation();
        }
    }

    private class SessionStatusCallback implements Session.StatusCallback {
        @Override
        public void call(Session session, SessionState state,
            Exception exception) {
            updateView();
        }
    }
}
</code></pre>
