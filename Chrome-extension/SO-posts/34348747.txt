<p>IMHO, they are not different, actually you can find that <code>Callback</code> is also an interface.</p>

<pre><code>package com.squareup.okhttp;

import java.io.IOException;

public interface Callback {
  /**
   * Called when the request could not be executed due to cancellation, a
   * connectivity problem or timeout. Because networks can fail during an
   * exchange, it is possible that the remote server accepted the request
   * before the failure.
   */
  void onFailure(Request request, IOException e);

  /**
   * Called when the HTTP response was successfully returned by the remote
   * server. The callback may proceed to read the response body with {@link
   * Response#body}. The response is still live until its response body is
   * closed with {@code response.body().close()}. The recipient of the callback
   * may even consume the response body on another thread.
   *
   * &lt;p&gt;Note that transport-layer success (receiving a HTTP response code,
   * headers and body) does not necessarily indicate application-layer
   * success: {@code response} may still indicate an unhappy HTTP response
   * code like 404 or 500.
   */
  void onResponse(Response response) throws IOException;
}
</code></pre>

<p>However, when I want to reuse some codes (or build an util class), I often use as the following:</p>

<p>Interface:</p>

<pre><code>public interface OkHttpListener {
    void onFailure(Request request, IOException e);
    void onResponse(Response response) throws IOException;
}
</code></pre>

<p>Util class:</p>

<pre><code>public class OkHttpUtils {
    public static void getData(String url, final OkHttpListener listener){
        OkHttpClient client = new OkHttpClient();
        // GET request
        Request request = new Request.Builder()
                .url(url)
                .build();
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Request request, IOException e) {
                listener.onFailure(request, e);
            }
            @Override
            public void onResponse(Response response) throws IOException {
                listener.onResponse(response);
            }
        });
    }


// the following uses built-in okhttp's Callback interface
    public static void getData2(String url, Callback callbackListener){
        OkHttpClient client = new OkHttpClient();
        // GET request
        Request request = new Request.Builder()
                .url(url)
                .build();
        client.newCall(request).enqueue(callbackListener);
    }
    // other methods...
}
</code></pre>

<p>Then in activity classes:</p>

<pre><code>       OkHttpListener listener = new OkHttpListener() {
            @Override
            public void onFailure(Request request, IOException e) {
                Log.e(LOG_TAG, e.toString());
            }

            @Override
            public void onResponse(Response response) throws IOException {
                String responseBody = response.body().string();
                Log.i(LOG_TAG, responseBody);
            }
        };
        String url = "http://myserver/api/getvalues";
        OkHttpUtils.getData(url, listener);
        String url1 = "http://myserver/api/getvalues/123";
        OkHttpUtils.getData(url1, listener);
</code></pre>

<p>or </p>

<pre><code>       Callback callbackListener = new Callback() {
            @Override
            public void onFailure(Request request, IOException e) {
                Log.e(LOG_TAG, e.toString());
            }

            @Override
            public void onResponse(Response response) throws IOException {
                String responseBody = response.body().string();
                Log.i(LOG_TAG, responseBody);
            }
        };

        String url = "http://myserver/api/getvalues";
        OkHttpUtils.getData2(url, callbackListener);
        String url1 = "http://myserver/api/getvalues/123";
        OkHttpUtils.getData2(url1, callbackListener);
</code></pre>

<p>Hope it helps!</p>
