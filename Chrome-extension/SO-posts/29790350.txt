<p>I have solved this problem by using this code.
When u save this just draw bitmap on canvas with your desire background.</p>

<pre><code>public class DrawingView extends View {


public Paint mPaint;
public int width;
public int height;
private Bitmap mBitmap;
private Canvas mCanvas;
private Path mPath;
private Paint mBitmapPaint;
static Context context;
private Paint circlePaint;
public boolean eraseMode = false;
private Path circlePath;

public DrawingView(Context c) {
    super(c);
    context = c;
    initialize();
}

public void initialize(){
    mPath = new Path();
    mBitmapPaint = new Paint(Paint.DITHER_FLAG);
    circlePaint = new Paint();
    circlePath = new Path();
    circlePaint.setAntiAlias(true);
    circlePaint.setColor(Color.TRANSPARENT);
    circlePaint.setStyle(Paint.Style.STROKE);
    circlePaint.setStrokeJoin(Paint.Join.MITER);
    circlePaint.setStrokeWidth(4f);
    mPaint = new Paint();
    mPaint.setAntiAlias(true);
    mPaint.setDither(true);
    mPaint.setColor(Color.BLACK);
    mPaint.setStyle(Paint.Style.STROKE);
    mPaint.setStrokeJoin(Paint.Join.ROUND);
    mPaint.setStrokeCap(Paint.Cap.ROUND);
    mPaint.setStrokeWidth(6);
}

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    super.onSizeChanged(w, h, oldw, oldh);

    mBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
    mCanvas = new Canvas(mBitmap);
}

@Override
protected void onDraw(Canvas canvas) {
    canvas.drawBitmap(mBitmap, 0, 0, mBitmapPaint);
    canvas.drawPath(circlePath, circlePaint);
    super.onDraw(canvas);
}

private float mX, mY;
private static final float TOUCH_TOLERANCE = 4;

private void touch_start(float x, float y) {
    mPath.reset();
    mPath.moveTo(x, y);
    mX = x;
    mY = y;
}

private void touch_move(float x, float y) {
    float dx = Math.abs(x - mX);
    float dy = Math.abs(y - mY);
    if (dx &gt;= TOUCH_TOLERANCE || dy &gt;= TOUCH_TOLERANCE) {
        mPath.quadTo(mX, mY, (x + mX) / 2, (y + mY) / 2);
        mX = x;
        mY = y;

        circlePath.reset();
        circlePath.addCircle(mX, mY, 30, Path.Direction.CW);
        mCanvas.drawPath(mPath, mPaint);
    }
}

private void touch_up() {
    mPath.lineTo(mX, mY);
    circlePath.reset();
    mCanvas.drawPath(mPath, mPaint);
    mPath.reset();
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    float x = event.getX();
    float y = event.getY();

    switch (event.getAction()) {
    case MotionEvent.ACTION_DOWN:
        touch_start(x, y);
        invalidate();
        break;
    case MotionEvent.ACTION_MOVE:
        touch_move(x, y);
        invalidate();
        break;
    case MotionEvent.ACTION_UP:
        touch_up();
        invalidate();
        break;
    }
    return true;
}

public void setErase() {
    mPaint.setXfermode(null);
    mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
    eraseMode = true;
}

public void removeErase() {
    mPaint.setXfermode(null);
     eraseMode = false;
}

public void SaveImage() {
    Bitmap image1 = Bitmap.createScaledBitmap(mBitmap, 1080, 780, true);

    File filepath = Environment.getExternalStorageDirectory();
    File file = new File(filepath.getAbsolutePath() + "/NumberAndAlphabet");
    if (!file.exists()) {
        file.mkdir();
    }
    Date date = new Date(System.currentTimeMillis());
    SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss",
            Locale.getDefault());
    String time = formatter.format(date);
    File dir = new File(file, "Image" + time + ".PNG");
    OutputStream output = null;
    try {
        output = new FileOutputStream(dir);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
    Bitmap newbitmap = Bitmap.createBitmap(image1.getWidth(), image1.getHeight(), image1.getConfig());
    Canvas can = new Canvas(newbitmap);
    can.drawColor(Color.WHITE);
    can.drawBitmap(image1, 0, 0, null);
    newbitmap.compress(Bitmap.CompressFormat.JPEG, 100, output);
    Toast.makeText(context, "Image Saved...", Toast.LENGTH_SHORT).show();
}
</code></pre>

<p>}</p>
