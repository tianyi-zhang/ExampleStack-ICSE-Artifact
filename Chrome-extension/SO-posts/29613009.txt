<p>Sandesh I am storing the item state each time get view is called as you can see by using setTag and getTag on the checkboxes.
I have Solved the issue now.
The problem was I was creating new contact item each time the filter was called so the previous contact item was gone. </p>

<p>Problematic code is below</p>

<pre><code>private class ValueFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            FilterResults results = new FilterResults();

            if (constraint != null &amp;&amp; constraint.length() &gt; 0) {
                ArrayList&lt;ContactItem&gt; filterList = new ArrayList&lt;ContactItem&gt;();
                for (int i = 0; i &lt; mStringFilterList.size(); i++) {
                    if ( (mStringFilterList.get(i).getName().toUpperCase() )
                            .contains(constraint.toString().toUpperCase())) {

                        ContactItem contact = new ContactItem(mStringFilterList.get(i)
                                .getName() ,  mStringFilterList.get(i)
                                .getPhoneNumber() ,  mStringFilterList.get(i)
                                .isSelected());

                        filterList.add(contact);
                    }
                }
                results.count = filterList.size();
                results.values = filterList;
            } else {
                synchronized(this){
                    results.count = mStringFilterList.size();
                    results.values = mStringFilterList;
                }

            }
            return results;

        }
</code></pre>

<p>Solved Code. I had to add the same filter objects which i got from the mStringFilterList in the filterlist.</p>

<pre><code>private class ValueFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            FilterResults results = new FilterResults();

            if (constraint != null &amp;&amp; constraint.length() &gt; 0) {
                ArrayList&lt;ContactItem&gt; filterList = new ArrayList&lt;ContactItem&gt;();
                for (int i = 0; i &lt; mStringFilterList.size(); i++) {
                    if ( (mStringFilterList.get(i).getName().toUpperCase() )
                            .contains(constraint.toString().toUpperCase())) {

//                        ContactItem contact = new ContactItem(mStringFilterList.get(i)
//                                .getName() ,  mStringFilterList.get(i)
//                                .getPhoneNumber() ,  mStringFilterList.get(i)
//                                .isSelected());

                        filterList.add(mStringFilterList.get(i));
                    }
                }
                results.count = filterList.size();
                results.values = filterList;
            } else {
                synchronized(this){
                    results.count = mStringFilterList.size();
                    results.values = mStringFilterList;
                }

            }
            return results;

        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint,
                                      FilterResults results) {
            contactlist = (ArrayList&lt;ContactItem&gt;) results.values;
            notifyDataSetChanged();
        }

    }
</code></pre>
