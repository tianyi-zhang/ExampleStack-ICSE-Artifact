<p>Use : <code>ImageView imageView1= ((ImageView) viewPager.findViewById (R.id.imageView1));</code></p>

<p>For more image processing effects/filters you can go through:</p>

<p>Catalano Framework, It works in Desktop as Android.</p>

<p><a href="http://code.google.com/p/catalano-framework/" rel="nofollow">http://code.google.com/p/catalano-framework/</a></p>

<p>Example:</p>

<pre><code>FastBitmap fb = new FastBitmap(bitmap);
//If you want to apply threshold
Grayscale g = new Grayscale();
g.applyInPlace(fb);
Threshold t = new Threshold(120);
t.applyInPlace(fb);
bitmap = fb.toBitmap();
</code></pre>

<p>or if you dont want to use any libraries,
take a look at Android: Image Processing
it has fantastic image processing example</p>

<pre><code>public static Bitmap doGreyscale(Bitmap src) {
    // constant factors
    final double GS_RED = 0.299;
    final double GS_GREEN = 0.587;
    final double GS_BLUE = 0.114;

    // create output bitmap
    Bitmap bmOut = Bitmap.createBitmap(src.getWidth(), src.getHeight(), src.getConfig());
    // pixel information
    int A, R, G, B;
    int pixel;

    // get image size
    int width = src.getWidth();
    int height = src.getHeight();

    // scan through every single pixel
    for(int x = 0; x &lt; width; ++x) {
        for(int y = 0; y &lt; height; ++y) {
            // get one pixel color
            pixel = src.getPixel(x, y);
            // retrieve color of all channels
            A = Color.alpha(pixel);
            R = Color.red(pixel);
            G = Color.green(pixel);
            B = Color.blue(pixel);
            // take conversion up to one single value
            R = G = B = (int)(GS_RED * R + GS_GREEN * G + GS_BLUE * B);
            // set new pixel color to output bitmap
            bmOut.setPixel(x, y, Color.argb(A, R, G, B));
        }
    }

    // return final image
    return bmOut;
}
</code></pre>
