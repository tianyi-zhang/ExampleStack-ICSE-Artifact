<p><strong>EDIT</strong></p>

<p>After reading the post again I realised I need to remove dups too so:</p>

<p>You can use a <code>TreeSet</code> to impose unqiueness and sort by DOB - I presume that a person with the same first name, surname and date of birth is the same person.</p>

<p>First I would wrap your Node in a class that implements <code>Comparable</code> and that also does the getting of all those properties you have. The wrapper needs to implement <code>Comparable</code> as the <code>TreeSet</code> uses this method to decide whether elements are different (<code>a.compareTo(b) != 0</code>) and also how to order them.</p>

<pre><code>public static final class NodeWrapper implements Comparable&lt;NodeWrapper&gt; {

    private static final SimpleDateFormat DOB_FORMAT = new SimpleDateFormat("yyyy-MM-dd");
    private final Element element;
    private final Date dob;
    private final String firstName;
    private final String surName;
    private final String sex;

    public NodeWrapper(final Node node) {
        this.element = (Element) node;
        try {
            this.dob = DOB_FORMAT.parse(initDateOfBirth());
        } catch (ParseException ex) {
            throw new RuntimeException("Failed to parse dob", ex);
        }
        this.firstName = initFirstName();
        this.surName = initSurnameName();
        this.sex = initSex();
    }

    private String initFirstName() {
        return getNodeValue("firstname");
    }

    private String initSurnameName() {
        return getNodeValue("surname");
    }

    private String initDateOfBirth() {
        return getNodeValue("dateofbirth");
    }

    private String initSex() {
        return getNodeValue("sex");
    }

    private String getNodeValue(final String name) {
        return element.getElementsByTagName(name).item(0).getTextContent();
    }

    public Node getNode() {
        return element;
    }

    Date getDob() {
        return dob;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getSurName() {
        return surName;
    }

    public String getDateOfBirth() {
        return DOB_FORMAT.format(dob);
    }

    public String getSex() {
        return sex;
    }

    public int compareTo(NodeWrapper o) {
        int c;
        c = getDob().compareTo(o.getDob());
        if (c != 0) {
            return c;
        }
        c = getSurName().compareTo(o.getSurName());
        if (c != 0) {
            return c;
        }
        return getFirstName().compareTo(o.getFirstName());
    }

    @Override
    public int hashCode() {
        int hash = 5;
        hash = 47 * hash + (this.dob != null ? this.dob.hashCode() : 0);
        hash = 47 * hash + (this.firstName != null ? this.firstName.hashCode() : 0);
        hash = 47 * hash + (this.surName != null ? this.surName.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final NodeWrapper other = (NodeWrapper) obj;
        if (this.dob != other.dob &amp;&amp; (this.dob == null || !this.dob.equals(other.dob))) {
            return false;
        }
        if ((this.firstName == null) ? (other.firstName != null) : !this.firstName.equals(other.firstName)) {
            return false;
        }
        if ((this.surName == null) ? (other.surName != null) : !this.surName.equals(other.surName)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "FirstName: " + getFirstName() + ". Surname: " + getSurName() + ". DOB: " + getDateOfBirth() + ". Sex: " + getSex() + ".";
    }
}
</code></pre>

<p>So if the date of birth, surname and firstname are all equal we assume it is the same person - we return 0.  It is good practice, if using <code>compareTo</code> in this way to make it <strong>consistent with equals</strong> so that if <code>a.compareTo(b)==0</code> then <code>a.equals(b)</code>, I have added the required <code>equals</code> and <code>hashCode</code> methods as well. </p>

<p>Now you can use a <code>TreeSet</code> in your code which will automatically sort and guarantee unqiueness:</p>

<pre><code>final Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File("file.xml"));

final Set&lt;NodeWrapper&gt; inimesteList = new TreeSet&lt;NodeWrapper&gt;();

final NodeList isa = doc.getElementsByTagName("isa");
for (int i = 0; i &lt; isa.getLength(); i++) {
    inimesteList.add(new NodeWrapper(isa.item(i)));
}
final NodeList ema = doc.getElementsByTagName("ema");
for (int i = 0; i &lt; ema.getLength(); i++) {
    inimesteList.add(new NodeWrapper(ema.item(i)));
}
final NodeList isik = doc.getElementsByTagName("isik");
for (int i = 0; i &lt; isik.getLength(); i++) {
    inimesteList.add(new NodeWrapper(isik.item(i)));
}
System.out.println();
System.out.println("Total: " + inimesteList.size());

for (final NodeWrapper nw : inimesteList) {
    System.out.println(nw);
}
</code></pre>

<p>I have also added a <code>toString</code> method and used that to print the nodes - this makes the code much cleaner.</p>

<p>The <code>Document</code> approach, while seeming simpler than JAXB, is riddled with this sort of tedium. As you already have a schema I would <strong>strongly recommend</strong> that you make the move to <code>xjc</code> and JAXB unmarshalling - this will make this sort of stuff hundereds of times easier.</p>
