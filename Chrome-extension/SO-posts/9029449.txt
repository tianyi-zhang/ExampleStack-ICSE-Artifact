<p>I also don't see where it is documented, but padding in a <code>LayerDrawable</code> is cumulative. That is, padding at one layer affects the bounds of all higher layers. This is from <a href="https://github.com/android/platform_frameworks_base/blob/master/graphics/java/android/graphics/drawable/LayerDrawable.java">the source for <code>LayerDrawable</code></a>:</p>

<pre><code>@Override
protected void onBoundsChange(Rect bounds) {
    final ChildDrawable[] array = mLayerState.mChildren;
    final int N = mLayerState.mNum;
    int padL=0, padT=0, padR=0, padB=0;
    for (int i=0; i&lt;N; i++) {
        final ChildDrawable r = array[i];
        r.mDrawable.setBounds(bounds.left + r.mInsetL + padL,
                              bounds.top + r.mInsetT + padT,
                              bounds.right - r.mInsetR - padR,
                              bounds.bottom - r.mInsetB - padB);
        padL += mPaddingL[i];
        padR += mPaddingR[i];
        padT += mPaddingT[i];
        padB += mPaddingB[i];
    }
}
</code></pre>

<p>(<code>LayerDrawable.getPadding(Rect)</code> follows the same logic.) Since an <code>InsetDrawable</code> uses its insets as padding (as <a href="http://developer.android.com/reference/android/graphics/drawable/InsetDrawable.html#getPadding%28android.graphics.Rect%29">documented</a>), this explains the behavior you're seeing.</p>

<p>I think this is a poor design decision, but you're kind of stuck with it, I'm afraid. I don't think it can be overridden.</p>
