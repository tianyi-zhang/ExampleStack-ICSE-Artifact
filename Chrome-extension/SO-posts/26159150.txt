<p>The <a href="http://www.bouncycastle.org/wiki/display/JA1/Elliptic+Curve+Key+Pair+Generation+and+Key+Factories">Bouncy Castle example code on elliptic curve key pair Generation and key factories</a> got me pretty close.</p>

<p>Once I managed to create a ECDSA key factory and a curve specification for the <code>secp256r1</code>/<code>NIST P-256</code>/<code>P-256</code>/<code>prime256v1</code> curve I was able to use <code>ECPointUtil.decodePoint</code> to obtain a curve point. I could then generate a public key specification that enabled me to generate a  public key like this:</p>

<pre class="lang-java prettyprint-override"><code>private PublicKey getPublicKeyFromBytes(byte[] pubKey) throws NoSuchAlgorithmException, InvalidKeySpecException {
    ECNamedCurveParameterSpec spec = ECNamedCurveTable.getParameterSpec("prime256v1");
    KeyFactory kf = KeyFactory.getInstance("ECDSA", new BouncyCastleProvider());
    ECNamedCurveSpec params = new ECNamedCurveSpec("prime256v1", spec.getCurve(), spec.getG(), spec.getN());
    ECPoint point =  ECPointUtil.decodePoint(params.getCurve(), pubKey);
    ECPublicKeySpec pubKeySpec = new ECPublicKeySpec(point, params);
    ECPublicKey pk = (ECPublicKey) kf.generatePublic(pubKeySpec);
    return pk;
}
</code></pre>
