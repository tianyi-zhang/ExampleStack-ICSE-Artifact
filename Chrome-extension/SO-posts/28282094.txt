<p>I suppose you have a class Product with price, name ... </p>

<p>You have to create a layout (list_row.xml) with the format that you want, for example:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:orientation="vertical" android:layout_width="match_parent"
android:background="?android:attr/activatedBackgroundIndicator"
android:layout_height="match_parent"&gt;

&lt;TextView
    android:id="@+id/tv_subtitle_list"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_alignLeft="@+id/tv_title_list"
    android:layout_below="@+id/tv_title_list"
    android:longClickable="true" /&gt;

&lt;TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/tv_title_list"
    android:longClickable="true" /&gt;

&lt;ImageView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_alignParentRight="true"
    android:layout_alignRight="@+id/tv_title_list"
    android:layout_alignBottom="@+id/tv_title_list"
    android:id="@+id/img_sync"
    android:longClickable="true" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>After that, you need a List Adapter, the best way is create a Custom List adapter</p>

<pre><code>public class ProductListAdapter extends ArrayAdapter&lt;Product&gt;
{
private  List&lt;Product&gt; objects;
private Context context;

public ProductListAdapter(Context context, int textViewResourceId, List&lt;Product&gt; objects) 
{
    super(context, textViewResourceId, objects);
    this.context = context;
    this.objects = objects;

}


@Override
public int getCount() {
    return objects.size();
}

@Override
public Incidence getItem(int position) {
    return objects.get(position);
}


@Override
public long getItemId(int position) {

    if(objects.get(position)==null) return -1;
    return objects.get(position).getId(); // your database id

}

   @Override
public void addAll(Collection&lt;? extends Product&gt; objects) {
    this.objects= new ArrayList&lt;&gt;(objects);
    notifyDataSetChanged();
}




@Override
public View getView(int position, View convertView, ViewGroup parent)
{
    Incidence rowItem = getItem(position);  // get selected item

    if (convertView == null)
    {
        LayoutInflater mInflater = (LayoutInflater) context
                .getSystemService(Activity.LAYOUT_INFLATER_SERVICE);

        convertView = mInflater.inflate(R.layout.list_row, null);
    }

    /* Access to row components  */

    TextView title = (TextView) convertView.findViewById(R.id.tv_title_list); // name
    TextView subtitle = (TextView) convertView.findViewById(R.id.tv_subtitle_list); // price
    ImageView img = (ImageView) convertView.findViewById(R.id.img_sync); // image


    title.setText(rowItem.getName());
    subtitle.setText(rowItem.getPrice());
    img.setImageResource(android.R.drawable.ic_menu_share);  


    return convertView;
}

}
</code></pre>

<p>In your fragment or activity  you create the adapter:</p>

<pre><code>public class FragListIncidences extends ListFragment
{


    public void initUI() // include this in your onCreate
    {
        mAdapter = new  ProductListAdapter(getActivity(),
                android.R.layout.simple_list_item_1, new ArrayList&lt;Product&gt;());

        setListAdapter(mAdapter); // because of ListFragment
    }
}
</code></pre>

<p>The checkbox functionality that you want can be implemented in two ways:</p>

<ul>
<li>Add Cechbox component in your list_row.xml</li>
<li><p>You can use a contextual action mode menu. Here you have an example  <a href="http://developer.android.com/intl/es/guide/topics/ui/menus.html#CAB" rel="nofollow">http://developer.android.com/intl/es/guide/topics/ui/menus.html#CAB</a></p>

<pre><code>public void initUI() // include this in your onCreate
{
    mAdapter = new  ProductListAdapter(getActivity(),
            android.R.layout.simple_list_item_1, new ArrayList&lt;Product&gt;());

    setListAdapter(mAdapter); // because of ListFragment
   mListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);

    mListView.setMultiChoiceModeListener(new  AbsListView.MultiChoiceModeListener()
    {

        @Override
        public void onItemCheckedStateChanged(ActionMode mode, int position,
                                              long id, boolean checked) {
            // Here you can do something when items are selected/de-selected,
            // such as update the title in the CAB

            final int checkedCount = mListView.getCheckedItemCount();
            mode.setTitle(checkedCount + " Selected");

        }

        @Override
        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
            // Respond to clicks on the actions in the CAB


                switch (item.getItemId()) {

                    case R.id.action_get:
                        getSelectedItems();
                        mode.finish(); // Action picked, so close the CAB
                        return true;

                    default:
                        return false;
                }

            return false;
        }

        @Override
        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
            // Inflate the menu for the CAB
            MenuInflater inflater = mode.getMenuInflater();
            contextual_menu =menu;
            inflater.inflate(R.menu.subactions, menu);


        }

        @Override
        public void onDestroyActionMode(ActionMode mode) {
            // Here you can make any necessary updates to the activity when
            // the CAB is removed. By default, selected items are deselected/unchecked.


        }

        @Override
        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
            // Here you can perform updates to the CAB due to
            // an invalidate() request
             return false;
   }
 });
 }


 private void getSelectedItems()  {
      final SparseBooleanArray selected = mListView.getCheckedItemPositions();


      for (int i = (selected.size() - 1); i &gt;= 0; i--)
         if (selected.valueAt(i))
              doWhateverYouWant (selected.keyAt(i));
}
</code></pre></li>
</ul>
