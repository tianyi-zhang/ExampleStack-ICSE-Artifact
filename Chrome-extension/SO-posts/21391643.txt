<p>Here is generator with enough IDs.</p>

<pre><code>public class Main {
    private char[] A;
    void init()
    {
       A = new char[] { 
           '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
           'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
           'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
           'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
           'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'
       };
       System.out.println("digits = " + A.length);

       //for (int i = 0; i &lt; A.length; i++)
       //    System.out.print(A[i] + " ");
       //System.out.println();
    }

    public void generate(int length, String id)
    {
        if (length == 3) {
            System.out.println(id);
        } else {
            for (int i = 0; i &lt; A.length; i++)
                generate(length + 1, id + A[i]);
        }
    }

    public static void main(String[] args) {
        Main test = new Main();
        test.init();
        test.generate(0,  "");
    }
}
</code></pre>

<p>The number of unique IDs is (26 + 26 + 10) ^ 3 = 62^3 = 238328.</p>

<p>Obviously you need to adapt it to fit your particular problem.</p>

<p>Actually only 43 characters are needed since 43 ^ 3 = 79507 > 75200.</p>

<p><strong>EDIT:</strong> Explanation of the <code>generate()</code> method.</p>

<p>This method implements a <a href="http://en.wikipedia.org/wiki/Recursion" rel="nofollow">recursive</a> algorithm to generate combinations of characters (the keys). The meaning of the parameters is the following:</p>

<ul>
<li><strong>length</strong> The length of the key.</li>
<li><strong>id</strong> stores the combination of characters.</li>
</ul>

<p>The following picture can help to understand the algorithm.</p>

<p><img src="http://i.stack.imgur.com/BRRdM.png" alt="enter image description here"></p>

<p>This is similar to how the decimal (or any other base) numbers are formed.</p>

<p>A thing that I don't noticed is that you are trying to first create all the possible keys of length 1, then all possible keys of length 2, and so on. My generator creates keys of exactly 3 character only. That behavior can be achieved modifying the <code>generate()</code> method as follows:</p>

<pre><code>public void generate(int count, String id)
{
    if (count == 0) {
        System.out.println(id);
    } else {
        for (int i = 0; i &lt; A.length; i++)
            generate(count - 1, id + A[i]);
    }
}
</code></pre>

<p>And then call the method tree times:</p>

<pre><code>test.generate(1,  "");
test.generate(2,  "");
test.generate(3,  "");
</code></pre>

<p>Some keys contains leading zeros but that shouldn't be a problem since this keys are identifiers, not numbers. The number of possible keys increases by <em>length(alphabet)</em> + <em>length(alphabet) ^ 2</em>, i.e. we have 62 + 62^2 additional keys.</p>

<p>Since the length of the key is at most 3 the iterative version can be easily implemented using <code>for</code> loops:</p>

<pre><code>public void iterative_generator()
{
    for (int i = 0; i &lt; A.length; i++) {
        for (int j = 0; j &lt; A.length; j++) {
            for (int k = 0; k &lt; A.length; k++) {
                System.out.println("" + A[i] + A[j] + A[k]);
            }
        }
    }
}
</code></pre>

<p>I think you get the idea.</p>
