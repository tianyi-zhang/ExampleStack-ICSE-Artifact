<pre><code>public class PlacesAutoCompleteAdapter extends ArrayAdapter&lt;String&gt; implements
    Filterable {
private ArrayList&lt;MapdataList&gt; resultList;

public PlacesAutoCompleteAdapter(Context context, int textViewResourceId) {
    super(context, textViewResourceId);

}

@Override
public int getCount() {
    return resultList.size();
}

@Override
public String getItem(int index) {

    MapdataList data = resultList.get(index);

    return data.getPlaceName();

}

public String mthod(int index) {
    MapdataList data = resultList.get(index);

    return data.getPlaceID();

}

@Override
public Filter getFilter() {
    Filter filter = new Filter() {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            FilterResults filterResults = new FilterResults();
            if (constraint != null) {
                // Retrieve the autocomplete results.
                resultList = autocomplete(constraint.toString());

                // Assign the data to the FilterResults
                filterResults.values = resultList;
                filterResults.count = resultList.size();
            }
            return filterResults;
        }

        @Override
        protected void publishResults(CharSequence constraint,
                FilterResults results) {
            if (results != null &amp;&amp; results.count &gt; 0) {
                notifyDataSetChanged();
            } else {
                notifyDataSetInvalidated();
            }
        }
    };
    return filter;
}

private static final String LOG_TAG = "ExampleApp";
private static final String PLACES_API_BASE = "https://maps.googleapis.com/maps/api/place";
private static final String TYPE_AUTOCOMPLETE = "/autocomplete";
private static final String OUT_JSON = "/json";
private static final String API_KEY = "serverkry";

private ArrayList&lt;MapdataList&gt; autocomplete(String input) {
    ArrayList&lt;MapdataList&gt; resultList = null;

    HttpURLConnection conn = null;
    StringBuilder jsonResults = new StringBuilder();
    try {
        StringBuilder sb = new StringBuilder(PLACES_API_BASE
                + TYPE_AUTOCOMPLETE + OUT_JSON);
        sb.append("?key=" + API_KEY);
        // sb.append("&amp;components=country:uk");
        sb.append("&amp;sensor=true");
        sb.append("&amp;input=" + URLEncoder.encode(input, "utf8"));

        URL url = new URL(sb.toString());
        conn = (HttpURLConnection) url.openConnection();
        InputStreamReader in = new InputStreamReader(conn.getInputStream());

        // Load the results into a StringBuilder
        int read;
        char[] buff = new char[1024];
        while ((read = in.read(buff)) != -1) {
            jsonResults.append(buff, 0, read);
        }
    } catch (MalformedURLException e) {
        Log.e(LOG_TAG, "Error processing Places API URL", e);
        return resultList;
    } catch (IOException e) {
        Log.e(LOG_TAG, "Error connecting to Places API", e);
        return resultList;
    } finally {
        if (conn != null) {
            conn.disconnect();
        }
    }

    try {
        // Create a JSON object hierarchy from the results
        JSONObject jsonObj = new JSONObject(jsonResults.toString());
        JSONArray predsJsonArray = jsonObj.getJSONArray("predictions");

        // Extract the Place descriptions from the results
        resultList = new ArrayList&lt;MapdataList&gt;(predsJsonArray.length());
        for (int i = 0; i &lt; predsJsonArray.length(); i++) {

            MapdataList mapData = new MapdataList();
            mapData.setPlaceName(predsJsonArray.getJSONObject(i).getString(
                    "description"));
            mapData.setPlaceID(predsJsonArray.getJSONObject(i).getString(
                    "place_id"));

            resultList.add(mapData);

            // resultList.add(predsJsonArray.getJSONObject(i).getString(
            // "description"));
            // resultList.add(1,predsJsonArray.getJSONObject(i).getString(
            // "place_id"));
        }
    } catch (JSONException e) {
        Log.e(LOG_TAG, "Cannot process JSON results", e);
    }

    return resultList;
  }
  }
</code></pre>

<p>`   </p>

<pre><code>public class TestMapAutocomplete extends Activity {
PlacesAutoCompleteAdapter obj;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_test_map_autocomplete);

    AutoCompleteTextView YY = (AutoCompleteTextView) findViewById(R.id.Google_autoCompleteTextView1);
    obj = new PlacesAutoCompleteAdapter(this, R.layout.google_list_items);
    YY.setAdapter(obj);

    YY.setOnItemClickListener(getPlaceId);

}

public OnItemClickListener getPlaceId = new OnItemClickListener() {

    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position,
            long id) {
        // TODO Auto-generated method stub

        // int dd= (Integer) parent.getItemAtPosition(position);
        String mcityselect = obj.mthod(position);
        // String mcityselect = (String) parent.getItemAtPosition(position);
        String mcityccselect = (String) parent.getItemAtPosition(position);

    }
};

  }
</code></pre>

<p>its working ... do like this create server key and allow all then in android   use autoacmpltere Create a server key in google api console and allow all then enable google feture in permissions 
its working bro try this ....</p>
