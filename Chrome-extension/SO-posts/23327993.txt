<p>I have another solution for  String Array[] using Mergesort:</p>

<pre><code>public static void main(String[] args)
{
  int maxSize = 19;             // array size
  DArray arr;                    // reference to array
  arr = new DArray(maxSize);     // create the array
  String[] nameList = {"John", "Mark", "Amber", "Tony", "Matt", "George", 
            "Will", "Bob", "Paul", "Mary Ellen", "Kate", "Joe", "Fred", "Joe", 
            "Anne", "Amber", "Kimberly", "Kelsey", "Matthew"};

 for (int i=0; i&lt;19; i++)
     {
   arr.insert(nameList[i]);
      }

  arr.display();                 // display items

  arr.mergeSort();               // merge sort the array
                              //search using binary search 
  arr.display();                 // display items again
  }  // end main()
}  // end class MergeSortApp

////////////////////////////////////////////////////////////////
public class DArray
{
private String[] theArray;          // ref to array theArray of strings
private int nElems;               // number of data items
//-----------------------------------------------------------
public DArray(int max)            // constructor
  {
  theArray = new String[max];      // create array
  nElems = 0;
  }
//-----------------------------------------------------------
public void insert(String st)    // put element into array
  {
  theArray[nElems] = st;      // insert it
  nElems++;                      // increment size
  }
//-----------------------------------------------------------
public void display()             // displays array contents
  {
     for(int j=0; j&lt;nElems; j++)    // for each element,
     System.out.print(theArray[j] + " ");  // display it
     System.out.println("");
  }
//-----------------------------------------------------------
public void mergeSort()           // called by main()
  {                              // provides workspace
    String[] workSpace = new String[nElems];
    recMergeSort(workSpace, 0, nElems-1);
  }
//-----------------------------------------------------------
private void recMergeSort(String[] workSpace, int lowerBound,
                                           int upperBound)
  {
  if(lowerBound == upperBound)            // if range is 1,
     return;                              // no use sorting
 else
     {                                    // find midpoint
     int mid = (lowerBound+upperBound) / 2;
                                         // sort low half
    recMergeSort(workSpace, lowerBound, mid);
                                         // sort high half
     recMergeSort(workSpace, mid+1, upperBound);
                                         // merge them
     merge(workSpace, lowerBound, mid+1, upperBound);
     }  // end else
  }  // end recMergeSort()
//-----------------------------------------------------------
private void merge(String[] workSpace, int lowPtr,
                       int highPtr, int upperBound)
  {
    int j = 0;                             // workspace index
    int lowerBound = lowPtr;
    int mid = highPtr-1;
    int n = upperBound-lowerBound+1;       // # of items

    while(lowPtr &lt;= mid &amp;&amp; highPtr &lt;= upperBound)
            if(  theArray[highPtr].compareTo(theArray[lowPtr])&gt; 0)
           workSpace[j++] = theArray[lowPtr++];
     else
        workSpace[j++] = theArray[highPtr++];

   while(lowPtr &lt;= mid)
     workSpace[j++] = theArray[lowPtr++];

   while(highPtr &lt;= upperBound)
     workSpace[j++] = theArray[highPtr++];

  for(j=0; j&lt;n; j++)
     theArray[lowerBound+j] = workSpace[j];
  }  // end merge()

}  // end class DArray
////////////////////////////////////////////////////////////////
</code></pre>
