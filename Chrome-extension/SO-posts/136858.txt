<p>If you're trying to select k distinct elements from a list of n, the methods you gave above will be O(n) or O(kn), because removing an element from a Vector will cause an arraycopy to shift all the elements down.</p>

<p>Since you're asking for the best way, it depends on what you are allowed to do with your input list.  </p>

<p>If it's acceptable to modify the input list, as in your examples, then you can simply swap k random elements to the beginning of the list and return them in O(k) time like this:</p>

<pre><code>public static &lt;T&gt; List&lt;T&gt; getRandomSubList(List&lt;T&gt; input, int subsetSize)
{
    Random r = new Random();
    int inputSize = input.size();
    for (int i = 0; i &lt; subsetSize; i++)
    {
        int indexToSwap = i + r.nextInt(inputSize - i);
        T temp = input.get(i);
        input.set(i, input.get(indexToSwap));
        input.set(indexToSwap, temp);
    }
    return input.subList(0, subsetSize);
}
</code></pre>

<p>If the list must end up in the same state it began, you can keep track of the positions you swapped, and then return the list to its original state after copying your selected sublist.  This is still an O(k) solution.</p>

<p>If, however, you cannot modify the input list at all and k is much less than n (like 5 from 100), it would be much better not to remove selected elements each time, but simply select each element, and if you ever get a duplicate, toss it out and reselect.  This will give you O(kn / (n-k)) which is still close to O(k) when n dominates k.  (For example, if k is less than n / 2, then it reduces to O(k)).</p>

<p>If k not dominated by n, and you cannot modify the list, you might as well copy your original list, and use your first solution, because O(n) will be just as good as O(k).</p>

<p>As others have noted, if you are depending on strong randomness where every sublist is possible (and unbiased), you'll definitely need something stronger than <code>java.util.Random</code>. See <code>java.security.SecureRandom</code>.</p>
