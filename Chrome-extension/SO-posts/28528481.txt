<p>I achieved it by simply switching to another fragment when the searchview is expanded, and switch back when it is collapsed.. The code looks something like this:</p>

<pre><code>@Override
public boolean onCreateOptionsMenu(Menu menu) {

    getMenuInflater().inflate(R.menu.main, menu);

    //Setup the search widget
    SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
    MenuItem menuItem = menu.findItem(R.id.action_search);
    SearchView mSearchView = (SearchView) menuItem.getActionView();

    //Not sure if you need this line for the searchView to be expandable
    mSearchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));

    mSearchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
        @Override
        public boolean onQueryTextSubmit(String s) {
            //Update contents of the fragment
        }

        @Override
        public boolean onQueryTextChange(String s) {
            //Update contents of the fragment
        }
    });

    MenuItemCompat.setOnActionExpandListener(menuItem,
            new MenuItemCompat.OnActionExpandListener() {
                @Override
                public boolean onMenuItemActionExpand(MenuItem item) {
                    //Switch to search fragment
                }

                @Override
                public boolean onMenuItemActionCollapse(MenuItem item) {
                    //Switch back to previous fragment
                }
            })
    ;

    return super.onCreateOptionsMenu(menu);
}
</code></pre>
