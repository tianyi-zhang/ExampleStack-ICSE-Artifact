<p>I found similar contents. although some different.</p>

<pre><code>http://www.yahoo.com   =&gt;    Yahoo
http://www.google.co.in =&gt;      Google
http://in.com    =&gt; In.com Offers Videos, News, Photos, Celebs, Live TV Channels.....
http://india.gov.in/ =&gt; National Portal of India
https://in.yahoo.com/ =&gt; Yahoo India
http://philotheoristic.tumblr.com/  =&gt; Philotheoristic
https://in.movies.yahoo.com/ =&gt; Yahoo India Movies - Bollywood News, Movie Reviews &amp;amp;    Hindi Movie Videos
</code></pre>

<p>here is the code</p>

<pre><code>public class TitleExtractor {
/* the CASE_INSENSITIVE flag accounts for
 * sites that use uppercase title tags.
 * the DOTALL flag accounts for sites that have
 * line feeds in the title text */
private static final Pattern TITLE_TAG =
    Pattern.compile("\\&lt;title&gt;(.*)\\&lt;/title&gt;", Pattern.CASE_INSENSITIVE|Pattern.DOTALL);

/**
 * @param url the HTML page
 * @return title text (null if document isn't HTML or lacks a title tag)
 * @throws IOException
 */
public static String getPageTitle(String url) throws IOException {
    URL u = new URL(url);
    URLConnection conn = u.openConnection();

    // ContentType is an inner class defined below
    ContentType contentType = getContentTypeHeader(conn);
    if (!contentType.contentType.equals("text/html"))
        return null; // don't continue if not HTML
    else {
        // determine the charset, or use the default
        Charset charset = getCharset(contentType);
        if (charset == null)
            charset = Charset.defaultCharset();

        // read the response body, using BufferedReader for performance
        InputStream in = conn.getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(in, charset));
        int n = 0, totalRead = 0;
        char[] buf = new char[1024];
        StringBuilder content = new StringBuilder();

        // read until EOF or first 8192 characters
        while (totalRead &lt; 8192 &amp;&amp; (n = reader.read(buf, 0, buf.length)) != -1) {
            content.append(buf, 0, n);
            totalRead += n;
        }
        reader.close();

        // extract the title
        Matcher matcher = TITLE_TAG.matcher(content);
        if (matcher.find()) {
            /* replace any occurrences of whitespace (which may
             * include line feeds and other uglies) as well
             * as HTML brackets with a space */
            return matcher.group(1).replaceAll("[\\s\\&lt;&gt;]+", " ").trim();
        }
        else
            return null;
    }
}

/**
 * Loops through response headers until Content-Type is found.
 * @param conn
 * @return ContentType object representing the value of
 * the Content-Type header
 */
private static ContentType getContentTypeHeader(URLConnection conn) {
    int i = 0;
    boolean moreHeaders = true;
    do {
        String headerName = conn.getHeaderFieldKey(i);
        String headerValue = conn.getHeaderField(i);
        if (headerName != null &amp;&amp; headerName.equals("Content-Type"))
            return new ContentType(headerValue);

        i++;
        moreHeaders = headerName != null || headerValue != null;
    }
    while (moreHeaders);

    return null;
}

private static Charset getCharset(ContentType contentType) {
    if (contentType != null &amp;&amp; contentType.charsetName != null &amp;&amp; Charset.isSupported(contentType.charsetName))
        return Charset.forName(contentType.charsetName);
    else
        return null;
}

/**
 * Class holds the content type and charset (if present)
 */
private static final class ContentType {
    private static final Pattern CHARSET_HEADER = Pattern.compile("charset=([-_a-zA-Z0-9]+)", Pattern.CASE_INSENSITIVE|Pattern.DOTALL);

    private String contentType;
    private String charsetName;
    private ContentType(String headerValue) {
        if (headerValue == null)
            throw new IllegalArgumentException("ContentType must be constructed with a not-null headerValue");
        int n = headerValue.indexOf(";");
        if (n != -1) {
            contentType = headerValue.substring(0, n);
            Matcher matcher = CHARSET_HEADER.matcher(headerValue);
            if (matcher.find())
                charsetName = matcher.group(1);
        }
        else
            contentType = headerValue;
    }
}
}
</code></pre>

<p>Making use of this class is simple:</p>

<pre><code> String title = TitleExtractor.getPageTitle("http://en.wikipedia.org/");
 System.out.println(title);
</code></pre>

<p>here is the link:</p>

<p><a href="http://www.gotoquiz.com/web-coding/programming/java-programming/how-to-extract-titles-from-web-pages-in-java/" rel="nofollow"> http://www.gotoquiz.com/web-coding/programming/java-programming/how-to-extract-titles-from-web-pages-in-java/</a></p>

<p>I hope it is help you.</p>
