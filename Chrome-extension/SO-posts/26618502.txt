<p>To get rid of errors related to a not matching int in the first line, i would recommend not using this first int counting the numbers, you want to parse.
So your input file would be:</p>

<pre><code>12345 23456 123 4567 123456 7654 999 3453 997733 43 654321
</code></pre>

<p>You could use an ArrayList instead of an array and then go through the file with input.hasNext().</p>

<p>I updated the parts in your code:</p>

<pre><code>import java.util.ArrayList;
import java.util.Scanner;

public class NumberSorter {

    public static void main(String[] args) throws Exception {
        // calling the .txt file
        java.io.File file = new java.io.File("numTestData.txt");
        java.io.File file2 = new java.io.File("dataOut.txt");
        Scanner input = new Scanner(file);

        int bigger = 0;
        double average;
        double track = 0;
        ArrayList&lt;Double&gt; numberArray = new ArrayList&lt;Double&gt;();
        while (input.hasNext()) {
            numberArray.add(input.nextDouble());
        }
        input.close();

        // calling the sort method to sort the array
        sort(numberArray);
        // tracking how many elements are in the array
        for (int i = 0; i &lt; numberArray.size(); i++) {
            track += numberArray.get(i);
        }
        // finding the average of the sorted array
        average = track / numberArray.size();
        // looking through the array to find which number is bigger than the
        // average
        for (int i = 0; i &lt; numberArray.size(); i++) {
            if (numberArray.get(i) &gt; average)
                bigger++;
        }
        // checking to see of the .txt file exists
        if (file2.exists()) {
            System.out.println("file exists");
            System.exit(0);
        }
        // creating a file
        try (java.io.PrintWriter output = new java.io.PrintWriter(file2);) {
            // printing out to the .txt file
            output.println("Number of slots:");
            output.println(numberArray.size());
            output.println("sorted:");
            for (int i = 0; i &lt; numberArray.size(); i++) {
                output.println(numberArray.get(i));
            }

            output.println("Average:");
            output.println(average);
            output.println("number of above average values: ");
            output.println(bigger);
        }
    }

    // sort method
    public static void sort(ArrayList&lt;Double&gt; arrange) {
        // looking for the smallest number
        for (int i = 0; i &lt; arrange.size() - 1; i++) {
            double currentMin = arrange.get(i);
            int currentMinIndex = i;
            // checking to see if the current number is smaller or bigger
            for (int j = i + 1; j &lt; arrange.size(); j++) {
                if (currentMin &gt; arrange.get(j)) {
                    currentMin = arrange.get(j);
                    currentMinIndex = j;
                }
            }
            // will arrange the numbers if current number is not smaller
            if (currentMinIndex != i) {
                arrange.set(currentMinIndex, arrange.get(i));
                arrange.set(i,currentMin);
            }
        }
    }
}
</code></pre>
