<p>Initially I was also unaware of listview recycling and the convertview usage mechanism, but after a whole days research I pretty much understand the mechanisms of the list view by referring to an image from <a href="http://android.amberfog.com/?p=296">android.amberfog</a>
<img src="http://i.stack.imgur.com/VLG9g.jpg" alt="enter image description here"></p>

<p>When ever your listview is filled with an adapter it basically shows the number of <strong>Rows</strong> that the listview can show on screen and the number of rows doesnt get increase even you scroll through the list, this is the trick android use so that listview work more effcient and fast,
Now the inside story of listview refering to image as you can see initially list view has 7 visible items, if you scroll up when item 1 is not any more visible getView() pass this view(item1) to recycler and you can use</p>

<pre><code>System.out.println("getview:"+position+" "+convertView);
</code></pre>

<p>inside your </p>

<pre><code>public View getView(final int position, View convertView, ViewGroup parent)
{
    System.out.println("getview:"+position+" "+convertView);
    View row=convertView;
    if(row==null)
    {
        LayoutInflater inflater=((Activity)context).getLayoutInflater();
        row=inflater.inflate(layoutResourceId, parent,false);

        holder=new PakistaniDrama();
        holder.tvDramaName=(TextView)row.findViewById(R.id.dramaName);
        holder.cbCheck=(CheckBox)row.findViewById(R.id.checkBox);

        row.setTag(holder);

    }
    else
    {
        holder=(PakistaniDrama)row.getTag();
    }
            holder.tvDramaName.setText(dramaList.get(position).getDramaName());
    holder.cbCheck.setChecked(checks.get(position));
            return row;
    }
</code></pre>

<p>you will notice in your logcat initially convertview is null for all the visible rows, because initially there were no view(item) in recycler, so your getView() creates each new view for the visible items, but the moment you scroll up your item 1 will send to the <strong>Recycler</strong> with it state(for example the TextView text and as in mine case if checkbox is checked it will also be associated with the view and store in recycler).
Now when you scroll up/down your listview is not going to create a new view it will use the view(convert view) which is already in your recycler, in your <strong>Logcat</strong> you will notice that convertView is not null, its because your new item 8 will be drawn using convertview, i.e., basically it take the item1 view from the recycler and inflater in place of item 8, and you can observe that as in mine code if you had a checkbox and if you check it at position 0(let say item1 has also a checkbox and you checked it) so when you scroll down you will see item 8 checkbox is already checked, this is why listview is re using the same view not creating a new for you due to performance optimization.</p>

<p><strong>Important things</strong></p>

<p><strong>1</strong>. Never set the <code>layout_height</code> and <code>layout_width</code> of your listview to <code>wrap_content</code> as <code>getView()</code> will force your adapter to get some child for measuring the height of the views to be drawn in list view and can cause some unexpected behaviour like returning convertview even the list is not scrolled.always use <code>match_parent</code> or fixed width/height.</p>

<p><strong>2</strong>. If you want to use some Layout or view after your list view and question might came in your mind if i set the <code>layout_height</code> to <code>fill_parent</code> the view after list view will not show up as it goes down the screen, so its better to put your listview inside a layout.For example Linear Layout and set the height and width of that layout as of your requirement and make the <strong>height</strong> and <strong>width</strong> attribute of your listview to as of your layout(like if your layout width is <strong>320</strong> and height is <strong>280)</strong> then your listview should have same <strong>height</strong> and <strong>width</strong>. This will tell getView() of exact height and width of views to be rendered, and getView() won't call again and again some random rows, and other problems like returning convert view even before scrolling won't happen, i have test this myself, unless my listview was inside the lineaLayout it was also having problems like repeating view call and convert view as, putting Listview inside LinearLayout worked like magic for me.(didn't know why)</p>

<pre><code>01-01 14:49:36.606: I/System.out(13871): getview 0 null
01-01 14:49:36.636: I/System.out(13871): getview 0 android.widget.RelativeLayout@406082c0
01-01 14:49:36.636: I/System.out(13871): getview 1 android.widget.RelativeLayout@406082c0
01-01 14:49:36.646: I/System.out(13871): getview 2 android.widget.RelativeLayout@406082c0
01-01 14:49:36.646: I/System.out(13871): getview 3 android.widget.RelativeLayout@406082c0
01-01 14:49:36.656: I/System.out(13871): getview 4 android.widget.RelativeLayout@406082c0
01-01 14:49:36.666: I/System.out(13871): getview 5 android.widget.RelativeLayout@406082c0
01-01 14:49:36.666: I/System.out(13871): getview 0 android.widget.RelativeLayout@406082c0
01-01 14:49:36.696: I/System.out(13871): getview 0 android.widget.RelativeLayout@406082c0
01-01 14:49:36.706: I/System.out(13871): getview 1 null
01-01 14:49:36.736: I/System.out(13871): getview 2 null
01-01 14:49:36.756: I/System.out(13871): getview 3 null
01-01 14:49:36.776: I/System.out(13871): getview 4 null
</code></pre>

<p>But now its solved, I know, I'm not that good at explaining but as i put my whole day to understand so i thought other beginners like me can get help of my experience and i hope now you people will have a little bit understanding of <strong>ListView</strong> framework how it works, as it is really messy and tricky so beginners found too much problem understanding it</p>
