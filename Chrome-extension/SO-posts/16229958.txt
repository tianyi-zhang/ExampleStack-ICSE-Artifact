<p>As I said in the last comment, the main problem is you include the java.* and javax.*, which already exists in android.jar. So the builder thought you are building the core library while you are not. </p>

<p>I simply delete the java.util.* package in your project. And no errors. The android.jar has already included many packages including java.xxx and javax.xxx. If there really is a missing java core library you need to use, try refactoring. </p>

<p><img src="http://i.stack.imgur.com/5KyVS.jpg" alt="Eclipse Snapshot"></p>

<p>I checked the Android source, the dx will check the name of your source first by calling:</p>

<pre><code>private static void checkClassName(String name) {
    boolean bogus = false;

    if (name.startsWith("java/")) {
        bogus = true;
    } else if (name.startsWith("javax/")) {
        int slashAt = name.indexOf('/', 6);
        if (slashAt == -1) {
            // Top-level javax classes are verboten.
            bogus = true;
        } else {
            String pkg = name.substring(6, slashAt);
            bogus = (Arrays.binarySearch(JAVAX_CORE, pkg) &gt;= 0);
        }
    }

    if (! bogus) {
        return;
    }

    /*
     * The user is probably trying to include an entire desktop
     * core library in a misguided attempt to get their application
     * working. Try to help them understand what's happening.
     */

    DxConsole.err.println("\ntrouble processing \"" + name + "\":\n\n" +
            IN_RE_CORE_CLASSES);
    errors++;
    throw new StopProcessing();
}
</code></pre>

<p>The <code>IN_RE_CORE_CLASSES</code> is the error string you see in the console. That explains why it shows that error. </p>

<p>UPDATE:</p>

<p>Screenshot after adding TimSort.java.</p>

<p><img src="http://i.stack.imgur.com/Gxp4e.jpg" alt="Screenshot after adding TimSort.java"></p>
