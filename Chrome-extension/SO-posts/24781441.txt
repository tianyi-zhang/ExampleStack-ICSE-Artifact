<p>Please take a look at the <a href="http://itextpdf.com/sandbox/xmlworker/ParseHtmlTable1" rel="nofollow">ParseHtmlTable1</a> example. In this example, we have HTML stored in a <code>StringBuilder</code> object and some CSS stored in a <code>String</code>. In my example, I convert the <code>sb</code> object and the <code>CSS</code> object to an <code>InputStream</code>. If you have files with the HTML and the CSS, you could easily use a <code>FileInputStream</code>.</p>

<p>Once you have an <code>InputStream</code> for the HTML and the CSS, you can use this code:</p>

<pre><code>// CSS
CSSResolver cssResolver = new StyleAttrCSSResolver();
CssFile cssFile = XMLWorkerHelper.getCSS(new ByteArrayInputStream(CSS.getBytes()));
cssResolver.addCss(cssFile);

// HTML
HtmlPipelineContext htmlContext = new HtmlPipelineContext(null);
htmlContext.setTagFactory(Tags.getHtmlTagProcessorFactory());

// Pipelines
PdfWriterPipeline pdf = new PdfWriterPipeline(document, writer);
HtmlPipeline html = new HtmlPipeline(htmlContext, pdf);
CssResolverPipeline css = new CssResolverPipeline(cssResolver, html);

// XML Worker
XMLWorker worker = new XMLWorker(css, true);
XMLParser p = new XMLParser(worker);
p.parse(new ByteArrayInputStream(sb.toString().getBytes()));
</code></pre>

<p>Or, if you don't like all that code:</p>

<pre><code>ByteArrayInputStream bis = new ByteArrayInputStream(htmlSource.toString().getBytes());  
ByteArrayInputStream cis = new ByteArrayInputStream(cssSource.toString().getBytes());
XMLWorkerHelper.getInstance().parseXHtml(writer, document, bis, cis);  
</code></pre>
