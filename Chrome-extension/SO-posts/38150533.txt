<p>To do that you will need custom <code>ContentNegotiationManager</code>. Default <code>ContentNegotiationManagerFactoryBean</code> has fixed order of strategies and suggests instantiation of your own <code>ContentNegotiationManager</code> when you want to customize the order, as simple as</p>

<pre><code>new ContentNegotiationManager(strategies);
</code></pre>

<p>where <code>strategies</code> is a list of strategies in proper order.</p>

<p>But I believe it's easier to extend <code>ContentNegotiationManagerFactoryBean</code> just overriding <code>afterPropertiesSet</code> method where strategies get created and ordered.</p>

<pre><code>public class MyCustomContentNegotiationManagerFactoryBean extends ContentNegotiationManagerFactoryBean {
    @Override
    public void afterPropertiesSet() {
        List&lt;ContentNegotiationStrategy&gt; strategies = new ArrayList&lt;ContentNegotiationStrategy&gt;();

        if (!this.ignoreAcceptHeader) {
            strategies.add(new HeaderContentNegotiationStrategy());
        }

        if (this.favorPathExtension) {
            PathExtensionContentNegotiationStrategy strategy;
            if (this.servletContext != null &amp;&amp; !isUseJafTurnedOff()) {
                strategy = new ServletPathExtensionContentNegotiationStrategy(
                        this.servletContext, this.mediaTypes);
            }
            else {
                strategy = new PathExtensionContentNegotiationStrategy(this.mediaTypes);
            }
            strategy.setIgnoreUnknownExtensions(this.ignoreUnknownPathExtensions);
            if (this.useJaf != null) {
                strategy.setUseJaf(this.useJaf);
            }
            strategies.add(strategy);
        }

        if (this.favorParameter) {
            ParameterContentNegotiationStrategy strategy =
                    new ParameterContentNegotiationStrategy(this.mediaTypes);
            strategy.setParameterName(this.parameterName);
            strategies.add(strategy);
        }

        if (this.defaultNegotiationStrategy != null) {
            strategies.add(this.defaultNegotiationStrategy);
        }

        this.contentNegotiationManager = new ContentNegotiationManager(strategies);
    }
}
</code></pre>

<p>Then you can use this factory bean in your spring configuration:</p>

<pre><code>&lt;mvc:annotation-driven content-negotiation-manager="contentNegotiationManager"/&gt;
&lt;bean id="contentNegotiationManager" class="com.yourcompany.MyCustomContentNegotiationManagerFactoryBean"/&gt;
</code></pre>

<h2>Annotation-based Configuration</h2>

<p>In order to configure <code>ContentNegotiationManager</code> in annotation-based configuration, remove <code>@EnableWebMvc</code> annotation and extend <code>WebMvcConfigurationSupport</code> or  <code>DelegatingWebMvcConfiguration</code> with your configuration class. Then you want to override <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java#L326" rel="nofollow"><code>mvcContentNegotiationManager</code> method</a> of <code>WebMvcConfigurationSupport</code>. That method is responsible for instantiation of <code>ContentNegotiationManager</code>.</p>

<p>Don't forget to add <code>@Bean</code> annotation to overriden method.</p>
