<p>Contacts are pooled and re-used, so I would not recommend using this approach.  Instead I would buffer only the information you need (which is probably the two bodies). The jbox2d testbed handles it this way:</p>

<p>First we have a contact point:</p>

<pre><code>public class ContactPoint {
    public Fixture fixtureA;
    public Fixture fixtureB;
    public final Vec2 normal = new Vec2();
    public final Vec2 position = new Vec2();
    public PointState state;
}
</code></pre>

<p>And then we listen like so:</p>

<pre><code>public void beginContact(Contact contact) {
}

public void endContact(Contact contact) {
}

public void postSolve(Contact contact, ContactImpulse impulse) {
}

private final PointState[] state1 = new PointState[Settings.maxManifoldPoints];
private final PointState[] state2 = new PointState[Settings.maxManifoldPoints];
private final WorldManifold worldManifold = new WorldManifold();

public void preSolve(Contact contact, Manifold oldManifold) {
    Manifold manifold = contact.getManifold();

    if (manifold.pointCount == 0) {
        return;
    }

    Fixture fixtureA = contact.getFixtureA();
    Fixture fixtureB = contact.getFixtureB();

    Collision.getPointStates(state1, state2, oldManifold, manifold);

    contact.getWorldManifold(worldManifold);

    for (int i = 0; i &lt; manifold.pointCount
            &amp;&amp; pointCount &lt; MAX_CONTACT_POINTS; i++) {
        ContactPoint cp = points[pointCount];
        cp.fixtureA = fixtureA;
        cp.fixtureB = fixtureB;
        cp.position.set(worldManifold.points[i]);
        cp.normal.set(worldManifold.normal);
        cp.state = state2[i];
        ++pointCount;
    }
}
</code></pre>

<p>This would probably be a bit overkill for your purposes, as it executes this logic for every single contact.  Instead you can use the <code>beginContact()</code> and <code>endContact()</code> methods and buffer something a little more optimized with your game, like just storing the colliding bodies or something.</p>
