<p>you can use emoticon handler method</p>

<pre><code>private static class EmoticonHandler implements TextWatcher {

    private final EditText mEditor;
    private final ArrayList&lt;ImageSpan&gt; mEmoticonsToRemove = new ArrayList&lt;ImageSpan&gt;();
    //public String txt;
    XMPPClient act;
    public EmoticonHandler(EditText editor,XMPPClient act) {
        // Attach the handler to listen for text changes.
        mEditor = editor;
        mEditor.addTextChangedListener(this);
        this.act = act;
    }

    public void insert(String emoticon, int resource) 
    {
        // Create the ImageSpan
        Drawable drawable = mEditor.getResources().getDrawable(resource);
        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
        ImageSpan span = new ImageSpan(drawable,emoticon,ImageSpan.ALIGN_BASELINE);

        // Get the selected text.
        int start = mEditor.getSelectionStart();
        int end = mEditor.getSelectionEnd();
        Editable message = mEditor.getEditableText();

        // Insert the emoticon.
        message.replace(start, end, emoticon);
        message.setSpan(span, start, start + emoticon.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }

    @Override
    public void beforeTextChanged(CharSequence text, int start, int count, int after) {
        // Check if some text will be removed.
        if (count &gt; 0) {
            int end = start + count;
            Editable message = mEditor.getEditableText();
            ImageSpan[] list = message.getSpans(start, end, ImageSpan.class);

            boolean check = false;

            for (ImageSpan span : list)
            {
                // Get only the emoticons that are inside of the changed
                // region.

                check = true;
                int spanStart = message.getSpanStart(span);
                int spanEnd = message.getSpanEnd(span);
                //txt = text.toString();
                act.emorTxt =  text.toString();
                if ((spanStart &lt; end) &amp;&amp; (spanEnd &gt; start)) {
                    // Add to remove list
                    mEmoticonsToRemove.add(span);
                }
            }

            if(!check)
            {
                act.emorTxt =  text.toString();
            }
        }
    }

    @Override
    public void afterTextChanged(Editable text) {
        Editable message = mEditor.getEditableText();

        // Commit the emoticons to be removed.
        for (ImageSpan span : mEmoticonsToRemove) 
        {
            int start = message.getSpanStart(span);
            int end = message.getSpanEnd(span);

            // Remove the span
            message.removeSpan(span);

            // Remove the remaining emoticon text.
            if (start != end) {
                message.delete(start, end);
            }
        }
        mEmoticonsToRemove.clear();


    }

    @Override
    public void onTextChanged(CharSequence text, int start, int before, int count) {
    }

}
</code></pre>

<p>it will work perfectly....:)</p>
