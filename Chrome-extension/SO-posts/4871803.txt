<p>Perhaps a little more complex, but it works so far, and it uses probably the fastest (and smallest) prime number generator I could find in Java.</p>

<p>First, we got the prime number generator, needed to test if a value is prime. We use a generator (this one is 10x faster than the na√Øve method) so we use a cached list :</p>

<pre><code>/**
 * Sieve of Sundaram prime number generator
 * Implementation following the Sieve of Sundaram to generate prime numbers 
 * 
 * @see http://en.wikipedia.org/wiki/Sieve_of_Sundaram
 */
static public class SundaramSievePrimeGenerator {
   public String getName() { return "Sieve of Sundaram generator"; }
   public int[] findPrimes(int max) {
      int n = max/2;
      boolean[] isPrime = new boolean[max];

      Arrays.fill(isPrime, true);

      for (int i=1; i&lt;n; i++) {
         for (int j=i; j&lt;=(n-i)/(2*i+1); j++) {
            isPrime[i+j+2*i*j] = false;
         }
      }

      int[] primes = new int[max];
      int found = 0;
      if (max &gt; 2) {
         primes[found++] = 2;
      }
      for (int i=1; i&lt;n; i++) {
         if (isPrime[i]) {
            primes[found++] = i*2+1;
         }
      }

      return Arrays.copyOf(primes, found);
   }
}
</code></pre>

<p>Then we have the two methods needed to actually get the list of prime factor for <code>n</code> :</p>

<pre><code>/**
 * Reuse an instance of the SundaramSievePrimeGenerator
 */
static public List&lt;Integer&gt; findPrimeFactors(int n, SundaramSievePrimeGenerator g) {
   ArrayList&lt;Integer&gt; primeFactors = new ArrayList&lt;Integer&gt;();

   int[] primes = g.findPrimes(n+1);
   int v;

   // debug
   //System.out.print("** primes found : ");
   //for (int a : primes) {
   //   System.out.print(" " + a);
   //}
   //System.out.println();

   if (primes[primes.length-1] == n) {
      primeFactors.add(n);
   } else {

      int max = primes.length - 1;

      for (int i=max; i&gt;=0; i--) {
         primeFactors.add(primes[i]);
         if (testPrimeFactor(n, primes[i], primes, i, primeFactors)) {
            break;  // we found our solution
         }
         primeFactors.clear();
      }
   }

   return primeFactors;
}

/**
 * Recursive method initially called by findPrimeFactors(n, g)
 */
static private boolean testPrimeFactor(int n, int v, int[] primes, int index, List&lt;Integer&gt; factors) {
   int v2 = v * primes[index];

   if (v2 == n) {
      factors.add(primes[index]);
      return true;
   } else if (v2 &gt; n) {
      if (index &gt; 0) {
         return testPrimeFactor(n, v, primes, index-1, factors);
      } else {
         return false;
      }
   } else {
      while (index &gt; 0) {
         factors.add(primes[index]);

         if (testPrimeFactor(n, v2, primes, index, factors)) {
            return true;
         }

         factors.remove(factors.size()-1);   // no good, remove added prime
         v2 = v * primes[--index];
      }
      return false;   // at this point, we are still below n... so no good
   }
}
</code></pre>

<p>And finally, our test case :</p>

<pre><code>int n = 1025;
SundaramSievePrimeGenerator generator = new SundaramSievePrimeGenerator();

List&lt;Integer&gt; factors = findPrimeFactors(n, generator);

if (factors.isEmpty()) {
   System.out.println("No prime factors found for " + n);
} else {
   System.out.println(n + " is composed of " + factors.size() + " prime factors");
   int v = 1;
   for (int i : factors) {
      v *= i;
      System.out.print(" " + i);
   }
   System.out.println(" = " + v);
}
</code></pre>

<p>For example, this code above will produce :</p>

<pre><code>1025 is composed of 3 prime factors
 41 5 5 = 1025
</code></pre>

<p>And changing <code>n = 81</code> will produce the desired output of</p>

<pre><code>81 is composed of 4 prime factors
 3 3 3 3 = 81
</code></pre>
