<p>See javadoc for StringBuffer at <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html" rel="nofollow">http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html</a></p>

<p>See javadoc for StringTokenizerat <a href="http://docs.oracle.com/javase/7/docs/api/java/util/StringTokenizer.html" rel="nofollow">http://docs.oracle.com/javase/7/docs/api/java/util/StringTokenizer.html</a></p>

<p>I will try to comment all but the obvious lines</p>

<pre><code>import java.util.*;

public class Expression {

    String s, x;

    double term() {
        double ans = 0;
        StringBuffer temp = new StringBuffer(); //Efficient than simple String
        while (s.length() &gt; 0 &amp;&amp; Character.isDigit(s.charAt(0))) { //Check if the first character is a digit
            temp.append(Integer.parseInt("" + s.charAt(0))); //If true, add to temp String
            s = s.substring(1);
        }
        if (s.length() &gt; 0 &amp;&amp; s.charAt(0) == '.') {
            temp.append('.');
            s = s.substring(1);
            while (s.length() &gt; 0 &amp;&amp; Character.isDigit(s.charAt(0))) {
                temp.append(Integer.parseInt("" + s.charAt(0)));
                s = s.substring(1);
            }
        }
        if (s.length() &gt; 0 &amp;&amp; (s.charAt(0) == 'e' || s.charAt(0) == 'E')) {
            temp.append('e');
            s = s.substring(1);
            temp.append(s.charAt(0));
            s = s.substring(1);
            while (s.length() &gt; 0 &amp;&amp; Character.isDigit(s.charAt(0))) {
                temp.append(Integer.parseInt("" + s.charAt(0)));
                s = s.substring(1);
            }
        }
        ans = Double.valueOf(temp.toString()).doubleValue();
        return ans;
    }

    double paren() {
        double ans;
        if (s.charAt(0) == '(') {
            s = s.substring(1);
            ans = add();
            s = s.substring(1);
        } else {
            ans = term();
        }
        return ans;
    }

    double exp() {
        boolean neg = false;
        if (s.charAt(0) == '-') {
            neg = true;
            s = s.substring(1);
        }
        double ans = paren();
        while (s.length() &gt; 0) {
            if (s.charAt(0) == '^') {
                s = s.substring(1);
                boolean expNeg = false;
                if (s.charAt(0) == '-') {
                    expNeg = true;
                    s = s.substring(1);
                }
                double e = paren();
                if (ans &lt; 0) {
                    double x = 1;
                    if (Math.ceil(e) == e) { //Check Math.ceil documentation at http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#ceil(double)
                        if (expNeg)
                            e *= -1;
                        if (e == 0)
                            ans = 1;
                        else if (e &gt; 0)
                            for (int i = 0; i &lt; e; i++)
                                x *= ans;
                        else
                            for (int i = 0; i &lt; -e; i++)
                                x /= ans;
                        ans = x;
                    } else {
                        ans = Math.log(-1); //http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#log(double)
                    }
                } else if (expNeg)
                    ans = Math.exp(-e * Math.log(ans));
                else
                    ans = Math.exp(e * Math.log(ans)); //http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#exp(double)
            } else
                break;
        }
        if (neg)
            ans *= -1;
        return ans;
    }

    double trig() {
        double ans = 0;
        boolean found = false;
        if (s.indexOf("sin") == 0) {
            s = s.substring(3);
            ans = Math.sin((trig() * Math.PI) / 180);
            found = true;
        } else if (s.indexOf("cos") == 0) {
            s = s.substring(3);
            ans = Math.cos((trig() * Math.PI) / 180);
            found = true;
        } else if (s.indexOf("tan") == 0) {
            s = s.substring(3);
            ans = Math.tan((trig() * Math.PI) / 180);
            found = true;
        }
        if (!found) {
            ans = exp();
        }
        return ans;
    }

    double mul() {
        double ans = trig();
        if (s.length() &gt; 0) {
            while (s.length() &gt; 0) {
                if (s.charAt(0) == '*') {
                    s = s.substring(1);
                    ans *= trig();
                } else if (s.charAt(0) == '/') {
                    s = s.substring(1);
                    ans /= trig();
                } else
                    break;
            }
        }
        return ans;
    }

    double add() {
        double ans = mul();
        while (s.length() &gt; 0) {
            if (s.charAt(0) == '+') {
                s = s.substring(1);
                ans += mul();
            } else if (s.charAt(0) == '-') {
                s = s.substring(1);
                ans -= mul();
            } else {
                break;
            }
        }
        return ans;
    }

    public double evaluate() {
        s = x.intern();
        double last = add();
        return last;
    }

    public Expression(String s) {
        StringBuffer b = new StringBuffer();
        StringTokenizer t = new StringTokenizer(s, " "); //Creates a iterable t object so you can iterate over each "word" separate by space
        while (t.hasMoreElements())
            b.append(t.nextToken());
        t = new StringTokenizer(b.toString(), "\t");
        b = new StringBuffer();
        while (t.hasMoreElements())
            b.append(t.nextToken());
        x = b.toString();
    }

    public String toString() {
        return x.intern();
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter expression: ");
        Expression e = new Expression(sc.nextLine());
        System.out.println("\n" + e + " = " + e.evaluate() + "\n");
    }
}
</code></pre>
