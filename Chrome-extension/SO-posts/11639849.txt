<p>Take a look at OData4J - it provides a lot of fundamental support for OData and helps materialize entities from a feed.</p>

<p>Sample code from <a href="http://code.google.com/p/odata4j/source/browse/odata4j-fit/src/test/java/org/odata4j/examples/consumers/NetflixConsumerExample.java?name=0.6" rel="nofollow">http://code.google.com/p/odata4j/source/browse/odata4j-fit/src/test/java/org/odata4j/examples/consumers/NetflixConsumerExample.java?name=0.6</a>:</p>

<pre><code>package org.odata4j.examples.consumers;

import java.util.List;

import org.odata4j.consumer.ODataConsumer;
import org.odata4j.core.OEntity;
import org.odata4j.core.OProperty;
import org.odata4j.examples.AbstractExample;
import org.odata4j.examples.ODataEndpoints;

public class NetflixConsumerExample extends AbstractExample {

  public static void main(String[] args) {
    NetflixConsumerExample example = new NetflixConsumerExample();
    example.run(args);
  }

  private void run(String[] args) {
    ODataConsumer c = this.rtFacde.create(ODataEndpoints.NETFLIX, null, null);

    // locate the netflix id for Morgan Spurlock
    int morganSpurlockId = c.getEntities("People").filter("substringof('Spurlock',Name)").execute().first().getProperty("Id", Integer.class).getValue();

    // lookup and print all titles he's acted in
    List&lt;OEntity&gt; titlesActedIn = c.getEntities("People").nav(morganSpurlockId, "TitlesActedIn").execute().toList();
    for (OEntity title : titlesActedIn) {
      for (OProperty&lt;?&gt; p : title.getProperties()) {
        report("%s: %s", p.getName(), p.getValue());
      }
      report("\n");
    }
    report("count: " + titlesActedIn.size());

  } 
} 
</code></pre>
