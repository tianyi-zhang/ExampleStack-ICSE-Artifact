<p>Documentation for the method from the Apache Commons Lang (<a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/math/NumberUtils.html#isNumber%28java.lang.String%29" rel="nofollow">from here</a>):</p>

<blockquote>
  <p>Checks whether the String a valid Java number.</p>
  
  <p>Valid numbers include hexadecimal marked with the 0x qualifier, scientific notation and numbers marked with a type qualifier (e.g. 123L).</p>
  
  <p><code>Null</code> and empty String will return <code>false</code>.</p>
  
  <p><strong>Parameters:</strong></p>

<pre><code>`str` - the `String` to check
</code></pre>
  
  <p><strong>Returns:</strong></p>

<pre><code>`true` if the string is a correctly formatted number
</code></pre>
</blockquote>

<p><code>isNumber</code> from <a href="https://github.com/apache/commons-lang/blob/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java" rel="nofollow">java.org.apache.commons.lang3.math.NumberUtils</a>:</p>

<pre><code>public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz &gt; start + 1 &amp;&amp; chars[start] == '0' &amp;&amp; chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            return false; // str == "0x"
        }
        // checking hex (it can't be anything else)
        for (; i &lt; chars.length; i++) {
            if ((chars[i] &lt; '0' || chars[i] &gt; '9')
                &amp;&amp; (chars[i] &lt; 'a' || chars[i] &gt; 'f')
                &amp;&amp; (chars[i] &lt; 'A' || chars[i] &gt; 'F')) {
                return false;
            }
        }
        return true;
    }
    sz--; // don't want to loop to the last char, check it afterwords
          // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = "1234E")
    while (i &lt; sz || (i &lt; sz + 1 &amp;&amp; allowSigns &amp;&amp; !foundDigit)) {
        if (chars[i] &gt;= '0' &amp;&amp; chars[i] &lt;= '9') {
            foundDigit = true;
            allowSigns = false;

        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent   
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            foundDigit = false; // we need a digit after the E
        } else {
            return false;
        }
        i++;
    }
    if (i &lt; chars.length) {
        if (chars[i] &gt;= '0' &amp;&amp; chars[i] &lt;= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns
            &amp;&amp; (chars[i] == 'd'
                || chars[i] == 'D'
                || chars[i] == 'f'
                || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l'
            || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit &amp;&amp; !hasExp &amp;&amp; !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns &amp;&amp; foundDigit;
}
</code></pre>

<p>[code is under version 2 of the Apache License]</p>
