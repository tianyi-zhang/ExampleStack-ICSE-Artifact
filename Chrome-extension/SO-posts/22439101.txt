<p>It seems a little odd that you're reading characters from the terminal as an <code>Integer</code> and then having to jump through hoops to convert it to an array of character for further processing. The logic can be simplified by reading in a <code>String</code>, validating that the <code>String</code> meets your requirement and then processing each character from the <code>String</code>.</p>

<p>There are a few other changes I'd make:</p>

<ol>
<li>There is no reason to treat each length as a special case,</li>
<li>You can loop rather than calling the constructor again in the case of errors,</li>
<li><code>number</code> doesn't need to be a member variable, you can just pass it as a parameter to each method call,</li>
<li>You don't need to convert the individual elements of <code>String</code> back to integers for the switch statement if you use <code>toCharArray()</code>.</li>
</ol>

<p>Here's an example that works with <code>String</code> rather than <code>Integer</code>.</p>

<pre><code>import java.util.Scanner;

public class ReadNumberInWord {

    public ReadNumberInWord() {
        final Scanner userInput = new Scanner(System.in);
        System.out.println("Enter the number to read out : ");
        boolean success = false;
        // Keep looping until the correct input is supplied.
        while (!success) {
            final String number = userInput.nextLine();
            if (validNumber(number)) {
                readNumber(number);
                success = true;
            }
        }
    }

    /**
     * @param number
     *            the String to check.
     * @return &lt;code&gt;true&lt;/code&gt; if and only if number is less than 5 characters
     *         long and can be parsed as an integer.
     */
    private boolean validNumber(final String number) {
        boolean returnValue = false;
        try {
            Integer.parseInt(number);
            if (number.length() &lt;= 4) {
                returnValue = true;
            } else {
                System.out.println("Enter number of four digit or less ");
            }
        } catch (final NumberFormatException e) {
            System.out.println("Please enter an integer");
        }
        return returnValue;
    }

    /**
     * When supplied a String that represents an integer this method writes out
     * each digit as a word to stdout.
     * 
     * @param number
     *            a String that represents an integer
     */
    public void readNumber(final String number) {
        System.out.println("Entered number is : " + number);
        final int numSize = number.length();
        System.out.println("number size is : " + numSize);
        final char[] chars = number.toCharArray();
        for (int i = 0; i &lt; chars.length; i++) {
            System.out.print(numberCheck(chars[i]));
            if (i &lt; chars.length - 1) {
                System.out.print('\t');
            } else {
                System.out.println();
            }
        }
    }

    /**
     * @param num
     *            a character that represents one of the numbers 0-9
     * @return the word representing the supplied number e.g. zero, one etc
     */
    public String numberCheck(final char num) {
        switch (num) {
        case '0':
            return "zero";
        case '1':
            return "one";
        case '2':
            return "two";
        case '3':
            return "three";
        case '4':
            return "four";
        case '5':
            return "five";
        case '6':
            return "six";
        case '7':
            return "seven";
        case '8':
            return "eight";
        case '9':
            return "nine";
        default:
            return "unknown";
        }
    }

    public static void main(final String[] args) {
        new ReadNumberInWord();
    }
}
</code></pre>
