<p>Create two locks, and two threads that synchronize on them, making sure thread 1 takes lock 1 first and vice versa. Make sure the threads go to sleep for a while after taking the first lock.</p>

<pre><code>public class DeadlockTest {
    private static final Object lock1 = new Object();
    private static final Object lock2 = new Object();

    public static void main(String[] args) {
     new Thread("1") {
      @Override
      public void run() {
       synchronized (lock1) {
        try {
         Thread.sleep(10);
        } catch (InterruptedException e) {
        }
        synchronized (lock2) {
         System.out.println("1 got em");
        }
       }
      }

     }.start();
     new Thread("2") {
      @Override
      public void run() {
       synchronized (lock2) {
        try {
         Thread.sleep(10);
        } catch (InterruptedException e) {
        }
        synchronized (lock1) {
         System.out.println("2 got em");
        }
       }
      }

     }.start();
    }
}
</code></pre>

<p>As you will see, neither "got them" prints will happen.</p>
