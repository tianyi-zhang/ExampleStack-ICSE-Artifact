<p>I also tried alot to get this approach working, but didn't succeed any better than yourself. But I found another way to accomplish what you want; extend ArrayAdapter and implement Filterable. This class will be doing the actual fetching from the database, when called by the AutoCompleteTextView in a worker thread:</p>

<pre><code>public class MyAutoCompleteAdapter extends ArrayAdapter&lt;String&gt; implements Filterable {

    private List&lt;String&gt; mData = new ArrayList&lt;String&gt;();
    private Server mServer;

    public MyAutoCompleteAdapter(Server server, Context context, int textViewResourceId) {
        super(context, textViewResourceId);
        mServer = server;
    }

    @Override
    public int getCount() {
        return mData.size();
    }

    @Override
    public String getItem(int index) {
        return mData.get(index);
    }

    @Override
    public Filter getFilter() {
        Filter myFilter = new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                // This method is called in a worker thread

                FilterResults filterResults = new FilterResults();
                if(constraint != null) {
                    try {
                        // Here is the method (synchronous) that fetches the data
                        // from the server
                        List&lt;String&gt; results = mServer.searchForItems(constraint.toString());
                        filterResults.values = results;
                        filterResults.count = results.size();
                    }
                    catch(Exception e) {}

                }
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence contraint, FilterResults results) {
                if(results != null &amp;&amp; results.count &gt; 0) {
                    mData = (List&lt;String&gt;)results.values;
                    notifyDataSetChanged();
                }
                else {
                    notifyDataSetInvalidated();
                }
            }
        };
        return myFilter;
    }
}
</code></pre>

<p><strong>EDIT</strong>: I have improved the above code since I sometimes got the exception <code>java.lang.IllegalStateException: The content of the adapter has changed but ListView did not receive a notification</code>. To fix this, I moved the updating of <code>mData</code> to <code>publishResults()</code>.</p>
