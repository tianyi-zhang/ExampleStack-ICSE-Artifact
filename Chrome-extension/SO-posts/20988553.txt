<p>try this code :</p>

<p>this is class using for get jsonObject and jsonArray from server : </p>

<pre><code>public class GetDataJsonFromServer {


    public static JSONObject postJSONfromURL(String url,
            List&lt;NameValuePair&gt; params, int socketFactory, String userAgent)
            throws SSLPeerUnverifiedException {
        InputStream is = null;
        String result = "";
        JSONObject jArray = null;
        try {
            SchemeRegistry scheme = new SchemeRegistry();
            scheme.register(new Scheme("http", PlainSocketFactory
                    .getSocketFactory(), socketFactory));

            HttpClient httpclient = new DefaultHttpClient();
            HttpProtocolParams.setUserAgent(httpclient.getParams(), userAgent);
            HttpPost httpost = new HttpPost(url);
            HttpResponse response = httpclient.execute(httpost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();

        } catch (Exception e) {
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "utf-8"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
        }

        try {
            jArray = new JSONObject(result);
        } catch (JSONException e) {
        }
        return jArray;
    }

    public static JSONArray mygetJSONfromURL(String url,
            List&lt;NameValuePair&gt; params, int socketFactory, String userAgent)
            throws SSLPeerUnverifiedException {
        InputStream is = null;
        String result = "";
        JSONArray jArray = null;
        try {
            SchemeRegistry scheme = new SchemeRegistry();
            scheme.register(new Scheme("http", PlainSocketFactory
                    .getSocketFactory(), socketFactory));

            HttpClient httpclient = new DefaultHttpClient();
            HttpProtocolParams.setUserAgent(httpclient.getParams(), userAgent);

            String paramString = URLEncodedUtils.format(params, "utf-8");

            HttpGet httpget = new HttpGet(url + paramString);
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();

        } catch (Exception e) {
        }

        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "utf-8"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
        }

        try {
            jArray = new JSONArray(result);
        } catch (JSONException e) {
        }

        return jArray;
    }

    public static JSONObject getJSONfromURL(String url,
            List&lt;NameValuePair&gt; params, int socketFactory, String userAgent)
            throws SSLPeerUnverifiedException {
        InputStream is = null;
        String result = "";
        JSONObject jArray = null;
        try {
            SchemeRegistry scheme = new SchemeRegistry();
            scheme.register(new Scheme("http", PlainSocketFactory
                    .getSocketFactory(), socketFactory));

            HttpClient httpclient = new DefaultHttpClient();
            HttpProtocolParams.setUserAgent(httpclient.getParams(), userAgent);

            String paramString = URLEncodedUtils.format(params, "utf-8");

            HttpGet httpget = new HttpGet(url + paramString);
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();

        } catch (Exception e) {
        }

        // convert response to string
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "utf-8"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            result = sb.toString();
        } catch (Exception e) {
        }

        try {
            jArray = new JSONObject(result);
        } catch (JSONException e) {
        }

        return jArray;
    }

}
</code></pre>

<p>in your code :</p>

<pre><code>        public class cusdataAsynTask extends AsyncTask&lt;String, Void, jsonObject&gt; {
        @Override
                protected Void doInBackground(String... params) {
                    List&lt;NameValuePair&gt; listParams = new ArrayList&lt;NameValuePair&gt;();
                    JSONObject josn = new JSONObject();
                    String url = params[0];
                    Log.w("url", url);
                    try {
                        josn = GetDataJsonFromServer.postJSONfromURL(url, listParams,
                                80, "Bazan version for Android");
                    } catch (SSLPeerUnverifiedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    return josn;
        }

    @Override
    protected void onPostExecute(JSONObject result) {
        // TODO Auto-generated method stub
        super.onPostExecute(result);
        if (result != null) {
           // add your code here
        }
   }
}
</code></pre>
