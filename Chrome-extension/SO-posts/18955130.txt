<p>The OP seems lost into oblivion but for the benefit of Mister Kite :</p>

<pre><code>// main method 
URL url = new URL(uploadURL);
connection = (HttpURLConnection) url.openConnection();
connection.setDoOutput(true); // triggers "POST"
// connection.setDoInput(true); // only if needed
connection.setUseCaches(false); // dunno
final String boundary = Long.toHexString(System.currentTimeMillis());
connection.setRequestProperty("Content-Type", "multipart/form-data; boundary="
                                                                + boundary);
output = new DataOutputStream(connection.getOutputStream());
try {
     // image must be a File instance
    flushMultiPartData(image, output, boundary);
} catch (IOException e) {
    System.out.println("IOException in flushMultiPartData : " + e);
    return;
}
// ...
private void flushMultiPartData(File file, OutputStream serverOutputStream,
            String boundary) throws FileNotFoundException, IOException {
    // SEE http://stackoverflow.com/a/2793153/281545
    PrintWriter writer = null;
    try {
        // true = autoFlush, important!
        writer = new PrintWriter(new OutputStreamWriter(serverOutputStream,
                charsetForMultipartHeaders), true);
        appendBinary(file, boundary, writer, serverOutputStream);
        // End of multipart/form-data.
        writer.append("--" + boundary + "--").append(CRLF);
    } finally {
        if (writer != null) writer.close();
    }
}

private void appendBinary(File file, String boundary, PrintWriter writer,
        OutputStream output) throws FileNotFoundException, IOException {
    // Send binary file.
    writer.append("--" + boundary).append(CRLF);
    writer.append(
        "Content-Disposition: form-data; name=\"binaryFile\"; filename=\""
            + file.getName() + "\"").append(CRLF);
    writer.append("Content-Type: "
            +  URLConnection.guessContentTypeFromName(file.getName()))
            .append(CRLF);
    writer.append("Content-Transfer-Encoding: binary").append(CRLF);
    writer.append(CRLF).flush();
    InputStream input = null;
    try {
        input = new FileInputStream(file);
        byte[] buffer = new byte[1024];
        for (int length = 0; (length = input.read(buffer)) &gt; 0;) {
            output.write(buffer, 0, length);
        }
        output.flush(); // Important! Output cannot be closed. Close of
        // writer will close output as well.
    } finally {
        if (input != null) try {
            input.close();
        } catch (IOException logOrIgnore) {}
    }
    writer.append(CRLF).flush(); // CRLF is important! It indicates end of
    // binary boundary.
}
</code></pre>

<p>You may want to add Gzip compression - see <a href="http://stackoverflow.com/q/18857271/281545">file corrupted when I post it to the servlet using GZIPOutputStream</a> for a working class with or without Gzip. The ImageIO has <em>no place here</em> - just write the bytes past the wire and use ImageIO to your heart's content on the server. Based on @BalusC <a href="http://stackoverflow.com/a/2793153/281545">answer</a></p>
