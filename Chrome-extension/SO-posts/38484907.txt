<ul>
<li>Check out this example: <a href="https://tips4java.wordpress.com/2009/05/31/backgrounds-with-transparency/" rel="nofollow">Backgrounds With Transparency ? Java Tips Weblog</a></li>
<li>See also: 

<ul>
<li><a href="http://bugs.java.com/view_bug.do?bug_id=4688783" rel="nofollow">Bug ID: JDK-4688783 JPopupMenu hardcoded i JMenu</a></li>
<li><a href="http://ateraimemo.com/Swing/TranslucentPopupMenu.html" rel="nofollow">TranslucentPopupMenu</a></li>
</ul></li>
</ul>

<p><a href="http://i.stack.imgur.com/WDIrn.png" rel="nofollow"><img src="http://i.stack.imgur.com/WDIrn.png" alt="enter image description here"></a></p>

<ul>
<li>It is tested on <code>MetalLookAndFeel</code> only.</li>
</ul>



<pre><code>import java.awt.*;
import java.awt.image.*;
import java.util.Objects;
import javax.swing.*;
import javax.swing.plaf.*;

public class MenuBarRootPaneTest {
  private static final Color ALPHA_ZERO = new Color(0x0, true);
  private static final Color POPUP_BACK = new Color(0, 0, 0, .25f);

  private static JMenuBar createMenuBar() {
    JMenuBar mb = new JMenuBar() {
      @Override public Dimension getPreferredSize() {
        Dimension d = super.getPreferredSize();
        d.height = 36;
        return d;
      }
      @Override public boolean isOpaque() {
        return false;
      }
      @Override protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g.create();
        g2.setPaint(POPUP_BACK);
        g2.fillRect(0, 0, getWidth(), getHeight());
        g2.dispose();
      }
    };
    String[] menuKeys = {"File", "Edit", "Help"};
    for (String key : menuKeys) {
      mb.add(createMenu(key));
    }
    return mb;
  }

  private static JMenu createMenu(String key) {
    JMenu menu = new TransparentMenu(key);
    menu.add(new JMenuItem("JMenuItem 1"));
    menu.add(new JMenuItem("JMenuItem 2"));
    menu.add(new JMenuItem("JMenuItem 3"));
    return menu;
  }

  public static void main(String... args) {
    EventQueue.invokeLater(() -&gt; {
      //UIManager.put("MenuBar.background", POPUP_BACK);
      UIManager.put("MenuBar.border",     BorderFactory.createEmptyBorder());
      UIManager.put("PopupMenu.border",   BorderFactory.createEmptyBorder());

      UIManager.put("Menu.foreground",              Color.WHITE);
      UIManager.put("Menu.background",              ALPHA_ZERO);
      UIManager.put("Menu.selectionBackground",     POPUP_BACK);
      UIManager.put("Menu.selectionForeground",     Color.WHITE);
      UIManager.put("Menu.borderPainted",           Boolean.FALSE);

      UIManager.put("MenuItem.foreground",          Color.WHITE);
      UIManager.put("MenuItem.background",          ALPHA_ZERO);
      UIManager.put("MenuItem.selectionBackground", POPUP_BACK);
      UIManager.put("MenuItem.selectionForeground", Color.WHITE);
      UIManager.put("MenuItem.borderPainted",       Boolean.FALSE);

      JFrame frame = new JFrame() {
        @Override protected JRootPane createRootPane() {
          return new JRootPane() {
            //private final Image img = new ImageIcon("img.png").getImage();
            private final TexturePaint texture = makeTexturePaint();
            @Override protected void paintComponent(Graphics g) {
              super.paintComponent(g);
              Graphics2D g2 = (Graphics2D) g.create();
              g2.setPaint(texture);
              g2.fillRect(0, 0, getWidth(), getHeight());
              //g2.drawImage(img, 0, 0, img.getWidth(this), img.getHeight(this), this);
              g2.dispose();
            }
            @Override public boolean isOpaque() {
              return true;
            }
          };
        }
      };
      frame.getRootPane().setBackground(Color.BLUE);
      ((JComponent) frame.getContentPane()).setOpaque(false);
      frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      frame.setJMenuBar(createMenuBar());
      frame.setSize(320, 240);
      frame.setLocationRelativeTo(null);
      frame.setVisible(true);
    });
  }

  // TranslucentPopupMenu
  // http://ateraimemo.com/Swing/TranslucentPopupMenu.html
  static class TranslucentPopupMenu extends JPopupMenu {
    @Override public boolean isOpaque() {
      return false;
    }
    @Override public void show(Component c, int x, int y) {
      EventQueue.invokeLater(() -&gt; {
        Container p = getTopLevelAncestor();
        if (p instanceof JWindow) {
          System.out.println("Heavy weight");
          ((JWindow) p).setBackground(ALPHA_ZERO);
        }
      });
      super.show(c, x, y);
    }
    @Override protected void paintComponent(Graphics g) {
      Graphics2D g2 = (Graphics2D) g.create();
      g2.setPaint(POPUP_BACK);
      g2.fillRect(0, 0, getWidth(), getHeight());
      g2.dispose();
    }
  }

  static class TransparentMenu extends JMenu {
    private JPopupMenu popupMenu;

    protected TransparentMenu(String title) {
      super(title);
    }
    @Override public boolean isOpaque() {
      return false;
    }
    // Bug ID: JDK-4688783 JPopupMenu hardcoded i JMenu
    // http://bugs.java.com/view_bug.do?bug_id=4688783
    private void ensurePopupMenuCreated() {
      if (Objects.isNull(popupMenu)) {
        this.popupMenu = new TranslucentPopupMenu();
        popupMenu.setInvoker(this);
        popupListener = createWinListener(popupMenu);
      }
    }
    @Override public JPopupMenu getPopupMenu() {
      ensurePopupMenuCreated();
      return popupMenu;
    }
    @Override public JMenuItem add(JMenuItem menuItem) {
      ensurePopupMenuCreated();
      menuItem.setOpaque(false);
      return popupMenu.add(menuItem);
    }
    @Override public Component add(Component c) {
      ensurePopupMenuCreated();
      if (c instanceof JComponent) {
        ((JComponent) c).setOpaque(false);
      }
      popupMenu.add(c);
      return c;
    }
    @Override public void addSeparator() {
      ensurePopupMenuCreated();
      popupMenu.addSeparator();
    }
    @Override public void insert(String s, int pos) {
      if (pos &lt; 0) {
        throw new IllegalArgumentException("index less than zero.");
      }
      ensurePopupMenuCreated();
      popupMenu.insert(new JMenuItem(s), pos);
    }
    @Override public JMenuItem insert(JMenuItem mi, int pos) {
      if (pos &lt; 0) {
        throw new IllegalArgumentException("index less than zero.");
      }
      ensurePopupMenuCreated();
      popupMenu.insert(mi, pos);
      return mi;
    }
    @Override public void insertSeparator(int index) {
      if (index &lt; 0) {
        throw new IllegalArgumentException("index less than zero.");
      }
      ensurePopupMenuCreated();
      popupMenu.insert(new JPopupMenu.Separator(), index);
    }
    @Override public boolean isPopupMenuVisible() {
      ensurePopupMenuCreated();
      return popupMenu.isVisible();
    }
  }

  private static TexturePaint makeTexturePaint() {
    int cs = 6;
    int sz = cs * cs;
    BufferedImage img = new BufferedImage(sz, sz, BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2 = img.createGraphics();
    g2.setPaint(new Color(200, 200, 200, 50));
    g2.fillRect(0, 0, sz, sz);
    for (int i = 0; i * cs &lt; sz; i++) {
      for (int j = 0; j * cs &lt; sz; j++) {
        if ((i + j) % 2 == 0) {
          g2.fillRect(i * cs, j * cs, cs, cs);
        }
      }
    }
    g2.dispose();
    return new TexturePaint(img, new Rectangle(sz, sz));
  }
}
</code></pre>
