<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.lucabigoni.progettoclientserverolbia" &gt;

&lt;uses-sdk
    android:minSdkVersion="17"
    android:targetSdkVersion="17" /&gt;

&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;
&lt;uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" /&gt;
&lt;uses-permission android:name="android.permission.WAKE_LOCK" /&gt;
&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
&lt;uses-permission android:name="android.permission.GET_ACCOUNTS" /&gt;
&lt;uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" /&gt;

&lt;uses-permission android:name="android.permission.VIBRATE" /&gt;

&lt;permission
    android:name="com.example.lucabigoni.progettoclientserverolbia.permission.C2D_MESSAGE"
    android:protectionLevel="signature" /&gt;

&lt;uses-permission android:name="com.example.lucabigoni.progettoclientserverolbia.C2D_MESSAGE" /&gt;

&lt;action android:name="com.google.android.c2dm.intent.REGISTRATION" /&gt;

&lt;uses-permission android:name="android.permission." /&gt;

&lt;uses-feature
    android:glEsVersion="0x00020000"
    android:required="true" /&gt;

&lt;application
    android:allowBackup="true"
    android:icon="@mipmap/ic_launcher"
    android:label="@string/app_name"
    android:theme="@style/AppTheme" &gt;
    &lt;activity
        android:name=".Activity.SplashScreen"
        android:label="@string/app_name"
        android:screenOrientation="portrait"
        android:theme="@android:style/Theme.Black.NoTitleBar" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="android.intent.action.MAIN" /&gt;

            &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
        &lt;/intent-filter&gt;
    &lt;/activity&gt;



    &lt;activity
        android:name=".Activity.Prova"
        android:label="@string/ciao" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.MainActivity"
        android:label="main" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.manu"
        android:label="@string/title_activity_manu" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.Visualizza"
        android:label="@string/title_activity_visualizza" &gt;
    &lt;/activity&gt;

    &lt;meta-data
        android:name="com.google.android.gms.version"
        android:value="@integer/google_play_services_version" /&gt;
    &lt;meta-data
        android:name="com.google.android.maps.v2.API_KEY"
        android:value="AIzaSyADrZavHTaGfd8_pTyqOMQLMQg2jfJT_S4" /&gt;

    &lt;activity
        android:name=".Activity.mapOlbia"
        android:label="@string/title_activity_map_olbia" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.Immagine_nave"
        android:label="@string/title_activity_immagine_nave" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.Splash_Scree_caricamento_Immagine"
        android:label="@string/title_activity_splash__scree_caricamento__immagine" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.Splash_screen_caricamento_dati"
        android:label="@string/title_activity_splash_screen_caricamento_dati" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.AscoltoNave"
        android:label="@string/title_activity_ascolto_nave" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.Scegli"
        android:label="@string/title_activity_scegli" &gt;
    &lt;/activity&gt;
    &lt;activity
        android:name=".Activity.SceltaTipologia"
        android:label="@string/title_activity_scelta_tipologia" &gt;
    &lt;/activity&gt;

    &lt;receiver
        android:name=".ricevitorenotifiche.NotificationReceiver"
        android:permission="com.google.android.c2dm.permission.SEND" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="com.google.android.c2dm.intent.REGISTRATION" /&gt;

            &lt;category android:name="com.android.recognition" /&gt;

            &lt;action android:name="com.google.android.c2dm.intent.RECEIVE" /&gt;
            &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;

            &lt;category android:name="it.html.googleservices.push" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;

    &lt;intentservice
        android:name=".ricevitorenotifiche.GcmIntentService"
        android:enabled="true"
        android:exported="false"
        android:process=":questo" &gt;
    &lt;/intentservice&gt;

    &lt;receiver
        android:name=".ricevitorenotifiche.GcmBroadcastReceiver"
        android:permission="com.google.android.c2dm.permission.SEND" &gt;
        &lt;intent-filter&gt;
            &lt;action android:name="com.google.android.c2dm.intent.RECEIVE" /&gt;

            &lt;category android:name="com.thanksandroid.example.gcmdemo" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;
&lt;/application&gt;
</code></pre>

<p></p>

<pre><code>import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.support.v4.content.WakefulBroadcastReceiver;
import android.util.Log;


 public class GcmBroadcastReceiver extends WakefulBroadcastReceiver{
@Override
public void onReceive(Context context, Intent intent) {
   // TODO Auto-generated method stub
   // Explicitly specify that GcmIntentService will handle the intent.
      Log.e("Ricevuto","CIAO SONO PRONTO");
     ComponentName comp = new ComponentName(context.getPackageName(),
             GcmIntentService.class.getName());
   // Start the service, keeping the device awake while it is launching.
     startWakefulService(context, (intent.setComponent(comp)));
     setResultCode(Activity.RESULT_OK);

}

}


 package   com.example.lucabigoni.progettoclientserverolbia.ricevitorenotifiche;

import com.example.lucabigoni.progettoclientserverolbia.Activity.MainActivity;
import com.example.lucabigoni.progettoclientserverolbia.R;
import com.google.android.gms.gcm.GoogleCloudMessaging;

import android.app.Activity;
import android.app.IntentService;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.app.NotificationCompat;
import android.support.v4.content.WakefulBroadcastReceiver;
import android.util.Log;

public class GcmIntentService extends IntentService /*implements         WakefulBroadcastReceiver */{
Context context;
public static int NOTIFICATION_ID = 1;
private NotificationManager mNotificationManager;
NotificationCompat.Builder builder;
public static final String TAG = "GCM Demo";

public GcmIntentService() {
    super("GcmIntentService");
    // TODO Auto-generated constructor stub
}
/*
    @Override
    public void onReceive(Context context, Intent intent) {
// TODO Auto-generated method stub
// Explicitly specify that GcmIntentService will handle the intent.
        ComponentName comp = new ComponentName(context.getPackageName(),
            GcmIntentService.class.getName());
// Start the service, keeping the device awake while it is launching.
    startWakefulService(context, (intent.setComponent(comp)));
    setResultCode(Activity.RESULT_OK);

}*/
@Override
protected void onHandleIntent(Intent intent) {
    // TODO Auto-generated method stub
    Bundle extras = intent.getExtras();
    String msg = intent.getStringExtra("message");
    GoogleCloudMessaging gcm = GoogleCloudMessaging.getInstance(this);
    String messageType = gcm.getMessageType(intent);
Log.e("qua arrivato","qua");
    if (!extras.isEmpty()) {

        if (GoogleCloudMessaging.
                MESSAGE_TYPE_SEND_ERROR.equals(messageType)) {
            sendNotification("Send error: " + extras.toString());
        } else if (GoogleCloudMessaging.
                MESSAGE_TYPE_DELETED.equals(messageType)) {
            sendNotification("Deleted messages on server: " +
                    extras.toString());
            // If it's a regular GCM message, do some work.
        } else if (GoogleCloudMessaging.
                MESSAGE_TYPE_MESSAGE.equals(messageType)) {
            // This loop represents the service doing some work.
            for (int i=0; i&lt;5; i++) {
                Log.i(TAG, "Working... " + (i+1)
                        + "/5 @ " + SystemClock.elapsedRealtime());
                try {
                    Thread.sleep(500);
                } catch (InterruptedException e) {
                }
            }
            Log.i(TAG, "Completed work @ " + SystemClock.elapsedRealtime());
            // Post notification of received message.
            //sendNotification("Received: " + extras.toString());
            sendNotification(msg);
            Log.i(TAG, "Received: " + extras.toString());
        }
    }
    GcmBroadcastReceiver.completeWakefulIntent(intent);
}
private void sendNotification(String msg) {
    mNotificationManager = (NotificationManager)
            this.getSystemService(Context.NOTIFICATION_SERVICE);
    Log.e("qua arrivato","qua2");
    Intent myintent = new Intent(this, MainActivity.class);
    myintent.putExtra("message", msg);
    PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
            myintent, PendingIntent.FLAG_UPDATE_CURRENT);

    NotificationCompat.Builder mBuilder =
            new NotificationCompat.Builder(this)
                    .setSmallIcon(R.drawable.ic_launcher)
                    .setContentTitle("GCM Notification")
                    .setStyle(new NotificationCompat.BigTextStyle()
                            .bigText(msg))
                    .setContentText(msg);

    mBuilder.setContentIntent(contentIntent);
    mNotificationManager.notify(NOTIFICATION_ID, mBuilder.build());
    NOTIFICATION_ID++;
}

}
</code></pre>
