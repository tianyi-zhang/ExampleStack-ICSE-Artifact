<p>It seems what you want to implement can be pretty much answered by the <a href="http://static.netty.io/3.5/xref/org/jboss/netty/example/proxy/HexDumpProxyInboundHandler.html" rel="nofollow">Netty proxy example</a></p>

<p>The code segment below shows how you can connect to the remote server once a new client channel is opened. </p>

<pre><code>@Override
public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e)
        throws Exception {
    // Suspend incoming traffic until connected to the remote host.
    final Channel inboundChannel = e.getChannel();
    inboundChannel.setReadable(false);

    // Start the connection attempt.
    ClientBootstrap cb = new ClientBootstrap(cf);
    cb.getPipeline().addLast("handler", new OutboundHandler(e.getChannel()));
    ChannelFuture f = cb.connect(new InetSocketAddress(remoteHost, remotePort));

    outboundChannel = f.getChannel();
    f.addListener(new ChannelFutureListener() {
        public void operationComplete(ChannelFuture future) throws Exception {
            if (future.isSuccess()) {
                // Connection attempt succeeded:
                // Begin to accept incoming traffic.
                inboundChannel.setReadable(true);
            } else {
                // Close the connection if the connection attempt has failed.
                inboundChannel.close();
            }
        }
    });
}
</code></pre>

<p>Once connected to the remote server, whatever the client sends (via inbound channel) is forwarded to the remote server (outbound channel). </p>

<p>I suggest you to follow and implement the proxy example if you haven't done it so already.</p>
