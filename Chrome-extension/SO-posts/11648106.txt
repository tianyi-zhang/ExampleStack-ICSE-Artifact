<p>Since you can have duplicate values you shouldn't be using a <code>Set</code> at all. Change to a <code>List</code> and sort it instead. Your <code>entriesSortedByValues</code> would look something like this: </p>

<pre><code>static &lt;K,V extends Comparable&lt;? super V&gt;&gt; 
            List&lt;Entry&lt;K, V&gt;&gt; entriesSortedByValues(Map&lt;K,V&gt; map) {

    List&lt;Entry&lt;K,V&gt;&gt; sortedEntries = new ArrayList&lt;Entry&lt;K,V&gt;&gt;(map.entrySet());

    Collections.sort(sortedEntries, 
            new Comparator&lt;Entry&lt;K,V&gt;&gt;() {
                @Override
                public int compare(Entry&lt;K,V&gt; e1, Entry&lt;K,V&gt; e2) {
                    return e2.getValue().compareTo(e1.getValue());
                }
            }
    );

    return sortedEntries;
}
</code></pre>

<p><em>Note: in your example output the values is descending. If you want them ascending, use <code>e1.getValue().compareTo(e2.getValue())</code> instead.</em></p>

<hr>

<h2>Example:</h2>

<pre><code>public static void main(String args[]) {

    Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();
    map.put("A", 34);
    map.put("B", 25);
    map.put("C", 50);
    map.put("D", 50); // "duplicate" value

    System.out.println(entriesSortedByValues(map));
}
</code></pre>

<p>Output:</p>

<pre><code>[D=50, C=50, A=34, B=25]
</code></pre>
