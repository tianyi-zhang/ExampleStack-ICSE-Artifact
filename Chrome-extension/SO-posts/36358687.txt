<p>I figured out how to make the entire view scrollable. The reason the ScrollView was not working was because of this statement:</p>

<pre><code>mLinearLayout = (LinearLayout) inflater.inflate(R.layout.legend_dialog_fragment_layout, null);
</code></pre>

<p>It takes the entire layout of that xml and makes it one view. It then loops through the view and creates new views over and over again. So if you wrap the view in a scrollable, it appends the scrollable event to that specific view.</p>

<p>What I did was call</p>

<pre><code>View view = inflater.inflate(R.layout.legend_dialog_fragment_layout, container, false);
mLinearLayout = (LinearLayout) view.findViewById(R.id.legend_dialog_fragment_linearlayout);
</code></pre>

<p>That way, it uses the linearLayout of that xml as opposed to the entire xml layout.</p>

<p>I then ran into another issue with the list being compressed into one line each time because of the ScrollView. So what I did was:</p>

<pre><code>     /**** Method for Setting the Height of the ListView dynamically.
     **** Hack to fix the issue of not showing all the items of the ListView
     **** when placed inside a ScrollView  ****/
    public void setListViewHeightBasedOnChildren(ListView listView) {
        ListAdapter listAdapter = listView.getAdapter();
        if (listAdapter == null)
            return;

        int desiredWidth = View.MeasureSpec.makeMeasureSpec(listView.getWidth(), View.MeasureSpec.UNSPECIFIED);
        int totalHeight = 0;
        View view = null;
        for (int i = 0; i &lt; listAdapter.getCount(); i++) {
            view = listAdapter.getView(i, view, listView);
            if (i == 0)
                view.setLayoutParams(new ViewGroup.LayoutParams(desiredWidth, GridLayout.LayoutParams.WRAP_CONTENT));

            view.measure(desiredWidth, View.MeasureSpec.UNSPECIFIED);
            totalHeight += view.getMeasuredHeight();
        }
        ViewGroup.LayoutParams params = listView.getLayoutParams();
        params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - 1));
        listView.setLayoutParams(params);
    }
</code></pre>

<p>which shows the list with the contents in it in one view. </p>

<p>By the way, I got the code from this Arshu who had an amazing solution. Here is the link:</p>

<p><a href="http://stackoverflow.com/a/19311197/3389638">Answer</a></p>

<p>I'm sorry if my answer seems confusing. I'm fairly new with stackoverflow and the android enviornment.</p>
