<p>There is no listener to detect which app you choose in a default intent chooser.<br>
Therefore, you have to create a dialog which contains all intents for <code>ACTION_SEND</code> by yourself.  </p>

<p>You can get a intent list for <code>ACTION_SEND</code> by the following code.  </p>

<pre><code>Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);
PackageManager pm = v.getContext().getPackageManager();
List&lt;ResolveInfo&gt; activityList = pm.queryIntentActivities(shareIntent, 0);
</code></pre>

<p>Then, use the list to build a dialog, add listener for each intent.<br>
After user tap one of them, save its' package name. You can retrieve the package name by <code>ResolveInfo.activityInfo.name</code>.  </p>

<p>Next, you can use the package name to filter <code>ACTION_SEND</code>, only firing the filtered app.<br>
Here is a snippet for launching Twitter app.  </p>

<pre><code>Intent shareIntent = new Intent(android.content.Intent.ACTION_SEND);
PackageManager pm = v.getContext().getPackageManager();
List&lt;ResolveInfo&gt; activityList = pm.queryIntentActivities(shareIntent, 0);
for (final ResolveInfo app : activityList) {  
    if ("com.twitter.android.PostActivity".equals(app.activityInfo.name)) {
        final ActivityInfo activity = app.activityInfo;
        final ComponentName name = new ComponentName(activity.applicationInfo.packageName,activity.name);
        shareIntent.addCategory(Intent.CATEGORY_LAUNCHER);
        shareIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
        shareIntent.setComponent(name);
        v.getContext().startActivity(shareIntent);
        break;
    }
}
</code></pre>

<p>Hope it helps!</p>
