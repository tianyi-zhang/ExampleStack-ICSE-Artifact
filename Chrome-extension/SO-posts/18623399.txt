<p>Try integrating all the functions from other classes in your LoginActivity. For instance your loginUser function from UserFunctions class and your getJSONFromUrl from JSONParser class.</p>

<p>Don't forget to declare your serverURL String and add import if needed. </p>

<pre><code>    public class LoginActivity extends Activity {
    // Values for email and password at the time of the login attempt.
private String mUsername;
private String mPassword;

 private static String serverURL = "YOUR URL";

    //private JSONParser jsonParser;

    static InputStream is = null;
    static JSONObject jObj = null;
    static String json = "";

@Override
protected void onCreate(Bundle savedInstanceState) {
            ......

    // Set up the login form.
    mUsername = getIntent().getStringExtra(EXTRA_EMAIL);
    mUsernameView = (EditText) findViewById(R.id.email);\

            ......

    findViewById(R.id.sign_in_button).setOnClickListener(
            new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    attemptLogin();
                }
            });
}

/**
 * Attempts to sign in or register the account specified by the login form.
 * If there are form errors (invalid email, missing fields, etc.), the
 * errors are presented and no actual login attempt is made.
 */
public void attemptLogin() {
    if (mAuthTask != null) {
        return;
    }

    // Reset errors.
    mUsernameView.setError(null);
    mPasswordView.setError(null);

    // Store values at the time of the login attempt.
    mUsername = mUsernameView.getText().toString();
    mPassword = mPasswordView.getText().toString();

            ..........

    if (cancel) {
        // There was an error; don't attempt login and focus the first
        // form field with an error.
        focusView.requestFocus();
    } else {

        // Show a progress spinner, and kick off a background task to
        // perform the user login attempt.
            mLoginStatusMessageView.setText(R.string.login_progress_signing_in);
        showProgress(true);
        try {
        mAuthTask = new UserLoginTask();
        mAuthTask.execute(mUsername, mPassword);
        } catch(Exception e) {
            Log.e(TAG, e.toString());
        }
        //mAuthTask.execute((Void) null);
    }
}

public JSONObject loginUser(String username, String password) {
    Log.d(TAG, "jsonparser class - in login");

    // Building Parameters      
    List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
    params.add(new BasicNameValuePair("tag", login_tag));
    params.add(new BasicNameValuePair("username", username));
    params.add(new BasicNameValuePair("password", password));

    JSONObject json = jsonParser.getJSONFromUrl(serverURL, params);
    return json;
}

/**
 * Represents an asynchronous login/registration task used to authenticate
 * the user.
 */
public class UserLoginTask extends AsyncTask&lt;String, Void, Boolean&gt; {
    UserFunctions userFunction;

    private String isUserLoggedIn;
    private String TAG = "Feedback App";
    private String KEY_SUCCESS = "success";
    private String result;

    @Override
    protected Boolean doInBackground(String... loginVars) {
        // TODO: attempt authentication against a network service.
        mUsername = loginVars[0];
        mPassword = loginVars[1];

        try {
            // Simulate network access.
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            return false;
        }

                    Log.d(TAG, mUsername+ "--" + mPassword);

        JSONObject json = userFunction.loginUser(mUsername, mPassword);
        Log.e(TAG, "fetched json" + json.toString());

        // check for login response
        try {
            if (json.getString(KEY_SUCCESS) != null) {

                                            ........
                // Close Login Screen
                finish();
            } else {
                // Error in login
                //loginErrorMsg.setText("Incorrect username/password");
                return false;
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        // TODO: register the new account here.
        return true;
    }

    @Override
    protected void onPostExecute(final Boolean success) {
        mAuthTask = null;
        showProgress(false);

        if (success) {
            finish();
        } else {
            mPasswordView.requestFocus();
        }
    }

    @Override
    protected void onCancelled() {
        mAuthTask = null;
        showProgress(false);
    }
}

public JSONObject getJSONFromUrl(String url, List&lt;NameValuePair&gt; params) 
    {
        // Making HTTP request
        try 
        {
            // defaultHttpClient
            DefaultHttpClient httpClient = new DefaultHttpClient();
            /*
             *  if you are referring to a localhost from your device than use the http://10.0.2.2/ 
             *  instead of the http://127.0.0.1/ or http://localhost/. Because your Android emulator is running
             *  on a Virtual Machine(QEMU) and you can not connect to a server directly running on your PC.
             *  So your code snippet will be like this:
             *  HttpPost httpMethod = new HttpPost("http://10.0.2.2:8080/ + address insteda of the normal website name");
             *  Modify your url from the previous activity
             */
            HttpPost httpPost = new HttpPost(url);
            httpPost.setEntity(new UrlEncodedFormEntity(params));

            /*  If you come across connection problems and any action requiring data transfer silently fails
             *  the following line of code could be the reason of the issue. Add a line breakpoint and check 
             *  whether the request has been sent or not. Check your server ip, and make sure that your
             *  machine is visible.
             */
            HttpResponse httpResponse = httpClient.execute(httpPost);
            HttpEntity httpEntity = httpResponse.getEntity();
            is = httpEntity.getContent();
        }
        catch (UnsupportedEncodingException e) 
        {
            e.printStackTrace();
        }
        catch (ClientProtocolException e)
        {
            e.printStackTrace();
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }

        try 
        {
            /*
             *  Here you should receive the response from the web, check out reader response from BufferedReader class
             *  If you receive a html page response then your server is not online or reachable.
             */
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) 
            {
                Log.e("JSON PARSER:","line : "+ line);
                sb.append(line + "n");
            }
            is.close();
            json = sb.toString();
            //Log.e("JSON", json);
        } 
        catch (Exception e) 
        {
            Log.e("Buffer Error", "Error converting result " + e.toString());
        }
        // try parse the string to a JSON object
        try 
        {
            jObj = new JSONObject(json);
        } 
        catch (JSONException e) 
        {
            Log.e("JSON Parser", "Error parsing data " + e.toString());
        }

        // return JSON String
        return jObj;

    }

}
</code></pre>
