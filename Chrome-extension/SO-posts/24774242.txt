<p>I think the following code could help you.</p>

<pre><code>public class CustomHttpClient 
{
 public static final int HTTP_TIMEOUT = 30 * 1000;
 private static HttpClient mHttpClient;
 private static HttpClient getHttpClient()
 {
  if (mHttpClient == null) 
    {
    mHttpClient = new DefaultHttpClient();
    final HttpParams params = mHttpClient.getParams();
    HttpConnectionParams.setConnectionTimeout(params, HTTP_TIMEOUT);
    HttpConnectionParams.setSoTimeout(params, HTTP_TIMEOUT);
    ConnManagerParams.setTimeout(params, HTTP_TIMEOUT);
    }
  return mHttpClient;
 }
 public static String executeHttpPost(String url,ArrayList&lt;NameValuePair&gt; postParameters) throws Exception 
   {
     BufferedReader in = null;
     try
     {
         HttpClient client = getHttpClient();
         HttpPost request = new HttpPost(url);
         UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(postParameters);
         request.setEntity(formEntity);
         HttpResponse response = client.execute(request);
         in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
         StringBuffer sb = new StringBuffer("");
         String line = "";
         String NL = System.getProperty("line.separator");
         while ((line = in.readLine()) != null) {
         sb.append(line + NL);   
     }
     in.close();
     String result = sb.toString();
     return result;
  } 
  finally 
  {
   if (in != null)
    {
    try 
        {
        in.close();
        }
    catch (IOException e)
        {
        Log.e("log_tag", "Error converting result "+e.toString()); 
        e.printStackTrace();
        }
    }
  }
 }
 public static String executeHttpGet(String url) throws Exception 
    {
        BufferedReader in = null;
        try
            {
                HttpClient client = getHttpClient();
                HttpGet request = new HttpGet();
                request.setURI(new URI(url));
                HttpResponse response = client.execute(request);
                in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
                StringBuffer sb = new StringBuffer("");
                String line = "";
                String NL = System.getProperty("line.separator");
                while ((line = in.readLine()) != null) {
                sb.append(line + NL);
            }
     in.close();
     String result = sb.toString();
     return result;
    }
finally
    {
        if (in != null)
            {
                try
                    {
                        in.close();
                    }
                catch (IOException e)
                    {
                        Log.e("log_tag", "Error converting result "+e.toString()); 
                        e.printStackTrace();
                    }
            }
    }
  }
}
</code></pre>

<p>Addons:-</p>

<p>Use the JSON Parser class below:-</p>

<pre><code>public class JSONParser {

    static InputStream is = null;
    static JSONObject jObj = null;
    static String json = "";

    // constructor
    public JSONParser() {

    }

    // function get json from url
    // by making HTTP POST or GET mehtod
    public JSONObject makeHttpRequest(String url, String method,
            List&lt;NameValuePair&gt; params) {

        // Making HTTP request
        try {

            // check for request method
            if(method == "POST"){
                // request method is POST
                // defaultHttpClient
                DefaultHttpClient httpClient = new DefaultHttpClient();
                HttpPost httpPost = new HttpPost(url);
                httpPost.setEntity(new UrlEncodedFormEntity(params));

                HttpResponse httpResponse = httpClient.execute(httpPost);
                HttpEntity httpEntity = httpResponse.getEntity();
                is = httpEntity.getContent();

            }else if(method == "GET"){
                // request method is GET
                DefaultHttpClient httpClient = new DefaultHttpClient();
                String paramString = URLEncodedUtils.format(params, "utf-8");
                url += "?" + paramString;
                HttpGet httpGet = new HttpGet(url);

                HttpResponse httpResponse = httpClient.execute(httpGet);
                HttpEntity httpEntity = httpResponse.getEntity();
                is = httpEntity.getContent();
            }           


        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            json = sb.toString();
            Log.d("json data",json.toString());
        } catch (Exception e) {
            Log.e("Buffer Error", "Error converting result " + e.toString());
        }

        // try parse the string to a JSON object
        try {
            jObj = new JSONObject(json);
        } catch (JSONException e) {
            Log.e("JSON Parser", "Error parsing data " + e.toString());
        }

        // return JSON String
        return jObj;

    }
}
</code></pre>

<p>Now if you want to send anything on the server, say you need to save the username and password on the server using the JSON Parser and PHP use the below code in any thread or in the doInBackground method of Async task.</p>

<pre><code>ArrayList&lt;NameValuePair&gt; Insert = new ArrayList&lt;NameValuePair&gt;();
                    Insert.add(new BasicNameValuePair("User_Name","&lt;Sting denoting username&gt;"));
                    Insert.add(new BasicNameValuePair("Password","&lt;Sting denoting Password&gt;));

                    try
                    {
                        HttpClient httpclient = new DefaultHttpClient();
                        HttpPost httppost = new HttpPost("http://server path/yourphpfile.php");
                        httppost.setEntity(new UrlEncodedFormEntity(Insert));
                        HttpResponse response = httpclient.execute(httppost);
                        HttpEntity entity = response.getEntity();
                        is = entity.getContent();
                    }   
                    catch(Exception e)
                    {
                        Log.e("log_tag", "Error in http connection"+e.toString());
                    }
</code></pre>

<p>Now if you need these values back using the get method in JSON Parser, user the following code again in the Thread or doInBackground method of Async task.</p>

<pre><code>public class CountDownTask extends AsyncTask&lt;Void,Void , Void&gt;
    {
        protected void onPreExecute() 
        {
            count = 0;
            S_Store_Id = null; S_Store_Name = null;S_Store_Address = null; S_Store_Phone= null;
            Offers = null; Descriptions = null;
        }
        protected Void doInBackground(Void... params)
        {   

            ArrayList&lt;NameValuePair&gt; postParameters = new ArrayList&lt;NameValuePair&gt;();
            postParameters.add(new BasicNameValuePair("User_Name",StringUserName));
            String response = null;
            try 
            {
                response = CustomHttpClient.executeHttpPost("http://yourserverpath/yourphpfilefor retrivingdata.php",postParameters);
                String result = response.toString();
                try
                {
                    JSONArray jArray = new JSONArray(result);

                    JSONObject json_data = jArray.getJSONObject(0);

                    StringUserName = json_data.getString("User_Name");
                    StringPassword = json_data.getString("Password");

                    json_data = jArray.getJSONObject(1);
                    }
                catch(JSONException e)
                {
                    Log.e("log_tag", "Error parsing data "+e.toString());
                }
            }
            catch (Exception e)
            {
                Log.e("log_tag","Error in http connection!!" + e.toString());     
            }
            return null;
        }
</code></pre>

<p>Now you can write the logic for inserting and retriving data from the server in your corresponding PHP files and use them for using data from the server. This method works equivalent to HTTP Get and Post methods of HTTP Request and Response.</p>

<p>Hope it can help you.. Thanks...</p>
