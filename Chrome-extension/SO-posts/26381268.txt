<p>Hello Here You can do solve your problem using DOM Parser</p>

<pre><code>class getData extends AsyncTask&lt;Void, Void, String&gt; {
        private ProgressDialog mProgress;
        private String responseString;
        private String result;

        @Override
        protected void onPreExecute() {
            // TODO Auto-generated method stub
            super.onPreExecute();
            mProgress = new ProgressDialog(DOMXMLParsingActivity.this);
            mProgress.setMessage("Loading");
            mProgress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
            mProgress.setCancelable(false);
            mProgress.show();
        }

        @Override
        protected String doInBackground(Void... unsued) {
            try {
                HttpPost httpPost = new HttpPost(
                        "http://www.findyourfate.com/rss/dailyhoroscope-feed.asp?sign=Capricorn");

                httpPost.addHeader("Accept", "application/xml");
                httpPost.addHeader("Content-Type", "application/xml");
                HttpClient httpclient = new DefaultHttpClient();
                HttpResponse httpResponse = (HttpResponse) httpclient
                        .execute(httpPost);

                if (httpResponse.getStatusLine().getStatusCode() == 200) {
                    responseString = EntityUtils.toString(httpResponse
                            .getEntity());
                    System.out.println("pankaj " + responseString);
                    result = "true";
                }

            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("error" + e);
                result = "false";
            }
            return result;
        }

        @Override
        protected void onPostExecute(String sResponse) {
            mProgress.dismiss();
            if (result.equals("true")) {
                XMLDOMParser parser = new XMLDOMParser();
                ArrayList&lt;Data&gt; datas = new ArrayList&lt;Data&gt;();
                InputStream stream = new ByteArrayInputStream(
                        responseString.getBytes());
                Document doc = parser.getDocument(stream);
                NodeList nodeList = doc.getElementsByTagName("item");
                for (int i = 0; i &lt; nodeList.getLength(); i++) {
                    Element e = (Element) nodeList.item(i);
                    Data data = new Data();
                    data.setName(parser.getValue(e, "title"));
                    data.setUsername(parser.getValue(e, "description"));
                    datas.add(data);
                    System.out.println("pankaj " + parser.getValue(e, "title")
                            + " " + parser.getValue(e, "description") + " "
                            + parser.getValue(e, "link"));
                }
                listView.setAdapter(new CustomListAdapter(
                        DOMXMLParsingActivity.this, datas));
            } else {

            }
        }
    }


package com.example.demowork;

import java.io.IOException;
import java.io.InputStream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import android.util.Log;

public class XMLDOMParser {
    public Document getDocument(InputStream inputStream) {
        Document document = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        try {
            DocumentBuilder db = factory.newDocumentBuilder();
            InputSource inputSource = new InputSource(inputStream);
            document = db.parse(inputSource);
        } catch (ParserConfigurationException e) {
            Log.e("Error: ", e.getMessage());
            return null;
        } catch (SAXException e) {
            Log.e("Error: ", e.getMessage());
            return null;
        } catch (IOException e) {
            Log.e("Error: ", e.getMessage());
            return null;
        }
        return document;
    }

    public String getValue(Element item, String name) {
        NodeList nodes = item.getElementsByTagName(name);
        return this.getTextNodeValue(nodes.item(0));
    }

    private final String getTextNodeValue(Node node) {
        Node child;
        if (node != null) {
            if (node.hasChildNodes()) {
                child = node.getFirstChild();
                while (child != null) {
                    if (child.getNodeType() == Node.TEXT_NODE) {
                        return child.getNodeValue();
                    }
                    child = child.getNextSibling();
                }
            }
        }
        return "";
    }
}
</code></pre>
