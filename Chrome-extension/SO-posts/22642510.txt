<p>This seems to work OK: It's a copy of ListView.computeVerticalScrollOffset with two modifications:</p>

<ul>
<li>Subclass <code>ListView</code>, modify your layout to use your subclass</li>
<li>Copy <code>ListView.computeVerticalScrollOffset</code> to your custom <code>ListView</code></li>
<li>Replace member variable references with getters (see below)</li>
<li>Modify the offset method to account for the adjustment you want to use (see below)</li>
</ul>

<p><code>YourListView.java</code>:</p>

<pre><code>@Override
protected int computeVerticalScrollOffset() {
    final int firstPosition = getFirstVisiblePosition();
    final int childCount = getChildCount();
    if (firstPosition &gt;= 0 &amp;&amp; childCount &gt; 0) {
        if (isSmoothScrollbarEnabled()) {
            final View view = getChildAt(0);
            final int top = view.getTop();

            int height = view.getHeight();
            if (height &gt; 0) {

                // The core of the change is here (mHeaderRowHeight)
                return Math.max(firstPosition * 100 - (top * 100) / height +
                        (int) ((float) (getScrollY() + mHeaderRowHeight) / (getHeight() + mHeaderRowHeight) * getCount() * 100), 0);
            }
        } else {
            int index;
            final int count = getCount();
            if (firstPosition == 0) {
                index = 0;
            } else if (firstPosition + childCount == count) {
                index = count;
            } else {
                index = firstPosition + childCount / 2;
            }
            return (int) (firstPosition + childCount * (index / (float) count));
        }
    }
    return 0;
}
</code></pre>
