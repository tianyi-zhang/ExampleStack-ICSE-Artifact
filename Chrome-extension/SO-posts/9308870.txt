<p>Yes it is.</p>

<p>Create your own ApplicationServlet extending class like this:</p>

<pre><code>public class MyApplicationServlet extends ApplicationServlet {

    @Override
    protected void writeAjaxPageHtmlVaadinScripts(Window window,
            String themeName, Application application, BufferedWriter page,
            String appUrl, String themeUri, String appId,
            HttpServletRequest request) throws ServletException, IOException {

        page.write("&lt;script type=\"text/javascript\"&gt;\n");
        page.write("//&lt;![CDATA[\n");
        page.write("document.write(\"&lt;script language='javascript' src='./jquery/jquery-1.4.4.min.js'&gt;&lt;\\/script&gt;\");\n");
        page.write("//]]&gt;\n&lt;/script&gt;\n");

        super.writeAjaxPageHtmlVaadinScripts(window, themeName, application,
            page, appUrl, themeUri, appId, request);
    }
}
</code></pre>

<p>Then replace the Vaadin servlet in your web.xml (the default is <code>com.vaadin.terminal.gwt.server.ApplicationServlet</code>):</p>

<pre><code>&lt;servlet-class&gt;com.example.MyApplicationServlet&lt;/servlet-class&gt;
</code></pre>

<p>You can then make jQuery calls in your code by calling:</p>

<pre><code>MyApplication.getMainWindow().executeJavascript(jQueryString);
</code></pre>
