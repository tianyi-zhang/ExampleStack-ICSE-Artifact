<p>Its pretty easy :) 
First you need to create a CustomCheckBox class which will extend CheckBox and override the <code>onDraw(Canvas canvas)</code> method:</p>

<pre><code>public class CustomCheckBox extends CheckBox {
private final Drawable buttonDrawable;

public CustomCheckBox(Context context, AttributeSet set) {
    super(context, set);
    buttonDrawable = getResources().getDrawable(R.drawable.custom_check_box);
    try {
        setButtonDrawable(android.R.color.transparent);
    } catch (Exception e) {
        // DO NOTHING
    }
    setPadding(10, 5, 50, 5);
}

@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);
    buttonDrawable.setState(getDrawableState());

    final int verticalGravity = getGravity() &amp; Gravity.VERTICAL_GRAVITY_MASK;
    final int height = buttonDrawable.getIntrinsicHeight();
    if (buttonDrawable != null) {
        int y = 0;

        switch (verticalGravity) {
        case Gravity.BOTTOM:
            y = getHeight() - height;
            break;
        case Gravity.CENTER_VERTICAL:
            y = (getHeight() - height) / 2;
            break;
        }

        int buttonWidth = buttonDrawable.getIntrinsicWidth();
        int buttonLeft = getWidth() - buttonWidth - 5;
        buttonDrawable.setBounds(buttonLeft, y, buttonLeft + buttonWidth, y + height);
        buttonDrawable.draw(canvas);
    }
}
}
</code></pre>

<p>Also create your selector named <code>custom_check_box</code> in your drawable folder:</p>

<pre><code>&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;item android:state_checked="true" android:state_window_focused="false" 
        android:drawable="@drawable/btn_check_on" /&gt;
    &lt;item android:state_checked="false" android:state_window_focused="false"
        android:drawable="@drawable/btn_check_off" /&gt;
    &lt;item android:state_checked="true" android:state_pressed="true"
        android:drawable="@drawable/btn_check_on" /&gt;    
    &lt;item android:state_checked="false" android:state_focused="true"
        android:drawable="@drawable/btn_check_off" /&gt;
    &lt;item android:state_checked="false" android:drawable="@drawable/btn_check_off" /&gt;
    &lt;item android:state_checked="true" android:drawable="@drawable/btn_check_on" /&gt;
&lt;/selector&gt;
</code></pre>

<p>And use your custom icons/imgs in the XML above for all three states (focused/pressed/default)</p>

<p>Use the custom component in your XML like this :</p>

<pre><code>&lt;*package + class path*.CustomCheckBox   // example com.mypackage.ui.CustomCheckBox if your project is named "mypackage" and the class is in the "ui" folder
            android:text="@string/text"
            android:checked="false" android:layout_width="fill_parent"
            android:id="@+id/myCheckbox" android:layout_height="wrap_content"/&gt;
</code></pre>

<p>and java :</p>

<pre><code>private CustomCheckBox mCheckbox;
mCheckbox = (CustomCheckBox) findviewbyid(R.id.myCheckbox);
</code></pre>

<p>It works because I used it both ways :) And with some tweaks it works for RadioButtons too the same way. Happy coding!</p>
