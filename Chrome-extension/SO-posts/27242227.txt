<p>Yes, random is correct. You can have your adapter keep track of which items have been dimmed, and check the setting of a particular item in getView:</p>

<pre><code>public class ImageAdapter extends BaseAdapter {
    private Context mContext;
    private int mSize;
    private boolean [] mDim;

    public ImageAdapter(Context c, int size) {
        mContext = c;
        mSize = size;
        mDim = new boolean[size];
    }

    public void dimImage(int position) {
        mDim[position] = true;
    }

    // create a new ImageView for each item referenced by the Adapter
    public View getView(int position, View convertView, ViewGroup parent) {
        ImageView imageView;
        if (convertView == null) {  // if it's not recycled, initialize some attributes
            imageView = new ImageView(mContext);
            imageView.setLayoutParams(new GridView.LayoutParams(85, 85));
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
            imageView.setPadding(8, 8, 8, 8);
        } else {
            imageView = (ImageView) convertView;
        }

        imageView.setImageResource(mThumbIds[position]);
        imageView.setAlpha(mDim[position] ? 0.5f : 1.0f);

        return imageView;
    }
}
</code></pre>

<p>In your activity, keep the adapter in a field, construct the adapter with SIZE, and when you want to dim an image, call adapter.dimImage(position), followed by notifyDataSetChanged:</p>

<pre><code>public class QuizActivity extends Activity {
    private ImageAdapter adapter;
    private GridView gridview;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        adapter = new ImageAdapter(this, SIZE);
        gridview = (GridView) findViewById(R.id.gridview);
        gridview.setAdapter(adapter);
        ...
    }

    public void dimImage(){
        adapter.dimImage(location); // not sure if location represents the image index
        adapter.notifyDataSetChanged();
    }
</code></pre>
