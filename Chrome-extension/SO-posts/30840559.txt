<p>You can also do like this: <s>? ????? ??? ???:</s></p>

<pre><code>public class MyTranslateAnimation extends TranslateAnimation {

    private long mTimePause, mTimeTotal;
    private boolean mPause;


    public MyTranslateAnimation(Context context, AttributeSet attrs) {

        super(context, attrs);

    }

    @Override
    public boolean getTransformation(long currentTime, Transformation outTransformation) {
        updateTime(currentTime);
        return super.getTransformation(mTimeTotal - mTimePause, outTransformation);
    }

    private void updateTime(long currentTime) {
        long dt = currentTime - mTimeTotal;
        mTimeTotal += dt;
        if (mPause) {
            mTimePause += dt;
        }
    }

    public void pause() {
        mPause = true;
    }

    public void resume() {
        mPause = false;
    }

}
</code></pre>

<p>To create an animation from an XML, you can create your own <code>AnimationUtils</code> subclass, like this: <s>??? ???????? ???????? ?? XML ????? ??????? ???? AnimationUtils:</s></p>

<pre><code>public class MyAnimationUtils {

    public static Animation loadAnimation(Context context, int id) throws Resources.NotFoundException {

        XmlResourceParser parser = null;
        try {
            parser = context.getResources().getAnimation(id);
            return createAnimationFromXml(context, parser);
        } catch (XmlPullParserException ex) {
            Resources.NotFoundException rnf = new Resources.NotFoundException("Can't load animation resource ID #0x" + Integer.toHexString(id));
            rnf.initCause(ex);
            throw rnf;
        } catch (IOException ex) {
            Resources.NotFoundException rnf = new Resources.NotFoundException("Can't load animation resource ID #0x" + Integer.toHexString(id));
            rnf.initCause(ex);
            throw rnf;
        } finally {
            if (parser != null) parser.close();
        }

    }

    private static Animation createAnimationFromXml(Context c, XmlPullParser parser) throws XmlPullParserException, IOException {

        return createAnimationFromXml(c, parser, null, Xml.asAttributeSet(parser));

    }

    private static Animation createAnimationFromXml(Context c, XmlPullParser parser, AnimationSet parent, AttributeSet attrs) throws XmlPullParserException, IOException {

        Animation anim = null;

        // Make sure we are on a start tag.
        int type;
        int depth = parser.getDepth();

        while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() &gt; depth)
                &amp;&amp; type != XmlPullParser.END_DOCUMENT) {

            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            String  name = parser.getName();

            if (name.equals("set")) {
                anim = new AnimationSet(c, attrs);
                createAnimationFromXml(c, parser, (AnimationSet)anim, attrs);
            } else if (name.equals("alpha")) {
                anim = new AlphaAnimation(c, attrs);
            } else if (name.equals("scale")) {
                anim = new ScaleAnimation(c, attrs);
            }  else if (name.equals("rotate")) {
                anim = new RotateAnimation(c, attrs);
            }  else if (name.equals("translate")) {
                //anim = new TranslateAnimation(c, attrs);
                anim = new MyTranslateAnimation(c, attrs); // ??????????????? ?????? ??? ???????, ????????? ????? ??? ????
            } else {
                throw new RuntimeException("Unknown animation name: " + parser.getName());
            }

            if (parent != null) {
                parent.addAnimation(anim);
            }
        }

        return anim;

    }

}
</code></pre>

<p>And then you build the animation like this: <s>? ??? ??? ??????? ????????:</s></p>

<pre><code>MyTranslateAnimation cloud1 = (MyTranslateAnimation) MyAnimationUtils.loadAnimation(this, R.anim.main_cloud1);
</code></pre>

<p>Hope this helps. <s>??????????? ?? ????????!</s></p>
