<p>Technique described in this <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=208860">article by Ian Robertson</a> works for me.</p>

<p>In short quick and dirty example:</p>

<pre><code> public abstract class AbstractDAO&lt;T extends EntityInterface, U extends QueryCriteria, V&gt;
 {
    /**
     * Method returns class implementing EntityInterface which was used in class
     * extending AbstractDAO
     *
     * @return Class&lt;T extends EntityInterface&gt;
     */
    public Class&lt;T&gt; returnedClass()
    {
        return (Class&lt;T&gt;) getTypeArguments(AbstractDAO.class, getClass()).get(0);
    }

    /**
     * Get the underlying class for a type, or null if the type is a variable
     * type.
     *
     * @param type the type
     * @return the underlying class
     */
    public static Class&lt;?&gt; getClass(Type type)
    {
        if (type instanceof Class) {
            return (Class) type;
        } else if (type instanceof ParameterizedType) {
            return getClass(((ParameterizedType) type).getRawType());
        } else if (type instanceof GenericArrayType) {
            Type componentType = ((GenericArrayType) type).getGenericComponentType();
            Class&lt;?&gt; componentClass = getClass(componentType);
            if (componentClass != null) {
                return Array.newInstance(componentClass, 0).getClass();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    /**
     * Get the actual type arguments a child class has used to extend a generic
     * base class.
     *
     * @param baseClass the base class
     * @param childClass the child class
     * @return a list of the raw classes for the actual type arguments.
     */
    public static &lt;T&gt; List&lt;Class&lt;?&gt;&gt; getTypeArguments(
            Class&lt;T&gt; baseClass, Class&lt;? extends T&gt; childClass)
    {
        Map&lt;Type, Type&gt; resolvedTypes = new HashMap&lt;Type, Type&gt;();
        Type type = childClass;
        // start walking up the inheritance hierarchy until we hit baseClass
        while (!getClass(type).equals(baseClass)) {
            if (type instanceof Class) {
                // there is no useful information for us in raw types, so just keep going.
                type = ((Class) type).getGenericSuperclass();
            } else {
                ParameterizedType parameterizedType = (ParameterizedType) type;
                Class&lt;?&gt; rawType = (Class) parameterizedType.getRawType();

                Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
                TypeVariable&lt;?&gt;[] typeParameters = rawType.getTypeParameters();
                for (int i = 0; i &lt; actualTypeArguments.length; i++) {
                    resolvedTypes.put(typeParameters[i], actualTypeArguments[i]);
                }

                if (!rawType.equals(baseClass)) {
                    type = rawType.getGenericSuperclass();
                }
            }
        }

        // finally, for each actual type argument provided to baseClass, determine (if possible)
        // the raw class for that type argument.
        Type[] actualTypeArguments;
        if (type instanceof Class) {
            actualTypeArguments = ((Class) type).getTypeParameters();
        } else {
            actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
        }
        List&lt;Class&lt;?&gt;&gt; typeArgumentsAsClasses = new ArrayList&lt;Class&lt;?&gt;&gt;();
        // resolve types by chasing down type variables.
        for (Type baseType : actualTypeArguments) {
            while (resolvedTypes.containsKey(baseType)) {
                baseType = resolvedTypes.get(baseType);
            }
            typeArgumentsAsClasses.add(getClass(baseType));
        }
        return typeArgumentsAsClasses;
    }
  }
</code></pre>
