<p>Cant help with the data size question but to get YUV from Camera preview you have 2 choices. If running Android 2.2 or later your can use the <a href="http://developer.android.com/reference/android/graphics/YuvImage.html#YuvImage%28byte%5B%5D,%20int,%20int,%20int,%20int%5B%5D%29" rel="nofollow">android.graphics.YuvImage</a> class and just pass it's constructor your bytearray from PreviewCallback. </p>

<p>If you need to support pre 2.2 then you need to do something like:</p>

<pre><code>/**
 * Decodes YUV frame to a buffer which can be use to create a bitmap.
 * use this for OS &lt; FROYO which has a native YUV decoder
 * decode Y, U, and V values on the YUV 420 buffer described as YCbCr_422_SP by Android 
 * @param rgb the outgoing array of RGB bytes
 * @param fg the incoming frame bytes
 * @param width of source frame
 * @param height of source frame
 * @throws NullPointerException
 * @throws IllegalArgumentException
 */
private static void decodeYUV_impl(int[] rgb, byte[] fg, int width, int height) throws NullPointerException, IllegalArgumentException 
{
    int sz = width * height;
    if (rgb == null)
        throw new NullPointerException("buffer out is null");
    if (rgb.length &lt; sz)
        throw new IllegalArgumentException("buffer out size " + rgb.length
                + " &lt; minimum " + sz);
    if (fg == null)
        throw new NullPointerException("buffer 'fg' is null");

    if (fg.length &lt; sz)
        throw new IllegalArgumentException("buffer fg size " + fg.length
                + " &lt; minimum " + sz * 3 / 2);

    int i, j;
    int Y, Cr = 0, Cb = 0;
    for (j = 0; j &lt; height; j++) {
        int pixPtr = j * width;
        final int jDiv2 = j &gt;&gt; 1;
    for (i = 0; i &lt; width; i++) {
        Y = fg[pixPtr];
        if (Y &lt; 0)
            Y += 255;
        if ((i &amp; 0x1) != 1) {
            final int cOff = sz + jDiv2 * width + (i &gt;&gt; 1) * 2;
            Cb = fg[cOff];
            if (Cb &lt; 0)
                Cb += 127;
            else
                Cb -= 128;
            Cr = fg[cOff + 1];
            if (Cr &lt; 0)
                Cr += 127;
            else
                Cr -= 128;
        }
        int R = Y + Cr + (Cr &gt;&gt; 2) + (Cr &gt;&gt; 3) + (Cr &gt;&gt; 5);
        if (R &lt; 0)
            R = 0;
        else if (R &gt; 255)
            R = 255;
        int G = Y - (Cb &gt;&gt; 2) + (Cb &gt;&gt; 4) + (Cb &gt;&gt; 5) - (Cr &gt;&gt; 1)
                + (Cr &gt;&gt; 3) + (Cr &gt;&gt; 4) + (Cr &gt;&gt; 5);
        if (G &lt; 0)
            G = 0;
        else if (G &gt; 255)
            G = 255;
        int B = Y + Cb + (Cb &gt;&gt; 1) + (Cb &gt;&gt; 2) + (Cb &gt;&gt; 6);
        if (B &lt; 0)
            B = 0;
        else if (B &gt; 255)
            B = 255;
        rgb[pixPtr++] = (0xff000000 + (B &lt;&lt; 16) + (G &lt;&lt; 8) + R);
    }
    }

}
</code></pre>
