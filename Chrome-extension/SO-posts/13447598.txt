<p>Check the <code>HashSet</code> code within the JDK.
When an element is added and is a duplicate, the old value is replaced. 
Folk think that the new element is discarded, it's wrong. 
So, you need no additional code in your case.</p>

<p><strong>UPDATED---------------------</strong></p>

<p>I re-read the code in JDK, and admit a mistake that I've made. </p>

<p>When <code>put</code> is made, the VALUE is replaced not the KEY from an <code>HashMap</code>.</p>

<p>Why am I talking about <code>Hashmap</code>??!! Because if you look at the <code>HashSet</code> code, you will notice:</p>

<pre><code>public boolean add(E e) {
    return map.put(e, PRESENT)==null;
}
</code></pre>

<p>So the <code>PRESENT</code> value is replaced with the new one as shown in this portion of code:</p>

<pre><code>      public V put(K key, V value) {
        if (key == null)
            return putForNullKey(value);
        int hash = hash(key);
        int i = indexFor(hash, table.length);
        for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) {
            Object k;
            if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
                V oldValue = e.value;
                e.value = value;
                e.recordAccess(this);
                return oldValue;
            }
        }

        modCount++;
        addEntry(hash, key, value, i);
        return null;
    }
</code></pre>

<p>But I agree, the <code>key</code> isn't replaced, and since the <code>key</code>s represent the <code>HashSet's</code> values, this one is said to be "untouched".</p>
