<p>First thing to do is, as nsfyn55 in his/her comment, to use a browser to inspect your headers. There are web sites that check the User-Agent HTTP Header before returning the response. Second thing to do, is that when working with HTTPS you need to initialize the secure layer properly. Check this class:</p>

<pre><code>public class SSLConfiguration {

    private static boolean isSslInitialized = false;
    private static final String PROTOCOL = "SSL";
    public static boolean ACCEPT_ALL_CERTS = true;

    public static void initializeSSLConnection() {
        if (!isSslInitialized) {
            if (ACCEPT_ALL_CERTS) {
                initInsecure();
            } else {
                initSsl();
            }
        }
    }

    private static void initInsecure() {
        TrustManager[] trustAllCerts = new TrustManager[]{
            new X509TrustManager() {

                @Override
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                @Override
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }

                @Override
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
            }
        };

        // Install the all-trusting trust manager
        try {
            SSLContext sc = SSLContext.getInstance(PROTOCOL);
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        } catch (Exception e) {
        }
        HttpsURLConnection.setDefaultHostnameVerifier(
                new HostnameVerifier() {

                    @Override
                    public boolean verify(String string, SSLSession ssls) {
                        return true;
                    }
                });
        isSslInitialized = true;
    }

    private static void initSsl() {
        SSLContext sc = null;
        try {
            sc = SSLContext.getInstance(PROTOCOL);
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
        try {
            sc.init(null, null, new SecureRandom());
        } catch (KeyManagementException ex) {
            throw new RuntimeException(ex);
        }
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        HostnameVerifier hv = new HostnameVerifier() {

            @Override
            public boolean verify(String urlHostName, SSLSession session) {
                /* This is to avoid spoofing */
                return (urlHostName.equals(session.getPeerHost()));
            }
        };

        HttpsURLConnection.setDefaultHostnameVerifier(hv);
        isSslInitialized = true;
    }
}
</code></pre>

<p>It is highly possible that the connection will fail - especially if the web site does not bear proper certificates. In your code, inside the constructor of your class, insert the following piece of code:</p>

<pre><code>SSLConfiguration.initializeSSLConnection();
</code></pre>

<p>Some more things to consider - after <code>openConnection</code> it is recommended you added the following:</p>

<pre><code>con.setRequestMethod(METHOD);
con.setDoInput(true);
con.setDoOutput(true);
con.setUseCaches(false);
</code></pre>

<p>I incline to believe however that since you get a response from the remote server that it is a more a matter of specifying proper Headers and in particular <code>User-Agent</code> and <code>Accept</code>. If the above doesn't help you solve your problem, print out the stacktrace of your error and read the error stream (from the remote) to get more meaningful error message. If you work with Firefox, <a href="https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/" rel="nofollow">Live HTTP Headers</a> is a pretty handy solution. Also <a href="http://curl.haxx.se/" rel="nofollow">cURL</a> is the utmost command line tool when working with HTTP requests.</p>
