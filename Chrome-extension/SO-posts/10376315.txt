<p>Your adapter should implement <code>Filterable</code>. Replace the <code>myadapter</code> class with the following one:</p>

<pre><code>public class myadapter extends ArrayAdapter&lt;ModelClass&gt; implements Filterable
{

    //private final List&lt;String&gt; contactNumbers;
    //private final String[] contactDetails;
    private ModelClass[] contactDetails;
    private ModelClass[] original;
    private final Activity AdapterContext;
    private Filter filter;
    private Object lock = new Object();


    public myadapter(Context context, int textViewResourceId,ModelClass[] objects) 
    {
        super(context, textViewResourceId, objects);
        // TODO Auto-generated constructor stub
        contactDetails = original = objects;
        AdapterContext = (Activity) context;
    }

    static class ViewHolder {
        protected TextView ContactNumbers;
        protected ImageView ContactImage;
    }

    public View getView(int position, View convertView, ViewGroup parent)
    {
        View view = null;
        if(convertView == null)
        {
            LayoutInflater inflator = AdapterContext.getLayoutInflater();
            view = inflator.inflate(R.layout.item, null);

            final ViewHolder holder = new ViewHolder();
            holder.ContactImage = (ImageView) view.findViewById(R.id.image);
            holder.ContactNumbers = (TextView) view.findViewById(R.id.text);    
            view.setTag(holder);
        }
        else
        {
            view = convertView;
        }

        ViewHolder holder = (ViewHolder) view.getTag();
        holder.ContactNumbers.setText(contactDetails[position].getServiceName());
        holder.ContactImage.setImageResource(contactDetails[position].getServiceImage());
        view.setTag(holder);
        return view;

    }

    @Override
    public Filter getFilter() {
    // TODO Auto-generated method stub
    if (filter == null) {
        filter = new MyFilter();
    }
    return filter;
    }

    private class MyFilter extends Filter {

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
        // TODO Auto-generated method stub
        String query = constraint.toString().toLowerCase();
        FilterResults results = new FilterResults();
        ModelClass[] temp;
        synchronized (lock) {
                temp = Arrays.copyOf(contactDetails, contactDetails.length);
        }
        if (query == null || query.length() == 0) {
            synchronized (lock) {
            results.values = original;
                results.count = original.length;
            }
        } else {
            ModelClass[] filtered = new ModelClass[original.length];
            int size = 0;
            for (int i = 0; i &lt; temp.length; i++) {
            ModelClass content = temp[i];
            if(content.getServiceName().equalsIgnoreCase(query)) {
                filtered[size++] = content;
            }
        }
        filtered = Arrays.copyOf(filtered, size);
        results.values = filtered;
        results.count = filtered.length;
        }
        return results;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void publishResults(CharSequence constraint,
            FilterResults results) {
        // TODO Auto-generated method stub
        contactDetails = (ModelClass[]) results.values;
        notifyDataSetChanged();
    }

    }
}
</code></pre>

<p>I haven't tested it. But I hope that it will work.</p>
