<p>Test included! ;)</p>

<pre><code>    class Entry {
     final int number;
     final String name;
     public Entry(int number, String name) {
      this.number = number;
      this.name = name;
     }
     @Override
     public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result + ((name == null) ? 0 : name.hashCode());
      result = prime * result + number;
      return result;
     }
     @Override
     public String toString() {
      return "Entry [name=" + name + ", number=" + number + "]";
     }
     @Override
     public boolean equals(Object obj) {
      if (this == obj)
       return true;
      if (obj == null)
       return false;
      if (getClass() != obj.getClass())
       return false;
      Entry other = (Entry) obj;
      if (name == null) {
       if (other.name != null)
        return false;
      } else if (!name.equals(other.name))
       return false;
      if (number != other.number)
       return false;
      return true;
     }
    }

    class ElementsSplitter {

     public List&lt;Entry&gt; split(String elements) {
      List&lt;Entry&gt; entries = new ArrayList();
      Pattern p = Pattern.compile("\\[(\\d+),\\s*(\\w+),\\]");
      Matcher m = p.matcher(elements);
      while (m.find()) {
       entries.add(new Entry(Integer.parseInt(m.group(1)), m.group(2)));
      }
      return entries;
     }

    }

    @Test
    public void testElementsSplitter() throws Exception {
     String elementsString = "[11, john,][23, Adam,][88, Angie,]";
     ElementsSplitter eSplitter = new ElementsSplitter();
     List&lt;Entry&gt; actual = eSplitter.split(elementsString);
     List&lt;Entry&gt; expected = Arrays.asList(
       new Entry(11, "john"),
       new Entry(23, "Adam"),
       new Entry(88, "Angie"));
     assertEquals(3, actual.size());
     assertEquals(expected, actual);
    }
</code></pre>
