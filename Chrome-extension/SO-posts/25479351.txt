<p>There are few thing u need to make sure :</p>

<ul>
<li>plz use arraylist instead of static string[]</li>
<li>use View.Visible or invisible instead of Imagview.Visible and
invisible while comparing visiblity here is code that works :</li>
</ul>

<p><strong>Adapter</strong></p>

<pre><code>public class ListAdapter extends BaseAdapter implements Filterable {

    private ArrayList&lt;String&gt; originalData = null;
    private ArrayList&lt;String&gt; filteredData = null;
    private LayoutInflater mInflater;
    private Context context;

    private ItemFilter mFilter = new ItemFilter();

    public ListAdapter(Context context, ArrayList&lt;String&gt; data) {
        this.filteredData = new ArrayList&lt;&gt;(data);
        this.originalData = new ArrayList&lt;&gt;(data);
        this.context = context;
        mInflater = LayoutInflater.from(context);
    }

    public int getCount() {
        return filteredData.size();
    }

    public Object getItem(int position) {
        return filteredData.get(position);
    }

    public long getItemId(int position) {
        return position;
    }

    public View getView(final int position, View convertView, ViewGroup parent) {

        ViewHolder holder = new ViewHolder();

        if (convertView == null) {
            convertView = mInflater.inflate(R.layout.list_item, null);

            holder = new ViewHolder();
            holder.image = (ImageView) convertView.findViewById(R.id.image);
            // holder.image.setVisibility(View.INVISIBLE);

            holder.text = (TextView) convertView.findViewById(R.id.text);

            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        // holder.image.setTag(position);
        convertView.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                if (v.findViewById(R.id.image).getVisibility() == View.VISIBLE) {
                    v.findViewById(R.id.image).setVisibility(View.INVISIBLE);
                } else {
                    v.findViewById(R.id.image).setVisibility(View.VISIBLE);
                }

            }
        });
        if (filteredData.get(position).contains("font"))
            holder.text.setText(Html.fromHtml(filteredData.get(position)));
        else
            holder.text.setText(filteredData.get(position));
        return convertView;
    }

    static class ViewHolder {
        ImageView image;
        TextView text;
    }

    @Override
    public Filter getFilter() {

        return mFilter;
    }

    private class ItemFilter extends Filter {

        @Override
        protected FilterResults performFiltering(CharSequence constraint) {

            String filterString = constraint.toString().toLowerCase();

            FilterResults results = new FilterResults();

            final ArrayList&lt;String&gt; list = originalData;

            int count = list.size();
            final ArrayList&lt;String&gt; nlist = new ArrayList&lt;String&gt;(count);

            String filterableString;

            for (int i = 0; i &lt; count; i++) {
                filterableString = list.get(i);
                if (filterableString.toLowerCase().contains(filterString)) {
                    filterableString = filterableString.replaceAll(
                            filterString, "&lt;font color='red'&gt;" + filterString
                                    + "&lt;/font&gt;");
                    nlist.add(filterableString);
                }
            }

            results.values = nlist;
            results.count = nlist.size();

            return results;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint,
                FilterResults results) {
            filteredData = (ArrayList&lt;String&gt;) results.values;
            notifyDataSetChanged();
        }

    }
}
</code></pre>

<p><strong>Activity</strong></p>

<pre><code>public class MyActivity extends Activity {

    private ListView listView;
    private ListAdapter adapter;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        listView = (ListView) findViewById(R.id.listView);

        ArrayList&lt;String&gt; LIST_ITEM = new ArrayList&lt;String&gt;();
        LIST_ITEM.add("Item 1");
        LIST_ITEM.add("Item 2");
        LIST_ITEM.add("Item 3");
        LIST_ITEM.add("Item 4");
        LIST_ITEM.add("Item 5");
        LIST_ITEM.add("Item 6");
        LIST_ITEM.add("Item 7");
        LIST_ITEM.add("Item 8");
        LIST_ITEM.add("Item 9");
        LIST_ITEM.add("Item 10");

        listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        adapter = new ListAdapter(MyActivity.this, LIST_ITEM);
        listView.setAdapter(adapter);

    }
}
</code></pre>

<p><a href="https://www.dropbox.com/s/hbyctmcv469xrh0/Demo.tar.gz?dl=0" rel="nofollow">COMPLETE SOURCE CODE</a></p>

<p>EDIT
<a href="https://www.dropbox.com/s/973elnf9l331fi6/CheckBoxProblem.rar?dl=0" rel="nofollow">ALTERNATIVE CODE.</a></p>
