<p>The problem with your code is that even if the root node is outside the interval, its children needn't be, yet you remove the entire subtree regardless.</p>

<p>The code you found adresses this by first trimming the subtrees, and then looking at the root node. If it is left of <code>min</code>, both the root node and its left subtree must be removed, and the right subtree (which has already been trimmed) is what remains. Analogously, if the root is right of <code>max</code>, so is the right subtree, and the (already trimmed) left subtree is what needs to remain. This will visit the entire tree, and is therefore not very efficient.</p>

<p>A straightforward improvement would only visit the subtrees we intend to use:</p>

<pre><code>private IntTreeNode trim (IntTreeNode root, int min, int max) {
    if (root == null) {
        return root;
    }
    if(root.data &lt; max &amp;&amp; root.data&gt; min) {
        root.left = trim(root.left, min, max);
        root.right = trim (root.right, min, max);
        return root;
    }else if (root.data &lt; min) {
        return trim (root.right, min, max);
    }else if (node.data &gt; max) {
        return trim(root.left, min, max);
    }
}
</code></pre>

<p>However, this still isn't optimal, because it revisits all nodes in [min, max].</p>

<p>Probably the best approach is to do the trimming in two steps: First trim all the nodes &lt; min, then all the nodes > max:</p>

<pre><code>IntTreeNode trimLeft(IntTreeNode root, int min) {
    if (root == null {
        return null;
    } else if (root.data &lt; min) {
        return trimLeft(root.right, min);
    } else {
        root.left = trimLeft(root.left, min);
        return root;
    }
}
</code></pre>

<p>This approach has the advantage that we only visit the nodes on the path to <code>min</code> and <code>max</code>. If the search tree is balanced, this will be O(log n).</p>

<p>Irrespective of the approach you choose, you should correctly define what happens in the edge cases <code>root.data == min</code> and <code>root.data == max</code> (both your original code and the code you found do this wrong).</p>
