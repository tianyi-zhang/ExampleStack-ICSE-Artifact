<p>Method 1:</p>

<pre><code>arr1.retainAll(arr2)
</code></pre>

<p>Method 2:</p>

<pre><code>    List&lt;String&gt; arr1;
    List&lt;String&gt; arr2 ;

    for(String s: arr2){
        if(arr1.contains(s))
            arr1.remove(s);
    }
</code></pre>

<p>I personally feel that 1 is better being more expressive and performance efficient.  If arr1 is not equal to arr2, JDK uses <code>System.arraycopy()</code> to copy complete <code>arr2</code> to <code>arr1</code> rather than removing individual elements. System.arraycopy is implemented natively and is very fast. </p>

<p>Following is reference to JDK code doing this. </p>

<pre><code>    private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) {
    final Object[] elementData = this.elementData;
    int r = 0, w = 0;
    boolean modified = false;
    try {
        for (; r &lt; size; r++)
            if (c.contains(elementData[r]) == complement)
                elementData[w++] = elementData[r];
    } finally {
        // Preserve behavioral compatibility with AbstractCollection,
        // even if c.contains() throws.
        if (r != size) {
            System.arraycopy(elementData, r,
                             elementData, w,
                             size - r);
            w += size - r;
        }
        if (w != size) {
            for (int i = w; i &lt; size; i++)
                elementData[i] = null;
            modCount += size - w;
            size = w;
            modified = true;
        }
    }
    return modified;
}
</code></pre>

<p>If only very few elements would be different, then method 2 would have been better. </p>
