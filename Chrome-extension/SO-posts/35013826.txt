<p>I tried using the above ImageLoader, but couldn't seem to override the <code>makeImageRequest</code> method.</p>

<p>When looking at the Volley implementation I couldn't see the same method signature, so I used the same approach by @random - here's my <code>CustomImageLoader</code>.</p>

<pre><code>public class CustomImageLoader extends ImageLoader {

private Context mContext;

/**
 * Constructs a new ImageLoader.
 *
 * @param queue      The RequestQueue to use for making image requests.
 * @param imageCache The cache to use as an L1 cache.
 */
public CustomImageLoader(Context aContext, RequestQueue queue, ImageCache imageCache) {
    super(queue, imageCache);
    mContext = aContext;
}


@Override
protected Request&lt;Bitmap&gt; makeImageRequest(String requestUrl, int maxWidth, int maxHeight,
                                           ImageView.ScaleType scaleType, final String cacheKey,
                                           final ImageRequest.Transformation transformation) {

    return new ImageRequest(requestUrl, new Response.Listener&lt;Bitmap&gt;() {
        @Override
        public void onResponse(Bitmap response) {
            onGetImageSuccess(cacheKey, response);
        }
    }, maxWidth, maxHeight, scaleType, Bitmap.Config.RGB_565, transformation, new Response.ErrorListener() {
        @Override
        public void onErrorResponse(VolleyError error) {
            onGetImageError(cacheKey, error);
        }
    }) {
        @Override
        public Map&lt;String, String&gt; getHeaders() throws AuthFailureError {
            return getHeaders(mContext); //*YOUR* method for getting headers

        }
    };

}
  }
</code></pre>
