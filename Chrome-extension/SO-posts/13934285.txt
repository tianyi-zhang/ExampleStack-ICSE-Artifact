<p>You can use XPath for that with the expression query "//*[@base64]".</p>

<pre><code>try {
            DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
            builderFactory.setNamespaceAware(true);
            DocumentBuilder builder = builderFactory.newDocumentBuilder();
            Document document = builder.parse(new File("your_xml.xml"));

            XPath xpath = XPathFactory.newInstance().newXPath();
            String expression = "//*[@base64]";

            NodeList nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);
            for (int i = 0; i &lt; nodes.getLength(); i++) {
                Element element = (Element) nodes.item(i);
                String base64 = element.getAttribute("base64");
                element.removeAttribute("base64");
            }

            String newXML = getStringFromNode(document);
        }
        catch (Exception e) {

        }
</code></pre>

<p>getStringFromNode method</p>

<pre><code>public static String getStringFromNode(Node root) {

        StringBuilder result = new StringBuilder();

        if (root.getNodeType() == 3)
            result.append(root.getNodeValue());
        else { 
            if (root.getNodeType() != 9) {
                StringBuffer attrs = new StringBuffer();
                for (int k = 0; k &lt; root.getAttributes().getLength(); ++k) {
                    attrs.append(" ").append(
                            root.getAttributes().item(k).getNodeName()).append(
                            "=\"").append(
                            TextUtils.htmlEncode(root.getAttributes().item(k).getNodeValue()))
                            .append("\" ");
                }
                result.append("&lt;").append(root.getNodeName()).append(" ")
                        .append(attrs).append("&gt;");
            } else {
                result.append("&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;");
            }

            NodeList nodes = root.getChildNodes();
            for (int i = 0, j = nodes.getLength(); i &lt; j; i++) {
                Node node = nodes.item(i);
                result.append(getStringFromNode(node));
            }

            if (root.getNodeType() != 9) {
                result.append("&lt;/").append(root.getNodeName()).append("&gt;");
            }
        }
        return result.toString();
    }
</code></pre>

<p><strong>EDITED</strong></p>

<p>The same could be used for parsing the String also. See my method below which will parse the String as DOM Document. Now you can use this Document as input for your XPath.</p>

<pre><code>public static Document ReadDocument(String xml)
    {
        Document doc = null;
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        try {
            dbf.setNamespaceAware(true);
            DocumentBuilder db = dbf.newDocumentBuilder();
            InputSource is = new InputSource();
            StringReader reader = new StringReader(xml);
            is.setCharacterStream(reader);
            doc = db.parse(is); 
        } catch (Exception e) {
            Log.e("Error", "Error while Parsing Document", e);
            return null;
        }
        return doc;
    }
</code></pre>
