<p>Try this:</p>

<pre><code>    private static void generateNotification(Context context, String message) {
    int icon = R.drawable.notification_icon;
    long when = System.currentTimeMillis();
    NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
    Notification notification = new Notification(icon, message, when);        
    String title = context.getString(R.string.app_name);
   // Log.i(TAG, "Received reg id:=&gt;"+regId);
    Intent notificationIntent = new Intent(context, Message.class);
    notificationIntent.putExtra("Message", message); 

    // set intent so it does not start a new activity
    notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
    PendingIntent intent = PendingIntent.getActivity(context, 0, notificationIntent, 0);
    notification.setLatestEventInfo(context, title, message, intent);
    notification.flags |= Notification.FLAG_AUTO_CANCEL;

    // Play default notification sound
    notification.defaults |= Notification.DEFAULT_SOUND;

    // Vibrate if vibrate is enabled
    notification.defaults |= Notification.DEFAULT_VIBRATE;
    notificationManager.notify(0, notification);      
    Constant.iMessageParsing = 0;

}
</code></pre>

<p>call this method in your onMessage(Context context, Intent intent) method of GCMIntentService class.</p>

<h1>Try this code::</h1>

<pre><code>PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
boolean isScreenOn = pm.isScreenOn();
Log.e("screen on.................................", ""+isScreenOn);

if(isScreenOn==false)       
   {
     WakeLock wl = pm.newWakeLock(PowerManager.FULL_WAKE_LOCK |PowerManager.ACQUIRE_CAUSES_WAKEUP |PowerManager.ON_AFTER_RELEASE,"MyLock");                            
     wl.acquire(10000);
     WakeLock wl_cpu = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,"MyCpuLock");
     wl_cpu.acquire(10000);
   }
</code></pre>
