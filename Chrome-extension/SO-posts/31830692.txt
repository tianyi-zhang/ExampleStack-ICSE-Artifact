<p>Didn't found anything. So i programmed it by myself. It's not very sophisticated and slow for large files, but seems to work.</p>

<pre><code>import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;

import org.junit.Assert;

/**
 * Assertion for recursively testing directories.
 * 
 * @author andreas
 */
public class AssertFile {

private AssertFile() {
    throw new RuntimeException("This class should not be instantiated");
}

/**
 * Asserts that two directories are recursively equal. If they are not, an {@link AssertionError} is thrown with the
 * given message.&lt;br/&gt;
 * There will be a binary comparison of all files under expected with all files under actual. File attributes will
 * not be considered.&lt;br/&gt;
 * Missing or additional files are considered an error.&lt;br/&gt;
 * 
 * @param expected
 *            Path expected directory
 * @param actual
 *            Path actual directory
 */
public static final void assertPathEqualsRecursively(final Path expected, final Path actual) {
    Assert.assertNotNull(expected);
    Assert.assertNotNull(actual);
    final Path absoluteExpected = expected.toAbsolutePath();
    final Path absoluteActual = actual.toAbsolutePath();
    try {
        Files.walkFileTree(expected, new FileVisitor&lt;Path&gt;() {

            @Override
            public FileVisitResult preVisitDirectory(Path expectedDir, BasicFileAttributes attrs)
                    throws IOException {
                Path relativeExpectedDir = absoluteExpected.relativize(expectedDir.toAbsolutePath());
                Path actualDir = absoluteActual.resolve(relativeExpectedDir);

                if (!Files.exists(actualDir)) {
                    Assert.fail(String.format("Directory \'%s\' missing in target.", expectedDir.getFileName()));
                }

                Assert.assertEquals(String.format("Directory size of \'%s\' differ. ", relativeExpectedDir),
                        expectedDir.toFile().list().length, actualDir.toFile().list().length);

                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path expectedFile, BasicFileAttributes attrs) throws IOException {
                Path relativeExpectedFile = absoluteExpected.relativize(expectedFile.toAbsolutePath());
                Path actualFile = absoluteActual.resolve(relativeExpectedFile);

                if (!Files.exists(actualFile)) {
                    Assert.fail(String.format("File \'%s\' missing in target.", expectedFile.getFileName()));
                }
                Assert.assertEquals(String.format("File size of \'%s\' differ. ", relativeExpectedFile),
                        Files.size(expectedFile), Files.size(actualFile));
                Assert.assertArrayEquals(String.format("File content of \'%s\' differ. ", relativeExpectedFile),
                        Files.readAllBytes(expectedFile), Files.readAllBytes(actualFile));

                return FileVisitResult.CONTINUE;
            }

            @Override
            public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
                Assert.fail(exc.getMessage());
                return FileVisitResult.TERMINATE;
            }

            @Override
            public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
                return FileVisitResult.CONTINUE;
            }

        });
    } catch (IOException e) {
        Assert.fail(e.getMessage());
    }
}

}
</code></pre>
