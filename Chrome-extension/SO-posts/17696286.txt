<p>Try this code. I am using it to move ImageView around the screen, but i think it will fit for other types of view to.</p>

<pre><code>imView.setOnTouchListener(new OnTouchListener() {
                private static final String TAG = "Touch";
                // These matrices will be used to move and zoom image

                Matrix savedMatrix = new Matrix();
                PointF start = new PointF();
                public PointF mid = new PointF();

                // We can be in one of these 3 states
                public static final int NONE = 0;
                public static final int DRAG = 1;
                public static final int ZOOM = 2;
                public int mode = NONE;

                float oldDist;

                public boolean onTouch(View v, MotionEvent event) {

                    ImageView view = (ImageView) v;
                    view.setScaleType(ImageView.ScaleType.MATRIX);
                    switch (event.getAction() &amp; MotionEvent.ACTION_MASK) {
                    case MotionEvent.ACTION_DOWN:

                        savedMatrix.set(matrix);
                        start.set(event.getX(), event.getY());
                        Log.d(TAG, "mode=DRAG");
                        mode = DRAG;
                        break;

                    case MotionEvent.ACTION_POINTER_DOWN:

                        oldDist = spacing(event);
                        Log.d(TAG, "oldDist=" + oldDist);
                        if (oldDist &gt; 10f) {

                            savedMatrix.set(matrix);
                            midPoint(mid, event);
                            mode = ZOOM;
                            Log.d(TAG, "mode=ZOOM");
                        }
                        break;

                    case MotionEvent.ACTION_MOVE:

                        if (mode == DRAG) {

                            matrix.set(savedMatrix);
                            matrix.postTranslate(event.getX() - start.x,
                                    event.getY() - start.y);
                        } else if (mode == ZOOM) {

                            float newDist = spacing(event);
                            Log.d(TAG, "newDist=" + newDist);
                            if (newDist &gt; 10f) {

                                matrix.set(savedMatrix);
                                float scale = newDist / oldDist;
                                matrix.postScale(scale, scale, mid.x, mid.y);
                            }
                        }
                        break;

                    case MotionEvent.ACTION_UP:
                    case MotionEvent.ACTION_POINTER_UP:

                        mode = NONE;
                        Log.d(TAG, "mode=NONE");
                        break;
                    }

                    // Perform the transformation
                    Log.d("point",start.x +" "+start.y);
                    view.setImageMatrix(matrix);

                    return true; // indicate event was handled
                }

                private float spacing(MotionEvent event) {
                    float x = event.getX(0) - event.getX(1);
                    float y = event.getY(0) - event.getY(1);
                    return FloatMath.sqrt(x * x + y * y);
                }

                private void midPoint(PointF point, MotionEvent event) {

                    float x = event.getX(0) + event.getX(1);
                    float y = event.getY(0) + event.getY(1);
                    point.set(x / 2, y / 2);
                }

            });
</code></pre>

<p>for more general views</p>

<pre><code>public boolean onTouch(View view, MotionEvent motionEvent) {
    switch (motionEvent.getAction()) {
        case MotionEvent.ACTION_DOWN:
            float dx =  motionEvent.getX();
            float dy =  motionEvent.getY();
            break;

        case MotionEvent.ACTION_MOVE:
            float x =  motionEvent.getX();
            fload y =  motionEvent.getY();
            RelativeLayout.LayoutParams lp = (RelativeLayout.LayoutParams) view.getLayoutParams();
            float left = lp.leftMargin + (x - dx);
            float top = lp.topMargin + (y - dy);
            lp.leftMargin = (int)left;
            lp.topMargin = (int)top;
            view.setLayoutParams(lp);
            break;
    }
    return true;
}
</code></pre>
