<p>Here is my workaround code so the bug is transparent to the user.<br>
Define the <a href="http://developer.android.com/reference/android/webkit/WebViewClient.html" rel="nofollow">WebViewClient</a> for the browser, and include something like the following for onReceivedError:</p>

<pre><code>        @Override
    public void onReceivedError(WebView view, int errorCode, String description, String failingUrl)
    {
        if (failingUrl.contains("#")) {
            Log.v("LOG", "failing url:"+ failingUrl);
            final int sdkVersion = Integer.parseInt(Build.VERSION.SDK);
            if (sdkVersion &gt; Build.VERSION_CODES.GINGERBREAD) {
                String[] temp;
                temp = failingUrl.split("#");
                view.loadUrl(temp[0]); // load page without internal link

                try {
                    Thread.sleep(400);
                } catch (InterruptedException e) {

                    e.printStackTrace();
                }
            }

            view.loadUrl(failingUrl);  // try again
        } else {
             view.loadUrl("file:///android_asset/tableofcontents.html");
        }
    }
    });
</code></pre>

<p>This tricks the webview to first load the page without the #link, then sleep for .4 of a second, and then load the full URL again.  I have chosen to do this trick for tablets only by sdkVersion.  If there is any other error I load another page, the tableofcontents.html.  This works to fix the problem on my Galaxy Tab.</p>
