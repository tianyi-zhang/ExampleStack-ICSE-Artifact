<p>I'm working with Universal image loader for a long time. So, I prefer to have it's settings in a class then my application is able to access it simply.</p>

<p>This is setting class of Universal image loader. I have a utility package and this class is under this package. You are able to make corners of image curve by commenting out of lines in onLoadingComplete().</p>

<pre><code>public class ImageDownloader {

    private static final  String TAG = "ImageDownloader";
    public static final String DIRECTORY_NAME = "YOUR_DIRECTORY_NAME";

    private static ImageDownloader instance = null;
    private ImageLoader imageLoader;

    protected ImageDownloader(Context context) {
        // Exists only to defeat instantiation.
        configImageDownloader(context);
    }

    public static ImageDownloader getInstance(Context context) {
        if(instance == null) {
            instance = new ImageDownloader(context);
        }
        return instance;
    }

    /**
     * This constructor will configure loader object in order to display image.
     * @param context
     */
    private void configImageDownloader(Context context) {

        File cacheDir = StorageUtils.getOwnCacheDirectory(context, DIRECTORY_NAME + "/Cache");

        // Get singleton instance of ImageLoader
        imageLoader = ImageLoader.getInstance();

        // Create configuration for ImageLoader (all options are optional)
        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context).denyCacheImageMultipleSizesInMemory()
                .memoryCache(new UsingFreqLimitedMemoryCache(4 * 1024 * 1024))
                .discCache(new UnlimitedDiscCache(cacheDir))
                .discCacheFileNameGenerator(new HashCodeFileNameGenerator())
                .defaultDisplayImageOptions(
                        new DisplayImageOptions.Builder()
                                .showStubImage(R.drawable.ic_default_logo)
                                .resetViewBeforeLoading()
                                .cacheInMemory()
                                .cacheOnDisc()
                                .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2)
                                .build())
                .tasksProcessingOrder(QueueProcessingType.FIFO)
                .build();

        // Initialize ImageLoader with created configuration.
        imageLoader.init(config);
    }


    public void displayImage(final ImageView imageView, String imageURI) {
        if(imageView == null  ||  imageURI == null) {
            Log.e(TAG, "Either of image view or image uri is null");
            return;
        }

        // Load and display image
        imageLoader.displayImage(imageURI, imageView, new ImageLoadingListener() {

            @Override
            public void onLoadingStarted(String imageUri, View view) {}

            @Override
            public void onLoadingFailed(String imageUri, View view, FailReason failReason) {}

            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
//                Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
//                imageView.setImageBitmap(getRoundedCornerBitmap(bitmap, 30));
            }

            @Override
            public void onLoadingCancelled(String imageUri, View view) {}
        });
    }

    public static Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {
        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(output);

        final int color = 0xff424242;
        final Paint paint = new Paint();
        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        final RectF rectF = new RectF(rect);
        final float roundPx = pixels;

        paint.setAntiAlias(true);
        canvas.drawARGB(0, 0, 0, 0);
        paint.setColor(color);
        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);

        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
        canvas.drawBitmap(bitmap, rect, rect, paint);

        return output;
    }
}
</code></pre>

<p>In your adapter class, first you need move all definitions into <code>if (view == null) {...}</code>method. My sample adapter which is like this. You can ignore my listener which is because of a button that I have in my each row.</p>

<pre><code>public class MyCrowdAdapter extends BaseAdapter {

    public interface OnCrowdRemoveUserListener {
        public void OnRemoveUserClicked(User user);
    }

    private final String TAG = "*** MyCrowdAdapter ***";

    private Context context;
    private OnCrowdRemoveUserListener listener;
    private LayoutInflater myInflater;
    private ImageDownloader imageDownloader;
    private List&lt;User&gt; userList;

    public MyCrowdAdapter(Context context) {
        this.context = context;
        myInflater = LayoutInflater.from(context);

        imageDownloader = ImageDownloader.getInstance(context);
    }

    public void setData(List&lt;User&gt; userList) {
        this.userList = userList;

        Log.i(TAG, "List passed to the adapter.");
    }

    @Override
    public int getCount() {
        try {
            return userList.size();
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        ViewHolder holder;

        if (convertView == null) {
            convertView = myInflater.inflate(R.layout.list_my_crowd_row, null);
            holder = new ViewHolder();

            Typeface font = Typeface.createFromAsset(context.getAssets(), "fonts/ITCAvantGardeStd-Demi.ttf");
            holder.tvUserName = (TextView) convertView.findViewById(R.id.tvUserName);
            holder.tvUserName.setTypeface(font);
            holder.ivPicture = (ImageView) convertView.findViewById(R.id.ivPicture);
            holder.btnRemove = (Button) convertView.findViewById(R.id.btnRemove);
            holder.btnRemove.setFocusable(false);
            holder.btnRemove.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Integer pos = (Integer)v.getTag();
                    Log.i(TAG, "Item: " + pos);
                    listener.OnRemoveUserClicked(userList.get(pos));
                }
            });

            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }

        holder.btnRemove.setTag(position);
        holder.tvUserName.setText(userList.get(position).getFirstName());
        imageDownloader.displayImage(holder.ivPicture, userList.get(position).getProfilePictureUrl());

        return convertView;
    }

    public void setOnRemoveClickedListener(OnCrowdRemoveUserListener listener) {
        this.listener = listener;
    }

    static class ViewHolder {
        TextView tvUserName;
        ImageView ivPicture;
        Button btnRemove;
    }
}
</code></pre>

<p>One suggestion, instead of validation like this:
if (holder.tvTitle != null &amp;&amp; null != objBean.getTitle()
            &amp;&amp; objBean.getTitle().trim().length() > 0) {...}
simply use <a href="http://developer.android.com/reference/android/text/TextUtils.html#isEmpty%28java.lang.CharSequence%29" rel="nofollow">TextUtils</a> which is static method, like this:
if(!TextUtils.isEmpty(objBean.getTitle);</p>

<p>===========</p>

<p><strong>Update</strong></p>

<p>===========</p>

<p>About your question regard displaying progressbar on top of image:
It's simple and complex :) there are two ways, 
1st way is based on your code:
1-define an interface inside ImageDownloader class like my interface inside adapter. should be something like this:</p>

<pre><code>public interface OnImageDownloaderListener {
    public void OnDownloadStarted();
    public void OnDownloadFinished();
}
</code></pre>

<p>2- Declare it in decleration part</p>

<pre><code>OnImageDownloaderListener listener;
</code></pre>

<p>3- Change thosr two listeners like this</p>

<pre><code>@Override
            public void onLoadingStarted(String imageUri, View view) {
        listener.OnDownloadStarted();
}

            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
//                Bitmap bitmap = ((BitmapDrawable) imageView.getDrawable()).getBitmap();
//                imageView.setImageBitmap(getRoundedCornerBitmap(bitmap, 30));
        listener.OnDownloadFinished();
            }
</code></pre>

<p>4- Add this method to ImageDownloader class</p>

<pre><code>public void setOnImageDownloaderListener(OnImageDownloaderListener listener) {
        this.listener = listener;
    }
</code></pre>

<p>5- In your adapter and below this line:</p>

<pre><code>imageDownloader = ImageDownloader.getInstance(context); 
</code></pre>

<p>implement those two methodes like this:</p>

<pre><code>imageDownloader.setOnImageDownloaderListener(new ImageDownloader.OnImageDownloaderListener{
    @Override
    public void OnDownloadStarted() {
        pbar.start();
    }

    @Override
    public void OnDownloadFinished(){
        pbar.stop();
    }
}
);
</code></pre>

<p>It should help you. However, if I were you I does second approach which is creating new component. The component includes two views an image view and progressbar on top (same to what you have currently). Then add all above method inside that component class. So, easily through your app you in whatever activity you want you can add your view and just pass URL then the component is responsible to display progressbar and stop it. Based on your code if you have 10 similr activities you need to copy/paste above code.</p>

<p>Hope it helps you :)</p>
