<p>Here is the method from the LibGDX Intersector class that could be modified:</p>

<pre><code>public static boolean intersectLinePolygon (Vector2 p1, Vector2 p2, Polygon polygon) {
     float[] vertices = polygon.getTransformedVertices();
     float x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;
     int n = vertices.length;
     float x3 = vertices[n - 2], y3 = vertices[n - 1];
     for (int i = 0; i &lt; n; i += 2) {
          float x4 = vertices[i], y4 = vertices[i + 1];
          float d = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
          if (d != 0) {
                float yd = y1 - y3;
                float xd = x1 - x3;
                float ua = ((x4 - x3) * yd - (y4 - y3) * xd) / d;
                if (ua &gt;= 0 &amp;&amp; ua &lt;= 1) {
                     return true;
                }
          }
          x3 = x4;
          y3 = y4;
     }
     return false;
}
</code></pre>

<p>What this method is actually doing is finding the intersection between the line segment from p1 to p2 with the edge of the polygon. (In particular, it is determining if there is any intersection between the given line <em>segments</em>, which will be important later.) In particular, the computations are being performed on the parametric equation of these two line segments; for example, the line <em>segment</em> from (x1,y1) to (x2,y2) has parametric equation </p>

<pre><code>L(t) = [ x2-x1, y2-y1 ] * t + [ x1, y1 ] 
</code></pre>

<p>where <code>t</code> ranges from 0 to 1. </p>

<p>The intersection of the the lines is calculated using Cramer's rule; the variable <code>d</code> above represents the determinant of the matrix appearing in the denominator of that formula. When <code>d</code> is nonzero, there is guaranteed to be an intersection between the lines, but we aren't done yet, because we are interested in the intersection of the line segments. The variable <code>ua</code> in the method yields the value of <code>t</code> in the parametric equation above when the intersection occurs; it must be between 0 and 1 for the intersection point to lie between the endpoints of the line segment. </p>

<p>Thus, the coordinates of the point of intersection can be calculated by evaluating <code>L(t)</code> when <code>t = ua</code>. To find the point of intersection, therefore, you could create your own version of this function that returns the value </p>

<p><code>Vector2( (x2-x1)*ua + x1, (y2-y1)*ua + y1)</code></p>

<p>Hope this helps!</p>
