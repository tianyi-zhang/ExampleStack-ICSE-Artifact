<p>it sounds like your problem is in your game loop... I use a thread to loop through my draw and update methods, as I never was able to get the invalidate() thing working...</p>

<p>so below is a class called mainthread, it is created in your surfaceview in this case the surfaceview is called DrawView...</p>

<pre><code>import android.graphics.Canvas;
import android.view.SurfaceHolder;

public class MainThread extends Thread {


// desired fps
private final static int    MAX_FPS = 75;   
// maximum number of frames to be skipped
private final static int    MAX_FRAME_SKIPS = 0;    
// the frame period
private final static int    FRAME_PERIOD = 1000 / MAX_FPS;  

// Surface holder that can access the physical surface
private SurfaceHolder surfaceHolder;
// The actual view that handles inputs
// and draws to the surface
private DrawView gamePanel;

// flag to hold game state 
public boolean running;
public void setRunning(boolean running) {
    this.running = running;
}

public MainThread(SurfaceHolder surfaceHolder, DrawView gamePanel) {
    super();
    this.surfaceHolder = surfaceHolder;
    this.gamePanel = gamePanel;
}

@Override
public void run() {
    Canvas canvas;

    long beginTime;     // the time when the cycle begun
    long timeDiff;      // the time it took for the cycle to execute
    int sleepTime;      // ms to sleep (&lt;0 if we're behind)
    int framesSkipped;  // number of frames being skipped 

    sleepTime = 0;

    while (running) {
        canvas = null;
        // try locking the canvas for exclusive pixel editing
        // in the surface
        try {
            canvas = this.surfaceHolder.lockCanvas();
            synchronized (surfaceHolder) {
                beginTime = System.currentTimeMillis();
                framesSkipped = 0;  // resetting the frames skipped
                // update game state 
                this.gamePanel.doUpdate();
                // render state to the screen
                // draws the canvas on the panel
                this.gamePanel.doDraw(canvas);              
                // calculate how long did the cycle take
                timeDiff = System.currentTimeMillis() - beginTime;
                // calculate sleep time
                sleepTime = (int)(FRAME_PERIOD - timeDiff);

                if (sleepTime &gt; 0) {
                    // if sleepTime &gt; 0 we're OK
                    try {
                        // send the thread to sleep for a short period
                        // very useful for battery saving
                        Thread.sleep(sleepTime);    
                    } catch (InterruptedException e) {}
                }

                while (sleepTime &lt; 0 &amp;&amp; framesSkipped &lt; MAX_FRAME_SKIPS) {
                    // we need to catch up
                    this.gamePanel.doUpdate(); // update without rendering
                    sleepTime += FRAME_PERIOD;  // add frame period to check if in next frame
                    framesSkipped++;
                }
            }
        } catch(ClassCastException cce) {

        }finally {
            // in case of an exception the surface is not left in 
            // an inconsistent state
            if (canvas != null) {
                surfaceHolder.unlockCanvasAndPost(canvas);
            }
        }   // end finally
    }
}

}
</code></pre>

<p>using this thread it will call your update and draw methods approprietly, for onTouch just override the surfaceview (DrawView)'s onTouch method to access it normally. in order to stop the thread for what ever reason just set running to false.</p>
