<h1>BackgroundTask.Java</h1>

<pre><code> package com.example.shikhu.newpractice;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;


public class BackgroundTask extends AsyncTask&lt;Void,Fruit,Void&gt; {

String json_string = "http://127.0.0.1:8081/fruitinfo/get_fruit_details.php";

Context ctx;
Activity activity;
RecyclerView recyclerView;
RecyclerView.Adapter adapter;
RecyclerView.LayoutManager layoutManager;

ArrayList&lt;Fruit&gt; arrayList = new ArrayList&lt;&gt;();
public  BackgroundTask(Context ctx)
{
    this.ctx=ctx;
    activity = (Activity)ctx;
}



@Override
protected void onPreExecute() {

    recyclerView = (RecyclerView)activity.findViewById(R.id.recyclerview);
    layoutManager = new LinearLayoutManager(ctx);
    recyclerView.setLayoutManager(layoutManager);
    recyclerView.setHasFixedSize(true);
    adapter = new RecyclerAdapter(arrayList);
    recyclerView.setAdapter(adapter);
}

@Override
protected Void doInBackground(Void... params) {


    try{
        URL url = new URL(json_string);
        HttpURLConnection httpURLConnection = (HttpURLConnection)url.openConnection();
        InputStream inputStream = httpURLConnection.getInputStream();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        StringBuilder stringBuilder = new StringBuilder();
        String line;

        while((line=bufferedReader.readLine())!=null)
        {
            stringBuilder.append(line + "\n");
        }

        httpURLConnection.disconnect();
        String json_string = stringBuilder.toString().trim();
        JSONObject jsonObject = new JSONObject(json_string);
        JSONArray jsonArray = jsonObject.getJSONArray("server_response");

        int count = 0;

        while (count&lt;jsonArray.length())
        {
            JSONObject JO = jsonArray.getJSONObject(count);
            count++;

            Fruit fruit = new Fruit(JO.getString("name"),JO.getInt("calorie"),JO.getDouble("fat"));
            publishProgress(fruit);
        }


        Log.d("JSON STRING",json_string);
    } catch (MalformedURLException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (JSONException e) {
        e.printStackTrace();
    }
    return null;
}

@Override
protected void onProgressUpdate(Fruit... values) {

    arrayList.add(values[0]);
    adapter.notifyDataSetChanged();
}

@Override
protected void onPostExecute(Void aVoid) {
    super.onPostExecute(aVoid);
}
 }
</code></pre>

<h1>RecyclerAdapter.java</h1>

<pre><code>  package com.example.shikhu.newpractice;

  import android.support.annotation.IdRes;
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
  import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TextView;

 import java.util.ArrayList;


 public class RecyclerAdapter extends    RecyclerView.Adapter&lt;RecyclerAdapter.RecyclerViewHolder&gt; {

private static final int TYPE_HEAD = 0;
private  static  final int TYPE_LIST = 1;

ArrayList&lt;Fruit&gt; arrayList = new ArrayList&lt;&gt;();

public RecyclerAdapter(ArrayList&lt;Fruit&gt; arrayList)
{
    this.arrayList =arrayList;
}

@Override
public RecyclerViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {

    if (viewType == TYPE_HEAD)
    {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.header_layout,parent,false);
        RecyclerViewHolder recyclerViewHolder = new RecyclerViewHolder(view,viewType);
        return recyclerViewHolder;
    }
    else if (viewType == TYPE_LIST)
    {
        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.row_layout,parent,false);
        RecyclerViewHolder recyclerViewHolder = new RecyclerViewHolder(view,viewType);
        return recyclerViewHolder;
    }
    return null;
}

@Override
public void onBindViewHolder(RecyclerViewHolder holder, int position) {

    if (holder.viewType == TYPE_LIST) {
        Fruit fruit = arrayList.get(position-1);
        holder.Name.setText(fruit.getName());
        holder.Calories.setText(Integer.toString(fruit.getCalories()));
        holder.Fat.setText(Double.toString(fruit.getFat()));
    }

}



@Override
public int getItemCount() {
    return arrayList.size()+1;
}

public static class RecyclerViewHolder extends RecyclerView.ViewHolder
{
    TextView Name,Calories,Fat;
    int viewType;
    public RecyclerViewHolder(View v,int viewType)
    {
        super(v);
        if (viewType == TYPE_LIST) {
            Name = (TextView) v.findViewById(R.id.name);
            Calories = (TextView) v.findViewById(R.id.calories);
            Fat = (TextView) v.findViewById(R.id.fat);
            this.viewType = TYPE_LIST;
        }else if (viewType == TYPE_HEAD)
        {
            this.viewType = TYPE_HEAD;
        }

    }

}
@Override
public int getItemViewType(int position) {
    if (position==0)
        return TYPE_HEAD;
    else
        return TYPE_LIST;
}

}
</code></pre>
