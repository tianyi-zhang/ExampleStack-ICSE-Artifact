<p>You can try this class. For me that works perfectly. I capture and save audio from mic into a file (ie. file.au) </p>

<p>First, copy all of it and create a new class in your project</p>

<p>`   </p>

<pre><code>  import javax.swing.*;
  import java.awt.*;
  import java.awt.event.*;
  import java.io.*;

  import javax.sound.sampled.*;

 // Class for capturing and saving into file, audio from mic




public class AudioCaptureAndSaveIntoFile {

boolean stopCapture = false;
ByteArrayOutputStream byteArrayOutputStream;
AudioFormat audioFormat;
TargetDataLine targetDataLine;
AudioInputStream audioInputStream;
SourceDataLine sourceDataLine;

FileOutputStream fout;
AudioFileFormat.Type fileType;

public AudioRecorder() {
}

// Captures audio input
// from mic.
// Saves input in
// a ByteArrayOutputStream.
public void captureAudio() {
    try {

        audioFormat = getAudioFormat();
        DataLine.Info dataLineInfo = new DataLine.Info(
                TargetDataLine.class, audioFormat);
        targetDataLine = (TargetDataLine) AudioSystem.getLine(dataLineInfo);
        targetDataLine.open(audioFormat);
        targetDataLine.start();

        // Thread to capture from mic
        // This thread will run till stopCapture variable
        // becomes true. This will happen when saveAudio()
        // method is called.
        Thread captureThread = new Thread(new CaptureThread());
        captureThread.start();
    } catch (Exception e) {
        System.out.println(e);
        System.exit(0);
    }
}

// Saves the data from
// ByteArrayOutputStream
// into a file
public void saveAudio(File filename) {
    stopCapture = true;
    try {

        byte audioData[] = byteArrayOutputStream.toByteArray();

        InputStream byteArrayInputStream = new ByteArrayInputStream(
                audioData);
        AudioFormat audioFormat = getAudioFormat();
        audioInputStream = new AudioInputStream(byteArrayInputStream,
                audioFormat, audioData.length / audioFormat.getFrameSize());
        DataLine.Info dataLineInfo = new DataLine.Info(
                SourceDataLine.class, audioFormat);
        sourceDataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo);
        sourceDataLine.open(audioFormat);
        sourceDataLine.start();

        // This thread will actually do the job
        Thread saveThread = new Thread(new SaveThread(filename));
        saveThread.start();
    } catch (Exception e) {
        System.out.println(e);
        System.exit(0);
    }
}

public AudioFormat getAudioFormat() {
    float sampleRate = 8000.0F;
    // You can try also 8000,11025,16000,22050,44100
    int sampleSizeInBits = 16;
    int channels = 1;
    boolean signed = true;
    boolean bigEndian = false;
    return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed,
            bigEndian);
}

class CaptureThread extends Thread {
    // temporary buffer
    byte tempBuffer[] = new byte[10000];

    public void run() {
        byteArrayOutputStream = new ByteArrayOutputStream();
        stopCapture = false;
        try {
            while (!stopCapture) {

                int cnt = targetDataLine.read(tempBuffer, 0,
                        tempBuffer.length);
                if (cnt &gt; 0) {

                    byteArrayOutputStream.write(tempBuffer, 0, cnt);

                }
            }
            byteArrayOutputStream.close();
        } catch (Exception e) {
            System.out.println(e);
            System.exit(0);
        }
    }
}

class SaveThread extends Thread {
    // Set a file from saving from ByteArrayOutputStream
    File fname;

    public SaveThread(File fname) {
        this.fname = fname;
    }

    //
    byte tempBuffer[] = new byte[10000];

    public void run() {
        try {
            int cnt;

            if (AudioSystem.isFileTypeSupported(AudioFileFormat.Type.AU,
                    audioInputStream)) {
                AudioSystem.write(audioInputStream,
                        AudioFileFormat.Type.AU, fname);
            }

        } catch (Exception e) {
            System.out.println(e);
            System.exit(0);
        }
    }
}

  }

  ` 
</code></pre>

<p>In your project use the above class, like this: </p>

<p>To capture audio from mic into a temporary ByteArrayOutput object, first :</p>

<p><code>audiorec = new AudioCaptureAndSaveIntoFile();
   audiorec.captureAudio();</code></p>

<p>And save into a file :</p>

<pre><code> audiorec.saveAudio(savefile); 
</code></pre>

<p>Note: You save file should end with ie. ".au" or ".wav"</p>
