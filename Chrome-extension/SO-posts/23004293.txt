<p>Download the latest UIL library from <a href="https://github.com/nostra13/Android-Universal-Image-Loader" rel="nofollow">here</a> and use below code:</p>

<pre><code>ImageLoader imageLoader = ImageLoader.getInstance();
imageLoader.init(ImageLoaderConfiguration.createDefault(context));
DisplayImageOptions options = new DisplayImageOptions.Builder()
            .showImageOnLoading(R.drawable.doctor_logo_big_transparent)
            .showImageForEmptyUri(R.drawable.doctor_logo_big_transparent)
            .showImageOnFail(R.drawable.doctor_logo_big_transparent)
            .cacheInMemory(true)
            .cacheOnDisc(true)
            .considerExifParams(true)
            .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
            .bitmapConfig(Bitmap.Config.ARGB_8888)
            .displayer(new RoundedBitmapDisplayer(125))
            .build();

final ProgressBar mSpnr = (ProgressBar) convertView.findViewById(R.id.xSpinnr);

                    imageLoader.displayImage(imgURL, yourImageView, options, new SimpleImageLoadingListener()
                    {
                        @Override
                        public void onLoadingStarted(String imageUri, View view)
                        {
                        }
                        @Override
                        public void onLoadingFailed(String imageUri, View view, FailReason failReason)
                        {
                            //mHolder.mSpnr.setVisibility(View.GONE);
                            String message = null;
                            switch (failReason.getType())
                            {
                                case IO_ERROR:
                                    message = "Input/Output error";
                                    break;
                                case DECODING_ERROR:
                                    message = "Image can't be decoded";
                                    break;
                                case NETWORK_DENIED:
                                    message = "Downloads are denied";
                                    break;
                                case OUT_OF_MEMORY:
                                    message = "Out Of Memory error";
                                    break;
                                case UNKNOWN:
                                    message = "Unknown error";
                                    break;
                            }
                            try
                            {
                                //Toast.makeText(getApplicationContext(), message, Toast.LENGTH_SHORT).show();
                                Log.w("TAG", ""+message);
                                mSpnr.setVisibility(View.GONE);
                            }
                            catch (Exception e)
                            {
                                e.printStackTrace();
                                mSpnr.setVisibility(View.GONE);
                            }
                        }
                        @Override
                        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage)
                        {
                            mSpnr.setVisibility(View.GONE);
                        }

                    });
</code></pre>

<p><strong>Along with this, you also need to provide fixed width and height to your imageView.</strong></p>

<pre><code>yourImageView.getLayoutParams().height = 150;
yourImageView.getLayoutParams().width = 150;
</code></pre>

<p>You may change the value of height and width of the imageView according to the size of image you need to display.</p>

<p><strong>EDIT</strong></p>

<p>If you do not need to display progress-bar over the imageView, you may use below code:</p>

<pre><code>private ImageLoadingListener animateFirstListener = new AnimateFirstDisplayListener();
ImageLoader imageLoader = ImageLoader.getInstance();
imageLoader.init(ImageLoaderConfiguration.createDefault(context));
DisplayImageOptions options = new DisplayImageOptions.Builder()
        .showImageOnLoading(R.drawable.doctor_logo_big_transparent)
        .showImageForEmptyUri(R.drawable.doctor_logo_big_transparent)
        .showImageOnFail(R.drawable.doctor_logo_big_transparent)
        .cacheInMemory(true)
        .cacheOnDisc(true)
        .considerExifParams(true)
        .imageScaleType(ImageScaleType.EXACTLY_STRETCHED)
        .bitmapConfig(Bitmap.Config.ARGB_8888)
        .displayer(new RoundedBitmapDisplayer(125))
        .build();
imageLoader.displayImage(imgUrl, yourImageView, options, animateFirstListener);

class AnimateFirstDisplayListener extends SimpleImageLoadingListener {

        List&lt;String&gt; displayedImages = Collections.synchronizedList(new LinkedList&lt;String&gt;());

        @Override
        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
            if (loadedImage != null) {
                ImageView imageView = (ImageView) view;
                boolean firstDisplay = !displayedImages.contains(imageUri);
                if (firstDisplay) {
                    FadeInBitmapDisplayer.animate(imageView, 500);
                    displayedImages.add(imageUri);
                }
            }
        }
    }
</code></pre>
