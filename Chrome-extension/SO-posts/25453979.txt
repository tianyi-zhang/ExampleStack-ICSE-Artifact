<p>I'll just share my code in case someone wants something like this:
<img src="http://i.stack.imgur.com/eflem.png" alt="enter image description here"></p>

<ul>
<li><p><strong>layout/menu/menu_actionbar.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    ...
    &lt;item android:id="@+id/menu_hotlist"
        android:actionLayout="@layout/action_bar_notifitcation_icon"
        android:showAsAction="always"
        android:icon="@drawable/ic_bell"
        android:title="@string/hotlist" /&gt;
    ...
&lt;/menu&gt;
</code></pre></li>
<li><p><strong>layout/action_bar_notifitcation_icon.xml</strong></p>

<p>Note <strong>style</strong> and <strong>android:clickable</strong> properties. these make the layout the size of a button and make the background gray when touched.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="fill_parent"
    android:orientation="vertical"
    android:gravity="center"
    android:layout_gravity="center"
    android:clickable="true"
    style="@android:style/Widget.ActionButton"&gt;

    &lt;ImageView
        android:id="@+id/hotlist_bell"
        android:src="@drawable/ic_bell"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:layout_margin="0dp"
        android:contentDescription="bell"
        /&gt;

    &lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@+id/hotlist_hot"
        android:layout_width="wrap_content"
        android:minWidth="17sp"
        android:textSize="12sp"
        android:textColor="#ffffffff"
        android:layout_height="wrap_content"
        android:gravity="center"
        android:text="@null"
        android:layout_alignTop="@id/hotlist_bell"
        android:layout_alignRight="@id/hotlist_bell"
        android:layout_marginRight="0dp"
        android:layout_marginTop="3dp"
        android:paddingBottom="1dp"
        android:paddingRight="4dp"
        android:paddingLeft="4dp"
        android:background="@drawable/rounded_square"/&gt;
&lt;/RelativeLayout&gt;
</code></pre></li>
<li><p><strong>drawable-xhdpi/ic_bell.png</strong></p>

<p>A 64x64 pixel image with 10 pixel wide paddings from all sides. You are supposed to have 8 pixel wide paddings, but I find most default items being slightly smaller than that. Of course, you'll want to use different sizes for different densities.</p></li>
<li><p><strong>drawable/rounded_square.xml</strong></p>

<p>Here, #ff222222 (color #222222 with alpha #ff (fully visible)) is the background color of my Action Bar.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;shape
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle"&gt;
    &lt;corners android:radius="2dp" /&gt;
    &lt;solid android:color="#ffff0000" /&gt;
    &lt;stroke android:color="#ff222222" android:width="2dp"/&gt;
&lt;/shape&gt;
</code></pre></li>
<li><p><strong>com/ubergeek42/WeechatAndroid/WeechatActivity.java</strong></p>

<p>Here we make it clickable and updatable! I created an abstract listener that provides Toast creation on onLongClick, the code was taken from from <a href="https://github.com/JakeWharton/ActionBarSherlock/blob/master/actionbarsherlock/src/com/actionbarsherlock/internal/view/menu/ActionMenuItemView.java#L249-L278">the sources of ActionBarSherlock</a>.</p>

<pre><code>private int hot_number = 0;
private TextView ui_hot = null;

@Override public boolean onCreateOptionsMenu(final Menu menu) {
    MenuInflater menuInflater = getSupportMenuInflater();
    menuInflater.inflate(R.menu.menu_actionbar, menu);
    final View menu_hotlist = menu.findItem(R.id.menu_hotlist).getActionView();
    ui_hot = (TextView) menu_hotlist.findViewById(R.id.hotlist_hot);
    updateHotCount(hot_number);
    new MyMenuItemStuffListener(menu_hotlist, "Show hot message") {
        @Override
        public void onClick(View v) {
            onHotlistSelected();
        }
    };
    return super.onCreateOptionsMenu(menu);
}

// call the updating code on the main thread,
// so we can call this asynchronously
public void updateHotCount(final int new_hot_number) {
    hot_number = new_hot_number;
    if (ui_hot == null) return;
    runOnUiThread(new Runnable() {
        @Override
        public void run() {
            if (new_hot_number == 0)
                ui_hot.setVisibility(View.INVISIBLE);
            else {
                ui_hot.setVisibility(View.VISIBLE);
                ui_hot.setText(Integer.toString(new_hot_number));
            }
        }
    });
}

static abstract class MyMenuItemStuffListener implements View.OnClickListener, View.OnLongClickListener {
    private String hint;
    private View view;

    MyMenuItemStuffListener(View view, String hint) {
        this.view = view;
        this.hint = hint;
        view.setOnClickListener(this);
        view.setOnLongClickListener(this);
    }

    @Override abstract public void onClick(View v);

    @Override public boolean onLongClick(View v) {
        final int[] screenPos = new int[2];
        final Rect displayFrame = new Rect();
        view.getLocationOnScreen(screenPos);
        view.getWindowVisibleDisplayFrame(displayFrame);
        final Context context = view.getContext();
        final int width = view.getWidth();
        final int height = view.getHeight();
        final int midy = screenPos[1] + height / 2;
        final int screenWidth = context.getResources().getDisplayMetrics().widthPixels;
        Toast cheatSheet = Toast.makeText(context, hint, Toast.LENGTH_SHORT);
        if (midy &lt; displayFrame.height()) {
            cheatSheet.setGravity(Gravity.TOP | Gravity.RIGHT,
                    screenWidth - screenPos[0] - width / 2, height);
        } else {
            cheatSheet.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, height);
        }
        cheatSheet.show();
        return true;
    }
}
</code></pre></li>
</ul>
