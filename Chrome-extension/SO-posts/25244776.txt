<p>The main idea that You don't need to have any additional variables in adapter / activity, because Android component already have one for lists with single choice. The following solution works fine in your case:</p>

<ul>
<li><p>Assume your layout (<strong>activity_main.xml</strong>):</p>

<pre><code>&lt;android.support.v4.widget.DrawerLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/drawer_layout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;
    &lt;!-- The main content view --&gt;
    &lt;FrameLayout
        android:id="@+id/content_frame"
        android:layout_width="match_parent"
        android:layout_height="match_parent" /&gt;
    &lt;!-- The navigation drawer --&gt;
    &lt;GridView android:id="@+id/list_slidermenu"
              android:layout_width="240dp"
              android:layout_height="match_parent"
              android:layout_gravity="start"
              android:choiceMode="singleChoice"
              android:divider="@android:color/transparent"
              android:dividerHeight="0dp"
              android:background="#111"/&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;
</code></pre>

<p>Please note <code>android:choiceMode="singleChoice"</code> - that property will let the list track selected item by itself.</p></li>
<li><p>Remove all color setting code from the activity. Instead, use setChecked() to let the list know which item is selected:</p>

<pre><code>public class MainActivity extends ActionBarActivity {

    private static final String TAG = "MainActivity";
    private DrawerLayout mDrawerLayout;
    private GridView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;

    // nav drawer title
    private CharSequence mDrawerTitle;

    // used to store app title
    private CharSequence mTitle;

    // slide menu items
    private String[] navMenuTitles;
    private TypedArray navMenuIcons;

    private ArrayList&lt;NavDrawerItem&gt; navDrawerItems;
    private NavDrawerListAdapter adapter;

    private TextView title;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTitle = mDrawerTitle = getTitle();

        // load slide menu items
        navMenuTitles = getResources().getStringArray(R.array.nav_drawer_items);

        // nav drawer icons from resources
        navMenuIcons = getResources()
                .obtainTypedArray(R.array.nav_drawer_icons);

        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerList = (GridView) findViewById(R.id.list_slidermenu);

        navDrawerItems = new ArrayList&lt;NavDrawerItem&gt;();

        // Recycle the typed array
        navMenuIcons.recycle();

        mDrawerList.setItemChecked(0, true); // NOTE: Set 0 item as checked!
        mDrawerList.setOnItemClickListener(new SlideMenuClickListener());

        // setting the nav drawer list adapter
        adapter = new NavDrawerListAdapter(getApplicationContext(), navDrawerItems);
        mDrawerList.setAdapter(adapter);

        // enabling action bar app icon and behaving it as toggle button
        getActionBar().setDisplayHomeAsUpEnabled(true);
        //getActionBar().setHomeButtonEnabled(true);

        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
                android.R.drawable.ic_input_delete, //nav menu toggle icon
                R.string.app_name, // nav drawer open - description for accessibility
                R.string.app_name // nav drawer close - description for accessibility
        ) {
            public void onDrawerClosed(View view) {
                getActionBar().setTitle(mTitle);
                // calling onPrepareOptionsMenu() to show action bar icons
                invalidateOptionsMenu();
            }

            public void onDrawerOpened(View drawerView) {
                getActionBar().setTitle(mDrawerTitle);
                // calling onPrepareOptionsMenu() to hide action bar icons
                invalidateOptionsMenu();
            }
        };
        mDrawerLayout.setDrawerListener(mDrawerToggle);

        if (savedInstanceState == null) {
            // on first time display view for first nav item
            displayView(0);
        }
    }

    /**
     * Slide menu item click listener
     * */
    private class SlideMenuClickListener implements ListView.OnItemClickListener {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position,
                                long id) {
            displayView(position);
            // NOTE: new item is checked now
            mDrawerList.setItemChecked(position, true);
        }
    }

    ...
}
</code></pre></li>
<li><p>In the adapter - just check if item is checked or not and set corresponding test color:</p>

<pre><code>public class NavDrawerListAdapter extends BaseAdapter {

    private Context context;
    private ArrayList&lt;NavDrawerItem&gt; navDrawerItems;

    public NavDrawerListAdapter(Context context, ArrayList&lt;NavDrawerItem&gt; navDrawerItems){
        this.context = context;
        this.navDrawerItems = navDrawerItems;
    }

    @Override
    public int getCount() {
        return navDrawerItems.size();
    }

    @Override
    public Object getItem(int position) {
        return navDrawerItems.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        if (convertView == null) {
            LayoutInflater mInflater = (LayoutInflater)
                    context.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);
            convertView = mInflater.inflate(R.layout.drawer_list_item, null);
        }

        // TODO: Here ViewHolder pattern can be used or
        ImageView imgIcon = (ImageView) convertView.findViewById(R.id.icon);
        TextView txtTitle = (TextView) convertView.findViewById(R.id.title);

        // NOTE: check which item is Checked an set corresponding text color
        if (((GridView)parent).isItemChecked(position)) {
            txtTitle.setTextColor(context.getResources().getColor(R.color.red));
        } else {
            txtTitle.setTextColor(context.getResources().getColor(R.color.black));
        }

        imgIcon.setImageResource(navDrawerItems.get(position).getIcon());
        txtTitle.setText(navDrawerItems.get(position).getTitle());


        return convertView;
    }
}
</code></pre></li>
</ul>

<p>With above code, text color will be changed only after pointer up (when you press item it's color will still hold old value). If you need it to change color during pressed state, then use the following code in the adapter:</p>

<pre><code>    // NOTE: check which item is Checked an set corresponding text color
    if (((GridView)parent).isItemChecked(position)) {
        //txtTitle.setTextColor(context.getResources().getColor(R.color.red));
        txtTitle.setTextColor(context.getResources().getColorStateList(R.color.red_selector));
    } else {
        //txtTitle.setTextColor(context.getResources().getColor(R.color.black));
        txtTitle.setTextColor(context.getResources().getColorStateList(R.color.black_selector));
    }
</code></pre>

<p>And provide <strong>color/red_selector.xml</strong> and <strong>color/black_selector.xml</strong>. E.g. <strong>color/black_selector.xml</strong> should look the following way:</p>

<pre><code>&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;item android:state_pressed="true" android:color="@color/red"/&gt;
    &lt;item android:color="@color/black"/&gt;
&lt;/selector&gt;
</code></pre>
