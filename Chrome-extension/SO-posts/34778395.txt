<p>I've found out what was wrong. </p>

<p>The data which I was receiving from the server contained a lot of points (hundreds maybe thousands) and I was giving them to Polygon object's method setPoints() in chaotic sequence. In consequence the polygon method draw() drew successive lines without any order what can be seen on my printscreen (blank areas). As the number of points increased the number of polygon's "sides" increased also and redrawing performance decreased.</p>

<p>The solution was to sort List of points by distance so it would represent List of successive corners of the polygon and remove repetitions before giving them as argument to method Polygon.setPoints().</p>

<p>Maybe it will help someone in the future so I'll live here my method to sort GeoPoints as successive polygon's points:</p>

<pre><code> private List&lt;GeoPoint&gt; sortGeoPointsListByDistance(List&lt;GeoPoint&gt; searchedArea){

    List&lt;GeoPoint&gt; orderedSearchedArea = new ArrayList&lt;&gt;();
    orderedSearchedArea.add(searchedArea.remove(0));

    while (searchedArea.size() &gt; 0) {
        GeoPoint point = orderedSearchedArea.get(orderedSearchedArea.size() - 1);
        int nearestPointIndex = findNearestPointIndex(point, searchedArea);
        GeoPoint nearestPoint = searchedArea.get(nearestPointIndex);
        if(nearesPointIsTheSamePoint(point, nearestPoint)){
            searchedArea.remove(nearestPointIndex);
        } else {
            orderedSearchedArea.add(searchedArea.remove(nearestPointIndex));
        }
    }

    return orderedSearchedArea;
}

 private int findNearestPointIndex(GeoPoint point, List&lt;GeoPoint&gt; listToSearch) {
    int index =0;
    double dist = 0;
    for(int i=0;i&lt;listToSearch.size();i++){
        GeoPoint currentPoint = listToSearch.get(i);
        double currentPointDist = distFrom( point.getLatitude(),  point.getLongitude(),  currentPoint.getLatitude(),  currentPoint.getLongitude());
        if(i==0){
            index = i;
            dist = currentPointDist;
        } else if(currentPointDist&lt;dist){
            index = i;
            dist = currentPointDist;
        }
    }
    return index;
}

  private boolean nearesPointIsTheSamePoint(GeoPoint point, GeoPoint nearestPoint){
    if(point.getLatitude()==nearestPoint.getLatitude() &amp;&amp; point.getLongitude()==nearestPoint.getLongitude()){
        return true;
    } else{
        return false;
    }
}

 private double distFrom(double lat1, double lng1, double lat2, double lng2) {
    double earthRadius = 6371000; //meters
    double dLat = Math.toRadians(lat2-lat1);
    double dLng = Math.toRadians(lng2-lng1);
    double a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
                    Math.sin(dLng/2) * Math.sin(dLng/2);
    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    double dist =  (earthRadius * c);

    return dist;
}
</code></pre>
