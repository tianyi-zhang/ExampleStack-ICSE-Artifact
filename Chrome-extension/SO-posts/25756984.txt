<p>create a class and put both status and response in it then return that class</p>

<pre><code>class MyResult{
    public String response;
    public int statusCode;
}
</code></pre>

<p>and then your code must be something like this:</p>

<pre><code>public class ServiceHandler {
static String response = null;
public final static int GET = 1;
public final static int POST = 2;

public ServiceHandler() {

}

/**
 * Making service call
 * @url - url to make request
 * @method - http request method
 * */
public MyResult makeServiceCall(String url, int method) {
    return this.makeServiceCall(url, method, null);
}

/**
 * Making service call
 * @url - url to make request
 * @method - http request method
 * @params - http request params
 * */
public MyResult makeServiceCall(String url, int method,
                              List&lt;NameValuePair&gt; params) {
    MyResult result = new MyResult();
    try {
        // http client
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpEntity httpEntity = null;
        HttpResponse httpResponse = null;

        // Checking http request method type
        if (method == POST) {
            HttpPost httpPost = new HttpPost(url);
            // adding post params
            if (params != null) {
                httpPost.setEntity(new UrlEncodedFormEntity(params));
            }

            httpResponse = httpClient.execute(httpPost);

        } else if (method == GET) {
            // appending params to url
            if (params != null) {
                String paramString = URLEncodedUtils
                        .format(params, "utf-8");
                url += "?" + paramString;
            }
            HttpGet httpGet = new HttpGet(url);

            httpResponse = httpClient.execute(httpGet);

        }
        httpEntity = httpResponse.getEntity();
        result.response = EntityUtils.toString(httpEntity);

        //get the Status code here
        result.statusCode = httpResponse.getStatusLine().getStatusCode();





    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (ClientProtocolException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    return result;

}

}
</code></pre>

<p>and finally in your asynctask:</p>

<pre><code>protected Void doInBackground(Void... arg0) {
        // Creating service handler class instance
        ServiceHandler sh = new ServiceHandler();

        // Making a request to url and getting response
        MyResult result = sh.makeServiceCall(url, ServiceHandler.GET);
        Log.d("Response: ", "&gt; " + result);

    if (result.response != null) {
        try {

            NotValid = false;

        } catch (JSONException e) {
            e.printStackTrace();

        }
    } else {
        Log.e("ServiceHandler", "Couldn't get any data from the url");
        NotValid = true;


    }


    return null;


}
</code></pre>
