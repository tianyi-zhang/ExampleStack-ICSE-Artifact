<p>An easy and dynamic approach would be to create a custom List of buttons and put it into a GridView with 2 Colums resp. Rows. </p>

<p>This adapter i did for my navigation has an icon and a text, maybe it helps you. The icon is on the Left side as you can read in this line: holder.textView.setCompoundDrawablesWithIntrinsicBounds(item.get_icon(), 0, 0, 0); Te second one would be the icon above text.</p>

<p>Anyway, I think you will need a custom layout, wich you can easily create doing a new xml file with a Relative or LinearLayout and put an ImageView and a TextView into it and give as a parameter in constructor layoutResourceId.</p>

<p>The height of a listItem you can define in this layout xml file.</p>

<p>The GridView you can Configure different for Landscape and Portrait</p>

<ul>
<li>In landscape mode the layout from the layout-land/ will be used</li>
<li><p>In portrait mode the layout from the layout-port/ will be used</p>

<pre><code>public class NavigationAdapter extends ArrayAdapter&lt;NavItem&gt; {

List&lt;NavItem&gt; data;
Context context;
int layoutResourceId;

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View row = convertView;
    NavHolder holder;

    if(row == null)
    {
        LayoutInflater inflater = ((Activity)context).getLayoutInflater();
        row = inflater.inflate(layoutResourceId, parent, false);

        holder = new NavHolder();

        holder.textView = (TextView)row.findViewById(android.R.id.text1);

        row.setTag(holder);
    }
    else
    {
        holder = (NavHolder) row.getTag();
    }

    NavItem item = data.get(position);
    holder.textView.setText(item.get_title());
    holder.textView.setCompoundDrawablesWithIntrinsicBounds(item.get_icon(), 0, 0, 0);
    //holder.textView.setCompoundDrawablePadding(10);

    return row;
}

public NavigationAdapter(Context context, int layoutResourceId, List&lt;NavItem&gt; data) {
    super(context, layoutResourceId, data);
    this.layoutResourceId = layoutResourceId;
    this.context = context;
    this.data = data;
}

static class NavHolder
{
    TextView textView;
}
</code></pre>

<p>}</p></li>
</ul>
