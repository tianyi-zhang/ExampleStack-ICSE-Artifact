<p>I have a class which can decode them for you, add the class below then call in your code like this:</p>

<pre><code>int[] decodedZoomLevels = PolylineDecoder.decodeZoomLevels(levels);
GeoPoint[] gPts = PolylineDecoder.decodePoints(points, decodedZoomLevels.length);
</code></pre>

<p>where <code>points</code> and <code>levels</code> are the data you've extracted from the JSON response. You can then go through the array of geopoints drawing a line between them to display your directions.</p>

<p>Hope this helps! Kenny</p>

<hr>

<p>EDIT: It would seem that the google directions API no longer returns the zoom levels string as part of the JSON response, not to worry though, all we were using this for was to check the number of points, so we can simply put these into a list like:</p>

<pre><code>public static List &lt;GeoPoint&gt; decodePoints(String encoded_points){
int index = 0;
int lat = 0;
int lng = 0;
List &lt;GeoPoint&gt; out = new ArrayList&lt;GeoPoint&gt;();

try {
    int shift;
    int result;
    while (index &lt; encoded_points.length()) {
        shift = 0;
        result = 0;
        while (true) {
            int b = encoded_points.charAt(index++) - '?';
            result |= ((b &amp; 31) &lt;&lt; shift);
            shift += 5;
            if (b &lt; 32)
                break;
        }
        lat += ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : result &gt;&gt; 1);

        shift = 0;
        result = 0;
        while (true) {
            int b = encoded_points.charAt(index++) - '?';
            result |= ((b &amp; 31) &lt;&lt; shift);
            shift += 5;
            if (b &lt; 32)
                break;
        }
        lng += ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : result &gt;&gt; 1);
        /* Add the new Lat/Lng to the Array. */
        out.add(new GeoPoint((lat*10),(lng*10)));
    }
    return out;
}catch(Exception e) {
    e.printStackTrace();
}
return out;
}
</code></pre>

<hr>

<p>EDIT: OLD CODE</p>

<pre><code>public class PolylineDecoder {
/**
 * Transform a encoded PolyLine to a Array of GeoPoints.
 * Java implementation of the original Google JS code.
 * @see Original encoding part: &lt;a href="http://code.google.com/apis/maps/documentation/polylinealgorithm.html"&gt;http://code.google.com/apis/maps/documentation/polylinealgorithm.html&lt;/a&gt;
 * @return Array of all GeoPoints decoded from the PolyLine-String.
 * @param encoded_points String containing the encoded PolyLine. 
 * @param countExpected Number of points that are encoded in the PolyLine. Easiest way is to use the length of the ZoomLevels-String. 
 * @throws DecodingException 
 */
public static GeoPoint[] decodePoints(String encoded_points, int countExpected){
    int index = 0;
    int lat = 0;
    int lng = 0;
    int cnt = 0;
    GeoPoint[] out = new GeoPoint[countExpected];

    try {
        int shift;
        int result;
        while (index &lt; encoded_points.length()) {
            shift = 0;
            result = 0;
            while (true) {
                int b = encoded_points.charAt(index++) - '?';
                result |= ((b &amp; 31) &lt;&lt; shift);
                shift += 5;
                if (b &lt; 32)
                    break;
            }
            lat += ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : result &gt;&gt; 1);

            shift = 0;
            result = 0;
            while (true) {
                int b = encoded_points.charAt(index++) - '?';
                result |= ((b &amp; 31) &lt;&lt; shift);
                shift += 5;
                if (b &lt; 32)
                    break;
            }
            lng += ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : result &gt;&gt; 1);
            /* Add the new Lat/Lng to the Array. */
            out[cnt++] = new GeoPoint((lat*10),(lng*10));
        }
        return out;
    }catch(Exception e) {
        e.printStackTrace();
    }
    return out;
}

public static int[] decodeZoomLevels(String encodedZoomLevels){
    int[] out = new int[encodedZoomLevels.length()];
    int index = 0;

    for(char c : encodedZoomLevels.toCharArray())
        out[index++] = c - '?';
    return out;

}
}
</code></pre>
