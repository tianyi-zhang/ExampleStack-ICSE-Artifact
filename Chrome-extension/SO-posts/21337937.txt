<p><strong>TWO CELL TYPE</strong></p>

<p>Usually the problem comes from the getView. I am not sure what you are really looking for because you don't provide your custom adapter. However, I give you an example with 2 different cell types, but the cell contains only a textview.</p>

<p>In that case all the cells are fully adjusted with the recycling. Read carefully and extend/modify to match your needs.</p>

<p>in your <code>CustomAdapter</code></p>

<pre><code>private final class CustomArrayAdapter extends ArrayAdapter&lt;String&gt; {
    //the fastest is to get the layout inflater once and not each time getView is called
    private LayoutInflater mInflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

    public CustomArrayAdapter(Context context, int resource, int textViewResourceId, String[] objects) {
        super(context, resource, textViewResourceId, objects);
    }

    ...

    //here depending on the item position determine if cell is of type 1 or 2
    @Override
    public int getItemViewType(int position) {
        if (/* your type 1 criteria is match */) {
            return TYPE_1;
        } else {
            return TYPE_2;
        }
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;
        int type = getItemViewType(position);
        if (convertView == null) {
            holder = new ViewHolder();
            switch (type) {
                case TYPE_1:
                    convertView = mInflater.inflate(R.layout.row_of_type_1, parent, false);
                    holder.text = (TextView) convertView.findViewById(R.id.textview_type_1);
                    break;
                case TYPE_2:
                    convertView = mInflater.inflate(R.layout.row_of_type_2, parent, false);
                    holder.text = (TextView) convertView.findViewById(R.id.textview_type_2);
                    break;
             }
             convertView.setTag(holder);
         } else {
             holder = (ViewHolder) convertView.getTag();
         }

         //get the text for that specific cell and set it
         holder.text.setText(getMyCustomTextForThisCell());

         return convertView;
    }
}

static class ViewHolder {     
    TextView text;
}
</code></pre>

<hr>

<p><strong>SINGLE CELL TYPE</strong></p>

<p>In the case you simply need a cell of one type with a single textview in it and want to put text of different length in all the cell and the cell adapt its height automatically simply use the following code in your <code>CustomAdapter</code></p>

<pre><code>private final class CustomArrayAdapter extends ArrayAdapter&lt;String&gt; {
    //the fastest is to get the layout inflater once and not each time getView is called
    private LayoutInflater mInflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

    public CustomArrayAdapter(Context context, int resource, int textViewResourceId, String[] objects) {
        super(context, resource, textViewResourceId, objects);
    }

    ...

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder = null;

        if (convertView == null) {
            holder = new ViewHolder();
            convertView = mInflater.inflate(R.layout.row_type, parent, false);
            holder.text = (TextView) convertView.findViewById(R.id.textview_in_your_row);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }

        //get the text for that specific cell and set it
        holder.text.setText(getMyCustomTextForThisCell());

        return convertView;
    }
}

static class ViewHolder {     
    TextView text;
}
</code></pre>

<hr>

<p><strong>CELL LAYOUT</strong></p>

<p>In the example I give the file row_type.xml (the layout file of your row) should look like that :</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/textview_in_your_row"
    android:paddingLeft="6dp"
    android:paddingRight="6dp"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"/&gt;
</code></pre>

<p>don't forget the <code>android:layout_height="wrap_content"</code>or else the cell won't resize</p>

<hr>

<p><strong>SIDE COMMENT</strong></p>

<p>This side comment does not talk about the OP question, however if people come here because of the <strong>cell recycling</strong> words in the title they could be interested in the fact that I give a full example of recycling cells with an EditText here</p>

<p><a href="http://stackoverflow.com/questions/19127524/the-content-of-edittext-contained-into-a-android-listview-isnt-saved/19130861#19130861">The content of EditText contained into a Android ListView isn't saved</a></p>
