<p>First of all, if you want to change the elements of an array, then you should not use an array. </p>

<p>If you really don't want to use containers, then you could allocate dynamically a new array without the element you want to remove (not so a good idea probably because of bad performance and wasted memory).</p>

<p>This could be the method that returns the new array:</p>

<pre><code>public static int[] removeElementAt(int [] array, int index){
    if(index &gt; 0 &amp;&amp; index &lt; array.length){
        int [] newArray = new int[array.length - 1];
        for(int i=0; i&lt;index; i++)
            newArray[i] = array[i]; // copying elements
        for(int i=index+1; i&lt;array.length; i++)
            newArray[i-1] = array[i];
        array = newArray;
    }
    return array;
}
</code></pre>

<p>This is just a simple example:</p>

<pre><code>myArray = Class.removeElementAt(myArray, 5);  // removes 6. element
</code></pre>

<p>You could also use the function <code>removeElement</code> from the API <a href="https://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/ArrayUtils.html" rel="nofollow">ArrayUtils</a>, something like this:</p>

<pre><code>array = ArrayUtils.removeElement(array, element)
</code></pre>

<p>Another alternative would be to convert your array to a list, remove the element, and then convert it back to an array: not so a good idea, because you could use directly an <code>ArrayList</code>.</p>

<p>So, the idea is to use dynamic containers when you want to modify the content, otherwise use a normal raw array. </p>
