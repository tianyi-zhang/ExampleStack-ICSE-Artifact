<p>The <code>@RunAs</code> suggestion bkail mentions is definitely a good way to go.  The second approach that doesn't involve inner classes is to login in the testcase.</p>

<h1>Login approach</h1>

<p>When you bootstrap OpenEJB, specify the user/pass in the <code>InitialContext</code> properties as follows:</p>

<pre><code>public void testAsManager() throws Exception {
    Properties p = new Properties();
    p.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");
    p.put(Context.SECURITY_PRINCIPAL, "jane");
    p.put(Context.SECURITY_CREDENTIALS, "waterfall");

    InitialContext context = new InitialContext(p);

    try {
        movies.addMovie(new Movie("Quentin Tarantino", "Reservoir Dogs", 1992));
        movies.addMovie(new Movie("Joel Coen", "Fargo", 1996));
        movies.addMovie(new Movie("Joel Coen", "The Big Lebowski", 1998));

        List&lt;Movie&gt; list = movies.getMovies();
        assertEquals("List.size()", 3, list.size());

        for (Movie movie : list) {
            movies.deleteMovie(movie);
        }

        assertEquals("Movies.getMovies()", 0, movies.getMovies().size());
    } finally {
        context.close();
    }
}
</code></pre>

<p>Then perhaps test again as a different user:</p>

<pre><code>public void testAsEmployee() throws Exception {
    Properties p = new Properties();
    p.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.openejb.client.LocalInitialContextFactory");
    p.put(Context.SECURITY_PRINCIPAL, "joe");
    p.put(Context.SECURITY_CREDENTIALS, "cool");

    InitialContext context = new InitialContext(p);

    try {
        movies.addMovie(new Movie("Quentin Tarantino", "Reservoir Dogs", 1992));
        movies.addMovie(new Movie("Joel Coen", "Fargo", 1996));
        movies.addMovie(new Movie("Joel Coen", "The Big Lebowski", 1998));

        List&lt;Movie&gt; list = movies.getMovies();
        assertEquals("List.size()", 3, list.size());

        for (Movie movie : list) {
            try {
                movies.deleteMovie(movie);
                fail("Employees should not be allowed to delete");
            } catch (EJBAccessException e) {
                // Good, Employees cannot delete things
            }
        }

        // The list should still be three movies long
        assertEquals("Movies.getMovies()", 3, movies.getMovies().size());
    } finally {
        context.close();
    }
}
</code></pre>

<h1>Test users and groups</h1>

<p>You can configure test users and groups by putting a <code>users.properties</code> and <code>groups.properties</code> file in the classpath of the testcase.  In maven that'd be at the following locations:</p>

<ul>
<li>src/test/resources/users.properties</li>
<li>src/test/resources/groups.properties</li>
</ul>

<p>The <code>users.properties</code> file might look like this</p>

<pre><code>joe=cool
jane=waterfall
</code></pre>

<p>And <code>groups.properties</code> like so</p>

<pre><code>Manager=jane
Employee=jane,joe
</code></pre>
