<p>Here is some SAX code from one of our Android apps.</p>

<pre><code>import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
//. . .
public class MyXmlHandler extends DefaultHandler
{
    @Override
    public void startDocument()
    {
        Log.i(TAG,"Starting to parse document.");
    }
    @Override
    public void endDocument()
    {
            Log.i(TAG,"End of document.");
    }
    @Override
    public void startElement(String uri,String localName,String qName,Attributes attributes)
    {
        if(localName.equals("myxmltag"))
        {
                 //do something with myxmltag and attributes.
        }
    }    
}    
public void parseDocument()
{
    try {
         URL myxmlUri = new URL("file:///sdcard/appfolder/myxmldoc.xml");
         SAXParserFactory spf = SAXParserFactory.newInstance();
         SAXParser sp = spf.newSAXParser();
         XMLReader xr = sp.getXMLReader();
         MyXmlHandler myxmlhandler = new MyXmlHandler();
         xr.setContentHandler(myxmlhandler);
         InputSource inputs = new InputSource(myxmlUri.openStream());
         xr.parse(inputs);
         // . . . 
</code></pre>

<p>And the download code it has</p>

<pre><code>private void downloadFile(String url, String destination) throws ParserConfigurationException, FileNotFoundException, SAXException, UnsupportedEncodingException, ClientProtocolException, IllegalStateException, IOException {
    if(isNetworkAvailable(this)){
        HttpClient client = new DefaultHttpClient();
        HttpGet get = new HttpGet(url);
        MultipartEntity reqEntity = new  MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        get.setHeader("user_id", user_id);
        reqEntity.addPart("user_id", new StringBody(user_id));
        HttpResponse response = client.execute(get);  
        HttpEntity resEntity = response.getEntity();
        if (resEntity != null) {
            String serverResponse = EntityUtils.toString(resEntity);
            BufferedWriter out = new BufferedWriter(new FileWriter(destination));
            out.write(serverResponse);
            out.close();
        }
    }
}
</code></pre>

<p>And isNetworkAvailable</p>

<pre><code>public static boolean isNetworkAvailable(Context context)
{
    ConnectivityManager connectivity = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
    if (connectivity == null) {
        Log.w("tag", "Connectivity Manager failed to retrieve.");
    } else {
        NetworkInfo[] info = connectivity.getAllNetworkInfo();
        if (info != null) {
            for (int i = 0; i &lt; info.length; i++) {
                if (info[i].getState() == NetworkInfo.State.CONNECTED) {
                    return true;
                }
            }
        }
    }
    return false;
}
</code></pre>

<p>You probably want to edit downloadFile so there is some consequence if isNetworkAvailable returns false.</p>

<p>EDIT: I removed some code that may have been in your way. I gave everything a generic name that starts with "my" instead of what was in my code.</p>
