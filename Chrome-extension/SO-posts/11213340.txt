<p>This is the code from Hibernate which attempts to build the current session context using whatever value you passed in using the <code>hibernate.current_session_context_class</code> property:</p>

<pre><code>private CurrentSessionContext buildCurrentSessionContext() {
        String impl = properties.getProperty( Environment.CURRENT_SESSION_CONTEXT_CLASS );
        // for backward-compatability
        if ( impl == null &amp;&amp; transactionManager != null ) {
            impl = "jta";
        }

        if ( impl == null ) {
            return null;
        }
        else if ( "jta".equals( impl ) ) {
            if ( settings.getTransactionFactory().areCallbacksLocalToHibernateTransactions() ) {
                log.warn( "JTASessionContext being used with JDBCTransactionFactory; auto-flush will not operate correctly with getCurrentSession()" );
            }
            return new JTASessionContext( this );
        }
        else if ( "thread".equals( impl ) ) {
            return new ThreadLocalSessionContext( this );
        }
        else if ( "managed".equals( impl ) ) {
            return new ManagedSessionContext( this );
        }
        else {
            try {
                Class implClass = ReflectHelper.classForName( impl );
                return ( CurrentSessionContext ) implClass
                        .getConstructor( new Class[] { SessionFactoryImplementor.class } )
                        .newInstance( new Object[] { this } );
            }
            catch( Throwable t ) {
                log.error( "Unable to construct current session context [" + impl + "]", t );
                return null;
            }
        }
    }
</code></pre>

<p>As you can see acceptable values are <code>jta</code>, <code>thread</code>, <code>managed</code>. </p>

<p>Since you're using Spring's transaction management functionality you shouldn't set this property at all. Spring will take care of this for you.</p>

<p>You just need to annotate your transactional methods with <code>@Transactional</code> and a session will be opened and bound to the current thread for you.</p>
