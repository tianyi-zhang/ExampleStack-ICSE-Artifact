<p><a href="http://xstream.10960.n7.nabble.com/Is-there-a-way-to-set-the-order-of-Xstream-serialization-tp8300p8464.html" rel="nofollow">Here </a> is my answer.
<br>I researched the issue and concluded that Android returns fields in alphabetical order of field types.
You can inherit FieldKeySorter to set order.</p>

<p>First you need create annotation that will define fields order:</p>

<pre><code>@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface XMLSequence {
    String[] value();
} 
</code></pre>

<p>And example using:</p>

<pre><code>@XMLSequence({
        "accountIds",
        "addresses",
        "birthDate",
        "contact",
        "name",
        "status",
}) 
</code></pre>

<p>Then I've inherited FieldKeySorter :</p>

<pre><code>public class SequenceFieldKeySorter implements FieldKeySorter {
    @Override
    public Map sort(final Class type, final Map keyedByFieldKey) {
        Annotation sequence = type.getAnnotation(XMLSequence.class);
        if (sequence != null) {
            final String[] fieldsOrder = ((XMLSequence) sequence).value();
            Map result = new OrderRetainingMap();
            Set&lt;Map.Entry&lt;FieldKey, Field&gt;&gt; fields = keyedByFieldKey.entrySet();
            for (String fieldName : fieldsOrder) {
                if (fieldName != null) {
                    for (Map.Entry&lt;FieldKey, Field&gt; fieldEntry : fields) {
                        if
(fieldName.equals(fieldEntry.getKey().getFieldName())) {
                            result.put(fieldEntry.getKey(),
fieldEntry.getValue());
                        }
                    }
                }
            }
            return result;
        } else {
            return keyedByFieldKey;
        }

    }
}
</code></pre>

<p>And finally go:</p>

<pre><code>XStream x = new XStream(new PureJavaReflectionProvider(
new FieldDictionary(new SequenceFieldKeySorter()))); 
</code></pre>
