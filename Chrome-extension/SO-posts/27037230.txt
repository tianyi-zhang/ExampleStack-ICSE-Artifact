<p>Some answers either use methods that have since become deprecated, or don't give a complete solution, so I tried to do a short, up-to-date wrap-up.</p>

<hr>

<p>Unlike <code>ListView</code>, the <code>RecyclerView</code> class has no divider-related parameters. Instead, you need to extend <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html"><code>ItemDecoration</code></a>, a <code>RecyclerView</code>'s inner class:</p>

<blockquote>
  <p>An ItemDecoration allows the application to add a special drawing and layout offset to specific item views from the adapter's data set. This can be useful for drawing dividers between items, highlights, visual grouping boundaries and more.</p>
  
  <p>All ItemDecorations are drawn in the order they were added, before the item views (in onDraw()) and after the items (in onDrawOver(Canvas, RecyclerView, RecyclerView.State).</p>
</blockquote>

<h2>Vertical spacing <code>ItemDecoration</code></h2>

<p>Extend <code>ItemDecoration</code>, add custom constructor which takes space height as a parameter and override <code>getItemOffsets()</code> method:</p>

<pre><code>public class VerticalSpaceItemDecoration extends RecyclerView.ItemDecoration {

    private final int mVerticalSpaceHeight;

    public VerticalSpaceItemDecoration(int mVerticalSpaceHeight) {
        this.mVerticalSpaceHeight = mVerticalSpaceHeight;
    }

    @Override
    public void getItemOffsets(Rect outRect, View view, RecyclerView parent,
            RecyclerView.State state) {
        outRect.bottom = mVerticalSpaceHeight;
    }
}
</code></pre>

<p>If you don't want to insert space below the last item, add the following condition:</p>

<pre><code>if (parent.getChildAdapterPosition(view) != parent.getAdapter().getItemCount() - 1) {
            outRect.bottom = mVerticalSpaceHeight;
}
</code></pre>

<p>Note: you can also modify <code>outRect.top</code>, <code>outRect.left</code> and <code>outRect.right</code> properties for desired effect.</p>

<h2>Divider <code>ItemDecoration</code></h2>

<p>Extend <code>ItemDecoration</code> and override <code>onDraw()</code> method:</p>

<pre><code>public class DividerItemDecoration extends RecyclerView.ItemDecoration {

    private static final int[] ATTRS = new int[]{android.R.attr.listDivider};

    private Drawable mDivider;

    /**
     * Default divider will be used
     */
    public DividerItemDecoration(Context context) {
        final TypedArray styledAttributes = context.obtainStyledAttributes(ATTRS);
        mDivider = styledAttributes.getDrawable(0);
        styledAttributes.recycle();
    }

    /**
     * Custom divider will be used
     */
    public DividerItemDecoration(Context context, int resId) {
        mDivider = ContextCompat.getDrawable(context, resId);
    }

    @Override
    public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
        int left = parent.getPaddingLeft();
        int right = parent.getWidth() - parent.getPaddingRight();

        int childCount = parent.getChildCount();
        for (int i = 0; i &lt; childCount; i++) {
            View child = parent.getChildAt(i);

            RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child.getLayoutParams();

            int top = child.getBottom() + params.bottomMargin;
            int bottom = top + mDivider.getIntrinsicHeight();

            mDivider.setBounds(left, top, right, bottom);
            mDivider.draw(c);
        }
    }
}
</code></pre>

<p>You can either call the first constructor that uses the default Android divider attributes, or the second one that uses your own drawable, for example drawable/divider.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"
       android:shape="rectangle"&gt;
    &lt;size android:height="1dp" /&gt;
    &lt;solid android:color="#ff992900" /&gt;
&lt;/shape&gt;
</code></pre>

<p>Note: if you want the divider to be drawn <em>over</em> your items, override <code>onDrawOver()</code> method instead.</p>

<h2>Usage</h2>

<p>To use your new class add <code>VerticalSpaceItemDecoration</code> or <code>DividerSpaceItemDecoration</code> to <code>RecyclerView</code>, for example in your fragment's <code>onCreateView()</code> method:</p>

<pre><code>private static final int VERTICAL_ITEM_SPACE = 48;
private RecyclerView mUiRecyclerView;
private LinearLayoutManager mLinearLayoutManager;
@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
    View rootView = inflater.inflate(R.layout.fragment_feed, container, false);

    mUiRecyclerView = (RecyclerView) rootView.findViewById(R.id.fragment_home_recycler_view);
    mLinearLayoutManager = new LinearLayoutManager(getActivity());
    mUiRecyclerView.setLayoutManager(mLinearLayoutManager);

    //add ItemDecoration
    mUiRecyclerView.addItemDecoration(new VerticalSpaceItemDecoration(VERTICAL_ITEM_SPACE));
    //or
    mUiRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity()));
    //or
    mUiRecyclerView.addItemDecoration(
            new DividerItemDecoration(getActivity(), R.drawable.divider));

    mUiRecyclerView.setAdapter(...);

    return rootView;
}
</code></pre>

<hr>

<p>There's also <a href="https://github.com/lucasr/twoway-view">Lucas Rocha's library</a> which is supposed to simplify the item decoration process. Haven't tried it though.</p>

<p>Among its <a href="https://github.com/lucasr/twoway-view#features">features</a> are:</p>

<ul>
<li>A collection of stock item decorations including:</li>
<li>Item spacing Horizontal/vertical dividers.</li>
<li>List item</li>
</ul>
