<p>As an alternative approach, you could create a <code>TableColumnModel</code> which provided functionality that allowed you to hide/show columns</p>

<pre><code>import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 * A simple column model to provide
 * easy visibility functionality, allowing columns to be easily hidden and shown
 */
public class MutableTableColumnModel extends DefaultTableColumnModel {

    private List&lt;TableColumn&gt; allTableColumns;

    public MutableTableColumnModel() {

        allTableColumns = new ArrayList&lt;TableColumn&gt;(10);

    }

    /**
     * Sets the visibility of the specified TableColumn. The call is ignored if
     * the TableColumn is not found in this column model or its visibility status
     * did not change.
     * &lt;p&gt;
     * @param column
     * @param visible its new visibility status
     */
    public void setColumnVisible(TableColumn column, boolean visible) {
        if (!visible) {
            super.removeColumn(column);
        } else {
            // find the visible index of the column:
            // iterate through both collections of visible and all columns, counting
            // visible columns up to the one that's about to be shown again
            int noVisibleColumns = tableColumns.size();
            int noInvisibleColumns = allTableColumns.size();
            int visibleIndex = 0;

            for (int invisibleIndex = 0; invisibleIndex &lt; noInvisibleColumns; ++invisibleIndex) {
                TableColumn visibleColumn = (visibleIndex &lt; noVisibleColumns ? (TableColumn) tableColumns.get(visibleIndex) : null);
                TableColumn testColumn = (TableColumn) allTableColumns.get(invisibleIndex);

                if (testColumn == column) {
                    if (visibleColumn != column) {
                        super.addColumn(column);
                        super.moveColumn(tableColumns.size() - 1, visibleIndex);
                    }
                    break;
                } else if (testColumn == visibleColumn) {
                    ++visibleIndex;
                }
            }
        }
    }

    /**
     * Makes all columns in this model visible
     */
    public void showAllColumns() {
        int noColumns = allTableColumns.size();

        for (int columnIndex = 0; columnIndex &lt; noColumns; ++columnIndex) {
            TableColumn visibleColumn = (columnIndex &lt; tableColumns.size() ? (TableColumn) tableColumns.get(columnIndex) : null);
            TableColumn invisibleColumn = (TableColumn) allTableColumns.get(columnIndex);

            if (visibleColumn != invisibleColumn) {
                super.addColumn(invisibleColumn);
                super.moveColumn(tableColumns.size() - 1, columnIndex);
            }
        }
    }

    /**
     * Maps the index of the column in the table model at
     * &lt;code&gt;modelColumnIndex&lt;/code&gt; to the TableColumn object. There may me
     * multiple TableColumn objects showing the same model column, though this is
     * uncommon. This method will always return the first visible or else the
     * first invisible column with the specified index.
     *
     * @param modelColumnIndex index of column in table model
     * @return table column object or null if no such column in this column model
     */
    public TableColumn getColumnByModelIndex(int modelColumnIndex) {
        for (int columnIndex = 0; columnIndex &lt; allTableColumns.size(); ++columnIndex) {
            TableColumn column = (TableColumn) allTableColumns.get(columnIndex);
            if (column.getModelIndex() == modelColumnIndex) {
                return column;
            }
        }
        return null;
    }

    /**
     * Checks wether the specified column is currently visible.
     *
     * @param aColumn column to check
     * @return visibility of specified column (false if there is no such column at
     * all. [It's not visible, right?])
     */
    public boolean isColumnVisible(TableColumn aColumn) {
        return (tableColumns.indexOf(aColumn) &gt;= 0);
    }

    /**
     * Append &lt;code&gt;column&lt;/code&gt; to the right of exisiting columns. Posts
     * &lt;code&gt;columnAdded&lt;/code&gt; event.
     *
     * @param column The column to be added
     * @see #removeColumn
     * @exception IllegalArgumentException if &lt;code&gt;column&lt;/code&gt; is
     * &lt;code&gt;null&lt;/code&gt;
     */
    public void addColumn(TableColumn column) {
        allTableColumns.add(column);
        super.addColumn(column);
    }

    /**
     * Removes &lt;code&gt;column&lt;/code&gt; from this column model. Posts
     * &lt;code&gt;columnRemoved&lt;/code&gt; event. Will do nothing if the column is not in
     * this model.
     *
     * @param column the column to be added
     * @see #addColumn
     */
    public void removeColumn(TableColumn column) {
        int allColumnsIndex = allTableColumns.indexOf(column);
        if (allColumnsIndex != -1) {
            allTableColumns.remove(allColumnsIndex);
        }
        super.removeColumn(column);
    }

    /**
     * Moves the column from &lt;code&gt;oldIndex&lt;/code&gt; to &lt;code&gt;newIndex&lt;/code&gt;. Posts
     *  &lt;code&gt;columnMoved&lt;/code&gt; event. Will not move any columns if
     * &lt;code&gt;oldIndex&lt;/code&gt; equals &lt;code&gt;newIndex&lt;/code&gt;.
     *
     * @param    oldIndex    index of column to be moved
     * @param    newIndex    new index of the column
     * @exception IllegalArgumentException    if either &lt;code&gt;oldIndex&lt;/code&gt; or
     * &lt;code&gt;newIndex&lt;/code&gt; are not in [0, getColumnCount() - 1]
     */
    public void moveColumn(int oldIndex, int newIndex) {
        if ((oldIndex &lt; 0) || (oldIndex &gt;= getColumnCount())
                || (newIndex &lt; 0) || (newIndex &gt;= getColumnCount())) {
            throw new IllegalArgumentException("moveColumn() - Index out of range");
        }

        TableColumn fromColumn = (TableColumn) tableColumns.get(oldIndex);
        TableColumn toColumn = (TableColumn) tableColumns.get(newIndex);

        int allColumnsOldIndex = allTableColumns.indexOf(fromColumn);
        int allColumnsNewIndex = allTableColumns.indexOf(toColumn);

        if (oldIndex != newIndex) {
            allTableColumns.remove(allColumnsOldIndex);
            allTableColumns.add(allColumnsNewIndex, fromColumn);
        }

        super.moveColumn(oldIndex, newIndex);
    }

    /**
     * Returns the total number of columns in this model.
     *
     * @param onlyVisible if set only visible columns will be counted
     * @return    the number of columns in the &lt;code&gt;tableColumns&lt;/code&gt; array
     * @see    #getColumns
     */
    public int getColumnCount(boolean onlyVisible) {
        List&lt;TableColumn&gt; columns = (onlyVisible ? tableColumns : allTableColumns);
        return columns.size();
    }

    /**
     * Returns an &lt;code&gt;Enumeration&lt;/code&gt; of all the columns in the model.
     *
     * @param onlyVisible if set all invisible columns will be missing from the
     * enumeration.
     * @return an &lt;code&gt;Enumeration&lt;/code&gt; of the columns in the model
     */
    public Iterator&lt;TableColumn&gt; getColumns(boolean onlyVisible) {

        List&lt;TableColumn&gt; columns = (onlyVisible ? tableColumns : allTableColumns);
        return Collections.unmodifiableList(columns).iterator();

    }

    /**
     * Returns the position of the first column whose identifier equals
     * &lt;code&gt;identifier&lt;/code&gt;. Position is the the index in all visible columns
     * if &lt;code&gt;onlyVisible&lt;/code&gt; is true or else the index in all columns.
     *
     * @param    identifier the identifier object to search for
     * @param    onlyVisible if set searches only visible columns
     *
     * @return    the index of the first column whose identifier equals
     * &lt;code&gt;identifier&lt;/code&gt;
     *
     * @exception IllegalArgumentException if &lt;code&gt;identifier&lt;/code&gt; is
     * &lt;code&gt;null&lt;/code&gt;, or if no &lt;code&gt;TableColumn&lt;/code&gt; has this
     * &lt;code&gt;identifier&lt;/code&gt;
     * @see    #getColumn
     */
    public int getColumnIndex(Object identifier, boolean onlyVisible) {
        if (identifier == null) {
            throw new IllegalArgumentException("Identifier is null");
        }

        List&lt;TableColumn&gt; columns = (onlyVisible ? tableColumns : allTableColumns);
        int noColumns = columns.size();
        TableColumn column;

        for (int columnIndex = 0; columnIndex &lt; noColumns; ++columnIndex) {
            column = (TableColumn) columns.get(columnIndex);

            if (identifier.equals(column.getIdentifier())) {
                return columnIndex;
            }
        }

        throw new IllegalArgumentException("Identifier not found");
    }

    /**
     * Returns the &lt;code&gt;TableColumn&lt;/code&gt; object for the column at
     * &lt;code&gt;columnIndex&lt;/code&gt;.
     *
     * @param    columnIndex    the index of the column desired
     * @param    onlyVisible    if set columnIndex is meant to be relative to all
     * visible columns only else it is the index in all columns
     *
     * @return    the &lt;code&gt;TableColumn&lt;/code&gt; object for the column at
     * &lt;code&gt;columnIndex&lt;/code&gt;
     */
    public TableColumn getColumn(int columnIndex, boolean onlyVisible) {

        return (onlyVisible ? tableColumns : allTableColumns).get(columnIndex);

    }

    /**
     * Returns all the columns
     *
     * @return
     */
    public TableColumn[] getAllColumns() {

        return allTableColumns.toArray(new TableColumn[allTableColumns.size()]);

    }

    public TableColumn[] getHiddenColumns() {

        List&lt;TableColumn&gt; lstColumns = new ArrayList&lt;TableColumn&gt;(10);

        for (TableColumn column : getAllColumns()) {

            if (!isColumnVisible(column)) {

                lstColumns.add(column);

            }

        }

        return lstColumns.toArray(new TableColumn[lstColumns.size()]);

    }

    public static MutableTableColumnModel createFromTableModel(TableModel model) {

        MutableTableColumnModel columnModel = new MutableTableColumnModel();
        if (model != null) {
            for (int i = 0; i &lt; model.getColumnCount(); i++) {
                TableColumn newColumn = new TableColumn(i);
                columnModel.addColumn(newColumn);
            }
        }

        return columnModel;

    }

}
</code></pre>

<p>This could be applied to a <code>JTable</code> simply by using something like...</p>

<pre><code>JTable table = new JTable();
table.setAutoCreateColumnsFromModel(false);
TableModel tm = ...;
table.setModel(tm);
table.setColumnModel(MutableTableColumnModel.createFromTableModel(tm));
</code></pre>

<p>You can then change the column visibility state using something like...</p>

<pre><code>MutableColumnModel cm = (MutableColumnModel)table.getColumnnModel();
cm.setColumnVisible(column, false);
</code></pre>

<p>For example...</p>
