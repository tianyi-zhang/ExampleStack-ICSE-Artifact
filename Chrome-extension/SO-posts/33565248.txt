<p>Using an autocompletetextview or an edittext i handled this one as following where </p>

<pre><code> public List&lt;SalesProductsItems&gt; mItems          
</code></pre>

<p>is the initial listitem instance and . </p>

<pre><code>  public static List&lt;SalesProductsItems&gt; filteredIt 
</code></pre>

<p>is the instance used in displaying items.Since the 1st time the filter results is not null the <code>mItems</code> instance will be equal to the <code>filteredIt</code> instance (thus loosing the initial list) then on the <code>publishResults</code> method right before <code>mItems</code> looses the original values, I'm equating it to the passed instance <code>originallist</code> . Hope it helps someone</p>

<pre><code>private static class ProductsFilter extends Filter {

    private final SalesProductsAdapter adapter;

    private final List&lt;SalesProductsItems&gt; originalList;

    private final List&lt;SalesProductsItems&gt; filteredList;

    private ProductsFilter(SalesProductsAdapter adapter, List&lt;SalesProductsItems&gt; originalList) {
        super();
        this.adapter = adapter;
        this.originalList = new LinkedList&lt;&gt;(originalList);
        this.filteredList = new ArrayList&lt;&gt;();
    }

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        filteredList.clear();
        final FilterResults results = new FilterResults();

        if (constraint == null || constraint.length() == 0)
            filteredList.addAll(originalList);
        else {
            final String filterPattern = constraint.toString().toLowerCase().trim();

            for (final SalesProductsItems it : originalList) {

                if (it.getProduct().toLowerCase().contains(filterPattern)) {
                    filteredList.add(it);
                }
            }
        }

        results.values = filteredList;
        results.count = filteredList.size();
        return results;
    }

    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        adapter.mItems = originalList;
        if(results.count &gt; 0) {
            filteredIt.clear();
            filteredIt.addAll((ArrayList&lt;SalesProductsItems&gt;) results.values);
            adapter.notifyDataSetChanged();
        } else {
            filteredIt.clear();
            filteredIt.addAll(adapter.mItems);
            adapter.notifyDataSetChanged();
        }
    }
}
</code></pre>
