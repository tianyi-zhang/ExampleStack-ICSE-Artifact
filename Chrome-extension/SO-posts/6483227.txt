<p>Each time the framework is reusing the view (i.e <code>convertView</code> object supplied to <code>getView()</code> method is not null) you have to find appropriate views and set their properties. </p>

<p>In the code example under the referred link the author sets values for the view only at creation time, so each time the framework is reusing the view, it has the same properties. Therefore <code>getView()</code> method should be implemented as this:</p>

<pre><code>    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View v;
        if(convertView==null){
            LayoutInflater li = getLayoutInflater();
            v = li.inflate(R.layout.icon, null);
        }
        else
        {
            v = convertView;
        }
        TextView tv = (TextView)v.findViewById(R.id.icon_text);
        tv.setText("Profile "+ position);
        ImageView iv = (ImageView)v.findViewById(R.id.icon_image);
        iv.setImageResource(R.drawable.icon);
        return v;
    }
</code></pre>

<p>You can optimize further <code>getView()</code> method by applying the view holder pattern.
Please refer to Romain Guy's and Adam Powell's presentation <a href="http://www.google.com/events/io/2010/sessions/world-of-listview-android.html" rel="nofollow">The world of ListView</a>, as it explains some other catches connected to widgets that extend <code>AdapterView</code> class.</p>
