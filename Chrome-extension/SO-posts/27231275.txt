<p>Here is a start. This will print all possible combinations. I'll let you work on the permutations part. Keep in mind this doesn't include memorization. There may be duplicate recursive calls. You should investigate this further (I don't want to solve your entire homework assignment).</p>

<pre><code>// The main function that prints all combinations of size r
// in arr[] of size n. This function mainly uses combinationUtil()
void printCombination(String arr[], int n, int r)
{
    // A temporary array to store all combination one by one
    String[] data = new String[r];

    // Print all combination using temprary array 'data[]'
    combinationUtil(arr, data, 0, n-1, 0, r);
}

/* arr[]  ---&gt; Input Array
data[] ---&gt; Temporary array to store current combination
 start &amp; end ---&gt; Staring and Ending indexes in arr[]
index  ---&gt; Current index in data[]
r ---&gt; Size of a combination to be printed */
void combinationUtil(String arr[], String data[], int start, int end, int index, int r)
{
    // Current combination is ready to be printed, print it
    if (index == r)
    {
        for (int j=0; j&lt;r; j++)
            System.out.printf("%s ", data[j]);
        System.out.printf("\n");
        return;
    }

    // replace index with all possible elements. The condition
    // "end-i+1 &gt;= r-index" makes sure that including one element
    // at index will make a combination with remaining elements
    // at remaining positions
    for (int i=start; i&lt;=end &amp;&amp; end-i+1 &gt;= r-index; i++)
    {
        data[index] = arr[i];
        combinationUtil(arr, data, i+1, end, index+1, r);
    }
}
</code></pre>

<p><a href="http://ideone.com/3V8QIp" rel="nofollow">Run this code here</a></p>
