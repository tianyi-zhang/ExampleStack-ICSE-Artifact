<p>So, I basically stole the <code>toString</code> method from <code>method</code> and made a couple of minor adjustments...</p>

<p>It now dumps output like <code>public static String toString(int,int)</code></p>

<pre><code>public class TestReflection {

    public static void main(String[] args) throws ClassNotFoundException {
        TestReflection tr = new TestReflection();
        String str = "java.lang.Integer";
        Class cls = Class.forName(str);
        tr.print(cls);
    }

    /*
     * Displays the Methods of the given class. The items displayed depends on
     * the options entered.
     *
     * @param    cl    The class to be displayed
     */
    public void methods(Class cl) {
        // Get the Methods of the Class cl
        Method[] me = cl.getDeclaredMethods();

        for (Method x : me) {
            System.out.println(toString(x));
        }
    }

    /*
     * Displays the information about the class. Uses the options to filter which
     * information is printed.
     *
     * @param    cl    The class to be displayed
     */
    public void print(Class cl) {
        System.out.println("\nMETHODS:");
        methods(cl);
    }

    public static String getTypeName(Class&lt;?&gt; type) {
        if (type.isArray()) {
            try {
                Class&lt;?&gt; cl = type;
                int dimensions = 0;
                while (cl.isArray()) {
                    dimensions++;
                    cl = cl.getComponentType();
                }
                StringBuffer sb = new StringBuffer();
                sb.append(cl.getName());
                for (int i = 0; i &lt; dimensions; i++) {
                    sb.append("[]");
                }
                return sb.toString();
            } catch (Throwable e) { /*FALLTHRU*/ }
        }
        return type.getName();
    }

    private String toString(Method method) {
        try {
            StringBuilder sb = new StringBuilder();
            int mod = method.getModifiers() &amp; Modifier.methodModifiers();
            if (mod != 0) {
                sb.append(Modifier.toString(mod)).append(' ');
            }
            sb.append(method.getReturnType().getSimpleName()).append(' ');
            sb.append(method.getName()).append('(');
            Class&lt;?&gt;[] params = method.getParameterTypes();
            for (int j = 0; j &lt; params.length; j++) {
                sb.append(getTypeName(params[j]));
                if (j &lt; (params.length - 1)) {
                    sb.append(',');
                }
            }
            sb.append(')');
            Class&lt;?&gt;[] exceptions = method.getExceptionTypes();
            if (exceptions.length &gt; 0) {
                sb.append(" throws ");
                for (int k = 0; k &lt; exceptions.length; k++) {
                    sb.append(exceptions[k].getName());
                    if (k &lt; (exceptions.length - 1)) {
                        sb.append(',');
                    }
                }
            }
            return sb.toString();
        } catch (Exception e) {
            return "&lt;" + e + "&gt;";
        }
    }
}
</code></pre>
