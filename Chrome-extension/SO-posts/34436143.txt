<p>This is because the <code>TextView</code> creates <code>URLSpan</code> which is <code>ClickableSpan</code> for each link text pattern. Once the <code>MovementMethod</code> finds url it calls <code>onClick</code> method of the <code>URLSpan</code>. This event starts the <code>ACTION_VIEW</code> intent, that's why you see the default browser starting instead. </p>

<p>What you could do is write your own implementation of the <code>URLSpan</code>, where you'd override onClick method and start the <code>CustomTabs</code> service from there.</p>

<p>First create custom <code>URLSpan</code> that will override <code>onClick</code> method:</p>

<pre><code>public class CustomTabsURLSpan extends URLSpan {
    public CustomTabsURLSpan(String url) {
        super(url);
    }

    public CustomTabsURLSpan(Parcel src) {
        super(src);
    }

    @Override
    public void onClick(View widget) {
       String url = getUrl();
       //attempt to open in CustomTabs, if that fails call super.onClick(widget);
    }
}
</code></pre>

<p>Create custom transformation method, that will set spans to the links:</p>

<pre><code>public class LinkTransformationMethod implements TransformationMethod {

    @Override
    public CharSequence getTransformation(CharSequence source, View view) {
        if (view instanceof TextView) {
            TextView textView = (TextView) view;
            Linkify.addLinks(textView, Linkify.WEB_URLS);
            String stringText = textView.getText().toString();
            Spannable text = (Spannable) textView.getText();
            URLSpan[] spans = text.getSpans(0, textView.length(), URLSpan.class);
            for (int i = spans.length - 1; i &gt;= 0; i--) {
                URLSpan oldSpan = spans[i];
                text.removeSpan(oldSpan);
                String url = oldSpan.getURL();
                int startIndex = stringText.indexOf(url);
                int lastIndex = startIndex + url.length();
                text.setSpan(new CustomTabsURLSpan(url), startIndex, lastIndex, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
            return text;
        }
        return source;
    }

    @Override
    public void onFocusChanged(View view, CharSequence sourceText, boolean focused, int direction, Rect previouslyFocusedRect) {

    }
}
</code></pre>

<p>And here is quick explanation: <a href="https://medium.com/@nullthemall/make-textview-open-links-in-customtabs-12fdcf4bb684#.ig1chpbbe" rel="nofollow">https://medium.com/@nullthemall/make-textview-open-links-in-customtabs-12fdcf4bb684#.ig1chpbbe</a></p>
