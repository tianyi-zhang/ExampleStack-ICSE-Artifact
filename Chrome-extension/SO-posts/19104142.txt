<p>Spotted an error in my previous code and decided to sit down and rewrite it. </p>

<p>I have done something similar before where I had ~4500 markers and wanted to select those within a certain distance of a specific location. Took that code and generalized it to be used with any kind of Markers.</p>

<p><img src="http://i.stack.imgur.com/yYLiI.png" alt="All markers"><img src="http://i.stack.imgur.com/tn1gC.png" alt="Selected markers with getSurroundingMarkers"></p>

<p>The code that I will post below contains two methods that you can use:</p>

<p><strong>selectLowDistanceMarkers</strong></p>

<p>Measures distance between each and every marker and selects only those that does not have a long distance to any of the other markers. This requires a O(n+n^2) runtime due to the comparison between every marker and an examination afterwards.</p>

<p><strong>getSurroundingMarkers</strong></p>

<p>If you already know a postition that you would like to zoom in to, then this method does the same as above. This method is way less CPU heavy as it only has to do a O(n) run through all the markers and compare them to the given position.</p>

<pre><code>private List&lt;Marker&gt; selectLowDistanceMarkers(List&lt;Marker&gt; markers,
        int maxDistanceMeters) {

    List&lt;Marker&gt; acceptedMarkers = new ArrayList&lt;Marker&gt;();

    if (markers == null) return acceptedMarkers;

    Map&lt;Marker, Float&gt; longestDist = new HashMap&lt;Marker, Float&gt;();

    for (Marker marker1 : markers) {

        // in this for loop we remember the max distance for each marker
        // think of a map with a flight company's routes from an airport
        // these lines is drawn for each airport
        // marker1 being the airport and marker2 destinations

        for (Marker marker2 : markers) {
            if (!marker1.equals(marker2)) {
                float distance = distBetween(marker1.getPosition(),
                        marker2.getPosition());
                if (longestDist.containsKey(marker1)) {
                    // possible we have a longer distance
                    if (distance &gt; longestDist.get(marker1))
                        longestDist.put(marker1, distance);
                } else {
                    // first distance
                    longestDist.put(marker1, distance);
                }
            }
        }
    }


    // examine the distances collected
    for (Marker marker: longestDist.keySet()) {
        if (longestDist.get(marker) &lt;= maxDistanceMeters) acceptedMarkers.add(marker);
    }

    return acceptedMarkers;
}

private List&lt;Marker&gt; getSurroundingMarkers(List&lt;Marker&gt; markers,
        LatLng origin, int maxDistanceMeters) {
    List&lt;Marker&gt; surroundingMarkers = surroundingMarkers = new ArrayList&lt;Marker&gt;();
    if (markers == null) return surroundingMarkers ;


        for (Marker marker : markers) {

            double dist = distBetween(origin, marker.getPosition());

            if (dist &lt; getHydrantsLoadradius()) {
                surroundingMarkers.add(marker);
            }
        }


    return surroundingMarkers;
}

private float distBetween(LatLng pos1, LatLng pos2) {
    return distBetween(pos1.latitude, pos1.longitude, pos2.latitude,
            pos2.longitude);
}

/** distance in meters **/
private float distBetween(double lat1, double lng1, double lat2, double lng2) {
    double earthRadius = 3958.75;
    double dLat = Math.toRadians(lat2 - lat1);
    double dLng = Math.toRadians(lng2 - lng1);
    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2)
            + Math.cos(Math.toRadians(lat1))
            * Math.cos(Math.toRadians(lat2)) * Math.sin(dLng / 2)
            * Math.sin(dLng / 2);
    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    double dist = earthRadius * c;

    int meterConversion = 1609;

    return (float) (dist * meterConversion);
}
</code></pre>

<p>Again, use the well known LatLngBounds to determine how much you need to zoom after using one of the filtering algorithms above.</p>
