<p>You could add a couple of methods to your <code>Product</code> class:</p>

<ul>
<li><code>public int getQuantity()</code></li>
<li><code>void setQuantity(int quantity)</code></li>
</ul>

<p>However, you should not modify an object that is in a <code>HashSet</code>: it's safer to remove it and add a new one. In fact, if you modify an object that is in a <code>HashSet</code> you will modify its hash value!</p>

<p>Here is some code: </p>

<pre><code>public class Main {

    public static void main(String[] args) {
        new Main().go();
    }

    public void go() {
        Product p1 = new Product();
        p1.setName("P1");
        p1.setPrice(2.5);
        p1.setQuantity(1);

        Product p2 = new Product();
        p2.setName("P2");
        p2.setPrice(5.3);
        p2.setQuantity(1);

        Set&lt;Product&gt; products = new HashSet&lt;Product&gt;();
        products.add(p1);
        products.add(p2);

        System.out.println(products);

        // now let's assume that you want to change quantity of P1

        Product newp1 = new Product();
        newp1.setName("P1");
        newp1.setPrice(2.5);
        newp1.setQuantity(2);

        if (products.contains(newp1)) {
            products.remove(newp1);
        }
        products.add(newp1);

        System.out.println("after update:");
        System.out.println(products);
    }

}
</code></pre>

<p>and here is the <code>Product</code> class:</p>

<pre><code>public class Product {

    String name;
    double price;
    int quantity;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Override
    public String toString() {
        return "Product [name=" + name + ", price=" + price + ", quantity="
                + quantity + "]";
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        long temp;
        temp = Double.doubleToLongBits(price);
        result = prime * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Product other = (Product) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (Double.doubleToLongBits(price) != Double
                .doubleToLongBits(other.price))
            return false;
        return true;
    }

}
</code></pre>

<p>Note that I've overridden <code>hashCode</code> and <code>equals</code> without considering the field <code>quantity</code>. A better option could be having two classes: <code>Product</code> with only <code>name</code> and <code>price</code>, and <code>ProductOrder</code> with two fields: a <code>Product</code> and a <code>quantity</code>.</p>
