<p>I developped a solution based on <a href="http://developer.android.com/training/displaying-bitmaps/load-bitmap.html" rel="nofollow">http://developer.android.com/training/displaying-bitmaps/load-bitmap.html</a> tutorial. Here is my code. The tricky part consist of using a byte array to store image data (because unfortunatly <code>markSupported</code>() is not available for <code>connection.getInputStream()</code>).</p>

<pre><code>    public static Bitmap getBitmapFromURL(final String imageUrl, final Options options, int reqWidth, int reqHeight) {
    try {
        URL url = new URL(imageUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setDoInput(true);
        connection.connect();
        final InputStream input = connection.getInputStream();
        // using byte array to prevent open 2 times a stream
        final BufferedInputStream bis = new BufferedInputStream(input, 4*1024);
        ByteArrayBuffer baf = new ByteArrayBuffer(50);
        int current = 0;
        while ((current = bis.read()) != -1) {
            baf.append((byte)current);
        }
        bis.close();
        byte[] imageData = baf.toByteArray();
        if(options != null){
            // First decode with inJustDecodeBounds=true to check dimensions
            final BitmapFactory.Options optionsSize = new BitmapFactory.Options();
            optionsSize.inJustDecodeBounds = true;


            BitmapFactory.decodeByteArray(imageData, 0, imageData.length, optionsSize);

            // Calculate inSampleSize
            options.inSampleSize = calculateInSampleSize(optionsSize, reqWidth, reqHeight);

            // Decode bitmap with inSampleSize set
            optionsSize.inJustDecodeBounds = false;

        }
        Bitmap myBitmap = null;
        if(options == null){
            myBitmap = BitmapFactory.decodeByteArray(imageData, 0, imageData.length);
        }
        else{
            myBitmap = BitmapFactory.decodeByteArray(imageData, 0, imageData.length, options);
        }
        // close the stream;
        input.close();
        return myBitmap;
    } catch (Exception e) {
        return null;
    }
}

private static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
    // Raw height and width of image
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {

        final int halfHeight = height / 2;
        final int halfWidth = width / 2;

        // Calculate the largest inSampleSize value that is a power of 2 and keeps both
        // height and width larger than the requested height and width.
        while ((halfHeight / inSampleSize) &gt; reqHeight
                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
            inSampleSize *= 2;
        }
    }

    return inSampleSize;
}
</code></pre>

<p>Hope it will helps you.</p>
