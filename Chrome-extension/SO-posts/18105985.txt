<p>I've been having a play with this. It seems the question is as much one of Mathematics as it is of computing. </p>

<p>First thing's first. The actual contents of the if statement are a complete red herring as they are dependent on the contents of the array. I have used the first x natural numbers starting from 0 (effectively the index of the array) and as such the if statement never resolves to true.</p>

<p>To test the assertion that the if statement is <em>accessed</em> n(n-1)(n-2) times I have changed the code to the following:</p>

<pre><code>public class Iteration {



public static void main(String[] args) {
    int[] a = {0,1,2,3,4};

    System.out.println(count(a));



}

public static int count(int a[]) {
    int N = a.length;
    int cnt = 0;
    int access = 0;

    for (int i = 0; i &lt; N; i++) {

        for (int j = i + 1; j &lt; N; j++) {
            for (int k = j + 1; k &lt; N; k++) {

                access++;
                System.out.println(access + " " +a[i] + a[j] + a[k]);
                if (a[i] + a[j] + a[k] == 0 ) {  //here 
                    cnt++;
                }
            }
        }
    } 
    return cnt;
}
}
</code></pre>

<p>The console return from this is the following:</p>

<blockquote>
  <p>1 012 
  2 013 
  3 014 
  4 023 
  5 024 
  6 034 
  7 123 
  8 124 
  9 134 
  10 234 
  0</p>
</blockquote>

<p>That is the count of unique combinations of the integers provided. So I have looked up the formula for unique combinations of three digits from <a href="http://www.mathsisfun.com/combinatorics/combinations-permutations-calculator.html" rel="nofollow">Maths is fun</a>.</p>

<p>A brief synopsis of the '6' in the formula then. As each combination of 3 digits is appearing only once consider how many times you could order 3 digits (lets look at 1, 2 and 3):</p>

<blockquote>
  <p>123 132 213 231 312 321</p>
</blockquote>

<p>6 times! but as this combination is appearing only once (123) we divide the total by 6 to find how many are returned. The details on the maths are further described on the link above, including the general solution regardless of the number of integers used, and the size of the loop.</p>
