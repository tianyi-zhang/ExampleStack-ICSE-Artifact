<p>I have used a Custom ListView with a Custom Adapter and a ItemsHolder class with getter and setters.</p>

<p>To change</p>

<ol>
<li>Get the position of the item. </li>
<li>Change the item at the position.</li>
<li>Call<code>notifyDataSetChanged()</code> on your adapter to refresh listview.</li>
</ol>

<p>Example:</p>

<pre><code>ItemsHolder ih = hold.get(position);
ih.setImage(decodeImage(R.drawable.appicon));
ih.setName("Changed");
cus.notifyDataSetChanged();
</code></pre>

<p>test.xml    </p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"

tools:context=".MenuActivity" &gt;

&lt;ListView
    android:id="@+id/listView_Menu"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    &gt;

&lt;/ListView&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>list_item.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" &gt;

&lt;ImageView
    android:id="@+id/imageView_List_Item"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_centerHorizontal="true"
    android:contentDescription="@string/app_name"
    android:src="@drawable/ic_launcher" /&gt;

&lt;TextView
    android:id="@+id/textView1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_below="@+id/imageView_List_Item"
    android:layout_centerHorizontal="true"
    android:layout_marginTop="28dp"
    android:text="TextView" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>MainActivity.java</p>

<pre><code>public class MainActivity extends Activity {
ArrayList&lt;ItemsHolder&gt; hold= new ArrayList&lt;ItemsHolder&gt;();
CustomAdapter cus;
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.test);
    Bitmap[] images = {decodeImage(R.drawable.ic_launcher),decodeImage(R.drawable.ic_launcher)};
    ListView list = (ListView)findViewById(R.id.listView_Menu);
    hold.add(new ItemsHolder(images[0],"image1"));
    hold.add(new ItemsHolder(images[1],"image2"));
     cus = new CustomAdapter(hold);
     list.setAdapter(cus);
     list.setOnItemClickListener(new OnItemClickListener()
     {
         public void onItemClick(AdapterView&lt;?&gt; parent, View
                 view, int position, long id)
         {
                ItemsHolder ih = hold.get(position);
                ih.setImage(decodeImage(R.drawable.appicon));
                ih.setName("Changed");
                cus.notifyDataSetChanged();

         }
     });

}
private Bitmap decodeImage(int res) {
    Bitmap bitmap = BitmapFactory.decodeResource(getResources(),res);               
    return bitmap;      
}
class ItemsHolder
{
    Bitmap image;
    String name;
    public ItemsHolder(Bitmap bitmap, String string) {
        // TODO Auto-generated constructor stub
        image = bitmap;
        name =string;
    }
    public Bitmap getImage() {
        return image;
    }
    public void setImage(Bitmap image) {
        this.image = image;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

}
class CustomAdapter extends BaseAdapter
{

    LayoutInflater inflater;
    ArrayList&lt;ItemsHolder&gt; list;
    public CustomAdapter(ArrayList&lt;ItemsHolder&gt; list)
    {
        this.list=list;
        inflater= LayoutInflater.from(MainActivity.this);

    }
    @Override
    public int getCount() {
        // TODO Auto-generated method stub
        return list.size();
    }
    @Override
    public Object getItem(int arg0) {
        // TODO Auto-generated method stub
        return arg0;
    }
    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
        return 0;
    }
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // TODO Auto-generated method stub
        ViewHolder holder;
        if(convertView==null)
        {
            holder = new ViewHolder();
            convertView = inflater.inflate(R.layout.list_item, null);
            holder.iv= (ImageView) convertView.findViewById(R.id.imageView_List_Item);
            holder.tv = (TextView) convertView.findViewById(R.id.textView1);
            convertView.setTag(holder);
        }
        else {
            holder = (ViewHolder)convertView.getTag();
        }
        ItemsHolder ih = list.get(position);
        holder.iv.setImageBitmap(ih.getImage());
        holder.tv.setText(ih.getName());
        return convertView;
    }

}
class ViewHolder
{
    ImageView iv;
    TextView tv;
}
}
</code></pre>

<p>Snaps</p>

<p><img src="http://i.stack.imgur.com/l3ZFH.png" alt="enter image description here"></p>

<p><img src="http://i.stack.imgur.com/SJ39x.png" alt="enter image description here"></p>

<p>Edit:</p>

<p>To your question in the comment</p>

<p>listbkg.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;selector xmlns:android="http://schemas.android.com/apk/res/android"&gt;
    &lt;item android:state_pressed="true" 

        android:drawable="@drawable/appicon" /&gt;
    &lt;item  android:state_focused="false" 
        android:drawable="@drawable/ic_launcher" /&gt;
&lt;/selector&gt;
</code></pre>

<p>Then for ImageView in xml</p>

<pre><code>android:background="@drawable/listbkg" 
</code></pre>
