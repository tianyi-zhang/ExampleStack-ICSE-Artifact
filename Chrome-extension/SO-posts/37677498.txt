<p>You got it wrong. The token_id is the actual access_token that spring oauth2 config creates. Before it stores the token_id on your persistent storage(e.g Postgresql) the generated token_id is digested through MD5. Which can be found here. </p>

<p>You can always use <a href="https://www.postgresql.org/docs/9.4/static/functions-binarystring.html" rel="nofollow">encode</a> from postgresql. However I highly doubt that you can easily parse</p>

<p>if you want other applications to translate/decode it back to its regular string form. You'll have to use this.</p>

<pre><code>   String token_id =  "ceb589c0-8a01-4513-96d9-6ed10d6f8c77";

        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance("MD5");
        }
        catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException("MD5 algorithm not available.  Fatal (should be in the JDK).");
        }

        try {
            byte[] bytes = digest.digest(token_id.getBytes("UTF-8"));
            System.out.println(String.format("%032x", new BigInteger(1, bytes))) ;
        }
        catch (UnsupportedEncodingException e) {
            throw new IllegalStateException("UTF-8 encoding not available.  Fatal (should be in the JDK).");
        }
</code></pre>

<p>That being said. You must let the other application use that some sort of approach in order for you to translate it back to the access_token you have received from Spring oauth2</p>
