<p>If you are looking at Depth First Traversal then following is the code changes you should make</p>

<p>1) First declare your node array as  <code>int[] node = {0, 1, 2, 3, 4, 5, 6}</code>. This should be done to avoid array index start (which is 0 ) and your node start number (which is 1). SO here now we assume that new names of your node 1 is 0, node 2 is 1......and node 7 is 6.</p>

<p>2) Instead of doing  </p>

<pre><code>for (i = 1; i &lt; node.length-1; i++){
     depthFirst(firstNode, node[i]);
 } 
</code></pre>

<p>in myGraphs do :
depthFirst(firstNode, 7);</p>

<p>3)In depthFirst instead of <code>for ( i=1;i&lt;=n;i++)</code> use <code>for ( i=0;i&lt;n;i++)</code> While doing System.out.println in function depthFirst add one to the number as 0 represents node 1, 1 represents node 2 and so on.</p>

<p>Below is your fully functional code I modified :</p>

<pre><code>import java.util.Stack;


public class DFS {

    Stack&lt;Integer&gt; st;
      int vFirst;

      int[][] adjMatrix;
      int[] isVisited = new int[7];

    /**
     * @param args
     */
    public static void main(String[] args) {
        int[][] adjMatrix = { {0, 1, 1, 0, 0, 0, 0},
                {1, 0, 0, 1, 1, 1, 0},
                {1, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 0, 0, 0, 1},
                {0, 1, 0, 0, 0, 0, 1},
                {0, 1, 0, 0, 0, 0 ,0},
                {0, 0, 1, 1, 1, 0, 0}  };


      new DFS(adjMatrix);

    }

    public DFS(int[][] Matrix) {

         this.adjMatrix = Matrix;
         st = new Stack&lt;Integer&gt;();
         int i;
         int[] node = {0, 1, 2, 3, 4, 5, 6};
         int firstNode = node[0];
         depthFirst(firstNode, 7);



          }

          public void depthFirst(int vFirst,int n)
          {
          int v,i;

          st.push(vFirst);

          while(!st.isEmpty())
          {
              v = st.pop();
              if(isVisited[v]==0)
              {
                  System.out.print("\n"+(v+1));
                  isVisited[v]=1;
              }
              for ( i=0;i&lt;n;i++)
              {
                  if((adjMatrix[v][i] == 1) &amp;&amp; (isVisited[i] == 0))
                  {
                      st.push(v);
                      isVisited[i]=1;
                      System.out.print(" " + (i+1));
                      v = i;
                  }
              }
          }
}}
</code></pre>
