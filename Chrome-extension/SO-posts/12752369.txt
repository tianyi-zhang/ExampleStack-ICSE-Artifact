<p>java <code>indexOf</code> function complexity is <code>O(n*m)</code> where n is length of the text and m is a length of pattern<br>
here is <code>indexOf</code> original code  </p>

<pre><code>   /**
     * Returns the index within this string of the first occurrence of the
     * specified substring. The integer returned is the smallest value
     * &lt;i&gt;k&lt;/i&gt; such that:
     * &lt;blockquote&gt;&lt;pre&gt;
     * this.startsWith(str, &lt;i&gt;k&lt;/i&gt;)
     * &lt;/pre&gt;&lt;/blockquote&gt;
     * is &lt;code&gt;true&lt;/code&gt;.
     *
     * @param   str   any string.
     * @return  if the string argument occurs as a substring within this
     *          object, then the index of the first character of the first
     *          such substring is returned; if it does not occur as a
     *          substring, &lt;code&gt;-1&lt;/code&gt; is returned.
     */
    public int indexOf(String str) {
    return indexOf(str, 0);
    }

    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring, starting at the specified index.  The integer
     * returned is the smallest value &lt;tt&gt;k&lt;/tt&gt; for which:
     * &lt;blockquote&gt;&lt;pre&gt;
     *     k &amp;gt;= Math.min(fromIndex, this.length()) &amp;&amp; this.startsWith(str, k)
     * &lt;/pre&gt;&lt;/blockquote&gt;
     * If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.
     *
     * @param   str         the substring for which to search.
     * @param   fromIndex   the index from which to start the search.
     * @return  the index within this string of the first occurrence of the
     *          specified substring, starting at the specified index.
     */
    public int indexOf(String str, int fromIndex) {
        return indexOf(value, offset, count,
                       str.value, str.offset, str.count, fromIndex);
    }

    /**
     * Code shared by String and StringBuffer to do searches. The
     * source is the character array being searched, and the target
     * is the string being searched for.
     *
     * @param   source       the characters being searched.
     * @param   sourceOffset offset of the source string.
     * @param   sourceCount  count of the source string.
     * @param   target       the characters being searched for.
     * @param   targetOffset offset of the target string.
     * @param   targetCount  count of the target string.
     * @param   fromIndex    the index to begin searching from.
     */
    static int indexOf(char[] source, int sourceOffset, int sourceCount,
                       char[] target, int targetOffset, int targetCount,
                       int fromIndex) {
    if (fromIndex &gt;= sourceCount) {
            return (targetCount == 0 ? sourceCount : -1);
    }
        if (fromIndex &lt; 0) {
            fromIndex = 0;
        }
    if (targetCount == 0) {
        return fromIndex;
    }

        char first  = target[targetOffset];
        int max = sourceOffset + (sourceCount - targetCount);

        for (int i = sourceOffset + fromIndex; i &lt;= max; i++) {
            /* Look for first character. */
            if (source[i] != first) {
                while (++i &lt;= max &amp;&amp; source[i] != first);
            }

            /* Found first character, now look at the rest of v2 */
            if (i &lt;= max) {
                int j = i + 1;
                int end = j + targetCount - 1;
                for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j] ==
                         target[k]; j++, k++);

                if (j == end) {
                    /* Found whole string. */
                    return i - sourceOffset;
                }
            }
        }
        return -1;
    }
</code></pre>

<p>you can simply implements the <code>KMP</code> algorithm without using of <code>indexOf</code> Like this</p>

<pre><code>import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Scanner;


public class Main{
    int failure[];
    int i,j;
    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
    PrintWriter out=new PrintWriter(System.out);
    String pat="",str="";
    public Main(){
            try{

            int patLength=Integer.parseInt(in.readLine());
            pat=in.readLine();
            str=in.readLine();
            fillFailure(pat,patLength);
            match(str,pat,str.length(),patLength);
            out.println();
            failure=null;}catch(Exception e){}

        out.flush();
    }
    public void fillFailure(String pat,int patLen){
        failure=new int[patLen];
        failure[0]=-1;
        for(i=1;i&lt;patLen;i++){
            j=failure[i-1];
            while(j&gt;=0&amp;&amp;pat.charAt(j+1)!=pat.charAt(i))
                j=failure[j];
            if(pat.charAt(j+1)==pat.charAt(i))
                failure[i]=j+1;
            else
                failure[i]=-1;
        }
    }
    public void match(String str,String pat,int strLen,int patLen){
        i=0;
        j=0;
        while(i&lt;strLen){
            if(str.charAt(i)==pat.charAt(j)){
                i++;
                j++;
                if(j==patLen){
                    out.println(i-j);
                    j=failure[j-1]+1;
                }
            } else if (j==0){
                    i++;
            }else{
                j=failure[j-1]+1;
            }

        }
    }
    public static void main(String[] args) {
        new Main();
    }
}
</code></pre>
