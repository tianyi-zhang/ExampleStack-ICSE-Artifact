<p>For those looking for a general solution, these might be common critera:</p>

<ul>
<li>The filename should resemble the string. </li>
<li>The encoding should be reversible where possible. </li>
<li>The probability of collisions should be minimized.</li>
</ul>

<p>To achieve this we can use regex to match illegal characters, <a href="http://en.wikipedia.org/wiki/Percent-encoding">percent-encode</a> them, then constrain the length of the encoded string. </p>

<pre><code>private static final Pattern PATTERN = Pattern.compile("[^A-Za-z0-9_\\-]");

private static final int MAX_LENGTH = 127;

public static String escapeStringAsFilename(String in){

    StringBuffer sb = new StringBuffer();

    // Apply the regex.
    Matcher m = PATTERN.matcher(in);

    while (m.find()) {

        // Convert matched character to percent-encoded.
        String replacement = "%"+Integer.toHexString(m.group().charAt(0)).toUpperCase();

        m.appendReplacement(sb,replacement);
    }
    m.appendTail(sb);

    String encoded = sb.toString();

    // Truncate the string.
    int end = Math.min(encoded.length(),MAX_LENGTH);
    return encoded.substring(0,end);
}
</code></pre>

<p><strong>Patterns</strong></p>

<p>The pattern above is based on a <a href="http://stackoverflow.com/questions/2304221/what-character-sequence-should-i-not-allow-in-a-filename">conservative subset of allowed characters in the POSIX spec</a>.</p>

<p>If you want to allow the dot character, use:</p>

<pre><code>private static final Pattern PATTERN = Pattern.compile("[^A-Za-z0-9_\\-\\.]");
</code></pre>

<p>Just be wary of strings like "." and ".."</p>

<p>If you want to avoid collisions on case insensitive filesystems, you'll need to escape capitals:</p>

<pre><code>private static final Pattern PATTERN = Pattern.compile("[^a-z0-9_\\-]");
</code></pre>

<p>Or escape lower case letters:</p>

<pre><code>private static final Pattern PATTERN = Pattern.compile("[^A-Z0-9_\\-]");
</code></pre>

<p>Rather than using a whitelist, you may choose to blacklist reserved characters for your specific filesystem. E.G. This regex suits FAT32 filesystems:</p>

<pre><code>private static final Pattern PATTERN = Pattern.compile("[%\\.\"\\*/:&lt;&gt;\\?\\\\\\|\\+,\\.;=\\[\\]]");
</code></pre>

<p><strong>Length</strong></p>

<p><a href="http://stackoverflow.com/questions/13204807/max-file-name-length-in-android">On Android, 127 characters</a> is the safe limit. <a href="http://en.wikipedia.org/wiki/Comparison_of_file_systems">Many filesystems allow 255 characters.</a></p>

<p>If you prefer to retain the tail, rather than the head of your string, use:</p>

<pre><code>// Truncate the string.
int start = Math.max(0,encoded.length()-MAX_LENGTH);
return encoded.substring(start,encoded.length());
</code></pre>

<p><strong>Decoding</strong></p>

<p>To convert the filename back to the original string, use:</p>

<pre><code>URLDecoder.decode(filename, "UTF-8");
</code></pre>

<p><strong>Limitations</strong></p>

<p>Because longer strings are truncated, there is the possibility of a name collision when encoding, or corruption when decoding.</p>
