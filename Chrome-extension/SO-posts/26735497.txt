<blockquote>
  <p>I am writing my own background location updates for interval of every <em>5 minutes</em> in android. I would like to know the difference between <code>setInterval</code>and <code>setFastestInterval</code> </p>
</blockquote>

<p>Assume that the <code>setFastestInterval();</code> has higher priority for requesting a <code>Location</code>. To whatever app you set the <code>setFastestInterval();</code> it will be that app that will be executed first (even if other apps are using <code>LocationServices</code>). </p>

<p>ex: If <strong>APP1</strong> has <code>setFastestInterval(1000 * 10)</code> and <strong>APP2</strong> has <code>setInterval(1000 * 10)</code>, <strong>both APPS</strong> have same request interval. But it is the <strong>APP1</strong> that will make the first request. (this is what i have understood, the answer is not correct maybe)</p>

<blockquote>
  <p>When I <code>setInterval</code> to <em>5 mins</em> and <code>setFastestInterval</code> to <em>2 mins</em>. The <code>location update</code> is called every <em>2 mins</em>.</p>
</blockquote>

<p>If you are using <code>setFastestInterval()</code> together with the <code>setInterval()</code> the app will try to make a request for the time given in the <code>setFastestInterval()</code>, that's why your app makes a request every <em>2mins</em>.</p>

<blockquote>
  <p>Also: Is there an inbuilt function to check the location updates only if the distances of the first update are more than 20meters with the second update? </p>
</blockquote>

<p>For Making request every 20 meters you can create a <code>LocationModel</code></p>

<pre><code>    public class LocationModel {
    private double latitude;

    private double longitude;
    public LocationModel(){
    }

    public double getLatitude() {
        return latitude;
    }

    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    public double getLongitude() {
        return longitude;
    }

    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }
}
</code></pre>

<p>and in the first request you set the <code>lat</code> and <code>long</code> to current location (using <code>getLastLocation();</code>) </p>

<p>then <code>onLocationChanged()</code> you get the data from the object and compare with the <code>new Current Location</code> </p>

<pre><code>float distanceInMeters = distFrom((float)locationObj.getLatitude(), (float)locationObj.getLongitude(), (float)mCurrentLocation.getLatitude(), (float)mCurrentLocation.getLongitude());
</code></pre>

<p>using this function which is also a suggestion of users of <code>SO</code></p>

<pre><code>public static float distFrom(float lat1, float lng1, float lat2, float lng2) {
    double earthRadius = 6371; //kilometers
    double dLat = Math.toRadians(lat2-lat1);
    double dLng = Math.toRadians(lng2-lng1);
    double a = Math.sin(dLat/2) * Math.sin(dLat/2) +
            Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
                    Math.sin(dLng/2) * Math.sin(dLng/2);
    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    float dist = (float) (earthRadius * c);

    return dist;
}
</code></pre>
