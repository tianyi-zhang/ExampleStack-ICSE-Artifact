<p><em>"I think it's the view responsibility to filter what it displays"</em> - I'd argue that, the view displays what it's told, the model drives what it can show, but that's me...</p>

<p>This is an idea I wrote way back in Java 1.3 (with generic updates) which basically wraps a proxy <code>ComboBoxModel</code> around another <code>ComboBoxModel</code>.  The proxy (or <code>FilterableComboBoxModel</code>) then makes decisions about which elements from the original model match a filter and updates it's indices.</p>

<p>Basically, all it does is generates an index map between itself and the original model, so it's not copying anything or generating new references to the original data.</p>

<p>The filtering is controlled via a "filterable" interface which simply passes the element to be checked and expects a <code>boolean</code> result in response.  This makes the API highly flexible as filtering can be done any way you want without the need to change the <code>FilterableComboBoxModel</code> in any way.  It also means you can change the filter been used by simply applying a new one...</p>

<p>If, like I usually do, you want to pass some value to the filter, you will need to inform the model that the filter has changed, via the <code>updateFilter</code> method...yeah, I know, a <code>ChangeListener</code> would probably be a better idea, but I was trying to keep it simple ;)</p>

<p>For flexibility (and to maintain the current inheritance model), the core API is based on a <code>ListModel</code>, which means, you can also use the same concept with a <code>JList</code></p>

<h1>FilterableListModel</h1>

<pre><code>import java.util.ArrayList;
import java.util.List;
import javax.swing.AbstractListModel;
import javax.swing.ListModel;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

public class FilterableListModel&lt;E&gt; extends AbstractListModel&lt;E&gt; implements ListDataListener {

    private ListModel&lt;E&gt; peer;
    private List&lt;Integer&gt; lstFilteredIndicies;
    private IFilterable filter;

    public FilterableListModel() {
        lstFilteredIndicies = new ArrayList&lt;Integer&gt;(25);
    }

    public FilterableListModel(ListModel&lt;E&gt; model) {
        this();
        setModel(model);
    }

    public FilterableListModel(ListModel&lt;E&gt; model, IFilterable filter) {
        this();

        setModel(model);
        setFilter(filter);
    }

    public void setModel(ListModel&lt;E&gt; parent) {
        if (peer == null || !peer.equals(parent)) {
            if (peer != null) {
                fireIntervalRemoved(this, 0, peer.getSize() - 1);
                peer.removeListDataListener(this);
            }

            peer = parent;
            lstFilteredIndicies.clear();
            if (peer != null) {
                peer.addListDataListener(this);
            }
            filterModel(true);
        }
    }

    public ListModel&lt;E&gt; getModel() {
        return peer;
    }

    @Override
    public int getSize() {
        IFilterable filter = getFilter();
        return filter == null ? getModel() == null ? 0 : getModel().getSize() : lstFilteredIndicies.size();
    }

    @Override
    public E getElementAt(int index) {
        IFilterable filter = getFilter();
        ListModel&lt;E&gt; model = getModel();

        E value = null;
        if (filter == null) {
            if (model != null) {
                value = model.getElementAt(index);
            }
        } else {
            int filterIndex = lstFilteredIndicies.get(index);
            value = model.getElementAt(filterIndex);
        }
        return value;
    }

    public int indexOf(Object value) {
        int index = -1;
        for (int loop = 0; loop &lt; getSize(); loop++) {
            Object at = getElementAt(loop);
            if (at == value) {
                index = loop;
                break;
            }
        }
        return index;
    }

    @Override
    public void intervalAdded(ListDataEvent e) {
        IFilterable filter = getFilter();
        ListModel model = getModel();

        if (model != null) {
            if (filter != null) {
                int startIndex = Math.min(e.getIndex0(), e.getIndex1());
                int endIndex = Math.max(e.getIndex0(), e.getIndex1());
                for (int index = startIndex; index &lt;= endIndex; index++) {
                    Object value = model.getElementAt(index);
                    if (filter.include(value)) {
                        lstFilteredIndicies.add(index);
                        int modelIndex = lstFilteredIndicies.indexOf(index);
                        fireIntervalAdded(this, modelIndex, modelIndex);
                    }
                }
            } else {
                fireIntervalAdded(this, e.getIndex0(), e.getIndex1());
            }
        }
    }

    @Override
    public void intervalRemoved(ListDataEvent e) {
        IFilterable filter = getFilter();
        ListModel model = getModel();

        if (model != null) {
            if (filter != null) {
                int oldRange = lstFilteredIndicies.size();
                filterModel(false);
                fireIntervalRemoved(this, 0, oldRange);
                if (lstFilteredIndicies.size() &gt; 0) {
                    fireIntervalAdded(this, 0, lstFilteredIndicies.size());
                }
            } else {
                fireIntervalRemoved(this, e.getIndex0(), e.getIndex1());
            }
        }
    }

    @Override
    public void contentsChanged(ListDataEvent e) {
        filterModel(true);
    }

    public void setFilter(IFilterable&lt;E&gt; value) {
        if (filter == null || !filter.equals(value)) {
            filter = value;
            if (getModel() != null) {
                if (getModel().getSize() &gt; 0) {
                    fireIntervalRemoved(this, 0, getModel().getSize() - 1);
                }
            }
            filterModel(true);
        }
    }

    public IFilterable&lt;E&gt; getFilter() {
        return filter;
    }

    protected void filterModel(boolean fireEvent) {
        if (getSize() &gt; 0 &amp;&amp; fireEvent) {
            fireIntervalRemoved(this, 0, getSize() - 1);
        }
        lstFilteredIndicies.clear();

        IFilterable&lt;E&gt; filter = getFilter();
        ListModel&lt;E&gt; model = getModel();
        if (filter != null &amp;&amp; model != null) {
            for (int index = 0; index &lt; model.getSize(); index++) {
                E value = model.getElementAt(index);
                if (filter.include(value)) {
                    lstFilteredIndicies.add(index);
                    if (fireEvent) {
                        fireIntervalAdded(this, getSize() - 1, getSize() - 1);
                    }
                }
            }
        }
    }

    public void updateFilter() {
        IFilterable filter = getFilter();
        ListModel model = getModel();

        if (filter != null &amp;&amp; model != null) {
            for (int index = 0; index &lt; model.getSize(); index++) {
                Object value = model.getElementAt(index);
                if (filter.include(value)) {
                    if (!lstFilteredIndicies.contains(index)) {
                        lstFilteredIndicies.add(index);
                        fireIntervalAdded(this, getSize() - 1, getSize() - 1);
                    }
                } else if (lstFilteredIndicies.contains(index)) {
                    int oldIndex = lstFilteredIndicies.indexOf(index);
                    lstFilteredIndicies.remove(oldIndex);
                    fireIntervalRemoved(this, oldIndex, oldIndex);
                }
            }
        }
    }
}
</code></pre>

<h1>Filterable</h1>

<pre><code>public interface IFilterable&lt;O&gt; {

    public boolean include(O value);

}
</code></pre>

<h1>FilterableComboBoxModel</h1>

<pre><code>import javax.swing.ComboBoxModel;

public class FilterableComboBoxModel&lt;E&gt; extends FilterableListModel&lt;E&gt; implements ComboBoxModel&lt;E&gt; {

    private FilterableComboBoxModel(ComboBoxModel&lt;E&gt; model) {
        super(model);
    }

    public ComboBoxModel&lt;E&gt; getComboBoxModel() {
        return (ComboBoxModel) getModel();
    }

    @Override
    public void setSelectedItem(Object anItem) {
        getComboBoxModel().setSelectedItem(anItem);
    }

    @Override
    public Object getSelectedItem() {
        return getComboBoxModel().getSelectedItem();
    }

}
</code></pre>

<p>It should be noted that it might actually be possible to use a <a href="https://docs.oracle.com/javase/7/docs/api/javax/swing/RowFilter.html" rel="nofollow"><code>RowFilter</code></a> instead, but I've never really had the time to look at it (since I already had a working API)</p>
