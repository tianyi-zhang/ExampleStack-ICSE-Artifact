<p>I found a murmurhash3 implementation that uses an offset for those interested, problem solved.</p>

<p>public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {</p>

<pre><code>final int c1 = 0xcc9e2d51;
final int c2 = 0x1b873593;

int h1 = seed;
int roundedEnd = offset + (len &amp; 0xfffffffc);  // round down to 4 byte block

for (int i=offset; i&lt;roundedEnd; i+=4) {
  // little endian load order
  int k1 = (data[i] &amp; 0xff) | ((data[i+1] &amp; 0xff) &lt;&lt; 8) | ((data[i+2] &amp; 0xff) &lt;&lt; 16) | (data[i+3] &lt;&lt; 24);
  k1 *= c1;
  k1 = (k1 &lt;&lt; 15) | (k1 &gt;&gt;&gt; 17);  // ROTL32(k1,15);
  k1 *= c2;

  h1 ^= k1;
  h1 = (h1 &lt;&lt; 13) | (h1 &gt;&gt;&gt; 19);  // ROTL32(h1,13);
  h1 = h1*5+0xe6546b64;
}

// tail
int k1 = 0;

switch(len &amp; 0x03) {
  case 3:
    k1 = (data[roundedEnd + 2] &amp; 0xff) &lt;&lt; 16;
    // fallthrough
  case 2:
    k1 |= (data[roundedEnd + 1] &amp; 0xff) &lt;&lt; 8;
    // fallthrough
  case 1:
    k1 |= (data[roundedEnd] &amp; 0xff);
    k1 *= c1;
    k1 = (k1 &lt;&lt; 15) | (k1 &gt;&gt;&gt; 17);  // ROTL32(k1,15);
    k1 *= c2;
    h1 ^= k1;
}

// finalization
h1 ^= len;

// fmix(h1);
h1 ^= h1 &gt;&gt;&gt; 16;
h1 *= 0x85ebca6b;
h1 ^= h1 &gt;&gt;&gt; 13;
h1 *= 0xc2b2ae35;
h1 ^= h1 &gt;&gt;&gt; 16;

return h1;
</code></pre>

<p>}</p>
