<p>update your filter to this </p>

<pre><code>  @Override
public Filter getFilter() {
    return nameFilter;
}

Filter nameFilter = new Filter() {

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        if (constraint != null) {
            matchedResults.clear();
            for (String item : data) {
                if (item.toLowerCase().startsWith(constraint.toString().toLowerCase())) {
                    matchedResults.add(item);
                }
            }
            FilterResults filterResults = new FilterResults();
            filterResults.values = matchedResults;
            filterResults.count = matchedResults.size();
            return filterResults;
        } else {
            return new FilterResults();
        }
    }

    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        ArrayList&lt;String&gt; filteredList = (ArrayList&lt;String&gt;) results.values;
        if (results != null &amp;&amp; results.count &gt; 0) {
            data.clear();
            for (String c : filteredList) {
                data.add(c);
            }
            notifyDataSetChanged();
        }
    }
};
</code></pre>

<p>So your entire code it be like this :</p>

<pre><code>public class AutoCompleteAdapter extends BaseAdapter implements Filterable {

private Context context;
private ArrayList&lt;String&gt; data;
private ArrayList&lt;String&gt; matchedResults = new ArrayList&lt;String&gt;();

public AutoCompleteAdapter(Context context, ArrayList&lt;String&gt; namesAndNumbers) {
    this.context = context;
    this.data = namesAndNumbers;
}

@Override
public int getCount() {
    return matchedResults.size();
}

@Override
public String getItem(int position) {
    return matchedResults.get(position);
}

@Override
public long getItemId(int position) {
    return position;
}


@Override
public View getView(int position, View convertView, ViewGroup parent) {

    LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View view = inflater.inflate(R.layout.custom_layout, parent, false);

    TextView nameTextView = (TextView) view.findViewById(R.id.name);
    TextView numberTextView = (TextView) view.findViewById(R.id.number);

    String[] split = matchedResults.get(position).split(":");

    nameTextView.setText(split[0]);
    numberTextView.setText(split[1]);

    return view;
}


@Override
public Filter getFilter() {
    return nameFilter;
}

Filter nameFilter = new Filter() {

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        if (constraint != null) {
            matchedResults.clear();
            for (String item : data) {
                if (item.toLowerCase().startsWith(constraint.toString().toLowerCase())) {
                    matchedResults.add(item);
                }
            }
            FilterResults filterResults = new FilterResults();
            filterResults.values = matchedResults;
            filterResults.count = matchedResults.size();
            return filterResults;
        } else {
            return new FilterResults();
        }
    }

    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        ArrayList&lt;String&gt; filteredList = (ArrayList&lt;String&gt;) results.values;
        if (results != null &amp;&amp; results.count &gt; 0) {
            data.clear();
            for (String c : filteredList) {
                data.add(c);
            }
            notifyDataSetChanged();
        }
    }
};

public boolean onlyText(String text) {

    boolean result = false;

    if (Pattern.matches("[a-zA-Z ]+", text) &amp;&amp; text.length() &gt;= 1) {

        result = true;
    }
    return result;
}

public boolean onlyNumbers(String text) {

    boolean result = false;

    if (Pattern.matches("[0-9+]+", text) &amp;&amp; text.length() &gt;= 1) {

        result = true;
    }
    return result;
}
</code></pre>

<p>}</p>

<p>I hope to be helpful for you .</p>
