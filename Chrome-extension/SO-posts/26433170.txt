<p>You should create a custom checkbox and override it's toggle method to do whatever you want with the states. Here is some basic code to exemplify the functionality:</p>

<p>In xml, declare your custom view as follows(change your package name):</p>

<pre><code>&lt;com.example.mike.myapplication.CustomCheckBox
    android:id="@+id/my_checkbox"
    android:text="@string/hello_world"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content" /&gt;
</code></pre>

<p>Then initialize it in your Activity/fragment:</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_home);
    cb = (CustomCheckBox) findViewById(R.id.my_checkbox);
    // You should ALWAYS add this listener!!!!
    cb.addListener(new CustomCheckedChangeListener() {

        @Override
        public void onConfirmCheckDisable() {
            buildDialog();
        }
    });
}

private void buildDialog() {
    new AlertDialog.Builder(this)
        .setTitle("Confirm")
        .setMessage("Are you sure you want to uncheck this entry?")
        .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                   cb.setChecked(false);
              }
        })
       .setNegativeButton(android.R.string.no, new DialogInterface.OnClickListener() {
           public void onClick(DialogInterface dialog, int which) { 
               // do nothing
        }
       })
       .setIcon(android.R.drawable.ic_dialog_alert)
       .show();
}
</code></pre>

<p>This is your Custom checkbox class:</p>

<pre><code>public class CustomCheckBox extends CheckBox {

    private CustomCheckedChangeListener mListener;

    public CustomCheckBox(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public CustomCheckBox(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    public CustomCheckBox(Context context) {
        super(context);
    }

    public void addListener(CustomCheckedChangeListener list){
        mListener = list;
    }

    @Override
    public void toggle() {
        if (mListener == null) return;
        if (isChecked()) {
            mListener.onConfirmCheckDisable();
        } else {
            super.toggle();
        }
    }
}
</code></pre>

<p>And this is your listener:</p>

<pre><code>public interface CustomCheckedChangeListener {

    public void onConfirmCheckDisable();
}
</code></pre>

<p>Does this help?</p>
