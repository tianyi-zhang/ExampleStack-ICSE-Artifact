<p>Yes follow Mimminito. I advice 2 pages since rendering is equally fast for back and forth for 3 pages.</p>

<p>Now if you need the images without lag and the images are on the internet. Make sure you download it and put inside an internalStorageDevice then reuse it if it exist.</p>

<p>my top answer is maybe incorrect for the issue of a memory leak. This new answer is a probable reason for the memory leak is because of the height and width of the image.</p>

<pre><code>private byte[] resizeImage( byte[] input ) {

    if ( input == null ) {
        return null;
    }

    Bitmap bitmapOrg = BitmapFactory.decodeByteArray(input, 0, input.length);

    if ( bitmapOrg == null ) {
        return null;
    }

    int height = bitmapOrg.getHeight();
    int width = bitmapOrg.getWidth();
    int newHeight = 250;

    float scaleHeight = ((float) newHeight) / height;

    // creates matrix for the manipulation
    Matrix matrix = new Matrix();
    // resize the bit map
    matrix.postScale(scaleHeight, scaleHeight);

    // recreate the new Bitmap
    Bitmap resizedBitmap = Bitmap.createBitmap(bitmapOrg, 0, 0,
            width, height, matrix, true);

    bitmapOrg.recycle();

    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    resizedBitmap.compress(CompressFormat.PNG, 0 /*ignored for PNG*/, bos);            

    resizedBitmap.recycle();

    return bos.toByteArray();            
}       
</code></pre>

<p>This top code is for rescalling a bitmap "newHeight" is the new height given to the bitmap.</p>

<p>Now if this doesn't work I am now 100% certain that OP must be overloading the ViewPager with a more views that the android memory can handle. The solution for this is to use a ViewFlipper and use the answer I stated above.</p>
