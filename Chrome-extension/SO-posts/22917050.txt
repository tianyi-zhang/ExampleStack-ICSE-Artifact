<p><a href="https://github.com/commonsguy/cwac-security/blob/master/security/src/com/commonsware/cwac/security/SignatureUtils.java" rel="nofollow">My <code>SignatureUtils</code> class</a> uses <code>SHA-256</code> (available via the Java 7 <strong><code>keytool</code></strong>), and the values line up. Hence, this method should give you the SHA-1 signature hash:</p>

<pre><code>  public static String getSignatureHash(Context ctxt, String packageName)
                                                                         throws NameNotFoundException,
                                                                         NoSuchAlgorithmException {
    MessageDigest md=MessageDigest.getInstance("SHA-1");
    Signature sig=
        ctxt.getPackageManager()
            .getPackageInfo(packageName, PackageManager.GET_SIGNATURES).signatures[0];

    return(toHexStringWithColons(md.digest(sig.toByteArray())));
  }
</code></pre>

<p>where <code>toHexStringWithColons()</code> is based off of <a href="https://stackoverflow.com/a/2197650/115145">this StackOverflow answer</a>:</p>

<pre><code>  public static String toHexStringWithColons(byte[] bytes) {
    char[] hexArray=
        { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',
            'C', 'D', 'E', 'F' };
    char[] hexChars=new char[(bytes.length * 3) - 1];
    int v;

    for (int j=0; j &lt; bytes.length; j++) {
      v=bytes[j] &amp; 0xFF;
      hexChars[j * 3]=hexArray[v / 16];
      hexChars[j * 3 + 1]=hexArray[v % 16];

      if (j &lt; bytes.length - 1) {
        hexChars[j * 3 + 2]=':';
      }
    }

    return new String(hexChars);
  }
</code></pre>

<p>Since SHA-1 <a href="https://en.wikipedia.org/wiki/SHA-1" rel="nofollow">is not a great hash algorithm anymore</a>, and since you can get SHA-256 from <strong><code>keytool</code></strong>, you might consider just using my CWAC-Security library and <code>SignatureUtils</code> directly.</p>
