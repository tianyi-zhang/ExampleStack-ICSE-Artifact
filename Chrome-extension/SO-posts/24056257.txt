<p>You do not need any temporary lists or array because you can reorder the elements <em>in-situ</em>.</p>

<p>This is a simple algorithm:</p>

<ol>
<li>Define two <em>pointers</em>, left and right (initially set to the bounds of the array).</li>
<li>As long as left does not <em>exceed</em> right and <code>nums[left]</code> is even, increment left.</li>
<li>As long as right does not <em>exceed</em> left and <code>nums[right]</code> is odd, decrement right.</li>
<li>If left is still less than right, swap the elements at positions left and right.</li>
<li>Repeat 2,3,4 as long as left is still less than right.</li>
</ol>

<p>Got it? Here some code:</p>

<pre><code>public int[] evenOdd(int[] nums) {
    // (1)
    int left = 0;
    int right = nums.length -1;
    do {
        // (2)
        while (left &lt; right &amp;&amp; nums[left] % 2 == 0)
            left += 1;
        // (3)
        while (right &gt; left &amp;&amp; nums[right] % 2 != 0)
            right -= 1;
        // (4)
        if (left &lt; right) {
            int temp = nums[left];
            nums[left] = nums[right];
            nums[right] = temp;
        }
    } while (left &lt; right);   // (5)
    return nums;
}
</code></pre>
