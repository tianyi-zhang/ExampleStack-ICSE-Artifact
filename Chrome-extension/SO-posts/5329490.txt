<p>First, check the condition explained on <a href="http://loganandandy.tumblr.com/post/613041897/caller-uid-is-different">this post</a>:</p>

<p>[...] If you see an error from the <code>AccountManagerService</code> of the form <code>caller uid XXXX is different than the authenticator's uid</code>, it might be a bit misleading. The ‘authenticator’ in that message is not your authenticator class, it’s what Android understands to be the registered authenticator for the account’s type. The check that happens within the <code>AccountManagerService</code> looks like this:</p>

<pre><code> private void checkCallingUidAgainstAuthenticator(Account account) {
     final int uid = Binder.getCallingUid();
     if (account == null || !hasAuthenticatorUid(account.type, uid)) {
         String msg = "caller uid " + uid + " is different than the authenticator's uid";
         Log.w(TAG, msg);
         throw new SecurityException(msg);
     }
     if (Log.isLoggable(TAG, Log.VERBOSE)) {
         Log.v(TAG, "caller uid " + uid + " is the same as the authenticator's uid");
     }
 }
</code></pre>

<p>Note that <code>hasAuthenticatorUid()</code> takes the <code>account.type</code>. This is where I’d screwed up. I was creating my <code>Account</code> with a type specified by a constant:</p>

<pre><code> class LoginTask {
     Account account = new Account(userId, AuthenticatorService.ACCOUNT_TYPE);
     ...
 }

 class AuthenticatorService extends Service {
     public static final String ACCOUNT_TYPE = "com.joelapenna.foursquared";
     ...
 }
</code></pre>

<p>but this constant did not match the XML definition for my authenticator:</p>

<pre><code> &lt;account-authenticator xmlns:android="/web/20150729061818/http://schemas.android.com/apk/res/android"
        android:accountType="com.joelapenna.foursquared.account" ... /&gt;
</code></pre>

<p>Second, if you are like me and want to embed the sample into your existing app for testing then, make sure you use <code>Constants</code> class that is part of this example and not under <code>android.provider.SyncStateContract</code> package. Because both classes use the same attribute name <code>ACCOUNT_TYPE</code> that is used when creating <code>Account</code> object.</p>
