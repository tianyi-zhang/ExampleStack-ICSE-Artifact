<p>Hi guys 
Thanks for your answers, this discussion seems very intersting,
last night again i tried to implement this function and   i think my solution will work for all cases,</p>

<p>actually I implemented in simpler way so that it can be understandable by everyone </p>

<hr>

<p><strong>There are four cases to check</strong></p>

<ol>
<li>if both childs are null (our targeted case)</li>
<li>if only right child exists (means left child is null)</li>
<li>if only left child exists (means right child is null)</li>
<li>if both childs exists (means node is having left and right childs)</li>
</ol>

<p><strong>One special case</strong>: if you pass input tree directly as null then it is required to handle (one more if block req.)</p>

<pre><code>    public static boolean hasPathSum(TNode root, int sum)
{
    if(root==null) //it is called only if you pass directly null
    return false;

    int subsum = sum-root.data;
    //if(subsum&lt;0) return false; //uncomment this for reducing calls for negative numbers
    if(root.left==null &amp;&amp; root.right==null) //for leaf node
    return (subsum==0);

    if(root.left==null) //if only right child exist
    return hasPathSum(root.right, subsum);

    if(root.right==null)//if only left child exist
    return hasPathSum(root.left, subsum);

    return (hasPathSum(root.left, subsum) || hasPathSum(root.right,subsum));
}
</code></pre>

<p>Please review my code 
will this work for all the binary tree cases? and 
let me know if any changes are required.</p>

<p>-Thanks</p>
