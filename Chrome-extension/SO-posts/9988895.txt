<p>@KSubedi -- create a class for location listener &amp; use objects of class in both your activity.
 You can create class like below or you can edit below as per you requirement or create new one.</p>

<pre><code>    import java.util.Timer;
    import java.util.TimerTask;
    import android.content.Context;
    import android.location.Location;
    import android.location.LocationListener;
    import android.location.LocationManager;
    import android.os.Bundle;

    public abstract class MyLocation {
        Timer timer1;
       static LocationManager lm;
        LocationResult locationResult;
        boolean gps_enabled = false;
        boolean network_enabled = false;

    public boolean getLocation(Context context, LocationResult result)
    {
        //I use LocationResult callback class to pass location value from MyLocation to user code.
        locationResult=result;
        if(MyLocation.lm == null)
            MyLocation.lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);

        //exceptions will be thrown if provider is not permitted.
        try
        {
            gps_enabled = MyLocation.lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
        }
        catch(Exception ex)
        {}
        try
        {
            network_enabled = MyLocation.lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
        }
        catch(Exception ex)
        {}

        //don't start listeners if no provider is enabled
        if(!gps_enabled &amp;&amp; !network_enabled)
            return false;

        if(gps_enabled)
            MyLocation.lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);
         if(network_enabled)
             MyLocation.lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);
        timer1=new Timer();
       // timer1.schedule(new GetLastLocation(), 20000);
        timer1.scheduleAtFixedRate(new GetLastLocation(), 0,50000);
        return true;
    }

    LocationListener locationListenerGps = new LocationListener() {
        public void onLocationChanged(Location location) {
            timer1.cancel();
            locationResult.gotLocation(location);
            MyLocation.lm.removeUpdates(this);
            MyLocation.lm.removeUpdates(locationListenerNetwork);
        }
        public void onProviderDisabled(String provider) {}
        public void onProviderEnabled(String provider) {}
        public void onStatusChanged(String provider, int status, Bundle extras) {}
    };

    LocationListener locationListenerNetwork = new LocationListener() {
        public void onLocationChanged(Location location) {
            timer1.cancel();
            locationResult.gotLocation(location);
            MyLocation.lm.removeUpdates(this);
            MyLocation.lm.removeUpdates(locationListenerGps);
        }
        public void onProviderDisabled(String provider) {}
        public void onProviderEnabled(String provider) {}
        public void onStatusChanged(String provider, int status, Bundle extras) {}
    };

    class GetLastLocation extends TimerTask {
        @Override
        public void run() {
//             lm.removeUpdates(locationListenerGps);
//             lm.removeUpdates(locationListenerNetwork);

             Location net_loc=null, gps_loc=null;
             if(gps_enabled)
                 gps_loc = MyLocation.lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
             if(network_enabled)
                 net_loc = MyLocation.lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);

             //if there are both values use the latest one
             if(gps_loc!=null &amp;&amp; net_loc!=null){
                 if(gps_loc.getTime()&gt;net_loc.getTime())
                     locationResult.gotLocation(gps_loc);
                 else
                     locationResult.gotLocation(net_loc);
                 return;
             }

             if(gps_loc!=null){
                 locationResult.gotLocation(gps_loc);
                 return;
             }
             if(net_loc!=null){
                 locationResult.gotLocation(net_loc);
                 return;
             }
             locationResult.gotLocation(null);
        }
    }
    public void closeListeners(){
          timer1.cancel();
      lm.removeUpdates(locationListenerGps);
      lm.removeUpdates(locationListenerNetwork);
    }

    public static abstract class LocationResult{
        public abstract void gotLocation(Location location);
    }
    public  abstract void locationClick() ;
}
</code></pre>
