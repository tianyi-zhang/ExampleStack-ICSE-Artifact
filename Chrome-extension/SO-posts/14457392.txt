<h3>At first,</h3>

<p>WebView takes more memory than ImageView.
So I recommend you to use ImageView.</p>

<h3>At Second,</h3>

<p>Check out following URLs.</p>

<p><a href="http://stackoverflow.com/questions/541966/how-do-i-do-a-lazy-load-of-images-in-listview/3068012#3068012">How do I do a lazy load of images in ListView</a></p>

<p>In this article,
The first library, which I have used, is small and customizable library.
It uses thread pool and seems to control transfers.
The second library, which I haven't used, is larger.
But more methods in this library seem to make it easy to control various configurations.</p>

<h3>Finally,</h3>

<p>I think you should create your own Adapter, extending SimpleAdapter(or CursorAdapter, orâ€¦).
like following pseudo code.</p>

<pre><code>public class MySimpleAdapter extends SimpleAdapter {
    private ImageLoader mImageLoader;
    private int mResource;
    private LayoutInflater inflater;
    public static class ViewHolder {
        public ImageView img;
        public TextView txt;
    }

    public MySimpleAdapter(Context context, List&lt;? extends Map&lt;String, ?&gt;&gt; data, int resource, String[] from, int[] to) {
        super(context, data, resource, from, to);
        mResource = resource;
        mImageLoader = new ImageLoader(context);
        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if (convertView == null) {
            convertView = inflater.inflate(R.layout.cell_text, null);
            holder      = new ViewHolder();
            holder.txt  = (TextView) convertView.findViewById(R.id.txt);
            holder.img  = (ImageView) convertView.findViewById(R.id.img);
            convertView.setTag(holder);
        }
        else {
            holder = (ViewHolder) convertView.getTag();
        }
        holder.txt.setText("something text");
        mImageLoader.displayImage("url", holder.img);
        return convertView;
    }
}
</code></pre>
