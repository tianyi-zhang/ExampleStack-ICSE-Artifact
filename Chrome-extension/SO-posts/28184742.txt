<p>It's because in the <code>getCount()</code> method of your CustomGrid class, you're returning the size of the <code>Description[]</code> array; and <code>String[] Description = new String[responseJson.length()];</code>, together with <code>CustomGrid adapter = new CustomGrid(getActivity(), Description, ImageURL);</code> in your ListFragment class caused the grid to see 28 items (<code>Description[]</code> array's size) instead of 18 items that have <code>"MainCategoryID"</code> of <code>1</code>.</p>

<p>You might want to rewrite your <code>public void onTaskCompleted(JSONArray responseJson)</code> method so that you only store the descriptions and image URLs for the items that match your criteria. Moreover</p>

<pre><code>CustomGrid adapter = new CustomGrid(getActivity(), Description, ImageURL);
grid.setAdapter(adapter);
</code></pre>

<p>can be outside of the loop, after you have your data in place already.</p>

<p>I went ahead and rewrite your code for you below:</p>

<pre><code>public class PizzaFragment extends ListFragment implements OnTaskCompleted {
    GridView grid;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.menu_grid_main, container, false);

        new PizzaMenuAsyncTask(getActivity(), this).execute();

        mQuickReturnView = (TextView) view.findViewById(R.id.footer);
        mQuickReturnView1 = (TextView) view.findViewById(R.id.footer1);
        mQuickReturnView2 = (TextView) view.findViewById(R.id.footer2);

        grid = (GridView) view.findViewById(R.id.grid);
        return view;
    }

    @Override
    public void onTaskCompleted(JSONArray responseJson) {
        try {
            List&lt;String&gt; descriptions = new ArrayList&lt;String&gt;();
            List&lt;String&gt; imageUrls = new ArrayList&lt;String&gt;();

            for (int i = 0; i &lt; responseJson.length(); ++i) {
                JSONObject object = responseJson.getJSONObject(i);

                if ((object.getString("MainCategoryID")).equals("1")) {
                    Log.i("ImageURL ", object.getString("ImageURL"));

                    imageUrls.add(object.getString("ImageURL"));

                    Log.i("Description ", object.getString("Description"));

                    descriptions.add(object.getString("Description"));
                }
            }

            CustomGrid adapter = new CustomGrid(getActivity(), descriptions, imageUrls);
            grid.setAdapter(adapter);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>and</p>

<pre><code>public class CustomGrid extends BaseAdapter {
    private Context context;
    private Context mContext;
    private final List&lt;String&gt; descriptions;
    private final List&lt;String&gt; imageUrls;

    public CustomGrid(Context c, List&lt;String&gt; descriptions, List&lt;String&gt; imageUrls) {
        this.context = c;
        this.descriptions = descriptions;
        this.imageUrls = imageUrls;
    }

    @Override
    public int getCount() {
        return descriptions.size();
    }

    @Override
    public Object getItem(int position) {
        return descriptions.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ViewHolder holder;
        if (convertView == null) {
            holder = new ViewHolder();
            convertView = LayoutInflater.from(context).inflate(
                    R.layout.fragment_pizza, parent, false);
            holder.ivImage = (ImageView) convertView
                    .findViewById(R.id.grid_image);
            holder.tvHeader = (TextView) convertView
                    .findViewById(R.id.grid_text);
            convertView.setTag(holder);

        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        holder.tvHeader.setText(descriptions.get(position));
        Picasso.with(this.context).load(imageUrls.get(position)).into(holder.ivImage);

        return convertView;
    }

    private class ViewHolder {
        private TextView tvHeader;
        private ImageView ivImage;
    }
}
</code></pre>

<p>Note: I switched to using <code>List</code> instead of <code>Array</code>, and fixed some code style issues. I did not test this though. You should try the example yourself and consult the documentation for more information as well. Also read <a href="https://google-styleguide.googlecode.com/svn/trunk/javaguide.html" rel="nofollow">the Google Java Style</a> for good Java style guidelines.</p>
