<p>I doubt if the composite key columns could be in different tables (in our case - USERS and MOVIE tables). As far as I understand they need to be in RATINGS table. 
I tried mapping them in the same table and was able to persist the rating object successfully. I am using JPA annotations. The configuration is quite simpler with annotations. Below is the code.</p>

<p>Note - Composite key is defined using <code>@Embeddeble</code> and <code>@EmbeddedId</code> annotations in JPA.</p>

<pre><code>@Embeddable
public class User {

    @Column(name = "USER_ID")
    private long userId;
    @Column(name = "EMAIL_ADDRESS")
    private String email;
    public User() {}

    public User(long userId, String email, String password) {
        this.userId = userId;
        this.email = email;
    }
    public long getUserId() {
        return userId;
    }
    public void setUserId(long userId) {
        this.userId = userId;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
}

@Embeddable
public class Movie {
    @Column(name = "MOVIE_ID")
    private long movieId;

    @Column(name = "MOVIE_NAME")
    private String title;

    public Movie() {}
    public Movie(long movieId, String title) {
        this.movieId = movieId;
        this.title = title;
    }
    public long getMovieId() {
        return movieId;
    }
    public void setMovieId(long movieId) {
        this.movieId = movieId;
    }
    public String getTitle() {
        return title;
    }
    public void setTitle(String title) {
        this.title = title;
    }
}

@Embeddable
public class RatingId implements Serializable {

    @Embedded
    private User user;  //Embeddable inside Embeddable.
    @Embedded
    private Movie movie;

    public RatingId() {
    }

    public RatingId(User user, Movie movie) {
        this.user = user;
        this.movie = movie;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public Movie getMovie() {
        return movie;
    }

    public void setMovie(Movie movie) {
        this.movie = movie;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((movie == null) ? 0 : movie.hashCode());
        result = prime * result + ((user == null) ? 0 : user.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        RatingId other = (RatingId) obj;
        if (movie == null) {
            if (other.movie != null)
                return false;
        } else if (!movie.equals(other.movie))
            return false;
        if (user == null) {
            if (other.user != null)
                return false;
        } else if (!user.equals(other.user))
            return false;
        return true;
    }
}

@Entity
@Table(name = "RATING")
public class Rating {

    @EmbeddedId
    private RatingId ratingId;
    private int rating;
    private Date timestamp;

    public Rating() {}  // No arg contructor for hibernate

    public Rating(RatingId ratingId, int rating) {
        super();
        this.ratingId = ratingId;
        this.rating = rating;
    }

    public RatingId getRatingId() {
        return ratingId;
    }

    public void setRatingId(RatingId ratingId) {
        this.ratingId = ratingId;
    }

    public int getRating() {
        return rating;
    }

    public void setRating(int rating) {
        this.rating = rating;
    }
}
</code></pre>

<p>Calling entityManager.persist(rating) persisted the rating object in db. As a summary there is only one table in database - RATINGS that has all the required attributes - user, movie &amp; rating. 
Is that what you were also visualizing?</p>
