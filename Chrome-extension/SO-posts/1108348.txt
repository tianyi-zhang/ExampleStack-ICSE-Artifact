<p>A concept for exporting the entire table. <strike>(Note to experts: I'm aware of its shortcomings.)</strike></p>

<pre><code>import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
public class FullTableExport {
    public static String toXML(String s) {
        if (s != null) {
            StringBuilder b = new StringBuilder(s.length());
            for (int i = 0, count = s.length(); i &lt; count; i++) {
                char c = s.charAt(i);
                switch (c) {
                case '&lt;':
                    b.append("&amp;lt;");
                    break;
                case '&gt;':
                    b.append("&amp;gt;");
                    break;
                case '\'':
                    b.append("&amp;#39;");
                    break;
                case '"':
                    b.append("&amp;quot;");
                    break;
                case '&amp;':
                    b.append("&amp;amp;");
                    break;
                default:
                    b.append(c);
                }
            }
            return b.toString();
        }
        return "";
    }
    public static void main(String[] args) throws Exception {
        String table = "CUSTOMER";
        int batch = 100;

        Class.forName("oracle.jdbc.driver.OracleDriver");
        Connection conn = DriverManager.getConnection(
            "jdbc:oracle:thin:@server:orcl", "user", "pass");
        PreparedStatement pstmt = conn.prepareStatement(
            "SELECT /*+FIRST_ROWS(" + batch + ") */ * FROM " + table);
        ResultSet rs = pstmt.executeQuery();
        rs.setFetchSize(batch);
        ResultSetMetaData rsm = rs.getMetaData();
        File output = new File("result.xml");
        PrintWriter out = new PrintWriter(new BufferedWriter(
            new OutputStreamWriter(
            new FileOutputStream(output), "UTF-8")), false);
        out.printf("&lt;?xml version='1.0' encoding='UTF-8'?&gt;%n");
        out.printf("&lt;table name='%s'&gt;%n", toXML(table));
        int j = 1;
        while (rs.next()) {
            out.printf("\t&lt;row id='%d'&gt;%n", j++);
            for (int i = 1; i &lt;= rsm.getColumnCount(); i++) {
                out.printf("\t\t&lt;col name='%s'&gt;%s&lt;/col&gt;%n", 
                    toXML(rsm.getColumnName(i)), 
                    toXML(rs.getString(i)));
            }
            out.printf("\t&lt;/row&gt;%n");
        }
        out.printf("&lt;/table&gt;%n", table);
        out.flush();
    }
}
</code></pre>

<p><strong>Edit</strong> The shortcomings (thanks @J.S.):</p>

<ul>
<li>No external libraries used beyond the ojdbc</li>
<li>Nothing is closed</li>
<li>A generic Exception is thrown</li>
<li>It is a main method</li>
<li>Usage of print for XML generation</li>
<li>Oracle specific SQL</li>
<li>Plain text password</li>
<li>Some columns look awkward in string representation</li>
<li>UTF-8 is too international</li>
<li>XML structure footprint is large</li>
</ul>
