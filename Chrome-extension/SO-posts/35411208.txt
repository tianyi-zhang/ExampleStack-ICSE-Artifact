<p>When you are not using Holder so getView() method will call findViewById() as many times as you row(s) will be out of View. So if you have 1000 rows in List and 990 rows will be out of View then 990 times will be called findViewById() again.</p>

<p>Holder design pattern is used for View caching - Holder (arbitrary) object holds child widgets of each row and when row is out of View then findViewById() won't be called but View will be recycled and widgets will be obtained from Holder.</p>

<pre><code>public class FoodAdapter extends ArrayAdapter&lt;Food&gt;
    {
      private final Context context;
      private final ArrayList&lt;Food&gt; itemsArrayList;
      public FoodAdapter(Context context, ArrayList&lt;Food&gt; itemsArrayList) {
        {  
        super(context, itemsArrayList);
        this.context = context;
        this.itemsArrayList = itemsArrayList;
        }
        @Override
        public int getCount() 
        {
            return itemsArrayList.size();
        }

        @Override
        public Object getItem(int position) 
        {
            return itemsArrayList.get(position);
        }

        @Override
        public long getItemId(int position) 
        {
            return position;
        }

        @Override
        public View getView(final int position, View convertView, ViewGroup parent) {
            final ViewHolder holder;
            if (convertView == null)
            {
                holder = new ViewHolder();
                LayoutInflater inflater=(LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                convertView = inflater.inflate(R.layout.fr_row, parent, false);
                holder.text = (EditText ) convertView.findViewById(R.id.edittext);

                convertView.setTag(holder);
            } else 
            {
                holder = (ViewHolder) convertView.getTag();
            }
            holder.text.setText(itemsArrayList.get(position));


            return convertView;
        }

        class ViewHolder
        {
            EditText item
            EditText desc
            EditText count;
        }

    }`enter code here`
</code></pre>
