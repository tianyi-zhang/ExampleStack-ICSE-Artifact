<pre><code>package com.skadakov.examples.devrev;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;

/**
 *
 * @author s.kadakov
 */
public class DevRev {

    private final String series;
    private final int model;
    private final String version;
    private final String revision;

    public DevRev(String firmware) {
        String[] ss = firmware.split("-");
        if (ss.length &lt; 3) {
            throw new IllegalArgumentException(firmware);
        }

        this.series = ss[0];
        this.model = Integer.parseInt(ss[1]);
        this.version = ss[2];
        this.revision = ss.length == 3 ? null : ss[3];
    }

    public String getSeries() {
        return series;
    }

    public int getModel() {
        return model;
    }

    public String getVersion() {
        return version;
    }

    public String getRevision() {
        return revision;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 97 * hash + Objects.hashCode(this.series);
        hash = 97 * hash + this.model;
        hash = 97 * hash + Objects.hashCode(this.version);
        hash = 97 * hash + Objects.hashCode(this.revision);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final DevRev other = (DevRev) obj;
        if (this.model != other.model) {
            return false;
        }
        if (!Objects.equals(this.series, other.series)) {
            return false;
        }
        if (!Objects.equals(this.version, other.version)) {
            return false;
        }
        return Objects.equals(this.revision, other.revision);
    }

    @Override
    public String toString() {
        return series + "-" + model + "-" + version + (revision != null ? "-" + revision : "");
    }

    public static void main(String[] args) {
        String[] firmare = {
            "STM-1000-H",
            "STM-2000-E",
            "STM-4000-H",
            "STM-200-H",
            "SFP-1000-A",
            "SFP-300-H",
            "SAFPX-1000-H",
            "SAFPX-2000-A",
            "STM-1000-H-L1",
            "STM-1000-H-L1+VA+GH",
            "STM-1000-H-L2"};

        Map&lt;String, List&lt;DevRev&gt;&gt; revs = new TreeMap&lt;&gt;();
        for (String f : firmare) {
            DevRev dr = new DevRev(f);
            List&lt;DevRev&gt; sdevs = revs.get(dr.getSeries());
            if (sdevs == null) {
                sdevs = new ArrayList&lt;&gt;();
                revs.put(dr.getSeries(), sdevs);
            }

            sdevs.add(dr);
        }

        for (Map.Entry&lt;String, List&lt;DevRev&gt;&gt; entry : revs.entrySet()) {
            String series = entry.getKey();
            List&lt;DevRev&gt; devices = entry.getValue();
            System.out.println(series);
            devices.sort(new Comparator&lt;DevRev&gt;() {
                @Override
                public int compare(DevRev o1, DevRev o2) {
                    return new Integer(o1.getModel()).compareTo(o2.getModel());
                }
            });

            for (DevRev dr : devices) {
                System.out.println("-&gt; " + dr);
            }
        }
    }
}
</code></pre>
