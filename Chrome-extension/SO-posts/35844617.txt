<p>You can set listen for the Toolbar and when the toggle button is clicked.Here is a reference.</p>

<pre><code>    import android.os.Bundle;
    import android.app.Activity;
    import android.content.res.Configuration;
    import android.view.MenuItem;
    import android.view.View;
    import android.widget.AdapterView;
    import android.widget.AdapterView.OnItemClickListener;
    import android.widget.ArrayAdapter;
    import android.widget.ListView;
    import android.support.v4.app.ActionBarDrawerToggle;
    import android.support.v4.view.GravityCompat;
    import android.support.v4.widget.DrawerLayout;

    public class HelloDrawerActivity extends Activity
    {

        private String[] mPlanetTitles;
        private DrawerLayout mDrawerLayout;
        private ActionBarDrawerToggle mDrawerToggle;
        private ListView mDrawerList;

        @Override
        public void onCreate(Bundle savedInstanceState)
        {
            super.onCreate(savedInstanceState);
            setContentView(R.layout.activity_hello_drawer);

            mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);

            // init the ListView and Adapter, nothing new
            initListView();

            // set a custom shadow that overlays the main content when the drawer
            // opens
            mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow,
                    GravityCompat.START);

            mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
                    R.drawable.ic_drawer, R.string.drawer_open,
                    R.string.drawer_close)
            {

                /** Called when a drawer has settled in a completely closed state. */
                public void onDrawerClosed(View view)
                {

                    invalidateOptionsMenu(); // creates call to
                                                // onPrepareOptionsMenu()
                }

                /** Called when a drawer has settled in a completely open state. */
                public void onDrawerOpened(View drawerView)
                {

                    invalidateOptionsMenu(); // creates call to
                                                // onPrepareOptionsMenu()
                }
            };

            // Set the drawer toggle as the DrawerListener
            mDrawerLayout.setDrawerListener(mDrawerToggle);

            // enable ActionBar app icon to behave as action to toggle nav drawer
            getActionBar().setDisplayHomeAsUpEnabled(true);
            // getActionBar().setHomeButtonEnabled(true);
            // Note: getActionBar() Added in API level 11
        }

        private void initListView()
        {
            mDrawerList = (ListView) findViewById(R.id.left_drawer);

            mPlanetTitles = getResources().getStringArray(R.array.planets_array);

            // Set the adapter for the list view
            mDrawerList.setAdapter(new ArrayAdapter&lt;String&gt;(this,
                    R.layout.list_item, mPlanetTitles));
            // Set the list's click listener
            mDrawerList.setOnItemClickListener(new OnItemClickListener()
            {

                @Override
                public void onItemClick(AdapterView&lt;?&gt; parent, View view,
                        int position, long id)
                {
                    // Highlight the selected item, update the title, and close the
                    // drawer
                    mDrawerList.setItemChecked(position, true);
                    setTitle(mPlanetTitles[position]);
                    mDrawerLayout.closeDrawer(mDrawerList);
                }
            });
        }

        @Override
        protected void onPostCreate(Bundle savedInstanceState)
        {
            super.onPostCreate(savedInstanceState);
            // Sync the toggle state after onRestoreInstanceState has occurred.
            mDrawerToggle.syncState();
        }

        @Override
        public void onConfigurationChanged(Configuration newConfig)
        {
            super.onConfigurationChanged(newConfig);
            mDrawerToggle.onConfigurationChanged(newConfig);
        }

        @Override
        public boolean onOptionsItemSelected(MenuItem item)
        {
            // Pass the event to ActionBarDrawerToggle, if it returns
            // true, then it has handled the app icon touch event
            if (mDrawerToggle.onOptionsItemSelected(item))
            {
                return true;
            }
            // Handle your other action bar items...

            return super.onOptionsItemSelected(item);
        }

    }
</code></pre>

<hr>

<pre><code>public class DrawerActivity extends Activity
{
    private DrawerLayout mDrawerLayout = null;

    @Override
    protected void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_drawer);

        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);

        Button button = (Button) findViewById(R.id.btn);
        button.setOnClickListener(new OnClickListener()
        {

            @Override
            public void onClick(View v)
            {
                // when button be presses?drawer open
                mDrawerLayout.openDrawer(Gravity.LEFT);

            }
        });
    }

}
</code></pre>
