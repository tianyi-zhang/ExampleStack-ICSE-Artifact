<p>As far as an application is concerned <a href="http://en.wikipedia.org/wiki/Context_switch" rel="nofollow">context switches</a> are invisible - there is no signal or message sent to the application that notifies it.</p>

<p>The only thing that <em>might</em> tip off an application is timing. For example, if you time a tight loop repeatedly, you <em>might</em> be able to (unreliably) detect a context switch that happens as the loop is executed, due to the longer time required in comparison to executions that were not interrupted. Unfortunately, this would only be possible for compiled languages like C. Languages like Java that make use of a virtual machine make it practically impossible to reliably detect something like this because a loop slowing down might be attributed to any number of reasons, like e.g. the garbage collector acting up.</p>

<p>Moreover, keep in mind that any system call - and especially I/O calls like the ones you'd use to log such an event - very often cause an implicit context switch, which could throw off anything you might want to do.</p>

<p>Why would you want to know something like this anyway? And especially from a Java application?</p>

<p>EDIT:</p>

<p>Well, if you are after <em>creating</em> a synchronization problem, here's my version:</p>

<pre><code>public class Test {
    public static long count = 0;

    public static void main(String[] args) {
        for (int run = 0; run &lt; 5; ++run) {
            Test.count = 0;

            Thread[] threads = new Thread[10];

            for (int i = 0; i &lt; threads.length; ++i) {
                threads[i] = new Thread(new Runnable() {
                    public void run() {
                        for (long i = 0; i &lt; (10 * 1000 * 1000 * 1000); ++i) {
                            Test.count += 1;
                        }
                    }
                });
            }

            for (int i = 0; i &lt; threads.length; ++i) {
                threads[i].start();
            }

            for (int i = 0; i &lt; threads.length; ++i) {
                try {
                    threads[i].join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            System.out.println(Test.count);
        }
    }
}
</code></pre>

<p>Here's what I got from a single run:</p>

<pre><code>1443685504
1439908180
1461384255
1477413204
1440892041
</code></pre>
