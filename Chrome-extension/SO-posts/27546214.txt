<p>Your <code>equals()</code> and <code>hashCode()</code> methods are wrong. You are breaking the contract.</p>

<p>If I understood well you want to find the index of <code>e</code> although there is only <code>c</code> in the list, and you want to do so abusing the <code>String#equals()</code> checking equality only for the first 5 letters. So <code>c.code = 1-202</code>, <code>e.code = 1-202.0</code>, doing <code>c.code.equals(e.code.subString(0, e.code.lenght()-2))</code> should hold <code>true</code>.</p>

<p>This is the correct implementation:</p>

<pre><code>public class OPCode {

    public String code;

    public OPCode(String code){     

        this.code = code;      
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((code == null) ? 0 : code.split("\\.")[0].hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        OPCode other = (OPCode) obj;
        if (code == null) {
            if (other.code != null)
                return false;
        } else{
            String thisCode = code.split("\\.")[0];
            String otherCode = other.code.split("\\.")[0];
            if (!thisCode.equals(otherCode))
                return false;
        }
        return true;
    }
}
</code></pre>

<p>Note that I used the method <code>String#split</code> since (and this is my assumption) you want to be equal codes with same numerical part without considering decimal part. Using <code>split</code> we avoid managing variable number of literals.</p>

<p>Test it with:</p>

<pre><code>ArrayList&lt;OPCode&gt; t_codes = new ArrayList&lt;OPCode&gt;();
OPCode c = new OPCode("1-202");
t_codes.add(c);
OPCode e = new OPCode("1-202.0");
System.out.println(t_codes.indexOf(e)); // -1 &lt;-- Problem here now gives 0
System.out.println(t_codes.indexOf(c));
</code></pre>

<p>BTW I created both method using eclipse built in function via <em>Source>Generate hashCode() and equals()â€¦</em> and modified for the task.</p>
