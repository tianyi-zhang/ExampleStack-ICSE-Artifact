<p>If you download intelliJ, then you can control click into any class.</p>

<p>Also, just try googling "source code for java lang Integer"</p>

<p>I did and it brought up:</p>

<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/Integer.java" rel="nofollow">http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/lang/Integer.java</a></p>

<p>This is basically how you would do it with the JDK (as someone pointed out):</p>

<pre><code>    String octalNo="037";
    System.out.println(Integer.toHexString(Integer.parseInt(octalNo, 8)));
</code></pre>

<p>For fun, I did the octal problem:</p>

<pre><code>    int octal = 037;

    System.out.println(octalToHexString(octal));

    int octal = 037;

    System.out.println(octalToHexString(octal));

}

public static String octalToHexString(int octal) {

    final  char[] hex = {
            '0' , '1' , '2' , '3' , '4' , '5' ,
            '6' , '7' , '8' , '9' , 'A' , 'B' ,
            'C' , 'D' , 'E' , 'F'
    };


    int val = octal;
    int radix = 0;
    int mask = 0;

    StringBuilder builder = new StringBuilder("0x");

    if (val==0) {
        return "0x" + 0;
    }

    while (val != 0) {

        radix = 1 &lt;&lt; 4;
        mask = radix - 1;
        builder.insert(2, hex[val &amp; mask]);
        val &gt;&gt;&gt;= 4;
    }

    return builder.toString();

}
</code></pre>

<p>The above is not very efficient. :)</p>

<p>Here is the parser from the JDK for int:</p>

<pre><code>public static int parseInt(String s, int radix)
            throws NumberFormatException
{
    /*
     * WARNING: This method may be invoked early during VM initialization
     * before IntegerCache is initialized. Care must be taken to not use
     * the valueOf method.
     */

    if (s == null) {
        throw new NumberFormatException("null");
    }

    if (radix &lt; Character.MIN_RADIX) {
        throw new NumberFormatException("radix " + radix +
                                        " less than Character.MIN_RADIX");
    }

    if (radix &gt; Character.MAX_RADIX) {
        throw new NumberFormatException("radix " + radix +
                                        " greater than Character.MAX_RADIX");
    }

    int result = 0;
    boolean negative = false;
    int i = 0, len = s.length();
    int limit = -Integer.MAX_VALUE;
    int multmin;
    int digit;

    if (len &gt; 0) {
        char firstChar = s.charAt(0);
        if (firstChar &lt; '0') { // Possible leading "+" or "-"
            if (firstChar == '-') {
                negative = true;
                limit = Integer.MIN_VALUE;
            } else if (firstChar != '+')
                throw NumberFormatException.forInputString(s);

            if (len == 1) // Cannot have lone "+" or "-"
                throw NumberFormatException.forInputString(s);
            i++;
        }
        multmin = limit / radix;
        while (i &lt; len) {
            // Accumulating negatively avoids surprises near MAX_VALUE
            digit = Character.digit(s.charAt(i++),radix);
            if (digit &lt; 0) {
                throw NumberFormatException.forInputString(s);
            }
            if (result &lt; multmin) {
                throw NumberFormatException.forInputString(s);
            }
            result *= radix;
            if (result &lt; limit + digit) {
                throw NumberFormatException.forInputString(s);
            }
            result -= digit;
        }
    } else {
        throw NumberFormatException.forInputString(s);
    }
    return negative ? result : -result;
}
</code></pre>
