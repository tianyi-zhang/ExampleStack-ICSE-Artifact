<p>I don't think you fully understand the full concept of AsyncTasks.  You use these when you want to run an operation in a background thread and this is a very nice/flexible way of accomplishing this task.  What is really nice to me is <code>onPostExecute()</code> executes on the main thread, so it can really do some powerful things once your work is completed in <code>doInBackground()</code>.  You should keep in mind though that because <code>onPostExecute()</code> does execute on the main thread, you do not want to perform any networking operations here.  </p>

<p><strong>Here is a simple example of an AsyncTask:</strong></p>

<pre><code>private class myAsyncTask extends AsyncTask&lt;String, Void, Boolean&gt; {

    @Override
    protected void onPreExecute() {
        // before we start working
    }   

    @Override
    protected Boolean doInBackground(String... args) {
        //do work in the background
        return true;
    }

    @Override
    protected void onPostExecute(Boolean success) {
        // the work is done.. now what?
    }       
}
</code></pre>

<p><code>doInBackground()</code> is where you are going to be doing the bulk of your work, so I will try to help you out with the basic structure you want.  I just copied and pasted your code where I thought it should go so this is not 100% gauranteed, but hopefully it will help kick off what you want to do:</p>

<pre><code>private class JSONParser extends AsyncTask&lt;String, Void, JSONObject&gt; {

    static InputStream is = null;
    static JSONObject jObj = null;
    static String json = "";

    // variables passed in:
    String url;
    String method;
    List&lt;NameValuePair&gt; params;

    // constructor
    public JSONParser(String url, String method, 
        List&lt;NameValuePair&gt; params) {
        this.url = url;
        this.method = method;
        this.params = params;
    }


    @Override
    protected JSONObject doInBackground(String... args) {
        try {
            if(method == "POST"){
                DefaultHttpClient httpClient = new DefaultHttpClient();
                httpClient.getParams().setParameter(ClientPNames.COOKIE_POLICY,
                        CookiePolicy.BROWSER_COMPATIBILITY);
                HttpPost httpPost = new HttpPost(url);
                httpPost.setEntity(new UrlEncodedFormEntity(params));

                HttpResponse httpResponse = httpClient.execute(httpPost);
                HttpEntity httpEntity = httpResponse.getEntity();
                is = httpEntity.getContent();

            } else if(method == "GET"){
                DefaultHttpClient httpClient = new DefaultHttpClient();
                String paramString = URLEncodedUtils.format(params, "utf-8");
                url += "?" + paramString;
                HttpGet httpGet = new HttpGet(url);

                HttpResponse httpResponse = httpClient.execute(httpGet);
                HttpEntity httpEntity = httpResponse.getEntity();
                is = httpEntity.getContent();
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    is, "iso-8859-1"), 8);
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line + "\n");
            }
            is.close();
            json = sb.toString();
        } catch (Exception e) {
            Log.e("Fehler!", "Fehler mein umwandeln von Stream in String: " + e.toString());
        }

        try {
            jObj = new JSONObject(json);
        } catch (JSONException e) {
            Log.e("JSON Parser", "Error parsing data " + e.toString());
        }

        return jObj;
    }

    @Override
    protected void onPostExecute(JSONObject obj) {
        // Now we have your JSONObject, play around with it.
    }       
}
</code></pre>

<p>Edit:</p>

<p>I forgot to mention that you can also pass in <code>args</code> which is a string array.  You can just create args and pass it in when you call your AsyncTask:</p>

<pre><code>new JSONParser(url, method, params).execute(args);
</code></pre>

<p>and you can access args in <code>doInBackground()</code></p>

<p>Here is some more information on AyncTask: <a href="http://developer.android.com/reference/android/os/AsyncTask.html" rel="nofollow">http://developer.android.com/reference/android/os/AsyncTask.html</a></p>
