<p>To calculate the n-th prime, I know two main variants.</p>

<h2>The straightforward way</h2>

<p>That is to count all the primes starting from 2 as you find them until you have reached the desired n<sup>th</sup>.</p>

<p>This can be done with different levels of sophistication and efficiency, and there are two conceptually different ways to do it. The first is</p>

<h3>Testing the primality of all numbers in sequence</h3>

<p>This would be accomplished by a driver function like</p>

<pre><code>public static int nthPrime(int n) {
    int candidate, count;
    for(candidate = 2, count = 0; count &lt; n; ++candidate) {
        if (isPrime(candidate)) {
            ++count;
        }
    }
    // The candidate has been incremented once after the count reached n
    return candidate-1;
}
</code></pre>

<p>and the interesting part that determines the efficiency is the <code>isPrime</code> function.</p>

<p>The obvious way for a primality check, given the definition of a prime as a number greater than 1 that is divisible only by 1 and by itself that we learned in school¹, is</p>

<h3>Trial division</h3>

<p>The direct translation of the definition into code is</p>

<pre><code>private static boolean isPrime(int n) {
    for(int i = 2; i &lt; n; ++i) {
        if (n % i == 0) {
            // We are naive, but not stupid, if
            // the number has a divisor other
            // than 1 or itself, we return immediately.
            return false;
        }
    }
    return true;
}
</code></pre>

<p>but, as you will soon discover if you try it, its simplicity is accompanied by slowness.
With that primality test, you can find the 1000<sup>th</sup> prime, 7919, in a few milliseconds (about 20 on my computer), but finding the 10000<sup>th</sup> prime, 104729, takes seconds (~2.4s), the 100000<sup>th</sup> prime,1299709, several minutes (about 5), the millionth prime, 15485863, would take about eight and a half hours, the ten-millionth prime, 179424673, weeks, and so on. The runtime complexity is worse than quadratic - ?(n² * log n).</p>

<p>So we'd like to speed the primality test up somewhat. A step that many people take is the realisation that a divisor of <code>n</code> (other than <code>n</code> itself) can be at most <code>n/2</code>.
If we use that fact and let the trial division loop only run to <code>n/2</code> instead of <code>n-1</code>, how does the running time of the algorithm change?
For composite numbers, the lower loop limit doesn't change anything. For primes, the number of trial divisions is halved, so overall, the running time should be reduced by a factor somewhat smaller than 2. If you try it out, you will find that the running time is almost exactly halved, so <strong>almost all the time is spent verifying the primality of primes</strong> despite there being many more composites than primes.</p>

<p>Now, that didn't help much if we want to find the one-hundred-millionth prime, so we have to do better. Trying to reduce the loop limit further, let us see for what numbers the upper bound of <code>n/2</code> is actually needed. If <code>n/2</code> is a divisor of <code>n</code>, then <code>n/2</code> is an integer, in other words, <code>n</code> is divisible by 2. But then the loop doesn't go past 2, so it never (except for <code>n = 4</code>) reaches <code>n/2</code>. Jolly good, so what's the next largest possible divisor of <code>n</code>?
Why, <code>n/3</code> of course. But <code>n/3</code> can only be a divisor of <code>n</code> if it is an integer, in other words, if <code>n</code> is divisible by 3. Then the loop will exit at 3 (or before, at 2) and never reach <code>n/3</code> (except for <code>n = 9</code>). The next largest possible divisor ...</p>

<p>Hang on a minute! We have <code>2 &lt;-&gt; n/2</code> and <code>3 &lt;-&gt; n/3</code>. <strong>The divisors of n come in pairs.</strong></p>

<p>If we consider the pair <code>(d, n/d)</code> of corresponding divisors of <code>n</code>, either <code>d = n/d</code>, i.e. <code>d = ?n</code>, or one of them, say <code>d</code>, is smaller than the other. But then <code>d*d &lt; d*(n/d) = n</code> and <code>d &lt; ?n</code>. Each pair of corresponding divisors of <code>n</code> contains (at least) one which does not exceed <code>?n</code>.</p>

<p><strong>If</strong> <code>n</code> <strong>is composite, its smallest nontrivial divisor does not exceed</strong> <code>?n</code>.</p>

<p>So we can reduce the loop limit to <code>?n</code>, and that reduces the runtime complexity of the algorithm. It should now be ?(n<sup>1.5</sup> * ?(log n)), but empirically it seems to scale a little bit better - however, there's not enough data to draw reliable conclusions from empirical results.</p>

<p>That finds the millionth prime in about 16 seconds, the ten-millionth in just under nine minutes, and it would find the one-hundred-millionth in about four and a half hours. That's still slow, but a far cry from the ten years or so it would take the naive trial division.</p>

<p>Since there are squares of primes and products of two close primes, like 323 = 17*19, we cannot reduce the limit for the trial division loop below <code>?n</code>. Therefore, while staying with trial division, we must look for other ways to improve the algorithm now.</p>

<p>One easily seen thing is that no prime other than 2 is even, so we need only check odd numbers after we have taken care of 2. That doesn't make much of a difference, though, since the even numbers are the cheapest to find composite - and the bulk of time is still spent verifying the primality of primes. However, if we look at the even numbers as candidate divisors, we see that if <code>n</code> is divisible by an even number, <code>n</code> itself must be even, so (excepting 2) it will have been recognised as composite before division by any even number greater than 2 is attempted. So all divisions by even numbers greater than 2 that occur in the algorithm must necessarily leave a nonzero remainder. We can thus omit these divisions and check for divisibility only by 2 and the odd numbers from 3 to <code>?n</code>. This halves (not quite exactly) the number of divisions required to determine a number as prime or composite and therefore the running time. That's a good start, but can we do better?</p>

<p>Another large family of numbers is the multiples of 3. Every third division we perform is by a multiple of 3, but if <code>n</code> is divisible by one of them, it is also divisible by 3, and hence no division by 9, 15, 21, ... that we perform in our algorithm will ever leave a remainder of 0.
So, how can we skip these divisions? Well, the numbers divisible by neither 2 nor 3 are precisely the numbers of the form <code>6*k ± 1</code>. Starting from 5 (since we're only interested in numbers greater than 1), they are 5, 7, 11, 13, 17, 19, ..., the step from one to the next alternates between 2 and 4, which is easy enough, so we can use</p>

<pre><code>private static boolean isPrime(int n) {
    if (n % 2 == 0) return n == 2;
    if (n % 3 == 0) return n == 3;
    int step = 4, m = (int)Math.sqrt(n) + 1;
    for(int i = 5; i &lt; m; step = 6-step, i += step) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}
</code></pre>

<p>This gives us another speedup by a factor of (nearly) 1.5, so we'd need about one and a half hours to the hundred-millionth prime.</p>

<p>If we continue this route, the next step is the elimination of multiples of 5. The numbers coprime to 2, 3 and 5 are the numbers of the form</p>

<pre><code>30*k + 1, 30*k + 7, 30*k + 11, 30*k + 13, 30*k + 17, 30*k + 19, 30*k + 23, 30*k + 29
</code></pre>

<p>so we'd need only divide by eight out of every thirty numbers (plus the three smallest primes). The steps from one to the next, starting from 7, cycle through 4, 2, 4, 2, 4, 6, 2, 6. That's still easy enough to implement and yields another speedup by a factor of 1.25 (minus a bit for more complicated code). Going further, the multiples of 7 would be eliminated, leaving 48 out of every 210 numbers to divide by, then 11 (480/2310), 13 (5760/30030) and so on. Each prime <code>p</code> whose multiples are eliminated yields a speedup of (almost) <code>p/(p-1)</code>, so the return decreases while the cost (code complexity, space for the lookup table for the steps) increases with each prime.</p>

<p>In general, one would stop soonish, after eliminating the multiples of maybe six or seven primes (or even fewer). Here, however, we can follow through to the very end, when the multiples of all primes have been eliminated and only the primes are left as candidate divisors. Since we are finding all primes in order, each prime is found before it is needed as a candidate divisor and can then be stored for future use. This reduces the algorithmic complexity to - if I haven't miscalculated - O(n<sup>1.5</sup> / ?(log n)). At the cost of space usage for storing the primes.</p>

<p>With trial division, that is as good as it gets, you have to try and divide by all primes to <code>?n</code> or the first dividing <code>n</code> to determine the primality of <code>n</code>. That finds the hundred-millionth prime in about half an hour here.</p>

<p>So how about</p>

<h3>Fast primality tests</h3>

<p>Primes have other number-theoretic properties than the absence of nontrivial divisors which composite numbers usually don't have. Such properties, if they are fast to check, can form the basis of probabilistic or deterministic primality tests. The archetypical such property is associated with the name of Pierre de Fermat, who, in the early 17<sup>th</sup> century, found that</p>

<blockquote>
  <p>If <code>p</code> is a prime, then <code>p</code> is a divisor of (a<sup>p</sup>-a) for all <code>a</code>.</p>
</blockquote>

<p>This - Fermat's so-called 'little theorem' - is, in the equivalent formulation</p>

<blockquote>
  <p>Let <code>p</code> be a prime and <code>a</code> not divisible by <code>p</code>. Then <code>p</code> divides a<sup>p-1</sup> - 1.</p>
</blockquote>

<p>the basis of most of the widespread fast primality tests (for example Miller-Rabin) and variants or analogues of that appear in even more (e.g. Lucas-Selfridge).</p>

<p>So if we want to know if a not too small odd number <code>n</code> is a prime (even and small numbers are efficiently treated by trial division), we can choose any number <code>a</code> (> 1) which is not a multiple of <code>n</code>, for example 2, and check whether <code>n</code> divides a<sup>n-1</sup> - 1. Since a<sup>n-1</sup> becomes huge, that is most efficiently done by checking whether
<code>a^(n-1) ? 1 (mod n)</code>, i.e. by modular exponentiation. If that congruence doesn't hold, we know that <code>n</code> is composite. If it holds, however, we cannot conclude that <code>n</code> is prime, for example <code>2^340 ? 1 (mod 341)</code>, but <code>341 = 11 * 31</code> is composite. Composite numbers <code>n</code> such that <code>a^(n-1) ? 1 (mod n)</code> are called Fermat pseudoprimes for the base <code>a</code>.</p>

<p>But such occurrences are rare. Given any base <code>a &gt; 1</code>, although there are an infinite number of Fermat pseudoprimes to base <code>a</code>, they are much rarer than actual primes. For example, there are only 78 base-2 Fermat pseudoprimes and 76 base-3 Fermat pseudoprimes below 100000, but 9592 primes. So if one chooses an arbitrary odd <code>n &gt; 1</code> and an arbitrary base <code>a &gt; 1</code> and finds <code>a^(n-1) ? 1 (mod n)</code>, there's a good chance that <code>n</code> is actually prime.</p>

<p>However, we are in a slightly different situation, we are given <code>n</code> and can only choose <code>a</code>. So, for an odd composite <code>n</code>, for how many <code>a</code>, <code>1 &lt; a &lt; n-1</code> can <code>a^(n-1) ? 1 (mod n)</code> hold?
Unfortunately, there are composite numbers - Carmichael numbers - such that the congruence holds for <em>every</em> <code>a</code> coprime to <code>n</code>. That means that to identify a Carmichael number as composite with the Fermat test, we have to pick a base that is a multiple of one of <code>n</code>'s prime divisors - there may not be many such multiples.</p>

<p>But we can strengthen the Fermat test so that composites are more reliably detected. If <code>p</code> is an odd prime, write <code>p-1 = 2*m</code>. Then, if <code>0 &lt; a &lt; p</code>,</p>

<pre><code>a^(p-1) - 1 = (a^m + 1) * (a^m - 1)
</code></pre>

<p>and <code>p</code> divides exactly one of the two factors (the two factors differ by 2, so their greatest common divisor is either 1 or 2). If <code>m</code> is even, we can split <code>a^m - 1</code> in the same way. Continuing, if <code>p-1 = 2^s * k</code> with <code>k</code> odd, write</p>

<pre><code>a^(p-1) - 1 = (a^(2^(s-1)*k) + 1) * (a^(2^(s-2)*k) + 1) * ... * (a^k + 1) * (a^k - 1)
</code></pre>

<p>then <code>p</code> divides exactly one of the factors. This gives rise to the strong Fermat test,</p>

<p>Let <code>n &gt; 2</code> be an odd number. Write <code>n-1 = 2^s * k</code> with <code>k</code> odd. Given any <code>a</code> with <code>1 &lt; a &lt; n-1</code>, if</p>

<ol>
<li><code>a^k ? 1 (mod n)</code> or</li>
<li><code>a^((2^j)*k) ? -1 (mod n)</code> for any <code>j</code> with <code>0 &lt;= j &lt; s</code></li>
</ol>

<p>then <code>n</code> is a <em>strong (Fermat) probable prime</em> for base <code>a</code>. A composite strong base <code>a</code> (Fermat) probable prime is called a strong (Fermat) pseudoprime for the base <code>a</code>. Strong Fermat pseudoprimes are even rarer than ordinary Fermat pseudoprimes, below 1000000, there are 78498 primes, 245 base-2 Fermat pseudoprimes and only 46 base-2 strong Fermat pseudoprimes. More importantly, for any odd composite <code>n</code>, there are at most <code>(n-9)/4</code> bases <code>1 &lt; a &lt; n-1</code> for which <code>n</code> is a strong Fermat pseudoprime.</p>

<p>So if <code>n</code> is an odd composite, the probability that <code>n</code> passes <code>k</code> strong Fermat tests with randomly chosen bases between 1 and <code>n-1</code> (exclusive bounds) is less than <code>1/4^k</code>.</p>

<p>A strong Fermat test takes O(log n) steps, each step involves one or two multiplications of numbers with O(log n) bits, so the complexity is O((log n)^3) with naive multiplication [for huge <code>n</code>, more sophisticated multiplication algorithms can be worthwhile].</p>

<p>The Miller-Rabin test is the k-fold strong Fermat test with randomly chosen bases. It is a probabilistic test, but for small enough bounds, short combinations of bases are known which give a deterministic result.</p>

<p>Strong Fermat tests are part of the deterministic APRCL test.</p>

<p>It is advisable to precede such tests with trial division by the first few small primes, since divisions are comparatively cheap and that weeds out most composites.</p>

<p>For the problem of finding the <code>n</code><sup>th</sup> prime, in the range where testing all numbers for primality is feasible, there are known combinations of bases that make the multiple strong Fermat test correct, so that would give a faster - O(n*(log n)<sup>4</sup>) - algorithm.</p>

<p>For <code>n &lt; 2^32</code>, the bases 2, 7, and 61 are sufficient to verify primality. Using that, the hundred-millionth prime is found in about six minutes.</p>

<h3>Eliminating composites by prime divisors, the Sieve of Eratosthenes</h3>

<p>Instead of investigating the numbers in sequence and checking whether each is prime from scratch, one can also consider the whole set of relevant numbers as one piece and eliminate the multiples of a given prime in one go. This is known as the Sieve of Eratosthenes:</p>

<p>To find the prime numbers not exceeding <code>N</code></p>

<ol>
<li>make a list of all numbers from 2 to <code>N</code></li>
<li>for each <code>k</code> from 2 to <code>N</code>: if <code>k</code> is not yet crossed off, it is prime; cross off all multiples of <code>k</code> as composites</li>
</ol>

<p>The primes are the numbers in the list which aren't crossed off.</p>

<p>This algorithm is fundamentally different from trial division, although both directly use the divisibility characterisation of primes, in contrast to the Fermat test and similar tests which use other properties of primes.</p>

<p>In trial division, each number <code>n</code> is paired with all primes not exceeding the smaller of <code>?n</code> and the smallest prime divisor of <code>n</code>. Since most composites have a very small prime divisor, detecting composites is cheap here on average. But testing primes is expensive, since there are relatively many primes below <code>?n</code>. Although there are many more composites than primes, the cost of testing primes is so high that it completely dominates the overall running time and renders trial division a relatively slow algorithm. Trial division for all numbers less than <code>N</code> takes O(N<sup>1.5</sup> / (log N)²) steps.</p>

<p>In the sieve, each composite <code>n</code> is paired with all of its prime divisors, but <em>only</em> with those. Thus there the primes are the cheap numbers, they are only ever looked at once, while the composites are more expensive, they are crossed off multiple times. One might believe that since a sieve contains many more 'expensive' numbers than 'cheap' ones, it would overall be a bad algorithm. However, a composite number does not have many distinct prime divisors - the number of distinct prime divisors of <code>n</code> is bounded by <code>log n</code>, but usually it is <em>much</em> smaller, the average of the number of distinct prime divisors of the numbers <code>&lt;= n</code> is <code>log log n</code> - so even the 'expensive' numbers in the sieve are on average no more (or hardly more) expensive than the 'cheap' numbers for trial division.</p>

<p>Sieving up to <code>N</code>, for each prime <code>p</code>, there are <code>?(N/p)</code> multiples to cross off, so the total number of crossings-off is <code>?(? (N/p)) = ?(N * log (log N))</code>. This yields <strong>much</strong> faster algorithms for finding the primes up to <code>N</code> than trial division or sequential testing with the faster primality tests.</p>

<p>There is, however, a disadvantage to the sieve, it uses <code>O(N)</code> memory. (But with a segmented sieve, that can be reduced to <code>O(?N)</code> without increasing the time complexity.)</p>

<p>For finding the <code>n</code><sup>th</sup> prime, instead of the primes up to <code>N</code>, there is also the problem that it is not known beforehand how far the sieve should reach.</p>

<p>The latter can be solved using the prime number theorem. The PNT says</p>

<pre><code>?(x) ~ x/log x (equivalently: lim ?(x)*log x/x = 1),
</code></pre>

<p>where <code>?(x)</code> is the number of primes not exceeding <code>x</code> (here and below, <code>log</code> must be the natural logarithm, for the algorithmic complexities it is not important which base is chosen for the logarithms). From that, it follows that <code>p(n) ~ n*log n</code>, where <code>p(n)</code> is the <code>n</code><sup>th</sup> prime, and there are good upper bounds for <code>p(n)</code> known from deeper analysis, in particular</p>

<pre><code>n*(log n + log (log n) - 1) &lt; p(n) &lt; n*(log n + log (log n)), for n &gt;= 6.
</code></pre>

<p>So one can use that as the sieving limit, it doesn't exceed the target far.</p>

<p>The <code>O(N)</code> space requirement can be overcome by using a segmented sieve. One can then record the primes below <code>?N</code> for <code>O(?N / log N)</code> memory consumption and use segments of increasing length (O(?N) when the sieve is near N).</p>

<p>There are some easy improvements on the algorithm as stated above:</p>

<ol>
<li>start crossing off multiples of <code>p</code> only at <code>p²</code>, not at <code>2*p</code></li>
<li>eliminate the even numbers from the sieve</li>
<li>eliminate the multiples of further small primes from the sieve</li>
</ol>

<p>None of these reduce the algorithmic complexity, but they all reduce the constant factors by a significant amount (as with trial division, the elimination of multiples of <code>p</code> yields lesser speedup for larger <code>p</code> while increasing the code complexity more than for smaller <code>p</code>).</p>

<p>Using the first two improvements yields</p>

<pre><code>// Entry k in the array represents the number 2*k+3, so we have to do
// a bit of arithmetic to get the indices right.
public static int nthPrime(int n) {
    if (n &lt; 2) return 2;
    if (n == 2) return 3;
    int limit, root, count = 1;
    limit = (int)(n*(Math.log(n) + Math.log(Math.log(n)))) + 3;
    root = (int)Math.sqrt(limit) + 1;
    limit = (limit-1)/2;
    root = root/2 - 1;
    boolean[] sieve = new boolean[limit];
    for(int i = 0; i &lt; root; ++i) {
        if (!sieve[i]) {
            ++count;
            for(int j = 2*i*(i+3)+3, p = 2*i+3; j &lt; limit; j += p) {
                sieve[j] = true;
            }
        }
    }
    int p;
    for(p = root; count &lt; n; ++p) {
        if (!sieve[p]) {
            ++count;
        }
    }
    return 2*p+1;
}
</code></pre>

<p>which finds the hundred-millionth prime, 2038074743, in about 18 seconds. This time can be reduced to about 15 seconds (here, YMMV) by storing the flags packed, one bit per flag, instead of as <code>boolean</code>s, since the reduced memory usage gives better cache locality.</p>

<p>Packing the flags, eliminating also multiples of 3 and using bit-twiddling for faster faster counting,</p>

<pre><code>// Count number of set bits in an int
public static int popCount(int n) {
    n -= (n &gt;&gt;&gt; 1) &amp; 0x55555555;
    n = ((n &gt;&gt;&gt; 2) &amp; 0x33333333) + (n &amp; 0x33333333);
    n = ((n &gt;&gt; 4) &amp; 0x0F0F0F0F) + (n &amp; 0x0F0F0F0F);
    return (n * 0x01010101) &gt;&gt; 24;
}

// Speed up counting by counting the primes per
// array slot and not individually. This yields
// another factor of about 1.24 or so.
public static int nthPrime(int n) {
    if (n &lt; 2) return 2;
    if (n == 2) return 3;
    if (n == 3) return 5;
    int limit, root, count = 2;
    limit = (int)(n*(Math.log(n) + Math.log(Math.log(n)))) + 3;
    root = (int)Math.sqrt(limit);
    switch(limit%6) {
        case 0:
            limit = 2*(limit/6) - 1;
            break;
        case 5:
            limit = 2*(limit/6) + 1;
            break;
        default:
            limit = 2*(limit/6);
    }
    switch(root%6) {
        case 0:
            root = 2*(root/6) - 1;
            break;
        case 5:
            root = 2*(root/6) + 1;
            break;
        default:
            root = 2*(root/6);
    }
    int dim = (limit+31) &gt;&gt; 5;
    int[] sieve = new int[dim];
    for(int i = 0; i &lt; root; ++i) {
        if ((sieve[i &gt;&gt; 5] &amp; (1 &lt;&lt; (i&amp;31))) == 0) {
            int start, s1, s2;
            if ((i &amp; 1) == 1) {
                start = i*(3*i+8)+4;
                s1 = 4*i+5;
                s2 = 2*i+3;
            } else {
                start = i*(3*i+10)+7;
                s1 = 2*i+3;
                s2 = 4*i+7;
            }
            for(int j = start; j &lt; limit; j += s2) {
                sieve[j &gt;&gt; 5] |= 1 &lt;&lt; (j&amp;31);
                j += s1;
                if (j &gt;= limit) break;
                sieve[j &gt;&gt; 5] |= 1 &lt;&lt; (j&amp;31);
            }
        }
    }
    int i;
    for(i = 0; count &lt; n; ++i) {
        count += popCount(~sieve[i]);
    }
    --i;
    int mask = ~sieve[i];
    int p;
    for(p = 31; count &gt;= n; --p) {
        count -= (mask &gt;&gt; p) &amp; 1;
    }
    return 3*(p+(i&lt;&lt;5))+7+(p&amp;1);
}
</code></pre>

<p>finds the hundred-millionth prime in about 9 seconds, which is not unbearably long.</p>

<p>There are other types of prime sieves, of particular interest is the Sieve of Atkin, which exploits the fact that certain congruence classes of (rational) primes are composites in the ring of algebraic integers of some quadratic extensions of ?. Here is not the place to expand on the mathematical theory, suffice it to say that the Sieve of Atkin has lower algorithmic complexity than the Sieve of Eratosthenes and hence is preferable for large limits (for small limits, a not overly optimised Atkin sieve has higher overhead and thus can be slower than a comparably optimised Eratosthenes sieve).
D. J. Bernstein's <a href="http://cr.yp.to/primegen.html">primegen</a> library (written in C) is well optimised for numbers below 2<sup>32</sup> and finds the hundred-millionth prime (here) in about 1.1 seconds.</p>

<h2>The fast way</h2>

<p>If we only want to find the <code>n</code><sup>th</sup> prime, there is no intrinsic value in also finding all the smaller primes. If we can skip most of them, we can save a lot of time and work. Given a good approximation <code>a(n)</code> to the <code>n</code><sup>th</sup> prime <code>p(n)</code>, if we have a fast way to calculate the number of primes <code>?(a(n))</code> not exceeding <code>a(n)</code>, we can then sieve a small range above or below <code>a(n)</code> to identify the few missing or excess primes between <code>a(n)</code> and <code>p(n)</code>.</p>

<p>We have seen an easily computed fairly good approximation to <code>p(n)</code> above, we could take</p>

<pre><code>a(n) = n*(log n + log (log n))
</code></pre>

<p>for example.</p>

<p>A good method to compute <code>?(x)</code> is the <a href="http://en.wikipedia.org/wiki/Prime-counting_function#Algorithms_for_evaluating_.CF.80.28x.29">Meissel-Lehmer method</a>, which computes <code>?(x)</code> in roughly <code>O(x^0.7)</code> time (the exact complexity depends on the implementation, a refinement by Lagarias, Miller, Odlyzko, Deléglise and Rivat lets one compute <code>?(x)</code> in O(x<sup>2/3</sup> / log² x) time).</p>

<p>Starting with the simple approximation <code>a(n)</code>, we compute <code>e(n) = ?(a(n)) - n</code>. By the prime number theorem, the density of primes near <code>a(n)</code> is about <code>1/log a(n)</code>, so we expect <code>p(n)</code> to be near <code>b(n) = a(n) - log a(n)*e(n)</code> and we would sieve a range slightly larger than <code>log a(n)*e(n)</code>. For greater confidence that <code>p(n)</code> is in the sieved range, one can increase the range by a factor of 2, say, which almost certainly will be large enough. If the range seems too large, one can iterate with the better approximation <code>b(n)</code> in place of <code>a(n)</code>, compute <code>?(b(n))</code> and <code>f(n) = ?((b(n)) - n</code>. Typically, <code>|f(n)|</code> will be much smaller than <code>|e(n)|</code>. If <code>f(n)</code> is approximately <code>-e(n)</code>, <code>c(n) = (a(n) + b(n)) / 2</code> will be a better approximation to <code>p(n)</code>. Only in the very unlikely case that <code>f(n)</code> is very close to <code>e(n)</code> (and not very close to 0), finding a sufficiently good approximation to <code>p(n)</code> that the final sieving stage can be done in time comparable to computing <code>?(a(n))</code> becomes a problem.</p>

<p>In general, after one or two improvements to the initial approximation, the range to be sieved is small enough for the sieving stage to have a complexity of O(n^0.75) or better.</p>

<p>This method finds the hundred-millionth prime in about 40 milliseconds, and the 10<sup>12</sup>-th prime, 29996224275833, in under eight seconds.</p>

<hr>

<p><strong>tl;dr:</strong> Finding the <code>n</code><sup>th</sup> prime can be efficiently done, but the more efficient you want it, the more mathematics is involved.</p>

<hr>

<p>I have Java code for most of the discussed algorithms prepared <a href="https://bitbucket.org/dafis/javaprimes">here</a>, in case somebody wants to play around with them.</p>

<hr>

<p>¹ Aside remark for overinterested souls: The definition of primes used in modern mathematics is different, applicable in much more general situations. If we adapt the school definition to include negative numbers - so a number is prime if it's neither 1 nor -1 and divisible only by 1, -1, itself and its negative - that defines (for integers) what is nowadays called an <em>irreducible</em> element of ?, however, for integers, the definitions of prime and irreducible elements coincide.</p>
