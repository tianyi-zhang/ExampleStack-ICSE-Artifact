<p>You need to make sure your code covers all the cases for your recursion.</p>

<pre><code>private IntTreeNode trim (IntTreeNode root, int min, int max) {
    if (root == null) {
        return root;
    }
    root.left = trim(root.left, min, max);
    root.right = trim (root.right, min, max);
    if(root.data &lt; max &amp;&amp; root.data&gt; min) {
        return root;
    }else if (root.data &lt; min) {
        return root.right;
    }else if (node.data &gt; max) {
        return root.left;
    }
}
</code></pre>

<p>So let's list what it's checking:</p>

<ul>
<li>root is null</li>
<li>min &lt; current value &lt; max</li>
<li>current value &lt; min</li>
<li>max &lt; current value</li>
</ul>

<p>It's not covering the <code>current value == min</code> and <code>current value == max</code> cases! You said it should be checking for <em>inclusive</em> ranges. That means <code>min &lt; current value &lt; max</code> should be <code>min ? current value ? max</code>, right? I think that'll fix it.</p>

<p>However, like you said, the code isn't very readable. I'd change it a bit:</p>

<pre><code>private IntTreeNode trim (IntTreeNode root, int min, int max) {
    // Base case: leaves' children are null
    if (root == null)
        return root;
    // Case: current value too small - use trimmed right subtree
    if (root.data &lt; min)
        return trim(root.right, min, max);
    // Case: current value too large - use trimmed left subtree
    else if (node.data &gt; max)
        return trim(root.left, min, max);
    // Case: current value in range - trim both subtrees
    else if (min &lt;= root.data &amp;&amp; root.data &lt;= max) {
        root.left = trim(root.left, min, max);
        root.right = trim (root.right, min, max);
        return root;
    }
    // Make sure we've covered all the cases
    // (this should be unreachable if our cases are complete)
    throw new RuntimeException("Unhandled case in trim!");
}
</code></pre>

<p>This is a bit more efficient since you don't call <code>trim</code> on subtrees that you end up trimming away. I did duplicate a tiny bit of code by repeating the calls to <code>trim</code> in the last case, which some people might take issue with, but I personally think it's fine.</p>

<p><em>(Note: I haven't actually tested any of this code, so it might have syntax errors and not even compile, but it should give you an idea of how this should work.)</em></p>

<hr>

<p><em>In response to your comment:</em></p>

<p>The code should run now since I added a <code>throw</code> clause to the end of the method.</p>

<p>Your code's <code>if (root != null)</code> clause is basically the same as the <code>if (root == null) return root;</code> case in the 2nd version.</p>

<p><code>if (root.data &lt; max &amp;&amp; root.data &gt; min)</code> is checking if the value is in the range <em>min thru max</em> <strong>exclusive</strong>.</p>

<p>So you're throwing away the entire subtree if the current node's value isn't between min and max, exclusive. You need to fix the code to only throw away the correct subtree, and to do an <strong>inclusive</strong> check.</p>

<hr>

<p>On an aside, I think <code>if (min &lt;= root.data &amp;&amp; root.data &lt;= max)</code> is much more readable than what you have because it looks more like what you'd write out in a more traditional math definition: <code>min ? root.data ? max</code>. It's nice to keep the inequality signs facing the same direction in my opinion.</p>
