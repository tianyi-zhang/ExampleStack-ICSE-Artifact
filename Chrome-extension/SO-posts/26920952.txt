<p>Please find the below example to get image from sdcard and past using pdfJet. Sure its helps you</p>

<pre><code>public class PdfDemo extends Activity {

    String exportDir;
    int SELECT_PICTURE = 0;
    String selectedImagePath;

    @SuppressLint("SdCardPath")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        exportDir = Environment.getExternalStorageDirectory() + File.separator
                + "firstPdf.pdf";

        ((Button) findViewById(R.id.btnChangeDate))
                .setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        getImage();
                    }
                });
        ((Button) findViewById(R.id.btn_gen_pdf))
                .setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        GeneratePdf();
                    }
                });

    }

    private void GeneratePdf() {
        try {
            FileOutputStream fos = new FileOutputStream(exportDir);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            PDF pdf = new PDF(bos);
            Page page = new Page(pdf, Letter.PORTRAIT);

            InputStream is = new FileInputStream(selectedImagePath);

            BufferedInputStream bis1 = new BufferedInputStream(is);

            Image image1 = new Image(pdf, bis1, ImageType.JPG);
            image1.setPosition(10, 52);
            // image1.scaleBy(.4)
            image1.scaleBy(0.3f, 0.4f);
            // image1.setRotateCW90(true);
            image1.drawOn(page);

            // Adding Text View
            Font f4 = new Font(pdf, CoreFont.HELVETICA_OBLIQUE);
            TextLine text = new TextLine(f4);
            text.setPosition(100.0, 100.0);
            text.setText("Even so, unemployment has remained at less than half the EU average.");
            text.setColor(Color.black);
            text.drawOn(page);

            Box flag = new Box();
            flag.setPosition(100.0, 100.0);
            flag.setSize(190.0, 100.0);
            flag.setColor(Color.white);
            flag.drawOn(page);

            double sw = 7.69; // stripe width
            Line stripe = new Line(0.0, sw / 2, 190.0, sw / 2);
            stripe.setWidth(sw);
            stripe.setColor(Color.oldgloryred);
            for (int row = 0; row &lt; 7; row++) {
                stripe.placeIn(flag, 0.0, row * 2 * sw);
                stripe.drawOn(page);
            }

            Box union = new Box();
            union.setSize(76.0, 53.85);
            union.setColor(Color.oldgloryblue);
            union.setFillShape(true);
            union.placeIn(flag, 0.0, 0.0);
            union.drawOn(page);

            double h_si = 12.6; // horizontal star interval
            double v_si = 10.8; // vertical star interval
            Point star = new Point(h_si / 2, v_si / 2);
            star.setShape(Point.BOX);
            star.setRadius(3.0);
            star.setColor(Color.white);
            star.setFillShape(true);

            for (int row = 0; row &lt; 6; row++) {
                for (int col = 0; col &lt; 5; col++) {
                    star.placeIn(union, row * h_si, col * v_si);
                    star.drawOn(page);
                }
            }
            star.setPosition(h_si, v_si);
            for (int row = 0; row &lt; 5; row++) {
                for (int col = 0; col &lt; 4; col++) {
                    star.placeIn(union, row * h_si, col * v_si);
                    star.drawOn(page);
                }
            }

            pdf.flush();
            bos.close();

        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), "" + e, Toast.LENGTH_SHORT)
                    .show();
            System.out.println("ERRORLOG::" + e);
            e.printStackTrace();
        }
    }

    private void getImage() {
        Intent i = new Intent(Intent.ACTION_PICK,
                android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(i, SELECT_PICTURE);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == SELECT_PICTURE &amp;&amp; resultCode == RESULT_OK
                &amp;&amp; data != null) {

            Uri pickedImage = data.getData();
            String[] filePath = { MediaStore.Images.Media.DATA };
            Cursor cursor = getContentResolver().query(pickedImage, filePath,
                    null, null, null);
            cursor.moveToFirst();

            selectedImagePath = cursor.getString(cursor
                    .getColumnIndex(filePath[0]));

            cursor.close();

        }
    }

    /**
     * 
     * @param uri
     * @return
     */
    public String getPathBelowOs(Uri uri) {
        String[] projection = { MediaStore.Images.Media.DATA };
        Cursor cursor = managedQuery(uri, projection, null, null, null);
        int column_index = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        return cursor.getString(column_index);
    }

    /**
     * Getting image from Uri
     * 
     * @param contentUri
     * @return
     */
    public String getPathUpperOs(Uri contentUri) {// Will return "image:x*"
        String wholeID = DocumentsContract.getDocumentId(contentUri);

        // Split at colon, use second item in the array
        String id = wholeID.split(":")[1];

        String[] column = { MediaStore.Images.Media.DATA };

        // where id is equal to
        String sel = MediaStore.Images.Media._ID + "=?";

        Cursor cursor = getContentResolver().query(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, column, sel,
                new String[] { id }, null);

        String filePath = "";

        int columnIndex = cursor.getColumnIndex(column[0]);

        if (cursor.moveToFirst()) {
            filePath = cursor.getString(columnIndex);
        }

        cursor.close();
        return filePath;
    }

    public static InputStream bitmapToInputStream(Bitmap bitmap) {
        int size = bitmap.getHeight() * bitmap.getRowBytes();
        ByteBuffer buffer = ByteBuffer.allocate(size);
        bitmap.copyPixelsToBuffer(buffer);
        return new ByteArrayInputStream(buffer.array());
    }
}
</code></pre>
