<p>As markg said, a <code>Map</code> will help you out greatly.  Just to add a little bit onto it though, I'd also group your data in a meaningful manner.  For instance, your current implementation contains this:</p>

<pre><code>DescriptiveStatistics ds = new DescriptiveStatistics();

while (rset.next())
{
    if (rset.getString("Ambulance").equals("Medic1") &amp;&amp; rset.getInt("YearOfCall") == 2015)
    {
        String event = rset.getString("I_EventNumber");
        int year = rset.getInt("YearOfCall");
        int responseTime = rset.getInt("ResponseTime");
        String truck = rset.getString("Ambulance");
        ds.addValue(responseTime);
    }
}
</code></pre>

<p>What you're essentially doing now is determining if the data meets a specific criteria, add it to your single dataset.  But if you wanted to check another criteria, you'd need to initialize another dataset, add another if statement, copy the code down there; it <strong>isn't scalable</strong>.</p>

<p>Instead, consider creating an object that you can use group your data by:</p>

<pre><code>public class DataPoint {
    // Consider private members with public getters/setters.
    public String ambulance;
    public int year;

    public DataPoint(String ambulance, int year) {
        this.ambulance = ambulance;
        this.year = year;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((ambulance == null) ? 0 : ambulance.hashCode());
        result = prime * result + year;
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        DataPoint other = (DataPoint) obj;
        if (ambulance == null) {
            if (other.ambulance != null)
                return false;
        } else if (!ambulance.equals(other.ambulance))
            return false;
        if (year != other.year)
            return false;
        return true;
    }
}
</code></pre>

<p>The <code>hashCode()</code> and <code>equals()</code> overrides are important, but are tangential to this discussion.  Basically, they make sure that the Map can find and determine that two different objects with the same parameters are equal.</p>

<p>Now, with our new DataPoint object, we can map data we receive to specific datasets.  So your implementation I outlined above would be replaced with:</p>

<pre><code>Map&lt;DataPoint, DescriptiveStatistics&gt; map = new HashMap&lt;DataPoint, DescriptiveStatistics&gt;();

while (rset.next())
{
    // Get parameters we differentiate based on.
    String truck = rset.getString("Ambulance");
    int year = rset.getInt("YearOfCall");

    // Create the data point.
    DataPoint point = new DataPoint(truck, year);

     // Get data set for point; if it doesn't exist, create it. 
    if (map.get(point) == null) {
        map.put(new DescriptiveStatistics());
    }
    DescriptiveStatistics ds = map.get(point);

    // Add the data of interest to the given data set.
    int responseTime = rset.getInt("ResponseTime");
    ds.addValue(responseTime);
}
</code></pre>

<p>When the while loop finishes, you will have a Map filled with a mapping of specific data points and their associated data sets.  From there just iterate through the map entries and you can do whatever you want with the datasets:</p>

<pre><code>for (Entry&lt;DataPoint, DescriptiveStatistics&gt; entry : map.entrySet())
...
</code></pre>

<p>Hope that clarifies a little.</p>
