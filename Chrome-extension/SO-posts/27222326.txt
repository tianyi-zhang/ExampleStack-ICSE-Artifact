<p>First of all, thank you to everyone who posted answers. You all helped a lot and the solution was a combination of your answers. I've decided to post my own answer with the solution I came up with for the benefit of others who may have the same issue.</p>

<p>It turns out, I was indeed creating too many threads and the OS only lets Java have a certain amount of memory space. So I fixed that by using an ExecutorService.</p>

<p>However, I was still having the same problem, even though I wasn't explicitly creating lots of new threads. Why? because I was creating new Clips to play sounds.</p>

<p>I think the Clips are somehow creating threads to play sounds on, so they can play without locking up the program or GUI (which I didn't understand before). So, to solve the problem once and for all, and also to allow my game to play the exact same sound rapidly in succession without clipping or having to wait for the previous sound to finish, I got rid of the executor and created ten Clips for each sound and that's all.</p>

<p>When a sound is played, it increments an index so that the next time that sound is played, it will actually use a different clip (but loaded with the same exact sound) and it prepares the next clip to play too.</p>

<p>My game not longer creates excessive threads or clips and runs great! The updated code is below, along with a couple of tests that I used to find out what was going on:</p>

<pre><code>import java.io.IOException;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.UnsupportedAudioFileException;

public class AudioManager {

    private static ExecutorService backgroundPool = Executors.newFixedThreadPool(1);
    private static Future&lt;?&gt; backgroundStatus;
    private static int loopCounter = 2;
    private static String[] backgroundFiles = {
        "/40_Avalon.wav","/13_Glatisant.wav",
        "/31_Lying_In_Deceit.wav","/43_Return_to_Base.wav"};
    private static String[] files = {
        "/bigboom.wav","/Robot_blip.wav",
        "/battleStations.WAV","/beep1.wav",
        "/button-47.wav","/button-35.wav",
        "/beep-23.wav","/Sonar_pings.wav",
        "/button-21.wav","/SONAR.WAV"};
    private static AudioInputStream currentBackgroundMusic;
    private static boolean backgroundOn = false;
    private static boolean canStart = true;

    private static int[] clipIndex = new int[10];

    private static Clip[][] clips = new Clip[10][10];

    private static void initializeClips(int sound){

        clipIndex[sound] = 0;

        for (int i = 0 ; i &lt; 10 ; i++)
            try {
                clips[sound][i] = AudioSystem.getClip();
                clips[sound][i].open(loadSound(sound));
                clips[sound][i].addLineListener(new LineListener(){

                    @Override
                    public void update(LineEvent event) {
                        if(event.getType() == javax.sound.sampled.LineEvent.Type.STOP){
                            clips[sound][clipIndex[sound]].setFramePosition(0);
                        }
                    }});
            } catch (LineUnavailableException | IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
    }





    private static AudioInputStream loadSound(int s){

        AudioInputStream stream = null;

        try {
            stream = AudioSystem.getAudioInputStream(AudioManager.class.getClass().getResource(files[s]));
        } catch (UnsupportedAudioFileException | IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return stream;

    }

    private static AudioInputStream loadBackground(int s){

        AudioInputStream stream = null;

        try {
            stream = AudioSystem.getAudioInputStream(AudioManager.class.getClass().getResource(backgroundFiles[s]));
        } catch (UnsupportedAudioFileException | IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return stream;

    }


    public static void setSound(int s){
        if(clips[s] == null){
            initializeClips(s);
        }
        playSound(s);
    }

    private static void continueMusic(){
        setBackgroundMusic(loopCounter);
        loopCounter++;
        if(loopCounter &gt; 3) loopCounter = 0;
    }

    public static void playSound(int sound){
        if(clips[sound][0] == null){
            initializeClips(sound);
        }
        clips[sound][clipIndex[sound]].start();
        clipIndex[sound]++;
        if(clipIndex[sound] == 10){
            clipIndex[sound] = 0;
        }
        clips[sound][clipIndex[sound]].drain();
        clips[sound][clipIndex[sound]].flush();
        clips[sound][clipIndex[sound]].setFramePosition(0);

    }


    public static void setBackgroundMusic(int s){

        canStart = false;

        if (backgroundOn) {
            backgroundOn = false;
        }
        currentBackgroundMusic = loadBackground(s);
        backgroundStatus = backgroundPool.submit(new MusicPlayer());
        canStart = true;
    }

    private static void playSound2(AudioInputStream audio) {

        backgroundOn = true;
        AudioFormat     audioFormat = audio.getFormat();
        SourceDataLine  line = null;
        DataLine.Info   info = new DataLine.Info(SourceDataLine.class,audioFormat);

        try{
            line = (SourceDataLine) AudioSystem.getLine(info);
            line.open(audioFormat);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        line.start();

        int     nBytesRead = 0;
        byte[]  abData = new byte[128000];

        while (nBytesRead != -1 &amp;&amp; backgroundOn){
            try{
                nBytesRead = audio.read(abData, 0, abData.length);
            } catch (IOException e){
                e.printStackTrace();
            }

            if (nBytesRead == -1) break;

            line.write(abData, 0, nBytesRead);

        }

        line.drain();
        line.stop();
        line.close();
        line = null;
        backgroundOn = false;
    }

    private static class MusicPlayer implements Runnable{

        @Override
        public void run() {
            playSound2(currentBackgroundMusic); 
        }
    }

    public static void loopMusic(){

        Thread loop = new Thread(new Runnable(){

            @Override
            public void run() {
                while(true){
                    if(backgroundStatus.isDone() &amp;&amp; canStart){
                        continueMusic();
                    }
                }

            }});

        loop.start();
    }
    public static void reset(){
        loopCounter = 2;
    }


}
</code></pre>

<p>The following is a test that will tell you how many threads your operating system lets the JVM create. Once you get the error, just look at the last number that was printed to the console.</p>

<pre><code>public class Test1 {

    static long count = 0L;

    public static void main(String[] args) {
        while(true){
            count ++;
            System.out.println(count);
            new Thread(new Runnable(){

                @Override
                public void run() {
                    try {
                        Thread.sleep(60000);
                    } catch (InterruptedException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                }}).start();
        }

    }

}
</code></pre>

<p>And the following is a test that does the same thing, except by creating clips and opening resources. Notice that the clips themselves don't require a thread, but once you open them they do. You should get the same number (or close) before the error with each test. Of course, you will have to provide your own sound file to run the second one.</p>

<pre><code>import java.io.IOException;
import java.util.ArrayList;

import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;

import audio.AudioManager;

public class Test2 {

    static long count = 0L;
    static ArrayList&lt;Clip&gt; clips = new ArrayList&lt;&gt;();

    public static void main(String[] args) {
        while(true){
            count ++;
            System.out.println(count);
            try {
                Clip clip1 = AudioSystem.getClip();
                clip1.open(loadSound());
                clips.add(clip1);

            } catch (LineUnavailableException | IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        }

    }

    public static AudioInputStream loadSound(){

        AudioInputStream stream = null;

        try {
            stream = AudioSystem.getAudioInputStream(AudioManager.class.getClass().getResource("/bigboom.wav"));
        } catch (UnsupportedAudioFileException | IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return stream;

    }

}
</code></pre>
