<p>You have two options,</p>

<ol>
<li>Use a library for doing this <a href="http://commons.apache.org/proper/commons-lang/" rel="nofollow">commons-lang</a> has the <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/LocaleUtils.html" rel="nofollow">LocaleUtils</a> class that has a method that can parse a <code>String</code> to a <code>Locale</code>.</li>
<li>While your own method, the validation here is non trivial as there are a number of different sets of country codes that a valid for a <code>Locale</code> - see the <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Locale.html" rel="nofollow">javadoc</a></li>
</ol>

<p>A starting point would be to split the <code>String</code> and switch on the number of elements:</p>

<pre><code>public static Locale parseLocale(final String locale) {
    final String[] localeArr = locale.split("_");
    switch (localeArr.length) {
        case 1:
            return new Locale(localeArr[0]);
        case 2:
            return new Locale(localeArr[0], localeArr[1]);
        case 3:
            return new Locale(localeArr[0], localeArr[1], localeArr[2]);
        default:
            throw new IllegalArgumentException("Invalid locale format;");
    }
}
</code></pre>

<p>Presumably you would need to get lists of all valid country codes and languages and compare the elements in the <code>String[]</code> to the valid values before calling the constructor.</p>
