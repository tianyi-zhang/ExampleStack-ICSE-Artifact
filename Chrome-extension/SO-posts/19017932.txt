<p>There are a number of steps you need to take to be able to do this.</p>

<p>First (of course) the device needs to be rooted.  You can check this in a number of ways.</p>

<p>The following code will check if the "su" command returns a command not found error (su binary exists) AND that a super user app is installed to grant the permissions after you request them.</p>

<pre><code> private boolean isDeviceRooted() {

            // check for SU command in shell
            if ((new ExecShell().executeCommand(ExecShell.SHELL_COMMAND.su_check) != null) &amp;&amp; (appInstalled("eu.chainfire.supersu.nonag") || appInstalled("eu.chainfire.supersu") || appInstalled("com.noshufou.android.su") || appInstalled("com.koushikdutta.superuser"))) {
                Log.i(TAG, "Device Rooted");
                return true;
            }

            // check for SU application installed
            if (appInstalled("eu.chainfire.supersu.nonag") || appInstalled("eu.chainfire.supersu") || appInstalled("com.noshufou.android.su") || appInstalled("com.koushikdutta.superuser")) {
                Log.i(TAG, "Device Rooted");
                return true;
            }

            Log.i(TAG, "Device Not Rooted");
            return false;
        }


        private boolean appInstalled(String uri) {
            PackageManager pm = getPackageManager();
            boolean app_installed = false;
            try {
                pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES);
                app_installed = true;
            } catch (PackageManager.NameNotFoundException e) {
                app_installed = false;
            }
            return app_installed;
        }
</code></pre>

<p>If this code returns false you could set a flag or display and error, else continue.</p>

<p>Then, once you know the device is rooted, you want to execute the necessary root commands to do what you need.</p>

<p>The following code takes as input String[] of commands, and executes them sequentially as root.</p>

<pre><code>public boolean RunAsRoot(String[] cmds) {
    Process p;
    try {
        p = Runtime.getRuntime().exec("su");
        DataOutputStream os = new DataOutputStream(p.getOutputStream());
        try {
            for (String tmpCmd : cmds) {
                os.writeBytes(tmpCmd + "\n");
            }
            os.writeBytes("exit\n");
            os.flush();
            return true;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return false;
        }
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        return false;
    }
}
</code></pre>

<p>In your case you will first want to mount /system as rw.  There is lots of information on the web to help you find the command you want but it will look something like
<code>mount -o remount rw /system mount -o remount rw /system</code></p>

<p>You then want to move the file you want using either <code>mv</code> or <code>cp</code>.</p>

<p>An example of the use of the root commands would be</p>

<pre><code>String[] cmds = {"mount -o remount rw /system mount -o remount rw /system", "cp /sdcard/myfile /system/framework/myfile"};
if(!RunAsRoot(cmds)){
    //Commands failed to run, show an error/retry
}
</code></pre>

<p>This covers the "hard" bit which is the root functionality.</p>

<p>An easy tutorial for the button can be found <a href="http://examples.javacodegeeks.com/android/core/ui/button/android-button-example/" rel="nofollow">here</a>.</p>

<p>Program flow could be</p>

<pre><code>onCreate(){
    checkIsRooted();
    Button x = (Button) findViewById(R.id.x);
    x.setOnClickListener(onClickListener());
}

onClickListener(){
    onClick(){
        String[] cmds = {...};
        if(!runAsRoot(cmds))
            AlertDialog.Builder.makeText(...).show();
    }
}
</code></pre>

<p>NOTE, THIS IS PSEUDO CODE, YOU CAN'T COPY AND PASTE THIS CODE TO MAKE IT WORK, YOU NEED TO DO IT PROPERLY YOURSELF!</p>
