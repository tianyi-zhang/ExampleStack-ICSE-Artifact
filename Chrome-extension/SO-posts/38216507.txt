<p>if you are using in activity means follow the link </p>

<p><a href="http://www.tutorialspoint.com/android/android_camera.htm" rel="nofollow">default Camera</a></p>

<p>if you want to use it in fragment means follow the link </p>

<p><a href="https://www.airpair.com/android/android-camera-surface-view-fragment" rel="nofollow">fragment camera</a></p>

<p>or You can use this custom camera..</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
    &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        android:orientation="vertical"&gt;

        &lt;SurfaceView
            android:id="@+id/camerapreview"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content" /&gt;

        &lt;RelativeLayout
            android:id="@+id/rltImagePreview"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@color/preview_back"&gt;

            &lt;RelativeLayout
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:orientation="vertical"&gt;

                &lt;TextView
                    android:id="@+id/textView"
                    style="@style/label_text_primary"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_alignParentTop="true"
                    android:layout_centerHorizontal="true"
                    android:background="#ff0000"
                    android:gravity="center"
                    android:padding="@dimen/normal_padding"
                    android:text="Image Preview"
                    android:textColor="@color/white" /&gt;

                &lt;ImageView
                    android:id="@+id/imgPreviewView"
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    android:layout_below="@+id/textView"
                    android:layout_centerVertical="true"
                    android:layout_gravity="center_horizontal"
                    android:adjustViewBounds="true"
                    android:src="@mipmap/ic_launcher" /&gt;

            &lt;/RelativeLayout&gt;

            &lt;LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_alignParentBottom="true"
                android:layout_centerHorizontal="true"
                android:orientation="horizontal"
                android:layout_margin="@dimen/min_margin"
                android:weightSum="1"&gt;

                &lt;Button
                    android:id="@+id/btnImageOk"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_margin="@dimen/min_margin"
                    android:padding="@dimen/normal_padding"
                    android:layout_weight="0.5"
                    android:background="#ff00000"
                    android:gravity="center"
                    android:text="Ok"
                    android:textColor="@color/white" /&gt;

                &lt;Button
                    android:id="@+id/btnImageCancel"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_margin="@dimen/min_margin"
                    android:padding="@dimen/normal_padding"
                    android:layout_weight="0.5"
                    android:background="#ff0000"

                    android:gravity="center"
                    android:text="Cancel"
                    android:textColor="@color/white" /&gt;
            &lt;/LinearLayout&gt;


        &lt;/RelativeLayout&gt;

        &lt;RelativeLayout
            android:id="@+id/rltControls"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:padding="@dimen/min_padding"
            android:gravity="bottom"&gt;


            &lt;ImageView
                android:id="@+id/btnTakepicture"
                android:layout_width="60dp"
                android:layout_height="60dp"
                android:layout_alignParentBottom="true"
                android:layout_centerHorizontal="true"
                android:background="@drawable/capture_selector"/&gt;
            &lt;ImageView
                android:id="@+id/btnFlashOn"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_alignParentEnd="true"
                android:layout_alignParentRight="true"
                android:layout_alignParentBottom="true"
                android:padding="@dimen/normal_padding"
                android:background="@drawable/action_flash_enable" /&gt;

            &lt;ImageView
                android:id="@+id/btnFlashOff"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_alignParentEnd="true"
                android:layout_alignParentRight="true"
                android:layout_alignParentBottom="true"
                android:padding="@dimen/normal_padding"
                android:background="@drawable/action_flash_disable" /&gt;



        &lt;/RelativeLayout&gt;


    &lt;/RelativeLayout&gt;
</code></pre>

<p>the Java Code is here</p>

<pre><code>        /**
         * Created by Noorul on 06-07-2016.
         */

        import android.annotation.SuppressLint;
        import android.app.Dialog;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.content.res.Configuration;
        import android.graphics.Bitmap;
        import android.graphics.BitmapFactory;
        import android.graphics.Canvas;
        import android.graphics.Matrix;
        import android.graphics.Paint;
        import android.hardware.Camera;
        import android.hardware.Camera.AutoFocusCallback;
        import android.hardware.Camera.Parameters;
        import android.hardware.Camera.PictureCallback;
        import android.hardware.Camera.ShutterCallback;
        import android.net.Uri;
        import android.os.Bundle;
        import android.os.Handler;
        import android.support.v4.app.DialogFragment;
        import android.view.LayoutInflater;
        import android.view.MotionEvent;
        import android.view.SurfaceHolder;
        import android.view.SurfaceView;
        import android.view.View;
        import android.view.View.OnClickListener;
        import android.view.ViewGroup;
        import android.view.Window;
        import android.widget.Button;
        import android.widget.ImageView;
        import android.widget.RelativeLayout;



        import java.io.File;
        import java.io.FileNotFoundException;
        import java.io.IOException;
        import java.io.OutputStream;
        import java.text.SimpleDateFormat;
        import java.util.Date;
        import java.util.List;

        import de.greenrobot.event.EventBus;

        @SuppressWarnings("ALL")
        public class FragmentSurfaceViewCamera extends DialogFragment implements SurfaceHolder.Callback, OnClickListener {

            static final int MEDIA_TYPE_IMAGE = 1;
            final int RESULT_SAVEIMAGE = 0;
            LayoutInflater controlInflater = null;
            PictureCallback myPictureCallback_RAW = new PictureCallback() {
                @Override
                public void onPictureTaken(byte[] arg0, Camera arg1) {
                    // TODO Auto-generated method stub

                }
            };
            private Camera camera;
            private SurfaceView surfaceView;
            private SurfaceHolder surfaceHolder;
            private boolean previewing = false;
            private ImageView btnTakePicture, btnFlashOn, btnFlashOff;
            AutoFocusCallback myAutoFocusCallback = new AutoFocusCallback() {

                @Override
                public void onAutoFocus(boolean arg0, Camera arg1) {// TODO Auto-generated method stub
                    btnTakePicture.setEnabled(true);
                }
            };
            private ImageView imgPreviewView;
            private boolean flashStatus;
            private Bundle bundle;
            private RelativeLayout rltImagePreview, rltControls;
            private Uri uri;
            private boolean captureState = true;
            private View view;
            PictureCallback myPictureCallback_JPG = new PictureCallback() {

                @Override
                public void onPictureTaken(byte[] data, Camera arg1) {


                    if (data != null) {
                        File pictureFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
                        uri = Uri.fromFile(pictureFile);
                        OutputStream imageFileOS;
                        try {
                            imageFileOS = getActivity().getContentResolver().openOutputStream(uri);
                            int screenWidth = getResources().getDisplayMetrics().widthPixels;
                            int screenHeight = getResources().getDisplayMetrics().heightPixels;
                            Bitmap bm = BitmapFactory.decodeByteArray(data, 0, (data != null) ? data.length : 0);

                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                                Bitmap scaled = bitmapResizer(bm, screenHeight, screenWidth);//scaling the bitmap 
                                int w = scaled.getWidth();
                                int h = scaled.getHeight();
                                Matrix mtrx = new Matrix();
                                mtrx.postRotate(90);
                                bm = Bitmap.createBitmap(scaled, 0, 0, w, h, mtrx, false);
                            } else {
                                Bitmap scaled = Bitmap.createScaledBitmap(bm, screenWidth, screenHeight, false);
                                bm = scaled;
                            }

                            bm.compress(Bitmap.CompressFormat.PNG, 100, imageFileOS);//Lossless compressin create image file
                            imageFileOS.flush();
                            imageFileOS.close();
                        }  catch (Exception e) {
                            e.printStackTrace();
                        }

                    }

                    visibleImagePreview();
                    preview(uri);

                }
            };

            public Bitmap bitmapResizer(Bitmap bitmap,int newWidth,int newHeight) {
                Bitmap scaledBitmap = Bitmap.createBitmap(newWidth, newHeight, Bitmap.Config.ARGB_8888);

                float ratioX = newWidth / (float) bitmap.getWidth();
                float ratioY = newHeight / (float) bitmap.getHeight();
                float middleX = newWidth / 2.0f;
                float middleY = newHeight / 2.0f;

                Matrix scaleMatrix = new Matrix();
                scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);

                Canvas canvas = new Canvas(scaledBitmap);
                canvas.setMatrix(scaleMatrix);
                canvas.drawBitmap(bitmap, middleX - bitmap.getWidth() / 2, middleY - bitmap.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));

                return scaledBitmap;

            }
            private ShutterCallback myShutterCallback = new ShutterCallback() {

                @Override
                public void onShutter() {
                    // TODO Auto-generated method stub
                }
            };

            private File getOutputMediaFile(int type) {

                String filePath = Utils.getFolderPath(getActivity(), getActivity().getResources().getString(R.string.app_name));


                // Create a media file name
                String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                File mediaFile;
                if (type == MEDIA_TYPE_IMAGE) {
                    mediaFile = new File(filePath + File.separator +
                            "IMG_" + timeStamp + ".jpg");
                } else {
                    return null;
                }

                return mediaFile;
            }

            @Override
            public void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                EventBus.getDefault().register(this);
                setStyle(DialogFragment.STYLE_NORMAL, android.R.style.Theme_Black_NoTitleBar_Fullscreen);
            }

            @SuppressLint("NewApi")
            public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                     Bundle savedInstanceState) {

                getDialog().getWindow().requestFeature(Window.FEATURE_NO_TITLE);


                view = inflater.inflate(R.layout.surface_view_camera, null);
                bundle = getArguments();


                Button btnImageOk = (Button) view.findViewById(R.id.btnImageOk);
                Button btnImageCancel = (Button) view.findViewById(R.id.btnImageCancel);

                imgPreviewView = (ImageView) view.findViewById(R.id.imgPreviewView);
                rltImagePreview = (RelativeLayout) view.findViewById(R.id.rltImagePreview);
                rltControls = (RelativeLayout) view.findViewById(R.id.rltControls);

                btnTakePicture = (ImageView) view.findViewById(R.id.btnTakepicture);//Button capture initialized.
                btnFlashOn = (ImageView) view.findViewById(R.id.btnFlashOn);
                btnFlashOff = (ImageView) view.findViewById(R.id.btnFlashOff);
                btnTakePicture.setOnClickListener(this);
                btnFlashOn.setOnClickListener(this);
                btnFlashOff.setOnClickListener(this);
                btnImageOk.setOnClickListener(this);
                btnImageCancel.setOnClickListener(this);

                initSurfaceView();
                return view;

            }

            void initSurfaceView() {
                surfaceView = (SurfaceView) view.findViewById(R.id.camerapreview);
                surfaceHolder = surfaceView.getHolder();
                surfaceHolder.addCallback(this);
                surfaceView.setOnTouchListener(new View.OnTouchListener() {
                    @Override
                    public boolean onTouch(View v, MotionEvent event) {
                        takePicture();
                        return false;
                    }
                });

                surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
                visibleSurfaceView();
            }


            @Override
            public void onStart() {
                super.onStart();
                Dialog dialog = getDialog();
                if (dialog != null) {
                    int width = ViewGroup.LayoutParams.MATCH_PARENT;
                    int height = ViewGroup.LayoutParams.MATCH_PARENT;
                    dialog.getWindow().setLayout(width, height);
                }
            }

            private boolean checkFlashStatus() {
                boolean hasFlash = getActivity().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);
                return hasFlash;
            }

            public Bundle getEnteredInfo(Uri uri) {
                Bundle preview = this.bundle;
                preview.putString("image", uri.toString());
                return preview;

            }

            private void preview(Uri uri) {
                captureState = true;
                btnTakePicture.setEnabled(true);
                imgPreviewView.invalidate();
                File imgFile = new File(uri.getPath());

                if (imgFile.exists()) {
                    BitmapFactory.Options options = new BitmapFactory.Options();

                    Bitmap bitmap = BitmapFactory.decodeFile(imgFile.getPath(), options);

                    imgPreviewView.setImageBitmap(bitmap);

                }

            }

            private void flashVisibilityStatus() {
                Parameters par = camera.getParameters();
                if (flashStatus) {
                    flashOff();
                    par.setFlashMode(Parameters.FLASH_MODE_OFF);

                } else {
                    if (checkFlashStatus()) {
                        flashOn();
                        par.setFlashMode(Parameters.FLASH_MODE_ON);
                    } else {
                        flashOff();
                        par.setFlashMode(Parameters.FLASH_MODE_OFF);
                    }
                }
                List&lt;Camera.Size&gt; sizes = par.getSupportedPreviewSizes();
                List&lt;Camera.Size&gt; supportedPictureSizes = par.getSupportedPictureSizes();
                Camera.Size previewSize = getOptimalSize(sizes, getResources().getDisplayMetrics().widthPixels, getResources().getDisplayMetrics().heightPixels);
                Camera.Size pictureSize = getOptimalSize(supportedPictureSizes, getResources().getDisplayMetrics().widthPixels, getResources().getDisplayMetrics().heightPixels);
                par.setPreviewSize(previewSize.width, previewSize.height);
                par.setPictureSize(pictureSize.width, pictureSize.height);
                camera.setParameters(par);
            }

            private void flashOn() {
                btnFlashOn.setVisibility(View.VISIBLE);
                btnFlashOff.setVisibility(View.GONE);
            }

            private void flashOff() {
                btnFlashOff.setVisibility(View.VISIBLE);
                btnFlashOn.setVisibility(View.GONE);
            }

            @Override
            public void surfaceCreated(SurfaceHolder holder) {
                // TODO Auto-generated method stub
                camera = Camera.open();
                flashVisibilityStatus();
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width,
                                       int height) {

                if (previewing) {
                    camera.stopPreview();
                    previewing = false;
                }

                Parameters parameters = camera.getParameters();


                camera.setParameters(parameters);
                if (camera != null) {
                    try {
                        camera.setDisplayOrientation(90);
                        camera.setPreviewDisplay(surfaceHolder);
                        camera.startPreview();
                        previewing = true;
                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }


            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {

                if (camera != null) {
                    camera.stopPreview();
                    camera.release();
                    camera = null;
                    previewing = false;
                }
            }


            @Override
            public void onClick(View view) {
                switch (view.getId()) {
                    case R.id.btnTakepicture:
                        takePicture();
                        break;
                    case R.id.btnFlashOn:
                        flashStatus = true;
                        flashVisibilityStatus();
                        break;
                    case R.id.btnFlashOff:
                        flashStatus = false;
                        flashVisibilityStatus();
                        break;
                    case R.id.btnImageOk:

                        Bundle bundle1 = bundle;
                        bundle1.putString("image", uri.toString());
                        Intent searchIntent = new Intent(Constants.PICK_CONTENT_INTENT);
                        String reqScreen = bundle.getString("camera");
                        searchIntent.putExtra(reqScreen, bundle1);
                        getActivity().sendBroadcast(searchIntent);
                        dismiss();
                      /*
                      * here take the Image where you want to send
                      * */
                        break;

                    case R.id.btnImageCancel:
                        visibleSurfaceView();
                        initSurfaceView();
                        break;

                    default:
                        break;
                }

            }

            void takePicture() {
                if (captureState) {
                    captureState = false;
                    camera.autoFocus(myAutoFocusCallback);// Auto Focus callback will be called when the user click on the capture button
                    new Handler().postDelayed(new Runnable() {//After the autofocus end button capture call bak will be called.

                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            camera.takePicture(myShutterCallback,
                                    myPictureCallback_RAW, myPictureCallback_JPG);

                        }
                    }, 2000);//here 2000 is the auto focus time.
                }

            }


            public void onEvent(int event) {
                if (event == Constants.SURFACE_INVISIBLE_REGISTER_BTN) {
                    visibleStausOfSurfaceView();
                }
            }

            private void visibleImagePreview() {
                rltImagePreview.setVisibility(View.VISIBLE);
                visibleStausOfSurfaceView();
            }

            private void visibleSurfaceView() {
                rltImagePreview.setVisibility(View.GONE);
                surfaceView.setVisibility(View.VISIBLE);
                rltControls.setVisibility(View.VISIBLE);
            }

            private void visibleStausOfSurfaceView() {
                surfaceView.setVisibility(View.GONE);
                rltControls.setVisibility(View.GONE);
            }

            private Camera.Size getOptimalSize(List&lt;Camera.Size&gt; sizes, int w, int h) {
                final double ASPECT_TOLERANCE = 0.1;
                double targetRatio = (double) h / w;

                if (sizes == null) return null;

                Camera.Size optimalSize = null;
                double minDiff = Double.MAX_VALUE;

                int targetHeight = h;

                for (Camera.Size size : sizes) {
                    double ratio = (double) size.width / size.height;
                    if (Math.abs(ratio - targetRatio) &gt; ASPECT_TOLERANCE) continue;
                    if (Math.abs(size.height - targetHeight) &lt; minDiff) {
                        optimalSize = size;
                        minDiff = Math.abs(size.height - targetHeight);
                    }
                }

                if (optimalSize == null) {
                    minDiff = Double.MAX_VALUE;
                    for (Camera.Size size : sizes) {
                        if (Math.abs(size.height - targetHeight) &lt; minDiff) {
                            optimalSize = size;
                            minDiff = Math.abs(size.height - targetHeight);
                        }
                    }
                }
                return optimalSize;
            }

        }
</code></pre>

<p>Note: Some of the Classes are deprecated. Use the classes and function with latest functionlities</p>

<p><strong>Usage:</strong> </p>

<pre><code>  FragmentSurfaceViewCamera  cam= new FragmentSurfaceViewCamera();
  cam.show(getSupportFragmentManager(),"camera"); 
</code></pre>
