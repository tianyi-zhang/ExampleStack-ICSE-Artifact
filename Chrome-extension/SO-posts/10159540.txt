<p>First of all your usage of <code>scanner.next()</code> seems incorrect. <code>next()</code> will return the next word and move onto next one every time you call it, therefore the following code:</p>

<pre><code>if(scanner.next() == null){ ... }
</code></pre>

<p>and also </p>

<pre><code>scanner.next().replaceAll("[^A-Za-z0-9]"," ");
scanner.next().toLowerCase();
</code></pre>

<p>will consume and then just throw away words. What you probably want to do is:</p>

<pre><code>String word = scanner.next().replaceAll("[^A-Za-z0-9]"," ").toLowerCase();
</code></pre>

<p>at the beginning of your <code>while</code> loop, so that the changes to your word are saved in the <code>word</code> variable, and not just thrown away.</p>

<p>Secondly, the usage of the <code>wordCount</code> map is slightly broken. What you want to do is to check if the <code>word</code> is already in the map to decide what word count to set. To do this, instead of checking for <code>scanner.next() == null</code> you should look in the map, for example:</p>

<pre><code>if(!wordCount.containsKey(word)){
  //no count registered for the word yet
  wordCount.put(word, 1);
}else{
  wordCount.put(word, wordCount.get(word) + 1);
}
</code></pre>

<p>alternatively you can do this:</p>

<pre><code>Integer count = wordCount.get(word);
if(count == null){
  //no count registered for the word yet
  wordCount.put(word, 1);
}else{
  wordCount.put(word, count+1);
}
</code></pre>

<p>I would prefer this approach, because it's a bit cleaner, and does only one map look-up per word, whereas the first approach sometimes does two look-ups.</p>

<p>Now, to get a list of words in descending order of frequencies, you can convert your map to a list first, then apply <code>Collections.sort()</code> as was suggested in <a href="http://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java">this post</a>. Below is a simplified version suited to your needs:</p>

<pre><code>static List&lt;String&gt; getWordInDescendingFreqOrder(Map&lt;String, Integer&gt; wordCount) {

    // Convert map to list of &lt;String,Integer&gt; entries
    List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = 
        new ArrayList&lt;Map.Entry&lt;String, Integer&gt;&gt;(wordCount.entrySet());

    // Sort list by integer values
    Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;() {
        public int compare(Map.Entry&lt;String, Integer&gt; o1, Map.Entry&lt;String, Integer&gt; o2) {
            // compare o2 to o1, instead of o1 to o2, to get descending freq. order
            return (o2.getValue()).compareTo(o1.getValue());
        }
    });

    // Populate the result into a list
    List&lt;String&gt; result = new ArrayList&lt;String&gt;();
    for (Map.Entry&lt;String, Integer&gt; entry : list) {
        result.add(entry.getKey());
    }
    return result;
}
</code></pre>

<p>Hope this helps.</p>

<p><strong>Edit:</strong>
Changed the comparison function as suggested by @dragon66. Thanks.</p>
