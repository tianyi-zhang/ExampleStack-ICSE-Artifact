<p>You can try this code. It'll probably perform better than the regex equivalent (not that I have benchmarked it, or anything). It's pretty well tested too.</p>

<p>Note that you will need to use a numeric representation (in <code>byte[]</code>) of the IP address. To get it you can either do <code>InetAddress.getByName(ip).getAddress()</code> if you need to resolve host names, or use sun utility class <code>IPAddressUtil.textToNumericFormatV6(ip)</code> to parse from an IP address without host resolution.</p>

<pre><code>private static final char[] ipv6conseqZeroFiller = { ':', ':' };
private static final char ipv6hextetSeparator = ':';

/*
 * Convert numeric IPv6 to compressed format, where
 * the longest sequence of 0's (with 2 or more 0's) is replaced with "::"
 */
public static String ipv6toCompressedForm(byte[] src) {
    assert src.length == 16;
    //Find the longest sequence of 0's 
    int cmprHextet = -1; //start of compressed region (hextet index)
    int cmprSize = 0; //length of compressed region
    for (int hextet = 0; hextet &lt; 8;) {
        int curByte = hextet * 2;
        int size = 0;
        while (curByte &lt; src.length &amp;&amp; src[curByte] == 0
                &amp;&amp; src[curByte + 1] == 0) {
            curByte += 2;
            size++;
        }
        if (size &gt; cmprSize) {
            cmprHextet = hextet;
            cmprSize = size;
        }
        hextet = (curByte / 2) + 1;
    }
    if (cmprHextet == -1 || cmprSize &lt; 2) {
        //No compression can be applied
        return ipv6toStr(src);
    }
    StringBuilder sb = new StringBuilder(39);
    ipv6toStr(sb, src, 0, cmprHextet);
    sb.append(ipv6conseqZeroFiller);
    ipv6toStr(sb, src, cmprHextet + cmprSize, 8);
    return sb.toString();
}

/*
 * Convert numeric IPv6 to standard (non-compressed) format.
 *
 * Borrowed from Inet6Address.java #numericToTextFormat(byte[])
 * Changed StringBuffer -&gt; StringBuilder and ":" -&gt; ':' for performance.
 */
public static String ipv6toStr(byte[] src) {
    assert src.length == 16;
    StringBuilder sb = new StringBuilder(39);
    ipv6toStr(sb, src, 0, 8);
    return sb.toString();
}

private static final void ipv6toStr(StringBuilder sb, byte[] src,
        int fromHextet, int toHextet) {
    for (int i = fromHextet; i &lt; toHextet; i++) {
        sb.append(Integer.toHexString(((src[i &lt;&lt; 1] &lt;&lt; 8) &amp; 0xff00)
                | (src[(i &lt;&lt; 1) + 1] &amp; 0xff)));
        if (i &lt; toHextet - 1) {
            sb.append(ipv6hextetSeparator);
        }
    }
}
</code></pre>
