<p>The key format used by ssh is defined in the <a href="http://www.ietf.org/rfc/rfc4253.txt">RFC #4253</a>. The format for RSA public key is the following :</p>

<pre><code>  string    "ssh-rsa"
  mpint     e /* key public exponent */
  mpint     n /* key modulus */
</code></pre>

<p>All data type encoding is defined in the section #5 of <a href="http://www.ietf.org/rfc/rfc4251.txt">RFC #4251</a>. string and mpint (multiple precision integer) types are encoded this way :</p>

<pre><code>  4-bytes word: data length (unsigned big-endian 32 bits integer)
  n bytes     : binary representation of the data
</code></pre>

<p>for instance, the encoding of the string "ssh-rsa" is:</p>

<pre><code>  byte[] data = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};
</code></pre>

<p>To encode the public :</p>

<pre><code>   public byte[] encodePublicKey(RSAPublicKey key) throws IOException
   {
       ByteArrayOutputStream out = new ByteArrayOutputStream();
       /* encode the "ssh-rsa" string */
       byte[] sshrsa = new byte[] {0, 0, 0, 7, 's', 's', 'h', '-', 'r', 's', 'a'};
       out.write(sshrsa);
       /* Encode the public exponent */
       BigInteger e = key.getPublicExponent();
       byte[] data = e.toByteArray();
       encodeUInt32(data.length, out);
       out.write(data);
       /* Encode the modulus */
       BigInteger m = key.getModulus();
       data = m.toByteArray();
       encodeUInt32(data.length, out);
       out.write(data);
       return out.toByteArray();
   }

   public void encodeUInt32(int value, OutputStream out) throws IOException
   {
       byte[] tmp = new byte[4];
       tmp[0] = (byte)((value &gt;&gt;&gt; 24) &amp; 0xff);
       tmp[1] = (byte)((value &gt;&gt;&gt; 16) &amp; 0xff);
       tmp[2] = (byte)((value &gt;&gt;&gt; 8) &amp; 0xff);
       tmp[3] = (byte)(value &amp; 0xff);
       out.write(tmp);
   }
</code></pre>

<p>To have a string repr√©sentation of the key just encode the returned byte array in Base64. </p>

<p>For the private key encoding there is two cases:</p>

<ol>
<li>the private key is not protected by a password. In that case the private key is encoded according to the PKCS#8 standard and then encoded with Base64. It is possible to get the PKCS8 encoding of the private key by calling <code>getEncoded</code> on <code>RSAPrivateKey</code>.</li>
<li>the private key is protected by a password. In that case the key encoding is an OpenSSH dedicated format. I don't know if there is any documentation on this format (except the OpenSSH source code of course)</li>
</ol>
