<p>Let's use input <code>abc</code> as an example.</p>

<p>Start off with just the last element (<code>c</code>) in a set (<code>["c"]</code>), then add the second last element (<code>b</code>) to its front, end and every possible positions in the middle, making it <code>["bc", "cb"]</code> and then in the same manner it will add the next element from the back (<code>a</code>) to each string in the set making it:</p>

<pre><code>"a" + "bc" = ["abc", "bac", "bca"]  and  "a" + "cb" = ["acb" ,"cab", "cba"] 
</code></pre>

<p>Thus entire permutation:</p>

<pre><code>["abc", "bac", "bca","acb" ,"cab", "cba"]
</code></pre>

<p>Code:</p>

<pre><code>public class Test 
{
    static Set&lt;String&gt; permutations;
    static Set&lt;String&gt; result = new HashSet&lt;String&gt;();

    public static Set&lt;String&gt; permutation(String string) {
        permutations = new HashSet&lt;String&gt;();

        int n = string.length();
        for (int i = n - 1; i &gt;= 0; i--) 
        {
            shuffle(string.charAt(i));
        }
        return permutations;
    }

    private static void shuffle(char c) {
        if (permutations.size() == 0) {
            permutations.add(String.valueOf(c));
        } else {
            Iterator&lt;String&gt; it = permutations.iterator();
            for (int i = 0; i &lt; permutations.size(); i++) {

                String temp1;
                for (; it.hasNext();) {
                    temp1 = it.next();
                    for (int k = 0; k &lt; temp1.length() + 1; k += 1) {
                        StringBuilder sb = new StringBuilder(temp1);

                        sb.insert(k, c);

                        result.add(sb.toString());
                    }
                }
            }
            permutations = result;
            //'result' has to be refreshed so that in next run it doesn't contain stale values.
            result = new HashSet&lt;String&gt;();
        }
    }

    public static void main(String[] args) {
        Set&lt;String&gt; result = permutation("abc");

        System.out.println("\nThere are total of " + result.size() + " permutations:");
        Iterator&lt;String&gt; it = result.iterator();
        while (it.hasNext()) {
            System.out.println(it.next());
        }
    }
}
</code></pre>
