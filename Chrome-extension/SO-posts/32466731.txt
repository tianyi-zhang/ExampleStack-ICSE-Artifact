<p>Finally I figured a <strike>solution</strike> dirty hax for the zoom out part. Not optimal but hey, it works.</p>

<p>In TwoDScrollView.java change these three methods:</p>

<pre><code>@Override
protected float getBottomFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    final int length = getVerticalFadingEdgeLength();
    final int bottomEdge = getHeight() - getPaddingBottom();
    final int span = (int) (getChildAt(0).getBottom()/scale) - getScrollY() - bottomEdge;
    if (span &lt; length) {
        return span / (float) length;
    }
    return 1.0f;
}

@Override
protected float getRightFadingEdgeStrength() {
    if (getChildCount() == 0) {
        return 0.0f;
    }
    final int length = getHorizontalFadingEdgeLength();
    final int rightEdge = getWidth() - getPaddingRight();
    final int span = (int) (getChildAt(0).getRight()/scale) - getScrollX() - rightEdge;
    if (span &lt; length) {
        return span / (float) length;
    }
    return 1.0f;
}

@Override
public void computeScroll() {
    if (mScroller.computeScrollOffset()) {
        int oldX = getScrollX();
        int oldY = getScrollY();
        int x = mScroller.getCurrX();
        int y = mScroller.getCurrY();
        if (getChildCount() &gt; 0) {
            View child = getChildAt(0);
            scrollTo(clamp(x, getWidth() - getPaddingRight() - getPaddingLeft(), (int) (child.getWidth() / scale)),
                    clamp(y, getHeight() + getPaddingBottom() - getPaddingTop(), (int) ((child.getHeight() + child.getPaddingBottom()) / scale)));
        } else {
            scrollTo(x, y);
        }
        if (oldX != getScrollX() || oldY != getScrollY()) {
            onScrollChanged(getScrollX(), getScrollY(), oldX, oldY);
        }
        postInvalidate();
    }
}
</code></pre>

<p>Also, of note, I'm using this <code>measureChildWithMargins()</code> as suggested by James McMurray on <a href="https://web.archive.org/web/20121125032032/http://blog.gorges.us/2010/06/android-two-dimensional-scrollview/comment-page-1/#comment-17982" rel="nofollow">Gorges.blog</a>, if that helps.</p>

<pre><code>@Override
protected void measureChildWithMargins(View child, int parentWidthMeasureSpec, int widthUsed, int parentHeightMeasureSpec, int heightUsed) {
    final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();

    int childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(lp.leftMargin + lp.rightMargin, MeasureSpec.UNSPECIFIED);
    int childHeightMeasureSpec = MeasureSpec.makeMeasureSpec(lp.topMargin + lp.bottomMargin, MeasureSpec.UNSPECIFIED);

    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
}
</code></pre>

<p>So now the scrollview parent limits its bounds to scaled down child. It can be pulled beyond the limits but at release scrollview layout snaps at proper size again.</p>

<p>If anyone has a better solution, I'll be happy to concede the answer.</p>

<p>And thanks to the mysterious benefactor that upvoted my question :)</p>
