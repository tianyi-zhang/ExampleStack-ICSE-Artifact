<h1>Simple diff (without lib)</h1>

<pre><code>/**
 * Get a diff between two dates
 * @param date1 the oldest date
 * @param date2 the newest date
 * @param timeUnit the unit in which you want the diff
 * @return the diff value, in the provided unit
 */
public static long getDateDiff(Date date1, Date date2, TimeUnit timeUnit) {
    long diffInMillies = date2.getTime() - date1.getTime();
    return timeUnit.convert(diffInMillies,TimeUnit.MILLISECONDS);
}
</code></pre>

<p>And then can you call:</p>

<pre><code>getDateDiff(date1,date2,TimeUnit.MINUTES);
</code></pre>

<p>to get the diff of the 2 dates in minutes unit.</p>

<p><code>TimeUnit</code> is <code>java.util.concurrent.TimeUnit</code>, a standard Java enum going from nanos to days.</p>

<hr>

<h1>Human readable diff (without lib)</h1>

<pre><code>public static Map&lt;TimeUnit,Long&gt; computeDiff(Date date1, Date date2) {
    long diffInMillies = date2.getTime() - date1.getTime();
    List&lt;TimeUnit&gt; units = new ArrayList&lt;TimeUnit&gt;(EnumSet.allOf(TimeUnit.class));
    Collections.reverse(units);
    Map&lt;TimeUnit,Long&gt; result = new LinkedHashMap&lt;TimeUnit,Long&gt;();
    long milliesRest = diffInMillies;
    for ( TimeUnit unit : units ) {
        long diff = unit.convert(milliesRest,TimeUnit.MILLISECONDS);
        long diffInMilliesForUnit = unit.toMillis(diff);
        milliesRest = milliesRest - diffInMilliesForUnit;
        result.put(unit,diff);
    }
    return result;
}
</code></pre>

<p><a href="http://ideone.com/5dXeu6">http://ideone.com/5dXeu6</a></p>

<p>The output is something like <code>Map:{DAYS=1, HOURS=3, MINUTES=46, SECONDS=40, MILLISECONDS=0, MICROSECONDS=0, NANOSECONDS=0}</code>, with the units ordered.</p>

<p>You just have to convert that map to an user-friendly string.</p>

<hr>

<h1>Warning</h1>

<p>The above code snippets compute a simple diff between 2 instants. It can cause problems during a daylight saving switch, like explained in <a href="http://tripoverit.blogspot.fr/2007_07_01_archive.html">this post</a>. This means if you compute the diff between dates with no time you may have a missing day/hour.</p>

<p>In my opinion the date diff is kind of subjective, especially on days. You may:</p>

<ul>
<li><p>count the number of 24h elapsed time: day+1 - day = 1 day = 24h</p></li>
<li><p>count the number of elapsed time, taking care of daylight savings: day+1 - day = 1 = 24h (but using midnight time and daylight savings it could be 0 day and 23h)</p></li>
<li><p>count the number of <code>day switches</code>, which means day+1 1pm - day 11am = 1 day, even if the elapsed time is just 2h (or 1h if there is a daylight saving :p)</p></li>
</ul>

<p>My answer is valid if your definition of date diff on days match the 1st case</p>

<h1>With JodaTime</h1>

<p>If you are using JodaTime you can get the diff for 2 instants (millies backed ReadableInstant) dates with:</p>

<pre><code>Interval interval = new Interval(oldInstant, new Instant());
</code></pre>

<p>But you can also get the diff for Local dates/times:</p>

<pre><code>// returns 4 because of the leap year of 366 days
new Period(LocalDate.now(), LocalDate.now().plusDays(365*5), PeriodType.years()).getYears() 

// this time it returns 5
new Period(LocalDate.now(), LocalDate.now().plusDays(365*5+1), PeriodType.years()).getYears() 

// And you can also use these static methods
Years.yearsBetween(LocalDate.now(), LocalDate.now().plusDays(365*5)).getYears()
</code></pre>
