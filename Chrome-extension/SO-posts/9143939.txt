<p>I ended up using the below code:</p>

<p>My rowlayout.xml for each row in the ListView:</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content" &gt;

    &lt;ImageView
        android:id="@+id/icon"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginLeft="5dip"
        android:layout_marginRight="10dip"
        android:layout_marginTop="5dip"
        android:padding="2dip" &gt;
    &lt;/ImageView&gt;

    &lt;TextView
        android:id="@+id/label"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="25sp" &gt;
    &lt;/TextView&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Here's my code for the listview:</p>

<pre><code>    public class SDCardExplorer extends ListActivity {

    private String mediapath = new String(Environment.getExternalStorageDirectory().getAbsolutePath());
    private String[] items;

    private List&lt;String&gt; item = null;
    private List&lt;String&gt; path = null;

    private TextView mypath;

    private AlertDialog.Builder alert;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.medialist);

        mypath = (TextView) findViewById(R.id.mypath);

        LoadDirectory(mediapath);
    }

    // class to limit the choices shown when browsing to SD card to media files
    public class AudioFilter implements FileFilter {

        // only want to see the following audio file types
        private String[] extension = {".aac", ".mp3", ".wav", ".ogg", ".midi", ".3gp", ".mp4", ".m4a", ".amr", ".flac"};

        @Override
        public boolean accept(File pathname) {

            // if we are looking at a directory that's not hidden we want to see it so return TRUE           
            if (pathname.isDirectory() &amp;&amp; !pathname.isHidden()) {
                return true;
            }

            // loops through and determines the extension of all files in the directory
            // returns TRUE to only show the audio files defined in the String[] extension array
            for (String ext : extension) {
                if (pathname.getName().toLowerCase().endsWith(ext)) {
                    return true;
                }
            }

            return false;
        }      
    }

    // Creates items in the ListView view based on the rowlayout.xml file
    class IconicList extends ArrayAdapter {

        public IconicList() {
            super(SDCardExplorer.this, R.layout.rowlayout, items);
        }

        public View getView(int position, View convertView, ViewGroup parent) {

            View row = convertView;

            // If the convertView is null, run the code below to create a new View
            if (row == null) {
                LayoutInflater inflater = getLayoutInflater();
                row = inflater.inflate(R.layout.rowlayout, parent, false);
            }

            TextView label = (TextView)row.findViewById(R.id.label); 
            ImageView icon = (ImageView)row.findViewById(R.id.icon);

            label.setText(items[position]);

            String s = items[position];

            // Get the file according the position
            File f = new File(path.get(position)); 

            // If looking at a directory
            if (f.isDirectory()) { 
                // If it's the "Home" folder, add the home icon
                if (s.contains("Home")) {
                    icon.setImageResource(R.drawable.ic_sdrooticon);
                }
                // If it's the "Up" folder, add the up icon
                else if (s.contains("Up")) {
                    icon.setImageResource(R.drawable.ic_upicon);
                }
                // Else just add the folder icon
                else {
                    icon.setImageResource(R.drawable.ic_foldericon);
                }
            }
            // Else you're looking at an audio icon, so add the audio icon
            else {
                icon.setImageResource(R.drawable.ic_audioicon);
            }

            return(row);
        }   
    }

    // Loads directory from SD card represented by the String variable dirPath
    private void LoadDirectory(String dirPath) {      

        mypath.setText("Location: " + dirPath);

        item = new ArrayList&lt;String&gt;();
        path = new ArrayList&lt;String&gt;();

        File f = new File(dirPath);
        File[] files = f.listFiles(new AudioFilter());

        // If we aren't in the SD card root directory
        // Add "Home" to go back to the root of the SD card
        // Add "Up" to go back to previous folder
        if(!dirPath.equals(mediapath)) {

            item.add("Home");
            path.add(mediapath);

            item.add("Up");
            path.add(f.getParent());
        }

        // Loops through the files and lists them
        for (int i = 0; i &lt; files.length; i++) {
            File file = files[i];
            path.add(file.getPath());

            // Add "/" to indicate you are looking at a folder
            if(file.isDirectory()) {
              item.add(file.getName() + "/");
            }
            else {
              item.add(file.getName());
            }  
        }

        //declare array with specific number off item
        items = new String[item.size()]; 
        //send data arraylist(item) to array(items)
        item.toArray(items); 
        //sets the list with icon
        setListAdapter(new IconicList()); 
    } 
}
</code></pre>
