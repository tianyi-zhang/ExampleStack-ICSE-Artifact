<p>I have used this and it worked.</p>

<pre><code>public interface ProgressAnimationListener {
    public void onAnimationStart();

    public void onAnimationFinish();

    public void onAnimationProgress(int progress);
}

private ObjectAnimator progressBarAnimator;

  public synchronized void animateProgressTo(final int start, final int end, final int duration, final ProgressAnimationListener listener) {

        stopAnimation();
        setProgress(start);

        progressBarAnimator = ObjectAnimator.ofFloat(this, "animateProgress", start, end);
        progressBarAnimator.setDuration(duration);

        progressBarAnimator.setInterpolator(new LinearInterpolator());

        progressBarAnimator.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationCancel(final Animator animation) {
            }

            @Override
            public void onAnimationEnd(final Animator animation) {
                setProgress(end);
                if (listener != null) {
                    listener.onAnimationFinish();
                }
            }

            @Override
            public void onAnimationRepeat(final Animator animation) {
            }

            @Override
            public void onAnimationStart(final Animator animation) {
                if (listener != null) {
                    listener.onAnimationStart();
                }
            }
        });

        progressBarAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(final ValueAnimator animation) {
                int progress = ((Float) animation.getAnimatedValue()).intValue();
                if (progress != getProgress()) {
                    //Log.d(TAG, progress + "");
                    setProgress(progress);
                    if (listener != null) {
                        listener.onAnimationProgress(progress);
                    }
                }
            }
        });
        progressBarAnimator.start();
    }

    public synchronized boolean isAnimationRunning() {
        return progressBarAnimator != null &amp;&amp; progressBarAnimator.isRunning();
    }

    public synchronized void stopAnimation() {
        if (isAnimationRunning()) {
            progressBarAnimator.cancel();
            progressBarAnimator = null;
        }
    }
</code></pre>
