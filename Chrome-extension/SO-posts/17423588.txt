<p>You can create your own callback interface somewhere</p>

<pre><code>public interface DialogResult {
    void onDialogResult(boolean result);
}
</code></pre>

<p>then pass that down to the dialog</p>

<pre><code>public static void dialog(Context context, String text, final DialogResult callback) {
    AlertDialog.Builder builder = new AlertDialog.Builder(context);
    builder.setMessage(text);
    builder.setCancelable(false);
    builder.setPositiveButton("Yes", new DialogInterface.OnClickListener()  {
            @Override
            public void onClick(DialogInterface dialog, int id) {
                callback.onDialogResult(true);
                }
            });
    builder.setNegativeButton("No", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                callback.onDialogResult(false);
                }
            });
    AlertDialog dialog = builder.create();
    dialog.show();
}
</code></pre>

<p>and the dialog will at some point in the future use the callback to notify you of the result. You can't just return a result from the future.</p>

<p>Then simply use it like all those other callbacks</p>

<pre><code>static class MyActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // ....
        Button b = (Button) findViewById(R.id.someButton);
        b.setOnClickListener(mOnClickListener);
    }

    private View.OnClickListener mOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            // show dialog at some point
            dialog(v.getContext(), "Hello Dialog", mDialogCallback);
        }
    };

    private DialogResult mDialogCallback = new DialogResult() {
        @Override
        public void onDialogResult(boolean result) {
            // do something with the result
        }
    };
}
</code></pre>
