<p>Contrary to prevailing opinion, it <em>is</em> possible to change the contents of a String object on JDK versions 1.5 and newer, but I (and probably everyone else here) would strongly discourage it for many reasons. Strings were never meant to be changed, and they're just not built for it, meaning any attempt to do so will quickly get quite messy. That said, if you need it as an absolute last resort or else the world is going to end kind of thing, here's a bare-bones way to do it:</p>

<pre><code>public static void main(String[] args) throws Exception {
    String foo = "foo";
    System.out.println("foo's hash value: " + foo.hashCode());
    Field stringValueField = String.class.getDeclaredField("value");
    stringValueField.setAccessible(true);
    stringValueField.set(foo, "bar".toCharArray());
    Field stringHashField = String.class.getDeclaredField("hash");
    stringHashField.setAccessible(true);
    stringHashField.set(foo, 0);
    System.out.println("foo's new value: " + foo);
    System.out.println("foo's new hash value: " + foo.hashCode());
}
</code></pre>

<p>Make careful note, however, of the other fields in String: offset and count. You'll have to deal with those fields, too, depending on how you change the String's value. Finally, and maybe most importantly, you have to consider what would happen if you modify an <a href="http://download.oracle.com/javase/6/docs/api/java/lang/String.html#intern%28%29" rel="nofollow">interned String</a>.</p>
