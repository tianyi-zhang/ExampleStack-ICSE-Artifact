<p>You can have a tree/node class relationship like the following. This gets rid of the awkward x.N = 1 + size(x.left) + size(x.right); since it doesn't make sense for a single node to have a size.</p>

<pre><code>public class Tree&lt;K extends Comparable&lt;K&gt;, V&gt; {

  private Node head;
  private int size; // number of nodes in subtree
  private int height;

  public Node put(K key, V value) {
    size++;
    if (head == null) {
      head = new Node(key, value, 0);
      return head;
    }
    Node result = head.put(key, value);
    if (result.height &gt; height) {
      height = result.height;
    }
    return result;
  }

  private class Node {

    private K key; // sorted by key
    private V value; // associated data
    private Node left, right; // left and right subtrees
    private int height;

    public Node(K key, V value, int height) {
      this.key = key;
      this.value = value;
      this.height = height;
    }

    private Node put(K key, V value) {
      int cmp = key.compareTo(this.key);
      if (cmp &lt; 0) {
        if (left == null) {
          left = new Node(key, value, height + 1);
          return left;
        } else {
          return left.put(key, value);
        }
      } else if (cmp &gt; 0) {
        if (right == null) {
          right = new Node(key, value, height + 1);
          return right;
        } else {
          return right.put(key, value);
        }
      } else {
        this.value = value;
        return this;
      }
    }
  }
}
</code></pre>
