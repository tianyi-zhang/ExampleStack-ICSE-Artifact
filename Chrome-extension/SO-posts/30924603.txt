<pre><code>itr.equals(new Element(element.eString, element.eInt, element.eBoolean))
</code></pre>

<p>This will <em>always</em> return false because you're comparing an <code>Iterator</code> to an <code>Element</code> which are completely different types of objects. You want to compare the element to <code>itr.next()</code> which you have saved previously to a local variable.</p>

<pre><code>if (elements.contains(new Element(element.eString, element.eInt, element.eBoolean))) {
</code></pre>

<p>This would return false as well if you didn't override the <code>equals()</code> method in the class <code>Element</code>. The default <code>Object.equals()</code> method is used which dictates that the two references should refer to the <em>same</em> object in order to be equal. In this case, you're comparing against a new object that you create using <code>new Element(element.eString, element.eInt, element.eBoolean)</code>. To solve this you need to override the <code>equals</code> method to specify how the objects of type <code>Element</code> must be checked for equality.</p>

<p>For example, if <code>Element</code> has the following fields:</p>

<pre><code>String eString;
int eInt;
boolean eBoolean;
</code></pre>

<p>Then you can override <code>equals</code> as follows:</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Element other = (Element) obj;
    if (eBoolean != other.eBoolean)
        return false;
    if (eInt != other.eInt)
        return false;
    if (eString == null) {
        if (other.eString != null)
            return false;
    } else if (!eString.equals(other.eString))
        return false;
    return true;
}
</code></pre>
