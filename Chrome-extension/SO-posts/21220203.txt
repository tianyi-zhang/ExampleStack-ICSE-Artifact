<p>You can use this Android Library: <a href="https://github.com/danielemaddaluno/Android-Update-Checker">https://github.com/danielemaddaluno/Android-Update-Checker</a>. It aims to provide a reusable instrument to check asynchronously if exists any newer released update of your app on the Store.
It is based on the use of Jsoup (<a href="http://jsoup.org/">http://jsoup.org/</a>) to test if a new update really exists parsing the app page on the Google Play Store:</p>

<pre><code>private boolean web_update(){
    try {       
        String curVersion = applicationContext.getPackageManager().getPackageInfo(package_name, 0).versionName; 
        String newVersion = curVersion;
        newVersion = Jsoup.connect("https://play.google.com/store/apps/details?id=" + package_name + "&amp;hl=en")
                .timeout(30000)
                .userAgent("Mozilla/5.0 (Windows; U; WindowsNT 5.1; en-US; rv1.8.1.6) Gecko/20070725 Firefox/2.0.0.6")
                .referrer("http://www.google.com")
                .get()
                .select("div[itemprop=softwareVersion]")
                .first()
                .ownText();
        return (value(curVersion) &lt; value(newVersion)) ? true : false;
    } catch (Exception e) {
        e.printStackTrace();
        return false;
    }
}
</code></pre>

<p>And as "value" function the following (works if values are beetween 0-99):</p>

<pre><code>private long value(String string) {
    string = string.trim();
    if( string.contains( "." )){ 
        final int index = string.lastIndexOf( "." );
        return value( string.substring( 0, index ))* 100 + value( string.substring( index + 1 )); 
    }
    else {
        return Long.valueOf( string ); 
    }
}
</code></pre>

<p>If you want only to verify a mismatch beetween versions, you can change:</p>

<p><code>value(curVersion) &lt; value(newVersion)</code> with <code>value(curVersion) != value(newVersion)</code></p>
