<p>Using pseudo-code, as I with Yoda not too familiar I am:</p>

<ol>
<li>counter = 1, someDate = start time, <strong>increment</strong> = two weeks</li>
<li><strong>loop</strong>: someDate = someDate + <strong>increment</strong></li>
<li><strong>if</strong> someDate &lt; end time: <strong>then</strong> counter++ <strong>else</strong> break loop</li>
</ol>

<p>Alternatively, for the people that don't like looping: </p>

<ol>
<li>Compute the <strong>exact</strong> number of hours between start date and end date</li>
<li>Figure how often 24 * 7 * 2 would fit into the aforementioned number of hours</li>
</ol>

<p>Sample code using JodaTime library:</p>

<pre><code>int multiple = 2; //or whatever periodicity is needed
ReadablePeriod jodaPeriod;
switch (mPeriodType){
    case DAY:
        jodaPeriod = Days.days(multiple);
        break;
    case WEEK:
        jodaPeriod = Weeks.weeks(multiple);
        break;
    case MONTH:
        jodaPeriod = Months.months(multiple);
        break;
    case YEAR:
        jodaPeriod = Years.years(multiple);
        break;
    default:
        jodaPeriod = Months.months(multiple);
}
int count = 0;
LocalDateTime startTime = new LocalDateTime(mPeriodStart.getTime());
while (startTime.toDateTime().getMillis() &lt; mPeriodEnd.getTime()){
    ++count;
    startTime = startTime.plus(jodaPeriod);
}
return count;
</code></pre>
