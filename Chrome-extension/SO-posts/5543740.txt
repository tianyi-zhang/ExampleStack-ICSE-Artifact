<p>I think this is what you are trying to do:</p>

<pre><code>import javax.swing.*;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;

public class Browse {
static class CopierThread extends Thread {
    private final Component gui_;

    private final File source_;

    private final File dest_;


    CopierThread(Component gui, File source, File dest) {
        gui_ = gui;
        source_ = source;
        dest_ = dest;
    }


    @Override
    public void run() {
        try {
            copyDirectory(source_, dest_);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            JOptionPane.showMessageDialog(gui_, "The copy of "
                    + source_.getAbsolutePath() + " to "
                    + dest_.getAbsolutePath()
                    + " failed. See console for more details.",
                    "Copy failed", JOptionPane.ERROR_MESSAGE);
        }
    }
}


public static void main(String arg[]) {
    final JFrame frame1 = new JFrame();
    JPanel panel1 = new JPanel();
    JButton button1 = new JButton("press");
    frame1.add(panel1);
    frame1.setSize(400, 400);
    frame1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame1.setVisible(true);
    panel1.add(button1);
    button1.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent ae) {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File("."));
            chooser.setDialogTitle("choosertitle");
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.setAcceptAllFileFilterUsed(false);
            if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                System.out.println("getCurrentDirectory(): "
                        + chooser.getCurrentDirectory());
                System.out.println("getSelectedFile() : "
                        + chooser.getSelectedFile());

                File source = chooser.getSelectedFile();
                File dest = new File("C:/Users/David/Desktop/test");
                Thread thread = new CopierThread(frame1, source, dest);
                thread.start();
            } else {
                System.out.println("No Selection ");
            }
        }
    });
}


public static void copyDirectory(File sourceDir, File destDir) throws IOException {
    if (!destDir.exists()) {
        destDir.mkdir();
    }
    File[] children = sourceDir.listFiles();
    for(File sourceChild:children) {
        String name = sourceChild.getName();
        File destChild = new File(destDir, name);
        if (sourceChild.isDirectory()) {
            copyDirectory(sourceChild, destChild);
        } else {
            copyFile(sourceChild, destChild);
        }
    }
}


public static void copyFile(File source, File dest) throws IOException {
    if (!dest.exists()) {
        dest.createNewFile();
    }
    InputStream in = null;
    OutputStream out = null;
    try {
        in = new FileInputStream(source);
        try {
            out = new FileOutputStream(dest);
            byte[] buf = new byte[1024];
            int len;
            while( (len = in.read(buf)) != -1 ) {
                out.write(buf, 0, len);
            }
        } finally {
            if (out != null) out.close();
        }
    } finally {
        if (in != null) in.close();
    }
}
}
</code></pre>

<p>To answer your main question first, there are various ways you can access a variable owned by one object in another. To use any of them you must first make the variable a member variable, not a method variable. In my code above CopierThread has three member variables. If a variable is not a member variable it can only be accessed in special circumstances. Note that I made the <code>frame1</code> variable <code>final</code> in order to allow the anonymous inner class of the ActionListener to access it.</p>

<p>So the answer to your main question is:</p>

<p>A member variable can be accessed by other classes dependent upon its protection. No other class can access a <code>private</code> member variable. Every other class can access a <code>public</code> member variable. Default and <code>protected</code> are in between and you should look them up.</p>

<p>A method variable can only be accessed by another class if that class is defined in the method and the variable is declared final.</p>

<p>It is common and useful to create methods specifically to access member variables. This is good design practice as it hides the implementation, allows enforcing of validation rules, restrict access, and can allow variables to be identified easily by introspection.</p>

<p>A few other comments:</p>

<p>1) The GUI is unresponsive whilst event listeners are running. Therefore you should never do anything big in the event listener. My code starts a new thread to copy the file so the GUI event listener does not have to wait for it and the GUI remains responsive.</p>

<p>2) Input and output streams are eventually closed by the garbage collector, but in a large server VM this can take a long time to happen preventing other programs from accessing the files. You should therefore always make sure the streams are closed with finally blocks, bearing in mind that if the constructor itself fails, the variable will be null.</p>

<p>3) Formatting your source code makes everyones life easier. Free IDEs such as Eclipse will format automatically for you.</p>
