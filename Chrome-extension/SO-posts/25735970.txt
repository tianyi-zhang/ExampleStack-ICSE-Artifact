<p>I've solved the problem with the following code, i.e. implementing the getBody and changing the getBodyContentType:</p>

<pre><code>    /**
     * Volley adapter for JSON requests that will be parsed into Java objects by Gson.
     */
    public class GsonRequest&lt;T&gt; extends Request&lt;T&gt; {
        private final Gson gson = new GsonBuilder()
                .registerTypeAdapter(ClusterUnits.class, new ClusterUnitsDeserializer()).create();
        private final Class&lt;T&gt; clazz;
        private final Map&lt;String, String&gt; headers;
        private final Listener&lt;T&gt; listener;
        private JSONObject parameters = null;

        /**
         * Make a GET request and return a parsed object from JSON.
         *
         * @param url URL of the request to make
         * @param clazz Relevant class object, for Gson's reflection
         * @param headers Map of request headers
         */
        public GsonRequest(int method, String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,
                Listener&lt;T&gt; listener, ErrorListener errorListener) {
            super(method, url, errorListener);
            this.clazz = clazz;
            this.headers = headers;
            this.listener = listener;
        }

        public GsonRequest(int method, String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,
                           Listener&lt;T&gt; listener, ErrorListener errorListener, JSONObject parameters) {
            this(method, url, clazz, headers, listener, errorListener);
            this.parameters = parameters;
        }

        @Override
        public Map&lt;String, String&gt; getHeaders() throws AuthFailureError {
            return headers != null ? headers : super.getHeaders();
        }

        @Override
        public String getBodyContentType() {
            return "application/json";
        }

        @Override
        public byte[] getBody() throws AuthFailureError {
            try {
                return parameters.toString().getBytes(getParamsEncoding());
            } catch (UnsupportedEncodingException e) {
                DLog.d(e);
            }
            return null;
        }

        @Override
        protected void deliverResponse(T response) {
            listener.onResponse(response);
        }

        @Override
        protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response) {
            try {
                String json = new String(
                        response.data, HttpHeaderParser.parseCharset(response.headers));
                Log.i("RESPONSE", json);
                return Response.success(
                        gson.fromJson(json, clazz), HttpHeaderParser.parseCacheHeaders(response));
            } catch (UnsupportedEncodingException e) {
                return Response.error(new ParseError(e));
            } catch (JsonSyntaxException e) {
                return Response.error(new ParseError(e));
            }
        }
    }
</code></pre>
