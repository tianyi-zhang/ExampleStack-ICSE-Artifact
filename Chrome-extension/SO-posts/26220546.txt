<p><strong>Short Answer.-</strong></p>

<p>Stage calls the Draw method of all its Actors.</p>

<p><strong>Long Answer just for completeness.-</strong></p>

<p>Stage calls Draw method of its (root) Group.</p>

<p><a href="https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/scenes/scene2d/Stage.java#L118" rel="nofollow">Stage.java -L118</a></p>

<pre><code>public void draw () {
    Camera camera = viewport.getCamera();
    camera.update();

    if (!root.isVisible()) return;

    Batch batch = this.batch;
    if (batch != null) {
        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        root.draw(batch, 1);
        batch.end();
    }

    if (debug) drawDebug();
}
</code></pre>

<p>And root Group calls its drawChildren method.</p>

<p><a href="https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java#L56" rel="nofollow">Group.java -L56</a></p>

<pre><code>public void draw (Batch batch, float parentAlpha) {
    if (transform) applyTransform(batch, computeTransform());
    drawChildren(batch, parentAlpha);
    if (transform) resetTransform(batch);
}
</code></pre>

<p>And this is the method who calls all child Actors draw method.</p>

<p><a href="https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/scenes/scene2d/Group.java#L66" rel="nofollow">Group.java -L66</a></p>

<pre><code>protected void drawChildren (Batch batch, float parentAlpha) {
    parentAlpha *= this.color.a;
    SnapshotArray&lt;Actor&gt; children = this.children;
    Actor[] actors = children.begin();
    Rectangle cullingArea = this.cullingArea;
    if (cullingArea != null) {
        // Draw children only if inside culling area.
        float cullLeft = cullingArea.x;
        float cullRight = cullLeft + cullingArea.width;
        float cullBottom = cullingArea.y;
        float cullTop = cullBottom + cullingArea.height;
        if (transform) {
            for (int i = 0, n = children.size; i &lt; n; i++) {
                Actor child = actors[i];
                if (!child.isVisible()) continue;
                float cx = child.x, cy = child.y;
                if (cx &lt;= cullRight &amp;&amp; cy &lt;= cullTop &amp;&amp; cx + child.width &gt;= cullLeft &amp;&amp; cy + child.height &gt;= cullBottom)
                    child.draw(batch, parentAlpha);
            }
        } else {
            // No transform for this group, offset each child.
            float offsetX = x, offsetY = y;
            x = 0;
            y = 0;
            for (int i = 0, n = children.size; i &lt; n; i++) {
                Actor child = actors[i];
                if (!child.isVisible()) continue;
                float cx = child.x, cy = child.y;
                if (cx &lt;= cullRight &amp;&amp; cy &lt;= cullTop &amp;&amp; cx + child.width &gt;= cullLeft &amp;&amp; cy + child.height &gt;= cullBottom) {
                    child.x = cx + offsetX;
                    child.y = cy + offsetY;
                    child.draw(batch, parentAlpha);
                    child.x = cx;
                    child.y = cy;
                }
            }
            x = offsetX;
            y = offsetY;
        }
    } else {
        // No culling, draw all children.
        if (transform) {
            for (int i = 0, n = children.size; i &lt; n; i++) {
                Actor child = actors[i];
                if (!child.isVisible()) continue;
                child.draw(batch, parentAlpha);
            }
        } else {
            // No transform for this group, offset each child.
            float offsetX = x, offsetY = y;
            x = 0;
            y = 0;
            for (int i = 0, n = children.size; i &lt; n; i++) {
                Actor child = actors[i];
                if (!child.isVisible()) continue;
                float cx = child.x, cy = child.y;
                child.x = cx + offsetX;
                child.y = cy + offsetY;
                child.draw(batch, parentAlpha);
                child.x = cx;
                child.y = cy;
            }
            x = offsetX;
            y = offsetY;
        }
    }
    children.end();
}
</code></pre>
