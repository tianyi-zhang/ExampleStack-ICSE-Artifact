<p>I've had similar issues with data that has to be preserved through a reboot.  I found two ways to do it.</p>

<p>1) Data is seldom accessed.
Store data in .../files in some format that can be easily saved/retrieved.  I used JSONArrays to hold the data.  mContext.getFilesDir() will get you the path, and you can simply see if your file.exists() to determine if the data exists.
You will need to create an object that will:
1) convert your data to the stored format</p>

<pre><code>for(int i = 0; i &lt; mArray.size(); i++ )
{
    JSONObject jo = new JSONObject();
    jo.put("THINGY", mArray[i]);

    ja.put(jo);
}
</code></pre>

<p>2) retrieve your data from the store</p>

<pre><code>String js = readFromFile(fileName);
if( !js.isEmpty() )
        ja = new JSONArray( js );
for( int i = 0; i &lt; ja.length(); i++
{
//  CONVERT THIS ARRAY TO YOUR INT...
}
</code></pre>

<p>3) read/write files like this:</p>

<pre><code>private void writeToFile(String fileName, String data) 
{
    try
    {

        FileOutputStream fOut = openFileOutput( fileName, MODE_PRIVATE );
        OutputStreamWriter osw = new OutputStreamWriter(fOut);

        //  Log.d(TAG, "Writing output log...");
        osw.write(data);
        osw.flush();

        osw.close();
    }
    catch( Exception e )
    {
        Log.e(TAG, "Cannot create " + fileName );
    }
}


private String readFromFile(String fileName)
{

    String ret = "";

    try 
    {
        InputStream inputStream = openFileInput(fileName);

        if ( inputStream != null ) 
        {
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
            String receiveString = "";
            StringBuilder stringBuilder = new StringBuilder();

            while ( (receiveString = bufferedReader.readLine()) != null ) 
            {
                stringBuilder.append(receiveString);
            }

            inputStream.close();
            ret = stringBuilder.toString();
        }
    }
    catch (FileNotFoundException e) 
    {
        Log.e(TAG, "File not found: " + e.toString());
    } 
    catch (IOException e) 
    {
        Log.e(TAG, "Can not read file: " + e.toString());
    }

    return ret;
}
</code></pre>

<p>JSON works well in this case because there are easy methods to convert to/from strings.</p>

<p>2) Frequent Access
I used SQLiteDatabase.  I use a Singlton and DBHelper.getInstance() to get access to it.  This seems like overkill, but it is a good solution if the amount of data you are saving is increasing beyond a simple array of Integers.</p>

<p>A really basic (but sound) place to start is: <a href="http://www.vogella.com/tutorials/AndroidSQLite/article.html" rel="nofollow">http://www.vogella.com/tutorials/AndroidSQLite/article.html</a>.  Note his page was written for 4.3.</p>

<p>HTH.</p>
