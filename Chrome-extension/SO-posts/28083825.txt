<p>I think the easiest way is to extend the <code>GanttRenderer</code> and add a 2nd pass that draws the triangle.</p>

<p>The following renderer should do the trick. Just add the drawing of the triangle to the <code>drawTriangle</code> routine.</p>

<pre><code>import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;

import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.gantt.GanttCategoryDataset;

public class TriangleGanttRenderer
    extends GanttRenderer
{
    public TriangleGanttRenderer()
    {
    }

    @Override
    public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot,
        CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass)
    {
        if (pass == 1 &amp;&amp; (dataset instanceof GanttCategoryDataset))
        {
            drawTriangle(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column);
        }
        else
        {
            super.drawItem(g2, state, dataArea, plot, domainAxis, rangeAxis, dataset, row, column, pass);
        }
    }

    protected void drawTriangle(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea,
        CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column)
    {
        // ... add your draw routine here ...
    }

    @Override
    public int getPassCount()
    {
        return 2;
    }
}
</code></pre>
