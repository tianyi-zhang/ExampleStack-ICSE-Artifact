<p>Another approach would be to directly make smaller pictures. The advantage would be that you use less memory, but you might need a big picture in another part of your app.</p>

<p>This can be done as follows:</p>

<pre><code>public void surfaceChanged(SurfaceHolder holder, int format, int width, int height){
...
   Camera.Parameters mParameters = mCamera.getParameters();
   List&lt;Size&gt; sizes = mParameters.getSupportedPictureSizes();
   Size optimalSize = getOptimalSize(sizes, width, height);
   if (optimalSize != null &amp;&amp; !mParameters.getPictureSize().equals(optimalSize))
        mParameters.setPictureSize(optimalSize.width, optimalSize.height);
...
}  
</code></pre>

<p>To choose the optimal size, you can use any criteria you want. I tried to make it as close as possible to the screen size:</p>

<pre><code> private Size getOptimalSize(List&lt;Size&gt; sizes, int w, int h){

    final double ASPECT_TOLERANCE = 0.05;
    double targetRatio = (double) w / h;
    if (sizes == null)
        return null;

    Size optimalSize = null;
    double minDiff = Double.MAX_VALUE;

    int targetHeight = h;

    for (Size size: sizes)
    {
        double ratio = (double) size.width / size.height;
        if (Math.abs(ratio - targetRatio) &gt; ASPECT_TOLERANCE)
            continue;
        if (Math.abs(size.height - targetHeight) &lt; minDiff)
        {
            optimalSize = size;
            minDiff = Math.abs(size.height - targetHeight);
        }
    }

    if (optimalSize == null)
    {
        minDiff = Double.MAX_VALUE;
        for (Size size: sizes)
        {
            if (Math.abs(size.height - targetHeight) &lt; minDiff)
            {
                optimalSize = size;
                minDiff = Math.abs(size.height - targetHeight);
            }
        }
    }

    return optimalSize;

}
</code></pre>
