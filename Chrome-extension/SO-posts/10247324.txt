<p>I would start by using the <a href="http://en.wikipedia.org/wiki/Haversine_formula" rel="nofollow">Haversine</a> formula. Use the result you get from this to find the zipcode relative to that radius.</p>

<pre><code>import com.google.android.maps.GeoPoint;  

public class DistanceCalculator {  

   private double Radius;  

   // R = earth's radius (mean radius = 6,371km)  
   // Constructor  
   DistanceCalculator(double R) {  
      Radius = R;  
   }  

   public double CalculationByDistance(GeoPoint StartP, GeoPoint EndP) {  
      double lat1 = StartP.getLatitudeE6()/1E6;  
      double lat2 = EndP.getLatitudeE6()/1E6;  
      double lon1 = StartP.getLongitudeE6()/1E6;  
      double lon2 = EndP.getLongitudeE6()/1E6;  
      double dLat = Math.toRadians(lat2-lat1);  
      double dLon = Math.toRadians(lon2-lon1);  
      double a = Math.sin(dLat/2) * Math.sin(dLat/2) +  
         Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *  
         Math.sin(dLon/2) * Math.sin(dLon/2);  
      double c = 2 * Math.asin(Math.sqrt(a));  
      return Radius * c;  
   }  
}  
</code></pre>
