<p>I've created a Matcher that supports passing a resourceId instead of a String</p>

<pre><code>public static Matcher&lt;View&gt; withHint(final int resourceId) {
     return new BoundedMatcher&lt;View, TextView&gt;(TextView.class) {
     private String resourceName = null;
     private String expectedHint = null;

     @Override
     public boolean matchesSafely(TextView editText) {
        if (null == expectedHint) {
          try {
            expectedHint = editText.getResources().getString(resourceId);
            resourceName = editText.getResources().getResourceEntryName(resourceId);
          } catch (Resources.NotFoundException ignored) {
            /* view could be from a context unaware of the resource id. */
          }
        }

        if (null != expectedHint) {
          return expectedHint.equals(editText.getHint());
        } else {
          return false;
        }
      }

      @Override
      public void describeTo(Description description) {
        description.appendText("with string from resource id: ");
        description.appendValue(resourceId);
        if (null != resourceName) {
          description.appendText("[");
          description.appendText(resourceName);
          description.appendText("]");
        }
        if (null != expectedHint) {
          description.appendText(" value: ");
          description.appendText(expectedHint);
        }
      }
    };
  }
</code></pre>

<p>It's a replication of Espresso's withText matcher pointed by Valera Zakharov (<a href="https://code.google.com/p/android-test-kit/source/browse/espresso/lib/src/main/java/com/google/android/apps/common/testing/ui/espresso/matcher/ViewMatchers.java?r=e57a8823a21e05c85a268603d6abe4114fd2dc7c#368" rel="nofollow">withText(resourceId</a>)</p>
