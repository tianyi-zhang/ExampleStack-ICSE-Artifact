<p>I put together a program that looks  very similar to your above table. The results appear as below on an emulator:</p>

<p><a href="http://oi57.tinypic.com/2l94360.jpg" rel="nofollow">Image</a></p>

<p>To achieve it, you need to create a custom <code>ListAdapter</code>. Inside the adapter, you override <code>getView()</code> to create the layout for your row items. You will also need two XML 'layout' files if you want the results to appear as they do in my image: one as a template for the individual rows, and one to host the overall <code>ListView</code>. If you don't want the permanent headers though, then you can just use the one row layout file. The Activity looks like this:</p>

<pre><code>public class MainActivity extends ListActivity {

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    //Helps create fake ISBN and quantity numbers
    Random rand = new Random();

    //Arrays to store fake Book Names, ISBN numbers and Quantity Numbers
    final ArrayList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();
    final ArrayList&lt;String&gt; code = new ArrayList&lt;&gt;();
    final ArrayList&lt;String&gt; quantity = new ArrayList&lt;&gt;();

    // You can remove this if you don't want the permanent headers
     setContentView(R.layout.activity_main);

    //This populates our arrays with the fake names and numbers, so there is something to
    //display in the list
    for (int i = 1; i &lt; 30; i++){
        bookNames.add("Book No: " + i);
        code.add(String.valueOf((rand.nextInt(100) * i) + 1000));
        quantity.add(String.valueOf(rand.nextInt(5) + 1));
    }

    setListAdapter(new ListAdapter() {
</code></pre>

<p>For the <code>ListAdapter</code>, leave everything as it is except for <code>getCount()</code>, <code>getView()</code> and  <code>getViewTypeCount()</code> (which you simply need to change to <code>1</code>). Set <code>getCount()</code> to return <code>bookNames.size()</code>. This will ensure that the ListView is always large or small enough to accommodate all the information in your array.</p>

<pre><code>@Override
        public View getView(int position, View convertView, ViewGroup parent) {
            View view;

            if (convertView == null) {
                LayoutInflater inflater = (LayoutInflater) parent.getContext().
                        getSystemService(Context.LAYOUT_INFLATER_SERVICE);
                view = inflater.inflate(R.layout.row, parent, false);
            } else {
                view = convertView;
            }

            TextView nameTV = (TextView) view.findViewById(R.id.nameTV);
            TextView codeTV = (TextView) view.findViewById(R.id.codeTV);
            TextView quantityTV = (TextView) view.findViewById(R.id.quantityTV);

            nameTV.setText(bookNames.get(position));
            quantityTV.setText(quantity.get(position));
            codeTV.setText(code.get(position));

            return view;
        }
</code></pre>

<p>Differentiating between whether convertView is null or not is to determine whether the list is loading for the first time, or whether it is being populated as the user scrolls. The various TextView objects are populated by whatever item is in your array at the specified <code>position</code> of the row. Here is the XML file for the row layout:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
xmlns:android="http://schemas.android.com/apk/res/android"
android:orientation="horizontal"
android:layout_width="match_parent"
android:layout_height="match_parent"&gt;

&lt;CheckBox
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/checkBox"
    android:checked="true" /&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/nameTV"
    android:layout_weight="1" /&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/codeTV"
    android:layout_weight="1" /&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@+id/quantityTV"
    android:layout_weight="1" /&gt;
</code></pre>

<p></p>

<p>I've set <code>android:checked</code> to <code>true</code> for the CheckBox so that they populated checked by default. finally, if you want to use permanent headers, here is the layout for the hosting activity.</p>

<pre><code>&lt;LinearLayout
xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"&gt;

&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"&gt;

&lt;CheckBox
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/checkBoxHeader"
    android:visibility="invisible"/&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="Name"
    android:id="@+id/nameTVHeader"
    android:layout_weight="1"
    android:textStyle="bold" /&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="ISBN"
    android:id="@+id/codeTVHeader"
    android:layout_weight="1"
    android:textStyle="bold" /&gt;

&lt;TextView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:text="Quantity"
    android:id="@+id/quantityTVHeader"
    android:layout_weight="1"
    android:textStyle="bold" /&gt;


&lt;/LinearLayout&gt;

&lt;ListView
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:id="@android:id/list"/&gt;
</code></pre>

<p></p>

<p>I just created an <code>invisible</code> <code>CheckBox</code> in the header to ensure that the spacing was consistent, but you delete this and add an <code>android:layout_marginLeft</code> attribute to the first <code>TextView</code> item if you preferred.</p>

<p><strong>EDIT:</strong></p>

<p>To add the ability to change the <code>quantity</code> figure is straightforward - it only requires changing the <code>&lt;TextView&gt;</code> element in <code>row.xml</code> to <code>&lt;EditText&gt;</code>. However, the problem is that every time you scroll that row off the page, the <code>ListView</code> will automatically refresh the original value and delete your edit. That is simply part of ListView's memory saving tactics.</p>

<p>To keep it, we need to save the new value to the array. The way I would do this is by using a pop-up <code>Dialog</code> into which we can enter the new value. It would be possible to edit the text in the <code>EditText</code> field directly as well, by implementing <code>TextWatcher</code> or something similar, but I find this method easier to create. As such, in my example app, when you click on a <code>quantity</code> field, it looks like <a href="http://oi61.tinypic.com/npfcq8.jpg" rel="nofollow">this image</a>.</p>

<p>To make this work, we need to first declare the ArrayList variables  outside of <code>onCreate</code>. This is because I will reference them later during a click event:</p>

<pre><code>public class MainActivity extends ListActivity {

ArrayList&lt;String&gt; bookNames, code, quantity;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    //This isn't necessary, but I create it to make fake ISBN and quantity numbers
    Random rand = new Random();

    //Arrays to store fake Book Names, ISBN numbers and Quantity Numbers
    bookNames = new ArrayList&lt;&gt;();
    code = new ArrayList&lt;&gt;();
    quantity  = new ArrayList&lt;&gt;();
</code></pre>

<p>Next, inside <code>getView()</code>, I'd add an <code>onClickListener</code> to the <code>quantityTV TextView</code>. This will launch a method called <code>changeValue()</code> on a click event, that will create a pop-up Dialog </p>

<pre><code>quantityTV.setOnClickListener(new View.OnClickListener() {
                                              @Override
                                              public void     onClick(View v) {
                                                      changeValue(position);
                                                  }
                                          });
</code></pre>

<p>Finally, this method is added at the end of our <code>MainActivity</code>, and contains the logic for launching a Dialog based on a template called <code>update_value.xml</code>. When a user presses the "Accept" button, it updates the entry in the <code>quantity</code> <code>ArrayList</code> at the position our row is located. This is why I put a <code>final int position</code> parameter in this method, because it means we can access our <code>position</code> from <code>getView()</code>.</p>

<pre><code>void changeValue(final int position) {
    LayoutInflater inflater = MainActivity.this.getLayoutInflater();
    View popUp = inflater.inflate(R.layout.update_value, null);
    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);

    builder.setTitle("Edit Value at Row: " + (position + 1)).setView(popUp)
            .setPositiveButton("Accept", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    AlertDialog alert = (AlertDialog) dialog;
                    EditText value = (EditText) alert.findViewById(R.id.editText);
                    quantity.set(position, String.valueOf(value.getText()));
                }
            })
            .setNegativeButton("Cancel", null)
            .show();
}
</code></pre>

<p>The <code>xml</code> file for the Dialog is very simple by the way, and just looks like this:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="horizontal"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="New Value:"
        android:textStyle="bold"
        android:id="@+id/textView"
        android:textSize="18sp" /&gt;

    &lt;EditText
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:inputType="number"
        android:id="@+id/editText"
        android:layout_gravity="center_horizontal"
        android:textSize="16sp" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p><strong>Edit 2:</strong></p>

<p>I am not sure whether or not this is the recommended method for preventing <code>CheckBoxes</code>, <code>RadioButtons</code> etc. from repopulating every time a row is scrolled off screen, but it will work. I would recommend you also look into the <code>setTag()</code> and <code>getTag()</code> methods as they appear to be designed with this situation in mind. </p>

<p>What I do in my example is save the <code>position</code> of the <code>CheckBox</code> inside a <code>Bundle</code>, and then check the position of each CheckBox against the position value stored inside the <code>Bundle</code>. At the top of your <code>MainActivity</code>, add the following:</p>

<pre><code>Bundle bundle = new bundle();
</code></pre>

<p>Then, inside <code>getView()</code>, add the following:</p>

<pre><code>CheckBox checkBox = (CheckBox) view.findViewById(R.id.checkBox);

                checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        if (!isChecked) {
                            bundle.putInt("checked" + position, position);
                        } else {
                            bundle.remove("checked" + position);
                        }
                    }
                });

                if (bundle.get("checked" + position) != null){
                    checkBox.setChecked(false);
                } else {
                    checkBox.setChecked(true);
                }
</code></pre>

<p>This will work fine when scrolling through a list, but it isn't perfect - for instance, the list items will still refresh on a configuration change.</p>
