<p>I would create a singleton.  Here's an example from a project I posted:</p>

<pre><code>public class VolleySingleton {

    private static Context mContext;
    private RequestQueue mRequestQueue;
    private ImageLoader mImageLoader;

    private static VolleySingleton ourInstance;
    public static VolleySingleton getInstance(Context context) {
        if (ourInstance == null) {
            ourInstance = new VolleySingleton(context);
        }
        return ourInstance;
    }

    private VolleySingleton(Context context) {
        mContext=context;
        mRequestQueue = Volley.newRequestQueue(context.getApplicationContext());
        mImageLoader = new ImageLoader(mRequestQueue,
                new ImageLoader.ImageCache() {
                    private final LruCache&lt;String, Bitmap&gt;
                            cache = new LruCache&lt;String, Bitmap&gt;(20);
                    @Override
                    public Bitmap getBitmap(String url) {
                        return cache.get(url);
                    }
                    @Override
                    public void putBitmap(String url, Bitmap bitmap) {
                        cache.put(url, bitmap);
                    }
                });
    }

    public &lt;T&gt; void addToRequestQueue(Request&lt;T&gt; req) {
        mRequestQueue.add(req);
    }    

    public ImageLoader getImageLoader() {
        return mImageLoader;
    }
}
</code></pre>

<p>Then you can get the image loader with this statement:</p>

<pre><code>VolleySingleton.getInstance(this).getImageLoader();
</code></pre>
