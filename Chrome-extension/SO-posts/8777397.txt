<p>Look inside the implementation of the two methods to understand them deeply:</p>

<pre><code>array1.equals(array2);
</code></pre>



<pre><code>/**
 * Indicates whether some other object is "equal to" this one.
 * &lt;p&gt;
 * The {@code equals} method implements an equivalence relation
 * on non-null object references:
 * &lt;ul&gt;
 * &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value
 *     {@code x}, {@code x.equals(x)} should return
 *     {@code true}.
 * &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values
 *     {@code x} and {@code y}, {@code x.equals(y)}
 *     should return {@code true} if and only if
 *     {@code y.equals(x)} returns {@code true}.
 * &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values
 *     {@code x}, {@code y}, and {@code z}, if
 *     {@code x.equals(y)} returns {@code true} and
 *     {@code y.equals(z)} returns {@code true}, then
 *     {@code x.equals(z)} should return {@code true}.
 * &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values
 *     {@code x} and {@code y}, multiple invocations of
 *     {@code x.equals(y)} consistently return {@code true}
 *     or consistently return {@code false}, provided no
 *     information used in {@code equals} comparisons on the
 *     objects is modified.
 * &lt;li&gt;For any non-null reference value {@code x},
 *     {@code x.equals(null)} should return {@code false}.
 * &lt;/ul&gt;
 * &lt;p&gt;
 * The {@code equals} method for class {@code Object} implements
 * the most discriminating possible equivalence relation on objects;
 * that is, for any non-null reference values {@code x} and
 * {@code y}, this method returns {@code true} if and only
 * if {@code x} and {@code y} refer to the same object
 * ({@code x == y} has the value {@code true}).
 * &lt;p&gt;
 * Note that it is generally necessary to override the {@code hashCode}
 * method whenever this method is overridden, so as to maintain the
 * general contract for the {@code hashCode} method, which states
 * that equal objects must have equal hash codes.
 *
 * @param   obj   the reference object with which to compare.
 * @return  {@code true} if this object is the same as the obj
 *          argument; {@code false} otherwise.
 * @see     #hashCode()
 * @see     java.util.HashMap
 */
public boolean equals(Object obj) {
    return (this == obj);
}
</code></pre>

<p>while:</p>

<pre><code>Arrays.equals(array1, array2);
</code></pre>



<pre><code>/**
 * Returns &lt;tt&gt;true&lt;/tt&gt; if the two specified arrays of Objects are
 * &lt;i&gt;equal&lt;/i&gt; to one another.  The two arrays are considered equal if
 * both arrays contain the same number of elements, and all corresponding
 * pairs of elements in the two arrays are equal.  Two objects &lt;tt&gt;e1&lt;/tt&gt;
 * and &lt;tt&gt;e2&lt;/tt&gt; are considered &lt;i&gt;equal&lt;/i&gt; if &lt;tt&gt;(e1==null ? e2==null
 * : e1.equals(e2))&lt;/tt&gt;.  In other words, the two arrays are equal if
 * they contain the same elements in the same order.  Also, two array
 * references are considered equal if both are &lt;tt&gt;null&lt;/tt&gt;.&lt;p&gt;
 *
 * @param a one array to be tested for equality
 * @param a2 the other array to be tested for equality
 * @return &lt;tt&gt;true&lt;/tt&gt; if the two arrays are equal
 */
public static boolean equals(Object[] a, Object[] a2) {
    if (a==a2)
        return true;
    if (a==null || a2==null)
        return false;

    int length = a.length;
    if (a2.length != length)
        return false;

    for (int i=0; i&lt;length; i++) {
        Object o1 = a[i];
        Object o2 = a2[i];
        if (!(o1==null ? o2==null : o1.equals(o2)))
            return false;
    }

    return true;
}
</code></pre>
