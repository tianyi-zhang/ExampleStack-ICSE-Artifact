<p>Use an ExpandableListView instead of a normal ListView</p>

<pre><code> &lt;ExpandableListView
            android:id="@+id/listSlidermenu"
            android:layout_width="275dp"
            android:layout_height="match_parent"
            android:layout_gravity="right"
            android:layout_marginTop="2dp"
            android:background="@color/background"
            android:choiceMode="singleChoice"
            android:groupIndicator="@null" /&gt;
</code></pre>

<p>Adapter:</p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter {

    private Context _context;
    private List&lt;ExpandableListHeaderItem&gt; _listDataHeader; // header titles
    // child data in format of header title, child title
    private HashMap&lt;ExpandableListHeaderItem, List&lt;String&gt;&gt; _listDataChild;

    public ExpandableListAdapter(Context context, List&lt;ExpandableListHeaderItem&gt; listDataHeader,
                                 HashMap&lt;ExpandableListHeaderItem, List&lt;String&gt;&gt; listChildData) {
        this._context = context;
        this._listDataHeader = listDataHeader;
        this._listDataChild = listChildData;
    }

    @Override
    public Object getChild(int groupPosition, int childPosititon) {
        return this._listDataChild.get(this._listDataHeader.get(groupPosition))
                .get(childPosititon);
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }

    @Override
    public View getChildView(int groupPosition, final int childPosition,
                             boolean isLastChild, View convertView, ViewGroup parent) {

        final String childText = (String) getChild(groupPosition, childPosition);

        if (convertView == null) {
            LayoutInflater infalInflater = (LayoutInflater) this._context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.list_item, null);
        }

        TextView txtListChild = (TextView) convertView
                .findViewById(R.id.lblListItem);

        txtListChild.setText(childText);
        return convertView;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        return this._listDataChild.get(this._listDataHeader.get(groupPosition))
                .size();
    }

    @Override
    public Object getGroup(int groupPosition) {
        return this._listDataHeader.get(groupPosition);
    }

    @Override
    public int getGroupCount() {
        return this._listDataHeader.size();
    }

    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded,
                             View convertView, ViewGroup parent) {
        ExpandableListHeaderItem headerTitle = (ExpandableListHeaderItem) getGroup(groupPosition);
        if (convertView == null) {
            LayoutInflater infalInflater = (LayoutInflater) this._context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.list_group, null);
        }

        TextView lblListHeader = (TextView) convertView
                .findViewById(R.id.lblListHeader);
        ImageView headerIcon = (ImageView) convertView
                .findViewById(R.id.iconImageView);
        headerIcon.setImageResource(headerTitle.getIcon());
        lblListHeader.setTypeface(null, Typeface.BOLD);
        lblListHeader.setText(headerTitle.getItemName());

        return convertView;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    }
}
</code></pre>
