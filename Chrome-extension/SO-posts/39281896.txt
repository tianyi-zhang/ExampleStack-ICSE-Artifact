<p>It is not a good idea.  You Presenter (base or otherwise) should not know about Context, Activity, Toast or anything else Android based.</p>

<p>View</p>

<ol>
<li>displays things. </li>
<li>handles user input and passes it to the <code>Presenter</code>.</li>
</ol>

<p>Presenter </p>

<ol>
<li>decides what to do with user input. </li>
<li>gathers data from the model. </li>
<li>tells the <code>View</code> what to do.</li>
</ol>

<p>So for your example of clicking Buttons and showing Toasts you would need a setup something like:</p>

<h2>View Interface</h2>

<p>This is how your Presenter will talk to your View.  It will be implemented by the Activity.</p>

<pre><code>public interface MainView {

    void showToast(String message);
}
</code></pre>

<h2>Presenter (Base &amp; Main)</h2>

<p>BasePresenter has almost no tasks at all.  Simply there to bind the View interface.  Note the method names in the MainPresenter are ambiguous to things like 'click' to seperate them from the View implementation.</p>

<pre><code>public class BasePresenter&lt;V&gt; {

    protected V view;

    public void attachView(V view) {
        this.view = view;
    }
}

public class MainPresenter extends BasePresenter&lt;MainView&gt; {

    public void about() {
        view.showToast("About was clicked");
    }

    public void cart() {
        view.showToast("Cart was clicked");
    }
}
</code></pre>

<h2>Activity</h2>

<p>The Activity implements the View interface.  It's responsible for passing user events to the Presenter and actioning the Presenter commands.</p>

<pre><code>public class MainActivity extends AppCompatActivity implements MainView {

    private MainPresenter presenter;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        presenter = new MainPresenter();
        presenter.attachView(this);

        Button about = findViewById(R.id.button_about);
        about.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                presenter.about();
            }
        });

        Button cart = findViewById(R.id.button_cart);
        cart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                presenter.cart();
            }
        });
    }

    @Override
    public void showToast(String message) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
    }
}
</code></pre>

<p>In this setup the Presenter no longer knows anything about Android (has no imports from the framework at all) and you are able to write unit tests for it which can run directly on the JVM without Android dependencies.</p>
