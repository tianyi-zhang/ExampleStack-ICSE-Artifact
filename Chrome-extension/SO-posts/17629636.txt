<p>I managed the problem using this code:</p>

<pre><code>private InetAddress getBroadcastAddress(WifiManager wm, int ipAddress) throws IOException {
    DhcpInfo dhcp = wm.getDhcpInfo();
    if(dhcp == null)
        return InetAddress.getByName("255.255.255.255");
    int broadcast = (ipAddress &amp; dhcp.netmask) | ~dhcp.netmask;
    byte[] quads = new byte[4];
    for (int k = 0; k &lt; 4; k++)
      quads[k] = (byte) ((broadcast &gt;&gt; k * 8) &amp; 0xFF);
    return InetAddress.getByAddress(quads);
} 
</code></pre>

<p>Important is that you call getBroadcastAddress with the "real" ip-address (some methods I've seen can't provide that on a hotspot):</p>

<pre><code>public static int getCodecIpAddress(WifiManager wm, NetworkInfo wifi){
    WifiInfo wi = wm.getConnectionInfo();
    if(wifi.isConnected())
        return wi.getIpAddress(); //normal wifi
    Method method = null;
    try {
        method = wm.getClass().getDeclaredMethod("getWifiApState");
    } catch (NoSuchMethodException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    if(method != null)
        method.setAccessible(true);
    int actualState = -1;
    try {
        if(method!=null)
            actualState = (Integer) method.invoke(wm, (Object[]) null);
    } catch (IllegalArgumentException e) {
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        e.printStackTrace();
    }
    if(actualState==13){  //if wifiAP is enabled
        return "192.168.43.1" //hardcoded WifiAP ip
    }
        return 0;
}
public static int convertIP2Int(byte[] ipAddress){
    return (int) (Math.pow(256, 3)*Integer.valueOf(ipAddress[3] &amp; 0xFF)+Math.pow(256, 2)*Integer.valueOf(ipAddress[2] &amp; 0xFF)+256*Integer.valueOf(ipAddress[1] &amp; 0xFF)+Integer.valueOf(ipAddress[0] &amp; 0xFF));
}
</code></pre>
