<p>you can use a listener to achieve this. Like said in android documentation:</p>

<ol>
<li><p>Define a interface with the actions you need to support (<code>onDialogPositiveClick</code> and <code>onDialogNegativeClick</code>).</p>

<p>public class NoticeDialogFragment extends DialogFragment {</p>

<pre><code>/* The activity that creates an instance of this dialog fragment must
 * implement this interface in order to receive event callbacks.
 * Each method passes the DialogFragment in case the host needs to query it. */
public interface NoticeDialogListener {
    public void onDialogPositiveClick(DialogFragment dialog);
    public void onDialogNegativeClick(DialogFragment dialog);
}

// Use this instance of the interface to deliver action events
NoticeDialogListener mListener;

// Override the Fragment.onAttach() method to instantiate the NoticeDialogListener
@Override
public void onAttach(Activity activity) {
    super.onAttach(activity);
    // Verify that the host activity implements the callback interface
    try {
        // Instantiate the NoticeDialogListener so we can send events to the host
        mListener = (NoticeDialogListener) activity;
    } catch (ClassCastException e) {
        // The activity doesn't implement the interface, throw exception
        throw new ClassCastException(activity.toString()
                + " must implement NoticeDialogListener");
    }
}
...
</code></pre>

<p>}</p></li>
<li><p>Make the class that displays the dialog implements your interface.</p>

<p>public class MainActivity extends FragmentActivity
                          implements NoticeDialogFragment.NoticeDialogListener{
    ...</p>

<pre><code>public void showNoticeDialog() {
    // Create an instance of the dialog fragment and show it
    DialogFragment dialog = new NoticeDialogFragment();
    dialog.show(getSupportFragmentManager(), "NoticeDialogFragment");
}

// The dialog fragment receives a reference to this Activity through the
// Fragment.onAttach() callback, which it uses to call the following methods
// defined by the NoticeDialogFragment.NoticeDialogListener interface
@Override
public void onDialogPositiveClick(DialogFragment dialog) {
    // User touched the dialog's positive button
    ...
}

@Override
public void onDialogNegativeClick(DialogFragment dialog) {
    // User touched the dialog's negative button
    ...
}
</code></pre>

<p>}</p></li>
<li><p>Make your dialog invoke these methods on the correct moment (when detect <code>setPositiveButton</code> or <code>setNegativeButton</code> click).</p>

<p>public class NoticeDialogFragment extends DialogFragment {
    ...</p>

<pre><code>@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
    // Build the dialog and set up the button click handlers
    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
    builder.setMessage(R.string.dialog_fire_missiles)
           .setPositiveButton(R.string.fire, new DialogInterface.OnClickListener() {
               public void onClick(DialogInterface dialog, int id) {
                   // Send the positive button event back to the host activity
                   mListener.onDialogPositiveClick(NoticeDialogFragment.this);
               }
           })
           .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
               public void onClick(DialogInterface dialog, int id) {
                   // Send the negative button event back to the host activity
                   mListener.onDialogNegativeClick(NoticeDialogFragment.this);
               }
           });
    return builder.create();
}
</code></pre>

<p>}</p></li>
</ol>

<p>Ref <a href="http://developer.android.com/guide/topics/ui/dialogs.html#PassingEvents" rel="nofollow">http://developer.android.com/guide/topics/ui/dialogs.html#PassingEvents</a></p>
