<p>I'm done the problem by querying contact database by phone number from SMS query. </p>

<pre><code>while (managedCursor.moveToNext()){
        String phNumber = managedCursor.getString(number);
        String contactName = managedCursor.getString(person);
        String messageBody = managedCursor.getString(boty);

        Model model = new Model();
        if(contactName == null || contactName == "" || contactName == "0"){
            contactName = getContactName(getActivity(),phNumber);
            if(contactName == null || contactName == ""){
                contactName = phNumber;
            }
        }
        else{

        }

        model.setContactName(contactName);
        model.setTitle(messageBody);
        model.setIcon(R.drawable.ic_sms);
        model.setCounter("");
        model.setLabel("");
        model.setCountVisible(false);
        model.setLabelVisible(false);
        model.setCallDate("");

        models.add(model);
        totalMessage++;
    }
</code></pre>

<p>and I wrote getContactName(Context context, String phoneNumber) as following.</p>

<pre><code>public static String getContactName(Context context, String phoneNumber) {
    ContentResolver cr = context.getContentResolver();
    Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phoneNumber));
    Cursor cursor = cr.query(uri, new String[]{ContactsContract.PhoneLookup.DISPLAY_NAME}, null, null, null);
    if (cursor == null) {
        return null;
    }
    String contactName = null;
    if(cursor.moveToFirst()) {
        contactName = cursor.getString(cursor.getColumnIndex(ContactsContract.PhoneLookup.DISPLAY_NAME));
    }

    if(cursor != null &amp;&amp; !cursor.isClosed()) {
        cursor.close();
    }

    return contactName;
}
</code></pre>

<p>But, this may be bad from performance view because it query the database again and again individual iteration in while loop. I'll update if I found the better solution.</p>
