<p>You need to use BitmapFactory.Options. BitmapFactory.Options can be used to process Bitmap size and other properties without loading them into the memory by help of inJustDecodeBounds. In order to remove OutOfMemory error, you need to load a scaled down version of the Bitmap from your resources (drawable folder). This can be achieved by help of inSampleSize. If inSampleSize > 1, it requests the decoder to load a scaled down version into the memory saving you from OutOfMemory errors.</p>

<p>Go through the following webpage for more details:</p>

<p><a href="http://developer.android.com/training/displaying-bitmaps/load-bitmap.html" rel="nofollow">http://developer.android.com/training/displaying-bitmaps/load-bitmap.html</a></p>

<p><strong>Demo code:</strong></p>

<p>You will need the following two methods to process each bitmap or drawable file:</p>

<pre><code>public static int calculateInSampleSize(
        BitmapFactory.Options options, int reqWidth, int reqHeight) {
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;
    if (height &gt; reqHeight || width &gt; reqWidth) {
        final int halfHeight = height / 2;
        final int halfWidth = width / 2;
        while ((halfHeight / inSampleSize) &gt; reqHeight
                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
            inSampleSize *= 2;
        }
    }
    return inSampleSize;
}

public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId,
                                                     int reqWidth, int reqHeight) {
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeResource(res, resId, options);
    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);
    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeResource(res, resId, options);
}
</code></pre>

<p>The calculateInSampleSize method is used to calculate the inSampleSize required for each bitmap. The resultant inSampleSize value will be the best suitable value or the best fit to scale your bitmap to your specified requirements as you will specify by help of the arguments in the very same method.</p>

<p>The method decodeSampleBitmapFromResource will decode the bitmap file from your app's resources and let you calculate the inSampleSize without allocating memory for the bitmap. The memory for the bitmap will only be allocated once the correct inSampleSize for that particular bitmap is calculated. This is accomplished by help of inJustDecodeBounds property for the BitmapFactory.Options object.</p>

<p>Now, you just have to use these methods to add the bitmaps to your list view. For the sake of example, lets assume you have an ImageView in each element or row of your ListView. now, we will add the bitmap to the ImageView like this:</p>

<pre><code>imageView.setImageBitmap(decodeSampledBitmapFromResource(getResources(),
            resID, imageView.getMaxWidth(), imageView.getMaxHeight()));
</code></pre>

<p>Here, resID will be the Resource ID for your Bitmap and for the width and height I have currently used the width and height of the ImageView itself because I personally find it the best solution. But, you can use any value. Make sure, your value for width and height does not exceed the width and height of the view on which the bitmap will be placed.</p>

<p><strong>Updated segment of your code:</strong></p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    if (convertView == null) {
        convertView = inflater.inflate(R.layout.select_item, parent,
                false);
        holder = new ViewHolder();
        holder.ivCard = (ImageView) convertView
                .findViewById(R.id.ivSelect);
        convertView.setTag(holder);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }


    holder.ivCard.setImageBitmap(decodeSampledBitmapFromResource(parent.getResources(),
            list.get(position), holder.ivCard.getMaxWidth(), holder.ivCard.getMaxHeight()));



    return convertView;
}
</code></pre>

<p>Look at the last line of getView method. ivCard is your ImageView from your ViewHolder for your Adapter which will now use the method setImageBitmap to set the resource as a bitmap on the ImageView.</p>
