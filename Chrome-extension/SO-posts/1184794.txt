<p><b>Direct answer:</b> There's no need to push whole grids onto the stack, and you might want to represent the grid as array of 8 integers denoting the Queen position at each row.</p>

<p><b>Real problem:</b> Your code is too long and too complicated. Keep it simple! The queen's problem is usually solved by 2 functions of &lt;10 lines each. Is is as simple as:</p>

<p><sub></p>

<pre><code>public static boolean isSolution(final int[] board)
{
    for (int i = 0; i &lt; board.length; i++) {
        for (int j = i + 1; j &lt; board.length; j++) {
            if (board[i] == board[j]) return false;     // same column "|"
            if (board[i]-board[j] == i-j) return false; // diagonal "\"
            if (board[i]-board[j] == j-i) return false; // diagonal "/"
        }
    }
    return true;
}

public static void solve(int depth, int[] board)
{
    if (depth == board.length &amp;&amp; isSolution(board)) {
        outputSolution(board);
    }
    if (depth &lt; board.length) {  // try all positions of the next row
        for (int i = 0; i &lt; board.length; i++) {
            board[depth] = i;
            solve(depth + 1, board);
        }
    }
}
</code></pre>

<p></sub>
Add some output code and a main program, and you're finished!
<sub></p>

<pre><code>public static void outputSolution(final int[] board)
{
    System.out.println("--- Solution ---");
    for (int i = 0; i &lt; board.length; i++) {
        for (int j = 0; j &lt; board[i]; j++) System.out.print(" ");
        System.out.println("Q");
    }
}

public static void main(String[] args)
{
    int n = 8;
    solve(0, new int[n]);
}
</code></pre>

<p></sub></p>
