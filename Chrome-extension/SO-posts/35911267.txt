<p>Why are you making the code so complex ? Keep it simple.
I have a Demo code. Maybe it can help you.
Just Create a Model Class Which you Require. Other things are the same.</p>

<pre><code>public class MainActivity extends AppCompatActivity {

private Button btnHit;

private HttpURLConnection connection = null;
private URL url;
private BufferedReader reader = null;
private StringBuffer buffer;
private ListView lvMovies;
private ProgressDialog dialog;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    dialog = new ProgressDialog(this);
    dialog.setIndeterminate(true);
    dialog.setCancelable(false);
    dialog.setMessage("Loading !! Please wait..");

    DisplayImageOptions defaultOptions = new DisplayImageOptions.Builder()
            .cacheInMemory(true)
            .cacheOnDisk(true)
            .build();
    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getApplicationContext())
            .defaultDisplayImageOptions(defaultOptions)
            .build();
    ImageLoader.getInstance().init(config);

    lvMovies = (ListView) findViewById(R.id.lvMovies);
    new JSONTask().execute("http://jsonparsing.parseapp.com/jsonData/moviesData.txt");
}


public class JSONTask extends AsyncTask&lt;String, String, List&lt;MovieModel&gt;&gt; {


    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        dialog.show();
    }

    @Override
    protected List&lt;MovieModel&gt; doInBackground(String... params) {


        try {
            url = new URL(params[0]);
            connection = (HttpURLConnection) url.openConnection();
            connection.connect();

            InputStream stream = connection.getInputStream();

            reader = new BufferedReader(new InputStreamReader(stream));

            buffer = new StringBuffer();

            String line = "";
            while ((line = reader.readLine()) != null) {

                buffer.append(line);
            }

            String finalJson = buffer.toString();

            JSONObject parentObject = new JSONObject(finalJson);
            JSONArray parentArray = parentObject.getJSONArray("movies");


            List&lt;MovieModel&gt; movieModelList = new ArrayList&lt;&gt;();

            Gson gson = new Gson();

            for (int i = 0; i &lt; parentArray.length(); i++) {

                JSONObject finalObject = parentArray.getJSONObject(i);
                MovieModel movieModel = gson.fromJson(finalObject.toString(), MovieModel.class);

                movieModelList.add(movieModel);

            }
            return movieModelList;

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (JSONException e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


        return null;
    }

    @Override
    protected void onPostExecute(List&lt;MovieModel&gt; result) {
        super.onPostExecute(result);

        dialog.dismiss();
        MovieAdapter adapter = new MovieAdapter(getApplicationContext(), R.layout.row, result);
        lvMovies.setAdapter(adapter);


        // TODO Need to set Data on List
    }
}


public class MovieAdapter extends ArrayAdapter {

    private List&lt;MovieModel&gt; movieModelList;
    private int resource;
    private LayoutInflater inflater;

    public MovieAdapter(Context context, int resource, List&lt;MovieModel&gt; objects) {
        super(context, resource, objects);

        movieModelList = objects;
        this.resource = resource;
        inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        ViewHolder holder = null;

        if (convertView == null) {
            holder = new ViewHolder();
            convertView = inflater.inflate(resource, null);

            holder.ivMovieIcon = (ImageView) convertView.findViewById(R.id.ivIcon);
            holder.tvMovie = (TextView) convertView.findViewById(R.id.tvMovie);
            holder.tvTagline = (TextView) convertView.findViewById(R.id.tvTagLine);
            holder.tvYear = (TextView) convertView.findViewById(R.id.tvYear);
            holder.tvDuration = (TextView) convertView.findViewById(R.id.tvDuration);
            holder.tvDirector = (TextView) convertView.findViewById(R.id.tvDirector);
            holder.rbMovieRating = (RatingBar) convertView.findViewById(R.id.rbMovie);
            holder.tvCast = (TextView) convertView.findViewById(R.id.tvCast);
            holder.tvStory = (TextView) convertView.findViewById(R.id.tvStory);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }


        final ProgressBar progressBar = (ProgressBar) convertView.findViewById(R.id.progressBar);

        ImageLoader.getInstance().displayImage(movieModelList.get(position).getImage(), holder.ivMovieIcon, new ImageLoadingListener() {
            @Override
            public void onLoadingStarted(String imageUri, View view) {
                progressBar.setVisibility(View.VISIBLE);
            }

            @Override
            public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
                progressBar.setVisibility(View.GONE);
            }

            @Override
            public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
                progressBar.setVisibility(View.GONE);
            }

            @Override
            public void onLoadingCancelled(String imageUri, View view) {
                progressBar.setVisibility(View.GONE);
            }
        });

        holder.tvMovie.setText(movieModelList.get(position).getMovie());
        holder.tvTagline.setText(movieModelList.get(position).getTagline());
        holder.tvYear.setText("Year : " + movieModelList.get(position).getYear());
        holder.tvDuration.setText(movieModelList.get(position).getDuration());
        holder.tvDirector.setText(movieModelList.get(position).getDirector());


        // Rating Bar
        holder.rbMovieRating.setRating(movieModelList.get(position).getRating() / 2);

        Log.v("Rating is", "" + movieModelList.get(position).getRating() / 2);


        StringBuffer stringBuffer = new StringBuffer();
        for (MovieModel.Cast cast : movieModelList.get(position).getCastList()) {

            stringBuffer.append(cast.getName() + ", ");

        }

        holder.tvCast.setText(stringBuffer);
        holder.tvStory.setText(movieModelList.get(position).getStory());

        return convertView;
    }


    class ViewHolder {

        private ImageView ivMovieIcon;
        private TextView tvMovie;
        private TextView tvTagline;
        private TextView tvYear;
        private TextView tvDuration;
        private TextView tvDirector;
        private RatingBar rbMovieRating;
        private TextView tvCast;
        private TextView tvStory;
    }
}
    }
</code></pre>
