<p>I'm not sure how to use this SO answer box yet, but here is my solution.  I ran across this problem tonight and decided to search it. I found an answer by Neelam Singh that was almost there so I decided to fix the issue (broke on empty strings) and causes system crash.  </p>

<p>The method you are looking for is named capString(String s) below. 
It turns "It's only 5am here" into "It's Only 5am Here". </p>

<p>The code is pretty well commented, so enjoy. Cheers!</p>

<p>package com.lincolnwdaniel.interactivestory.model;</p>

<p>public class StringS {</p>

<pre><code>/**
 * @param s is a string of any length, ideally only one word
 * @return a capitalized string.
 * only the first letter of the string is made to uppercase
 */
public static String capSingleWord(String s) {
    if(s.isEmpty() || s.length()&lt;2) {
        return Character.toUpperCase(s.charAt(0))+"";
    } else {
        return Character.toUpperCase(s.charAt(0)) + s.substring(1);
    }
}

/**
 *
 * @param s is a string of any length
 * @return a title cased string.
 * All first letter of each word is made to uppercase
 */
public static String capString(String s) {
    //check if the string is empty, if it is, return it immediately
    if(s.isEmpty()){
        return s;
    }

    //split string on space and create array of words
    String[] arr = s.split(" ");
    //create a string buffer to hold the new capitalized string
    StringBuffer sb = new StringBuffer();

    //check if the array is empty (would be caused by the passage of s as an empty string [i.g "" or " "],
    //if it is, return the original string immediately
    if( arr.length &lt; 1 ){
        return s;
    }

    for (int i = 0; i &lt; arr.length; i++) {
        sb.append(Character.toUpperCase(arr[i].charAt(0)))
                .append(arr[i].substring(1)).append(" ");
    }
    return sb.toString().trim();
}
</code></pre>

<p>}</p>
