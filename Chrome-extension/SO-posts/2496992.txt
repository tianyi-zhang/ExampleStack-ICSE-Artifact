<p>Some of the comments already point out that your recursive routine can't do a sort at the leaf nodes and expect to sort the whole list.  You'd have to return the accumulated strings in a collection and then sort and print them once at the end.</p>

<p>More importantly, there is a nice algorithm for permuting an array in lexical order.  It's used by the next_permutation library function in C++ (which you can look up for explanations), but it's easy enough to translate to java.  You extract a <code>char[]</code> array, maybe with <code>getCharArray</code>, sort it with <code>Arrays.sort</code> and run this until it returns false.</p>

<pre><code>/** Helper function */
void reverse(char[] a, int f, int l)
  {
  while(l&gt;f)
    {
    char tmp = a[l];
    a[l] = a[f];
    a[f] = tmp;
    l--; f++;
    }
  }

/** actual permutation function */
boolean next_permutation(char[] a)
  {
  if(a.length &lt; 2) return false;
  for(int i = a.length-1; i--&gt;0;)
    if(a[i] &lt; a[i+1]) 
    { 
    int j=a.length-1;
    while(!(a[i] &lt; a[j]))
      j--;
    char tmp=a[i];
    a[i]=a[j];
    a[j]=tmp;
    reverse(a, i+1, a.length-1); 
    return true; 
    }
  reverse(a, 0, a.length-1); 
  return false; 
  }
</code></pre>

<p>Once you understand what it does, just run <code>while(next_permutation(array)) {println(array);}</code> and you're doing fine.  Note that this is very bad for arrays over 13 or so elements.</p>
