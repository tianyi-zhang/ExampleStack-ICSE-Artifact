<p>I think I have made pair class tuned almost to perfection :P</p>

<pre><code>public class Pair&lt;T1, T2&gt; implements Iterable&lt;Object&gt;, Cloneable{

    public static &lt;X, Y&gt; Pair&lt;X, Y&gt; makePair(X x, Y y){
        return new Pair&lt;X, Y&gt;(x, y);
    }

    public static &lt;X&gt; Pair&lt;X, X[]&gt; makePairFromArray(X... xs){
        if (xs.length == 0)
            return new Pair&lt;X, X[]&gt;(null, null);
        if (xs.length == 1)
            return new Pair&lt;X, X[]&gt;(xs[0], null);
        return new Pair&lt;X, X[]&gt;(xs[0], Arrays.copyOfRange(xs, 1, xs.length-1));
    }

    public static &lt;X, Y&gt; Pair&lt;X, Y&gt; reverse(Pair&lt;Y, X&gt; original){
        return makePair(original.getSecond(), original.getFirst());
    }

    public static synchronized &lt;X&gt; void swap(Pair&lt;X, X&gt; swapped){
        X tmp = swapped.getFirst();
        swapped.setFirst(swapped.getSecond());
        swapped.setSecond(tmp);
    }

    @SuppressWarnings("unchecked")
    public static &lt;X, Y&gt; List&lt;Object&gt; asObjectList(Pair&lt;X, Y&gt; pair){
        return asList((Pair&lt;Object, Object&gt;) pair);
    }

    public static &lt;X, Y&gt; Object[] asObjectArray(Pair&lt;X, Y&gt; pair, Object[] array){
        return asObjectList(pair).toArray(array);
    }

    public static &lt;X&gt; List&lt;X&gt; asList(Pair&lt;X, X&gt; pair){
        ArrayList&lt;X&gt; list = new ArrayList&lt;X&gt;();
        list.add(pair.getFirst());
        list.add(pair.getSecond());
        return list;
    }

    public static &lt;X&gt; X[] asArray(Pair&lt;X, X&gt; pair, X[] array){
        return asList(pair).toArray(array);
    }

    public static &lt;X&gt; Iterator&lt;X&gt; typedIterator(Pair&lt;X, X&gt; pair){
        @SuppressWarnings("unchecked")
        final Iterator&lt;X&gt; it = (Iterator&lt;X&gt;) pair.iterator();
        return it;
    }

    public static &lt;X&gt; boolean isSymmetric(Pair&lt;X, X&gt; pair){
        return pair.equals(reverse(pair));
    }

    public static &lt;X&gt; boolean isReflexive(Pair&lt;X, X&gt; pair){
        X x1 = pair.getFirst();
        X x2 = pair.getSecond();

        if (x1 == null &amp;&amp; x2 == null) return true;
        if (x1 == null &amp;&amp; x2 != null) return false;
        if (x1 != null &amp;&amp; x2 == null) return false;
        return x1.equals(x2);
    }

    public static &lt;X, Y, Z&gt; boolean isTransitive(Pair&lt;X, Y&gt; first, Pair&lt;Y, Z&gt; second){
        Y y1 = first.getSecond();
        Y y2 = second.getFirst();

        if (y1 == null &amp;&amp; y2 == null) return true;
        if (y1 == null &amp;&amp; y2 != null) return false;
        if (y1 != null &amp;&amp; y2 == null) return false;
        return y1.equals(y2);
    }

    public static synchronized &lt;X, Y&gt; Pair&lt;X, Y&gt; immutablePair(Pair&lt;X, Y&gt; pair){
        final Pair&lt;X, Y&gt; wrapped = pair;
        return new Pair&lt;X, Y&gt;(null, null){

            @Override
            public X getFirst() {
                return wrapped.getFirst();
            }

            @Override
            public Y getSecond() {
                return wrapped.getSecond();
            }

            @Override
            public void setFirst(X first) {
                throw new UnsupportedOperationException();
            }

            @Override
            public void setSecond(Y second) {
                throw new UnsupportedOperationException();
            }

            @Override
            public int hashCode() {
                return wrapped.hashCode();
            }

            @Override
            public boolean equals(Object obj) {
                return wrapped.equals(obj);
            }

            @Override
            public String toString() {
                return wrapped.toString();
            }

            @Override
            public Iterator&lt;Object&gt; iterator() {
                return wrapped.iterator();
            }

            @Override
            public Object clone() throws CloneNotSupportedException {
                return wrapped.clone();
            }

            @Override
            public Pair&lt;X, Y&gt; copy() {
                return wrapped.copy();
            }

        };
    }

    public static synchronized &lt;X, Y&gt; Pair&lt;X, Y&gt; synchronizedPair(Pair&lt;X, Y&gt; pair){
        final Pair&lt;X, Y&gt; wrapped = pair;
        return new Pair&lt;X, Y&gt;(null, null){

            @Override
            public synchronized X getFirst() {
                return wrapped.getFirst();
            }

            @Override
            public synchronized void setFirst(X first) {
                wrapped.setFirst(first);
            }

            @Override
            public synchronized Y getSecond() {
                return wrapped.getSecond();
            }

            @Override
            public synchronized void setSecond(Y second) {
                wrapped.setSecond(second);
            }

            @Override
            public synchronized int hashCode() {
                return wrapped.hashCode();
            }

            @Override
            public synchronized boolean equals(Object obj) {
                return wrapped.equals(obj);
            }

            @Override
            public synchronized String toString() {
                return wrapped.toString();
            }

            @Override
            public synchronized Iterator&lt;Object&gt; iterator() {
                return wrapped.iterator();
            }

            @Override
            public synchronized Object clone() throws CloneNotSupportedException {
                return wrapped.clone();
            }

            @Override
            public synchronized Pair&lt;X, Y&gt; copy() {
                return wrapped.copy();
            }

        };
    }

    public Pair(T1 first, T2 second) {
        super();
        this.first = first;
        this.second = second;
    }

    public Pair(){
        super();
        this.first = null;
        this.second = null;
    }

    public Pair(Pair&lt;T1, T2&gt; copy) {
        first = copy.first;
        second = copy.second;
    }

    private T1 first;
    private T2 second;

    public T1 getFirst() {
        return first;
    }

    public void setFirst(T1 first) {
        this.first = first;
    }

    public T2 getSecond() {
        return second;
    }

    public void setSecond(T2 second) {
        this.second = second;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((first == null) ? 0 : first.hashCode());
        result = prime * result + ((second == null) ? 0 : second.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        @SuppressWarnings("rawtypes")
        Pair other = (Pair) obj;
        if (first == null) {
            if (other.first != null)
                return false;
        } else if (!first.equals(other.first))
            return false;
        if (second == null) {
            if (other.second != null)
                return false;
        } else if (!second.equals(other.second))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "(" + first + ", " + second + ")";
    }

    @Override
    public Iterator&lt;Object&gt; iterator() {
        return new Iterator&lt;Object&gt;(){
            private int it = 0;

            @Override
            public boolean hasNext() {
                return it != 2;
            }

            @Override
            public Object next() {
                return (it++) == 0 ? first : second;
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }

        };
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    public Pair&lt;T1, T2&gt; copy(){
        return makePair(first, second);
    }
}
</code></pre>
