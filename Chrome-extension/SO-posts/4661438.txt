<p>More or Less that's it. Still you can review the source code for <strong><a href="http://www.jedit.org/api/org/gjt/sp/jedit/gui/HistoryTextField.html" rel="nofollow">HistoryTextField</a></strong> component of <a href="http://www.jedit.org/" rel="nofollow">jEdit</a>.
<a href="http://www.jedit.org/api/org/gjt/sp/jedit/gui/HistoryTextField.html" rel="nofollow">http://www.jedit.org/api/org/gjt/sp/jedit/gui/HistoryTextField.html</a>  </p>

<p>A Sample from jEdit source:</p>

<pre><code>public boolean save(Map&lt;String, HistoryModel&gt; models)
{
    Log.log(Log.MESSAGE,HistoryModel.class,"Saving history");
    File file1 = new File(MiscUtilities.constructPath(
        jEdit.getSettingsDirectory(), "#history#save#"));
    File file2 = new File(MiscUtilities.constructPath(
        jEdit.getSettingsDirectory(), "history"));
    if(file2.exists() &amp;&amp; file2.lastModified() != historyModTime)
    {
        Log.log(Log.WARNING,HistoryModel.class,file2
            + " changed on disk; will not save history");
        return false;
    }

    jEdit.backupSettingsFile(file2);

    String lineSep = System.getProperty("line.separator");

    BufferedWriter out = null;

    try
    {
        out = new BufferedWriter(new OutputStreamWriter(
            new FileOutputStream(file1), "UTF-8"));

        if(models != null)
        {
            Collection&lt;HistoryModel&gt; values = models.values();
            for (HistoryModel model : values)
            {
                if(model.getSize() == 0)
                    continue;

                out.write('[');
                out.write(StandardUtilities.charsToEscapes(
                    model.getName(),TO_ESCAPE));
                out.write(']');
                out.write(lineSep);

                for(int i = 0; i &lt; model.getSize(); i++)
                {
                    out.write(StandardUtilities.charsToEscapes(
                        model.getItem(i),
                        TO_ESCAPE));
                    out.write(lineSep);
                }
            }
        }

        out.close();

        /* to avoid data loss, only do this if the above
         * completed successfully */
        file2.delete();
        file1.renameTo(file2);
    }
    catch(IOException io)
    {
        Log.log(Log.ERROR,HistoryModel.class,io);
    }
    finally
    {
        IOUtilities.closeQuietly(out);
    }

    historyModTime = file2.lastModified();
    return true;
}
</code></pre>
