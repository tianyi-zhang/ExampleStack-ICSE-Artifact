<p>Yes you will have to override your <strong>equals()</strong> method in the MyClass class.</p>

<p>Here is an example:</p>

<pre><code>public class MyClass {
    private String name;
    private String gender;

    public MyClass(String name, String gender) {
        this.name = name;
        this.gender = gender;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        MyClass other = (MyClass) obj;
        if (gender == null) {
            if (other.gender != null) return false;
        } else if (!gender.equals(other.gender)) return false;
        if (name == null) {
            if (other.name != null) return false;
        } else if (!name.equals(other.name)) return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((gender == null) ? 0 : gender.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
</code></pre>

<p>Note it is a good programming practice to override <strong>hashcode</strong>() when you override <strong>equals</strong>() method specially in scenarios where <strong>hash</strong> concept comes into picture.Like <strong>HashMap</strong> for example.</p>

<p>You can then compare as follows:</p>

<pre><code>public class Test {
    public static void main(String args[]) throws Exception {
        MyClass myFirstClass = new MyClass("John", "Male");
        MyClass mySecondClass = new MyClass("Jessica", "Female");
        Set&lt;MyClass&gt; mySet = new HashSet&lt;MyClass&gt; ();

        mySet.add(myFirstClass);
        mySet.add(mySecondClass);

        MyClass myDupeClass = new MyClass("Jessica", "Female");

        for (MyClass someClass: mySet) {
            if (someClass.equals(myDupeClass)) {
                System.out.println("Match found for: " + someClass.getName());
            }
        }
    }
}
</code></pre>

<p>Output is as expected</p>

<pre><code>Match found for: Jessica
</code></pre>
