<p>This has worked well for me to provide an escaped version of a text string:</p>

<pre><code>public class XMLHelper {

/**
 * Returns the string where all non-ascii and &lt;, &amp;, &gt; are encoded as numeric entities. I.e. "&amp;lt;A &amp;amp; B &amp;gt;"
 * .... (insert result here). The result is safe to include anywhere in a text field in an XML-string. If there was
 * no characters to protect, the original string is returned.
 * 
 * @param originalUnprotectedString
 *            original string which may contain characters either reserved in XML or with different representation
 *            in different encodings (like 8859-1 and UFT-8)
 * @return
 */
public static String protectSpecialCharacters(String originalUnprotectedString) {
    if (originalUnprotectedString == null) {
        return null;
    }
    boolean anyCharactersProtected = false;

    StringBuffer stringBuffer = new StringBuffer();
    for (int i = 0; i &lt; originalUnprotectedString.length(); i++) {
        char ch = originalUnprotectedString.charAt(i);

        boolean controlCharacter = ch &lt; 32;
        boolean unicodeButNotAscii = ch &gt; 126;
        boolean characterWithSpecialMeaningInXML = ch == '&lt;' || ch == '&amp;' || ch == '&gt;';

        if (characterWithSpecialMeaningInXML || unicodeButNotAscii || controlCharacter) {
            stringBuffer.append("&amp;#" + (int) ch + ";");
            anyCharactersProtected = true;
        } else {
            stringBuffer.append(ch);
        }
    }
    if (anyCharactersProtected == false) {
        return originalUnprotectedString;
    }

    return stringBuffer.toString();
}

}
</code></pre>
