<p>Don't create a new String on each iteration. One way to improve performance would be using a char array and applying math operations per character.</p>

<pre><code>public static String hexToString(String hex) {
    StringBuilder sb = new StringBuilder();
    char[] hexData = hex.toCharArray();
    for (int count = 0; count &lt; hexData.length - 1; count += 2) {
        int firstDigit = Character.digit(hexData[count], 16);
        int lastDigit = Character.digit(hexData[count + 1], 16);
        int decimal = firstDigit * 16 + lastDigit;
        sb.append((char)decimal);
    }
    return sb.toString();
}
</code></pre>

<p>More info about this method:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#digit%28int,int%29"><code>Character#digit</code></a></li>
</ul>

<p>Also, if you're parsing the hex string in pairs, you can use a look up table as @L7ColWinters suggests:</p>

<pre><code>private static final Map&lt;String, Character&gt; lookupHex = new HashMap&lt;String, Character&gt;();

static {
    for(int i = 0; i &lt; 256; i++) {
        String key = Integer.toHexString(i);
        Character value = (char)(Integer.parseInt(key, 16));
        lookupHex.put(key, value);
    }
}

public static String hexToString(String hex) {
    StringBuilder sb = new StringBuilder();
    for (int count = 0; count &lt; hex.length() - 1; count += 2) {
        String output = hex.substring(count, (count + 2));
        sb.append((char)lookupHex.get(output));
    }
    return sb.toString();
}
</code></pre>
