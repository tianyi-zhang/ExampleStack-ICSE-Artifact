<p>If you are trying to ease editing, there is an option for this in Eclipse. Look in: Window -> Preferences -> Java -> Editor -> Typing -> In string literals -> Escape text when pasting into a string literal.</p>

<p>If you are trying to do this programmatically, this will suffice:</p>

<pre><code>public static String escapeForQuotes(String s) {
    return escapeForQuotes(s, '\uFFFF');
}

public static String escapeForQuotes(String s, char ignore) {
    int len = s.length();
    StringBuilder sb = new StringBuilder(len * 6 / 5);
    for (int i = 0; i &lt; len; i++) {
        char c = s.charAt(i);
        if (c == ignore) { sb.append(c); continue; }
        switch (c) {
        case '\\': case '\"': case '\'': break;
        case '\n': c = 'n'; break;
        case '\r': c = 'r'; break;
        case '\0': c = '0'; break;
        default: sb.append(c); continue;
        }
        sb.append('\\').append(c);
    }
    return sb.toString();
}
</code></pre>

<p>The function returns its input with backslashes inserted before quotes, backslashes, line breaks and nulls. The optional 'ignore' parameter allows you to specify one character that need not be escaped. E.g., <code>'</code> could be but need not be escaped in a <code>"</code>-quoted string, and vice-versa.</p>

<p>E.g.,</p>

<pre><code>System.out.println("System.out.println(\"" + escapeForQuotes(html, '\'') + "\");");
</code></pre>
