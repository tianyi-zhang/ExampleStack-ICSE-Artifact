<p>If I understand correctly, you should implement a method with this header</p>

<pre><code>public static void removeDuplicate(ArrayList&lt;Integer&gt; list)
</code></pre>

<p>judging by its name, I'd say that method should remove the duplicates from the list and not (as you are doing it right now) the do-while-loop during input.</p>

<p>So <strong>first</strong> remove the check in your loop (<code>if(!list.contains(value)&amp;&amp; value !=0)</code>) and just add every number the user types to the list. </p>

<p><strong>Then</strong> you can make a call to the method <code>removeDuplicate(list);</code>. If you want you can add this call in your loop and it will be executed after every input or you execute it just once when the input is closed. </p>

<p><strong>Now</strong> implementing the method:</p>

<pre><code>public static void removeDuplicate(ArrayList&lt;Integer&gt; list) {  // this is the header you need to use
</code></pre>

<p>The problem here is, the method knows the list but not the element that is a possible duplicate. So you have to look for it</p>

<pre><code>    for (int i = 0; i &lt; list.size(); i++) {  // iterate through every element in the list 
        Integer current = list.get(i);       // for convenience, save the current list item in a variable
</code></pre>

<p>So, you check every integer in the list â€“ one by one.. but if you want to know if the integer exists a second time, you have to search the tail of the list. Meaning you have to check the sublist after i. </p>

<pre><code>        List sublist = list.subList(i + 1, list.size());  // the sublist with all elements of the list from i+1 to the end
</code></pre>

<p>your <code>list.contains(value)</code> line is correct, you can use it here as well. Only now you call it on the sublist </p>

<pre><code>       if(sublist.contains(current)){   // checks if the number is in the sublist
             sublist.remove(current);   // removes the number from the sublist
       }
</code></pre>

<p>This however would only remove the first <em>duplicate</em>. Alternatively, you can remove every item in the list that equals the <code>current</code> integer:</p>

<pre><code>        while (sublist.contains(current)) {
            sublist.remove(current);
        }
</code></pre>

<p>And that's it. Your method is finished.</p>

<pre><code>    }
}
</code></pre>

<p>It is finished because you are actually working on the one and only list in your program. Even when you remove an integer from your <code>sublist</code>, it is actually removed from the <code>sublist</code> and the <em>real list</em> (the <code>sublist</code> is just a reference, and not an actual list on its own)</p>

<p><strong>EDIT</strong></p>

<p>for your convenience here the complete code with both methods. If you compare the code to yours, you'll see that there is not much different:</p>

<pre><code>public static void main(String[] args) {
    ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();

    Scanner input = new Scanner(System.in);
    System.out.print("Enter integers (input ends with 0): ");
    int value;

    do {
        value = input.nextInt();
        if (value != 0) {     // this changed: add every number except 0
            list.add(value);
        }
    } while (value != 0);

    input.close();

    removeDuplicate(list);    // here you make the call for the new method

    for (int i = 0; i &lt; list.size(); i++) {
        System.out.print(list.get(i) + " ");
    }
}

// and this is the new method
public static void removeDuplicate(ArrayList&lt;Integer&gt; list) {
    for (int i = 0; i &lt; list.size(); i++) {
        Integer current = list.get(i);
        List sublist = list.subList(i + 1, list.size());
        while (sublist.contains(current)) {
            sublist.remove(current);
        }
    }
}
</code></pre>
