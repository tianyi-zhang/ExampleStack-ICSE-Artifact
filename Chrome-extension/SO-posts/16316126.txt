<p>Heres the complete code that can be used to load images from any sdcard folder. I have used the <a href="https://github.com/nostra13/Android-Universal-Image-Loader" rel="nofollow">UniversalImageLoader</a> library for image loading.</p>

<p>public class GalleryScreenActivity extends SherlockActivity{</p>

<pre><code>private DisplayImageOptions options;
private ImageAdapter imageAdapter;
private GridView gridView;
protected ImageLoader imageLoader = ImageLoader.getInstance();

@Override
public void onCreate(Bundle savedInstanceState) {
    setTheme(R.style.Theme_Custom);
    super.onCreate(savedInstanceState);

    this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
    getSupportActionBar().setDisplayShowTitleEnabled(false);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);


    setContentView(R.layout.activity_gallery_screen);

    options = new DisplayImageOptions.Builder()
        .showImageForEmptyUri(R.drawable.image_for_empty_url)
        .imageScaleType(ImageScaleType.IN_SAMPLE_POWER_OF_2)
        .bitmapConfig(Bitmap.Config.RGB_565)
        .build();

    gridView = (GridView) findViewById(R.id.gridview);

    imageAdapter = new ImageAdapter();

    gridView.setAdapter(imageAdapter);
    gridView.setOnItemClickListener(new OnItemClickListener() {

        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
            startImageGalleryActivity(position);
        }
    });
    gridView.setOnScrollListener(new PauseOnScrollListener(true, true));
}

@Override
protected void onStart() {
    // TODO Auto-generated method stub
    super.onStart();
    if(Data.array == null){
        getImageStrings();
        imageAdapter.notifyDataSetChanged();
    }
    gridView.setVisibility(View.VISIBLE);
    if(Data.array.size() == 0)
        gridView.setVisibility(View.INVISIBLE);
}

@Override
protected void onResume() {
    // TODO Auto-generated method stub
    super.onResume();       
}

public void getImageStrings(){
    File sdDir = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),Constants.PICTURE_SAVE_FOLDER);

    // This location works best if you want the created images to be shared
    // between applications and persist after your app has been uninstalled.
    // Create the storage directory if it does not exist
    if (!sdDir.exists()) {
        if (!sdDir.mkdirs()) {
            Log.d(TAG, "failed to create directory");
            Toast.makeText(getApplicationContext(), "SD CARD ERROR: FIX IT AND TRY AGAIN", Toast.LENGTH_LONG).show();
        }else{

        }
    }

    File[] sdDirFiles = sdDir.listFiles(new FilenameFilter() {

        @Override
        public boolean accept(File dir, String filename) {
            return filename.contains(".jpg") || filename.contains(".png");
        }
    });

    String tempUrl;

    if(Data.array == null)
        Data.array = new LinkedList&lt;String&gt;();

    if(sdDirFiles != null)
        for(File singleFile : sdDirFiles)
        {
            tempUrl = singleFile.getAbsolutePath();
            Log.d("FILE", "file://"+tempUrl);
            Data.array.add("file://"+tempUrl);
        }
}

private void startImageGalleryActivity(int position) {
    Intent intent = new Intent(this, GalleryDetailScreenActivity.class);
    Data.galleryDetailPosition = position;
    startActivity(intent);
    overridePendingTransition(R.anim.appear_right, R.anim.hide_left);
    finish();
}

@Override
protected void onStop() {
    // TODO Auto-generated method stub
    super.onStop();
}

@Override
public void onBackPressed() {
    // TODO Auto-generated method stub
    super.onBackPressed();
    Data.resetData();
    overridePendingTransition(R.anim.appear_left, R.anim.hide_right);
}

@Override
protected void onDestroy() {
    // TODO Auto-generated method stub
    super.onDestroy();
}

@Override
public boolean onMenuItemSelected(int featureId, MenuItem item) {
    // TODO Auto-generated method stub
    switch (item.getItemId()) {
    case android.R.id.home:
        finish();
        overridePendingTransition(R.anim.appear_left, R.anim.hide_right);
        break;
    }

    return true;
}

public class ImageAdapter extends BaseAdapter {

    @Override
    public int getCount() {
        if(Data.array == null)
            return 0;
        return Data.array.size();
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final FrameLayout imageLayout;
        if(convertView == null)
            imageLayout = (FrameLayout) getLayoutInflater().inflate(R.layout.activity_gallery_screen_item, null);
        else
            imageLayout = (FrameLayout) convertView;

        final ImageView imageView = (ImageView) imageLayout.findViewById(R.id.image);
        imageView.setImageBitmap(null);
        final ProgressBar spinner = (ProgressBar) imageLayout.findViewById(R.id.loading);

        imageLoader.displayImage(Data.array.get(position), imageView, options, new SimpleImageLoadingListener() {

            @Override
            public void onLoadingStarted() {
                spinner.setVisibility(View.VISIBLE);
            }

            @Override
            public void onLoadingFailed(FailReason failReason) {
                String message = null;
                switch (failReason) {
                    case IO_ERROR:
                        message = "Input/Output error";
                        break;
                    case OUT_OF_MEMORY:
                        message = "Out Of Memory error";
                        break;
                    case UNKNOWN:
                        message = "Unknown error";
                        break;
                }
                Toast.makeText(GalleryScreenActivity.this, message, Toast.LENGTH_SHORT).show();

                spinner.setVisibility(View.GONE);
                imageView.setImageResource(android.R.drawable.ic_delete);
            }

            @Override
            public void onLoadingComplete(Bitmap loadedImage) {
                spinner.setVisibility(View.GONE);
            }
        });
        return imageLayout;
    }
}
</code></pre>

<p>}</p>
