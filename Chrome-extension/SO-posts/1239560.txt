<p>just change to whatever stream</p>

<pre><code>import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;

import javax.xml.namespace.QName;
import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamConstants;
import javax.xml.stream.XMLStreamReader;

public class LogParser {

    private XMLInputFactory inputFactory = null;
    private XMLStreamReader xmlReader = null;
    InputStream is;
    private int depth;
    private QName rootElement;

    private static class XMLStream extends InputStream
    {
     InputStream delegate;
     StringReader startroot = new StringReader("&lt;root&gt;");
     StringReader endroot = new StringReader("&lt;/root&gt;");

     XMLStream(InputStream delegate)
     {
      this.delegate = delegate;
     }

     public int read() throws IOException {
      int c = startroot.read();
      if(c==-1)
      {
       c = delegate.read();
      }
      if(c==-1)
      {
       c = endroot.read();
      }
      return c;
     }

    }

    public LogParser() {
     inputFactory = XMLInputFactory.newInstance();
    }

    public void read() throws Exception {
     is = new XMLStream(new FileInputStream(new File(
      "./myfile.log")));
     xmlReader = inputFactory.createXMLStreamReader(is);

     while (xmlReader.hasNext()) {
      printEvent(xmlReader);
      xmlReader.next();
     }
     xmlReader.close();

    }

    public void printEvent(XMLStreamReader xmlr) throws Exception {
     switch (xmlr.getEventType()) {
     case XMLStreamConstants.END_DOCUMENT:
      System.out.println("finished");
      break;
     case XMLStreamConstants.START_ELEMENT:
      System.out.print("&lt;");
      printName(xmlr);
      printNamespaces(xmlr);
      printAttributes(xmlr);
      System.out.print("&gt;");
      if(rootElement==null &amp;&amp; depth==1)
      {
       rootElement = xmlr.getName();
      }
      depth++;
      break;
     case XMLStreamConstants.END_ELEMENT:
      System.out.print("&lt;/");
      printName(xmlr);
      System.out.print("&gt;");
      depth--;
      if(depth==1 &amp;&amp; rootElement.equals(xmlr.getName()))
      {
       rootElement=null;
       System.out.println("finished element");
      }
      break;
     case XMLStreamConstants.SPACE:
     case XMLStreamConstants.CHARACTERS:
      int start = xmlr.getTextStart();
      int length = xmlr.getTextLength();
      System.out
        .print(new String(xmlr.getTextCharacters(), start, length));
      break;

     case XMLStreamConstants.PROCESSING_INSTRUCTION:
      System.out.print("&lt;?");
      if (xmlr.hasText())
       System.out.print(xmlr.getText());
      System.out.print("?&gt;");
      break;

     case XMLStreamConstants.CDATA:
      System.out.print("&lt;![CDATA[");
      start = xmlr.getTextStart();
      length = xmlr.getTextLength();
      System.out
        .print(new String(xmlr.getTextCharacters(), start, length));
      System.out.print("]]&gt;");
      break;

     case XMLStreamConstants.COMMENT:
      System.out.print("&lt;!--");
      if (xmlr.hasText())
       System.out.print(xmlr.getText());
      System.out.print("--&gt;");
      break;

     case XMLStreamConstants.ENTITY_REFERENCE:
      System.out.print(xmlr.getLocalName() + "=");
      if (xmlr.hasText())
       System.out.print("[" + xmlr.getText() + "]");
      break;

     case XMLStreamConstants.START_DOCUMENT:
      System.out.print("&lt;?xml");
      System.out.print(" version='" + xmlr.getVersion() + "'");
      System.out.print(" encoding='" + xmlr.getCharacterEncodingScheme()
        + "'");
      if (xmlr.isStandalone())
       System.out.print(" standalone='yes'");
      else
       System.out.print(" standalone='no'");
      System.out.print("?&gt;");
      break;

     }
    }

    /**
     * @param args
     */
    public static void main(String[] args) {
     // TODO Auto-generated method stub
     try {
      new LogParser().read();
     } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
     }
    }

    private static void printName(XMLStreamReader xmlr) {
     if (xmlr.hasName()) {
      System.out.print(getName(xmlr));
     }
    }

    private static String getName(XMLStreamReader xmlr) {
     if (xmlr.hasName()) {
      String prefix = xmlr.getPrefix();
      String uri = xmlr.getNamespaceURI();
      String localName = xmlr.getLocalName();
      return getName(prefix, uri, localName);
     }
     return null;
    }

    private static String getName(String prefix, String uri, String localName) {
     String name = "";
     if (uri != null &amp;&amp; !("".equals(uri)))
      name += "['" + uri + "']:";
     if (prefix != null)
      name += prefix + ":";
     if (localName != null)
      name += localName;
     return name;
    } 

    private static void printAttributes(XMLStreamReader xmlr) {
     for (int i = 0; i &lt; xmlr.getAttributeCount(); i++) {
      printAttribute(xmlr, i);
     }
    }

    private static void printAttribute(XMLStreamReader xmlr, int index) {
     String prefix = xmlr.getAttributePrefix(index);
     String namespace = xmlr.getAttributeNamespace(index);
     String localName = xmlr.getAttributeLocalName(index);
     String value = xmlr.getAttributeValue(index);
     System.out.print(" ");
     System.out.print(getName(prefix, namespace, localName));
     System.out.print("='" + value + "'");
    }

    private static void printNamespaces(XMLStreamReader xmlr) {
     for (int i = 0; i &lt; xmlr.getNamespaceCount(); i++) {
      printNamespace(xmlr, i);
     }
    }

    private static void printNamespace(XMLStreamReader xmlr, int index) {
     String prefix = xmlr.getNamespacePrefix(index);
     String uri = xmlr.getNamespaceURI(index);
     System.out.print(" ");
     if (prefix == null)
      System.out.print("xmlns='" + uri + "'");
     else
      System.out.print("xmlns:" + prefix + "='" + uri + "'");
    }

}
</code></pre>
