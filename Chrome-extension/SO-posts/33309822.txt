<p>Base on my experience, the Resolution setting doesn't effect the final result of PrintedPDfDocument file generation. </p>

<p>Below is the source code of PrintedPDfDocument constructor.</p>

<pre><code>private static final int POINTS_IN_INCH = 72;

public PrintedPdfDocument(Context context, PrintAttributes attributes) {
    MediaSize mediaSize = attributes.getMediaSize();

    // Compute the size of the target canvas from the attributes.
    mPageWidth = (int) (((float) mediaSize.getWidthMils() / MILS_PER_INCH)
            * POINTS_IN_INCH);
    mPageHeight = (int) (((float) mediaSize.getHeightMils() / MILS_PER_INCH)
            * POINTS_IN_INCH);

    // Compute the content size from the attributes.
    Margins minMargins = attributes.getMinMargins();
    final int marginLeft = (int) (((float) minMargins.getLeftMils() / MILS_PER_INCH)
            * POINTS_IN_INCH);
    final int marginTop = (int) (((float) minMargins.getTopMils() / MILS_PER_INCH)
            * POINTS_IN_INCH);
    final int marginRight = (int) (((float) minMargins.getRightMils() / MILS_PER_INCH)
            * POINTS_IN_INCH);
    final int marginBottom = (int) (((float) minMargins.getBottomMils() / MILS_PER_INCH)
            * POINTS_IN_INCH);
    mContentRect = new Rect(marginLeft, marginTop, mPageWidth - marginRight,
            mPageHeight - marginBottom);
}
</code></pre>

<p>You can see that the code does not use the DPI parameter, it uses the 72 as the fixed DPI to calculate the page width/height, which I suppose is wrong. </p>

<p>I got a 1G PDF file when I tried to print 15 pages webpage on a tablet using PrintedPDfDocument API. </p>

<p>So my suggestion for your question is to use another PDF generation library until  the PrintedPDfDocument proves itself later.</p>

<p>Good Luck.</p>
