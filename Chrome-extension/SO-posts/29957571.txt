<p>Your second <code>hashCode</code> implementation looks good to me, but you can never avoid hashcode collisions when the number of possible objects are greater than the range of an <code>int</code> - which is the case here so you should not use the hashcode in <code>equals</code>.</p>

<p>What you should do is something like this (assuming the class name is <code>BST</code>):</p>

<pre><code>public boolean equals(Object other) {
    if(this == other) {
        return true;
    }
    if(!(other instanceof BST)) {
        // If other is null we will end up here
        return false;
    }

    BST bst = (BST) other;

    // Check equality of the left child
    if(left != null) {
        if(!left.equals(other.left)) {
            // Left childs aren't equal
            return false;
        }
    } else if (other.left != null) {
        // this.left is null but other.left isn't
        return false;
    }

    // Check equality of the right child
    if(right != null) {
        if(!right.equals(other.right)) {
            // Right childs aren't equal
            return false;
        }
    } else if (other.right != null) {
        // this.right is null but other.right isn't
        return false;
    }
    // Both left and right childs are equal
    return true;
}
</code></pre>
