<p>At first you need to create view to hold your custom list item</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
   android:orientation="vertical"
   android:layout_width="fill_parent"
   android:layout_height="fill_parent"
   &gt;
&lt;ListView
    android:id="@+id/android:list"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    /&gt;
&lt;TextView
    android:id="@+id/android:empty"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:text="No Item to display"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>After that you will need to create a view for your list item</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="?android:attr/listPreferredItemHeight"
    android:padding="6dip"&gt;
    &lt;LinearLayout
        android:orientation="vertical"
        android:layout_width="0dip"
        android:layout_weight="1"
        android:layout_height="fill_parent"&gt;
        &lt;TextView
            android:id="@+id/toptext"
            android:layout_width="fill_parent"
            android:layout_height="0dip"
            android:layout_weight="1"
            android:gravity="center_vertical"
        /&gt;
        &lt;TextView
            android:layout_width="fill_parent"
            android:layout_height="0dip"
            android:layout_weight="1" 
            android:id="@+id/bottomtext"
            android:singleLine="true"
            android:ellipsize="marquee"
        /&gt;
    &lt;/LinearLayout&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>And you gonna need a custom class to implement new view</p>

<pre><code>private class OrderAdapter extends ArrayAdapter&lt;Order&gt; {

    private ArrayList&lt;Order&gt; items;

    public OrderAdapter(Context context, int textViewResourceId, ArrayList&lt;Order&gt; items) {
        super(context, textViewResourceId, items);
        this.items = items;
    }
    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        View v = convertView;
        if (v == null) {
            //inflate a new view for your list item
            LayoutInflater vi = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            v = vi.inflate(R.layout.row, null);
        }
        Order o = items.get(position);
        if (o != null) {
            //set text to view
            TextView tt = (TextView) v.findViewById(R.id.toptext);
            TextView bt = (TextView) v.findViewById(R.id.bottomtext);
            if (tt != null) {
                  tt.setText("Name: "+o.getOrderName());                            }
            if(bt != null){
                  bt.setText("Status: "+ o.getOrderStatus());
            }
        }
        return v;
    }
}
</code></pre>

<p>Reference:</p>

<p><a href="http://www.softwarepassion.com/android-series-custom-listview-items-and-adapters/" rel="nofollow">http://www.softwarepassion.com/android-series-custom-listview-items-and-adapters/</a></p>
