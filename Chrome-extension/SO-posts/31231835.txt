<p>As I review the code I've seen both <code>TextView</code> and <code>ImageView</code> is being inflated everytime <code>getView</code> is called. Inflation is a very expensive task so we would like to avoid using it as much as we can.</p>

<p>Before Anything else make sure you will declare it in your Gradle</p>

<pre><code>compile 'com.android.support:support-v4:21.0.0'
</code></pre>

<p>Add this helper class in your <code>VideoFilesAdapter.java</code></p>

<pre><code> class Helper {
        public TextView textView;
        public ImageView image;
  }
</code></pre>

<p>Then we will use LRUcache in storing images so that we can use this image over and over without doing to much task.</p>

<p>Add <code>MyLRU.java</code> in your project</p>

<pre><code>import android.content.Context;
import android.graphics.Bitmap;
import android.support.v4.util.LruCache;

public class MyLRU {

    private LruCache&lt;String, Bitmap&gt; cache = null;
    private static MyLRU myLru = null;

    private MyLRU() {
        int availableMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
        cache = new LruCache&lt;String, Bitmap&gt;(availableMemory / 8) {
            @Override
            protected int sizeOf(String key, Bitmap value) {
                // this is the only way to get the Bitmap size below API 12
                return (value.getRowBytes() * value.getHeight()) / 1024;
            }
        };
    }

    public static MyLRU getInstance() {
        if (myLru == null) {
            myLru = new MyLRU();
        }
        return myLru;
    }

    public void addImage(String key, Bitmap image) {
        myLru.addImage(key, image);
    }

    public Bitmap getImage(String key) {
        return myLru.getImage(key);
    }

}
</code></pre>

<p>Add a utility method in your <code>VideoFilesAdapter.java</code></p>

<pre><code>public static Bitmap scaleCenterCrop(Bitmap source, int newHeight, int newWidth) {
        int sourceWidth = source.getWidth();
        int sourceHeight = source.getHeight();

        // Compute the scaling factors to fit the new height and width, respectively.
        // To cover the final image, the final scaling will be the bigger
        // of these two.
        float xScale = (float) newWidth / sourceWidth;
        float yScale = (float) newHeight / sourceHeight;
        float scale = Math.max(xScale, yScale);

        // Now get the size of the source bitmap when scaled
        float scaledWidth = scale * sourceWidth;
        float scaledHeight = scale * sourceHeight;

        // Let's find out the upper left coordinates if the scaled bitmap
        // should be centered in the new size give by the parameters
        float left = (newWidth - scaledWidth) / 2;
        float top = (newHeight - scaledHeight) / 2;

        // The target rectangle for the new, scaled version of the source bitmap will now
        // be
        RectF targetRect = new RectF(left, top, left + scaledWidth, top + scaledHeight);

        // Finally, we create a new bitmap of the specified size and draw our new,
        // scaled bitmap onto it.
        Bitmap dest = Bitmap.createBitmap(newWidth, newHeight, source.getConfig());
        Canvas canvas = new Canvas(dest);
        canvas.drawBitmap(source, null, targetRect, null);

        return dest;
    }
</code></pre>

<p>Here is the Full modification of your <code>VideoFilesAdapter.java</code></p>

<pre><code>public class VideoFilesAdapter extends ArrayAdapter&lt;String&gt; {
    private List&lt;String&gt; mpath;
    private Context mContext;
    public static ArrayList&lt;String&gt; mSelectedPaths = null;
    private MyLRU lruCache;

    public VideoFilesAdapter(Context context, List&lt;String&gt; path) {
        super(context, R.layout.fileadapter_list, path);
        this.mContext = context;
        this.mpath = path;
        // My LRU
        lruCache = MyLRU.getInstance();
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        View v;
        if (convertView == null) {
            LayoutInflater mInflater = (LayoutInflater) mContext
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            v = mInflater.inflate(R.layout.fileadapter_list, null);
            Helper h = new Helper();
            h.textView = (TextView) convertView.findViewById(R.id.txt);
            h.textView = (ImageView) convertView.findViewById(R.id.img);
            v.setTag(h);
        } else {
            v = convertView;
        }

        Helper myHelper = (Helper) v.getTag();

        File file = new File(mpath.get(position));
        String fullPath = file.getAbsolutePath();

        if (file.exists()) {
            myHelper.textView.setText(file.getName());

            Bitmap cacheImage = lruCache.getImage(fullPath);
            if (cacheImage == null) {
                Bitmap bm = scaleCenterCrop(ThumbnailUtils.createVideoThumbnail(fullPath, MediaStore.Video.Thumbnails.MICRO_KIND),100,100);
                lruCache.addImage(fullPath, bm);
                cacheImage = bm;
            }
            myHelper.image.setImageBitmap(cacheImage);

        }

        return v;
    }

    class Helper {
        public TextView textView;
        public ImageView image;
    }

    public static Bitmap scaleCenterCrop(Bitmap source, int newHeight, int newWidth) {
        int sourceWidth = source.getWidth();
        int sourceHeight = source.getHeight();

        // Compute the scaling factors to fit the new height and width, respectively.
        // To cover the final image, the final scaling will be the bigger
        // of these two.
        float xScale = (float) newWidth / sourceWidth;
        float yScale = (float) newHeight / sourceHeight;
        float scale = Math.max(xScale, yScale);

        // Now get the size of the source bitmap when scaled
        float scaledWidth = scale * sourceWidth;
        float scaledHeight = scale * sourceHeight;

        // Let's find out the upper left coordinates if the scaled bitmap
        // should be centered in the new size give by the parameters
        float left = (newWidth - scaledWidth) / 2;
        float top = (newHeight - scaledHeight) / 2;

        // The target rectangle for the new, scaled version of the source bitmap will now
        // be
        RectF targetRect = new RectF(left, top, left + scaledWidth, top + scaledHeight);

        // Finally, we create a new bitmap of the specified size and draw our new,
        // scaled bitmap onto it.
        Bitmap dest = Bitmap.createBitmap(newWidth, newHeight, source.getConfig());
        Canvas canvas = new Canvas(dest);
        canvas.drawBitmap(source, null, targetRect, null);

        return dest;
    }

}
</code></pre>

<p>As you can see I removed temporarily the <code>getImageUri</code> method and the Picasso since it does not make sense already due to that we already have a caching which is LRU-cache. </p>

<p>I hope this will increase your app performance :)</p>
