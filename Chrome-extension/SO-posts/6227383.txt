<p>Take a look at the source for the HashMap class, in the <code>transfer()</code> method, which is called by the <code>resize()</code> method.</p>

<pre><code>    /**
     * Transfers all entries from current table to newTable.
     */
    void transfer(Entry[] newTable) {
        Entry[] src = table;
        int newCapacity = newTable.length;
        for (int j = 0; j &lt; src.length; j++) {
            Entry&lt;K,V&gt; e = src[j];
            if (e != null) {
                src[j] = null;
                do {
                    Entry&lt;K,V&gt; next = e.next;
                    int i = indexFor(e.hash, newCapacity);
                    e.next = newTable[i];
                    newTable[i] = e;
                    e = next;
                } while (e != null);
            }
        }
    }
</code></pre>

<p>In this HashTable implementation you can follow <em>exactly</em> how each entry is stored in the new (twice as big) storage array.  The capacity of the new array is used in determining which slot each item will be stored.  The hashcode of the keys does not change (it is in fact not even recomputed, but retrieved from the public field named <code>hash</code> in each <code>Entry</code> object, where it is stored), what changes is the result of the <code>indexFor()</code> call:</p>

<pre><code>    /**
     * Returns index for hash code h.
     */
    static int indexFor(int h, int length) {
        return h &amp; (length-1);
    }
</code></pre>

<p>which takes the hash code and the new storage array's length and returns the index in the new array.</p>

<p>So a client's new call to <code>get()</code> will go through the same <code>indexFor()</code> call, which will also use the new storage array's length, and all will be well.  </p>
