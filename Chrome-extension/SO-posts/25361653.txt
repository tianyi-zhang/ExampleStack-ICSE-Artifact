<p>Just Check i have changed your file look and Compare and make change accordingly 
<strong>1).GalleryFragment4.java</strong></p>

<pre><code>public class GalleryFragment4 extends Fragment {

private ImageView imageView;
private ImageGridViewAdapter imageAdapter;
private GridView gridView;
private static final String GRIDVIEW_TAG = "Android Logo";  

// Change is here 

ArrayList&lt;String&gt; imageList = new ArrayList&lt;String&gt;();


@SuppressLint("UseSparseArrays")
public HashMap&lt;Integer, String&gt; hMap = new HashMap&lt;Integer, String&gt;();

// private LinearLayout linear;

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {

    View rootView = inflater.inflate(R.layout.fragment_gallery, container,
            false);
    // assigns gridView to an object
    gridView = (GridView) rootView.findViewById(R.id.gridview);
    imageview = (ImageView) rootview.findviewById(//Place_id);

    gridArchitecture(rootView);

    extractFiles();

    /**
     * GridView is waiting for an image to be selected
     */
     gridView.setOnItemClickListener(new OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view,
                int position, long id) {

            // image number
            //int num = (position + 1);

            // When image is selected show image number
            //Toast.makeText(getActivity().getApplicationContext(),
            // "image : " + num, Toast.LENGTH_SHORT).show();

     Bitmap bm = decodeSampledBitmapFromUri(imageList.get(position), 100, 100);
    imageView.setImageBitmap(bm);

    });
    return rootView;
}


    public Bitmap decodeSampledBitmapFromUri(String path, int reqWidth, int reqHeight) {

    Bitmap bm = null;
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(path, options);
    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

    options.inJustDecodeBounds = false;
    bm = BitmapFactory.decodeFile(path, options); 

    return bm;   
}

public int calculateInSampleSize(

    BitmapFactory.Options options, int reqWidth, int reqHeight) {
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {
        if (width &gt; height) {
            inSampleSize = Math.round((float)height / (float)reqHeight);    
        } else {
            inSampleSize = Math.round((float)width / (float)reqWidth);    
        }   
    }

    return inSampleSize;    
}

/*
 * Save image to external SD card and create new file if said file is not
 * already created
 */

public static final String DIRECTORY_PATH = Environment
        .getExternalStorageDirectory().toString() + "/MyDir/";

//  public static final String CAMER_IMAGE_BUCKET_ID = getBucketId(DIRECTORY_PATH);

/**
 * Matches code in MediaProvider.computeBucketValues. Should be a common
 * function.
 */
//  public static String getBucketId(String path) {
//      return String.valueOf(path.toLowerCase().hashCode());
//  }

/**
 * Retrieve all camera images
 * 
 * @param context
 * @return
 */
public static List&lt;String&gt; getCameraImages(Context context) {
    final String[] projection = { MediaStore.Images.Media.DATA };
    final String selection = MediaStore.Images.Media.BUCKET_ID + " = ?";
    final String[] selectionArgs = { DIRECTORY_PATH };
    final Cursor cursor = context.getContentResolver().query(
            Images.Media.EXTERNAL_CONTENT_URI, projection, selection,
            selectionArgs, null);

    ArrayList&lt;String&gt; result = new ArrayList&lt;String&gt;(cursor.getCount());
    if (cursor.moveToFirst()) {
        final int dataColumn = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        do {
            final String data = cursor.getString(dataColumn);
            result.add(data);
        } while (cursor.moveToNext());
    }
    cursor.close();
    return result;
}

private void extractFiles() {

    // Name of the folder
    final String targetPath = DIRECTORY_PATH;

    // Toast showing name of directory which images are saved to.
    Toast.makeText(getActivity().getApplicationContext(), targetPath,
            Toast.LENGTH_LONG).show();
    File targetDirector = new File(targetPath);

    final File[] files = targetDirector.listFiles();
    for (File file : files) {
    //change is here 
        imageList.add(file.getAbsolutePath());
    }
}

    private void gridArchitecture(View rootView) {
    // Sets the Tag
    gridView.setTag(GRIDVIEW_TAG);

    /*
     * Adapt the image for the GridView format
     */
    // change is here.
    imageAdapter = new ImageGridViewAdapter(getActivity()
            .getApplicationContext(),imageList);
    gridView.setAdapter(imageAdapter);

    // Set the orientation to landscape
    getActivity().setRequestedOrientation(
            ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
}
}
</code></pre>

<p><strong>2.ImageGridviewAdapter.java</strong></p>

<pre><code>public class ImageGridViewAdapter extends BaseAdapter {

private Context context;
ArrayList&lt;String&gt; imageList = new ArrayList&lt;String&gt;();

public ImageGridViewAdapter(Context c,ArrayList&lt;String&gt; imageLists) {
    context = c; 
 imageList =  imageLists;
}

//Change is here 
//    void add(String path){
//      imageList.add(path); 
 // }

@Override
public int getCount() {
    return imageList.size();
}

@Override
public Object getItem(int arg0) {
    // TODO Auto-generated method stub
    return null;
}

@Override
public long getItemId(int position) {
    // TODO Auto-generated method stub
    return 0;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ImageView imageView;
    if (convertView == null) {  
        imageView = new ImageView(context);
        imageView.setLayoutParams(new GridView.LayoutParams(220, 220));
        imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);

        //8,8,8,8
        imageView.setPadding(20, 20, 20, 20);
    } else {
        imageView = (ImageView) convertView;
    }

    // 200, 200
    Bitmap bm = decodeSampledBitmapFromUri(imageList.get(position), 100, 100);
    imageView.setImageBitmap(bm);

    return imageView;
}

public Bitmap decodeSampledBitmapFromUri(String path, int reqWidth, int reqHeight) {

    Bitmap bm = null;
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(path, options);
    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

    options.inJustDecodeBounds = false;
    bm = BitmapFactory.decodeFile(path, options); 

    return bm;   
}

public int calculateInSampleSize(

    BitmapFactory.Options options, int reqWidth, int reqHeight) {
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {
        if (width &gt; height) {
            inSampleSize = Math.round((float)height / (float)reqHeight);    
        } else {
            inSampleSize = Math.round((float)width / (float)reqWidth);    
        }   
    }

    return inSampleSize;    
}
}
</code></pre>

<p>i have write where i have made changes 
if still found any error then comment bellow </p>
