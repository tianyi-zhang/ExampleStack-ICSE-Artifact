<p><a href="http://stackoverflow.com/questions/18977012/why-itelephony-aidl-works?lq=1">This</a> was the easiest solution I was able to find for ending a call problematically with a great explanation of it as well and here is an example of how you can end phone call after x seconds:</p>

<p>This would be an example of a method that you could call:</p>

<pre><code>public void startDial(int milliseconds, string phoneNumber){

    //performs call
    if (!phoneNumber.equals("")) {

        Intent intent = new Intent(this, MyReceiver.class);
        PendingIntent pi = PendingIntent.getBroadcast(getApplicationContext(), 0, intent, 0);
        AlarmManager alarmManager = (AlarmManager)getSystemService(ALARM_SERVICE);
        alarmManager.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + milliseconds, pi);

        Uri number = Uri.parse("tel:" + phoneNumber);
        Intent dial = new Intent(Intent.ACTION_CALL, number);

        startActivity(dial, 0);
    }
}
</code></pre>

<p>And this would be an example of a Receiver you could set up:</p>

<pre><code>public class MyReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {
        endCall(context);
    }

    public void endCall(Context context) {
        TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        try {
            Class c = Class.forName(tm.getClass().getName());
            Method m = c.getDeclaredMethod("getITelephony");
            m.setAccessible(true);
            Object telephonyService = m.invoke(tm);

            c = Class.forName(telephonyService.getClass().getName());
            m = c.getDeclaredMethod("endCall");
            m.setAccessible(true);
            m.invoke(telephonyService);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
