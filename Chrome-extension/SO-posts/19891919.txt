<p>Basically the <code>requestLocationUpdate()</code> method registrates your activity as a receiver for location updates and the <code>onLocationChanged()</code> method is triggerd by Android every time there is a location update available through the location provider. So what you have to do is quite simple, registrate your activity for location updates:</p>

<pre><code>LocationManager locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);
String locationProvider = LocationManager.NETWORK_PROVIDER;
Location mLocation;
onLocationChanged(locationManager.getLastKnownLocation(locationProvider));
locationManager.requestLocationUpdates(locationProvider, 60 * 1000, 25, this);
</code></pre>

<p>And afterwards handle the location updates in the <code>onLocationChanged()</code>:</p>

<pre><code>@Override
public void onLocationChanged(Location location) {
    if (LocationUtil.isBetterLocation(location, mLocation)) {
        mLocation = location;
                    // do something
    }
}
</code></pre>

<p>Here is one helpful code snipet to determine if the location update is helpful (found somewhere in the Inet):</p>

<pre><code>/* acceptable time delta between location updates */
private static final int TIME_FRAME = 1000 * 60 * 2;

/**
 * Determines whether one location reading is better than the current location.
 * 
 * @param location
 *            The new Location that you want to evaluate
 * @param currentBestLocation
 *            The current Location fix, to which you want to compare the new one
 *            
 * @return indicates if you should use the new location
 */
public static boolean isBetterLocation(Location location, Location currentBestLocation) {
    if (currentBestLocation == null) {
        // A new location is always better than no location
        return true;
    }

    // Check whether the new location fix is newer or older
    long timeDelta = location.getTime() - currentBestLocation.getTime();
    boolean isSignificantlyNewer = timeDelta &gt; TIME_FRAME;
    boolean isSignificantlyOlder = timeDelta &lt; - TIME_FRAME;
    boolean isNewer = timeDelta &gt; 0;

    // If it's been more than two minutes since the current location, use the new location
    // because the user has likely moved
    if (isSignificantlyNewer) {
        return true;
        // If the new location is more than two minutes older, it must be worse
    } else if (isSignificantlyOlder) {
        return false;
    }

    // Check whether the new location fix is more or less accurate
    int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation.getAccuracy());
    boolean isLessAccurate = accuracyDelta &gt; 0;
    boolean isMoreAccurate = accuracyDelta &lt; 0;
    boolean isSignificantlyLessAccurate = accuracyDelta &gt; 200;

    // Check if the old and new location are from the same locationProvider
    boolean isFromSameProvider = isSameProvider(location.getProvider(), currentBestLocation.getProvider());

    // Determine location quality using a combination of timeliness and accuracy
    if (isMoreAccurate) {
        return true;
    } else if (isNewer &amp;&amp; !isLessAccurate) {
        return true;
    } else if (isNewer &amp;&amp; !isSignificantlyLessAccurate &amp;&amp; isFromSameProvider) {
        return true;
    }
    return false;
}

/**
 * Validates if the provider are equal.
 * 
 * @param provider1 - provider
 * @param provider2 - provider
 * 
 * @return &lt;code&gt;TRUE&lt;/code&gt; if the provider are the same
 */
public static boolean isSameProvider(String provider1, String provider2) {
    if (provider1 == null) {
        return provider2 == null;
    }
    return provider1.equals(provider2);
}
</code></pre>
