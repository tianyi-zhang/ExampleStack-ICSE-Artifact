<p><code>equals()</code> on <a href="http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html"><code>BigDecimal</code></a> checks the internal state of <code>BigDecimal</code> for comparison </p>

<p>Refer the code below</p>

<pre><code>public boolean equals(Object x) {
    if (!(x instanceof BigDecimal))
        return false;
    BigDecimal xDec = (BigDecimal) x;
    if (x == this)
        return true;
    if (scale != xDec.scale)
        return false;
    long s = this.intCompact;
    long xs = xDec.intCompact;
    if (s != INFLATED) {
        if (xs == INFLATED)
            xs = compactValFor(xDec.intVal);
        return xs == s;
    } else if (xs != INFLATED)
        return xs == compactValFor(this.intVal);

    return this.inflate().equals(xDec.inflate());
}
</code></pre>

<p>if you want to compare the values use <a href="http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#compareTo%28java.math.BigDecimal%29"><code>compareTo()</code></a></p>

<p>Change your code to</p>

<pre><code>assertEquals(0 , new BigDecimal(0).compareTo(new BigDecimal(22.3).multiply(new BigDecimal(0)));
</code></pre>

<hr>

<p><strong>Update:</strong>  </p>

<p>Use constructor taking String as a parameter for BigDecimal for accuracy in precision check the related links below</p>

<hr>

<p><strong>Also See</strong></p>

<ul>
<li><a href="http://stackoverflow.com/questions/11737768/getting-wrong-result-for-evaluation-of-100-2-55-values">Getting wrong result for evaluation of 100 * 2.55 values</a></li>
<li><a href="http://stackoverflow.com/questions/11368496/java-bigdecimal-bugs-with-string-constructor-to-rounding-with-round-half-up">Java BigDecimal bugs with String constructor to rounding with ROUND_HALF_UP</a></li>
</ul>
