<p>If you don't have another drawable for the pressed state you can use <code>setColorFilter</code>to achieve simple tint effect.</p>

<p>It behaves just like pressed state selector so when the image is pressed it will change the background to little gray.</p>

<pre><code>final ImageView image = (ImageView) findViewById(R.id.my_image);
image.setOnTouchListener(new View.OnTouchListener() {
        private Rect rect;

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            if(event.getAction() == MotionEvent.ACTION_DOWN){
                image.setColorFilter(Color.argb(50, 0, 0, 0));
                rect = new Rect(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
            }
            if(event.getAction() == MotionEvent.ACTION_UP){
                image.setColorFilter(Color.argb(0, 0, 0, 0));
            }
            if(event.getAction() == MotionEvent.ACTION_MOVE){
                if(!rect.contains(v.getLeft() + (int) event.getX(), v.getTop() + (int) event.getY())){
                    image.setColorFilter(Color.argb(0, 0, 0, 0));
                } 
            }
            return false;
        }
    });
</code></pre>

<p>It deals with the situation when you move finger outside the view boundaries, thus if it occurs it will restore default view background. </p>

<p>It's important to return <code>false</code> from <code>onTouch</code> when you want to add <code>onClickListner</code>. When you return <code>true</code>, <code>onClickListner</code> won't receive the click.</p>
