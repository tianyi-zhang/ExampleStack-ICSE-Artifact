<p>As @kcoppock mentioned, this is by design.</p>

<p>Here is what I would do in this situation.</p>

<p>1) You can use Picasso <a href="http://square.github.io/picasso/javadoc/index.html">Transformation</a> interface to specify custom transformation for your image (in our case - image with rounded corners)</p>

<p>2) Apply this transformation to the Picasso request on pre-L devices</p>

<p>3) Since CardView adds some margin for the image - get rid of it on pre-L devices by calling <code>setPreventOverlap(false)</code></p>

<p>Back to the code:</p>

<p><strong>Custom transformation:</strong></p>

<pre><code>public class RoundedTransformation implements com.squareup.picasso.Transformation {
    private final int radius;
    private final int margin;

    public RoundedTransformation(final int radius, final int margin) {
        this.radius = radius;
        this.margin = margin;
    }

    @Override
    public Bitmap transform(final Bitmap source) {
        final Paint paint = new Paint();
        paint.setAntiAlias(true);
        paint.setShader(new BitmapShader(source, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));

        Bitmap output = Bitmap.createBitmap(source.getWidth(), source.getHeight(), Config.ARGB_8888);
        Canvas canvas = new Canvas(output);
        canvas.drawRoundRect(new RectF(margin, margin, source.getWidth() - margin, source.getHeight() - margin), radius, radius, paint);

        if (source != output) {
            source.recycle();
        }

        return output;
    }

    @Override
    public String key() {
        return "rounded(radius=" + radius + ", margin=" + margin + ")";
    }
}
</code></pre>

<p><strong>Picasso:</strong></p>

<pre><code>//feel free to play with radius to match your CardView
Picasso.with(mContext).load(p.getUrl()).transform(new RoundedTransformation(12, 0)).fit().into(viewHolder.mImage);
</code></pre>
