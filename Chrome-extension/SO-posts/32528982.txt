<p>I use <a href="http://blog.getpostman.com/2015/05/28/postman-3-0-a-whole-new-experience/" rel="nofollow">Postman</a> to fake the notification.</p>

<p>You'll need headers:</p>

<pre><code>// Please note that the authorization header's KEY is actually "key=&lt;your GCM API key&gt;"
Authorization: key=&lt;your GCM API key&gt; 
Content-Type: application/json
</code></pre>

<p>Then POST to <a href="https://android.googleapis.com/gcm/send" rel="nofollow">https://android.googleapis.com/gcm/send</a> (this is for Android, I'm assuming that somewhere out there there is also an iOS one now that Google is supporting iOS devices as well).</p>

<p>Your body must look like this:</p>

<pre><code>{       
  "registration_ids":["&lt;Your device registration token from GCM&gt;"],
  "data": {
    "message" : "your message here"
  }
}
</code></pre>

<p>I'm assuming (but I have not confirmed): </p>

<ol>
<li>You can do a comma-separated list on the registration_ids</li>
<li><p>You can put other fields inside that "data" json; any that might be passable via a Bundle. This is based on the fact that this code works:</p>

<pre><code>public class PushNotificationListenerService extends GcmListenerService {
   private static final String TAG = "NotificationListener";

   /**
    * Called when message is received.
    *
    * @param from SenderID of the sender.
    * @param data Data bundle containing message data as key/value pairs.
    *             For Set of keys use data.keySet().
    */
    // [START receive_message]
    @Override
    public void onMessageReceived(String from, Bundle data) {
       // Pay attention to this line of code; this indicates
       // that you could have ANY key-value pair passed in
       // as long as it's capable of being serialized into a Bundle object
       String message = data.getString("message");
       Log.d(TAG, "From: " + from);
       Log.d(TAG, "Message: " + message);

        /**
         * In some cases it may be useful to show a notification 
         * indicating to the user that a message was received.
         */
        sendNotification(message);

        //TODO any of your own logic to handle the notification
    }
    // [END receive_message]

    /**
     * Create and show a simple notification containing the received GCM        
     * message.
     *
     * @param message GCM message received.
     */
    private void sendNotification(String message) {
       Intent intent = new Intent(this, MainActivity.class);
       intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
       PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 
           /* Request code */, intent,
           PendingIntent.FLAG_ONE_SHOT);

       Uri defaultSoundUri =      
         RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
         NotificationCompat.Builder notificationBuilder = new  
         NotificationCompat.Builder(this)
            .setSmallIcon(R.drawable.ic_favorite_white_shadow_36dp)
            .setContentTitle("GCM Message")
            .setContentText(message)
            .setAutoCancel(true)
            .setSound(defaultSoundUri)
            .setContentIntent(pendingIntent);

        NotificationManager notificationManager =
           (NotificationManager)    
           getSystemService(Context.NOTIFICATION_SERVICE);

        notificationManager.notify(0 /* ID of notification */, notificationBuilder.build());
    }
}
</code></pre></li>
</ol>
