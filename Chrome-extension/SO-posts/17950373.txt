<p>I think that the most easy and more customizable way to proceed is by inflating an DialogFragment.</p>

<p>You'd do the following in the activity:</p>

<pre><code>FragmentTransaction ft = getFragmentManager().beginTransaction();
DialogFragment dfrag = new CustomDFrag();
dfrag.show(ft,"dialog");
</code></pre>

<p>And then create the class CustomDFrag that extends DialogFragment. Then you override onCreateDialog and use what you've done so far but now with a custom layout:</p>

<pre><code>@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
    // TODO Auto-generated method stub
    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
    LayoutInflater inflater = getActivity().getLayoutInflater();

    View view = inflater.inflate(R.layout.my_layout,null);

            //this is how you'd get a view from the inflated layout
    data = (TextView) view.findViewById(R.id.evo_addhist_data); 
    data.setText("lol");


            //tell the builder that you wan't that inflated layout to show
            // and then set the button (negative/positive in this case) if you want
    builder.setView(
            view)
            .setPositiveButton("OK",
                    new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface arg0, int arg1) {
                            // TODO Auto-generated method stub
                        }
                    })
            .setNegativeButton("CANCEL",
                    new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog,
                                int which) {
                            // TODO Auto-generated method stub
                        }
                    });

    return builder.create();
}
</code></pre>

<p>ps.: i've recomended this because i think it's better when not dealing only with a textview.</p>
