<p>Here's another way of achieving this.  I borrowed a lot from M D's solution, which is very smart in that it uses the Marker's anchor instead of actually changing the Marker's LatLng in the interpolator, but it's actually a hybrid of Jarvis's code and M D's with small modifications. I don't use a TimerTask at all, but rather create a method to make the Marker bounce and and sort of call it recursively, which makes the code much more compact. I'm not sure if there are any negative implications to this, but it works, so I'll post it for anyone who doesn't want to create a TimerTask, but rather just wants the animation to loop continuously:</p>

<pre><code>private void setMarkerBounce(final Marker marker) {
    final Handler handler = new Handler();
    final long startTime = SystemClock.uptimeMillis();
    final long duration = 2000;
    final Interpolator interpolator = new BounceInterpolator();
    handler.post(new Runnable() {
        @Override
        public void run() {
            long elapsed = SystemClock.uptimeMillis() - startTime;
            float t = Math.max(1 - interpolator.getInterpolation((float) elapsed/duration), 0);
            marker.setAnchor(0.5f, 1.0f +  t);

            if (t &gt; 0.0) {
                handler.postDelayed(this, 16);
            } else {
                setMarkerBounce(marker);
            }
        }
    });
}
</code></pre>
