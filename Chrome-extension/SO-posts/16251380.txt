<p>In the case of Java, Arrays.sort() method has the best average performance. The expectation of time complexity is said to be O(N*log2N). So why not use it?</p>

<p>Here is a solution.</p>

<ol>
<li>Go through the array, turn all the negative numbers into their absolute numbers.
For example, from {-5, -3, 0, 1, 3} to {5, 3, 0, 1, 3}.</li>
<li>User Arrays.sort() to resort the array.
For example, from {5, 3, 0, 1, 3} to {0, 1, 3, 3, 5}.</li>
<li>Go through the array again, if the neighbors do not have the same value, count up.</li>
</ol>

<p>Here is the source in Java.</p>

<pre><code>int countDistinct(int[] A) {

    int size = A.length;
    if(size == 0) {
        return 0;
    }
    for(int i = 0; i &lt; size; i++) {
        if(A[i] &lt; 0) {
            A[i] = (-1) * A[i];
        }
    }

    Arrays.sort(A);

    int count = 1;
    for(int i = 0; i &lt; size - 1; i++) {
        if(A[i] != A[i + 1]) {
            count++;
        } 
    }

    return count;
}
</code></pre>
