<p>First way to use <a href="http://java.sun.com/javase/6/docs/api/java/lang/reflect/Proxy.html" rel="nofollow">http://java.sun.com/javase/6/docs/api/java/lang/reflect/Proxy.html</a> see tutorial <a href="http://docs.oracle.com/javase/1.4.2/docs/guide/reflection/proxy.html" rel="nofollow">http://docs.oracle.com/javase/1.4.2/docs/guide/reflection/proxy.html</a> </p>

<p>Second way using AOP you can create dispatcher that intercept all invocation of specific class </p>

<p>For both ways you need to manage methods processing using reflection API</p>

<p><strong>EDITED TO SHOW IDEA</strong>
Following code taken from tutorial above just modified a little (see youListImpl.getRealArrayList() in invoke method)</p>

<pre><code>public class DebugProxy implements java.lang.reflect.InvocationHandler {

    private YouListImpl youListImpl;

    public static Object newInstance(Object obj) {
    return java.lang.reflect.Proxy.newProxyInstance(
        obj.getClass().getClassLoader(),
        obj.getClass().getInterfaces(),
        new DebugProxy(obj));
    }

    private DebugProxy(Object obj) {
    this.obj = obj;
    }

    public Object invoke(Object proxy, Method m, Object[] args)
    throws Throwable
    {
        Object result;
    try {
        System.out.println("before method " + m.getName());
        result = m.invoke(youListImpl.getRealArrayList(), args);
        } catch (InvocationTargetException e) {
        throw e.getTargetException();
        } catch (Exception e) {
        throw new RuntimeException("unexpected invocation exception: " +
                       e.getMessage());
    } finally {
        System.out.println("after method " + m.getName());
    }
    return result;
    }
}
</code></pre>
