<p>Try replacing the .* with .product?* this should align the filter with only the product querystring, and not the product url path (/product/something/else?id)</p>

<pre><code>&lt;intent-filter&gt;
 &lt;action android:name="android.intent.action.VIEW"/&gt;

 &lt;category android:name="android.intent.category.DEFAULT"/&gt;
 &lt;category android:name="android.intent.category.BROWSABLE"/&gt;

 &lt;data android:scheme="myscheme"/&gt;
 &lt;data android:host="product"/&gt;
 &lt;data android:pathPattern=".product?*"/&gt;
</code></pre>

<p></p>

<p>Another option would be to create two intent filters, and put them in order of receipt intent: </p>

<pre><code>Intent 1: product/something/else
Intent 2: product?id=1
</code></pre>

<p>UPDATE: The key here is using getData() not get extras(). Learned that the hard way :)</p>

<pre><code>@Override
public void onNewIntent(Intent i) {
    super.onNewIntent(i);
    Bundle b = i.getExtras();
    if (i != null &amp;&amp; i.getData() != null) {
    try {
            Uri data = i.getData();
            Map&lt;String, String&gt; a = splitQuery(data);
            if (a.containsKey("Product") &amp;&amp; a.containsKey("SOMETHINGELSE")){
                //todo:something that takes care of something else: 
            }else if (a.containsKey("Product")){
                mItemNumber = a.get("ID");
                setUpFragmentForItem(mItemNumber);
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>Split URI into segments:</p>

<pre><code>public static Map&lt;String, String&gt; splitQuery(Uri url) throws UnsupportedEncodingException {
    try {
        Map&lt;String, String&gt; query_pairs = new LinkedHashMap&lt;String, String&gt;();
        String query = url.getQuery();
        String[] pairs = query.split("/");
        for (String pair : pairs) {
            int idx = pair.indexOf("=");
            query_pairs.put(URLDecoder.decode(pair.substring(0, idx), "UTF-8"), URLDecoder.decode(pair.substring(idx + 1), "UTF-8"));
        }
        return query_pairs;
    } catch (Exception e) {
        throw new UnsupportedEncodingException(e.getMessage());
    }
}
</code></pre>

<p>UPDATE: Found a library that does the same thing, worth mentioning, haven't used it, but I may give it a try:
<a href="https://android-arsenal.com/details/1/2072" rel="nofollow">https://android-arsenal.com/details/1/2072</a></p>
