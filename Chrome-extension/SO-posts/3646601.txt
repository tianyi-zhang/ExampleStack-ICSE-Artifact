<p>Right, you can create a custom <a href="http://download.oracle.com/javase/6/docs/api/java/util/ResourceBundle.html"><code>ResourceBundle</code></a> or use the native2ascii converter (if necessary with the Maven 2 plugin to make the conversion more transparent). Since the other answer only goes with the last approach in detail, here's another answer how you could create a custom <code>ResourceBundle</code> to load properties files as UTF-8 in a JSF 2.x application on Java SE 1.6 based environment.</p>

<p><code>faces-config.xml</code></p>



<pre class="lang-xml prettyprint-override"><code>&lt;application&gt;
    &lt;resource-bundle&gt;
        &lt;base-name&gt;com.example.i18n.Text&lt;/base-name&gt;
        &lt;var&gt;text&lt;/var&gt;
    &lt;/resource-bundle&gt;
&lt;/application&gt;
</code></pre>

<p><code>com.example.i18n.Text</code></p>

<pre><code>package com.example.i18n;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Enumeration;
import java.util.Locale;
import java.util.PropertyResourceBundle;
import java.util.ResourceBundle;

import javax.faces.context.FacesContext;

public class Text extends ResourceBundle {

    protected static final String BUNDLE_NAME = "com.example.i18n.text";
    protected static final String BUNDLE_EXTENSION = "properties";
    protected static final String CHARSET = "UTF-8";
    protected static final Control UTF8_CONTROL = new UTF8Control();

    public Text() {
        setParent(ResourceBundle.getBundle(BUNDLE_NAME, 
            FacesContext.getCurrentInstance().getViewRoot().getLocale(), UTF8_CONTROL));
    }

    @Override
    protected Object handleGetObject(String key) {
        return parent.getObject(key);
    }

    @Override
    public Enumeration&lt;String&gt; getKeys() {
        return parent.getKeys();
    }

    protected static class UTF8Control extends Control {
        public ResourceBundle newBundle
            (String baseName, Locale locale, String format, ClassLoader loader, boolean reload)
                throws IllegalAccessException, InstantiationException, IOException
        {
            // The below code is copied from default Control#newBundle() implementation.
            // Only the PropertyResourceBundle line is changed to read the file as UTF-8.
            String bundleName = toBundleName(baseName, locale);
            String resourceName = toResourceName(bundleName, BUNDLE_EXTENSION);
            ResourceBundle bundle = null;
            InputStream stream = null;
            if (reload) {
                URL url = loader.getResource(resourceName);
                if (url != null) {
                    URLConnection connection = url.openConnection();
                    if (connection != null) {
                        connection.setUseCaches(false);
                        stream = connection.getInputStream();
                    }
                }
            } else {
                stream = loader.getResourceAsStream(resourceName);
            }
            if (stream != null) {
                try {
                    bundle = new PropertyResourceBundle(new InputStreamReader(stream, CHARSET));
                } finally {
                    stream.close();
                }
            }
            return bundle;
        }
    }
}
</code></pre>

<p>This expects UTF-8 encoded properties files like <code>text.properties</code>, <code>text_en.properties</code>, etc in <code>com.example.i18n</code> package. No need for native2ascii.</p>

<p>By the way, with the new JSF 2.0 style <code>&lt;resource-bundle&gt;</code> declaration in <code>faces-config.xml</code>, you don't need <code>&lt;f:loadBundle&gt;</code> in the views anymore. All text will be directly available by <code>#{text}</code> in all views.</p>
