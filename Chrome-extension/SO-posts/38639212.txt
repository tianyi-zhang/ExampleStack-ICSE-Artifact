<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-html lang-html prettyprint-override"><code>class Preview extends ViewGroup implements SurfaceHolder.Callback {
    private final String TAG = "Preview";

    SurfaceView mSurfaceView;
    SurfaceHolder mHolder;
    Size mPreviewSize;
    List&lt;Size&gt; mSupportedPreviewSizes;
    Camera mCamera;
    Context context;
    boolean surfaceExists = false;
    boolean isPreview = false;
    static int wid = 0;
    static int hig = 0;
    

    int y = 0;
    private static final double ASPECT_RATIO = 3.0 / 4.0;
    private static final int PICTURE_SIZE_MAX_WIDTH = 1280;
    private static final int PREVIEW_SIZE_MAX_WIDTH = 3264;
    Preview(Context context, SurfaceView sv) {
        super(context);
        this.context=context;
        mSurfaceView = sv;
  mHolder = mSurfaceView.getHolder();
        mHolder.addCallback(this);
        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    }

  @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        
     int height = MeasureSpec.getSize(heightMeasureSpec);
        int width = MeasureSpec.getSize(widthMeasureSpec);

        if (width &gt; height * ASPECT_RATIO) {
             width = (int) (height * ASPECT_RATIO + .5);
        } else {
            height = (int) (width / ASPECT_RATIO + .5);
        }

        setMeasuredDimension(width, height);
    }
public void determineDisplayOrientation(Camera camera) {
        CameraInfo cameraInfo = new CameraInfo();
        Camera.getCameraInfo(0, cameraInfo);

        Display display = ((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        int rotation = display.getRotation(); 
        int degrees  = 0;

        switch (rotation) {
            case Surface.ROTATION_0:
                degrees = 0;
                break;

            case Surface.ROTATION_90:
                degrees = 90;
                break;

            case Surface.ROTATION_180:
                degrees = 180;
                break;

            case Surface.ROTATION_270:
                degrees = 270;
                break;
        }
        int displayOrientation;

        if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
            displayOrientation = (cameraInfo.orientation + degrees) % 360;
            displayOrientation = (360 - displayOrientation) % 360;
        } else {
            displayOrientation = (cameraInfo.orientation - degrees + 360) % 360;
        }

        camera.setDisplayOrientation(displayOrientation);

    }
    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        if (changed &amp;&amp; getChildCount() &gt; 0) {
            final View child = getChildAt(0);

            final int width = r - l;
            final int height = b - t;

            int previewWidth = width;
            int previewHeight = height;
            if (mPreviewSize != null) {
                previewWidth = mPreviewSize.width;
                previewHeight = mPreviewSize.height;
            }

            // Center the child SurfaceView within the parent.
            if (width * previewHeight &gt; height * previewWidth) {
                final int scaledChildWidth = previewWidth * height / previewHeight;
                child.layout((width - scaledChildWidth) / 2, 0,
                        (width + scaledChildWidth) / 2, height);
            } else {
                final int scaledChildHeight = previewHeight * width / previewWidth;
                child.layout(0, (height - scaledChildHeight) / 2,
                        width, (height + scaledChildHeight) / 2);
            }
        }
    }

    public void surfaceCreated(SurfaceHolder holder) {
        // The Surface has been created, acquire the camera and tell it where
        // to draw.
        try {
            if (mCamera != null) {
             
                mCamera.setPreviewDisplay(holder);
            }
        } catch (IOException exception) {
            Log.e(TAG, "IOException caused by setPreviewDisplay()", exception);
        }
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
        // Surface will be destroyed when we return, so stop the preview.
     try {
      if (mCamera != null) {
            mHolder.removeCallback(this);
               mCamera.stopPreview();
               mCamera.release();
           }
  } catch (Exception e) {
   // TODO: handle exception
   e.printStackTrace();
  }
    }
 private Size getOptimalPreviewSize(List&lt;Size&gt; sizes, int w, int h) {
        final double ASPECT_TOLERANCE = 0.1;
        double targetRatio = (double) w / h;
        if (sizes == null) return null;

        Size optimalSize = null;
        double minDiff = Double.MAX_VALUE;

        int targetHeight = h;

        // Try to find an size match aspect ratio and size
        for (Size size : sizes) {
            double ratio = (double) size.width / size.height;
            if (Math.abs(ratio - targetRatio) &gt; ASPECT_TOLERANCE) continue;
            if (Math.abs(size.height - targetHeight) &lt; minDiff) {
                optimalSize = size;
                minDiff = Math.abs(size.height - targetHeight);
            }
        } 

        // Cannot find the one match the aspect ratio, ignore the requirement
        if (optimalSize == null) {
            minDiff = Double.MAX_VALUE;
            for (Size size : sizes) {
                if (Math.abs(size.height - targetHeight) &lt; minDiff) {
                    optimalSize = size;
                    minDiff = Math.abs(size.height - targetHeight);
                }
            }
        }
        return optimalSize; 
    }

    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
     
     wid = w;
     hig = h;
     
     
    }
     private Camera.Size getBestPreviewSize(int width, int height, Camera.Parameters parameters){
        Camera.Size bestSize = null;
        List&lt;Camera.Size&gt; sizeList = parameters.getSupportedPreviewSizes();
        
        bestSize = sizeList.get(0);
        
        for(int i = 1; i &lt; sizeList.size(); i++){
         if((sizeList.get(i).width * sizeList.get(i).height) &gt;
           (bestSize.width * bestSize.height)){
          bestSize = sizeList.get(i);
         }
        }

        return bestSize;
       }
    
    public void setupCamera(Camera camera,boolean isResolutionHigh) {
     mCamera = camera;
     if (mCamera != null) {
      determineDisplayOrientation(mCamera); 
        Camera.Parameters myParameters = mCamera.getParameters();
      
      if(isResolutionHigh){
        
           Camera.Size myBestSize = getBestPreviewSize(wid, hig, myParameters);
          
          if(myBestSize != null){
           myParameters.setPreviewSize(myBestSize.width, myBestSize.height);
           mCamera.setParameters(myParameters);
           mCamera.startPreview();
           isPreview = true;
           
          
             }
          
      }
      
      else{
       
        Size bestPreviewSize = determineBestPreviewSize(myParameters);
             Size bestPictureSize = determineBestPictureSize(myParameters);

             myParameters.setPreviewSize(bestPreviewSize.width, bestPreviewSize.height);
             myParameters.setPictureSize(bestPictureSize.width, bestPictureSize.height);
             myParameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);

             mCamera.setParameters(myParameters);
      }
     }
    }
    private Size determineBestPreviewSize(Camera.Parameters parameters) {
       List&lt;Size&gt; sizes = parameters.getSupportedPreviewSizes();

       return determineBestSize(sizes, PREVIEW_SIZE_MAX_WIDTH);
   }

   private Size determineBestPictureSize(Camera.Parameters parameters) {
       List&lt;Size&gt; sizes = parameters.getSupportedPictureSizes();

       return determineBestSize(sizes, PICTURE_SIZE_MAX_WIDTH);
   }

   protected Size determineBestSize(List&lt;Size&gt; sizes, int widthThreshold) {
       Size bestSize = null;

       for (Size currentSize : sizes) {
           boolean isDesiredRatio = (currentSize.width / 4) == (currentSize.height / 3);
           boolean isBetterSize = (bestSize == null || currentSize.width &gt; bestSize.width);
           boolean isInBounds = currentSize.width &lt;= PICTURE_SIZE_MAX_WIDTH;

           if (isDesiredRatio &amp;&amp; isInBounds &amp;&amp; isBetterSize) {
               bestSize = currentSize;
           }
       }

       if (bestSize == null) {
          // listener.onCameraError();

           return sizes.get(0);
       }

       return bestSize;
   }
   }
   }</code></pre>
</div>
</div>
</p>

<p>TRY IT </p>
