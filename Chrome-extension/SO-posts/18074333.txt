<p>Here is the method that produces the nullpointer (source: <a href="http://grepcode.com/file_/repo1.maven.org/maven2/org.hibernate/hibernate/3.2.6.ga/org/hibernate/event/def/AbstractFlushingEventListener.java/?v=source" rel="nofollow">http://grepcode.com/file_/repo1.maven.org/maven2/org.hibernate/hibernate/3.2.6.ga/org/hibernate/event/def/AbstractFlushingEventListener.java/?v=source</a>):</p>

<pre><code>private void prepareEntityFlushes(EventSource session) throws HibernateException {

    log.debug("processing flush-time cascades");

    final Map.Entry[] list = IdentityMap.concurrentEntries( session.getPersistenceContext().getEntityEntries() );
    //safe from concurrent modification because of how entryList() is implemented on IdentityMap
    final int size = list.length;
    final Object anything = getAnything();
    for ( int i=0; i&lt;size; i++ ) {
        Map.Entry me = list[i];
        EntityEntry entry = (EntityEntry) me.getValue(); //nullpointer here!
        Status status = entry.getStatus();
        if ( status == Status.MANAGED || status == Status.SAVING ) {
            cascadeOnFlush( session, entry.getPersister(), me.getKey(), anything );
        }
    }
}
</code></pre>

<p>The <code>IdentityMap.concurrentEntries</code> returns an array of Map.Entry with the entries of the supplied map. Looks like there is a null-element returned in the map from <code>session.getPersistenceContext().getEntityEntries()</code>, try to get the source code (should be possible through most IDEs) and debug the method. Also, go through your entity definitions, might be something wrong there..</p>
