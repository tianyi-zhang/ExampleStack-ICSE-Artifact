<p>I had the same issue , I fixed using a simple logic to compare the new Progress X OldProgress.
This is my code to a VerticalSlider that just allow change value when user click over Thumb.</p>

<p>This is the trick:</p>

<pre><code>int tempProgress = (getMax() - (int) (getMax() * event.getY() / getHeight()));
            int diff = Math.abs(tempProgress - progress);
            if ( diff &gt; 7 &amp;&amp; !isMoving) return true;
            isMoving = true;
</code></pre>

<p>This is all component source:</p>

<pre><code> package android.widget;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.MotionEvent;

public class VerticalSeekBar extends SeekBar {

    private OnSeekBarChangeListener onChangeListener;
    private int progress = 0;
    private Drawable mThumb;
    private boolean isMoving;

    public VerticalSeekBar(Context context) {
        super(context);
    }

    public VerticalSeekBar(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    public VerticalSeekBar(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(h, w, oldh, oldw);
    }

    @Override
    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(heightMeasureSpec, widthMeasureSpec);
        setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());
    }

    protected void onDraw(Canvas c) {
        c.rotate(-90);
        c.translate(-getHeight(), 0);

        super.onDraw(c);
    }

    @Override
    public void setOnSeekBarChangeListener(OnSeekBarChangeListener onChangeListener){
        this.onChangeListener = onChangeListener;
    }

    public void setThumb(Drawable thumb) {
        if (thumb != null) {
            thumb.setCallback(this);
        }
        super.setThumb(thumb);
        mThumb = thumb;
        mThumb.setCallback(this);
    }


    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (!isEnabled()) {
            return false;
        }

        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:

            if ( onChangeListener!= null)onChangeListener.onStartTrackingTouch(this);
            setPressed(true);
            setSelected(true);
            break;
        case MotionEvent.ACTION_MOVE:
            int tempProgress = (getMax() - (int) (getMax() * event.getY() / getHeight()));
            int diff = Math.abs(tempProgress - progress);
            if ( diff &gt; 7 &amp;&amp; !isMoving) return true;
            isMoving = true;
            progress = getMax() - (int) (getMax() * event.getY() / getHeight());
            if(progress &lt; 18) {progress = 18;}
            if(progress &gt; getMax()) {progress = getMax();}
            setProgressAndThumb(progress);
            setPressed(true);
            setSelected(true);
            break;
        case MotionEvent.ACTION_UP:
            isMoving = false;
            if ( onChangeListener!= null)onChangeListener.onStopTrackingTouch(this);
            setPressed(false);
            setSelected(false);
            break;
        case MotionEvent.ACTION_CANCEL:
            isMoving = false;
            super.onTouchEvent(event);
            setPressed(false);
            setSelected(false);
            break;
        }
        return true;
    }

    public synchronized void setProgressAndThumb(int progress) {
        setProgress(progress);
        onSizeChanged(getWidth(), getHeight() , 0, 0);
        if ( onChangeListener!= null) onChangeListener.onProgressChanged(this, progress, true);
    }

    @Override
    public synchronized void setProgress(int progress) {
        this.progress =progress;
        super.setProgress(progress);
         if ( onChangeListener !=null) onChangeListener.onProgressChanged(this, progress, true);
    }

    public synchronized void setMaximum(int maximum) {
        setMax(maximum);
    }

    public synchronized int getMaximum() {
        return getMax();
    }
}
</code></pre>

<p>Regards!</p>
