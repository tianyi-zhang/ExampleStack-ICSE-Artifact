<p>For whom that troubled with the same problem, I finally solve it. I found reading the keycharmap inside /system/usr/keychars/Virtual.km</p>

<p>I found that some letters are defined with unicodes this uncodes are the accents symbols and so on.</p>

<p>Thus I create a class to identify this codes and from a char I get the linux code.</p>

<pre><code>public static int convertCharToCode(char c) {
    switch (c) {
    case 'a': return Codes.KEY_A;
    case 'b': return Codes.KEY_B;
    case 'c': return Codes.KEY_C;
    case 'd': return Codes.KEY_D;
    case 'e': return Codes.KEY_E;
    case 'f': return Codes.KEY_F;
    case 'g': return Codes.KEY_G;
    case 'h': return Codes.KEY_H;
    case 'i': return Codes.KEY_I;
    case 'j': return Codes.KEY_J;
    case 'k': return Codes.KEY_K;
    case 'l': return Codes.KEY_L;
    case 'm': return Codes.KEY_M;
    case 'n': return Codes.KEY_N;
    case 'o': return Codes.KEY_O;
    case 'p': return Codes.KEY_P;
    case 'q': return Codes.KEY_Q;
    case 'r': return Codes.KEY_R;
    case 's': return Codes.KEY_S;
    case 't': return Codes.KEY_T;
    case 'u': return Codes.KEY_U;
    case 'v': return Codes.KEY_V;
    case 'w': return Codes.KEY_W;
    case 'x': return Codes.KEY_X;
    case 'y': return Codes.KEY_Y;
    case 'z': return Codes.KEY_Z;
    case '0': return Codes.KEY_0;
    case '1': return Codes.KEY_1;
    case '2': return Codes.KEY_2;
    case '3': return Codes.KEY_3;
    case '4': return Codes.KEY_4;
    case '5': return Codes.KEY_5;
    case '6': return Codes.KEY_6;
    case '7': return Codes.KEY_7;
    case '8': return Codes.KEY_8;
    case '9': return Codes.KEY_9;
    case '-': return Codes.KEY_MINUS;
    case '=': return Codes.KEY_EQUAL;
    case ';': return Codes.KEY_SEMICOLON;
    case ' ': return Codes.KEY_SPACE;
    case '\'': return Codes.KEY_APOSTROPHE;
    case '`': return Codes.KEY_GRAVE;
    case '\\': return Codes.KEY_BACKSLASH;
    case ',': return Codes.KEY_COMMA;
    case '.': return Codes.KEY_DOT;
    case '/': return Codes.KEY_SLASH;
    case '!': return Codes.KEY_1;
    case '@': return Codes.KEY_2;
    case '#': return Codes.KEY_3;
    case '$': return Codes.KEY_4;
    case '%': return Codes.KEY_5;
    case '^': return Codes.KEY_6;
    case '&amp;': return Codes.KEY_7;
    case '*': return Codes.KEY_8;
    case '(': return Codes.KEY_9;
    case ')': return Codes.KEY_0;
    case '_': return Codes.KEY_MINUS;
    case '+': return Codes.KEY_EQUAL;
    case ':': return Codes.KEY_SEMICOLON;
    case '\"': return Codes.KEY_APOSTROPHE;
    case '~': return Codes.KEY_GRAVE;
    case '|': return Codes.KEY_BACKSLASH;
    case '&lt;': return Codes.KEY_COMMA;
    case '&gt;': return Codes.KEY_DOT;
    case '?': return Codes.KEY_SLASH;
    default:
        return -1;
    }
}

public static boolean needShift(char c) {
    switch (c) {
    case '!':
        return true;
    case '@':
        return true;
    case '#':
        return true;
    case '$':
        return true;
    case '%':
        return true;
    case '^':
        return true;
    case '&amp;':
        return true;
    case '*':
        return true;
    case '(':
        return true;
    case ')':
        return true;
    case '_':
        return true;
    case '+':
        return true;
    case ':':
        return true;
    case '\"':
        return true;
    case '~':
        return true;
    case '|':
        return true;
    case '&lt;':
        return true;
    case '&gt;':
        return true;
    case '?':
        return true;
    }
    return false;
}
</code></pre>

<p>you should call convertCharToCode(c) with the char that you get from the text, then also you should call needShift(char c) to check if need shift. Also before send the event I check if the letter is a deadchar like <strong>à á ä...</strong> if there is I inject the KEY_RIGHTALT with the correspondent letter.</p>

<p>For example if you need to inject <strong>à</strong> the sequence must be:</p>

<pre><code>intSendEvent(Codes.EV_KEY, Codes.KEY_RIGHTALT, 1);
intSendEvent(Codes.EV_KEY, Codes.KEY_GRAVE, 1);
intSendEvent(Codes.EV_KEY, Codes.KEY_GRAVE, 0);
intSendEvent(Codes.EV_KEY, Codes.KEY_RIGHTALT, 0);

if (caps==1) 
    result=intSendEvent(Codes.EV_KEY, Codes.KEY_LEFTSHIFT, 1);
sendSpecialChar(special);

result=intSendEvent(Codes.EV_KEY, key, 1);
result=intSendEvent(Codes.EV_KEY, key, 0);
if (caps==1) 
    result=intSendEvent(Codes.EV_KEY, Codes.KEY_LEFTSHIFT, 0);
intSendEvent(Codes.EV_SYN, 0, 0);
</code></pre>

<p>These intSendEvent are native functions to inject events.</p>
