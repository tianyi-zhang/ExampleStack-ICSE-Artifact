<p>there is two classes upload and main_activity.And i here put it's xml file </p>

<pre><code>public class MainActivity extends Activity {

    final static int CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE = 1;
    private static final String TAG = "CaptureImage.java";
    public static ImageView showImg = null;
    static String uploadFilePath = " ";
    static String Path;
    static int delete_image_id = 0;
    static TextView imageDetails = null;
    // FeedReaderDbHelper mDbHelper = new FeedReaderDbHelper(CaptureImage.this);
    static Cursor cursor = null;
    public ProgressDialog dialog_upload = null;
    public String s_name;
    public String s_Adress;
    int serverResponseCode = 0;
    TextView shift_display;
    Uri imageUri = null;
    OnClickListener oclBtnOk = new OnClickListener() {
        @Override
        public void onClick(View v) {
            Log.i("VALUES", "It is Working");
            String fileName = "Camera_Example.jpg";
            ContentValues values = new ContentValues();
            values.put(MediaStore.Images.Media.TITLE, fileName);
            values.put(MediaStore.Images.Media.DESCRIPTION,
                "Image capture by camera");

            imageUri = getContentResolver().insert(
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);

            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);

            intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);

            intent.putExtra(MediaStore.EXTRA_VIDEO_QUALITY, 1);

            startActivityForResult(intent, CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE);

            /*************************** Camera Intent End ************************/

        }
    };
    MainActivity CameraActivity = null;
    Upload upload;
    Button outlet_names_show;
    double latitude;
    double longitude;
    OnClickListener oclBtnOk3 = new OnClickListener() {
        @Override
        public void onClick(View v) {

            if (showImg.getDrawable() == null) {
                Toast.makeText(MainActivity.this, " Picture was not captured ",
                    Toast.LENGTH_SHORT).show();
            } else {
                upload_prescription();
                // CallSummery.flag_bt_merchan=true;

            }

        }
    };
    private Button buttonback;

    /**
     * ********* Convert Image Uri path to physical path *************
     */

    public static String convertImageUriToFile(Uri imageUri, Activity activity) {

        int imageID = 0;

        try {

            /*********** Which columns values want to get *******/
            String[] proj = {MediaStore.Images.Media.DATA,
                MediaStore.Images.Media._ID,
                MediaStore.Images.Thumbnails._ID,
                MediaStore.Images.ImageColumns.ORIENTATION};

            cursor = activity.getContentResolver().query(imageUri, proj, null,
                null, null);

            // Get Query Data

            int columnIndex = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media._ID);
            int file_ColumnIndex = cursor
                .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);

            // int orientation_ColumnIndex = cursor.
            // getColumnIndexOrThrow(MediaStore.Images.ImageColumns.ORIENTATION);

            int size = cursor.getCount();

            /******* If size is 0, there are no images on the SD Card. *****/

            if (size == 0) {

                // imageDetails.setText("No Image");
            } else {

                if (cursor.moveToFirst()) {

                    imageID = cursor.getInt(columnIndex);
                    delete_image_id = imageID;

                    Path = cursor.getString(file_ColumnIndex);

                }

            }

        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }

        // Return Captured Image ImageID ( By this ImageID Image will load from
        // sdcard )

        return "" + imageID;
    }

    protected void onCreate(Bundle savedInstanceState) {
        MainActivity.this.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        CameraActivity = this;
        showImg = (ImageView) findViewById(R.id.showImg);
        upload = new Upload(MainActivity.this);
        final Button photo = (Button) findViewById(R.id.photo);
        final Button upload = (Button) findViewById(R.id.upload);


        photo.setOnClickListener(oclBtnOk);
        upload.setOnClickListener(oclBtnOk3);



    }

    @Override
    public void onDestroy() {
        super.onDestroy();

    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        if (imageUri != null) {
            outState.putString("cameraImageUri", imageUri.toString());
        }
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        if (savedInstanceState.containsKey("cameraImageUri")) {
            imageUri = Uri
                .parse(savedInstanceState.getString("cameraImageUri"));
        }
    }

    public void upload_prescription() {
        dialog_upload = ProgressDialog.show(MainActivity.this, "",
            "Uploading file...", true);




        new Thread(new Runnable() {
            public void run() {
                runOnUiThread(new Runnable() {
                    public void run() {

                    }
                });

                createDirectoryIfNeeded();




                upload.uploadFile(uploadFilePath);

            }
        }).start();

    }







    private void createDirectoryIfNeeded() {
        File direct = new File(Environment.getExternalStorageDirectory()
            + "/Capturetemp");

        if (!direct.exists()) {
            if (direct.mkdir()) {
                // directory is created;
            }

        }

    }


    public void copy(String lo, String lan) throws JSONException {

        String sdCard = Environment.getExternalStorageDirectory().toString();

        Random ran = new Random();

        uploadFilePath = sdCard + "/Capturetemp/" + ran.toString() + ".jpg";

        File sourceLocation = new File(Path);
        File targetLocation = new File(uploadFilePath);
        Log.v(TAG, "sourceLocation: " + sourceLocation);
        Log.v(TAG, "targetLocation: " + targetLocation);

        try {

            // 1 = move the file, 2 = copy the file
            int actionChoice = 2;

            // moving the file to another directory
            if (actionChoice == 1) {

                if (sourceLocation.renameTo(targetLocation)) {
                    Log.v(TAG, "Move file successful.");
                } else {
                    Log.v(TAG, "Move file failed.");
                }

            }

            // we will copy the file
            else {

                // make sure the target file exists

                if (sourceLocation.exists()) {

                    InputStream in = new FileInputStream(sourceLocation);
                    OutputStream out = new FileOutputStream(targetLocation);

                    // Copy the bits from instream to outstream
                    byte[] buf = new byte[1024];
                    int len;

                    while ((len = in.read(buf)) &gt; 0) {
                        out.write(buf, 0, len);
                    }

                    in.close();
                    out.close();

                    Log.v(TAG, "Copy file successful.");

                } else {
                    Log.v(TAG, "Copy file failed. Source file missing.");
                }

            }

        } catch (NullPointerException e) {
            // e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == CAPTURE_IMAGE_ACTIVITY_REQUEST_CODE) {

            if (resultCode == RESULT_OK) {

                /*********** Load Captured Image And Data Start ***************/

                String imageId = convertImageUriToFile(imageUri, CameraActivity);

                // Create and excecute AsyncTask to load capture image

                new LoadImagesFromSDCard(MainActivity.this).execute(""
                    + imageId);

                /*********** Load Captured Image And Data End ****************/

            } else if (resultCode == RESULT_CANCELED) {

                Toast.makeText(this, " Picture was not taken ",
                    Toast.LENGTH_SHORT).show();

            } else {

                Toast.makeText(this, " Picture was not taken ",
                    Toast.LENGTH_SHORT).show();

            }
        }

    }

    @Override
    public void onBackPressed() {

    }

    public class LoadImagesFromSDCard extends AsyncTask&lt;String, Void, Void&gt; {

        Context context;
        Bitmap mBitmap;
        private ProgressDialog loadingdailog;

        public LoadImagesFromSDCard(MainActivity context) {
            this.context = context;

        }

        @Override
        protected void onPreExecute() {
            loadingdailog = new ProgressDialog(context);
            loadingdailog.setMessage("Loading Image.....");
            loadingdailog.show();

        }

        // Call after onPreExecute method
        @Override
        protected Void doInBackground(String... urls) {

            Bitmap bitmap = null;
            Bitmap newBitmap = null;
            Uri uri = null;

            try {

                uri = Uri.withAppendedPath(
                    MediaStore.Images.Media.EXTERNAL_CONTENT_URI, ""
                        + urls[0]);

                /************** Decode an input stream into a bitmap. *********/
                bitmap = BitmapFactory.decodeStream(getContentResolver()
                    .openInputStream(uri));

                if (bitmap != null) {

                    /********* Creates a new bitmap, scaled from an existing bitmap. ***********/

                    newBitmap = Bitmap.createScaledBitmap(bitmap, 350, 350,
                        true);
                    // SaveIamge(newBitmap);
                    bitmap.recycle();
                    if (newBitmap != null) {

                        mBitmap = newBitmap;
                    }
                }
            } catch (IOException e) {
                // Error fetching image, try to recover

                /********* Cancel execution of this task. **********/
                cancel(true);
            }

            return null;
        }

        @Override
        protected void onPostExecute(Void unused) {

            if (loadingdailog.isShowing() &amp;&amp; loadingdailog != null) {

                loadingdailog.dismiss();
                loadingdailog = null;
            }

            if (mBitmap != null) {
                showImg.setImageBitmap(mBitmap);

            }
        }
    }


}
</code></pre>

<p>upload class</p>

<pre><code>public class Upload {
    protected MainActivity context;
    ProgressDialog dialog = null;
    int serverResponseCode = 0;
    String uploadFilePath = null;
    String uploadFileName = null;
    String msg = null;
    String upLoadServerUri = "http://fileuploadpath";


    public Upload(MainActivity context) {
        this.context = context;

    }

    public int uploadFile(String sourceFileUri) {

        String fileName = sourceFileUri;

        HttpURLConnection conn = null;
        DataOutputStream dos = null;
        String lineEnd = "\r\n";
        String twoHyphens = "--";
        String boundary = "*****";
        int bytesRead, bytesAvailable, bufferSize;
        byte[] buffer;
        int maxBufferSize = 1 * 1024 * 1024;
        File sourceFile = new File(sourceFileUri);

        if (!sourceFile.isFile()) {

            return 0;

        } else {
            try {
                FileInputStream fileInputStream = new FileInputStream(
                    sourceFile);




                URL url = new URL(upLoadServerUri);
                conn = (HttpURLConnection) url.openConnection();
                conn.setDoInput(true); // Allow Inputs
                conn.setDoOutput(true); // Allow Outputs
                conn.setUseCaches(false); // Don't use a Cached Copy
                conn.setRequestMethod("POST");


                conn.setRequestProperty("Connection", "Keep-Alive");
                conn.setRequestProperty("ENCTYPE", "multipart/form-data");
                conn.setRequestProperty("Content-Type",
                    "multipart/form-data;boundary=" + boundary);
                conn.setRequestProperty("photo", fileName);


                //      conn.setRequestProperty("session_id","13");

                dos = new DataOutputStream(conn.getOutputStream());
                dos.writeBytes(twoHyphens + boundary + lineEnd);
                dos.writeBytes("Content-Disposition: form-data; name=\"photo\";filename=\""
                    + fileName + "\"" + lineEnd);

                dos.writeBytes(lineEnd);


                // create a buffer of maximum size
                bytesAvailable = fileInputStream.available();

                bufferSize = Math.min(bytesAvailable, maxBufferSize);
                buffer = new byte[bufferSize];

                // read file and write it into form...
                bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                while (bytesRead &gt; 0) {

                    dos.write(buffer, 0, bufferSize);
                    bytesAvailable = fileInputStream.available();
                    bufferSize = Math.min(bytesAvailable, maxBufferSize);
                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);

                }

                // send multipart form data necesssary after file data...
                dos.writeBytes(lineEnd);
                dos.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);

                // Responses from the server (code and message)
                serverResponseCode = conn.getResponseCode();
                String serverResponseMessage = conn.getResponseMessage();

                Log.i("uploadFile", "HTTP Response is : "
                    + serverResponseMessage + ": " + serverResponseCode);

                try {

                    readStream(conn.getInputStream());
                } catch (Exception e) {
                    e.printStackTrace();
                }

                if (serverResponseCode == 200) {

                    context.runOnUiThread(new Runnable() {
                        public void run() {
                            context.dialog_upload.dismiss();
                            Toast.makeText(context, "File Upload Complete.",
                                Toast.LENGTH_SHORT).show();
                        }

                    });

                }
                fileInputStream.close();
            } catch (MalformedURLException ex) {
                // Toast.makeText(context, "File Upload Not Complete.",
                // Toast.LENGTH_SHORT).show();
                Log.e("Upload file to server", "error: " + ex.getMessage(), ex);
            } catch (Exception e) {

                // context.dialog.dismiss();
                e.printStackTrace();
                // Toast.makeText(context, "File Upload Not Complete.",
                // Toast.LENGTH_SHORT).show();
                Log.e("Upload file to server Exception",
                    "Exception : " + e.getMessage(), e);
            }
            // context.dialog.dismiss();
            return serverResponseCode;

        }
    }

    private void readStream(InputStream in) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(in));
            String line = "";
            while ((line = reader.readLine()) != null) {
                Log.e("tag", line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

}
</code></pre>

<p>xml file</p>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FFFFFF"
    android:orientation="vertical"
    android:padding="10dp"
    android:weightSum="1" &gt;

    &lt;ImageView
        android:id="@+id/showImg"
        android:layout_width="fill_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:contentDescription="bla bla" /&gt;



    &lt;Button
        android:id="@+id/photo"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="10dp"

        android:text="Capture Image"
        android:textSize="26sp" /&gt;

    &lt;Button
        android:id="@+id/upload"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="10dp"

        android:text="Upload Photo"
        android:textSize="26sp" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>for image uri you should paste your file upload path</p>
