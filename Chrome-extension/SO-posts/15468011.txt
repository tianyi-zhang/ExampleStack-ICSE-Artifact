<p>Im too short to climb that wall. I will give you an example of an ArrayList though:</p>

<pre><code>ArrayList&lt;String&gt; dinosaur = new ArrayList&lt;String&gt;(); // &lt;String&gt; is an explicit type declaration


    // This will reference one line at a time
    String line = null;
    int i=0;
    try 
    {
      // FileReader reads text files in the default encoding.
      FileReader fileReader = new FileReader("file.txt");

      //create buffered reader obj 
      BufferedReader bufferedReader = new BufferedReader(fileReader);

//while not EOF, store line in array element
      while ( (line = bufferedReader.readLine ()) != null) {

        dinosaur.add(line);

        i++;
      }


      // Always close files.
      bufferedReader.close();
    }
    //handle exceptions
    catch(FileNotFoundException e) 
    {
      System.out.println("Unable to open file" + e);
    }
    catch(IOException e) 
    {
      System.out.println("Error reading file" + e);
    }
</code></pre>

<p>This will read each line from a text file and store it as a string in an ArrayList (Although List is more commonly preferred). An ArrayList is dynamic so you don't need to know how many elements you will store (the number of lines in a file)... as long as there's enough memory in the stack to handle it all :p</p>

<p>Hope this helps =)</p>
