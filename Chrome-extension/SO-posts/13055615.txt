<p>Here is some code that actually works:</p>

<pre><code>    // untested function
    byte [] getNV21(int inputWidth, int inputHeight, Bitmap scaled) {

        int [] argb = new int[inputWidth * inputHeight];

        scaled.getPixels(argb, 0, inputWidth, 0, 0, inputWidth, inputHeight);

        byte [] yuv = new byte[inputWidth*inputHeight*3/2];
        encodeYUV420SP(yuv, argb, inputWidth, inputHeight);

        scaled.recycle();

        return yuv;
    }

    void encodeYUV420SP(byte[] yuv420sp, int[] argb, int width, int height) {
        final int frameSize = width * height;

        int yIndex = 0;
        int uvIndex = frameSize;

        int a, R, G, B, Y, U, V;
        int index = 0;
        for (int j = 0; j &lt; height; j++) {
            for (int i = 0; i &lt; width; i++) {

                a = (argb[index] &amp; 0xff000000) &gt;&gt; 24; // a is not used obviously
                R = (argb[index] &amp; 0xff0000) &gt;&gt; 16;
                G = (argb[index] &amp; 0xff00) &gt;&gt; 8;
                B = (argb[index] &amp; 0xff) &gt;&gt; 0;

                // well known RGB to YUV algorithm
                Y = ( (  66 * R + 129 * G +  25 * B + 128) &gt;&gt; 8) +  16;
                U = ( ( -38 * R -  74 * G + 112 * B + 128) &gt;&gt; 8) + 128;
                V = ( ( 112 * R -  94 * G -  18 * B + 128) &gt;&gt; 8) + 128;

                // NV21 has a plane of Y and interleaved planes of VU each sampled by a factor of 2
                //    meaning for every 4 Y pixels there are 1 V and 1 U.  Note the sampling is every other
                //    pixel AND every other scanline.
                yuv420sp[yIndex++] = (byte) ((Y &lt; 0) ? 0 : ((Y &gt; 255) ? 255 : Y));
                if (j % 2 == 0 &amp;&amp; index % 2 == 0) { 
                    yuv420sp[uvIndex++] = (byte)((V&lt;0) ? 0 : ((V &gt; 255) ? 255 : V));
                    yuv420sp[uvIndex++] = (byte)((U&lt;0) ? 0 : ((U &gt; 255) ? 255 : U));
                }

                index ++;
            }
        }
    }
</code></pre>
