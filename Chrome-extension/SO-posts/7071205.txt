<p>You have  to look at the super class: <a href="http://www.jfree.org/jfreechart/api/javadoc/org/jfree/chart/axis/Axis.html#setLabelAngle%28double%29" rel="nofollow">Axis.setLabelAngle(rad)</a>.</p>

<p>And here is an <a href="http://www.java2s.com/Code/Java/Chart/JFreeChartCategoryStepChartDemo.htm" rel="nofollow">example</a>.</p>

<p><strong>EDIT</strong>:  above was not useful, sorry.</p>

<p>I looked at the code of org.jfreechart.chart.axis.NumberAxis.refreshTicksHorizontal.  There is actually an angle that is set to 0.0 (the last argument in all the <code>new NumberTick(...,0.0)</code> constructors).  You could make a subclass of NumberAxis that overrides the method refreshTicksHorizontal with one which uses a different angle (specified in your constructor). </p>

<p>It looks like refreshTicks is always called when drawing the graph, so you don't have to worry about it not being called.</p>

<pre><code>/**
 * Calculates the positions of the tick labels for the axis, storing the
 * results in the tick label list (ready for drawing).
 *
 * @param g2  the graphics device.
 * @param dataArea  the area in which the data should be drawn.
 * @param edge  the location of the axis.
 *
 * @return A list of ticks.
 */
protected List refreshTicksHorizontal(Graphics2D g2,
        Rectangle2D dataArea, RectangleEdge edge) {

    List result = new java.util.ArrayList();

    Font tickLabelFont = getTickLabelFont();
    g2.setFont(tickLabelFont);

    if (isAutoTickUnitSelection()) {
        selectAutoTickUnit(g2, dataArea, edge);
    }

    TickUnit tu = getTickUnit();
    double size = tu.getSize();
    int count = calculateVisibleTickCount();
    double lowestTickValue = calculateLowestVisibleTickValue();

    if (count &lt;= ValueAxis.MAXIMUM_TICK_COUNT) {
        int minorTickSpaces = getMinorTickCount();
        if (minorTickSpaces &lt;= 0) {
            minorTickSpaces = tu.getMinorTickCount();
        }
        for (int minorTick = 1; minorTick &lt; minorTickSpaces; minorTick++) {
            double minorTickValue = lowestTickValue 
                    - size * minorTick / minorTickSpaces;
            if (getRange().contains(minorTickValue)){
                result.add(new NumberTick(TickType.MINOR, minorTickValue,
                        "", TextAnchor.TOP_CENTER, TextAnchor.CENTER,
                        0.0));
            }
        }
        for (int i = 0; i &lt; count; i++) {
            double currentTickValue = lowestTickValue + (i * size);
            String tickLabel;
            NumberFormat formatter = getNumberFormatOverride();
            if (formatter != null) {
                tickLabel = formatter.format(currentTickValue);
            }
            else {
                tickLabel = getTickUnit().valueToString(currentTickValue);
            }
            TextAnchor anchor = null;
            TextAnchor rotationAnchor = null;
            double angle = 0.0;
            if (isVerticalTickLabels()) {
                anchor = TextAnchor.CENTER_RIGHT;
                rotationAnchor = TextAnchor.CENTER_RIGHT;
                if (edge == RectangleEdge.TOP) {
                    angle = Math.PI / 2.0;
                }
                else {
                    angle = -Math.PI / 2.0;
                }
            }
            else {
                if (edge == RectangleEdge.TOP) {
                    anchor = TextAnchor.BOTTOM_CENTER;
                    rotationAnchor = TextAnchor.BOTTOM_CENTER;
                }
                else {
                    anchor = TextAnchor.TOP_CENTER;
                    rotationAnchor = TextAnchor.TOP_CENTER;
                }
            }

            Tick tick = new NumberTick(new Double(currentTickValue),
                    tickLabel, anchor, rotationAnchor, angle);
            result.add(tick);
            double nextTickValue = lowestTickValue + ((i + 1)* size);
            for (int minorTick = 1; minorTick &lt; minorTickSpaces;
                    minorTick++) {
                double minorTickValue = currentTickValue
                        + (nextTickValue - currentTickValue)
                        * minorTick / minorTickSpaces;
                if (getRange().contains(minorTickValue)){
                    result.add(new NumberTick(TickType.MINOR,
                            minorTickValue, "", TextAnchor.TOP_CENTER,
                            TextAnchor.CENTER, 0.0));
                }
            }
        }
    }
    return result;

}
</code></pre>
