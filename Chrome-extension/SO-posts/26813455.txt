<p>Since this page is the first hit on Google, and it seems like such a common task with so little written about it, I'll share the way I've found to show a reusable <code>DialogFragment</code>.</p>

<p>Using interfaces gets really messy if you want to reuse the same Dialog multiple times from the same class, but perform a different action everytime. This solution is a simple and straight-forward way to get around that issue without introducing any disadvantages.</p>

<p>First, create an Abstract class which implements the creation of the Dialog itself:</p>

<pre><code>/**
 * This is a reusable convenience class which makes it easy to show a confirmation dialog as a DialogFragment.
 * To use, create a new instance which overrides the confirm() method, call setArgs(...), and then show
 * the DialogFragment via the fragment manager as usual.
 */
public abstract class ConfirmationDialog extends DialogFragment {

    public void setArgs(String message) {
        setArgs("" , message);
    }

    public void setArgs(String title, String message) {
        Bundle args = new Bundle();
        args.putString("message", message);
        args.putString("title", title);
        setArguments(args);
    }


    @Override
    public AlertDialog onCreateDialog(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Resources res = getActivity().getResources();
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        // Set title if specified
        String title = getArguments().getString("title");
        if (!title.equals("")) {
            builder.setTitle(title);
        }
        // Set confirmation message
        builder.setMessage(getArguments().getString("message"));
        // Set confirmation action
        builder.setPositiveButton(res.getString(R.string.dialog_ok), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                confirm();
            }
        });
        // Set cancel action
        builder.setNegativeButton(res.getString(R.string.dialog_cancel), new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                cancel();
            }
        });
        return builder.create();
    }


    /**
     * Must override this method to handle confirmation event
     */
    public abstract void confirm();


    /**
     * Optionally override this method to do something special when operation cancelled
     */
    public void cancel() {
    }
}
</code></pre>

<p>Secondly, you should make a common method in your <code>Activity</code> which shows a <code>DialogFragment</code> using the fragment manager:</p>

<pre><code>/**
 * Global method to show dialog fragment
 * @param newFragment  the DialogFragment you want to show
 */
public void showDialogFragment(DialogFragment newFragment) {
    // DialogFragment.show() will take care of adding the fragment
    // in a transaction. We also want to remove any currently showing
    // dialog, so make our own transaction and take care of that here.
    FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
    Fragment prev = getSupportFragmentManager().findFragmentByTag("dialog");
    if (prev != null) {
        ft.remove(prev);
    }
    // save transaction to the back stack
    ft.addToBackStack("dialog");
    newFragment.show(ft, "dialog");
}
</code></pre>

<p>Then you can show a confirmation dialog from anywhere in your <code>Activity</code> like this:</p>

<pre><code>ConfirmationDialog dialog = new ConfirmationDialog () {
    @Override
    public void confirm() {
        // Do some stuff
    }
};
dialog.setArgs(stringDialogTitle, stringDialogMessage);
showDialogFragment(dialog);
// Alternatively, call getActivity().showDialogFragment from a Fragment
</code></pre>
