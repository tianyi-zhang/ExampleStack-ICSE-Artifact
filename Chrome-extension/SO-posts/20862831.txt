<p>Something like this should work (assuming you generated <code>GeneratedLexer</code> and <code>GeneratedParser</code> from your grammar):</p>

<pre><code>import java.io.FileInputStream;
import java.io.InputStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import test.GeneratedLexer;
import test.GeneratedParser;

public class Main {
    public static void main(String[] args) throws Exception {
        String inputFile = null;
        if (args.length &gt; 0) {
            inputFile = args[0];
        }
        InputStream is = System.in;
        if (inputFile != null) {
            is = new FileInputStream(inputFile);
        }
        ANTLRInputStream input = new ANTLRInputStream(is);
        GeneratedLexer lexer = new GeneratedLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        GeneratedParser parser = new GeneratedParser(tokens);
        ParseTree tree = parser.startRule();

        // Do something useful with the tree (e.g. use a visitor if you generated one)
        System.out.println(tree.toStringTree(parser));
    }
}
</code></pre>

<p>You could also use a <a href="http://www.antlr.org/wiki/display/ANTLR4/Parser+and+lexer+interpreters" rel="nofollow">parser and lexer interpreter</a> if you don't want to pregenerate them from your grammar (or you have a dynamic grammar).</p>
