<p>I have found a working solution. This <a href="http://stackoverflow.com/questions/2659048/add-maven-build-classpath-to-plugin-execution-classpath">post</a> details the steps required.</p>

<p>Basically I added the following class to the plugin (I've removed the references to LOGGER in the original post)</p>

<pre><code>    /**
     * A custom ComponentConfigurator which adds the project's runtime classpath elements
     * to the
     *
     * @author Brian Jackson
     * @since Aug 1, 2008 3:04:17 PM
     *
     * @plexus.component role="org.codehaus.plexus.component.configurator.ComponentConfigurator"
     *                   role-hint="include-project-dependencies"
     * @plexus.requirement role="org.codehaus.plexus.component.configurator.converters.lookup.ConverterLookup"
     *                   role-hint="default"
     */
    public class IncludeProjectDependenciesComponentConfigurator extends AbstractComponentConfigurator { 

        public void configureComponent( Object component, PlexusConfiguration configuration,
                                        ExpressionEvaluator expressionEvaluator, ClassRealm containerRealm,
                                        ConfigurationListener listener )
            throws ComponentConfigurationException {

            addProjectDependenciesToClassRealm(expressionEvaluator, containerRealm);

            converterLookup.registerConverter( new ClassRealmConverter( containerRealm ) );

            ObjectWithFieldsConverter converter = new ObjectWithFieldsConverter();

            converter.processConfiguration( converterLookup, component, containerRealm.getClassLoader(), configuration,
                                            expressionEvaluator, listener );
        }

        private void addProjectDependenciesToClassRealm(ExpressionEvaluator expressionEvaluator, ClassRealm containerRealm) throws ComponentConfigurationException {
            List&lt;String&gt; runtimeClasspathElements;
            try {
                //noinspection unchecked
                runtimeClasspathElements = (List&lt;String&gt;) expressionEvaluator.evaluate("${project.runtimeClasspathElements}");
            } catch (ExpressionEvaluationException e) {
                throw new ComponentConfigurationException("There was a problem evaluating: ${project.runtimeClasspathElements}", e);
            }

            // Add the project dependencies to the ClassRealm
            final URL[] urls = buildURLs(runtimeClasspathElements);
            for (URL url : urls) {
                containerRealm.addConstituent(url);
            }
        }

        private URL[] buildURLs(List&lt;String&gt; runtimeClasspathElements) throws ComponentConfigurationException {
            // Add the projects classes and dependencies
            List&lt;URL&gt; urls = new ArrayList&lt;URL&gt;(runtimeClasspathElements.size());
            for (String element : runtimeClasspathElements) {
                try {
                    final URL url = new File(element).toURI().toURL();
                    urls.add(url);
                } catch (MalformedURLException e) {
                    throw new ComponentConfigurationException("Unable to access project dependency: " + element, e);
                }
            }

            // Add the plugin's dependencies (so Trove stuff works if Trove isn't on
            return urls.toArray(new URL[urls.size()]);
        }

    }
</code></pre>

<p>then added</p>

<pre><code>@configurator include-project-dependencies
</code></pre>

<p>To my mojo declaration and it works! </p>
