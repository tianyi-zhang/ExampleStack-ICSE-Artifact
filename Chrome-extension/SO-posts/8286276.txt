<p>Map tiles in Osmdroid are provided by map tile providers. The default tile provider used by Osmdroid is <a href="http://code.google.com/p/osmdroid/source/browse/trunk/osmdroid-android/src/main/java/org/osmdroid/tileprovider/MapTileProviderBasic.java">MapTileProviderBasic</a>. This provider extends <a href="http://code.google.com/p/osmdroid/source/browse/trunk/osmdroid-android/src/main/java/org/osmdroid/tileprovider/MapTileProviderArray.java">MapTileProviderArray</a>, which means that it is an array of a few other tile providers - when a tile is requested these tile providers are asked one by one for a tile image until one of them provides it. Take a look at the constructor of <code>MapTileProviderBasic</code>:</p>

<pre class="lang-java prettyprint-override"><code>public MapTileProviderBasic(final IRegisterReceiver pRegisterReceiver,
              final INetworkAvailablityCheck aNetworkAvailablityCheck, 
                                        final ITileSource pTileSource) {

    super(pTileSource, pRegisterReceiver);    
    final TileWriter tileWriter = new TileWriter();

    final MapTileFilesystemProvider fileSystemProvider = 
        new MapTileFilesystemProvider(pRegisterReceiver, pTileSource);
    mTileProviderList.add(fileSystemProvider);

    final MapTileFileArchiveProvider archiveProvider = 
        new MapTileFileArchiveProvider(pRegisterReceiver, pTileSource);
    mTileProviderList.add(archiveProvider);

    final MapTileDownloader downloaderProvider = 
        new MapTileDownloader(pTileSource, tileWriter, aNetworkAvailablityCheck);
    mTileProviderList.add(downloaderProvider);
}
</code></pre>

<p>There are three map tile providers added to the array of providers, in this order:</p>

<ul>
<li><code>MapTileFilesystemProvider</code> - provides tiles from the file system (SD card directory)</li>
<li><code>MapTileFileArchiveProvider</code> - provides tiles from archive in file system</li>
<li><code>MapTileDownloader</code> - provides tiles by downloading them from the Internet (e.g. from OSM servers)</li>
</ul>

<p>So the <code>MapTileProviderBasic</code> looks for a given tile first in the file system, if the tile is not available then it looks for it in archive files and again if it is not available there it downloads the tile from the Internet.</p>

<p>Ok, this is the default mechanism. If you want to change this mechanism to look for tiles stored in a DB then you can create you own class similar to <code>MapTileProviderBasic</code>. So your class could also extend <code>MapTileProviderArray</code> and just use other providers in the constructor. In Osmdroid there is a class <a href="http://code.google.com/p/osmdroid/source/browse/trunk/osmdroid-android/src/main/java/org/osmdroid/tileprovider/modules/DatabaseFileArchive.java">DatabaseFileArchive</a> which could probably help you in reading tiles from the DB.</p>

<p>After creating your own tile provider you should use it instead of the default one. Map tile providers are attached to the <code>MapView</code>. Some of the constructors of <code>MapView</code> take <code>MapTileProviderBase</code> as an argument - you can use one of them to attach your own provider.</p>
