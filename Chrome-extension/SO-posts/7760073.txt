<p>I would offer two elegant ways to access your object from anywhere:</p>

<ol>
<li>use a <a href="http://en.wikipedia.org/wiki/Singleton_pattern" rel="nofollow">Singleton</a> design pattern </li>
<li><p>use ProjectApp class. This class can be accessed from any activity simply by calling getApplication().</p>

<p>ProjectApp app = (ProjectApp)getApplication();</p></li>
</ol>

<p>I used a combination of the two:</p>

<pre><code>    public class MyApp extends Application {

    private MyLocation mMyLocation;

    @Override
    public void onCreate() {
        super.onCreate();
        mMyLocation = new MyLocation();
        mMyLocation.getLocation(this, GlobalData.getInstance(), true);
    }
}
</code></pre>

<p>You can see that GlobalData is a singleton class that implements LocationResult interface, meaning that it will send the updated location to this object.
When I need to get the updated location, I take it from GlobalData.</p>

<p>Here is MyLocation class implementation (I used some code from <a href="http://stackoverflow.com/questions/3145089/what-is-the-simplest-and-most-robust-way-to-get-the-users-current-location-in-an">here</a> and made some changes:</p>

<pre><code>package com.pinhassi.android.utilslib;


import java.util.Timer;
import java.util.TimerTask;
import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;

public class MyLocation {
    private Timer timer1;
    private LocationManager lm;
    private LocationResult locationResult;
    private boolean gps_enabled=false;
    private boolean network_enabled=false;

    private boolean mContinuesUpdates;
    private int decimalAccuracy; 

    /**
     * Class constructor
     */
    public MyLocation(){
        decimalAccuracy = 0;
    }

    public boolean getLocation(Context context, LocationResult result, boolean continuesUpdates)
    {
        mContinuesUpdates = continuesUpdates;
        //I use LocationResult callback class to pass location value from MyLocation to user code.
        locationResult=result;
        if(lm==null)
            lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);

        //exceptions will be thrown if provider is not permitted.
        try{gps_enabled=lm.isProviderEnabled(LocationManager.GPS_PROVIDER);}catch(Exception ex){}
        try{network_enabled=lm.isProviderEnabled(LocationManager.NETWORK_PROVIDER);}catch(Exception ex){}

        //don't start listeners if no provider is enabled
        if(!gps_enabled &amp;&amp; !network_enabled)
            return false;

        if(gps_enabled)
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListenerGps);
        if(network_enabled)
            lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListenerNetwork);
        timer1=new Timer();
        timer1.schedule(new GetLastLocation(), 20000);
        return true;
    }

    LocationListener locationListenerGps = new LocationListener() {
        public void onLocationChanged(Location location) {
            timer1.cancel();
            locationResult.gotLocation(getDecimalAccurated(location));
            if (!mContinuesUpdates)
                lm.removeUpdates(this);
            lm.removeUpdates(locationListenerNetwork);

        }
        public void onProviderDisabled(String provider) {}
        public void onProviderEnabled(String provider) {}
        public void onStatusChanged(String provider, int status, Bundle extras) {}
    };

    LocationListener locationListenerNetwork = new LocationListener() {
        public void onLocationChanged(Location location) {
            timer1.cancel();
            locationResult.gotLocation(getDecimalAccurated(location));
            if (!mContinuesUpdates)
                lm.removeUpdates(this);
            lm.removeUpdates(locationListenerGps);
        }
        public void onProviderDisabled(String provider) {}
        public void onProviderEnabled(String provider) {}
        public void onStatusChanged(String provider, int status, Bundle extras) {}
    };

    class GetLastLocation extends TimerTask {
        @Override
        public void run() {
             lm.removeUpdates(locationListenerGps);
             lm.removeUpdates(locationListenerNetwork);

             Location net_loc=null, gps_loc=null;
             if(gps_enabled)
                 gps_loc=lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
             if(network_enabled)
                 net_loc=lm.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);

             //if there are both values use the latest one
             if(gps_loc!=null &amp;&amp; net_loc!=null){
                 if(gps_loc.getTime()&gt;net_loc.getTime())
                     locationResult.gotLocation(getDecimalAccurated(gps_loc));
                 else
                     locationResult.gotLocation(getDecimalAccurated(net_loc));
                 return;
             }

             if(gps_loc!=null){
                 locationResult.gotLocation(getDecimalAccurated(gps_loc));
                 return;
             }
             if(net_loc!=null){
                 locationResult.gotLocation(getDecimalAccurated(net_loc));
                     return;
                 }
                 locationResult.gotLocation(null);
            }
        }

        /**
         * called when the GPS returns a location.
         * can be called multiple times as the location is updated
         */
        public interface LocationResult {
            public void gotLocation(Location location);
        }

        /**
         * sets location result accuracy
         * @param n number of places after the point. negative value or 0 means not set.
         */
        public void setDecimalAccuracy(int n)
        {
            this.decimalAccuracy = n;
        }

        private Location getDecimalAccurated(Location location) {
            if (decimalAccuracy &gt; 0){
            double accuracy = Math.pow(10, this.decimalAccuracy);
            int ix;

            ix = (int)(location.getLatitude() * accuracy); 
            location.setLatitude(((double)ix)/accuracy);

            ix = (int)(location.getLongitude() * accuracy); 
            location.setLongitude(((double)ix)/accuracy);
            }

            return location;
        }

    }
</code></pre>
