<p>You need to create your own <code>InputFilter</code>: <a href="http://developer.android.com/reference/android/text/InputFilter.html">http://developer.android.com/reference/android/text/InputFilter.html</a></p>

<p>Take a look at this answer I wrote some time ago: <a href="http://stackoverflow.com/questions/5736833/how-to-set-edittext-view-allow-only-two-numeric-values-and-two-decimal-values-lik/5738176#5738176">How to set Edittext view allow only two numeric values and two decimal values like ##.##</a></p>

<hr>

<h2>Update - sample code</h2>

<p>Here is an adaptation to that filter to validate ips. It checks for the presence of four digits, separated by dots and none of them bigger than 255. The validation occurs in real time, i.e., while typing.</p>

<pre><code>    EditText text = new EditText(this);
    InputFilter[] filters = new InputFilter[1];
    filters[0] = new InputFilter() {
        public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {
            if (end &gt; start) {
                String destTxt = dest.toString();
                String resultingTxt = destTxt.substring(0, dstart) + source.subSequence(start, end) + destTxt.substring(dend);
                if (!resultingTxt.matches ("^\\d{1,3}(\\.(\\d{1,3}(\\.(\\d{1,3}(\\.(\\d{1,3})?)?)?)?)?)?")) { 
                    return "";
                } else {
                    String[] splits = resultingTxt.split("\\.");
                    for (int i=0; i&lt;splits.length; i++) {
                        if (Integer.valueOf(splits[i]) &gt; 255) {
                            return "";
                        }
                    }
                }
            }
        return null;
        }
    };
    text.setFilters(filters);
</code></pre>
