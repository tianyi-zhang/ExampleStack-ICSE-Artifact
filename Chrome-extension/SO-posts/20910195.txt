<p>Re: Kakawait (and also to Shades88)</p>

<p>Solution #2 is incorrect because xmemcached didn't properly port the original C code of the Jenkins hash, which uses an unsigned.  Fixing this will also solve the ArrayIndexOutOfBoundsException that Shades88 was seeing.</p>

<pre><code>public class JenkinsHash implements HashAlgorithm {
    @Override
    public long hash(String k) {
        try {
            int hash = 0;
            for (byte bt : k.getBytes("utf-8")) {
                hash += (bt &amp; 0xFF);
                hash += (hash &lt;&lt; 10);
                hash ^= (hash &gt;&gt;&gt; 6);
            }
            hash += (hash &lt;&lt; 3);
            hash ^= (hash &gt;&gt;&gt; 11);
            hash += (hash &lt;&lt; 15);

            // the hash variable in the original C code is a uint32.
            // convert the java signed int to an "unsigned",
            // represented via a long:
            return hash &amp; 0xFFFFFFFFl;
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException("Hash function error", e);
        }
    }
}

// Unit test
public class JenkinsHashTest {
    @Test
    public void testHash() throws Exception {
        JenkinsHash j = new JenkinsHash();
        Properties p = new Properties();

        // This file contains k/v mappings,
        // with values generated by the reference C code
        p.load(new FileReader("src/test/resources/jenkinsHashTest.dat"));

        for (Entry&lt;Object, Object&gt; entry : p.entrySet()) {
            long result = j.hash((String)entry.getKey());
            // Print out hash mismatches
            if (result != Long.parseLong((String)entry.getValue())) {
                System.out.println("Key: " + (String)entry.getKey());
                System.out.println("Expected Hash Value: " + Long.parseLong((String)entry.getValue()));
                System.out.println("Actual Hash Value: " + result);
            }
            assertEquals(result, Long.parseLong((String)entry.getValue()));
        }
    }
}
</code></pre>

<p>The test data file is to compare the Java code against the C code.  Build the C code then hash a bunch of random words and map them in a file, like this:</p>

<p>jenkinsHashTest.dat:</p>

<pre><code>sausage=2834523395
blubber=1103975961
pencil=3318404908
cloud=670342857
moon=2385442906
water=3403519606
computer=2375101981
school=1513618861
network=2981967937
hammer=1218821080
</code></pre>

<p>... add as many as you want</p>
