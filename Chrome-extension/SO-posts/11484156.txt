<p>As far as using <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/app/ActionBar.java" rel="nofollow"><code>ActionBar.Tabs</code></a> goes, they simply don't have the functionality to achieve this. On the other hand, creating your own custom class that mimics the <code>Tabs</code> is easy enough, then all you'd have to do is create and add an <code>OnDragListener</code> and <code>OnTouchListener</code> for the <code>View</code> you use to fill your tab bar.</p>

<p>For example, this is a class I use in one of my apps that mimics <code>ActionBar.Tabs</code>.</p>

<p><strong>ScrollableTabView</strong></p>

<pre><code>    public class ScrollableTabView extends HorizontalScrollView implements OnPageChangeListener {

    private final Context mContext;

    private final LinearLayout mContainer;

    private final ArrayList&lt;View&gt; mTabs = new ArrayList&lt;View&gt;();

    private final int mDividerColor = 0xFF636363;

    private int mDividerMarginTop = 12;

    private int mDividerMarginBottom = 12;

    private int mDividerWidth = 1;

    private ViewPager mPager;

    private TabAdapter mAdapter;

    private Drawable mDividerDrawable;

    public ScrollableTabView(Context context) {
        this(context, null);
    }

    public ScrollableTabView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public ScrollableTabView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs);

        mContext = context;

        final LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                android.view.ViewGroup.LayoutParams.MATCH_PARENT,
                android.view.ViewGroup.LayoutParams.MATCH_PARENT);

        mDividerMarginTop = (int)(getResources().getDisplayMetrics().density * mDividerMarginTop);
        mDividerMarginBottom = (int)(getResources().getDisplayMetrics().density * mDividerMarginBottom);
        mDividerWidth = (int)(getResources().getDisplayMetrics().density * mDividerWidth);

        setHorizontalScrollBarEnabled(false);
        setHorizontalFadingEdgeEnabled(false);

        mContainer = new LinearLayout(context);
        mContainer.setOrientation(LinearLayout.HORIZONTAL);
        mContainer.setLayoutParams(params);

        addView(mContainer);
    }

    /**
     * Set the tabs Adapter
     * 
     * @param adapter
     */
    public void setAdapter(TabAdapter adapter) {
        mAdapter = adapter;

        if (mPager != null &amp;&amp; mAdapter != null) {
            initTabs();
        }
    }

    /**
     * Attach ViewPager
     * 
     * @param pager
     */
    public void setViewPager(ViewPager pager) {
        mPager = pager;
        mPager.setOnPageChangeListener(this);

        if (mPager != null &amp;&amp; mAdapter != null) {
            initTabs();
        }
    }

    /**
     * Initiate the tabs
     */
    private void initTabs() {

        mContainer.removeAllViews();
        mTabs.clear();

        if (mAdapter == null) {
            return;
        }

        for (int i = 0; i &lt; mPager.getAdapter().getCount(); i++) {

            final int index = i;

            final View tab = mAdapter.getView(i);
            mContainer.addView(tab);

            tab.setFocusable(true);

            mTabs.add(tab);

            if (i != mPager.getAdapter().getCount() - 1) {
                mContainer.addView(getSeparator());
            }

            tab.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    if (mPager.getCurrentItem() == index) {
                        selectTab(index);
                    } else {
                        mPager.setCurrentItem(index, true);
                    }
                }
            });

        }

        selectTab(mPager.getCurrentItem());
    }

    @Override
    public void onPageScrollStateChanged(int state) {
        // Nothing to do
    }

    @Override
    public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
        // Nothing to do
    }

    @Override
    public void onPageSelected(int position) {
        selectTab(position);
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);

        if (changed) {
            selectTab(mPager.getCurrentItem());
        }
    }

    /**
     * @return Separates the tabs
     */
    private View getSeparator() {
        final View v = new View(mContext);

        final LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(mDividerWidth,
                android.view.ViewGroup.LayoutParams.MATCH_PARENT);
        params.setMargins(0, mDividerMarginTop, 0, mDividerMarginBottom);
        v.setLayoutParams(params);

        if (mDividerDrawable != null) {
            v.setBackground(mDividerDrawable);
        } else {
            v.setBackgroundColor(mDividerColor);
        }

        return v;
    }

    /**
     * @param position
     */
    private void selectTab(int position) {

        for (int i = 0, pos = 0; i &lt; mContainer.getChildCount(); i += 2, pos++) {
            final View tab = mContainer.getChildAt(i);
            tab.setSelected(pos == position);
        }

        final View selectedTab = mContainer.getChildAt(position * 2);

        final int w = selectedTab.getMeasuredWidth();
        final int l = selectedTab.getLeft();

        final int x = l - this.getWidth() / 2 + w / 2;

        smoothScrollTo(x, this.getScrollY());
    }
}
</code></pre>

<p><strong>TabAdapter</strong></p>

<pre><code>    public interface TabAdapter {
    public View getView(int position);
}
</code></pre>

<p><strong>Attach your TabAdapter</strong></p>

<pre><code>    public class ScrollingTabsAdapter implements TabAdapter {

    private final FragmentActivity activity;

    private final LayoutInflater inflater;

    private Button mTabs;

    // Tab titles
    private static final String[] mTitles = {
            "RECENT", "ARTISTS", "ALBUMS", "SONGS", "PLAYLISTS", "GENRES"
    };

    /**
     * @param act
     */
    public ScrollingTabsAdapter(FragmentActivity act) {
        activity = act;
        inflater = activity.getLayoutInflater();
    }

    @Override
    public View getView(int position) {
        mTabs = (Button)inflater.inflate(R.layout.tabs, null);
        if (position &lt; mTitles.length) {
            mTabs.setText(mTitles[position]);
        }
        return mTabs;
    }
}
</code></pre>

<p>You can use the default drawables and attributes of the real <code>ActionBar.Tabs</code> to style the <code>Button</code> you inflate. You can grab them from the SDK or probably somewhere on the web. To use it, attach a <code>ViewPager</code> object to the <code>ScrollableTabView</code> and add each of your <code>Fragments</code> in a <code>FragmentPagerAdapter</code>. <a href="http://i.imgur.com/d8sNZ.png" rel="nofollow">This is what they look like, if you're curious about the style after adding the default drawables and attributes</a></p>

<p>As far as dragging and dropping goes, Android has some nice docs on their website. <a href="http://developer.android.com/guide/topics/ui/drag-drop.html" rel="nofollow">Drag and Drop</a></p>

<p>There are also some easy to follow tutorials on the web. <a href="http://www.vogella.com/articles/AndroidDragAndDrop/article.html" rel="nofollow">Android Drag and Drop Tutorial, via Lars Vogel</a> </p>

<p><a href="https://www.google.com/search?sugexp=chrome,mod=12&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=drag+and+drop+views+android&amp;qscrl=1" rel="nofollow">Or you can always simply use Google to find more</a></p>
