<p>Why don't you get MAC address of the device as you've done in iOS? This can be performed in Android devices as well.</p>

<p>I'll give a code snippet that obtains mac address of the device..</p>

<pre><code>import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class HardwareUtil {

    public static String getMacAddress()
    {
        try{
            Process process = Runtime.getRuntime().exec("cat /sys/class/net/eth0/address");
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            int read;
            char[] buffer = new char[4096];
            StringBuffer output = new StringBuffer();
            while ((read = reader.read(buffer)) &gt; 0){
                output.append(buffer, 0, read);
            }
            reader.close();
            process.waitFor();
            String hwaddr = output.toString();
            return hwaddr;
        }catch (IOException e) {
            e.printstacktrace();
        }catch (InterruptedException e){
            e.printstacktrace();
        }
    }

}
</code></pre>

<p><code>HardwareUtil.getMacAddress()</code> will return mac address of the device.</p>

<p><strong>EDIT: If mac address is not appropriate for your situation. Following can be useful!</strong></p>

<pre><code>public static String getDeviceId(Context context) {
    final String deviceId = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
    if (deviceId != null) {
        return deviceId;
    } else {
        return android.os.Build.SERIAL;
    }
}
</code></pre>

<p>Don't forget to add following permission to your <code>AndoridManifest.xml</code> file if you use <code>getDeviceId</code> method.</p>

<pre><code>&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;
</code></pre>
