<p>(1) <code>dataType: 'jsonp'</code> should be <code>json</code>. Get rid of all the the <code>jsonp</code> related stuff. It should be json. jsonp will get automatically changed to a GET request, hence the 405 (method not allowed). Your resource method accepts POST.</p>

<p>(2) Problem with CORS. You need a filter to handle the pre-flight. If you are using Jersey 1, you can use this class</p>

<pre><code>import com.sun.jersey.spi.container.ContainerRequest;
import com.sun.jersey.spi.container.ContainerResponse;
import com.sun.jersey.spi.container.ContainerResponseFilter;

public class CORSFilter implements ContainerResponseFilter {
    @Override
    public ContainerResponse filter(ContainerRequest request,
            ContainerResponse response) {

        response.getHttpHeaders().add("Access-Control-Allow-Origin", "*");
        response.getHttpHeaders().add("Access-Control-Allow-Headers",
                "origin, content-type, accept, authorization");
        response.getHttpHeaders().add("Access-Control-Allow-Credentials", "true");
        response.getHttpHeaders().add("Access-Control-Allow-Methods",
                "GET, POST, PUT, DELETE, OPTIONS, HEAD");

        return response;
    }
}
</code></pre>

<p>Then register it like</p>

<pre><code>resourceConfig.getContainerResponseFilters().add(new CORSFilter());
</code></pre>

<p>With web.xml, add this</p>

<pre><code>&lt;init-param&gt;
  &lt;param-name&gt;com.sun.jersey.spi.container.ContainerResponseFilters&lt;/param-name&gt;
  &lt;param-value&gt;com.yourpackage.CORSFilter&lt;/param-value&gt;
&lt;/init-param&gt;
</code></pre>

<p>inside the <code>&lt;servlet&gt;</code> element that contains the Jersey servlet</p>
