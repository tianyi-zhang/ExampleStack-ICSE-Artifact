<p>You have to do two additional things before you can evaluate XPATH expressions with namespaces.</p>

<ol>
<li>The <code>DocumentBuilderFactory</code> instance is not namespace aware by default. So you have to call <code>setNamespaceAware(true)</code>.</li>
<li>Create your own implementation of the interface <a href="http://docs.oracle.com/javase/7/docs/api/javax/xml/namespace/NamespaceContext.html" rel="nofollow"><code>NamespaceContext</code></a> and pass it to your <code>XPath</code> instance.</li>
</ol>

<p>Here a simple <code>NamespaceContext</code> implementation as a static inner class. Only the <code>getNamespaceURI()</code> method is implemented here. (<em>See this IBM developerWorks article for more details and alternative implementations: <a href="http://www.ibm.com/developerworks/xml/library/x-nmspccontext/index.html?ca=drs-" rel="nofollow">Using the Java language NamespaceContext object with XPath</a>)</em></p>

<pre><code>static class MyNamespaceContext implements NamespaceContext {
  @Override
  public String getNamespaceURI(String prefix) {
    if(prefix == null) {
      throw new IllegalArgumentException();
    } else if(prefix.equals(XMLConstants.DEFAULT_NS_PREFIX)) {
      return XMLConstants.NULL_NS_URI;
    } else if(prefix.equals(XMLConstants.XML_NS_PREFIX)) {
      return XMLConstants.XML_NS_URI;
    } else if(prefix.equals(XMLConstants.XMLNS_ATTRIBUTE)) {
      return XMLConstants.XMLNS_ATTRIBUTE_NS_URI;
    } else if(prefix.equals("m")) {
      return "http://www.somescheme";
    } else if(prefix.equals("doc")) {
      return "http://www.somescheme";
    } else {
      return XMLConstants.NULL_NS_URI;
    }
  }

  @Override
  public String getPrefix(String namespaceURI) {
    throw new UnsupportedOperationException();
  }

  @Override
  public Iterator getPrefixes(String namespaceURI) {
    throw new UnsupportedOperationException();
  }
}
</code></pre>

<p>Here the part with the <code>DocumentBuilderFactory</code>:</p>

<pre><code>DocumentBuilderFactory documentBuilderFactory = 
    DocumentBuilderFactory.newInstance();
documentBuilderFactory.setNamespaceAware(true);
Document doc = documentBuilderFactory.newDocumentBuilder().parse(
    new InputSource("data.xml"));

XPath xpath = XPathFactory.newInstance().newXPath();
xpath.setNamespaceContext(new MyNamespaceContext());
NodeList nodes = (NodeList) xpath.evaluate(
    "//m:parent/doc:header/doc:task/doc:outcome", doc,
    XPathConstants.NODESET);
</code></pre>

<p>The two namespace prefixes are actually linked to the same namespace URI. In fact you can use only one prefix in your XPATH expression like <code>"//doc:parent/doc:header/doc:task/doc:outcome"</code> and you don't need to declare both in your <code>NamespaceContext</code> implementation.</p>
