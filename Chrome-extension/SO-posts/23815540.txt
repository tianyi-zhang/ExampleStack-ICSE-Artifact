<pre><code>public boolean contains(Object o) {
    return map.containsKey(o);
}
</code></pre>

<p>containsKey:</p>

<pre><code>public boolean containsKey(Object key) {
    return getNode(hash(key), key) != null;
}
</code></pre>

<p>getNode:</p>

<pre><code>final Node&lt;K,V&gt; getNode(int hash, Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (first = tab[(n - 1) &amp; hash]) != null) {
        if (first.hash == hash &amp;&amp; // always check first node
            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))
            return first;
        if ((e = first.next) != null) {
            if (first instanceof TreeNode)
                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            do {
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}
</code></pre>

<p>It will not work since <code>equals</code> of <code>arrays</code> will do a <code>==</code> compare, and it will return true only if they point to the same instance.</p>

<p>Your problem could be fixed without work with <code>Arrays.equals</code> (the way to compare two arrays elements and not reference) (could be problematic (at least, for me.) i prefer an easy way)</p>

<p>Since you save <code>X</code> and <code>Y</code> coordinates, just make a class <code>Point</code></p>

<pre><code>public class Point {
    public final int X;
    public final int Y;

    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (obj == this) {
            return true;
        }

        if (obj instanceof Point) {
            Point pObj = (Point) obj;
            return pObj.X == X &amp;&amp; pObj.Y == Y;
        }

        return false;
    }

    @Override
    public int hashCode()
    {
        int result = X;
        result = 31 * result + Y;
        return result;
    }
}
</code></pre>

<p>then use <code>Point</code> class to save <code>X, Y</code> points.</p>

<p>Instead of create your custom point class, you can use the Android <a href="http://developer.android.com/reference/android/graphics/Point.html" rel="nofollow"><code>Point</code></a>.</p>

<p>Example</p>

<pre><code>Set&lt;Point&gt; points = new HashSet&lt;Point&gt;();
points.add(new Point(1, 3));
points.add(new Point(1, 4));

System.out.println(points.contains(new Point(1, 3)));
System.out.println(points.contains(new Point(1, 4)));
System.out.println(points.contains(new Point(1, 5)));
</code></pre>
