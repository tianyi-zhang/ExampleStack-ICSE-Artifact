<p>Here in this method you are actully in the UI thread</p>

<pre><code> @Override
    protected void onPostExecute(String result) {
        ListDrawer();
        pDialog.dismiss();
    }
</code></pre>

<p>And you calling the <code>ListDrawer();</code> method and it's going to do a CPU intensive task, parsing the JSON.
It throws an exception in that method and calls this <code>getActivity().finish();</code> in the catch block. That's why you getting back to your previous activity.
Try parsing your JSON in the <code>AsynckTask</code> and it solves your problem for sure.</p>

<p>Update:</p>

<pre><code>private View rootView;
private ListView lv;
private ArrayAdapter&lt;ProductList&gt; adapter;
private String jsonResult;
private String url = "http://reservations.cretantaxiservices.gr/files/getkafedes.php";
ProgressDialog pDialog;
List&lt;ProductList&gt; customList;
private TextView tv1, tv2;

@Override
public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
    rootView = inflater.inflate(R.layout.activity_coffees_fragment, container, false);
    lv = (ListView)rootView.findViewById(R.id.coffeesListView);
    final SwipeRefreshLayout mSwipeRefreshLayout = (SwipeRefreshLayout) rootView.findViewById(R.id.activity_main_swipe_refresh_layout);
    ConnectivityManager cm = (ConnectivityManager) getActivity().getSystemService(getActivity().getApplicationContext().CONNECTIVITY_SERVICE);
    NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
    boolean network_connected = activeNetwork != null &amp;&amp; activeNetwork.isAvailable() &amp;&amp; activeNetwork.isConnectedOrConnecting();

    if (!network_connected) {
        onDetectNetworkState().show();
    } else {
        if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {
            accessWebService();
            registerCallClickBack();
            mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
                @Override
                public void onRefresh() {
                    accessWebService();
                    mSwipeRefreshLayout.setRefreshing(false);
                }
            });
        }
    }
    return rootView;
}

private AlertDialog onDetectNetworkState() {
    AlertDialog.Builder builder1 = new AlertDialog.Builder(getActivity().getApplicationContext());
    builder1.setMessage(R.string.wifi_off_message)
            .setTitle(R.string.wifi_off_title)
            .setNegativeButton(R.string.cancel,
                    new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog,
                                            int which) {
                            getActivity().finish();
                        }
                    })
            .setPositiveButton(R.string.action_settings,
                    new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface dialog,
                                            int which) {
                            startActivityForResult((new Intent(
                                    Settings.ACTION_WIFI_SETTINGS)), 1);
                            getActivity().finish();
                        }
                    });
    return builder1.create();
}



private void registerCallClickBack() {
    lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
            Toast.makeText(getActivity().getApplicationContext(), "You have chosen " + customList.get(position).getName(), Toast.LENGTH_SHORT).show();
        }
    });
}

@Override
public void onConfigurationChanged(Configuration newConfig) {
    super.onConfigurationChanged(newConfig);
    if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
        if (pDialog.isShowing()) {
            pDialog.show();
        } else {
            pDialog.dismiss();
        }
        if (onDetectNetworkState().isShowing()
                &amp;&amp; onDetectNetworkState() != null) {
            onDetectNetworkState().show();
        } else {
            onDetectNetworkState().dismiss();
        }
    }
    if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {

        if (pDialog.isShowing()) {
            pDialog.show();
        } else {
            pDialog.dismiss();
        }
        if (onDetectNetworkState().isShowing()) {
            onDetectNetworkState().show();
        } else {
            onDetectNetworkState().dismiss();
        }
    }
}
public class JsonReadTask extends AsyncTask&lt;String , Void, List&lt;ProductList&gt;&gt; {
    public JsonReadTask() {
        super();
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        pDialog = new ProgressDialog(getActivity());
        pDialog.setTitle(R.string.waiting);
        pDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        pDialog.setMessage(getString(R.string.get_stocks));
        pDialog.setIndeterminate(true);
        pDialog.setCancelable(false);
        pDialog.setInverseBackgroundForced(true);
        pDialog.show();
    }

    @Override
    protected List&lt;ProductList&gt; doInBackground(String... params) {
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(params[0]);
        try {
            HttpResponse response = httpclient.execute(httppost);
            jsonResult = inputStreamToString(
                    response.getEntity().getContent()).toString();
            customList = new ArrayList&lt;ProductList&gt;();

            JSONObject jsonResponse = new JSONObject(jsonResult);
            JSONArray jsonMainNode = jsonResponse.optJSONArray("kafedes");
            for (int i = 0; i &lt; jsonMainNode.length(); i++) {
                JSONObject jsonChildNode = jsonMainNode.getJSONObject(i);
                String name = jsonChildNode.optString("name");
                String price = jsonChildNode.optString("price");
                String image = jsonChildNode.optString("image");
                customList.add(new ProductList(image, name, price));

            }
            return customList;
        } catch (Exception e) {
            e.printStackTrace();
            getActivity().finish();
        }
        return null;
    }

    private StringBuilder inputStreamToString(InputStream is) {
        String rLine = "";
        StringBuilder answer = new StringBuilder();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        try {
            while ((rLine = rd.readLine()) != null) {
                answer.append(rLine);
            }
        } catch (Exception e) {
            getActivity().finish();
        }
        return answer;
    }

    @Override
    protected void onPostExecute(List&lt;ProductList&gt; customList) {
        if(customList == null){
            Log.d("ERORR", "No result to show.");
            return;
        }
        ListDrawer(customList);
        pDialog.dismiss();
    }
}// end async task

public void accessWebService() {
    JsonReadTask task = new JsonReadTask();
    task.execute(new String[]{url});
}

public void ListDrawer(List&lt;ProductList&gt; customList) {

    adapter = new ProductListAdapter(getActivity().getApplicationContext(), R.layout.list_item, customList);
    adapter.notifyDataSetChanged();
    lv.setAdapter(adapter);
}
</code></pre>
