<p>I've looked at the given answers, but a lot of them are more complicated than needed or remove map elements when several keys have same value.</p>

<p>Here is a solution that I think fits better:</p>

<pre><code>public static &lt;K, V extends Comparable&lt;V&gt;&gt; Map&lt;K, V&gt; sortByValues(final Map&lt;K, V&gt; map) {
    Comparator&lt;K&gt; valueComparator =  new Comparator&lt;K&gt;() {
        public int compare(K k1, K k2) {
            int compare = map.get(k2).compareTo(map.get(k1));
            if (compare == 0) return 1;
            else return compare;
        }
    };
    Map&lt;K, V&gt; sortedByValues = new TreeMap&lt;K, V&gt;(valueComparator);
    sortedByValues.putAll(map);
    return sortedByValues;
}
</code></pre>

<p>Note that the map is sorted from the highest value to the lowest.</p>
