<p>use this ImageLoader Class</p>

<pre><code> public class ImageLoader {
MemoryCache memoryCache = new MemoryCache();
FileCache fileCache;
private Map&lt;ImageView, String&gt; imageViews = Collections
        .synchronizedMap(new WeakHashMap&lt;ImageView, String&gt;());
ExecutorService executorService;
Handler handler = new Handler();// handler to display images in UI thread
int stub_id;
int widht;

public ImageLoader(Context context, int stub_idx) {
    fileCache = new FileCache(context);
    executorService = Executors.newFixedThreadPool(5);

    stub_id = stub_idx;
}

public void DisplayImage(String url, ImageView imageView, int widht, ProgressBar bar) {
    this.widht = widht;

    imageViews.put(imageView, url);
    Bitmap bitmap = memoryCache.get(url);
    if (bitmap != null)
    {
        bar.setVisibility(View.GONE);
        imageView.setImageBitmap(bitmap);
    }
    else {
        queuePhoto(url, imageView, widht, bar);
        imageView.setImageResource(stub_id);
    }
}

private void queuePhoto(String url, ImageView imageView, int w, ProgressBar bar) {
    PhotoToLoad p = new PhotoToLoad(url, imageView, bar);
    executorService.submit(new PhotosLoader(p, w));
}

public  Bitmap getBitmap(String url, int w) {
    File f = fileCache.getFile(url);

    // from SD cache
    Bitmap b = decodeFile(f, w);
    if (b != null)
        return b;

    // from web
    try {
        Bitmap bitmap = null;
        URL imageUrl = new URL(url);
        HttpURLConnection conn = (HttpURLConnection) imageUrl
                .openConnection();
        conn.setConnectTimeout(30000);
        conn.setReadTimeout(30000);
        conn.setInstanceFollowRedirects(true);
        InputStream is = conn.getInputStream();
        OutputStream os = new FileOutputStream(f);
        Utils.CopyStream(is, os);
        os.close();
        conn.disconnect();
        bitmap = decodeFile(f, w);
        return bitmap;
    } catch (Throwable ex) {
        ex.printStackTrace();
        if (ex instanceof OutOfMemoryError)
            memoryCache.clear();
        return null;
    }
}

// decodes image and scales it to reduce memory consumption
private Bitmap decodeFile(File f, int w) {
    try {
        // decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        FileInputStream stream1 = new FileInputStream(f);
        BitmapFactory.decodeStream(stream1, null, o);
        stream1.close();
        // Find the correct scale value. It should be the power of 2.
        final int REQUIRED_SIZE = w;
        System.out.println("screen wdth " + widht);
        int width_tmp = o.outWidth, height_tmp = o.outHeight;
        System.out.println("image with === " + width_tmp);
        int scale = 1;
        while (true) {
            if (width_tmp / 2 &lt; REQUIRED_SIZE
                    || height_tmp / 2 &lt; REQUIRED_SIZE)
                break;
            width_tmp /= 2;
            height_tmp /= 2;
            scale *= 2;
        }

        // decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        FileInputStream stream2 = new FileInputStream(f);
        Bitmap bitmap = BitmapFactory.decodeStream(stream2, null, o2);
        stream2.close();
        return bitmap;
    }
    catch (FileNotFoundException e) {
        Log.e(e.getMessage(), "");
    } catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}

// Task for the queue
private class PhotoToLoad {
    public String url;
    public ImageView imageView;
    public ProgressBar bar;

    public PhotoToLoad(String u, ImageView i, ProgressBar progressBar) {
        url = u;
        imageView = i;
        bar = progressBar;
    }
}

class PhotosLoader implements Runnable {
    PhotoToLoad photoToLoad;
    int w;

    PhotosLoader(PhotoToLoad photoToLoad, int w) {
        this.photoToLoad = photoToLoad;
        this.w = w;

    }

    @Override
    public void run() {
        try {
            if (imageViewReused(photoToLoad))
                return;
            Bitmap bmp = getBitmap(photoToLoad.url, w);
            memoryCache.put(photoToLoad.url, bmp);
            if (imageViewReused(photoToLoad))
                return;
            BitmapDisplayer bd = new BitmapDisplayer(bmp, photoToLoad);
            handler.post(bd);
        } catch (Throwable th) {
            th.printStackTrace();
        }
    }
}

boolean imageViewReused(PhotoToLoad photoToLoad) {
    String tag = imageViews.get(photoToLoad.imageView);
    return tag == null || !tag.equals(photoToLoad.url);
}

// Used to display bitmap in the UI thread
class BitmapDisplayer implements Runnable {
    Bitmap bitmap;
    PhotoToLoad photoToLoad;

    public BitmapDisplayer(Bitmap b, PhotoToLoad p) {
        bitmap = b;
        photoToLoad = p;
    }

    public void run() {
        if (imageViewReused(photoToLoad))
            return;
        if (bitmap != null)
            photoToLoad.imageView.setImageBitmap(bitmap);
        else
            photoToLoad.imageView.setImageResource(stub_id);

        photoToLoad.bar.setVisibility(View.GONE);
    }
}

public void clearCache() {
    memoryCache.clear();
    fileCache.clear();
}
</code></pre>

<p>Then make new class for File cache</p>

<pre><code>public class FileCache {

private File cacheDir;

public FileCache(Context context) {
    // Find the dir to save cached images
    if (android.os.Environment.getExternalStorageState().equals(
            android.os.Environment.MEDIA_MOUNTED))
        cacheDir = new File(
                android.os.Environment.getExternalStorageDirectory(),
                "LazyList");
    else
        //cacheDir = url.getCacheDir();
    if (!cacheDir.exists())
        cacheDir.mkdirs();
}

public File getFile(String url) {
    // I identify images by hashcode. Not a perfect solution, good for the
    // demo.
    String filename = String.valueOf(url.hashCode());
    // Another possible solution (thanks to grantland)
    // String filename = URLEncoder.encode(url);
    File f = new File(cacheDir, filename);
    return f;

}

public void clear() {
    File[] files = cacheDir.listFiles();
    if (files == null)
        return;
    for (File f : files)
        f.delete();
}

}
</code></pre>

<p>Then last make Memory cache class , all three seperatly class</p>

<pre><code>public class MemoryCache {

private static final String TAG = "MemoryCache";
private Map&lt;String, Bitmap&gt; cache=Collections.synchronizedMap(
        new LinkedHashMap&lt;String, Bitmap&gt;(10,1.5f,true));//Last argument true for LRU ordering
private long size=0;//current allocated size
private long limit=1000000;//max memory in bytes

public MemoryCache(){
    //use 25% of available heap size
    setLimit(Runtime.getRuntime().maxMemory()/4);
}

public void setLimit(long new_limit){
    limit=new_limit;
    Log.i(TAG, "MemoryCache will use up to "+limit/1024./1024.+"MB");
}

public Bitmap get(String id){
    try{
        if(!cache.containsKey(id))
            return null;
        //NullPointerException sometimes happen here http://code.google.com/p/osmdroid/issues/detail?id=78 
      return cache.get(id);
    }catch(NullPointerException ex){
        ex.printStackTrace();
        return null;
    }
}

public void put(String id, Bitmap bitmap){
    try{
        if(cache.containsKey(id))
            size-=getSizeInBytes(cache.get(id));
        cache.put(id, bitmap);
        size+=getSizeInBytes(bitmap);
        checkSize();
    }catch(Throwable th){
        th.printStackTrace();
    }
}

private void checkSize() {
    Log.i(TAG, "cache size="+size+" length="+cache.size());
    if(size&gt;limit){
        Iterator&lt;Entry&lt;String, Bitmap&gt;&gt; iter=cache.entrySet().iterator();//least recently accessed item will be the first one iterated  
        while(iter.hasNext()){
            Entry&lt;String, Bitmap&gt; entry=iter.next();
            size-=getSizeInBytes(entry.getValue());
            iter.remove();
            if(size&lt;=limit)
                break;
        }
        Log.i(TAG, "Clean cache. New size "+cache.size());
    }
}

public void clear() {
    try{
        //NullPointerException sometimes happen here http://code.google.com/p/osmdroid/issues/detail?id=78 
        cache.clear();
        size=0;
    }catch(NullPointerException ex){
        ex.printStackTrace();
    }
}

long getSizeInBytes(Bitmap bitmap) {
    if(bitmap==null)
        return 0;
    return bitmap.getRowBytes() * bitmap.getHeight();
}
</code></pre>
