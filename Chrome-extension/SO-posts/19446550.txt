<p>Just wanted to point out that using the method getRGB(x,y) is extremely inefficient. If you want to get the pixels of an image you could extract the colours from each individual pixel and then store the pixel in an int array. Credit also to mota for explaining why this is inefficient <a href="http://stackoverflow.com/questions/6524196/java-get-pixel-array-from-image">see his post</a> . Example below:</p>

<pre><code>/**===============================================================================================
     * Method that extracts pixel data from an image 
     * @return a 2d array representing the pixels of the image
    =================================================================================================*/
    public static int[][] getImageData(BufferedImage img) {
            int height = img.getHeight();
            int width = img.getWidth();
            final byte[] imgPixels = ((DataBufferByte) img.getRaster().getDataBuffer()).getData();
            final boolean is_Alpha_Present = img.getAlphaRaster() != null;
            int[][] imgArr = new int[height][width];

            if (is_Alpha_Present) {
                    final int pixelLength = 4; //number of bytes used to represent a pixel if alpha value present
                    for (int pixel = 0, row = 0, col = 0; pixel &lt; imgPixels.length; pixel = pixel + pixelLength) {
                            int argb = 0;
                            argb += (((int) imgPixels[pixel] &amp; 0xff) &lt;&lt; 24); //getting the alpha for the pixel
                            argb += ((int) imgPixels[pixel + 1] &amp; 0xff); //getting the blue colour
                            argb += (((int) imgPixels[pixel + 2] &amp; 0xff) &lt;&lt; 8); //getting the green colour
                            argb += (((int) imgPixels[pixel + 3] &amp; 0xff) &lt;&lt; 16); //getting the red colour
                            imgArr[row][col] = argb;
                            col++;
                            if (col == width) {
                                    col = 0;
                                    row++;
                            }
                    }
            }
            else {
                    final int pixelLength = 3;
                    for (int pixel = 0, row = 0, col = 0; pixel &lt; imgPixels.length; pixel = pixel + pixelLength) {
                            int argb = 0;
                            argb += Integer.MIN_VALUE;
                            argb += ((int) imgPixels[pixel] &amp; 0xff); //getting the blue colour
                            argb += (((int) imgPixels[pixel+1] &amp; 0xff) &lt;&lt; 8); //getting the green colour
                            argb += (((int) imgPixels[pixel+2] &amp; 0xff) &lt;&lt; 16); //getting the red colour
                            imgArr[row][col] = argb;
                            col++;
                            if (col == width) {
                                    col = 0;
                                    row++;
                            }       
                    }
            }
            return imgArr;
    }
</code></pre>
