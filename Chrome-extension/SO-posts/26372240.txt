<p>This is my solution to the problem in in O(n^2) complexity. The idea is mostly the same as the one in the book, but I believe my solution is more readable and easier to understand the algorithm itself from it:</p>

<pre><code>private static void removeDuplicates(char[] str) {
        if (str == null || str.length &lt; 2) {
            return;
        }

        int tail = 0;

        for (int i = 0; i &lt; str.length; i++) {
            boolean found = false;

            // check if character is already present in
            // the part of the array before the current char
            for (int j = 0; j &lt; i; j++) {
                if (str[j] == str[i]) {
                    found = true;
                    break;
                }
            }

            // if char is already present
            // skip this one and do not copy it
            if (found) {
                continue;
            }

            // copy the current char to the index 
            // after the last known unique char in the array
            str[tail] = str[i];
            tail++;
        }

        str[tail] = '\0';
    }
</code></pre>
