<p>You actually <B>can</B> read and write Files using a ContentProvider.</p>

<p>To support this in your own ContentProvider you'll have to include your supported File MIME types in the <I>getStreamTypes()</I> method. Check the MIME types section of the Android <a href="https://developer.android.com/guide/topics/providers/content-provider-creating.html#FileMIMETypes" rel="nofollow">ContentProvider tutorial here for more info</a>.</p>

<p>You will also need to implement the <I><a href="https://developer.android.com/reference/android/content/ContentProvider.html#openFile%28android.net.Uri,%20java.lang.String%29" rel="nofollow">openFile(Uri uri, String mode) method</a></I> which is where you'll actually choose the File directory and name based on the Uri provided to the ContentResolver. Here's a sample implementation of that method:</p>

<pre><code>  @Override
  public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {
      File root = getContext().getFilesDir();
      File path = new File(root, uri.getEncodedPath());
      path.mkdirs();
      File file = new File(path, "file_"+uri.getLastPathSegment());

      int imode = 0;
      if (mode.contains("w")) {
        imode |= ParcelFileDescriptor.MODE_WRITE_ONLY;
        if (!file.exists()) {
          try {
            file.createNewFile();
          } catch (IOException e) {
            e.printStackTrace();
          }
        }
      }
      if (mode.contains("r"))
        imode |= ParcelFileDescriptor.MODE_READ_ONLY;
      if (mode.contains("+"))
        imode |= ParcelFileDescriptor.MODE_APPEND;

      return ParcelFileDescriptor.open(file, imode);
  }
</code></pre>

<p>You can use whatever logic you'd like here to choose your File directory. This code just uses the applications files directory, but for the purposes of Bitmap caching this should probably use a temp cache directory.</p>

<p>Finally, your code to access the ContentProvider file data should look something like this:</p>

<pre><code>ContentResolver cr = getContext().getContentResolver();
InputStream inputStream = cr.openInputStream(uri);
</code></pre>

<p>Alternatively you'd use <I>ContentResolver.openOutputStream(uri)</I> to write your file data to the ContentProvider. </p>

<p>The Bitmap caching tutorial would require a fair bit of modifications to use a ContentProvider as the Disk cache, but I do believe this is what that note was referring to.</p>
