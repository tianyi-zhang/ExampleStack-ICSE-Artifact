<p>I ended up piecing together code snippets and getting something that worked.  I had to send the image in a multipart entity: </p>

<pre><code>public class uploadImage extends AsyncTask&lt;Object, Void, HttpEntity&gt;{

        @Override
        protected HttpEntity doInBackground(Object... params){
            DefaultHttpClient client = new DefaultHttpClient();
            String url= IMAGE_URL+"?auth_token=" + auth_token;
            Log.d(TAG, "image_url: " + url);
            HttpPost post = new HttpPost(url);
            MultipartEntity imageMPentity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);

            try{                
                imageMPentity.addPart("project_id", new StringBody(projectID));
                imageMPentity.addPart("step_id", new StringBody(stepID));
                imageMPentity.addPart("content_type", new StringBody("image/jpeg"));
                imageMPentity.addPart("filename", new StringBody(filename));
                imageMPentity.addPart("imagePath", new FileBody(new File(filepath)));       

                post.setEntity(imageMPentity);                

            } catch(Exception e){
                Log.e(StepActivity.class.getName(), e.getLocalizedMessage(), e);
            }
            HttpResponse response = null;

            try {
                response = client.execute(post);
            } catch (ClientProtocolException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            HttpEntity result = response.getEntity();
            return result;
        }

        protected void onPostExecute(HttpEntity result){
            if(result !=null){
              // add whatever you want it to do next here
           }
        }     
    }
</code></pre>

<p>The asynctask requires a filepath and filename.  In my app, I allowed users to pick images from the gallery.  I then retrieve the filepath and filename like this:</p>

<pre><code>@Override
// user selects image from gallery
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        super.onActivityResult(requestCode, resultCode, data);

        if(requestCode == RESULT_LOAD_IMAGE &amp;&amp; resultCode == RESULT_OK &amp;&amp; null != data){
            Uri selectedImage = data.getData();
            String[] filePathColumn = {MediaStore.Images.Media.DATA};

            Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);
            cursor.moveToFirst();

            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            Log.d(TAG, "picturePath: " + picturePath);
            filepath = picturePath;
            filename = Uri.parse(cursor.getString(columnIndex)).getLastPathSegment().toString();
            Log.d(TAG, "filename: " + filename);

            cursor.close();

            // add the image to the view
            addedImage.setImageBitmap(BitmapFactory.decodeFile(picturePath));

        }
    }
</code></pre>

<p>Hope that helps!</p>
