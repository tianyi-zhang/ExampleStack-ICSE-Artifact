<p>Why not use <code>implement Filterable</code>? 
Try something like this:</p>

<p>Make your adapter class look like this:</p>

<pre><code>public class CompanyListAdapter extends ArrayAdapter&lt;Company&gt; implements Filterable {

    private List&lt;Company&gt; companies;
    private List&lt;Company&gt; filteredCompanies;
    private CompanyFilter mFilter = new CompanyFilter();

    private Context context;
    SharedPreference sharedPreference;

    public CompanyListAdapter(Context context, ArrayList&lt;Company&gt; products) {
        super(context, R.layout.company_list_item, products);
        this.context = context;
        this.products = products;
        this.filteredCompanies = products;
        sharedPreference = new SharedPreference();
    }

    @Override
    public int getCount() {
        return filteredCompanies == null 0 : filteredCompanies.size();
    }

    @Override
    public Company getItem(int position) {
        return filteredCompanies.get(position);
    }

    @Override
        public Filter getFilter() {
        return mFilter;
    }
}
</code></pre>

<p>Next go ahead and create a CompanyFilter:</p>

<pre><code>private class CompanyFilter extends Filter {
    @Override
    protected FilterResults performFiltering(CharSequence constraint) {

        String filterString = constraint.toString().toLowerCase();
        FilterResults results = new FilterResults();

        final List&lt;Company&gt; list = companies;

        int count = list.size();
        final ArrayList&lt;Company&gt; nlist = new ArrayList&lt;Company&gt;(count);

        Company filterableCompany;

        for (int i = 0; i &lt; count; i++) {
            filterableCompany = list.get(i);
            if (filterableCompany.getName().toLowerCase().contains(filterString)) {
                nlist.add(filterableCompany);
            }
        }

        results.values = nlist;
        results.count = nlist.size();

        return results;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        filteredCompanies = (ArrayList&lt;Company&gt;) results.values;
        notifyDataSetChanged();
    }
}
</code></pre>

<p>This way you get to apply your filter to any number of fields. Note I am using the <code>getName()</code> of the company class to apply the filter in my example.</p>

<p>EDIT:
TO use this in an <code>Activity</code> / <code>Fragment</code> for searching you can add a <code>TextWatcher</code> to your <code>EditText</code> and apply the filter <code>onTextChanged</code>. Something like this:</p>

<pre><code>txtSearch.addTextChangedListener(new TextWatcher() {

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {
        adapter.getFilter().filter(s.toString());
    }
});
</code></pre>
