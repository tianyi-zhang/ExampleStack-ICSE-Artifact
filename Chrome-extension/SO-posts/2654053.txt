<p>You can use the getters of <a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html"><code>java.time.LocalDateTime</code></a> for that.</p>

<pre><code>LocalDateTime now = LocalDateTime.now();
int year = now.getYear();
int month = now.getMonthValue();
int day = now.getDayOfMonth();
int hour = now.getHour();
int minute = now.getMinute();
int second = now.getSecond();
int millis = now.get(ChronoField.MILLI_OF_SECOND); // Note: no direct getter available.

System.out.printf("%d-%02d-%02d %02d:%02d:%02d.%03d", year, month, day, hour, minute, second, millis);
</code></pre>

<p>Or, when you're not on Java 8 yet, make use of <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Calendar.html"><code>java.util.Calendar</code></a>.</p>

<pre><code>Calendar now = Calendar.getInstance();
int year = now.get(Calendar.YEAR);
int month = now.get(Calendar.MONTH) + 1; // Note: zero based!
int day = now.get(Calendar.DAY_OF_MONTH);
int hour = now.get(Calendar.HOUR_OF_DAY);
int minute = now.get(Calendar.MINUTE);
int second = now.get(Calendar.SECOND);
int millis = now.get(Calendar.MILLISECOND);

System.out.printf("%d-%02d-%02d %02d:%02d:%02d.%03d", year, month, day, hour, minute, second, millis);
</code></pre>

<p>Either way, this prints as of now:</p>

<pre>
2010-04-16 15:15:17.816
</pre>

<p>To convert an <code>int</code> to <code>String</code>, make use of <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#valueOf-int-"><code>String#valueOf()</code></a>.</p>

<hr>

<p>If your intent is <em>after all</em> to arrange and display them in a human friendly string format, then better use either Java8's <a href="https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html"><code>java.time.format.DateTimeFormatter</code></a> (<a href="https://docs.oracle.com/javase/tutorial/datetime/iso/format.html">tutorial here</a>),</p>

<pre><code>LocalDateTime now = LocalDateTime.now();
String format1 = now.format(DateTimeFormatter.ISO_DATE_TIME);
String format2 = now.atZone(ZoneId.of("GMT")).format(DateTimeFormatter.RFC_1123_DATE_TIME);
String format3 = now.format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss", Locale.ENGLISH));

System.out.println(format1);
System.out.println(format2);
System.out.println(format3);
</code></pre>

<p>or when you're not on Java 8 yet, use <a href="http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"><code>java.text.SimpleDateFormat</code></a>:</p>

<pre><code>Date now = new Date(); // java.util.Date, NOT java.sql.Date or java.sql.Timestamp!
String format1 = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS", Locale.ENGLISH).format(now);
String format2 = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z", Locale.ENGLISH).format(now);
String format3 = new SimpleDateFormat("yyyyMMddHHmmss", Locale.ENGLISH).format(now);

System.out.println(format1);
System.out.println(format2);
System.out.println(format3);
</code></pre>

<p>Either way, this yields:</p>

<pre>
2010-04-16T15:15:17.816
Fri, 16 Apr 2010 15:15:17 GMT
20100416151517
</pre>

<h3>See also:</h3>

<ul>
<li><a href="http://stackoverflow.com/questions/4216745/java-string-to-date-conversion/">Java string to date conversion</a></li>
</ul>
