<p>Since the answers to this question are fairly dated, here is a more modern solution relying on ValueAnimators.
This solution implements a true, visually appealing 3D-flip, because it not just flips the view, but also scales it while it is flipping (this is how Apple does it).</p>

<p>First we set up the ValueAnimator:</p>

<pre><code>mFlipAnimator = ValueAnimator.ofFloat(0f, 1f);
mFlipAnimator.addUpdateListener(new FlipListener(frontView, backView));
</code></pre>

<p>And the corresponding update listener:</p>

<pre><code>public class FlipListener implements ValueAnimator.AnimatorUpdateListener {

    private final View mFrontView;
    private final View mBackView;
    private boolean mFlipped;

    public FlipListener(final View front, final View back) {
        this.mFrontView = front;
        this.mBackView = back;
        this.mBackView.setVisibility(View.GONE);
    }

    @Override
    public void onAnimationUpdate(final ValueAnimator animation) {
        final float value = animation.getAnimatedFraction();
        final float scaleValue = 0.625f + (1.5f * (value - 0.5f) * (value - 0.5f));

        if(value &lt;= 0.5f){
            this.mFrontView.setRotationY(180 * value);
            this.mFrontView.setScaleX(scaleValue);
            this.mFrontView.setScaleY(scaleValue);
            if(mFlipped){
                setStateFlipped(false);
            }
        } else {
            this.mBackView.setRotationY(-180 * (1f- value));
            this.mBackView.setScaleX(scaleValue);
            this.mBackView.setScaleY(scaleValue);
            if(!mFlipped){
                setStateFlipped(true);
            }
        }
    }

    private void setStateFlipped(boolean flipped) {
        mFlipped = flipped;
        this.mFrontView.setVisibility(flipped ? View.GONE : View.VISIBLE);
        this.mBackView.setVisibility(flipped ? View.VISIBLE : View.GONE);
    }
}
</code></pre>

<p><strong>That's it!</strong></p>

<p>After this setup you can flip the views by calling</p>

<pre><code>mFlipAnimator.start();
</code></pre>

<p>and reverse the flip by calling</p>

<pre><code>mFlipAnimator.reverse();
</code></pre>

<p>If you want to check if the view is flipped, implement and call this function:</p>

<pre><code>private boolean isFlipped() {
    return mFlipAnimator.getAnimatedFraction() == 1;
}
</code></pre>

<p>You can also check if the view is currently flipping by implementing this method:</p>

<pre><code>private boolean isFlipping() {
    final float currentValue = mFlipAnimator.getAnimatedFraction();
    return (currentValue &lt; 1 &amp;&amp; currentValue &gt; 0);
}
</code></pre>

<p>You can combine the above functions to implement a nice function to toggle the flip, depending on if it is flipped or not:</p>

<pre><code>private void toggleFlip() {
    if(isFlipped()){
        mFlipAnimator.reverse();
    } else {
        mFlipAnimator.start();
    }
}
</code></pre>

<p>That's it! Simple and easy. Enjoy!</p>
