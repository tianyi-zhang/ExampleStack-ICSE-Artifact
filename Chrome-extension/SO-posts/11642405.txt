<p>It looks like you have to implement your own <a href="http://developer.android.com/reference/android/widget/Filter.html" rel="nofollow">Filter</a> class. You then have to implement a ListAdapter (that wraps your list of strings) which also implements the <a href="http://developer.android.com/reference/android/widget/Filterable.html" rel="nofollow">Filterable</a> interface; this subclass should return your custom Filter when getFilter is called. You pass your custom ListAdapter/Filterable into an AutoCompleteTextView via the setAdapter() method. (An easy way to do all this is to subclass Android's ArrayAdapter.)</p>

<p>Here's the <a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/widget/ArrayAdapter.java" rel="nofollow">source code</a> for the ArrayAdapter. Find the definition of the ArrayFilter (at the bottom) and modify it to your needs. The following code is the ArrayFilter with a modification you might be looking for. You'll have to study the effects of <code>mLock</code>, <code>mObjects</code>, and <code>mOriginalValues</code> before applying to your own Adapter subclass.</p>

<pre><code>private class ArrayFilter extends Filter {
    @Override
    protected FilterResults performFiltering(CharSequence prefix) {
        FilterResults results = new FilterResults();

        if (mOriginalValues == null) {
            synchronized (mLock) {
                mOriginalValues = new ArrayList&lt;T&gt;(mObjects);
            }
        }

        if (prefix == null || prefix.length() == 0) {
            ArrayList&lt;T&gt; list;
            synchronized (mLock) {
                list = new ArrayList&lt;T&gt;(mOriginalValues);
            }
            results.values = list;
            results.count = list.size();
        } else {
            String prefixString = prefix.toString().toLowerCase();

            ArrayList&lt;T&gt; values;
            synchronized (mLock) {
                values = new ArrayList&lt;T&gt;(mOriginalValues);
            }

            final int count = values.size();
            final ArrayList&lt;T&gt; newValues = new ArrayList&lt;T&gt;();
            for (int i = 0; i &lt; count; i++) {
                final T value = values.get(i);
                final String valueText = value.toString().toLowerCase();

                if (valueText.contains(prefixString)) {
                    newValues.add(value);
                }
            }

            results.values = newValues;
            results.count = newValues.size();
        }

        return results;
    }

    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        //noinspection unchecked
        mObjects = (List&lt;T&gt;) results.values;
        if (results.count &gt; 0) {
            notifyDataSetChanged();
        } else {
            notifyDataSetInvalidated();
        }
    }
}
</code></pre>
