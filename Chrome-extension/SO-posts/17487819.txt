<p>make a layout like</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="fill_parent"
android:layout_height="wrap_content"
android:orientation="horizontal"
android:padding="8dp" &gt;


&lt;TextView

    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:textSize="18sp"
  /&gt;


&lt;CheckBox

    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
   /&gt;



  &lt;/LinearLayout &gt;
</code></pre>

<p>use it in custom adapter
Custom Adapter: </p>

<pre><code>    public class AttendeeAdapter extends ArrayAdapter&lt;String&gt; {

private LayoutInflater inflator = null;
private ArrayList&lt;String&gt; attendeeList = null;

public AttendeeAdapter(Context context, int resource,
        List&lt;String&gt; objects) {
    super(context, resource, objects);

    attendeeList = (ArrayList&lt;String&gt;) objects;
    inflator = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder holder = null;
    if(convertView == null) {
        convertView = inflator.inflate(R.layout.client_row, null);
        holder = new ViewHolder();
        convertView.setTag(holder);
        holder.txtViewName = (TextView) convertView.findViewById(R.id.txtViewClientName);
    } else {
        holder = (ViewHolder) convertView.getTag();
    }

    String attendee = attendeeList.get(position);

    holder.txtViewName.setText("name");
    return  convertView;
}

private static class ViewHolder {
    public TextView txtViewName = null;
            public CheckBox check= null;
}

 }
</code></pre>

<p>R.layout.client_row is custom layout which contains textview and check box</p>
