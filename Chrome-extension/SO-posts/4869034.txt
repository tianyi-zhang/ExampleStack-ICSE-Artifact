<p>See the new accepted answer for a much cleaner approach! This was working, but not really the clean way of doing it.</p>

<hr>

<p>Damn it, it got me several hours, but it finally works.</p>

<p>The solution is the undocumented call <a href="http://developer.android.com/reference/android/preference/PreferenceScreen.html#onItemClick%28android.widget.AdapterView,%20android.view.View,%20int,%20long%29"><code>public void onItemClick (...)</code></a>. It takes several arguments, and as pointed out by <a href="http://stackoverflow.com/questions/2870851/how-to-open-a-nested-child-preferencescreen-in-android">this question</a> it can be used to simulate a click according to the index of the element you want to call.</p>

<p>My problem was the item I want to call is deeply nested in an XML-structure. But the solution is very easy: add a <code>key</code>  to the <code>PreferenceScreen</code> the item you want to open is in:</p>

<pre><code>&lt;PreferenceScreen
    android:key="pref_key"
    ....
    /&gt;
    &lt;ListPreference android:key="abc"
        android:title="@string/abc"
        android:summary="@string/cde"
        android:persistent="true"/&gt;

&lt;/PreferenceScreen&gt;
</code></pre>

<p>And the you can just to the following:</p>

<pre><code>// the preference screen your item is in must be known
PreferenceScreen screen = (PreferenceScreen) findPreference("pref_key");

// the position of your item inside the preference screen above
int pos = findPreference("abc").getOrder();

// simulate a click / call it!!
screen.onItemClick( null, null, pos, 0 ); 
</code></pre>

<p>And the Dialog pops up!</p>

<p>It would be nice to get the <code>PreferenceScreen</code> a <code>Preference</code> is in (so you would not have to know where your <code>Preference</code> is in), because moving the preference/changing the XML could break the automatic dialog silently and might not get noticed (if not tested).</p>

<p>For this I wrote a function which will search through all preferences and return the <code>PreferenceScreen</code> your preference is on, so you don't need to have your PreferenceScreen a key!</p>

<pre><code>private PreferenceScreen findPreferenceScreenForPreference( String key, PreferenceScreen screen ) {
    if( screen == null ) {
        screen = getPreferenceScreen();
    }

    PreferenceScreen result = null;

    android.widget.Adapter ada = screen.getRootAdapter();
    for( int i = 0; i &lt; ada.getCount(); i++ ) {
        String prefKey = ((Preference)ada.getItem(i)).getKey();
        if( prefKey != null &amp;&amp; prefKey.equals( key ) ) {
            return screen;
        }
        if( ada.getItem(i).getClass().equals(android.preference.PreferenceScreen.class) ) {
            result = findPreferenceScreenForPreference( key, (PreferenceScreen) ada.getItem(i) );
            if( result != null ) {
                return result;
            }
        }
    }

    return null;
}

private void openPreference( String key ) {
    PreferenceScreen screen = findPreferenceScreenForPreference( key, null );
    if( screen != null ) {
        screen.onItemClick(null, null, findPreference(key).getOrder(), 0);
    }
}

// With this, you can call your `Preference` like this from code, you do
// not even have to give your PreferenceScreen a key!
openPreference( "abc" );
</code></pre>
