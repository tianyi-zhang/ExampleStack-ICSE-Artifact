<p>this is one example That I had implemented. 
in which galleryview is not there but its having same pagination and also clicking on image is working. With that zooming of image is also working. you just need to integrate your galleryView.</p>

<p>TouchImageView.class</p>

<pre><code>import android.content.Context;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.ScaleGestureDetector;
import android.view.View;
import android.widget.ImageView;



public class TouchImageView extends ImageView {

Matrix matrix;

// We can be in one of these 3 states
static final int NONE = 0;
static final int DRAG = 1;
static final int ZOOM = 2;
int mode = NONE;

// Remember some things for zooming
PointF last = new PointF();
PointF start = new PointF();
float minScale = 1f;
float maxScale = 3f;
float[] m;

int viewWidth, viewHeight;
static final int CLICK = 3;
float saveScale = 1f;
protected float origWidth, origHeight;
int oldMeasuredWidth, oldMeasuredHeight;

ScaleGestureDetector mScaleDetector;

Context context;

public TouchImageView(Context context) {
    super(context);
    sharedConstructing(context);
}

public TouchImageView(Context context, AttributeSet attrs) {
    super(context, attrs);
    sharedConstructing(context);
}

private void sharedConstructing(Context context) {
    super.setClickable(true);
    this.context = context;
    mScaleDetector = new ScaleGestureDetector(context, new ScaleListener());
    matrix = new Matrix();
    m = new float[9];
    setImageMatrix(matrix);
    setScaleType(ScaleType.MATRIX);

    setOnTouchListener(new OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            mScaleDetector.onTouchEvent(event);
            PointF curr = new PointF(event.getX(), event.getY());

            switch (event.getAction()) {
            case MotionEvent.ACTION_DOWN:
                last.set(curr);
                start.set(last);
                mode = DRAG;
                break;

            case MotionEvent.ACTION_MOVE:
                if (mode == DRAG) {
                    float deltaX = curr.x - last.x;
                    float deltaY = curr.y - last.y;
                    float fixTransX = getFixDragTrans(deltaX, viewWidth,
                            origWidth * saveScale);
                    float fixTransY = getFixDragTrans(deltaY, viewHeight,
                            origHeight * saveScale);
                    matrix.postTranslate(fixTransX, fixTransY);
                    fixTrans();
                    last.set(curr.x, curr.y);
                }
                break;

            case MotionEvent.ACTION_UP:
                mode = NONE;
                int xDiff = (int) Math.abs(curr.x - start.x);
                int yDiff = (int) Math.abs(curr.y - start.y);
                if (xDiff &lt; CLICK &amp;&amp; yDiff &lt; CLICK)
                    performClick();
                break;

            case MotionEvent.ACTION_POINTER_UP:
                mode = NONE;
                break;
            }

            setImageMatrix(matrix);
            invalidate();
            return true; // indicate event was handled
        }

    });
}

public void setMaxZoom(float x) {
    maxScale = x;
}

private class ScaleListener extends
        ScaleGestureDetector.SimpleOnScaleGestureListener {
    @Override
    public boolean onScaleBegin(ScaleGestureDetector detector) {
        mode = ZOOM;
        return true;
    }

    @Override
    public boolean onScale(ScaleGestureDetector detector) {
        float mScaleFactor = detector.getScaleFactor();
        float origScale = saveScale;
        saveScale *= mScaleFactor;
        if (saveScale &gt; maxScale) {
            saveScale = maxScale;
            mScaleFactor = maxScale / origScale;
        } else if (saveScale &lt; minScale) {
            saveScale = minScale;
            mScaleFactor = minScale / origScale;
        }

        if (origWidth * saveScale &lt;= viewWidth
                || origHeight * saveScale &lt;= viewHeight)
            matrix.postScale(mScaleFactor, mScaleFactor, viewWidth / 2,
                    viewHeight / 2);
        else
            matrix.postScale(mScaleFactor, mScaleFactor,
                    detector.getFocusX(), detector.getFocusY());

        fixTrans();
        return true;
    }
}

void fixTrans() {
    matrix.getValues(m);
    float transX = m[Matrix.MTRANS_X];
    float transY = m[Matrix.MTRANS_Y];

    float fixTransX = getFixTrans(transX, viewWidth, origWidth * saveScale);
    float fixTransY = getFixTrans(transY, viewHeight, origHeight
            * saveScale);

    if (fixTransX != 0 || fixTransY != 0)
        matrix.postTranslate(fixTransX, fixTransY);
}

float getFixTrans(float trans, float viewSize, float contentSize) {
    float minTrans, maxTrans;

    if (contentSize &lt;= viewSize) {
        minTrans = 0;
        maxTrans = viewSize - contentSize;
    } else {
        minTrans = viewSize - contentSize;
        maxTrans = 0;
    }

    if (trans &lt; minTrans)
        return -trans + minTrans;
    if (trans &gt; maxTrans)
        return -trans + maxTrans;
    return 0;
}

float getFixDragTrans(float delta, float viewSize, float contentSize) {
    if (contentSize &lt;= viewSize) {
        return 0;
    }
    return delta;
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    viewWidth = MeasureSpec.getSize(widthMeasureSpec);
    viewHeight = MeasureSpec.getSize(heightMeasureSpec);

    //
    // Rescales image on rotation
    //
    if (oldMeasuredHeight == viewWidth &amp;&amp; oldMeasuredHeight == viewHeight
            || viewWidth == 0 || viewHeight == 0)
        return;
    oldMeasuredHeight = viewHeight;
    oldMeasuredWidth = viewWidth;

    if (saveScale == 1) {
        // Fit to screen.
        float scale;

        Drawable drawable = getDrawable();
        if (drawable == null || drawable.getIntrinsicWidth() == 0
                || drawable.getIntrinsicHeight() == 0)
            return;
        int bmWidth = drawable.getIntrinsicWidth();
        int bmHeight = drawable.getIntrinsicHeight();

        Debugger.debugE("bmSize" + "bmWidth: " + bmWidth + " bmHeight : "
                + bmHeight);

        float scaleX = (float) viewWidth / (float) bmWidth;
        float scaleY = (float) viewHeight / (float) bmHeight;
        scale = Math.min(scaleX, scaleY);
        matrix.setScale(scale, scale);

        // Center the image
        float redundantYSpace = (float) viewHeight
                - (scale * (float) bmHeight);
        float redundantXSpace = (float) viewWidth
                - (scale * (float) bmWidth);
        redundantYSpace /= (float) 2;
        redundantXSpace /= (float) 2;

        matrix.postTranslate(redundantXSpace, redundantYSpace);

        origWidth = viewWidth - 2 * redundantXSpace;
        origHeight = viewHeight - 2 * redundantYSpace;
        setImageMatrix(matrix);
    }
    fixTrans();
}
}
</code></pre>

<p>GalleryImageSliderActivity.class</p>

<pre><code> import java.util.ArrayList;

 import android.content.pm.ActivityInfo;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.support.v4.view.ViewPager;
 import android.support.v4.view.ViewPager.OnPageChangeListener;
 import android.support.v7.app.ActionBarActivity;
 import android.view.MenuItem;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.widget.TextView;
 import android.widget.Toast;



 public class GalleryImageSliderActivity extends ActionBarActivity {

ViewPager myPager;
FullScreenImageAdapter adapter;
int currentSelectedImagePosition = 0;
ArrayList&lt;String&gt; allImages = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; placeholder = new ArrayList&lt;String&gt;();
TextView txt_title;

@Override
protected void onCreate(Bundle savedInstanceState) {
    // TODO Auto-generated method stub
    super.onCreate(savedInstanceState);
    // this.requestWindowFeature(Window.FEATURE_NO_TITLE);
    setContentView(R.layout.activity_gallery_layout);
    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
    txt_title = (TextView) findViewById(R.id.txt_Title);
    txt_title
            .setTypeface(CommonFunctios.getSourceSansPro(getBaseContext()));
    txt_title.setText("Photo Gallery");
    getSupportActionBar().setTitle(txt_title.getText().toString());
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);
    getSupportActionBar().setBackgroundDrawable(
            new ColorDrawable(Color.parseColor("#a40404")));
    myPager = (ViewPager) findViewById(R.id.mygalleryViewPager);
    myPager.setOnPageChangeListener(new OnPageChangeListener() {
        @Override
        public void onPageSelected(int arg0) {
            // TODO Auto-generated method stub
        }

        @Override
        public void onPageScrollStateChanged(int arg0) {
            // TODO Auto-generated method stub
        }

        @Override
        public void onPageScrolled(int arg0, float arg1, int arg2) {
            // TODO Auto-generated method stub
        }
    });
    if (getIntent().getExtras() != null) {
        if (getIntent().getExtras().containsKey("current_image_position")) {
            currentSelectedImagePosition = getIntent().getExtras().getInt(
                    "current_image_position");

        }
        if (getIntent().getExtras().containsKey("imagesList")) {
            allImages = (ArrayList&lt;String&gt;) (getIntent().getExtras()
                    .getStringArrayList("imagesList"));
        }
        if (getIntent().getExtras().containsKey("placeholderList")) {
            placeholder = (ArrayList&lt;String&gt;) (getIntent().getExtras()
                    .getStringArrayList("placeholderList"));
        }
    }
    adapter = new FullScreenImageAdapter(this, allImages, placeholder);
    myPager.setAdapter(adapter);
    myPager.setCurrentItem(currentSelectedImagePosition);
    myPager.setOffscreenPageLimit(allImages.size() * 2);
    myPager.setOnClickListener(new OnClickListener() {

        @Override
        public void onClick(View v) {
            // TODO Auto-generated method stub
            Toast.makeText(getApplicationContext(), "On my pager clicked",
                    Toast.LENGTH_LONG).show();
        }
    });
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    // TODO Auto-generated method stub
    if (item.getItemId() == android.R.id.home) {

        finish();
        overridePendingTransition(R.anim.push_right_in,
                R.anim.push_right_out);
    }
    return super.onOptionsItemSelected(item);
}

@Override
public void onBackPressed() {
    // TODO Auto-generated method stub
    super.onBackPressed();
    overridePendingTransition(R.anim.push_right_in, R.anim.push_right_out);
 }
 }
</code></pre>

<p>Then adapter for Images</p>

<p>FullScreenImageAdapter.class</p>

<pre><code>import java.util.ArrayList;

 import android.app.Activity;
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.support.v4.view.PagerAdapter;
 import android.support.v4.view.ViewPager;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
 import android.widget.ProgressBar;
 import android.widget.RelativeLayout;
 import android.widget.Toast;



 public class FullScreenImageAdapter extends PagerAdapter {

private Activity _activity;

private LayoutInflater inflater;
ArrayList&lt;Drawable&gt; featuredImages = new ArrayList&lt;Drawable&gt;();
ArrayList&lt;String&gt; featuredImagePath = new ArrayList&lt;String&gt;();
ArrayList&lt;String&gt; placeholdeImagepath = new ArrayList&lt;String&gt;();
OnClickListener onImageClickListener;
ImageLoader imgLoader;

// constructor
public FullScreenImageAdapter(Activity activity,
        ArrayList&lt;String&gt; featuredImagePath, ArrayList&lt;String&gt; placeholder) {
    this._activity = activity;
    this.featuredImagePath = featuredImagePath;
    this.placeholdeImagepath = placeholder;
    imgLoader = new ImageLoader(activity);
}

@Override
public int getCount() {
    return this.featuredImagePath.size();
}

@Override
public boolean isViewFromObject(View view, Object object) {
    return view == ((RelativeLayout) object);
}

@Override
public Object instantiateItem(ViewGroup container, int position) {
    TouchImageView imgDisplay;
    inflater = (LayoutInflater) _activity
            .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    View viewLayout = inflater.inflate(R.layout.full_screen_image,
            container, false);
    imgDisplay = (TouchImageView) viewLayout.findViewById(R.id.imgDisplay);
    Debugger.debugE("link url to be called "
            + placeholdeImagepath.get(position));
    imgLoader.DisplayImageWithDefaultPlaceHolder(
            featuredImagePath.get(position),
            placeholdeImagepath.get(position), imgDisplay, null,
            imgDisplay.getHeight(), imgDisplay.getWidth(), 0);
    imgDisplay.setTag(position);
    imgDisplay.setOnClickListener(new OnClickListener() {

        @Override
        public void onClick(View v) {
            // TODO Auto-generated method stub
            Toast.makeText(_activity, "on click", Toast.LENGTH_SHORT)
                    .show();
        }
    });
    ((ViewPager) container).addView(viewLayout);

    return viewLayout;
}

@Override
public void destroyItem(ViewGroup container, int position, Object object) {
    ((ViewPager) container).removeView((RelativeLayout) object);

}
 }
</code></pre>

<p>xml file for imageview</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" &gt;

&lt;com.xxxx.TouchImageView
    android:id="@+id/imgDisplay"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:scaleType="fitCenter"
    android:src="@drawable/no_data" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>gallery activity xml.
    
    </p>

<pre><code>&lt;TextView
    android:id="@+id/txt_Title"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_alignParentTop="true"
    android:background="@color/Red_bg"
    android:gravity="center"
    android:padding="5dp"
    android:textColor="@android:color/white"
    android:textSize="@dimen/restaurant_title_size"
    android:visibility="gone" /&gt;

&lt;android.support.v4.view.ViewPager
    android:id="@+id/mygalleryViewPager"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_below="@+id/txt_Title"
    android:layout_centerInParent="true" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>First change only TouchImageView class with your zoomingclass. If it will work for click then no need to go for full solution.</p>

<p>I hope this will help you.
Bskania.</p>
