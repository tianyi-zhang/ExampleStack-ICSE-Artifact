<p><a href="http://books.google.com.au/books?id=h0d8hVA5HyQC&amp;dq=books%2BJava%2BNumber%2BCruncher:%2BThe%2BJava%2BProgrammer%27s%2BGuide%2Bto%2BNumerical%2BComputing&amp;printsec=frontcover&amp;source=bn&amp;hl=en&amp;ei=MOLjSaPQBdaSkAX4w-nbCw&amp;sa=X&amp;oi=book%5Fresult&amp;ct=result&amp;resnum=4">Java Number Cruncher: The Java Programmer's Guide to Numerical Computing</a> provides a solution using <a href="http://en.wikipedia.org/wiki/Newton%27s%5Fmethod">Newton's Method</a>. Source code from the book is available <a href="http://authors.phptr.com/mak/downloads.html">here</a>. The following has been taken from chapter <em>12.5 Big Decmial Functions</em> (p330 &amp; p331):</p>

<pre><code>/**
 * Compute the natural logarithm of x to a given scale, x &gt; 0.
 */
public static BigDecimal ln(BigDecimal x, int scale)
{
    // Check that x &gt; 0.
    if (x.signum() &lt;= 0) {
        throw new IllegalArgumentException("x &lt;= 0");
    }

    // The number of digits to the left of the decimal point.
    int magnitude = x.toString().length() - x.scale() - 1;

    if (magnitude &lt; 3) {
        return lnNewton(x, scale);
    }

    // Compute magnitude*ln(x^(1/magnitude)).
    else {

        // x^(1/magnitude)
        BigDecimal root = intRoot(x, magnitude, scale);

        // ln(x^(1/magnitude))
        BigDecimal lnRoot = lnNewton(root, scale);

        // magnitude*ln(x^(1/magnitude))
        return BigDecimal.valueOf(magnitude).multiply(lnRoot)
                    .setScale(scale, BigDecimal.ROUND_HALF_EVEN);
    }
}

/**
 * Compute the natural logarithm of x to a given scale, x &gt; 0.
 * Use Newton's algorithm.
 */
private static BigDecimal lnNewton(BigDecimal x, int scale)
{
    int        sp1 = scale + 1;
    BigDecimal n   = x;
    BigDecimal term;

    // Convergence tolerance = 5*(10^-(scale+1))
    BigDecimal tolerance = BigDecimal.valueOf(5)
                                        .movePointLeft(sp1);

    // Loop until the approximations converge
    // (two successive approximations are within the tolerance).
    do {

        // e^x
        BigDecimal eToX = exp(x, sp1);

        // (e^x - n)/e^x
        term = eToX.subtract(n)
                    .divide(eToX, sp1, BigDecimal.ROUND_DOWN);

        // x - (e^x - n)/e^x
        x = x.subtract(term);

        Thread.yield();
    } while (term.compareTo(tolerance) &gt; 0);

    return x.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
}
</code></pre>
