<p>Since you can not use array, one approach can be:</p>

<pre><code>public boolean isAnagram(String a, String b) {

    if(a.length() != b.length()) return false;

    for (int i=0; i &lt; a.length(); i++) {
        for (int j=0; j &lt;b.length(); j++) {

            if (a.charAt(i) == b.charAt(j))
            {

               a = removeCharAt(a,i);
               b = removeCharAt(b,j);
                i=0;
                j=0;
            }
        }
    }
    return a.equals(b);
}
</code></pre>

<p>where removeCharAt is :</p>

<pre><code>public static String removeCharAt(String s, int pos) {
   return s.substring(0,pos)+s.substring(pos+1);

}
</code></pre>

<p>The first test is to verify if both strings have the same size. If they have, then you start by taking a char from the first string, and check if this char exists on the second string. 
If it exist you remove this char from both strings. And take another char from the first string and repeat the process, until there is no more chars to compare. In the end if the final result strings are equal than they are anagram.</p>

<p>You should remove the char of both strings to avoid that for the examples like string a ="AAAAA" and string b ="Abbbb" it give you an anagram. Since each char of string 'a' will match the first position of string 'b'.</p>

<p>Some problem in your code:</p>

<pre><code>public static boolean isAnagram(String s1, String s2) {

   int a = s1.length() ;
   int b= s2.length() ;

if (a==b){
    int count=0;
    int i,j ;
    char x, y ;
    for (i=0, j=0; i&lt;=a; i++){

     x = s1.charAt(i) ;

    y = s2.charAt(j);

    j++;
    if (x==y){
        count++ ;
  while (count==a){
      return true;
  }
                return false;
    }
}  
}
</code></pre>

<p>}    </p>

<p>You will have out of range error since <code>i&lt;=a</code> inside the for and <code>a = s1.length()</code>., you are not returning anything in the case of <code>if (a!=b)</code>. Besides that you are comparing both string, by comparing if each char on the same position are equal. This approach will no work for searching for an anagram, it may work to search if two string are equal.</p>
