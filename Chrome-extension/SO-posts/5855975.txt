<p>If all you have to do is meet a method contract, you can do this.</p>

<pre><code>public HashMap&lt;?, ?&gt; mergeSort(HashMap&lt;?, ?&gt; map) {
    return new LinkedHashMap(new TreeMap(map));
}
</code></pre>

<p>This will sort the keys and return a subclass of HashMap. The design of this method is broken, but sometimes you can't change things.</p>

<hr>

<p>If you are sorting a map, you should be using a SortedMap like TreeMap.  hashmap doesn't retain an order so using it for a merge sort is not possible.  Using a merge sort for a TreeMap is redundant.</p>

<p>You cannot assume that <code>?</code> is a Comparable.  You can write something like.</p>

<pre><code>public static &lt;K extends Comparable&lt;K&gt;, V&gt; SortedMap&lt;K,V&gt; sort(Map&lt;K,V&gt; map) {
    return new TreeMap&lt;K, V&gt;(map);
} 
</code></pre>

<p>As you can see this is shorter and simpler than your approach. Is this homework? Do you reall need to use a merge sort?</p>

<p>The problem you have is that you cannot return a HashMap as it doesn't keep the order, adn you cannot return a TreeMap because it will sort the keys for you making anything else you redundant.  For this task you can only return a LinkedHashMap as it does retain order, without doing the sorting for you.</p>

<hr>

<p>here is an example using LinkedHashMap.  Note it doesn't create copies of Maps as it goes, it creates a single array and merge sorts portions of it until its completely sorted.</p>

<p>Note: I use TreeMap as a SortedMap to show its sorted correctly. ;)</p>

<pre><code>public static void main(String... args) throws IOException {
    Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();
    for(int i=0;i&lt;100;i++)
        map.put((int)(Math.random()*1000), i);
    System.out.println("Unsorted "+map);
    System.out.println("Sorted "+sort(map));
    final String sortedToString = sort(map).toString();
    final String treeMapToString = new TreeMap&lt;Integer, Integer&gt;(map).toString();
    if (!sortedToString.equals(treeMapToString))
        System.out.println(sortedToString+" != \n"+treeMapToString);
}

public static &lt;K extends Comparable&lt;K&gt;, V&gt; Map&lt;K, V&gt; sort(Map&lt;K, V&gt; map) {
    return mergeSort(map);
}

// a very bad design idea, but needed for compatibility.
public static &lt;K extends Comparable&lt;K&gt;, V&gt; HashMap&lt;K, V&gt; mergeSort(Map&lt;K, V&gt; map) {
    Map.Entry&lt;K, V&gt;[] entries = map.entrySet().toArray(new Map.Entry[map.size()]);
    mergeSort0(entries, 0, entries.length);
    HashMap&lt;K, V&gt; ret = new LinkedHashMap&lt;K, V&gt;();
    for (Map.Entry&lt;K, V&gt; entry : entries)
        ret.put(entry.getKey(), entry.getValue());
    return ret;
}

private static &lt;K extends Comparable&lt;K&gt;, V&gt; void mergeSort0(Map.Entry&lt;K, V&gt;[] entries, int start, int end) {
    int len = end - start;
    if (len &lt; 2) return;
    int mid = (end + start) &gt;&gt;&gt; 1;
    mergeSort0(entries, start, mid);
    mergeSort0(entries, mid, end);
    // merge [start, mid) and [mid, end)  to [start, end)
    for(int p = start, l=start, r=mid; p &lt; end &amp;&amp; l &lt; r &amp;&amp; r &lt; end; p++) {
        int cmp = entries[l].getKey().compareTo(entries[r].getKey());
        if (cmp &lt;=  0) {
            l++;
            // the entry is in the right place already
        } else if (p != r) {
            // we need to insert the entry from the right
            Map.Entry&lt;K,V&gt; e= entries[r];
            // shift up.
            System.arraycopy(entries, p, entries, p+1, r - p);
            l++;
            // move down.
            entries[p] = e;
            r++;
        }
    }
}
</code></pre>

<p>prints</p>

<pre><code>Unsorted {687=13, 551=0, 2=15, 984=3, 608=6, 714=16, 744=1, 272=5, 854=9, 96=2, 918=18, 829=8, 109=14, 346=7, 522=4, 626=19, 495=12, 695=17, 247=11, 725=10}
Sorted {2=15, 96=2, 109=14, 247=11, 272=5, 346=7, 495=12, 522=4, 551=0, 608=6, 626=19, 687=13, 695=17, 714=16, 725=10, 744=1, 829=8, 854=9, 918=18, 984=3}
</code></pre>
