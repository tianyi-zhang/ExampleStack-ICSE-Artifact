<p>
Hello. I always have had some issues with the solutions above (and on other sites).<br>
I, as a developer, am programming a addon for a API. The API permitts the use of any external libraries or 3rd party tools. The setup also consists of a mixture of code in jar or zip files and class files located directly in some directories. So my code had to be able to work arround every setup. After a lot of research I have come up with a method that will work in at least 95% of all possible setups.</p>

<p>The following code is basically the overkill method that will always work.</p>

<h2>The code:</h2>

<p>This code scans a given package for all classes that are included in it. It will only work for all classes in the current <code>ClassLoader</code>.</p>

<pre class="lang-java prettyprint-override"><code>/**
 * Private helper method
 * 
 * @param directory
 *            The directory to start with
 * @param pckgname
 *            The package name to search for. Will be needed for getting the
 *            Class object.
 * @param classes
 *            if a file isn't loaded but still is in the directory
 * @throws ClassNotFoundException
 */
private static void checkDirectory(File directory, String pckgname,
        ArrayList&lt;Class&lt;?&gt;&gt; classes) throws ClassNotFoundException {
    File tmpDirectory;

    if (directory.exists() &amp;&amp; directory.isDirectory()) {
        final String[] files = directory.list();

        for (final String file : files) {
            if (file.endsWith(".class")) {
                try {
                    classes.add(Class.forName(pckgname + '.'
                            + file.substring(0, file.length() - 6)));
                } catch (final NoClassDefFoundError e) {
                    // do nothing. this class hasn't been found by the
                    // loader, and we don't care.
                }
            } else if ((tmpDirectory = new File(directory, file))
                    .isDirectory()) {
                checkDirectory(tmpDirectory, pckgname + "." + file, classes);
            }
        }
    }
}

/**
 * Private helper method.
 * 
 * @param connection
 *            the connection to the jar
 * @param pckgname
 *            the package name to search for
 * @param classes
 *            the current ArrayList of all classes. This method will simply
 *            add new classes.
 * @throws ClassNotFoundException
 *             if a file isn't loaded but still is in the jar file
 * @throws IOException
 *             if it can't correctly read from the jar file.
 */
private static void checkJarFile(JarURLConnection connection,
        String pckgname, ArrayList&lt;Class&lt;?&gt;&gt; classes)
        throws ClassNotFoundException, IOException {
    final JarFile jarFile = connection.getJarFile();
    final Enumeration&lt;JarEntry&gt; entries = jarFile.entries();
    String name;

    for (JarEntry jarEntry = null; entries.hasMoreElements()
            &amp;&amp; ((jarEntry = entries.nextElement()) != null);) {
        name = jarEntry.getName();

        if (name.contains(".class")) {
            name = name.substring(0, name.length() - 6).replace('/', '.');

            if (name.contains(pckgname)) {
                classes.add(Class.forName(name));
            }
        }
    }
}

/**
 * Attempts to list all the classes in the specified package as determined
 * by the context class loader
 * 
 * @param pckgname
 *            the package name to search
 * @return a list of classes that exist within that package
 * @throws ClassNotFoundException
 *             if something went wrong
 */
public static ArrayList&lt;Class&lt;?&gt;&gt; getClassesForPackage(String pckgname)
        throws ClassNotFoundException {
    final ArrayList&lt;Class&lt;?&gt;&gt; classes = new ArrayList&lt;Class&lt;?&gt;&gt;();

    try {
        final ClassLoader cld = Thread.currentThread()
                .getContextClassLoader();

        if (cld == null)
            throw new ClassNotFoundException("Can't get class loader.");

        final Enumeration&lt;URL&gt; resources = cld.getResources(pckgname
                .replace('.', '/'));
        URLConnection connection;

        for (URL url = null; resources.hasMoreElements()
                &amp;&amp; ((url = resources.nextElement()) != null);) {
            try {
                connection = url.openConnection();

                if (connection instanceof JarURLConnection) {
                    checkJarFile((JarURLConnection) connection, pckgname,
                            classes);
                } else if (connection instanceof FileURLConnection) {
                    try {
                        checkDirectory(
                                new File(URLDecoder.decode(url.getPath(),
                                        "UTF-8")), pckgname, classes);
                    } catch (final UnsupportedEncodingException ex) {
                        throw new ClassNotFoundException(
                                pckgname
                                        + " does not appear to be a valid package (Unsupported encoding)",
                                ex);
                    }
                } else
                    throw new ClassNotFoundException(pckgname + " ("
                            + url.getPath()
                            + ") does not appear to be a valid package");
            } catch (final IOException ioex) {
                throw new ClassNotFoundException(
                        "IOException was thrown when trying to get all resources for "
                                + pckgname, ioex);
            }
        }
    } catch (final NullPointerException ex) {
        throw new ClassNotFoundException(
                pckgname
                        + " does not appear to be a valid package (Null pointer exception)",
                ex);
    } catch (final IOException ioex) {
        throw new ClassNotFoundException(
                "IOException was thrown when trying to get all resources for "
                        + pckgname, ioex);
    }

    return classes;
}
</code></pre>

<p>These three methods provide you with the ability to find all classes in a given package.<br>
You use it like this:</p>

<pre class="lang-java prettyprint-override"><code>getClassesForPackage("package.your.classes.are.in");
</code></pre>

<h2>The explanation:</h2>

<p>The method first gets the current <code>ClassLoader</code>. It then fetches all resources that contain said package and iterates of these <code>URL</code>s. It then creates a <code>URLConnection</code> and determines what type of URl we have. It can either be a directory (<code>FileURLConnection</code>) or a directory inside a jar or zip file (<code>JarURLConnection</code>). Depending on what type of connection we have two different methods will be called.</p>

<p>First lets see what happens if it is a <code>FileURLConnection</code>.<br>
It first checks if the passed File exists and is a directory. If that's the case it checks if it is a class file. If so a <code>Class</code> object will be created and put in the <code>ArrayList</code>. If it is not a class file but is a directory, we simply iterate into it and do the same thing. All other cases/files will be ignored.</p>

<p>If the <code>URLConnection</code> is a <code>JarURLConnection</code> the other private helper method will be called. This method iterates over all Entries in the zip/jar archive. If one entry is a class file and is inside of the package a <code>Class</code> object will be created and stored in the <code>ArrayList</code>.</p>

<p>After all resources have been parsed it (the main method) returns the <code>ArrayList</code> containig all classes in the given package, that the current <code>ClassLoader</code> knows about.</p>

<p>If the process fails at any point a <code>ClassNotFoundException</code> will be thrown containg detailed information about the exact cause.</p>
