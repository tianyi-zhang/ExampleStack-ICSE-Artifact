<p>First, I assume for an example that, all your views in the layout.xml file are wrapped inside a <code>framelayout</code> and you want your swipes to be detectable across the entire <code>framelayout</code>. If so, register your <code>framelayout</code> to the object of the type <code>GestureDetector</code> as shown in the following code:</p>

<pre><code>FrameLayout mFL = (FrameLayout) findViewById(R.id.framelayoutID);

    mGestureDetector = new GestureDetector(getApplicationContext(), new MySwipeGestureDetector());
    mFL.setOnTouchListener(new OnTouchListener() {

        @Override
        public boolean onTouch(View v, MotionEvent event) {
            // TODO Auto-generated method stub
            return mGestureDetector.onTouchEvent(event);
        }
    }); 
</code></pre>

<p>Regarding the <code>simpleOnGestureListener</code>, here is how to implement <code>onFling</code>. it works for me.:</p>

<pre><code>//define these variables globally:
/* private static final int MIN_DIST = 100;
private static final int MAX_OFF_PATH = 200;
private static final int THRESHOLD_VELOC = 200;*/
...
...
...
@Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX,
            float velocityY) {
        // TODO Auto-generated method stub
        try {
            if (Math.abs(e1.getY() - e2.getY()) &gt; SWIPE_MAX_OFF_PATH)
                return false;
            // right to left swipe
            if(e1.getX() - e2.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY) {
                Log.i("SwipeGesture", "Left Swipe");
            }  else if (e2.getX() - e1.getX() &gt; SWIPE_MIN_DISTANCE &amp;&amp; Math.abs(velocityX) &gt; SWIPE_THRESHOLD_VELOCITY) {
                Log.i("SwipeGesture", "Right Swipe");
            }
        } catch (Exception e) {
            // nothing
        }
        return false;
    }       
}
</code></pre>
