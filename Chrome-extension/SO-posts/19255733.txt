<p>I am not sure why you want to use Regex for this. Java provides a <strong><a href="http://docs.oracle.com/javase/tutorial/networking/urls/urlInfo.html" rel="nofollow">Query URL Objects</a></strong> for doing the same for you.</p>

<p>Here is an example taken from the same <a href="http://docs.oracle.com/javase/tutorial/networking/urls/urlInfo.html" rel="nofollow">site</a> to show how it works:</p>

<pre><code>import java.net.*;
import java.io.*;

public class ParseURL {
    public static void main(String[] args) throws Exception {

        URL aURL = new URL("http://example.com:80/docs/books/tutorial"
                           + "/index.html?name=networking#DOWNLOADING");

        System.out.println("protocol = " + aURL.getProtocol());
        System.out.println("authority = " + aURL.getAuthority());
        System.out.println("host = " + aURL.getHost());
        System.out.println("port = " + aURL.getPort());
        System.out.println("path = " + aURL.getPath());
        System.out.println("query = " + aURL.getQuery());
        System.out.println("filename = " + aURL.getFile());
        System.out.println("ref = " + aURL.getRef());
    }
}
</code></pre>

<p>Here is the output displayed by the program:</p>

<pre><code>protocol = http
authority = example.com:80
host = example.com
port = 80
path = /docs/books/tutorial/index.html
query = name=networking
filename = /docs/books/tutorial/index.html?name=networking
ref = DOWNLOADING
</code></pre>
