<p>To implement a basic searchView using toolbar in android, roughly, you need to make the following modifications to the customListVolley project:</p>

<p><strong>1.</strong> <strong>Add a toolbar to your activity_main.xml</strong><br>
For example :<br></p>

<pre><code>&lt;LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:orientation="vertical"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity" &gt;

    &lt;android.support.v7.widget.Toolbar
        android:visibility="visible"
        xmlns:app="http://schemas.android.com/apk/res-auto"
        android:id="@+id/toolbar"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:background="#1111DD"
        app:theme="@style/ToolbarTheme"/&gt;

    &lt;ListView
        android:id="@+id/list"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:divider="@color/list_divider"
        android:dividerHeight="1dp"
        android:listSelector="@drawable/list_row_selector" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p><br></p>

<p><strong>2.</strong> <strong>Create search_toolbar.xml &amp; add it under menu folder</strong><br>
Like this:</p>

<pre><code>&lt;menu
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools" &gt;

    &lt;item
        android:id="@+id/action_search"
        android:icon="@android:drawable/ic_menu_search"
        app:showAsAction="always"
        app:actionViewClass="android.support.v7.widget.SearchView"
        android:title="Search"
        /&gt; 

&lt;/menu&gt;
</code></pre>

<p><br></p>

<p><strong>3.</strong> <strong>Make your CustomListAdapter.java implement <em>Filterable</em></strong><br>
For example:</p>

<pre><code>public class CustomListAdapter
        extends BaseAdapter
    implements Filterable
{
    private Activity activity;
    private LayoutInflater inflater;
    private List&lt;Movie&gt; movieItems;
    private List&lt;Movie&gt; originalList; //&lt;--

    //--&gt;
    private ItemFilter mFilter = new ItemFilter();

    @Override
    public Filter getFilter() {
        return mFilter;
    }
    //&lt;--

    ImageLoader imageLoader = AppController.getInstance().getImageLoader();

    public CustomListAdapter(Activity activity, List&lt;Movie&gt; movieItems) {
        this.activity = activity;
        this.movieItems = movieItems;
        originalList = movieItems; //&lt;--
    }

    .
    .
    .

    //--&gt;Implement your filter logic
    private class ItemFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {

            String filterString = constraint.toString().toLowerCase();

            FilterResults results = new FilterResults();

            List&lt;Movie&gt; movies = new ArrayList&lt;&gt;();

            for(Movie item : originalList)
            {
                if(item.getTitle().toLowerCase().contains(filterString))
                    movies.add(item);
            }

            movieItems = movies;
            results.count = movies.size();
            return null;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            notifyDataSetChanged();
        }
    }//&lt;--
}
</code></pre>

<p><strong>4.</strong> <strong>Initialize the toolbar &amp; the searchView in you main activity</strong><br>
Like this:<br></p>

<pre><code>public class MainActivity extends AppCompatActivity {
    // Log tag
    private static final String TAG = MainActivity.class.getSimpleName();

    // Movies json url
    private static final String url = "http://api.androidhive.info/json/movies.json";
    private ProgressDialog pDialog;
    private List&lt;Movie&gt; movieList = new ArrayList&lt;Movie&gt;();
    private ListView listView;
    private CustomListAdapter adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        //--&gt;Setup your toolbar
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        .
        . 
        .
    }

    .
    .
    .


    //---&gt;Setup your searchView
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.search_toolbar, menu);
        MenuItem searchItem = menu.findItem(R.id.action_search);

        SearchView.OnQueryTextListener textChangeListener = new SearchView.OnQueryTextListener()
        {
            @Override
            public boolean onQueryTextChange(String newText)
            {
                // this is your adapter that will be filtered
                adapter.getFilter().filter(newText);
                return true;
            }
            @Override
            public boolean onQueryTextSubmit(String query)
            {
                // this is your adapter that will be filtered
                adapter.getFilter().filter(query);
                return true;
            }
        };
        SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);

        SearchView searchView = null;
        if (searchItem != null) {
            searchView = (SearchView) searchItem.getActionView();
        }
        if (searchView != null) {
            searchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
            searchView.setIconifiedByDefault(false);
            searchView.setOnQueryTextListener(textChangeListener);
        }

        return super.onCreateOptionsMenu(menu);
//        return true;
    }
}
</code></pre>

<p>This should allow you to implement a basic searchView.</p>
