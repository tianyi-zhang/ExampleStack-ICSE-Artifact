<p>use this code</p>

<pre><code>public class Imagegallery extends Activity implements OnItemClickListener,
    OnScrollListener, OnTouchListener {
Button btn;

SQLiteDatabase sampleDB = null;
String SAMPLE_DB_NAME = "hic";

int size = 0;
TextView headertext;
Button cartbtn;

ImageView footer1, footer2, footer3, footer4, footer5;

GridView gridView;

boolean larg = false;
String products;
int j = 1;
int ii = 0;
String imagepath[];
String productname[];
int productid[] = new int[1000];

String productids[] = new String[1000];
int integerprodids[] = new int[1000];
final Context context = this;
String filename2[];

/** Called when the activity is first created. */
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.currentspecial);

    File root = new File(Environment.getExternalStorageDirectory()
            + File.separator + "aiwhic/product" + File.separator);
    File[] fileName = root.listFiles();
    filename2 = new String[fileName.length];
    for (int j = 0; j &lt; fileName.length; j++) {
        Uri uri = Uri.fromFile(fileName[j]);
        filename2[j] = fileName[j].getAbsolutePath();

        Log.e("file", filename2[j]);
    }

    gridView = (GridView) findViewById(R.id.gridView1);

    gridView.setAdapter(new ImageAdapter(this, filename2, filename2));

    gridView.setOnItemClickListener(new OnItemClickListener() {
        public void onItemClick(AdapterView&lt;?&gt; parent, View v,
                int position, long id) {

            int isf = filename2[position].lastIndexOf("/");
            int laf = filename2[position].lastIndexOf(".");
            String filename = filename2[position].substring(isf + 1, laf);
            int pos = Integer.parseInt(filename);
            Intent go = new Intent(Imagegallery.this, ItemsPage.class);
            Bundle bundle = new Bundle();

            bundle.putInt("position", pos);
            bundle.putString("whichclass", "imagegallery");
            bundle.putInt("catid", 2);
            go.putExtras(bundle);
            startActivity(go);

        }
    });

}

public class ImageAdapter extends BaseAdapter {
    private Context context;
    private final String[] mobileValues;
    private final String[] mobileimages;

    public ImageAdapter(Context context, String[] mobileValues, String[] mo) {
        this.context = context;
        this.mobileValues = mobileValues;
        this.mobileimages = mo;
    }

    public View getView(int position, View convertView, ViewGroup parent) {

        LayoutInflater inflater = (LayoutInflater) context
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        View gridView;

        if (convertView == null) {

            gridView = new View(context);

            gridView = inflater.inflate(R.layout.currentspeciallist, null);

            TextView textView = (TextView) gridView
                    .findViewById(R.id.textView1);
            textView.setText(mobileValues[position]);
            textView.setVisibility(View.INVISIBLE);
            ImageView imageView = (ImageView) gridView
                    .findViewById(R.id.imageView1);

            imageView.setTag(mobileimages[position]);
            new Loadimage().execute(imageView);
            // imageView.setImageBitmap(BitmapFactory
            // .decodeFile(mobileimages[position]));

        } else {
            gridView = (View) convertView;
        }

        return gridView;
    }

    public int getCount() {
        return mobileimages.length;
    }

    public Object getItem(int position) {
        return null;
    }

    public long getItemId(int position) {
        return 0;
    }

}

class Loadimage extends AsyncTask&lt;Object, Void, Bitmap&gt; {

    private ImageView imv;
    private String path;

    @Override
    protected Bitmap doInBackground(Object... params) {

        imv = (ImageView) params[0];

        path = imv.getTag().toString();

        // Bitmap thumb = BitmapFactory.decodeFile(path);
        BitmapFactory.Options opts = new BitmapFactory.Options();

        opts.inSampleSize = 2; // for 1/2 the image to be loaded
        Bitmap thumb = Bitmap.createScaledBitmap(
                BitmapFactory.decodeFile(path, opts), 120, 120, false);

        return thumb;

    }

    @Override
    protected void onPostExecute(Bitmap bitmap) {
        if (!imv.getTag().toString().equals(path)) {
            /*
             * The path is not same. This means that this image view is
             * handled by some other async task. We don't do anything and
             * return.
             */
            return;
        }

        if (bitmap != null &amp;&amp; imv != null) {
            imv.setVisibility(View.VISIBLE);
            imv.setImageBitmap(bitmap);
        } else {
            imv.setVisibility(View.GONE);
        }
    }

}

public void onItemClick(AdapterView&lt;?&gt; arg0, View arg1, int arg2, long arg3) {

}
</code></pre>

<p>then create a xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/RelativeLayout1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:padding="5dp" &gt;

    &lt;ImageView
        android:id="@+id/imageView1"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_alignParentLeft="true"
        android:layout_alignParentTop="true"
        android:src="@drawable/ic_launcher" &gt;
    &lt;/ImageView&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>i am getting file path directly . u just get the name from sqlite and pass the array string</p>
