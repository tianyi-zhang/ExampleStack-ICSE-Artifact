<p>To create custom preference headers, with switches and such, you need to extend PreferenceActivity with Headers as the Android docs describe and then override PreferenceActivity.setListAdapter to create your own list adapter, which creates the custom views.  I made a pastebin with the code from the actual android settings activity to help you out.  <a href="http://pastebin.com/RhSndGCQ" rel="nofollow">http://pastebin.com/RhSndGCQ</a></p>

<pre><code>@Override
public void onBuildHeaders(List&lt;Header&gt; headers) {
  loadHeadersFromResource(R.xml.settings_headers, headers);
  updateHeaderList(headers);
}

@Override
public void setListAdapter(ListAdapter adapter) {
    if (adapter == null) {
        super.setListAdapter(null);
    } else {
        super.setListAdapter(new HeaderAdapter(this, getHeaders(), mAuthenticatorHelper));
    }
}

private static class HeaderAdapter extends ArrayAdapter&lt;Header&gt; {
    static final int HEADER_TYPE_CATEGORY = 0;
    static final int HEADER_TYPE_NORMAL = 1;
    static final int HEADER_TYPE_SWITCH = 2;
    private static final int HEADER_TYPE_COUNT = HEADER_TYPE_SWITCH + 1;

    private final WifiEnabler mWifiEnabler;
    private final BluetoothEnabler mBluetoothEnabler;
    private final ProfileEnabler mProfileEnabler;

    private AuthenticatorHelper mAuthHelper;

    private static class HeaderViewHolder {
        ImageView icon;
        TextView title;
        TextView summary;
        Switch switch_;
    }

    private LayoutInflater mInflater;

    static int getHeaderType(Header header) {
        if (header.fragment == null &amp;&amp; header.intent == null) {
            return HEADER_TYPE_CATEGORY;
        } else if (header.id == R.id.wifi_settings
                || header.id == R.id.bluetooth_settings
                || header.id == R.id.profiles_settings) {
            return HEADER_TYPE_SWITCH;
        } else {
            return HEADER_TYPE_NORMAL;
        }
    }

    @Override
    public int getItemViewType(int position) {
        Header header = getItem(position);
        return getHeaderType(header);
    }

    @Override
    public boolean areAllItemsEnabled() {
        return false; // because of categories
    }

    @Override
    public boolean isEnabled(int position) {
        return getItemViewType(position) != HEADER_TYPE_CATEGORY;
    }

    @Override
    public int getViewTypeCount() {
        return HEADER_TYPE_COUNT;
    }

    @Override
    public boolean hasStableIds() {
        return true;
    }

    public HeaderAdapter(Context context, List&lt;Header&gt; objects,
            AuthenticatorHelper authenticatorHelper) {
        super(context, 0, objects);

        mAuthHelper = authenticatorHelper;
        mInflater = (LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        // Temp Switches provided as placeholder until the adapter replaces these with actual
        // Switches inflated from their layouts. Must be done before adapter is set in super
        mWifiEnabler = new WifiEnabler(context, new Switch(context));
        mBluetoothEnabler = new BluetoothEnabler(context, new Switch(context));
        mProfileEnabler = new ProfileEnabler(context, null, new Switch(context));
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        HeaderViewHolder holder;
        Header header = getItem(position);
        int headerType = getHeaderType(header);
        View view = null;

        if (convertView == null || headerType == HEADER_TYPE_SWITCH) {
            holder = new HeaderViewHolder();
            switch (headerType) {
                case HEADER_TYPE_CATEGORY:
                    view = new TextView(getContext(), null,
                            android.R.attr.listSeparatorTextViewStyle);
                    holder.title = (TextView) view;
                    break;

                case HEADER_TYPE_SWITCH:
                    view = mInflater.inflate(R.layout.preference_header_switch_item, parent,
                            false);
                    holder.icon = (ImageView) view.findViewById(R.id.icon);
                    holder.title = (TextView)
                            view.findViewById(com.android.internal.R.id.title);
                    holder.summary = (TextView)
                            view.findViewById(com.android.internal.R.id.summary);
                    holder.switch_ = (Switch) view.findViewById(R.id.switchWidget);
                    break;

                case HEADER_TYPE_NORMAL:
                    view = mInflater.inflate(
                            R.layout.preference_header_item, parent,
                            false);
                    holder.icon = (ImageView) view.findViewById(R.id.icon);
                    holder.title = (TextView)
                            view.findViewById(com.android.internal.R.id.title);
                    holder.summary = (TextView)
                            view.findViewById(com.android.internal.R.id.summary);
                    break;
            }
            view.setTag(holder);
        } else {
            view = convertView;
            holder = (HeaderViewHolder) view.getTag();
        }

        // All view fields must be updated every time, because the view may be recycled
        switch (headerType) {
            case HEADER_TYPE_CATEGORY:
                holder.title.setText(header.getTitle(getContext().getResources()));
                break;

            case HEADER_TYPE_SWITCH:
                // Would need a different treatment if the main menu had more switches
                if (header.id == R.id.wifi_settings) {
                    mWifiEnabler.setSwitch(holder.switch_);
                } else if (header.id == R.id.bluetooth_settings) {
                    mBluetoothEnabler.setSwitch(holder.switch_);
                } else if (header.id == R.id.profiles_settings) {
                    mProfileEnabler.setSwitch(holder.switch_);
                }
                // No break, fall through on purpose to update common fields

                //$FALL-THROUGH$
            case HEADER_TYPE_NORMAL:
                if (header.extras != null
                        &amp;&amp; header.extras.containsKey(ManageAccountsSettings.KEY_ACCOUNT_TYPE)) {
                    String accType = header.extras.getString(
                            ManageAccountsSettings.KEY_ACCOUNT_TYPE);
                    ViewGroup.LayoutParams lp = holder.icon.getLayoutParams();
                    lp.width = getContext().getResources().getDimensionPixelSize(
                            R.dimen.header_icon_width);
                    lp.height = lp.width;
                    holder.icon.setLayoutParams(lp);
                    Drawable icon = mAuthHelper.getDrawableForType(getContext(), accType);
                    holder.icon.setImageDrawable(icon);
                } else {
                    holder.icon.setImageResource(header.iconRes);
                }
                holder.title.setText(header.getTitle(getContext().getResources()));
                CharSequence summary = header.getSummary(getContext().getResources());
                if (!TextUtils.isEmpty(summary)) {
                    holder.summary.setVisibility(View.VISIBLE);
                    holder.summary.setText(summary);
                } else {
                    holder.summary.setVisibility(View.GONE);
                }
                break;
        }

        return view;
    }

    public void resume() {
        mWifiEnabler.resume();
        mBluetoothEnabler.resume();
        mProfileEnabler.resume();
    }

    public void pause() {
        mWifiEnabler.pause();
        mBluetoothEnabler.pause();
        mProfileEnabler.pause();
    }
}
</code></pre>
