<p>If you not only want to get all direct children but all children's children and so on, you have to do it recursively:</p>

<pre><code>private ArrayList&lt;View&gt; getAllChildren(View v) {

    if (!(v instanceof ViewGroup)) {
        ArrayList&lt;View&gt; viewArrayList = new ArrayList&lt;View&gt;();
        viewArrayList.add(v);
        return viewArrayList;
    }

    ArrayList&lt;View&gt; result = new ArrayList&lt;View&gt;();

    ViewGroup vg = (ViewGroup) v;
    for (int i = 0; i &lt; vg.getChildCount(); i++) {

        View child = vg.getChildAt(i);

        ArrayList&lt;View&gt; viewArrayList = new ArrayList&lt;View&gt;();
        viewArrayList.add(v);
        viewArrayList.addAll(getAllChildren(child));

        result.addAll(viewArrayList);
    }
    return result;
}
</code></pre>

<p>To use the result you could do something like this:</p>

<pre><code>    // check if a child is set to a specific String
    View myTopView;
    String toSearchFor = "Search me";
    boolean found = false;
    ArrayList&lt;View&gt; allViewsWithinMyTopView = getAllChildren(myTopView);
    for (View child : allViewsWithinMyTopView) {
        if (child instanceof TextView) {
            TextView childTextView = (TextView) child;
            if (TextUtils.equals(childTextView.getText().toString(), toSearchFor)) {
                found = true;
            }
        }
    }
    if (!found) {
        fail("Text '" + toSearchFor + "' not found within TopView");
    }
</code></pre>
