<p><b>Developers do not have to work around the issue of hash collisions in HashMap in order to achieve program correctness.</b></p>

<p>There are a couple of key things to understand here:</p>

<ol>
<li> Collisions are an inherent feature of hashing, and they have to be.   The number of possible values (Strings in your case, but it applies to other types as well) is vastly bigger than the range of integers. 
<p>
<li> Every usage of hashing has a way to handle collisions, and the Java Collections (including HashMap) is no exception.
<p>
<li> Hashing is not involved in equality testing.  It is true that equal objects must have equal hashcodes, but the reverse is not true: many values will have the same hashcode.  So don't try using a hashcode comparison as a substitute for equality.  Collections don't. They use hashing to select a sub-collection (called a bucket in the Java Collections world), but they use .equals() to actually check for equality.
<p>
<li> Not only do you not have to worry about collisions causing incorrect results in a collection, but for most applications, you also *usually* don't have to worry about performance - Java hashed Collections do a pretty good job of managing hashcodes.
<p>
<li> Better yet, for the case you asked about (Strings as keys), you don't even have to worry about the hashcodes themselves, because Java's String class generates a pretty good hashcode.  So do most of the supplied Java classes.
</ol>

<p>Some more detail, if you want it:</p>

<p>The way hashing works (in particular, in the case of hashed collections like Java's HashMap, which is what you asked about) is this:  </p>

<ul>
<li><p>The HashMap stores the values you give it in a collection of sub-collections, called buckets.  These are actually implemented as linked lists.   There are a limited number of these: iirc, 16 to start by default, and the number increases as you put more items into the map.  There should always be more buckets than values.  To provide one example, using the defaults, if you add 100 entries to a HashMap, there will be 256 buckets.</p></li>
<li><p>Every value which can be used as a key in a map must be able to generate an integer value, called the hashcode. </p></li>
<li><p>The HashMap uses this hashcode to select a bucket.  Ultimately, this means taking the integer value <code>modulo</code> the number of buckets, but before that, Java's HashMap has an internal method (called <code>hash()</code>), which tweaks the hashcode to reduce some known sources of clumping.</p></li>
<li><p>When looking up a value, the HashMap selects the bucket, and then searches for the individual element by a linear search of the linked list, using <code>.equals()</code>.  </p></li>
</ul>

<p>So: you don't have to work around collisions for correctness, and you usually don't have to worry about them for performance, and if you're using native Java classes (like String), you don't have to worry about generating the hashcode values either.</p>

<p>In the case where you do have to write your own hashcode method (which means you've written a class with a compound value, like a first name/last name pair), things get slightly more complicated.  It's quite possible to get it wrong here, but it's not rocket science.  First, know this: the only thing you must do in order to assure correctness is to assure that equal objects yield equal hashcodes.  So if you write a hashcode() method for your class, you must also write an equals() method, and you must examine the same values in each.  </p>

<p>It is possible to write a hashcode() method which is bad but correct, by which I mean that it would satisfy the "equal objects must yield equal hashcodes" constraint, but still perform very poorly, by having a lot of collisions.</p>

<p>The canonical degenerate worst case of this would be to write a method which simply returns a constant value (e.g., 3) for all cases.  This would mean that every value would be hashed into the same bucket.  </p>

<p>It would still <em>work</em>, but performance would degrade to that of a linked list.  </p>

<p>Obviously, you won't write such a terrible hashcode() method.  If you're using a decent IDE, it's capable of generating one for you.  Since StackOverflow loves code, here's the code for the firstname/lastname class above.</p>

<pre><code>
public class SimpleName {
    private String firstName;
    private String lastName;
    public SimpleName(String firstName, String lastName) {
     super();
     this.firstName = firstName;
     this.lastName = lastName;
    }
    @Override
    public int hashCode() {
     final int prime = 31;
     int result = 1;
     result = prime * result
       + ((firstName == null) ? 0 : firstName.hashCode());
     result = prime * result
       + ((lastName == null) ? 0 : lastName.hashCode());
     return result;
    }
    @Override
    public boolean equals(Object obj) {
     if (this == obj)
      return true;
     if (obj == null)
      return false;
     if (getClass() != obj.getClass())
      return false;
     SimpleName other = (SimpleName) obj;
     if (firstName == null) {
      if (other.firstName != null)
       return false;
     } else if (!firstName.equals(other.firstName))
      return false;
     if (lastName == null) {
      if (other.lastName != null)
       return false;
     } else if (!lastName.equals(other.lastName))
      return false;
     return true;
    }
}

</code></pre>
