<p>Try following method -</p>

<pre><code>    public static Bitmap getBitmapFromParseImage(ParseFile image, int width , int height) {
    try {

            byte[] file = image.getData();
            InputStream inputStream = new ByteArrayInputStream(file);
            Bitmap image1 = CompressBitmap
                    .decodeSampledBitmapFromResourceMemOpt(inputStream, width,
                            height);
            return image1; 

        } catch (Exception e) {
            e.printStackTrace();
        }
     return null;
    }
</code></pre>

<p>CompressBitmap.java-</p>

<pre><code>import java.io.InputStream;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

public class CompressBitmap {

    public static int calculateInSampleSize(BitmapFactory.Options options,
            int reqWidth, int reqHeight) {
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height &gt; reqHeight || width &gt; reqWidth) {



            final int halfHeight = height / 2;
            final int halfWidth = width / 2;

            // Calculate the largest inSampleSize value that is a power of 2 and
            // keeps both
            // height and width larger than the requested height and width.
            while ((halfHeight / inSampleSize) &gt; reqHeight
                    &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
                inSampleSize *= 2;
            }
        }

        return inSampleSize;
    }
      public static Bitmap decodeSampledBitmapFromResourceMemOpt(
                InputStream inputStream, int reqWidth, int reqHeight) {

            byte[] byteArr = new byte[0];
            byte[] buffer = new byte[1024];
            int len;
            int count = 0;

            try {
                while ((len = inputStream.read(buffer)) &gt; -1) {
                    if (len != 0) {
                        if (count + len &gt; byteArr.length) {
                            byte[] newbuf = new byte[(count + len) * 2];
                            System.arraycopy(byteArr, 0, newbuf, 0, count);
                            byteArr = newbuf;
                        }

                        System.arraycopy(buffer, 0, byteArr, count, len);
                        count += len;
                    }
                }

                final BitmapFactory.Options options = new BitmapFactory.Options();
                options.inJustDecodeBounds = true;
                BitmapFactory.decodeByteArray(byteArr, 0, count, options);

                options.inSampleSize = calculateInSampleSize(options, reqWidth,
                        reqHeight);
                options.inPurgeable = true;
                options.inInputShareable = true;
                options.inJustDecodeBounds = false;
                options.inPreferredConfig = Bitmap.Config.ARGB_8888;

               // int[] pids = { android.os.Process.myPid() };
               // MemoryInfo myMemInfo = mAM.getProcessMemoryInfo(pids)[0];
               // Log.e(TAG, "dalvikPss (decoding) = " + myMemInfo.dalvikPss);

                return BitmapFactory.decodeByteArray(byteArr, 0, count, options);

            } catch (Exception e) {
                e.printStackTrace();

                return null;
            }
        }
}
</code></pre>
