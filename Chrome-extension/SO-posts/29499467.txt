<p>It is absolutely possible to do this. First, I would recommend putting your data into a collection. It would be preferable to put them into an object and then a collection of those objects. From there you can add a ListView to your main layout, define a custom layout for your list items, and populate your ListView using an ArrayAdapter.</p>

<p><a href="https://github.com/codepath/android_guides/wiki/Using-an-ArrayAdapter-with-ListView" rel="nofollow">Here is a really good example of how you can do this well.</a> It includes examples of loading data from an external source, which you don't need.</p>

<p>However, if you're getting into development now I would suggest you look into RecyclerView as well. RecyclerView is new and included in the AppCompat v7 library for use on pre-Lollipop Android. A RecyclerView will be a little more complicated to implement for a simple list but is significantly more scalable and efficient. I believe it is Google's intention to replace ListView with RecyclerView entirely in the future. </p>

<p><a href="http://techlovejump.com/android-recyclerview-to-create-list-like-view/" rel="nofollow">Here is a pretty simple introduction to making a list with RecyclerView.</a></p>

<hr>

<hr>

<p>EDIT</p>

<p>Using an ArrayAdapter with a ListView. First you need to create a model to store your data, some kind of class that you can put into a collection, for example: </p>

<pre><code>public class Item {
    public String title;
    public String sub1;
    public String sub2;

    public void Item(String t, String s1, String s2) {
        title = t;
        sub1 = s1;
        sub2 = s2;
    }
}
</code></pre>

<p>Then you need to define the layout for the item in your list:</p>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
 android:layout_width="match_parent"
 android:layout_height="match_parent"
 android:orientation="horizontal" &gt;
    &lt;TextView
      android:id="@+id/title"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content" /&gt;
   &lt;TextView
      android:id="@+id/sub1"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content" /&gt;
   &lt;TextView
      android:id="@+id/sub2"
      android:layout_width="wrap_content"
      android:layout_height="wrap_content" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Then in you need to make your custom ArrayAdapter by extending the ArrayAdapter class:</p>

<pre><code>public class ItemAdapter extends ArrayAdapter&lt;Item&gt; {
    public ItemAdapter(Context context, ArrayList&lt;Item&gt; items) {
       super(context, 0, items);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
       Item item = getItem(position);    

       if (convertView == null) {
          convertView = LayoutInflater.from(getContext()).inflate(R.layout.item_layout, parent, false);
       }

       TextView title = (TextView) convertView.findViewById(R.id.title);
       TextView sub1 = (TextView) convertView.findViewById(R.id.sub1);
       TextView sub2 = (TextView) convertView.findViewById(R.id.sub2);

       title.setText(item.title);
       sub1.setText(item.sub1);
       sub2.setText(item.sub2);

       return convertView;
   }
}
</code></pre>

<p>Then all you need to do is create an instance of the adapter in your main class and attach your collection to it:</p>

<pre><code>ArrayList&lt;Item&gt; data = new ArrayList&lt;Item&gt;();

ItemAdapter adapter = new ItemAdapter(this, data);

ListView listView = (ListView) findViewById(R.id.list_view);
listView.setAdapter(adapter);
</code></pre>

<p>This should populate your ListView with all the items that you need in your list. I haven't run any of this code so there might be one or two small bugs for you to fix.</p>
