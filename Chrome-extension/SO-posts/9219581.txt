<p>This is an approach I used. Note I've included things such as webpage address(WebPage) here so it's easier for you to see what is going on. I would advice against placing it here because if the host address changes you'll have to go back and change this in your code.</p>

<p>Android side:</p>

<pre><code>/**
 * Class for receiving data from server.
 * @author Jonathan B
 *
 */
public class ReceiveData 
{
//FILL IN webPage with link to the All folder on your server.
private String webPage = "http://www.example.com/Receive/";

//File name of the PHP file that is to be used by the method.
private String fileName; 
String delims = " ,\t\n\"\\;{}[]\\()&lt;&gt;&amp;^%$@!+/*~=";

/**
 * Constructor.
 */
public ReceiveData()
{

}

/**
 * Pass arguments to PHP file. Then receive data from PHP file.
 * @param file - PHP file in question
 * @param data - Arguments to pass to PHP file.
 * @return output - The data received from server.
 */
private ArrayList&lt;String&gt; receiveData(String file, ArrayList&lt;NameValuePair&gt; data)
{
    InputStream is = null;
    ArrayList&lt;String&gt; output = new ArrayList&lt;String&gt;();
    String line = null;

    //Connect and obtain data.
    try
    {
        HttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(webPage+file);
        httppost.setEntity(new UrlEncodedFormEntity(data));
        HttpResponse response = httpclient.execute(httppost);
        HttpEntity entity = response.getEntity();
        is = entity.getContent();

    }
    catch(Exception e)
    {
        Log.e("log_tag", "Error in http connection "+e.toString());
    }

    //Parse data into ArrayList and return.
    try
    {
        BufferedReader reader = 
            new BufferedReader(new InputStreamReader(is,"iso-8859-1"));

        while ((line = reader.readLine()) != null) 
        {
            //Parse data into tokens and removing unimportant tokens.
            StringTokenizer st = new StringTokenizer(line, delims, false);

            while(st.hasMoreTokens())
            {
                String token = st.nextToken();
                output.add(token);
            }
        }

        is.close();
        //Log output of data in LogCat.
        Log.d("DATA","DATA:"+output);

    }
    catch(Exception e)
    {
        Log.e("log_tag", "Error converting result "+e.toString());
    }
    return output;
}

/**
 * Gets all  data from GetAllData.php
 * @return output - ArrayList containing  data.
 */
public ArrayList&lt;String&gt; getData(String row)
{
    fileName = "GetData.php";

    //Add arguments to arrayList&lt;NameValuePairs&gt; so we can encode the data and send it on.
    ArrayList&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;(1);
    nameValuePairs.add(new BasicNameValuePair("row", row));

    ArrayList&lt;String&gt; output = this.receiveData(fileName, nameValuePairs);
    return output;
}
</code></pre>

<p>Now for the php side of things I had a file in the receive foldeer called GetData.php which looks like this:</p>

<pre><code>&lt;?php
/*
 * What this file does is it:
 * 1) Creates connection to database.
 * 2) Gets data from database.
 * 3) Encodes data to JSON. So this data can then be used by Android Application.
 * 4) Close database connection.
 */
require_once 'Connection.php';
require_once 'ReceiveAPI.php';

$server = new Connection();
$receive = new ReceiveAPI();

//Retrieve information.
$row = $_POST['row'];

//Connect to database.
$server-&gt;connectDB();
$output = $receive-&gt;getAllData($row);
print(json_encode($output));

//Disconnect from database.
$server-&gt;disconnectDB();
?&gt;
</code></pre>
