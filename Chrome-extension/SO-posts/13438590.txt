<p>First a disclaimer:</p>

<p><strong><em>DO NOT</em> ever use "SecureRandom" to derive a key! This is broken and doesn't make sense!</strong></p>

<p>If you're reading an AES key from disk, just store the actual key and don't go through this weird dance. You can get a SecretKey for AES usage from the bytes by doing:</p>

<pre><code>    SecretKey key = new SecretKeySpec(keyBytes, "AES");
</code></pre>

<p>If you're using a password to derive a key, follow  <a href="http://nelenkov.blogspot.com/2012/04/using-password-based-encryption-on.html" rel="nofollow">Nelenkov's excellent tutorial</a> with the caveat that a good rule of thumb is the salt size should be the same size as the key output. It looks like this:</p>

<pre><code>    /* User types in their password: */
    String password = "password";

    /* Store these things on disk used to derive key later: */
    int iterationCount = 1000;
    int saltLength = 32; // bytes; should be the same size as the output (256 / 8 = 32)
    int keyLength = 256; // 256-bits for AES-256, 128-bits for AES-128, etc
    byte[] salt; // Should be of saltLength

    /* When first creating the key, obtain a salt with this: */
    SecureRandom random = new SecureRandom();
    byte[] salt = new byte[saltLength];
    random.nextBytes(salt);

    /* Use this to derive the key from the password: */
    KeySpec keySpec = new PBEKeySpec(password.toCharArray(), salt,
                iterationCount, keyLength);
    SecretKeyFactory keyFactory = SecretKeyFactory
                .getInstance("PBKDF2WithHmacSHA1");
    byte[] keyBytes = keyFactory.generateSecret(keySpec).getEncoded();
    SecretKey key = new SecretKeySpec(keyBytes, "AES");
</code></pre>

<p>That's it. Anything else you should not use. </p>
