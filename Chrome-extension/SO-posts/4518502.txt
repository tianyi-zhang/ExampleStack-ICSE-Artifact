<p><strong>Update</strong> I've tidied up the <code>SwingLink</code> class further; an up-to-date copy of it can be found here: <a href="https://bitbucket.org/dimo414/jgrep/src/tip/src/grep/SwingLink.java" rel="nofollow">https://bitbucket.org/dimo414/jgrep/src/tip/src/grep/SwingLink.java</a></p>

<hr>

<p>@McDowell's answer is great, but there's several things that could be improved upon. Notably text other than the hyperlink is clickable and it still looks like a button even though some of the styling has been changed/hidden. While accessibility is important, a coherent UI is as well.</p>

<p>So I put together a class extending JLabel based on McDowell's code. It's self-contained, handles errors properly, and feels more like a link:</p>

<pre><code>public class SwingLink extends JLabel {
  private static final long serialVersionUID = 8273875024682878518L;
  private String text;
  private URI uri;

  public SwingLink(String text, URI uri){
    super();
    setup(text,uri);
  }

  public SwingLink(String text, String uri){
    super();
    setup(text,URI.create(uri));
  }

  public void setup(String t, URI u){
    text = t;
    uri = u;
    setText(text);
    setToolTipText(uri.toString());
    addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent e) {
        open(uri);
      }
      public void mouseEntered(MouseEvent e) {
        setText(text,false);
      }
      public void mouseExited(MouseEvent e) {
        setText(text,true);
      }
    });
  }

  @Override
  public void setText(String text){
    setText(text,true);
  }

  public void setText(String text, boolean ul){
    String link = ul ? "&lt;u&gt;"+text+"&lt;/u&gt;" : text;
    super.setText("&lt;html&gt;&lt;span style=\"color: #000099;\"&gt;"+
    link+"&lt;/span&gt;&lt;/html&gt;");
    this.text = text;
  }

  public String getRawText(){
    return text;
  }

  private static void open(URI uri) {
    if (Desktop.isDesktopSupported()) {
      Desktop desktop = Desktop.getDesktop();
      try {
        desktop.browse(uri);
      } catch (IOException e) {
        JOptionPane.showMessageDialog(null,
            "Failed to launch the link, your computer is likely misconfigured.",
            "Cannot Launch Link",JOptionPane.WARNING_MESSAGE);
      }
    } else {
      JOptionPane.showMessageDialog(null,
          "Java is not able to launch links on your computer.",
          "Cannot Launch Link", JOptionPane.WARNING_MESSAGE);
    }
  }
}
</code></pre>

<p>You could also, for instance, change the link color to purple after being clicked, if that seemed useful.  It's all self contained, you simply call:</p>

<pre><code>SwingLink link = new SwingLink("Java", "http://java.sun.com");
mainPanel.add(link);
</code></pre>
