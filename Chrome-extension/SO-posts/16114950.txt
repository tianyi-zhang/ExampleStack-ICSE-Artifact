<p>Since you've forced your application to be landscape, your application's configuration won't change when you rotate the device, and as a result, your UI won't get redrawn. So you'll never see a surfaceCreated/Changed callback because of it.</p>

<p>In any case, your issue isn't with preview, it's with the captured pictures. </p>

<p>The camera API doesn't automatically know which way is down; it needs you to tell it how you want your images rotated by using the Camera.Parameters <a href="http://developer.android.com/reference/android/hardware/Camera.Parameters.html#setRotation%28int%29" rel="nofollow">setRotation</a> method. There are several coordinate systems in play here (the orientation of the camera sensor relative to your device; the orientation of your UI relative to the device; and the orientation of the device relative to the world) which have to be done correctly. </p>

<p>So I highly recommend you use the code provided in the setRotation documentation, and inherit from the <a href="http://developer.android.com/reference/android/view/OrientationEventListener.html" rel="nofollow">OrientationEventListener</a>, implementing the listener as follows:</p>

<pre><code> public void onOrientationChanged(int orientation) {
   if (orientation == ORIENTATION_UNKNOWN) return;
   android.hardware.Camera.CameraInfo info =
        new android.hardware.Camera.CameraInfo();
   android.hardware.Camera.getCameraInfo(cameraId, info);
   orientation = (orientation + 45) / 90 * 90;
   int rotation = 0;
   if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
       rotation = (info.orientation - orientation + 360) % 360;
   } else {  // back-facing camera
     rotation = (info.orientation + orientation) % 360;
   }
   mParameters.setRotation(rotation);
 }
</code></pre>

<p>This will update your camera's still picture orientation correctly so that 'up' is always up, whether your app is landscape or portrait, or your device is a tablet or a phone.</p>
