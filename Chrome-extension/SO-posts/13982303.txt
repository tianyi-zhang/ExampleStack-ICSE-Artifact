<p>I would recommend extending BaseAdapter, it is relatively easy to do and very useful when it comes to various Views / row layouts (including changing colour of TextView)</p>

<p>The methods <code>getViewTypeCount()</code> and <code>getItemViewType(position)</code> can be easily overriden to give you as many different row layouts as you like.</p>

<p>This may not be your goal at all but is a handy thing to know.</p>

<p>However, I believe you will need a custom <code>BaseAdapter</code>, in which you override the <code>getView(int position, View convertView, ViewGroup parent)</code> method.</p>

<p>This would allow you to access the<code>TextView</code> for each row as you mentioned above. A good way to go about this is by implementing the ViewHolder pattern.</p>

<p>You could create a simple ViewHolder object ie.</p>

<pre><code>private static class ViewHolder
{
     TextView textView;
}
</code></pre>

<p>Then use that in your overriden getView()</p>

<pre><code>    // Get that view
    @Override
    public View getView(int position, View convertView, ViewGroup parent)
    {               
        if (convertView == null)
        {
            if (getItemViewType(position) == 0)
            {
                convertView = inflater.inflate(R.layout.rowlayouta, null);
                viewHolder = new ViewHolder();
                viewHolder.textView = (TextView) convertView.findViewById(R.id.tvCommonText1);
                convertView.setTag(viewHolder);
            }
            else
            {
                convertView = inflater.inflate(R.layout.rowlayoutb, null);
                viewHolder = new ViewHolder();
                viewHolder.textView = (TextView) convertView.findViewById(R.id.tvCommonText2);
                convertView.setTag(viewHolder);
            }
        }

        else 
            viewHolder = (ViewHolder) convertView.getTag(); // Or if View is existing

        viewHolder.textView.setText(strings.get(position));

        return convertView;         
    }   
</code></pre>

<p>That's just an example of how I inflated two different row layouts, you could just take out the first else.</p>

<p>You can see that if there is now ViewHolder object assigned to that row, a new ViewHolder object is created, its TextView is set to the reference of the current convertView - effectively the current rows View. Then the ViewHolder object which now contains reference to that specific rows TextView is basically attached to that convertView / row using the <code>setTag(object)</code> method.</p>

<p>If it already has a tag, that tag is got using the getTag() method instead of creating a new object with new references. MOST importantly, no new view is inflated, the old one is just reused.</p>

<p>This then allows you to set what TextView properties you want by referring to the current ViewHolder object which holds reference to that specific TextView. </p>

<p>As you can see I changed the text to each TextView as I went along to reflect which row / convertView was being displayed. (Pretty useful in itself). All you need to do there is refer to the current ViewHolder in the same way and use the setTextColor() method.</p>

<p>Maybe that was a bit drawn out. But hopefully with that you will be able to implement what you are asking about and you know why it is a good implementation.</p>

<p>P.S. For more info on how ListViews and adapters come together (thinking of the <code>getView()</code> method here), this tutorial is pretty helpful..</p>

<p><a href="http://android.amberfog.com/?p=296" rel="nofollow">http://android.amberfog.com/?p=296</a></p>
