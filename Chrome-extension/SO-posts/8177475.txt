<p>As many have suggested its better to use Filters in this case. </p>

<p>Put following snippet into <code>web.xml</code></p>

<p><strong>Filter definition</strong></p>

<pre><code>&lt;filter&gt;
    &lt;filter-name&gt;ProcessFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;my.filter.ProcessFilter&lt;/filter-class&gt;
&lt;/filter&gt;
</code></pre>

<p><strong>Filter mapping</strong></p>

<pre><code>&lt;!-- Map all ".jsp" that should go through the filter--&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;ProcessFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/content/*.jsp&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;

&lt;!-- If you have Any servlets that needs to go through ProcessFilter --&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;ProcessFilter&lt;/filter-name&gt;
    &lt;servlet-name&gt;MyServlet&lt;/servlet-name&gt;
&lt;/filter-mapping&gt;
</code></pre>

<p><strong>OncePerRequestFilter</strong></p>

<p>If you would want to execute the filter only once you could store an attribute in request scope for the first time, and next time you could check if the attribute is set in which case do not process further.</p>

<p>If you are using Spring framework you can either use one of the sub classes of <code>OncePerRequestFilter</code> or extend it and just implement <code>doFilterInternal()</code>.</p>

<p>Otherwise you could refer to <a href="http://grepcode.com/file/repo1.maven.org/maven2/org.springframework/spring-web/3.0.6.RELEASE/org/springframework/web/filter/OncePerRequestFilter.java#OncePerRequestFilter" rel="nofollow"><code>OncePerRequestFilter.java</code></a> : <a href="http://grepcode.com/file_/repo1.maven.org/maven2/org.springframework/spring-web/3.0.6.RELEASE/org/springframework/web/filter/OncePerRequestFilter.java/?v=source" rel="nofollow">raw</a> and implement/extend your filter.</p>

<p>Here is a simplified version of it.</p>

<pre><code> public class ProcessFilter extends Filter {

public final void doFilter(ServletRequest request, ServletResponse response, 
           FilterChain filterChain)
        throws ServletException, IOException {

    if (!(request instanceof HttpServletRequest) || 
                !(response instanceof HttpServletResponse)) {
        throw new ServletException("OncePerRequestFilter just supports HTTP requests");
    }
    HttpServletRequest httpRequest = (HttpServletRequest) request;
    HttpServletResponse httpResponse = (HttpServletResponse) response;

    String alreadyFilteredAttributeName = "ALREADY_PROCESSED_BY_PROCESS_FILTER";
    if (request.getAttribute(alreadyFilteredAttributeName) != null) {
        // Proceed without invoking this filter...
        filterChain.doFilter(request, response);
    }
    else {
        // Do invoke this filter...
        request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);
        try {
            doFilterInternal(httpRequest, httpResponse, filterChain);               
        }
        finally {
            // Remove the "already filtered" request attribute for this request.
            request.removeAttribute(alreadyFilteredAttributeName);
        }
    }
}

    protected void doFilterInternal(
        HttpServletRequest request, HttpServletResponse response, 
                    FilterChain filterChain) {
        throws ServletException, IOException
                            /*
                             *
                             *  
                             *  Put your processing logic here
                             *
                             *
                             */
    }

}
</code></pre>
