<p>Based on @devinmoore code, a map sorting methods using generics and supporting both ascending and descending ordering.</p>

<pre><code>/**
 * Sort a map by it's keys in ascending order. 
 *  
 * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.
 * @author Maxim Veksler
 */
public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByKey(final Map&lt;K, V&gt; map) {
 return sortMapByKey(map, SortingOrder.ASCENDING);
}

/**
 * Sort a map by it's values in ascending order.
 *  
 * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.
 * @author Maxim Veksler
 */
public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByValue(final Map&lt;K, V&gt; map) {
 return sortMapByValue(map, SortingOrder.ASCENDING);
}

/**
 * Sort a map by it's keys.
 *  
 * @param sortingOrder {@link SortingOrder} enum specifying requested sorting order. 
 * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.
 * @author Maxim Veksler
 */
public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByKey(final Map&lt;K, V&gt; map, final SortingOrder sortingOrder) {
 Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparator = new Comparator&lt;Entry&lt;K,V&gt;&gt;() {
  public int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {
   return comparableCompare(o1.getKey(), o2.getKey(), sortingOrder);
  }
 };

 return sortMap(map, comparator);
}

/**
 * Sort a map by it's values.
 *  
 * @param sortingOrder {@link SortingOrder} enum specifying requested sorting order. 
 * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.
 * @author Maxim Veksler
 */
public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMapByValue(final Map&lt;K, V&gt; map, final SortingOrder sortingOrder) {
 Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparator = new Comparator&lt;Entry&lt;K,V&gt;&gt;() {
  public int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {
   return comparableCompare(o1.getValue(), o2.getValue(), sortingOrder);
  }
 };

 return sortMap(map, comparator);
}

@SuppressWarnings("unchecked")
private static &lt;T&gt; int comparableCompare(T o1, T o2, SortingOrder sortingOrder) {
 int compare = ((Comparable&lt;T&gt;)o1).compareTo(o2);

 switch (sortingOrder) {
 case ASCENDING:
  return compare;
 case DESCENDING:
  return (-1) * compare;
 }

 return 0;
}

/**
 * Sort a map by supplied comparator logic.
 *  
 * @return new instance of {@link LinkedHashMap} contained sorted entries of supplied map.
 * @author Maxim Veksler
 */
public static &lt;K, V&gt; LinkedHashMap&lt;K, V&gt; sortMap(final Map&lt;K, V&gt; map, final Comparator&lt;Map.Entry&lt;K, V&gt;&gt; comparator) {
 // Convert the map into a list of key,value pairs.
 List&lt;Map.Entry&lt;K, V&gt;&gt; mapEntries = new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;(map.entrySet());

 // Sort the converted list according to supplied comparator.
 Collections.sort(mapEntries, comparator);

 // Build a new ordered map, containing the same entries as the old map.  
 LinkedHashMap&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;(map.size() + (map.size() / 20));
 for(Map.Entry&lt;K, V&gt; entry : mapEntries) {
  // We iterate on the mapEntries list which is sorted by the comparator putting new entries into 
  // the targeted result which is a sorted map. 
  result.put(entry.getKey(), entry.getValue());
 }

 return result;
}

/**
 * Sorting order enum, specifying request result sort behavior.
 * @author Maxim Veksler
 *
 */
public static enum SortingOrder {
 /**
  * Resulting sort will be from smaller to biggest.
  */
 ASCENDING,
 /**
  * Resulting sort will be from biggest to smallest.
  */
 DESCENDING
}
</code></pre>
