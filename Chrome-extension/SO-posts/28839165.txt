<p>Ok, so as asked I will give an example and my piece:</p>

<p><a href="http://eishay.github.io/jvm-serializers/prototype-results-page/" rel="nofollow">Here is a list</a> and performance metrics for various forms of serialization of PoJos </p>

<p>You will have to judge trade offs of performance and convenience. But, since I said 'JSON' as a means of serialization then here is a trivial example that will not be compiler dependent. Basically, unless you changed the structure of your pojo on the receiving end it is completely irrelevant when/how/where you compile it (in fact, it doesn't even have to be between 2 JVMs). As you can see from the link, JSON is actually amongst the slowest and XML is just a payload pig. But both of them have the decisive advantage of being universally supported. XML even allows for the application of style sheets.</p>

<pre><code>    &lt;dependency&gt;
        &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
        &lt;artifactId&gt;gson&lt;/artifactId&gt;
        &lt;version&gt;2.3.1&lt;/version&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
</code></pre>

<p>Code</p>

<pre><code>  @Test
    public void testJSON() throws Exception {
        Foo expected = new Foo(1,"Christian",1000000.00d);
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        String testJson = gson.toJson(expected);

        System.out.println(testJson);

        Foo result = gson.fromJson(testJson, Foo.class);
        assertEquals(expected,result);

    }

    public static class Foo {

        private String name;
        private Integer age;
        private Double paycheck;

        public Foo(Integer age, String name, Double paycheck) {
            this.age = age;
            this.name = name;
            this.paycheck = paycheck;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Foo foo = (Foo) o;

            if (age != null ? !age.equals(foo.age) : foo.age != null) return false;
            if (name != null ? !name.equals(foo.name) : foo.name != null) return false;
            if (paycheck != null ? !paycheck.equals(foo.paycheck) : foo.paycheck != null) return false;

            return true;
        }

        @Override
        public int hashCode() {
            int result = name != null ? name.hashCode() : 0;
            result = 31 * result + (age != null ? age.hashCode() : 0);
            result = 31 * result + (paycheck != null ? paycheck.hashCode() : 0);
            return result;
        }
    }
</code></pre>

<p>Output</p>

<pre><code>{
  "name": "Christian",
  "age": 1,
  "paycheck": 1000000.0
}
</code></pre>
