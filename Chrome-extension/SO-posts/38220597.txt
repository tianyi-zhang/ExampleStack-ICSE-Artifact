<p>public class MainActivity extends AppCompatActivity {</p>

<pre><code>private MyVideoView mVV;
private Handler mhandler;
private SeekBar seekbar;
private int duration;
private int backPositon = 0;
private int currentPosition;
private SharedPreferences sp;
private MediaController controller;
private TextView tv_curr;
private TextView tv_duration;
private Handler handler;
private boolean mExit;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    mVV = (MyVideoView) findViewById(R.id.vv);
    seekbar = (SeekBar) findViewById(R.id.seekbar);
    tv_curr = (TextView) findViewById(R.id.tv_currtime);
    tv_duration = (TextView) findViewById(R.id.tv_duration);

    //get duration of video
    getDuration();
    //video start
    playVideo();
    //get current time
    getCurrentDuration();
    //listener
    initEvent();

}

private void initHanlder() {
    handler=new Handler(){
        @Override
        public void handleMessage(Message msg) {
            if (msg.what==0x123){
                tv_curr.setText(timeFormat(mVV.getCurrentPosition()));
                seekbar.setProgress(mVV.getCurrentPosition());
            }

            if(msg.what==0x133){
                int changedProgress = msg.arg1;
                tv_curr.setText(timeFormat(changedProgress));
                mVV.seekTo(changedProgress);
                seekbar.setProgress(changedProgress);
                mVV.start();
            }
        }
    };

    new Thread(new Runnable() {
        @Override
        public void run() {
            while (mVV.getCurrentPosition()&lt;duration){
                Message message = Message.obtain();
                message.what=0x123;
                handler.sendMessage(message);
                SystemClock.sleep(1000);

                if(mExit){
                    break;
                }
            }

        }
    }).start();

}


private void getDuration() {
    mVV.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
        @Override
        public void onPrepared(MediaPlayer mp) {
            duration = mVV.getDuration();
            timeFormat(duration);
            Log.d("TAG", "---duration" + timeFormat(duration));
            seekbar.setMax(duration);
            //TextView  time
            tv_duration.setText(timeFormat(duration));
            //init handler
            initHanlder();
        }
    });
}

private String timeFormat(int time) {   
    StringBuilder mFormatBuilder;
    Formatter mFormatter;
    mFormatBuilder = new StringBuilder();
    mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
    int totalSeconds = time / 1000;

    int seconds = totalSeconds % 60;
    int minutes = (totalSeconds / 60) % 60;
    int hours = totalSeconds / 3600;

    mFormatBuilder.setLength(0);
    if (hours &gt; 0) {
        return mFormatter.format("%d:%02d:%02d", hours, minutes, seconds).toString();
    } else {
        return mFormatter.format("%02d:%02d", minutes, seconds).toString();
    }

}

private void playVideo() {
    File file = new File(Environment.getExternalStorageDirectory(), "cgx_video/db.mp4");
    if (!file.exists()) {
        file.mkdir();
    }
    Log.d("TAG", file.toString());
    mVV.setVideoPath(file.getPath());
    mVV.start();

}


private void initEvent() {
    seekbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
        @Override
        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
           currentPosition=progress;


        }

        @Override
        public void onStartTrackingTouch(SeekBar seekBar) {
             mVV.pause();


        }

        @Override
        public void onStopTrackingTouch(SeekBar seekBar) {
            if(handler!=null){
                Message message = Message.obtain();
                message.what=0x133;
                message.arg1=currentPosition;
                handler.sendMessage(message);
            }


        }
    });


}


@Override
protected void onPause() {
    super.onPause();
    Log.d("TAG", "---onPause");
    mVV.pause();
    backPositon = mVV.getCurrentPosition();
    Log.d("TAG", "backPositon:" + backPositon);

}

@Override
protected void onStop() {
    super.onStop();
    Log.d("TAG", "---onStop");

}

@Override
protected void onResume() {
    super.onResume();
    Log.d("TAG", backPositon + "---backPositon");
    mVV.seekTo(backPositon);
    mVV.start();
}

@Override
protected void onDestroy() {
    //in case of leak of memeroy
    mExit=true;
    super.onDestroy();

}
</code></pre>

<p>}</p>
