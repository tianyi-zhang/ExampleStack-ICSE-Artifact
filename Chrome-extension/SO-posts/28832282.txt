<p>You need to create a custom adapter, that inflates a view that contains the ProgressBar. Then during runtime you need to update the progress of the ProgressBar. Here is some really basic example to get you started.</p>

<p>The <code>row_grid_view</code> is just a layout that contains a progressbar. you would have to play a bit with the available layouts to see what fits your needs. A friendly warning: if the layout is part of an adapter, <em>do not</em> use a RelativeLayout. They can be really expensive to use, if you don't know what you are doing :)</p>

<p>The <code>ProgressBarAdapter</code> is an adapter that display a list of  <code>ProgressItem</code>s. The items contain just their own progress so that they can be used to update the progress of each ProgressBar.</p>

<p>row_grid_view.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content" &gt;

    &lt;ProgressBar
        android:id="@+id/progress"
        android:layout_width="wrap_content"
        android:max="100"
        android:layout_height="wrap_content"
        style="@style/Widget.AppCompat.ProgressBar.Horizontal" /&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p>ProgressBarAdapter</p>

<pre><code>public class ProgressShowingAdapter extends BaseAdapter {


    private ArrayList&lt;ProgressItem&gt; mData;
    private LayoutInflater mInflater;

    public ProgressShowingAdapter(Context context) {
        this.mInflater = LayoutInflater.from(context);
    }

    @Override
    public int getCount() {
        return mData.size();
    }

    @Override
    public ProgressItem getItem(int position) {
        return mData.get(position);
    }

    @Override
    public long getItemId(int position) {
        // if your items have any unique ids, return that instead
        return position;
    }

    public void setData(List&lt;ProgressItem&gt; newData) {
        this.mData.clear();
        if (newData != null &amp;&amp; !newData.isEmpty()) {
            mData.addAll(newData);
        }
    }

    private static class ViewHolder {
        private ProgressBar mProgress;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // view holder pattern
        ViewHolder vh = null;
        if (convertView == null) {
            vh = new ViewHolder();
            convertView = mInflater.inflate(R.layout.row_grid_view, parent, false);
            vh.mProgress = (ProgressBar) convertView.findViewById(R.id.progress);
            convertView.setTag(vh);
        } else {
            vh = (ViewHolder) convertView.getTag();
        }
        ProgressItem mItem = getItem(position);
        vh.mProgress.setProgress(mItem.getProgress());

        // do the remaining of the stuff here
        return convertView;
    }
}
</code></pre>

<p>ProgressItem</p>

<pre><code>public class ProgressItem {
    private int mProgress;

    public ProgressItem(int mProgress) {
        this.mProgress = mProgress;
    }

    public int getProgress() {

        return mProgress;
    }
}
</code></pre>
