<p>After few days I've tried to change my approach, using onMeasure() and onLayout().
Finally I've got it!</p>

<p>I'd like to share my code:</p>

<p>Custum relative layout class:</p>

<pre><code>public class CustomRelativeLayout extends RelativeLayout {

public CustomRelativeLayout(Context context) {
    super(context);
}

public CustomRelativeLayout(Context context, AttributeSet attrs,
        int defStyle) {
    super(context, attrs, defStyle);
}

public CustomRelativeLayout(Context context, AttributeSet attrs) {
    super(context, attrs);
}

@Override
protected void onLayout(boolean changed, int l, int t, int r, int b) {
    for (int i = 0; i &lt; getChildCount(); ++i) {

        View v = getChildAt(i);
        Punto center = ((CustomCircles) v).centro;
        int radius = ((CustomCircles) v).radius;
        v.layout(center.x - radius, center.y - radius, center.x + radius,
                center.y + radius);
    }
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

    for (int i = 0; i &lt; getChildCount(); ++i) {

        View v = getChildAt(i);
        Punto center = ((CustomCircles)v).centro;
        v.measure(center.x * 2, center.y *2);
    }

      int desiredWidth = 100;
        int desiredHeight = 100;

        int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        int heightMode = MeasureSpec.getMode(heightMeasureSpec);
        int heightSize = MeasureSpec.getSize(heightMeasureSpec);

        int width;
        int height;

        //Measure Width
        if (widthMode == MeasureSpec.EXACTLY) {
            //Must be this size
            width = widthSize;
        } else if (widthMode == MeasureSpec.AT_MOST) {
            //Can't be bigger than...
            width = Math.min(desiredWidth, widthSize);
        } else {
            //Be whatever you want
            width = desiredWidth;
        }

        //Measure Height
        if (heightMode == MeasureSpec.EXACTLY) {
            //Must be this size
            height = heightSize;
        } else if (heightMode == MeasureSpec.AT_MOST) {
            //Can't be bigger than...
            height = Math.min(desiredHeight, heightSize);
        } else {
            //Be whatever you want
            height = desiredHeight;
        }

        setMeasuredDimension(width, height);
}
}
</code></pre>

<p>custom circles class:</p>

<pre><code>public class CustomCircles extends View implements View.OnClickListener {

Punto centro;
Paint paint;
int radius;
int id;

public CustomCircles(Context context, Punto centro, int radius, int id) {
    this(context);
    this.centro = centro;
    this.radius = radius;
    this.id = id;
}

public CustomCircles(Context context) {
    super(context);
    init();
}

public CustomCircles(Context context, AttributeSet attrs, int defStyleAttr) {
    super(context, attrs, defStyleAttr);
}

public CustomCircles(Context context, AttributeSet attrs) {
    super(context, attrs);
}

private void init() {

    this.setOnClickListener(this);
    paint = new Paint();
    paint.setColor(Color.parseColor("#000000"));
}

@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);

    canvas.drawCircle(radius, radius, radius, paint);
}

private void changeColor() {
    this.paint.setColor(Color.parseColor("#0000FF"));
    invalidate();

}

@Override
public void onClick(View v) {
    changeColor();
}
}
</code></pre>

<p>main activity class:</p>

<pre><code> public class MainActivity extends Activity {

MySurfaceView view;
CustomRelativeLayout layout;
List&lt;CustomCircles&gt; circlesArr;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    setContentView(R.layout.activity_main);

    layout = (CustomRelativeLayout) findViewById(R.id.customRelativeLayout);

    ViewTreeObserver vto = layout.getViewTreeObserver();
    vto.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

        @Override
        public void onGlobalLayout() {
            layout.getViewTreeObserver().removeOnGlobalLayoutListener(this);

            int width = layout.getMeasuredWidth();
            int height = layout.getMeasuredHeight();

            int radius = calculateCircleRadius(height);
            calculateCirclesPosition(radius);
        }
    });
}

int circlesPerRow = 3;
int rows = 3;
</code></pre>

<p>private void calculateCirclesPosition(int radius) {</p>

<pre><code>    int index = 0;
    circlesArr = new ArrayList&lt;CustomCircles&gt;();

    for (int i = 0; i &lt; rows; ++i) {
        int y = radius + ((radius * 2) * i);

        for (int j = 0; j &lt; circlesPerRow; ++j) {

            int x = radius + ((radius * 2) * j);
            Punto centro = new Punto(x, y);
            Cerchio cerchio = new Cerchio(centro, radius);
            cerchio.indexInArray = index;

            CirclesHandler.get().getCircleList().add(cerchio);

            CustomCircles circle = new CustomCircles(this, centro,
                    radius, index++);

            circlesArr.add(circle);

            layout.addView(circle); 
        }
    }
}

private int calculateCircleRadius(int height) {
    return (height / 3) / 2;
}
}
</code></pre>

<p><img src="http://i.stack.imgur.com/UvSWB.png" alt="enter image description here"></p>
