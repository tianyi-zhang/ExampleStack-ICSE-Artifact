<p>Let's pretend that you are using Android Studio 1.5.1.</p>

<p>When I create a project using the new-project wizard, and accept the defaults, except choosing "Tabbed Activity" as the template, on the activity-configuration page of the wizard, there is a drop-down for "Navigation Style". There are three options there: "Swipe Views", "Action Bar Tabs", and "Action Bar Spinner".</p>

<p>Let's pretend that you chose "Action Bar Tabs".</p>

<p>The resulting activity does not have <code>implements TabHost.OnTabChangeListener</code>, and I am not aware of any of their templates that do. Instead, you get this:</p>

<pre><code>import android.support.design.widget.TabLayout;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;

import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;

import android.widget.TextView;

public class MainActivity extends AppCompatActivity {

  /**
   * The {@link android.support.v4.view.PagerAdapter} that will
   * provide
   * fragments for each of the sections. We use a
   * {@link FragmentPagerAdapter} derivative, which will keep
   * every
   * loaded fragment in memory. If this becomes too memory
   * intensive, it
   * may be best to switch to a
   * {@link android.support.v4.app.FragmentStatePagerAdapter}.
   */
  private SectionsPagerAdapter mSectionsPagerAdapter;

  /**
   * The {@link ViewPager} that will host the section contents.
   */
  private ViewPager mViewPager;

  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    Toolbar toolbar=(Toolbar)findViewById(R.id.toolbar);
    setSupportActionBar(toolbar);
    // Create the adapter that will return a fragment for each of the three
    // primary sections of the activity.
    mSectionsPagerAdapter=
      new SectionsPagerAdapter(getSupportFragmentManager());

    // Set up the ViewPager with the sections adapter.
    mViewPager=(ViewPager)findViewById(R.id.container);
    mViewPager.setAdapter(mSectionsPagerAdapter);

    TabLayout tabLayout=(TabLayout)findViewById(R.id.tabs);
    tabLayout.setupWithViewPager(mViewPager);

    FloatingActionButton fab=
      (FloatingActionButton)findViewById(R.id.fab);
    fab.setOnClickListener(new View.OnClickListener() {
      @Override
      public void onClick(View view) {
        Snackbar.make(view, "Replace with your own action",
          Snackbar.LENGTH_LONG)
          .setAction("Action", null).show();
      }
    });

  }


  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.menu_main, menu);
    return true;
  }

  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
    // Handle action bar item clicks here. The action bar will
    // automatically handle clicks on the Home/Up button, so long
    // as you specify a parent activity in AndroidManifest.xml.
    int id=item.getItemId();

    //noinspection SimplifiableIfStatement
    if (id==R.id.action_settings) {
      return true;
    }

    return super.onOptionsItemSelected(item);
  }

  /**
   * A placeholder fragment containing a simple view.
   */
  public static class PlaceholderFragment extends Fragment {
    /**
     * The fragment argument representing the section number for
     * this
     * fragment.
     */
    private static final String ARG_SECTION_NUMBER=
      "section_number";

    public PlaceholderFragment() {
    }

    /**
     * Returns a new instance of this fragment for the given
     * section
     * number.
     */
    public static PlaceholderFragment newInstance(
      int sectionNumber) {
      PlaceholderFragment fragment=new PlaceholderFragment();
      Bundle args=new Bundle();
      args.putInt(ARG_SECTION_NUMBER, sectionNumber);
      fragment.setArguments(args);
      return fragment;
    }

    @Override
    public View onCreateView(LayoutInflater inflater,
                             ViewGroup container,
                             Bundle savedInstanceState) {
      View rootView=
        inflater.inflate(R.layout.fragment_main, container,
          false);
      TextView textView=
        (TextView)rootView.findViewById(R.id.section_label);
      textView.setText(getString(R.string.section_format,
        getArguments().getInt(ARG_SECTION_NUMBER)));
      return rootView;
    }
  }

  /**
   * A {@link FragmentPagerAdapter} that returns a fragment
   * corresponding to
   * one of the sections/tabs/pages.
   */
  public class SectionsPagerAdapter
    extends FragmentPagerAdapter {

    public SectionsPagerAdapter(FragmentManager fm) {
      super(fm);
    }

    @Override
    public Fragment getItem(int position) {
      // getItem is called to instantiate the fragment for the given page.
      // Return a PlaceholderFragment (defined as a static inner class below).
      return PlaceholderFragment.newInstance(position+1);
    }

    @Override
    public int getCount() {
      // Show 3 total pages.
      return 3;
    }

    @Override
    public CharSequence getPageTitle(int position) {
      switch (position) {
        case 0:
          return "SECTION 1";
        case 1:
          return "SECTION 2";
        case 2:
          return "SECTION 3";
      }
      return null;
    }
  }
}
</code></pre>

<p>If this is where you started, the proper response to "explain exactly what you are using right now" would have been "<code>AppCompatActivity</code>, <code>ViewPager</code>, and <code>TabLayout</code>".</p>

<p>Let's pretend that this is what you have, more or less.</p>

<p>In that case, <a href="http://developer.android.com/reference/android/support/v4/view/ViewPager.html#addOnPageChangeListener%28android.support.v4.view.ViewPager.OnPageChangeListener%29" rel="nofollow">call <code>addOnPageChangeListener()</code> on the <code>ViewPager</code></a>, passing in an <code>OnPageChangeListener</code> implementation. That will be called when the user switches tabs, whether via the <code>TabLayout</code> or by swipe gestures on the <code>ViewPager</code> itself.</p>

<p>Now, it is entirely possible that this is not what you have, as I had to make a few guesses, given your limited explanation in your question.</p>
