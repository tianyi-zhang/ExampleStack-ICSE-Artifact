<p>I read the DriverManager code.<code>DriverManager.getConnection(String url)</code> invoke the following code:</p>

<p><strong>code from jdk1.7</strong></p>

<pre><code>   private static Connection getConnection(
        String url, java.util.Properties info, Class&lt;?&gt; caller) throws SQLException {
        /*
         * When callerCl is null, we should check the application's
         * (which is invoking this class indirectly)
         * classloader, so that the JDBC driver class outside rt.jar
         * can be loaded from here.
         */
        ClassLoader callerCL = caller != null ? caller.getClassLoader() : null;
        synchronized (DriverManager.class) {
            // synchronize loading of the correct classloader.
            if (callerCL == null) {
                callerCL = Thread.currentThread().getContextClassLoader();
            }
        }

        if(url == null) {
            throw new SQLException("The url cannot be null", "08001");
        }

        println("DriverManager.getConnection(\"" + url + "\")");

        // Walk through the loaded registeredDrivers attempting to make a connection.
        // Remember the first exception that gets raised so we can reraise it.
        SQLException reason = null;

        for(DriverInfo aDriver : registeredDrivers) {
            // If the caller does not have permission to load the driver then
            // skip it.
            if(isDriverAllowed(aDriver.driver, callerCL)) {
                try {
                    println("    trying " + aDriver.driver.getClass().getName());
                    Connection con = aDriver.driver.connect(url, info);
                    if (con != null) {
                        // Success!
                        println("getConnection returning " + aDriver.driver.getClass().getName());
                        return (con);
                    }
                } catch (SQLException ex) {
                    if (reason == null) {
                        reason = ex;
                    }
                }

            } else {
                println("    skipping: " + aDriver.getClass().getName());
            }

        }

        // if we got here nobody could connect.
        if (reason != null)    {
            println("getConnection failed: " + reason);
            throw reason;
        }

        println("getConnection: no suitable driver found for "+ url);
        throw new SQLException("No suitable driver found for "+ url, "08001");
    }
</code></pre>

<p>If the <code>registeredDrivers</code> doesn't contain DriverInfo of sqlserver driver(or url format error).The code will throw <code>SQLException("No suitable driver found for "+ url, "08001")</code>.</p>

<p>You can call <code>DriverManager.getDriver(String url)</code> to test whether contain the dirver.If yes,I think it is url format error. Otherwise,I think it is a lib issue.You can call <code>DriverManager.registerDriver(java.sql.Driver driver)</code> or try <code>Class.forName</code> before you call <code>DriverManager.getConnection</code>.
<code>Class.forName</code> can check lib. If you doesn't have the Class,it will throw <code>ClassNotFoundException</code>.</p>

<p>Variable <code>registeredDrivers</code> is initialized at <code>loadInitialDrivers</code> method.You can look at it for more useful information.</p>

<p>Hope these can help you</p>
