<p>The following code demonstrates a real-time Java chart using <a href="http://knowm.org/open-source/xchart/" rel="nofollow">XChart</a> where the line is updated as the data evolves over time. Creating real-time charts is as simple as calling <code>updateXYSeries</code> for one or more series objects through the <code>XYChart</code> instance and triggering a redraw of the <code>JPanel</code> containing the chart. This works for all chart types including <code>XYChart</code>, <code>CategoryChart</code>, <code>BubbleChart</code> and <code>PieChart</code>, for which example source code can be found here: <a href="https://github.com/timmolter/XChart/tree/develop/xchart-demo/src/main/java/org/knowm/xchart/demo/charts/realtime" rel="nofollow">https://github.com/timmolter/XChart/tree/develop/xchart-demo/src/main/java/org/knowm/xchart/demo/charts/realtime</a>. Examples demonstrate using the <code>SwingWrapper</code> with <code>repaintChart()</code> method as well as <code>XChartPanel</code> with <code>revalidate()</code> and <code>repaint()</code>. Disclaimer, I'm the main developer of the XChart library. </p>

<pre class="lang-java prettyprint-override"><code>public class SimpleRealTime {

  public static void main(String[] args) throws Exception {

    double phase = 0;
    double[][] initdata = getSineData(phase);

    // Create Chart
    final XYChart chart = QuickChart.getChart("Simple XChart Real-time Demo", "Radians", "Sine", "sine", initdata[0], initdata[1]);

    // Show it
    final SwingWrapper&lt;XYChart&gt; sw = new SwingWrapper&lt;XYChart&gt;(chart);
    sw.displayChart();

    while (true) {

      phase += 2 * Math.PI * 2 / 20.0;

      Thread.sleep(100);

      final double[][] data = getSineData(phase);

      chart.updateXYSeries("sine", data[0], data[1], null);
      sw.repaintChart();

    }

  }

  private static double[][] getSineData(double phase) {

    double[] xData = new double[100];
    double[] yData = new double[100];
    for (int i = 0; i &lt; xData.length; i++) {
      double radians = phase + (2 * Math.PI / xData.length * i);
      xData[i] = radians;
      yData[i] = Math.sin(radians);
    }
    return new double[][] { xData, yData };
  }
}
</code></pre>

<p>This results in the following Java Swing real-time chart app:
<a href="http://i.stack.imgur.com/dRm4W.gif" rel="nofollow"><img src="http://i.stack.imgur.com/dRm4W.gif" alt="enter image description here"></a></p>
