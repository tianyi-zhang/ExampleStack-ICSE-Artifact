<p>1- Copy the file from assets to the cache directory</p>

<p>This code just for illustration, you have to <em>do appropriate exception handling</em> and <em>close resources</em></p>

<pre><code>private File createCacheFile(Context context, String filename){
  File cacheFile = new File(context.getCacheDir(), filename);

  if (cacheFile.exists()) {
      return cacheFile ;
  }


  InputStream inputStream = context.getAssets().open(filename);
  FileOutputStream fileOutputStream = new FileOutputStream(cacheFile);

  int bufferSize = 1024;
  byte[] buffer = new byte[bufferSize];
  int length = -1;
  while ( (length = inputStream.read(buffer)) &gt; 0) {
     fileOutputStream.write(buffer,0,length);
  }

  fileOutputStream.close();
  inputStream.close();

  return cacheFile;
}
</code></pre>

<p>2- Open the file using <code>RandomAccessFile</code></p>

<pre><code>File cacheFile = createCacheFile(context, "text.txt");
RandomAccessFile randomAccessFile = new RandomAccessFile(cacheFile, "r");

// Process the file

randomAccessFile.close();    
</code></pre>

<p>On a side note, you should follow Java naming conventions, e.g. your method and variable name should start with small letter such as <code>copyFromAssetsToStorage</code> and <code>destinationFile</code></p>

<p><strong>Edit:</strong></p>

<p>You should make a separate <code>try/catch</code> for each <code>close()</code> operation, so if one fails the other still get executed and check that they are not <code>null</code></p>

<pre><code>finally {
    try {
       if(fileOutputStream!=null){
          fileOutputStream.close();            
       }
    } catch (IOException e) {
        e.printStackTrace();
    }

    try {
      if(inputStream!=null){
       inputStream.close();      
      }      
    } catch (IOException e) {
        e.printStackTrace();
    }
}  
</code></pre>
