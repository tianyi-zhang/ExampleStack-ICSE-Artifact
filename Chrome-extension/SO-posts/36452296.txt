<blockquote>
  <p>This function make no guarantees about the atomicity of the
  insertions.</p>
</blockquote>

<p>Correct me if I'm wrong but this is because we have no idea whether the given content provider overrides the <code>bulkInsert()</code> method unless it is our own provider. If the bulkInsert() method is not overriden, default implementation will iterate over the values and call <code>insert(Uri, ContentValues)</code> on each of them. It should be fine if you are using your own provider and know that you have implemented the <code>bulkInsert()</code> method like following example and use the <code>endTransaction()</code> method in finally block:</p>

<pre><code>    @Override
    public int bulkInsert(Uri uri, ContentValues[] values) {
        final SQLiteDatabase db = mOpenHelper.getWritableDatabase();
        final int match = sUriMatcher.match(uri);
        switch (match) {
            case WEATHER:
                db.beginTransaction();
                int returnCount = 0;
                try {
                    for (ContentValues value : values) {
                        normalizeDate(value);
                        long _id = db.insert(WeatherEntry.TABLE_NAME,
                                null, value);
                        if (_id != -1) {
                            returnCount++;
                        }
                    }
                    db.setTransactionSuccessful();
                } finally {
                    db.endTransaction();
                }
                getContext().getContentResolver().notifyChange(uri, null);
                return returnCount;
            default:
                return super.bulkInsert(uri, values);
        }
    }
</code></pre>
