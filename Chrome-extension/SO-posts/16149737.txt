<p>I think there is a conflict, it doesn't appear you are overriding the <code>onClick</code> method so I am assuming that you have defined the <code>onClick</code> property in xml as <code>onClick</code>, instead of the generic click method, let's try the following:</p>

<p>In xml, define the <code>onClick</code> as something like what I show below: <code>tempConverterClick</code></p>

<pre class="lang-xml prettyprint-override"><code>&lt;Button
    android:id="@+id/button1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:onClick="tempConverterClick"
    android:text="@string/my_button_txt" /&gt;
</code></pre>

<hr>

<p>Now on the Java side, let's first test with <code>Toast</code>: </p>

<pre><code>public void tempConverterClick(View view) {
    Toast.makeText(this, "Temp Converter click worked!", Toast.LENGTH_LONG).show();
}
</code></pre>

<p>If that works then lets try your initial code in this new click handler:</p>

<pre><code>public void tempConverterClick(View view) {
    switch (view.getId()) {
    case R.id.button1:
        RadioButton celsiusButton = (RadioButton) findViewById(R.id.radio0);
        RadioButton fahrenheitButton = (RadioButton) findViewById(R.id.radio1);
        if (text.getText().length() == 0) {
            Toast.makeText(this, "Please enter a valid number", Toast.LENGTH_LONG).show();
            return;
        }
        float inputValue = Float.parseFloat(text.getText().toString());
        if (celsiusButton.isChecked()) {
            text.setText(String.valueOf(convertFahrenheitToCelsius(inputValue)));
            celsiusButton.setChecked(false);
            fahrenheitButton.setChecked(true);
        }
        else {
            text.setText(String.valueOf(convertCelsiusToFahrenheit(inputValue)));
            fahrenheitButton.setChecked(false);
            celsiusButton.setChecked(true);
        }
        break;
    }
}
</code></pre>

<p><em>To avoid future confusion and the confusion of those who try to help, I would highly recommend changing your naming conventions. Create ID's that relate to the action, purpose, etc. Having <code>R.id.Button01</code> and <code>R.id.button1</code> is VERY confusing</em></p>

<hr>

<p><strong>Edit</strong></p>

<p>It appears that when you changed your <code>onCreate</code> you may have deleted the <code>EditText</code> instantiation. </p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // Add this line with the appropriate ID reference
    text = (EditText)findViewById(R.id.your_edit_text_id);

    Button next = (Button) findViewById(R.id.Button01);
    next.setOnClickListener(new View.OnClickListener() {
        public void onClick(View view) {
            Intent myIntent = new Intent(view.getContext(), SecondScreen.class);
            startActivityForResult(myIntent, 0);
        }
    });
}
</code></pre>
