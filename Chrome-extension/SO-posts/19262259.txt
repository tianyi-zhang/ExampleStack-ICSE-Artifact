<p>Something that I put in every single framework i've ever built, which is VERY efficient.. Here is an exerpt from the framework found <a href="http://github.com/ddavison/getting-started-with-selenium" rel="nofollow">here</a>. <a href="https://github.com/ddavison/getting-started-with-selenium/archive/master.zip" rel="nofollow">You can download it here</a>...</p>

<p>I implement sort of a pseudo-wait type method before i ever perform any actions on objects.  Try it yourself.  It's very efficient.</p>

<p>These are methods from the <a href="https://github.com/ddavison/getting-started-with-selenium/blob/master/src/main/java/com/company/seleniumframework/AutomationTest.java" rel="nofollow">AutomationTest</a> class</p>

<pre><code>    /**
     * Checks if the element is present or not.&lt;br&gt;
     * @param by
     * @return &lt;i&gt;this method is not meant to be used fluently.&lt;/i&gt;&lt;br&gt;&lt;br.
     * Returns &lt;code&gt;true&lt;/code&gt; if the element is present. and &lt;code&gt;false&lt;/code&gt; if it's not.
     */
    public boolean isPresent(By by) {
        if (driver.findElements(by).size() &gt; 0) return true;
        return false;
    }

    /**
     * Private method that acts as an arbiter of implicit timeouts of sorts.. sort of like a Wait For Ajax method.
     */
    private WebElement waitForElement(By by) {
        int attempts = 0;
        int size = driver.findElements(by).size();

        while (size == 0) {
            size = driver.findElements(by).size();
            if (attempts == MAX_ATTEMPTS) fail(String.format("Could not find %s after %d seconds",
                                                             by.toString(),
                                                             MAX_ATTEMPTS));
            attempts++;
            try {
                Thread.sleep(1000); // sleep for 1 second.
            } catch (Exception x) {
                fail("Failed due to an exception during Thread.sleep!");
                x.printStackTrace();
            }
        }

        if (size &gt; 0) System.err.println("WARN: There are more than 1 " + by.toString() + " 's!");

        return driver.findElement(by);
    }
</code></pre>

<p>Combine these methods yourself, and you're good to go.</p>

<h3>ALSO</h3>

<p>In terms of performance, I cannot stress to you this enough.. <strong>USE CSS</strong>.  It is faster, and cleaner.  See for yourself.</p>

<p>Consider the following,</p>

<pre><code>&lt;div id="something"&gt;
  &lt;div class="someClass"&gt;
    &lt;a href='http://google.com/search?'&gt;Search Google&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>

<p>Let's find the <code>&lt;a&gt;</code>.</p>

<p>CSS:</p>

<pre><code>div#something div.someClass &gt; a[href^='http://google']
</code></pre>

<p>XPATH:</p>

<pre><code>//div[@id='something']/div[contains(@class, 'someClass')]/a[starts-with(@href, 'http://google')]
</code></pre>
