<p>I don't think the problem is with the <code>acceptCharset="ISO-8859-15"</code><br>
I put together a test case (using Spring boot <a href="/questions/tagged/spring-boot" class="post-tag" title="show questions tagged 'spring-boot'" rel="tag">spring-boot</a>) based on a Getting Started guide from Spring IO website: <a href="https://spring.io/guides/gs/uploading-files/" rel="nofollow">Spring IO file upload example</a></p>

<p>I have also coded a Spring 3 MVC controller for a project at work that does file uploads. It is similar to the example that I show below.</p>

<p>Using this Spring boot test case, I can upload your example image with both UTF-8 and ISO-8859-15. It works fine. Granted, I'm not using the <code>CharacterEncodingFilter</code> like you are.<br>
Here is some of my code, so you can compare to yours.</p>

<p>I hope it helps.   </p>

<p>Application.java:</p>

<pre><code>@Configuration
@ComponentScan
@EnableAutoConfiguration
public class Application extends SpringBootServletInitializer {

    @Bean
    public MultipartConfigElement multipartConfigElement() {
        MultipartConfigFactory factory = new MultipartConfigFactory();
        factory.setMaxFileSize("128KB");
        factory.setMaxRequestSize("128KB");
        return factory.createMultipartConfig();
    }

    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
        return application.sources(Application.class);
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }
}
</code></pre>

<p>FileUploadController.java:</p>

<pre><code>@Controller
public class FileUploadController {

    @RequestMapping("/")
    public String welcome() {
        return "welcome";
    }

    @RequestMapping(value="/upload", method=RequestMethod.GET)
    public @ResponseBody String provideUploadInfo() {
        return "You can upload a file by posting to this same URL.";
    }

    @RequestMapping(value="/upload", method=RequestMethod.POST)
    public @ResponseBody String handleFileUpload(@RequestParam("name") String name, 
            @RequestParam("file") MultipartFile file){
        if (!file.isEmpty()) {
            try {
                byte[] bytes = file.getBytes();
                BufferedOutputStream stream = 
                        new BufferedOutputStream(new FileOutputStream(new File(name)));
                stream.write(bytes);
                stream.close();
                return "You successfully uploaded " + name + " into " + name;
            } catch (Exception e) {
                return "You failed to upload " + name + " =&gt; " + e.getMessage();
            }
        } else {
            return "You failed to upload " + name + " because the file was empty.";
        }
    }
}
</code></pre>

<p>snippet of welcome.jsp:</p>

<pre><code>&lt;%-- 
&lt;form:form action="upload" method="POST" acceptCharset="UTF-8" enctype="multipart/form-data"  &gt;
--%&gt;
&lt;form:form action="upload" method="POST" acceptCharset="ISO-8859-15" enctype="multipart/form-data"  &gt;
  &lt;table&gt;
      &lt;tr&gt;
        &lt;td&gt;  
            &lt;!-- &lt;input type="hidden" name="action" value="upload" /&gt;  --&gt;
            &lt;strong&gt;Please select a file to upload :&lt;/strong&gt; &lt;input type="file" name="file" /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;Name: &lt;input type="text" name="name"&gt;&lt;br /&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;
         &lt;input type="submit" value="Upload"&gt; Press here to upload the file!
        &lt;/td&gt;
      &lt;/tr&gt;
  &lt;/table&gt;
&lt;/form:form&gt;
</code></pre>
