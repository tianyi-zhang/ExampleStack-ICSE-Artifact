<p>Create a style for the overflow menu and pass in a content description</p>

<pre><code>&lt;style name="Widget.ActionButton.Overflow" parent="@android:style/Widget.Holo.ActionButton.Overflow"&gt;
    &lt;item name="android:contentDescription"&gt;@string/accessibility_overflow&lt;/item&gt;
&lt;/style&gt;

&lt;style name="Your.Theme" parent="@android:style/Theme.Holo.Light.DarkActionBar"&gt;
    &lt;item name="android:actionOverflowButtonStyle"&gt;@style/Widget.ActionButton.Overflow&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>Call <strong>ViewGroup.findViewsWithText</strong> and pass in your content description. Somewhat like this:</p>

<pre><code>@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    // The content description used to locate the overflow button
    final String overflowDesc = getString(R.string.accessibility_overflow);
    // The top-level window
    final ViewGroup decor = (ViewGroup) getWindow().getDecorView();
    // Wait a moment to ensure the overflow button can be located
    decor.postDelayed(new Runnable() {

        @Override
        public void run() {
            // The List that contains the matching views
            final ArrayList&lt;View&gt; outViews = new ArrayList&lt;&gt;();
            // Traverse the view-hierarchy and locate the overflow button
            decor.findViewsWithText(outViews, overflowDesc,
                    View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION);
            // Guard against any errors
            if (outViews.isEmpty()) {
                return;
            }
            // Do something with the view
            final ImageButton overflow = (ImageButton) outViews.get(0);
            overflow.setImageResource(R.drawable.ic_action_overflow);

        }

    }, 1000);
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Add a dummy item to the overflow menu
    menu.add("Overflow");
    return super.onCreateOptionsMenu(menu);
}
</code></pre>

<p><strong>View.findViewsWithText</strong> was added in API level 14 only. So please try to do a method by you own as like this:</p>

<pre><code>public static void findViewsWithText(List&lt;View&gt; outViews, ViewGroup parent, String targetDescription) {
    if (parent == null || TextUtils.isEmpty(targetDescription)) {
        return;
    }
    final int count = parent.getChildCount();
    for (int i = 0; i &lt; count; i++) {
        final View child = parent.getChildAt(i);
        final CharSequence desc = child.getContentDescription();
        if (!TextUtils.isEmpty(desc) &amp;&amp; targetDescription.equals(desc.toString())) {
            outViews.add(child);
        } else if (child instanceof ViewGroup &amp;&amp; child.getVisibility() == View.VISIBLE) {
            findViewsWithText(outViews, (ViewGroup) child, targetDescription);
        }
    }
}
</code></pre>

<p>This is not a tested code. So if there any issues while you implemented,please let me know.</p>
