<p>The best way to solve this would be with a framework for adding properties dynamically, but without this, you could add the additional properties to your Event object (include @JsonIgnore
so that it is not part of the final json), create a new JSONObject from the additional properties and merge it to the event JSONObject before serializing to json. This way the additional properties are added dynamically to the resulting Event output.</p>

<h1>In the Event class:</h1>

<pre><code>@JsonIgnore
    private Map&lt;String, Object&gt; additionalProperties;

    public Map&lt;String, Object&gt; getAdditionalProperties() {
        return this.additionalProperties;
    }

    public void setAdditionalProperties(Map&lt;String, Object&gt; additionalProperties) {
        this.additionalProperties = additionalProperties;
    }
</code></pre>

<h1>A function to merge two JSONObjects:</h1>

<pre><code>public static JSONObject mergeObjects(JSONObject source, JSONObject target) throws JSONException {
    for (String key: JSONObject.getNames(source)) {
            Object value = source.get(key);
            if (!target.has(key)) {
                // new value for "key":
                target.put(key, value);
            } else {
                // existing value for "key" - recursively deep merge:
                if (value instanceof JSONObject) {
                    JSONObject valueJson = (JSONObject)value;
                    deepMerge(valueJson, target.getJSONObject(key));
                } else {
                    target.put(key, value);
                }
            }
    }
    return target;
}
</code></pre>

<h1>Putting the two objects together:</h1>

<pre><code> String jsonAdd = mapper.writeValueAsString(additional);
 String jsonEvent = mapper.writeValueAsString(event);

 JSONObject jsonAddObj = new JSONObject(jsonAdd);
 JSONObject JsonEventObj = new JSONObject(jsonEvent);
 JSONObject finalJson = Merge.deepMerge(jsonAddObj, JsonEventObj);
</code></pre>
