<p>Unfortunately, JDT distribution doesn't have any application that would support <strong>-import</strong> argument, like CDT's <code>org.eclipse.cdt.managedbuilder.core.headlessbuild</code>. But you can easily write a simple one:</p>

<pre><code>package test.myapp;

import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IProjectDescription;
import org.eclipse.core.resources.IncrementalProjectBuilder;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.core.runtime.Path;
import org.eclipse.equinox.app.IApplication;
import org.eclipse.equinox.app.IApplicationContext;

public class Application implements IApplication {

    public Object start(IApplicationContext context) throws Exception {

        String[] args = (String[]) context.getArguments().get(IApplicationContext.APPLICATION_ARGS);

        boolean build = false;

        // Determine projects to import
        List&lt;String&gt; projects = new LinkedList&lt;String&gt;();
        for (int i = 0; i &lt; args.length; ++i) {
            if ("-import".equals(args[i]) &amp;&amp; i + 1 &lt; args.length) {
                projects.add(args[++i]);
            } else if ("-build".equals(args[i])) {
                build = true;
            }
        }

        if (projects.size() == 0) {
            System.out.println("No projects to import!");
        } else {
            for (String projectPath : projects) {
                System.out.println("Importing project from: " + projectPath);

                // Import project description:
                IProjectDescription description = ResourcesPlugin.getWorkspace().loadProjectDescription(
                        new Path(projectPath).append(".project"));
                IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(description.getName());
                project.create(description, null);
                project.open(null);
            }

            // Build all projects after importing
            if (build) {
                System.out.println("Re-building workspace");
                ResourcesPlugin.getWorkspace().build(IncrementalProjectBuilder.CLEAN_BUILD, new NullProgressMonitor());
                ResourcesPlugin.getWorkspace().build(IncrementalProjectBuilder.FULL_BUILD, new NullProgressMonitor());
            }
        }
        return null;
    }

    public void stop() {
    }
}
</code></pre>

<p>Your plugin.xml should contain something like:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?eclipse version="3.4"?&gt;
&lt;plugin&gt;
   &lt;extension
         id="App"
         point="org.eclipse.core.runtime.applications"&gt;
      &lt;application
            cardinality="singleton-global"
            thread="main"
            visible="true"&gt;
         &lt;run
               class="test.myapp.Application"&gt;
         &lt;/run&gt;
      &lt;/application&gt;
   &lt;/extension&gt;
&lt;/plugin&gt;
</code></pre>

<p>Create, and export your plug-in as "test.myapp_1.0.0.jar". Then you can use it as follows:</p>

<ol>
<li>Copy test.myapp_1.0.0.jar to your Eclipse/dropins/ folder</li>
<li><p>Copy all needed plug-ins to the target workspace directory:</p>

<p>cp -r projects/* NewWorkspace/</p></li>
<li><p>Import needed projects into the workspace:</p>

<p>eclipse -nosplash -application test.myapp.App -data NewWorkspace -import /path/to/NewWorkspace/project1 -import /path/to/NewWorkspace/project2 etc...</p></li>
<li><p>Now, you can safely remove test.myapp_1.0.0.jar from the Eclipse/dropins/ folder.</p></li>
</ol>

<p>I've uploaded all the code, including the exported plug-in here: <a href="https://github.com/spektom/eclipse-import">https://github.com/spektom/eclipse-import</a></p>
