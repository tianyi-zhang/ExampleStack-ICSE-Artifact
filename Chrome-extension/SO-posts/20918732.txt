<p>I have got many issues as well with this tutorial, but I finally fixed it.
what I did :</p>

<ul>
<li>Change </li>
</ul>

<blockquote>
  <p>int scaleFactor = Math.<strong>min</strong>(photoW/targetW, photoH/targetH);</p>
</blockquote>

<p>by</p>

<blockquote>
  <p>int scaleFactor = Math.<strong>max</strong>(photoW/targetW, photoH/targetH);</p>
</blockquote>

<p>was the key thing. Before that i got blank image instead of the picture.</p>

<ul>
<li>I put a default picture in my view. It may not be an all-around answer but I thought it gives a better user experience anyway.</li>
<li>You can use <a href="http://blog-emildesign.rhcloud.com/?p=590" rel="nofollow">http://blog-emildesign.rhcloud.com/?p=590</a> to get a working decodeSampledBitmapFromFile example.</li>
<li><p>Otherwise use some of my code here :</p>

<pre><code>WindowManager wm = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
Display display = wm.getDefaultDisplay();
Point size = new Point();
display.getSize(size);
mWidth = size.x;
mHeight = size.y;
...

private void setPic() {

        int targetW = mWidth;
        int targetH = mHeight;
        // Get the dimensions of the bitmap
        BitmapFactory.Options bmOptions = new BitmapFactory.Options();
        bmOptions.inJustDecodeBounds = true;

        BitmapFactory.decodeFile(mCurrentPhotoPath, bmOptions);
        int photoW = bmOptions.outWidth;
        int photoH = bmOptions.outHeight;

        // Determine how much to scale down the image
        int scaleFactor = Math.max(photoW/targetW, photoH/targetH);
        bmOptions.inPreferredConfig = Bitmap.Config.RGB_565;
        // Decode the image file into a Bitmap sized to fill the View
        bmOptions.inJustDecodeBounds = false;
        bmOptions.inSampleSize = scaleFactor;
        bmOptions.inPurgeable = true;

        Bitmap bitmap = BitmapFactory.decodeFile(mCurrentPhotoPath,                 
        bmOptions);
        mImageView.setImageBitmap(bitmap);
}
</code></pre></li>
</ul>
