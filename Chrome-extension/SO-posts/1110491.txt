<p>You need a method like the following, which is a 99% copy from <a href="http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet156.java?view=co">http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet156.java?view=co</a> :</p>

<pre><code>static ImageData convertToSWT(BufferedImage bufferedImage) {
    if (bufferedImage.getColorModel() instanceof DirectColorModel) {
     DirectColorModel colorModel = (DirectColorModel)bufferedImage.getColorModel();
     PaletteData palette = new PaletteData(colorModel.getRedMask(), colorModel.getGreenMask(), colorModel.getBlueMask());
     ImageData data = new ImageData(bufferedImage.getWidth(), bufferedImage.getHeight(), colorModel.getPixelSize(), palette);
     for (int y = 0; y &lt; data.height; y++) {
      for (int x = 0; x &lt; data.width; x++) {
       int rgb = bufferedImage.getRGB(x, y);
       int pixel = palette.getPixel(new RGB((rgb &gt;&gt; 16) &amp; 0xFF, (rgb &gt;&gt; 8) &amp; 0xFF, rgb &amp; 0xFF)); 
       data.setPixel(x, y, pixel);
       if (colorModel.hasAlpha()) {
        data.setAlpha(x, y, (rgb &gt;&gt; 24) &amp; 0xFF);
       }
      }
     }
     return data;  
    } else if (bufferedImage.getColorModel() instanceof IndexColorModel) {
     IndexColorModel colorModel = (IndexColorModel)bufferedImage.getColorModel();
     int size = colorModel.getMapSize();
     byte[] reds = new byte[size];
     byte[] greens = new byte[size];
     byte[] blues = new byte[size];
     colorModel.getReds(reds);
     colorModel.getGreens(greens);
     colorModel.getBlues(blues);
     RGB[] rgbs = new RGB[size];
     for (int i = 0; i &lt; rgbs.length; i++) {
      rgbs[i] = new RGB(reds[i] &amp; 0xFF, greens[i] &amp; 0xFF, blues[i] &amp; 0xFF);
     }
     PaletteData palette = new PaletteData(rgbs);
     ImageData data = new ImageData(bufferedImage.getWidth(), bufferedImage.getHeight(), colorModel.getPixelSize(), palette);
     data.transparentPixel = colorModel.getTransparentPixel();
     WritableRaster raster = bufferedImage.getRaster();
     int[] pixelArray = new int[1];
     for (int y = 0; y &lt; data.height; y++) {
      for (int x = 0; x &lt; data.width; x++) {
       raster.getPixel(x, y, pixelArray);
       data.setPixel(x, y, pixelArray[0]);
      }
     }
     return data;
    }
    return null;
}
</code></pre>

<p>Then you can call it like:</p>

<pre><code>static Image getImage(File file) {
    ImageIcon systemIcon = (ImageIcon) FileSystemView.getFileSystemView().getSystemIcon(file);
    java.awt.Image image = systemIcon.getImage();
    if (image instanceof BufferedImage) {
        return new Image(display, convertToSWT((BufferedImage)image));
    }
    int width = image.getWidth(null);
    int height = image.getHeight(null);
    BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
    Graphics2D g2d = bufferedImage.createGraphics();
    g2d.drawImage(image, 0, 0, null);
    g2d.dispose();
    return new Image(display, convertToSWT(bufferedImage));
}
</code></pre>
