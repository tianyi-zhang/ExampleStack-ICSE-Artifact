<p>According to <a href="http://google.com/codesearch/p?hl=en#uX1GffpyOZk/core/java/android/widget/CompoundButton.java&amp;q=android%20RadioButton&amp;d=4&amp;l=229"><code>CompoundButton.onDraw()</code> source code</a> it's always left-aligned.</p>

<p>(Note the line <code>buttonDrawable.setBounds(0, y, buttonDrawable.getIntrinsicWidth(), y + height);</code>)</p>

<p>You will have to derive a new class from <code>RadioButton</code> and override <code>onDraw()</code>.</p>

<p><strong>EXAMPLE ADDED LATER:</strong></p>

<p>Ok, so here's what you do. Firstly, here's a layout:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    &gt;
&lt;org.test.TestProj.RadioButtonCenter
    android:id="@+id/myview"
    android:layout_width="fill_parent" 
    android:layout_height="100dp" 
    android:layout_centerInParent="true"
    android:text="Button test"
    /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>Secondly here's the custom-drawing RadioButtonCenter:</p>

<pre><code>package org.test.TestProj;

import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.Gravity;
import android.widget.RadioButton;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;

public class RadioButtonCenter extends RadioButton {

    public RadioButtonCenter(Context context, AttributeSet attrs) {
        super(context, attrs);
        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CompoundButton, 0, 0);
        buttonDrawable = a.getDrawable(1);
        setButtonDrawable(android.R.color.transparent);
    }
    Drawable buttonDrawable;


     @Override
        protected void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            if (buttonDrawable != null) {
                buttonDrawable.setState(getDrawableState());
                final int verticalGravity = getGravity() &amp; Gravity.VERTICAL_GRAVITY_MASK;
                final int height = buttonDrawable.getIntrinsicHeight();

                int y = 0;

                switch (verticalGravity) {
                    case Gravity.BOTTOM:
                        y = getHeight() - height;
                        break;
                    case Gravity.CENTER_VERTICAL:
                        y = (getHeight() - height) / 2;
                        break;
                }

            int buttonWidth = buttonDrawable.getIntrinsicWidth();
            int buttonLeft = (getWidth() - buttonWidth) / 2;
            buttonDrawable.setBounds(buttonLeft, y, buttonLeft+buttonWidth, y + height);
                buttonDrawable.draw(canvas);
            }
        }   
}
</code></pre>

<p>Finally, here's an <strong>attrs.xml</strong> file you need to put in <strong>res/values</strong> so the code can get at platform-defined attributes.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;    
     &lt;declare-styleable name="CompoundButton"&gt;
        &lt;attr name="android:button" /&gt;
    &lt;/declare-styleable&gt;
&lt;/resources&gt;
</code></pre>
