<p>You'd need to detect that the intent can be handled by the system.</p>

<pre><code>public static boolean canHandleIntent(final Context context, final Intent intent) {

    if (intent != null) {
        final PackageManager pm = context.getPackageManager();
        if (pm != null) {
            if (pm.queryIntentActivities(intent, 0).size() &gt; 0) {
                return true;
            }
        }
    }

    return false;
}
</code></pre>

<p>If that returns false you should prompt the user to download the app from the market.
Call,</p>

<pre><code>//Market.getViewPackageOnMarket("org.otherapp.sketchapp");

public class Market {

    public static final String Application_BaseMarketUri = "market://details?id=";

    public static final Intent getViewPackageOnMarket(final String package_name) {
        final Intent result = new Intent(Intent.ACTION_VIEW);
        result.setData(Uri.parse(Application_BaseMarketUri + package_name));
        return result;
    }
}
</code></pre>

<p>You'll also need to use startActivityForResult, in your launching activity you need to add these things....</p>

<pre><code>public class MyKillerAppActivity extends Activity {

    // Declare constant for the activity result.
    public static final int ACTIVITYRESULT_GETSKETCH = 1;

    // Call the activity ....
    public void someMethod() {
       startActivityForResult(intent, ACTIVITYRESULT_GETSKETCH);
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if(resultCode == RESULT_OK) {
            if(requestCode == ACTIVITYRESULT_GETSKETCH) {
                handleGetSketchResult(data);

            } /* Handle other results if you need to. */
        }
    }
}
</code></pre>

<p>That's kinda a mouthful but there's more! You'll need to interpret the data that comes back from the app. I don't know the format is for the sketch app you're looking into but here's an example on how to get data from the Gallery. The Gallery app returns you a content provider location to load the image that the user picked. This code locates the file path from the content provider and then opens the file and loads it into a Bitmap object for use.  </p>

<pre><code>public static Bitmap onActivityResult_getImage(Context context, Intent data) {
    Bitmap result = null;
    Uri dataUri = data.getData();
    final String filePath = findPictureFilePath(context, dataUri);
    if(filePath != null) {
        result = BitmapFactory.decodeFile(filePath);
    }
    return result;
}

private static String findPictureFilePath(Context context, Uri dataUri) {
    String filePath = null;
    final String[] projection = { MediaStore.Images.Media.DATA };
    Cursor cursor = null;
    try {
        cursor = context.getContentResolver().query(dataUri, projection, null, null, null);
        int data_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        if(cursor.moveToFirst()) {
            filePath = cursor.getString(data_index);
        }
    } finally {
        if(cursor != null) {
            cursor.close();
        }
    }

    return filePath;
}
</code></pre>
