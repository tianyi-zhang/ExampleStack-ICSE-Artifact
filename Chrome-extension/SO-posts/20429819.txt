<blockquote>
  <p>How is the usage of StringBuilder more efficient than normal String class for string manipulations?</p>
</blockquote>

<p>It's <strong><em>vastly</em></strong> more efficient when you're performing many manipulations in a loop. Consider any string conversion or replacement function that needs to iterate over individual characters, such as this one to escape <code>&lt;, &gt;, &amp;, ", '</code> characters for XML or HTML:</p>

<pre><code>public static String xmlEscape(String s) {
    StringBuilder sb = new StringBuilder(
        (int)Math.min(Integer.MAX_VALUE, s.length() * 5L / 4));
    for (int i = 0; i &lt; s.length(); i++) {
        char c = s.charAt(i);
        if (c == '&lt;') sb.append("&amp;lt;");
        else if (c == '&gt;') sb.append("&amp;gt;");
        else if (c == '&amp;') sb.append("&amp;amp;");
        else if (c == '"') sb.append("&amp;quot;");
        else if (c == '\'') sb.append("&amp;#039;");
        else sb.append(c);
    }
    return sb.toString();
}
</code></pre>

<p>The StringBuilder array is initially sized with a capacity a bit bigger than the input string in order to accommodate the original text plus likely replacements. The output text accumulates in that pre-allocated buffer and it most likely won't need any additional memory allocation during the loop.</p>

<p>If the above function accumulated the output in a String instead of a StringBuilder, it would duplicate the <em>entire</em> output again every single time a single character was processed, degrading it to quadratic (i.e., awful!) performance.</p>

<p>To the second question:</p>

<blockquote>
  <p>Is the statement given in SCJP Guide is wrong?</p>
</blockquote>

<p>To be blunt, yes. It's extremely misleading to say that there will be "abandoned String objects in the String pool". As far as I know, the terminology "String pool" refers only to the <em>intern pool</em> such as used by the <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#intern%28%29" rel="nofollow"><code>String.intern()</code></a> method. The only time Strings are automatically put in the intern pool is when the ClassLoader loads a class and loads String literal constants from the source code into memory.</p>

<p>Manipulating String objects at run time certainly <em>does not</em> put extra objects in the intern pool (unless you call <code>.intern()</code> on purpose).</p>

<p>What the SCJP Guide should say is:</p>

<blockquote>
  <p>String objects are immutable, so if you choose to do a lot of manipulations with String objects, you will end up with a lot of abandoned String objects in the <strong>heap</strong>.</p>
</blockquote>

<p>Abandoned objects on the heap aren't the biggest problem though, because the garbage collector will swiftly eat them. The real reason to use StringBuilders when doing multiple manipulations is to avoid unnecessary copying of the characters in the first place. That makes a massive difference to the performance as shown in @jmiserez' benchmark.</p>
