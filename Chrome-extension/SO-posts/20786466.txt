<p>I had work with the FaceDetection some time ago. When I was working on that the onFaceDetection didn't work for me, so,I found another way for work on it.</p>

<p>I worked with PreviewCallback, this method takes each frame and you can use it to recognize faces. The only problem here is the format, the default format is NV21 , and you can change it  by  setPreviewFormat(int), but that didn't work for me too, so, I had to make de conversion for get a Bitmap type that recives the FaceDetector. Here is my code:</p>

<pre><code>public PreviewCallback mPreviewCallback = new PreviewCallback(){
@Override
public void onPreviewFrame(byte[] data, Camera camera) {

  Camera.Size size = camera.getParameters().getPreviewSize();
   Bitmap mfoto_imm = this.getBitmapFromNV21(data, size.width, size.height, true);  //here I get the Bitmap from getBitmapFromNV21 that is the conversion method    
    Bitmap mfoto= mfoto_imm.copy(Bitmap.Config.RGB_565, true); 
    imagen.setImageBitmap(mfoto);
    int alto= mfoto.getHeight();
    int ancho= mfoto.getWidth();
    int count;

   canvas= new Canvas(mfoto);
       dibujo.setColor(Color.GREEN);
   dibujo.setAntiAlias(true);
   dibujo.setStrokeWidth(8);
   canvas.drawBitmap(mfoto, matrix, dibujo);


    FaceDetector mface= new FaceDetector(ancho,alto,1);
    FaceDetector.Face [] face= new FaceDetector.Face[1];
    count = mface.findFaces(mfoto, face);


     PointF midpoint = new PointF();
     int fpx = 0;
         int fpy = 0;

     if (count &gt; 0) {

face[count-1].getMidPoint(midpoint); // you have to take the last one less 1
         fpx= (int)midpoint.x;    // middle pint of  the face in x.
         fpy= (int)midpoint.y;    // middle point of the face in y.

     }

           canvas.drawCircle(fpx, fpy, 10, dibujo); // here I draw a circle on the middle of the face
     imagen.invalidate();
</code></pre>

<p>}
}</p>

<p>and here are the conversion methods.</p>

<pre><code>public Bitmap getBitmapFromNV21(byte[] data, int width, int height, boolean rotated) {

      Bitmap bitmap = null;
      int[] pixels = new int[width * height];

      // Conver the  array 
      this.yuv2rgb(pixels, data, width, height, rotated);


      if(rotated)
      {
        bitmap = Bitmap.createBitmap(pixels, height, width, Bitmap.Config.RGB_565);
      }
      else
      {
        bitmap = Bitmap.createBitmap(pixels, width, height, Bitmap.Config.RGB_565);
      }

      return bitmap;
    }


public void yuv2rgb(int[] out, byte[] in, int width, int height, boolean rotated) 
           throws NullPointerException, IllegalArgumentException 
         { 
          final int size = width * height; 


          if(out == null) throw new NullPointerException("buffer 'out' == null"); 
          if(out.length &lt; size) throw new IllegalArgumentException("buffer 'out' length &lt; " + size); 
          if(in == null) throw new NullPointerException("buffer 'in' == null"); 
          if(in.length &lt; (size * 3 / 2)) throw new IllegalArgumentException("buffer 'in' length != " + in.length + " &lt; " + (size * 3/ 2)); 

          // YCrCb
          int Y, Cr = 0, Cb = 0;


          int Rn = 0, Gn = 0, Bn = 0;
          for(int j = 0, pixPtr = 0, cOff0 = size - width; j &lt; height; j++) { 
           if((j &amp; 0x1) == 0)
            cOff0 += width;
           int pixPos = height - 1 - j; 
           for(int i = 0, cOff = cOff0; i &lt; width; i++, cOff++, pixPtr++, pixPos += height) { 

            // Get Y
            Y = 0xff &amp; in[pixPtr]; // 0xff es por el signo

            // Get Cr y Cb
            if((pixPtr &amp; 0x1) == 0) { 
             Cr = in[cOff]; 
             if(Cr &lt; 0) Cr += 127; else Cr -= 128;
             Cb = in[cOff + 1]; 
             if(Cb &lt; 0) Cb += 127; else Cb -= 128; 

             Bn = Cb + (Cb &gt;&gt; 1) + (Cb &gt;&gt; 2) + (Cb &gt;&gt; 6);
             Gn = - (Cb &gt;&gt; 2) + (Cb &gt;&gt; 4) + (Cb &gt;&gt; 5) - (Cr &gt;&gt; 1) + (Cr &gt;&gt; 3) + (Cr &gt;&gt; 4) + (Cr &gt;&gt; 5);
             Rn = Cr + (Cr &gt;&gt; 2) + (Cr &gt;&gt; 3) + (Cr &gt;&gt; 5);
            } 


            int R = Y + Rn; 
            if(R &lt; 0) R = 0; else if(R &gt; 255) R = 255; 
            int B = Y + Bn; 
            if(B &lt; 0) B = 0; else if(B &gt; 255) B = 255; 
            int G = Y + Gn; 
            if(G &lt; 0) G = 0; else if(G &gt; 255) G = 255; //At this point the code could apply some filter From the separate components of the image.For example, they could swap 2 components or remove one

            int rgb = 0xff000000 | (R &lt;&lt; 16) | (G &lt;&lt; 8) | B; //Depending on the option the output buffer is filled or not applying the transformation
            if(rotated)
             out[pixPos] = rgb; 
            else
             out[pixPtr] = rgb;
           } 
          } 
         }
};
</code></pre>

<p>The setPreviewFormat(int) in some devices doesn't work, but maybe you can try and create the Bitmap without use the conversion. 
I hope this help you.</p>
