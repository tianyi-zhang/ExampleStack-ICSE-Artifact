<p>Your code and configuration looks good in general and I was able to run it on local environment. Please remove <strong>@Component</strong> annotation from your <code>SimpleCORSFilter</code>, because you use it as a plain Servlet Filter and it doesn't need to be a part of Spring context. </p>

<p><strong>UPD.</strong> Tomcat 7 has its own <a href="http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#CORS_Filter">CORS filter implementation</a>. You can check documentation and source code for more details. I have modified the headers to reflect its default configuration, should work as expected now.</p>

<p>Please also check nice resource which describes <a href="http://enable-cors.org/server.html">CORS configuration for different platforms</a>.</p>

<p>Here is my working example</p>

<p>Controller:</p>

<pre><code>@Controller
public class UserController {

    private static Logger log = Logger.getAnonymousLogger();

    @RequestMapping(
            value = "/register",
            method = RequestMethod.POST,
            consumes = "application/x-www-form-urlencoded")
    @ResponseBody
    public String register(@RequestParam(value = "user") String username,
                           @RequestParam(value = "password") String password) {
        log.info(username + " " + password);
        return "true";
    }

}
</code></pre>

<p>Filter:</p>

<pre><code>public class CorsFilter implements Filter {

    private static final Logger log = Logger.getAnonymousLogger();

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {

    }

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        log.info("Adding Access Control Response Headers");
        HttpServletResponse response = (HttpServletResponse) servletResponse;
        response.setHeader("Access-Control-Allow-Origin", "*");
        response.setHeader("Access-Control-Allow-Credentials", "true");
        response.setHeader("Access-Control-Allow-Methods", "POST, GET, HEAD, OPTIONS");
        response.setHeader("Access-Control-Allow-Headers", "Origin, Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers");
        filterChain.doFilter(servletRequest, servletResponse);
    }

    @Override
    public void destroy() {

    }
}
</code></pre>

<p>Filter mapping in web.xml:</p>

<pre><code>    &lt;filter&gt;
        &lt;filter-name&gt;cors&lt;/filter-name&gt;
        &lt;filter-class&gt;com.mudalov.filter.CorsFilter&lt;/filter-class&gt;
    &lt;/filter&gt;

    &lt;filter-mapping&gt;
        &lt;filter-name&gt;cors&lt;/filter-name&gt;
        &lt;url-pattern&gt;/register&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
</code></pre>

<p>JS to perform request from separate web app (JQuery):</p>

<pre><code>$(document).ready(function() {
    $('#buttonId').click(function() {
        $.ajax({
            type: "POST",
            url: "http://localhost:8080/register",
            success : function(data){
                console.log(data);
            },
            data : {
                user : 'test.user@acme.com',
                password : 'password'
            }
        });
    }
}
</code></pre>
