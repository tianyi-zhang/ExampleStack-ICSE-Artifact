<p>Here is a helper method to do the job.</p>

<p>First of all you'll need a new Comparator interface, as <a href="http://download.oracle.com/javase/6/docs/api/java/util/Comparator.html" rel="nofollow">Comparator</a> doesn't support primitives:</p>

<pre><code>public interface IntComparator{
    public int compare(int a, int b);
}
</code></pre>

<p>(You could of course do it with autoboxing / unboxing but I won't go there, that's ugly)</p>

<p>Then, here's a helper method to sort an int array using this comparator:</p>

<pre><code>public static void sort(final int[] data, final IntComparator comparator){
    for(int i = 0; i &lt; data.length + 0; i++){
        for(int j = i; j &gt; 0
            &amp;&amp; comparator.compare(data[j - 1], data[j]) &gt; 0; j--){
            final int b = j - 1;
            final int t = data[j];
            data[j] = data[b];
            data[b] = t;
        }
    }
}
</code></pre>

<p>And here is some client code. A stupid comparator that sorts all numbers that consist only of the digit '9' to the front (again sorted by size) and then the rest (for whatever good that is):</p>

<pre><code>final int[] data =
    { 4343, 544, 433, 99, 44934343, 9999, 32, 999, 9, 292, 65 };
sort(data, new IntComparator(){

    @Override
    public int compare(final int a, final int b){
        final boolean onlyNinesA = this.onlyNines(a);
        final boolean onlyNinesB = this.onlyNines(b);
        if(onlyNinesA &amp;&amp; !onlyNinesB){
            return -1;
        }
        if(onlyNinesB &amp;&amp; !onlyNinesA){
            return 1;
        }

        return Integer.valueOf(a).compareTo(Integer.valueOf(b));
    }

    private boolean onlyNines(final int candidate){
        final String str = String.valueOf(candidate);
        boolean nines = true;
        for(int i = 0; i &lt; str.length(); i++){
            if(!(str.charAt(i) == '9')){
                nines = false;
                break;
            }
        }
        return nines;
    }
});

System.out.println(Arrays.toString(data));
</code></pre>

<p>Output:</p>

<pre><code>[9, 99, 999, 9999, 32, 65, 292, 433, 544, 4343, 44934343]
</code></pre>

<p>The sort code was taken from <a href="http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html#sort%28int%5b%5d%29" rel="nofollow">Arrays.sort(int[])</a>, and I only used the version that is optimized for tiny arrays. For a real implementation you'd probably want to look at the source code of the internal method <code>sort1(int[], offset, length)</code> in the <a href="http://download.oracle.com/javase/6/docs/api/java/util/Arrays.html" rel="nofollow">Arrays</a> class.</p>
