<p>Using the <code>String.substring(int)</code> method will be the least memory used</p>

<pre><code>public static String hej(String input)
{
    int i;
    for(i = 0; i &lt; input.length(); i++)
        if(input.charAt(i) != '0')
            break;
    return input.substring(i);
}
</code></pre>

<p>Source code from <code>String</code>:</p>

<pre><code>public String substring(int beginIndex) {
    if (beginIndex &lt; 0) {
        throw new StringIndexOutOfBoundsException(beginIndex);
    }
    int subLen = value.length - beginIndex;
    if (subLen &lt; 0) {
        throw new StringIndexOutOfBoundsException(subLen);
    }
    return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);
}
</code></pre>

<p>This calls the <code>String(char[], int, int)</code> constructor</p>

<pre><code>public String(char value[], int offset, int count) {
    if (offset &lt; 0) {
        throw new StringIndexOutOfBoundsException(offset);
    }
    if (count &lt;= 0) {
        if (count &lt; 0) {
            throw new StringIndexOutOfBoundsException(count);
        }
        if (offset &lt;= value.length) {
            this.value = "".value;
            return;
        }
    }
    // Note: offset or count might be near -1&gt;&gt;&gt;1.
    if (offset &gt; value.length - count) {
        throw new StringIndexOutOfBoundsException(offset + count);
    }
    this.value = Arrays.copyOfRange(value, offset, offset+count);
}
</code></pre>

<p>Using a <code>StringBuilder</code> uses a bit of memory to create the <code>StringBuilder</code> for the size of the input, while using <code>String.substring(int)</code> will just use up as much memory as needed to represent the modified input</p>
