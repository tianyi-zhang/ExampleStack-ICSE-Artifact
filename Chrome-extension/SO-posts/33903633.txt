<p>This code can sort a key-value map in both orders i.e. ascending and descending.</p>

<pre><code>&lt;K, V extends Comparable&lt;V&gt;&gt; Map&lt;K, V&gt; sortByValues
     (final Map&lt;K, V&gt; map, int ascending)
{
     Comparator&lt;K&gt; valueComparator =  new Comparator&lt;K&gt;() {         
        private int ascending;
        public int compare(K k1, K k2) {
            int compare = map.get(k2).compareTo(map.get(k1));
            if (compare == 0) return 1;
            else return ascending*compare;
        }
        public Comparator&lt;K&gt; setParam(int ascending)
        {
            this.ascending = ascending;
            return this;
        }
    }.setParam(ascending);

    Map&lt;K, V&gt; sortedByValues = new TreeMap&lt;K, V&gt;(valueComparator);
    sortedByValues.putAll(map);
    return sortedByValues;
}
</code></pre>

<p>As an example:</p>

<pre><code>Map&lt;Integer,Double&gt; recommWarrVals = new HashMap&lt;Integer,Double&gt;();
recommWarrVals = sortByValues(recommWarrVals, 1);  // Ascending order
recommWarrVals = sortByValues(recommWarrVals,-1);  // Descending order
</code></pre>
