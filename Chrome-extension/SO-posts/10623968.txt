<p>Place the text file in your project's assets directory and then extract it to the filesystem with code like the one in the following thread:
<a href="http://stackoverflow.com/questions/4447477/android-how-to-copy-files-in-assets-to-sdcard">Android: How to copy files in &#39;assets&#39; to sdcard?</a></p>

<p>EDIT: Here is some code that I use. For sourceFileName, pass in the name of the assets file relative to the assets folder (e.g. if you have myFile.txt in the assets folder, pass myFile.txt). For the destination file, pass a full path (e.g. /data/data/com.mycompany/mypackage/myFile.txt). context is the current activity (e.g. MyActivity.this).</p>

<pre><code>private boolean copyFile(Context context, String sourceFileName, String destFileName)
{
    AssetManager assetManager = context.getAssets();

    File destFile = new File(destFileName);

    File destParentDir = destFile.getParentFile();
    destParentDir.mkdir();

    InputStream in = null;
    OutputStream out = null;
    try
    {
        in = assetManager.open(sourceFileName);
        out = new FileOutputStream(destFile);

        byte[] buffer = new byte[1024];
        int read;
        while ((read = in.read(buffer)) != -1)
        {
            out.write(buffer, 0, read);
        }
        in.close();
        in = null;
        out.flush();
        out.close();
        out = null;

        return true;
    }
    catch (Exception e)
    {
        e.printStackTrace();
    }

    return false;
}
</code></pre>

<p>EDIT2: Turns out that the /system partition is mounted as read-only, even on rooted devices. This may help: <a href="http://stackoverflow.com/questions/5481395/android-how-to-mount-filesystem-in-rw-from-within-my-apk-rooted-of-course">Android: how to mount filesystem in RW from within my APK? (rooted, of course)</a></p>
