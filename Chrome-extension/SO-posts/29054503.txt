<p>Your algorithm is right. You just have to define properly the <code>equals()</code> method for <code>Daily_Stock_Pojo</code>. <code>List#removeAll()</code> will use the <code>equals()</code> to perform the match and remove the elements.</p>

<p>If you don't define a proper <code>equals()</code>, the one define in <code>Object</code> class is used (all classes inherit from <code>Object</code> class implicitly) and the implementation will only check references (<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)" rel="nofollow">Object java doc for equals</a>), and that's generally <strong>not</strong> what you want.</p>

<p>As a good measure you should also define a <code>hashCode()</code> method that overrides the one from <code>Object</code>. This is useful for instance if you intend to use your object as a key in a <code>HashMap</code> or as an element in a <code>HashSet</code>.</p>

<p>If you use an IDE like Eclipse, there should be an option to <em>generate</em> these two methods. The idea is to use the class attributes that will determine <em>how</em> 2 objects are identical.</p>

<p><strong>EDIT</strong>
Following is the default implementation given by Eclipse when using the menu "Source>Generate hashCode() and equals()...". I choose to generate on <strong>all</strong> attributes from the class. If you don't want an attribute to be part of the <em>identity</em> of <code>Daily_Stock_Pojo</code>, remove it from the methods.</p>

<pre><code>   @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((Calendar_Date == null) ? 0 : Calendar_Date.hashCode());
        result = prime * result + Item_Id;
        result = prime * result + ((MRP == null) ? 0 : MRP.hashCode());
        result = prime * result + Stock_Volume;
        result = prime * result + Store_Id;
        result = prime * result
                + ((objectId == null) ? 0 : objectId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Daily_Stock_Pojo other = (Daily_Stock_Pojo) obj;
        if (Calendar_Date == null) {
            if (other.Calendar_Date != null)
                return false;
        } else if (!Calendar_Date.equals(other.Calendar_Date))
            return false;
        if (Item_Id != other.Item_Id)
            return false;
        if (MRP == null) {
            if (other.MRP != null)
                return false;
        } else if (!MRP.equals(other.MRP))
            return false;
        if (Stock_Volume != other.Stock_Volume)
            return false;
        if (Store_Id != other.Store_Id)
            return false;
        if (objectId == null) {
            if (other.objectId != null)
                return false;
        } else if (!objectId.equals(other.objectId))
            return false;
        return true;
    }
</code></pre>

<p>Note:
You should apply Java convention standards, i.e.</p>

<pre><code>Date Calendar_Date;

public Date getCalendar_Date() {
    return Calendar_Date;
}
</code></pre>

<p>Should be:</p>

<pre><code>Date calendarDate;

public Date getCalendarDate() {
    return calendarDate;
}
</code></pre>

<p>Class members start with a lowercase. No hyphen in class members or class names. Use <code>CamelCase</code> (for a class name) or <code>camelCase</code> (for a member name).  </p>
