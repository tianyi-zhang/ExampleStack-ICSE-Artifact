<p>A slightly (ok, I admit, quite a bit) more verbose, but in most cases faster and more memory efficient way of doing the same, is to load the image directly into a <code>TYPE_INT_ARGB</code> image. </p>

<p>If your images are large, you'll benefit quite a bit from doing it this way, over first loading into a <code>byte</code> type. If your images are small, it might not be worth the extra code complexity, as you'll hardly notice the difference.</p>

<p>Anyway, you can do it like this:</p>

<pre><code>// Create input stream
ImageInputStream input = ImageIO.createImageInputStream(file);

try {
    // Get the reader
    Iterator&lt;ImageReader&gt; readers = ImageIO.getImageReaders(input);

    if (!readers.hasNext()) {
        throw new IllegalArgumentException("No reader for: " + file); // Or simply return null
    }

    ImageReader reader = readers.next();

    try {
        // Set input
        reader.setInput(input);

        // Configure the param to use the destination type you want
        ImageReadParam param = reader.getDefaultReadParam();
        param.setDestinationType(ImageTypeSpecifier.createFromBufferedImageType(BufferedImage.TYPE_INT_ARGB));

        // Finally read the image, using settings from param
        BufferedImage image = reader.read(0, param);
    }
    finally {
        // Dispose reader in finally block to avoid memory leaks
        reader.dispose();
    }
}
finally {
    // Close stream in finally block to avoid resource leaks
    input.close();
}
</code></pre>
