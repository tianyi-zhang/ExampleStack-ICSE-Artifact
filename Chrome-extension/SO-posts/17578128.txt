<p>If iteration of the structure is your primary goal, a <code>List&lt;ConditionResult&gt;</code> would seem to be the most appropriate choice for your situation, where ConditionResult is given below.</p>

<p>If maintaining a count of the combinations is the sole goal, then a <code>Map&lt;ConditionResult,Integer&gt;</code> would also work well.</p>

<pre><code>public class ConditionResult
{
    // Assuming strings for the data types,
    // but an enum might be more appropriate.
    private String condition;
    private String result;

    public ConditionResult(String condition, String result)
    {
        this.condition = condition;
        this.result = result;
    }

    public String getCondition() { return condition; }
    public String getResult() { return result; }

    public boolean equals(Object object)
    {
        if (this == object) return true;
        if (object == null) return false;
        if (getClass() != object.getClass()) return false;
        ConditionResult other = (ConditionResult) object;
        if (condition == null)
        {
            if (other.condition != null) return false;
        } else if (!condition.equals(other.condition)) return false;
        if (result == null)
        {
            if (other.result != null) return false;
        } else if (!result.equals(other.result)) return false;

        return true;
    }

    // Need to implement hashCode as well, for equals consistency...

}
</code></pre>

<p><br>
Iteration and counting could be done as:</p>

<pre><code>/**
 * Count the instances of condition to result in the supplied results list
 */
public int countInstances(List&lt;ConditionResult&gt; results, String condition, String result)
{
    int count = 0;
    ConditionResult match = new ConditionResult(condition,result);
    for (ConditionResult result : results)
    {
        if (match.equals(result)) count++;
    }

    return count;
}
</code></pre>
