<p>I was trying to use hibernate4 with Spring 3.2 and wrap it in JPA.  </p>

<p>I ended up creating my own class.... copied the entire contents of the org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter into my own class file and modifying the output of one subroutine to change the MySQL Dialect to MySQL5InnoDBDialect.  I guess I could have extended the class.</p>

<p>Anyway...</p>

<p>Modified as:</p>

<pre><code>package com.imk.dao.hibernate;

public class HibernateJpaVendorAdapter extends AbstractJpaVendorAdapter {

[ snip snip snip --- use the original code ]

protected Class determineDatabaseDialectClass(Database database) {
    switch (database) {
    case DB2:
        return DB2Dialect.class;
    case DERBY:
        return DerbyDialect.class;
    case H2:
        return H2Dialect.class;
    case HSQL:
        return HSQLDialect.class;
    case INFORMIX:
        return InformixDialect.class;
    case MYSQL:
        return MySQL5InnoDBDialect.class;
    case ORACLE:
        return Oracle9iDialect.class;
    case POSTGRESQL:
        return PostgreSQLDialect.class;
    case SQL_SERVER:
        return SQLServerDialect.class;
    case SYBASE:
        return SybaseDialect.class;
    default:
        return null;
    }
}

}
</code></pre>

<p>You might think this is a 'hack', but, I suppose it will work.  In the Spring context config, I added:</p>

<pre><code>&lt;bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;
    &lt;property name="dataSource" ref="dataSource" /&gt;
    &lt;property name="persistenceUnitName" value="MosJPA" /&gt;
    &lt;property name="jpaVendorAdapter"&gt;
        &lt;bean class="com.imk.dao.hibernate.HibernateJpaVendorAdapter"&gt;
            &lt;property name="database" value="MYSQL" /&gt;
        &lt;/bean&gt;
    &lt;/property&gt;
&lt;/bean&gt;
</code></pre>

<p>Then my class is used for the "database" adapter bean.  (no component scanning, my classes are listed in META-INF/persistence.xml (the default location))</p>
