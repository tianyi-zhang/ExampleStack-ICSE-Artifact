<p>Normally you'd set the image on the surface of the <a href="https://developer.android.com/reference/android/widget/ImageButton.html" rel="nofollow">ImageButton</a> using the <a href="https://developer.android.com/reference/android/widget/ImageView.html#setImageResource%28int%29" rel="nofollow">setImageResource</a> method (<a href="https://developer.android.com/reference/android/widget/ImageButton.html" rel="nofollow">ImageButton</a> inherits it from <a href="https://developer.android.com/reference/android/widget/ImageView.html" rel="nofollow">ImageView</a>), but that method isn't available for <a href="http://developer.android.com/reference/android/widget/RemoteViews.html" rel="nofollow">RemoteViews</a>.</p>

<p><a href="http://developer.android.com/reference/android/widget/RemoteViews.html" rel="nofollow">RemoteViews</a> offers a corresponding <a href="http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewResource%28int,%20int%29" rel="nofollow">setImageViewResource</a> method that does what you want (as well as <a href="http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewBitmap%28int,%20android.graphics.Bitmap%29" rel="nofollow">setImageViewBitmap</a> and <a href="http://developer.android.com/reference/android/widget/RemoteViews.html#setImageViewUri%28int,%20android.net.Uri%29" rel="nofollow">setImageViewUri</a> depending on how you'd like to provide the image data).</p>

<p>The code to set the image (say, within your BroadcastReceiver's onReceive method) would look something like this:</p>

<pre><code>@Override
public void onReceive(Context context, Intent intent) {
    int appWidgetId = intent.getIntExtra("appWidgetId", -1);    
    RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.main);
    views.setImageViewResource(R.id.imageButton1, R.drawable.awesome_image);
    AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
    appWidgetManager.updateAppWidget(appWidgetId, views);
}
</code></pre>

<p>Note that the code above assumes you've added the id of the widget to be manipulated as an extra to the broadcast intent (wrapped in a PendingIntent that is sent when the user clicks the ImageButton) using the key "appWidgetId". You'll most likely want to do that in the onUpdate method of your AppWidgetProvider, like so:</p>

<pre><code>@Override
public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
    for (int i = 0; i &lt; appWidgetIds.length; i++) {
        int appWidgetId = appWidgetIds[i];
        Intent intent = new Intent ("YourActionHere");
        intent.putExtra("appWidgetId", appWidgetId);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, i, intent, 0);

        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.main);
        views.setImageViewResource(R.id.imageButton1, R.drawable.initial_image);

        views.setOnClickPendingIntent(R.id.imageButton1, pendingIntent);
        appWidgetManager.updateAppWidget(appWidgetId, views);
    }
}
</code></pre>
