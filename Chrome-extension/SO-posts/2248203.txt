<p>From the <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ThreadPoolExecutor.html" rel="nofollow">docs</a>:</p>

<blockquote>
  <p>Note: When actions are enclosed in
  tasks (such as FutureTask) either
  explicitly or via methods such as
  submit, these task objects catch and
  maintain computational exceptions, and
  so they do not cause abrupt
  termination, and the internal
  exceptions are not passed to this
  method.</p>
</blockquote>

<p>When you submit a Runnable, it'll get wrapped in a Future.</p>

<p>Your afterExecute should be something like this:</p>

<pre><code>  protected void afterExecute(Runnable r, Throwable t) {
      super.afterExecute(r, t);
      if (t == null &amp;&amp; r instanceof Future&lt;?&gt;) {
        try {
          Future&lt;?&gt; future = (Future&lt;?&gt;) r;
          if (future.isDone()) {
            future.get();
          }
        } catch (CancellationException ce) {
            t = ce;
        } catch (ExecutionException ee) {
            t = ee.getCause();
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt(); // ignore/reset
        }
      }
      if (t != null) {
            System.out.println(t);
      }
 }
</code></pre>
