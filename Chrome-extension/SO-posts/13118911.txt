<p>Forget about re-inventing lazy-SSL or whatever. Simply use SSL and fix your code. And <em>do not</em> turn off certificate verification and trust all certificates. Using a self-signed certificate is not particularly difficult, post what you have tried and people will point you in the right direction. Generally you need to: </p>

<ol>
<li>get the certificate</li>
<li>put it in a raw resource in your app</li>
<li>read it and initialize a <code>KeyStore</code> with it</li>
<li>pass this to your SSL socket factory</li>
<li>initialize your HTTP client with the socket factory from 4.</li>
</ol>

<p>This is how to do it if you are using <code>HttpClient</code>, the point is registering the <code>SSLSocketFactory</code>: </p>

<pre><code>KeyStore ts = KeyStore.getInstance("BKS");
InputStream in = getResources().openRawResource(R.raw.mytruststore);
ts.load(in, TRUSTSTORE_PASSWORD.toCharArray());

SchemeRegistry schemeRegistry = new SchemeRegistry();
schemeRegistry.register(new Scheme("http", PlainSocketFactory
                .getSocketFactory(), 80));
SSLSocketFactory sslSocketFactory = new SSLSocketFactory(ts);
schemeRegistry.register(new Scheme("https", sslSocketFactory, 443));
HttpParams params = new BasicHttpParams();
ClientConnectionManager cm = 
    new ThreadSafeClientConnManager(params, schemeRegistry);

HttpClient client = new DefaultHttpClient(cm, params);
</code></pre>

<p>See this for more examples, a sample project and some background information: <a href="http://nelenkov.blogspot.com/2011/12/using-custom-certificate-trust-store-on.html" rel="nofollow">http://nelenkov.blogspot.com/2011/12/using-custom-certificate-trust-store-on.html</a></p>
