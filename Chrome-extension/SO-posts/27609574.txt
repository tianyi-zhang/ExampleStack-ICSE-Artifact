<p>The Google tutorial <a href="https://developer.android.com/training/implementing-navigation/lateral.html" rel="nofollow">here</a> does not include code to show you how to support gingerbread devices with tabs, viewpager and actionbar. I have edited it to work on Gingerbread below. The main changes are in the activity, the layouts are provided for convenience.N.B. need to add Android support libraries and have v7-appcompat as a reference library - see <a href="https://developer.android.com/tools/support-library/setup.html" rel="nofollow">here</a></p>

<p><strong>MyTwoListItemsActivity.java</strong></p>

<pre><code>import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBar.Tab;
import android.support.v7.app.ActionBarActivity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class MyTwoListItemsActivity extends ActionBarActivity implements
    ActionBar.TabListener
{

  /**
   * The {@link android.support.v4.view.PagerAdapter} that will provide
   * fragments for each of the three primary sections of the app. We use a
   * {@link android.support.v4.app.FragmentPagerAdapter} derivative, which will
   * keep every loaded fragment in memory. If this becomes too memory intensive,
   * it may be best to switch to a
   * {@link android.support.v4.app.FragmentStatePagerAdapter}.
   */
  AppSectionsPagerAdapter mAppSectionsPagerAdapter;

  /**
   * The {@link ViewPager} that will display the three primary sections of the
   * app, one at a time.
   */
  ViewPager mViewPager;

  public void onCreate(Bundle savedInstanceState)
  {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // Create the adapter that will return a fragment for each of the three
    // primary sections
    // of the app.
    mAppSectionsPagerAdapter = new AppSectionsPagerAdapter(
        getSupportFragmentManager());

    // Set up the action bar.
    final ActionBar actionBar = getSupportActionBar();

    // Specify that the Home/Up button should not be enabled, since there is no
    // hierarchical
    // parent.
    actionBar.setHomeButtonEnabled(true);

    // Specify that we will be displaying tabs in the action bar.
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

    // Set up the ViewPager, attaching the adapter and setting up a listener for
    // when the
    // user swipes between sections.
    mViewPager = (ViewPager) findViewById(R.id.pager);
    mViewPager.setAdapter(mAppSectionsPagerAdapter);
    mViewPager
        .setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener()
        {
          @Override
          public void onPageSelected(int position)
          {
            // When swiping between different app sections, select the
            // corresponding tab.
            // We can also use ActionBar.Tab#select() to do this if we have a
            // reference to the
            // Tab.
            actionBar.setSelectedNavigationItem(position);
          }
        });

    // For each of the sections in the app, add a tab to the action bar.
    for (int i = 0; i &lt; mAppSectionsPagerAdapter.getCount(); i++)
    {
      // Create a tab with text corresponding to the page title defined by the
      // adapter.
      // Also specify this Activity object, which implements the TabListener
      // interface, as the listener for when this tab is selected.
      actionBar.addTab(actionBar.newTab()
          .setText(mAppSectionsPagerAdapter.getPageTitle(i))
          .setTabListener(this));
    }
  }

  @Override
  public void onTabReselected(Tab tab,
      android.support.v4.app.FragmentTransaction fragmentTransaction)
  {
  }

  @Override
  public void onTabSelected(Tab tab,
      android.support.v4.app.FragmentTransaction fragmentTransaction)
  {
    // When the given tab is selected, switch to the corresponding page in the
    // ViewPager.
    mViewPager.setCurrentItem(tab.getPosition());

  }

  @Override
  public void onTabUnselected(Tab tab,
      android.support.v4.app.FragmentTransaction fragmentTransaction)
  {

  }

  /**
   * A {@link FragmentPagerAdapter} that returns a fragment corresponding to one
   * of the primary sections of the app.
   */
  public static class AppSectionsPagerAdapter extends FragmentPagerAdapter
  {

    public AppSectionsPagerAdapter(FragmentManager fm)
    {
      super(fm);
    }

    @Override
    public Fragment getItem(int i)
    {
      switch (i)
      {
        case 0:
          // The first section of the app is the most interesting -- it offers
          // a launchpad into the other demonstrations in this example
          // application.
          return new LaunchpadSectionFragment();

        default:
          // The other sections of the app are dummy placeholders.
          Fragment fragment = new DummySectionFragment();
          Bundle args = new Bundle();
          args.putInt(DummySectionFragment.ARG_SECTION_NUMBER, i + 1);
          fragment.setArguments(args);
          return fragment;
      }
    }

    @Override
    public int getCount()
    {
      return 2;
    }

    @Override
    public CharSequence getPageTitle(int position)
    {
      return "Section " + (position + 1);
    }
  }

  /**
   * A fragment that launches other parts of the demo application.
   */
  public static class LaunchpadSectionFragment extends Fragment
  {

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState)
    {
      View rootView = inflater.inflate(R.layout.fragment_section_launchpad,
          container, false);

      // Demonstration of navigating to external activities.
      rootView.findViewById(R.id.demo_external_activity).setOnClickListener(
          new View.OnClickListener()
          {
            @Override
            public void onClick(View view)
            {
              // Create an intent that asks the user to pick a photo, but using
              // FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET, ensures that relaunching
              // the application from the device home screen does not return
              // to the external activity.
              Intent externalActivityIntent = new Intent(Intent.ACTION_PICK);
              externalActivityIntent.setType("image/*");
              externalActivityIntent
                  .addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
              startActivity(externalActivityIntent);
            }
          });

      return rootView;
    }
  }

  /**
   * A dummy fragment representing a section of the app, but that simply
   * displays dummy text.
   */
  public static class DummySectionFragment extends Fragment
  {

    public static final String ARG_SECTION_NUMBER = "section_number";

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState)
    {
      View rootView = inflater.inflate(R.layout.fragment_section_dummy,
          container, false);
      Bundle args = getArguments();
      ((TextView) rootView.findViewById(android.R.id.text1)).setText(getString(
          R.string.dummy_section_text, args.getInt(ARG_SECTION_NUMBER)));
      return rootView;
    }
  }

}
</code></pre>

<p><strong>activity_main.xml</strong></p>

<pre><code>&lt;!--
  Copyright 2012 The Android Open Source Project

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  --&gt;

&lt;android.support.v4.view.ViewPager xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="match_parent" /&gt;
</code></pre>

<p><strong>fragment_section_launchpad.xml</strong></p>

<pre><code>&lt;!--
  Copyright 2012 The Android Open Source Project

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  --&gt;

&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;LinearLayout android:orientation="vertical"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"&gt;

        &lt;Button android:id="@+id/demo_collection_button"
            android:layout_width="300dp"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp"
            android:text="Demo Collection"/&gt;

        &lt;Button android:id="@+id/demo_external_activity"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Demo External Activity" /&gt;

    &lt;/LinearLayout&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p><strong>fragment_section_dummy.xml</strong></p>

<pre><code>&lt;!--
  Copyright 2012 The Android Open Source Project

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  --&gt;

&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt;

    &lt;LinearLayout android:orientation="vertical"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center"&gt;

        &lt;Button android:id="@+id/demo_collection_button"
            android:layout_width="300dp"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp"
            android:text="Demo Collection"/&gt;

        &lt;Button android:id="@+id/demo_external_activity"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Demo External Activity" /&gt;

    &lt;/LinearLayout&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p>Finally remember to declare the activity in your manifest and to put the theme as an AppCompat theme:</p>

<pre><code> &lt;application
...
 android:theme="@style/Theme.AppCompat.Light" &gt;
</code></pre>
