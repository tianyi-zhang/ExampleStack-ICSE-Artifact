<p>hm, good question as <code>slf4j</code> is suppose to not use runtime loading classes. It looks that uses classloader checks at startup in below method:</p>

<pre><code>private static Set findPossibleStaticLoggerBinderPathSet() {
    // use Set instead of list in order to deal with  bug #138
    // LinkedHashSet appropriate here because it preserves insertion order during iteration
    Set staticLoggerBinderPathSet = new LinkedHashSet();
    try {
      ClassLoader loggerFactoryClassLoader = LoggerFactory.class
              .getClassLoader();
      Enumeration paths;
      if (loggerFactoryClassLoader == null) {
        paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);
      } else {
        paths = loggerFactoryClassLoader
                .getResources(STATIC_LOGGER_BINDER_PATH);
      }
      while (paths.hasMoreElements()) {
        URL path = (URL) paths.nextElement();
        staticLoggerBinderPathSet.add(path);
      }
    } catch (IOException ioe) {
      Util.report("Error getting resources from path", ioe);
    }
    return staticLoggerBinderPathSet;
}
</code></pre>

<p>@Dev is right - <code>org.slf4j.impl.StaticLoggerBinder</code> is included only in slf4j-api sources and not binaries - Including only in sources is simple trick for compile reasons. It is understandable that <code>findPossibleStaticLoggerBinderPathSet</code> is used only for logging purposes.</p>
