<p>You can use this below code:</p>

<pre><code>package Test;

import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

public class Arrange {
    public static void main(String[] args) {
        String str = "money";
        List&lt;Test&gt; strs=new LinkedList&lt;Test&gt;();
        List&lt;Test&gt; final_result=new LinkedList&lt;Test&gt;();
        for(int i=0;i&lt;str.length();i++)
        {
            Test t=new Test(i, ""+str.charAt(i), 0);
            strs.add(t);
        }
        Collections.sort(strs,new Comparator&lt;Test&gt;() {
               @Override
               public int compare(Test o1, Test o2) {
                   return (o1.getS().compareToIgnoreCase(o2.getS()));
               }
           });
        Integer i=1;
        for (Test st : strs) {
           st.setJ(i);
           final_result.add(st);
           i++;
       }
        Collections.sort(final_result,new Comparator&lt;Test&gt;() {
            @Override
            public int compare(Test o1, Test o2) {
                return (o1.getI().compareTo(o2.getI()));
            }
        });
        for (Test test : final_result) {
            System.out.println(test.getJ());
        }
   }
}

class Test{
    private Integer i;
    private String s;
    private Integer j;
    public Test() {
        // TODO Auto-generated constructor stub
    }
    public Test(Integer i, String s, Integer j) {
        super();
        this.i = i;
        this.s = s;
        this.j = j;
    }
    public Integer getI() {
        return i;
    }
    public void setI(Integer i) {
        this.i = i;
    }
    public String getS() {
        return s;
    }
    public void setS(String s) {
        this.s = s;
    }
    public Integer getJ() {
        return j;
    }
    public void setJ(Integer j) {
        this.j = j;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((i == null) ? 0 : i.hashCode());
        result = prime * result + ((j == null) ? 0 : j.hashCode());
        result = prime * result + ((s == null) ? 0 : s.hashCode());
        return result;
    }
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Test other = (Test) obj;
        if (i == null) {
            if (other.i != null)
                return false;
        } else if (!i.equals(other.i))
            return false;
        if (j == null) {
            if (other.j != null)
                return false;
        } else if (!j.equals(other.j))
            return false;
        if (s == null) {
            if (other.s != null)
                return false;
        } else if (!s.equals(other.s))
            return false;
        return true;
    }
}
</code></pre>
