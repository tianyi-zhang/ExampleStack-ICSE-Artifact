<p>Thanx schwiz for idea! Here is modified solution:</p>

<pre><code>             public class FileDialog {
                private static final String PARENT_DIR = "..";
                private final String TAG = getClass().getName();
                private String[] fileList;
                private File currentPath;
                public interface FileSelectedListener {
                    void fileSelected(File file);
                }
                public interface DirectorySelectedListener {
                    void directorySelected(File directory);
                }
                private ListenerList&lt;FileSelectedListener&gt; fileListenerList = new ListenerList&lt;FileDialog.FileSelectedListener&gt;();
                private ListenerList&lt;DirectorySelectedListener&gt; dirListenerList = new ListenerList&lt;FileDialog.DirectorySelectedListener&gt;();
                private final Activity activity;
                private boolean selectDirectoryOption;
                private String fileEndsWith;    

                /**
                 * @param activity 
                 * @param initialPath
                 */
                 public FileDialog(Activity activity, File initialPath) {
                    this(activity, initialPath, null);
                 }

                 public FileDialog(Activity activity, File initialPath, String fileEndsWith) {
                    this.activity = activity;
                    setFileEndsWith(fileEndsWith);
                    if (!initialPath.exists()) initialPath = Environment.getExternalStorageDirectory();
                    loadFileList(initialPath);
                 }

                /**
                 * @return file dialog
                 */
                public Dialog createFileDialog() {
                    Dialog dialog = null;
                    AlertDialog.Builder builder = new AlertDialog.Builder(activity);

                    builder.setTitle(currentPath.getPath());
                    if (selectDirectoryOption) {
                        builder.setPositiveButton("Select directory", new OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                Log.d(TAG, currentPath.getPath());
                                fireDirectorySelectedEvent(currentPath);
                            }
                        });
                    }

                    builder.setItems(fileList, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            String fileChosen = fileList[which];
                            File chosenFile = getChosenFile(fileChosen);
                            if (chosenFile.isDirectory()) {
                                loadFileList(chosenFile);
                                dialog.cancel();
                                dialog.dismiss();
                                showDialog();
                            } else fireFileSelectedEvent(chosenFile);
                        }
                    });

                    dialog = builder.show();
                    return dialog;
                }


                public void addFileListener(FileSelectedListener listener) {
                    fileListenerList.add(listener);
                }

                public void removeFileListener(FileSelectedListener listener) {
                    fileListenerList.remove(listener);
                }

                public void setSelectDirectoryOption(boolean selectDirectoryOption) {
                    this.selectDirectoryOption = selectDirectoryOption;
                }

                public void addDirectoryListener(DirectorySelectedListener listener) {
                    dirListenerList.add(listener);
                }

                public void removeDirectoryListener(DirectorySelectedListener listener) {
                    dirListenerList.remove(listener);
                }

                /**
                 * Show file dialog
                 */
                public void showDialog() {
                    createFileDialog().show();
                }

                private void fireFileSelectedEvent(final File file) {
                    fileListenerList.fireEvent(new FireHandler&lt;FileDialog.FileSelectedListener&gt;() {
                        public void fireEvent(FileSelectedListener listener) {
                            listener.fileSelected(file);
                        }
                    });
                }

                private void fireDirectorySelectedEvent(final File directory) {
                    dirListenerList.fireEvent(new FireHandler&lt;FileDialog.DirectorySelectedListener&gt;() {
                        public void fireEvent(DirectorySelectedListener listener) {
                            listener.directorySelected(directory);
                        }
                    });
                }

                private void loadFileList(File path) {
                    this.currentPath = path;
                    List&lt;String&gt; r = new ArrayList&lt;String&gt;();
                    if (path.exists()) {
                        if (path.getParentFile() != null) r.add(PARENT_DIR);
                        FilenameFilter filter = new FilenameFilter() {
                            public boolean accept(File dir, String filename) {
                                File sel = new File(dir, filename);
                                if (!sel.canRead()) return false;
                                if (selectDirectoryOption) return sel.isDirectory();
                                else {
                                    boolean endsWith = fileEndsWith != null ? filename.toLowerCase().endsWith(fileEndsWith) : true;
                                    return endsWith || sel.isDirectory();
                                }
                            }
                        };
                        String[] fileList1 = path.list(filter);
                        for (String file : fileList1) {
                            r.add(file);
                        }
                    }
                    fileList = (String[]) r.toArray(new String[]{});
                }

                private File getChosenFile(String fileChosen) {
                    if (fileChosen.equals(PARENT_DIR)) return currentPath.getParentFile();
                    else return new File(currentPath, fileChosen);
                }

                private void setFileEndsWith(String fileEndsWith) {
                    this.fileEndsWith = fileEndsWith != null ? fileEndsWith.toLowerCase() : fileEndsWith;
                }
             }

        class ListenerList&lt;L&gt; {
            private List&lt;L&gt; listenerList = new ArrayList&lt;L&gt;();

            public interface FireHandler&lt;L&gt; {
                void fireEvent(L listener);
            }

            public void add(L listener) {
                listenerList.add(listener);
            }

            public void fireEvent(FireHandler&lt;L&gt; fireHandler) {
                List&lt;L&gt; copy = new ArrayList&lt;L&gt;(listenerList);
                for (L l : copy) {
                    fireHandler.fireEvent(l);
                }
            }

            public void remove(L listener) {
                listenerList.remove(listener);
            }

            public List&lt;L&gt; getListenerList() {
                return listenerList;
            }
        }
</code></pre>

<p>Use it on activity onCreate (directory selection option is commented):</p>

<pre><code>        protected void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            File mPath = new File(Environment.getExternalStorageDirectory() + "//DIR//");
            fileDialog = new FileDialog(this, mPath, ".txt");
            fileDialog.addFileListener(new FileDialog.FileSelectedListener() {
                public void fileSelected(File file) {
                    Log.d(getClass().getName(), "selected file " + file.toString());
                }
            });
            //fileDialog.addDirectoryListener(new FileDialog.DirectorySelectedListener() {
            //  public void directorySelected(File directory) {
            //      Log.d(getClass().getName(), "selected dir " + directory.toString());
            //  }
            //});
            //fileDialog.setSelectDirectoryOption(false);
            fileDialog.showDialog();
        }
</code></pre>
