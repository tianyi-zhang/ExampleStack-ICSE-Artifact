<p>Another implementation:</p>

<pre><code>public static void main(String[] args) {
    int n = 20;
    long matrix[][] = new long[n][n];
    for (int i = 0; i &lt; n; i++) {
        matrix[i][0] = i + 2;
        matrix[0][i] = i + 2;
    }
    for (int i = 1; i &lt; n; i++) {
        for (int j = i; j &lt; n; j++) {      // j&gt;=i
            matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1];
            matrix[j][i] = matrix[i][j];   // avoids double computation (difference)
        }
    }
    System.out.println(matrix[n - 1][n - 1]);
}
</code></pre>

<p><strong>Time: 43 microseconds</strong> (without printing)</p>

<p>It is based on the following matrix:</p>

<pre><code>   | 1  2  3  4 ...
---------------------
 1 | 2  3  4  5 ...
 2 | 3  6  10 15
 3 | 4  10 20 35
 4 | 5  15 35 70
 . | .
 . | .
 . | .
</code></pre>

<p>where</p>

<pre><code>6  =  3 +  3
10 =  6 +  4
15 = 10 +  5
...
70 = 35 + 35
</code></pre>

<p>Notice that I used <code>i + 2</code> instead of <code>i + 1</code> in the implementation because the first index is <code>0</code>.</p>

<hr>

<p>Of course, the fastest solution is to use a mathematical formula (see Edwin's post) and the code for it:</p>

<pre><code>public static void main(String[] args) {
    int n = 20;
    long result = 1;
    for ( int i = 1 ; i &lt;= n ; i++ ) {
        result *= (i+n);
        result /= i;
    }
    System.out.println(result);
}
</code></pre>

<p>takes only <strong>5 microseconds</strong> (without printing).</p>

<p>If you are afraid about the loss of precision, notice that the product of <code>n</code> consecutive numbers is divisible by <code>n!</code>.</p>

<p>To have a better <strong>understanding</strong> why the <strong>formula</strong> is:</p>

<pre><code>     (d+r)!
F = ---------  , where |D| = d and |R| = r
      d!*r!
</code></pre>

<p>instead of <code>F = (d+r)!</code>, imagine that every "down" and "right" has an index:</p>

<pre><code>down1,right1,right2,down2,down3,right3
</code></pre>

<p>The second formula counts all possible permutations for the "commands" above, but in our case there is no difference between down1, down2 and down3. So, the second formula will count <code>6</code> (<code>3!</code>) times the same thing:</p>

<pre><code>down1,down2,down3
down1,down3,down2
down2,down1,down3
down2,down3,down1
down3,down1,down2
down3,down2,down1
</code></pre>

<p>This is why we divide the <code>(d+r)!</code> by <code>d!</code>. Analogue for <code>r!</code>.</p>
