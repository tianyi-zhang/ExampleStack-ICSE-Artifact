<p><code>setView()</code> method of alert dialog is useful, you can set <code>ListView</code> as custom view to your dialog.</p>

<p>for eg.</p>

<pre><code>CustomDialogListAdapter adapter = new CustomDialogListAdapter();
        ListView list = new ListView(this);
        list.setAdapter(adapter);
        list.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; arg0, View arg1, int arg2, long arg3) {
                setTitle("item : " + arg2);
            }
        });

        final Builder dialogBuilder = new Builder(this);
        dialogBuilder.setTitle("Custom List Dialog");
        dialogBuilder.setView(list);        
        dialogBuilder.create().show();
</code></pre>

<p>You can create custom adapter for list as follows</p>

<pre><code>class CustomDialogListAdapter extends BaseAdapter {


        private String[] data = { "People Names", "Dog Names", "Cat Names", "Fish Names" };
        private ArrayList&lt;Boolean&gt; checkboxStatus = new ArrayList&lt;Boolean&gt;();

        public CustomDialogListAdapter() {
            int count = data.length;
            for (int i = 0; i &lt; count; i++)
                checkboxStatus.add(false);
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ViewHolder holder;

            if(convertView == null) {
                convertView = getLayoutInflater().inflate(R.layout.raw_dialog_item, null);
                holder = new ViewHolder();
                holder.chk = (CheckBox) convertView.findViewById(R.id.chkbox);
                holder.chk.setOnCheckedChangeListener(checkboxListener);
                holder.txt = (TextView) convertView.findViewById(R.id.txtTitle);

                convertView.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }

            holder.chk.setTag("" + position);
            holder.chk.setChecked(checkboxStatus.get(position));
            holder.txt.setText(data[position]);

            return convertView;
        }

        class ViewHolder {
            CheckBox chk;
            TextView txt;
        }

        private OnCheckedChangeListener checkboxListener = new OnCheckedChangeListener() {

            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                int position = Integer.parseInt(buttonView.getTag().toString());
                checkboxStatus.set(position, isChecked);
            }
        };

        @Override
        public int getCount() {
            return data.length;
        }

        @Override
        public Object getItem(int position) {
            return data[position];
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

    }
</code></pre>

<p>Raw file of list item (raw_dialog_item.xml)</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:descendantFocusability="blocksDescendants" &gt;

    &lt;CheckBox
        android:id="@+id/chkbox"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;

    &lt;TextView
        android:id="@+id/txtTitle"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_centerVertical="true"
        android:layout_toRightOf="@id/chkbox"
        android:text="@string/hello_world" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>
