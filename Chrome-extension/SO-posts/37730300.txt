<p>Here is an MCVE that puts a &#188; million rows (249,698 records) of a table on-screen &amp; uses a renderer. </p>

<p>It appears quickly and shows no lag or delay in scrolling.</p>

<p>So this supports the idea that this <strong><em>must</em></strong> be a problem in code that we have not yet been able to test..</p>

<p><a href="http://i.stack.imgur.com/Tgbn3.png" rel="nofollow"><img src="http://i.stack.imgur.com/Tgbn3.png" alt="enter image description here"></a></p>

<pre><code>import java.awt.*;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.*;
import java.util.ArrayList;

public class UnicodeTable {

    private JComponent ui = null;

    UnicodeTable() {
        initUI();
    }

    public final void initUI() {
        if (ui != null) {
            return;
        }

        ui = new JPanel(new BorderLayout(4, 4));
        ui.setBorder(new EmptyBorder(4, 4, 4, 4));

        ArrayList&lt;Integer&gt; definedCharacters = new ArrayList&lt;Integer&gt;();
        for (int codePoint = 0; codePoint &lt; Character.MAX_CODE_POINT; codePoint++) {
            if (Character.isDefined(codePoint)) {
                definedCharacters.add(codePoint);
            }
        }
        System.out.println("Number of codepoints: " + definedCharacters.size());
        TableModel tm = new UnicodeTableModel(definedCharacters);
        JTable table = new JTable(tm);
        table.setAutoCreateRowSorter(true);
        ui.add(new JScrollPane(table));
        table.setDefaultRenderer(String.class, new UnicodeTableCellRenderer());
    }

    public JComponent getUI() {
        return ui;
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception useDefault) {
                }
                UnicodeTable o = new UnicodeTable();

                JFrame f = new JFrame(o.getClass().getSimpleName());
                f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                f.setLocationByPlatform(true);

                f.setContentPane(o.getUI());
                f.pack();
                f.setMinimumSize(f.getSize());

                f.setVisible(true);
            }
        };
        SwingUtilities.invokeLater(r);
    }
}

class UnicodeTableModel extends AbstractTableModel {

    ArrayList&lt;Integer&gt; codePoints;

    String[] colNames = {
        "Number", "Name", "Alphabetic", "Digit", "ISO Control"
    };

    Class[] colClass = {
        Integer.class, String.class, 
        Boolean.class, Boolean.class, Boolean.class
    };

    public UnicodeTableModel(ArrayList&lt;Integer&gt; codePoints) {
        this.codePoints = codePoints;
    }

    @Override
    public int getRowCount() {
        return codePoints.size();
    }

    @Override
    public int getColumnCount() {
        return colNames.length;
    }

    @Override
    public String getColumnName(int columnIndex) {
        return colNames[columnIndex];
    }

    @Override
    public Class&lt;?&gt; getColumnClass(int columnIndex) {
        return colClass[columnIndex];
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Integer codePoint = codePoints.get(rowIndex);
        switch (columnIndex) {
            case 0:
                return codePoint;
            case 1:
                return Character.getName(codePoint);
            case 2:
                return Character.isAlphabetic(codePoint);
            case 3:
                return Character.isDigit(codePoint);
            case 4:
                return Character.isISOControl(codePoint);
            default:
                return new Object();
        }
    }
}

class UnicodeTableCellRenderer extends DefaultTableCellRenderer {

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        Component c = super.getTableCellRendererComponent(
                table, value, isSelected, hasFocus, row, column);
        if (column == 1) {
            JLabel l = (JLabel) c;
            Font f = l.getFont();
            f = new Font(Font.MONOSPACED, Font.ITALIC, f.getSize());
            l.setFont(f);
        }
        return c;
    }
}
</code></pre>
