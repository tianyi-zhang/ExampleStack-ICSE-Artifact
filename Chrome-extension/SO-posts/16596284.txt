<p>You can use JCodec ( <a href="http://jcodec.org">http://jcodec.org</a> ).  </p>

<p>To decode a video sequence go:  </p>

<pre><code>int frameNumber = 10000;
FileChannelWrapper ch = null;
try {
    ch = NIOUtils.readableFileChannel(new File(path to mp4));
    FrameGrab frameGrab = new FrameGrab(ch);

    frameGrab.seek(frameNumber);
    Picture frame;
    for (int i = 0; (frame = frameGrab.getNativeFrame()) != null &amp;&amp; i &lt; 200; i++) {
        // Do something
    }
} finally {
    NIOUtils.closeQuietly(ch);
}
</code></pre>

<p>To encode a sequence:  </p>

<pre><code>public class SequenceEncoder {
    private SeekableByteChannel ch;
    private Picture toEncode;
    private RgbToYuv420 transform;
    private H264Encoder encoder;
    private ArrayList&lt;ByteBuffer&gt; spsList;
    private ArrayList&lt;ByteBuffer&gt; ppsList;
    private CompressedTrack outTrack;
    private ByteBuffer _out;
    private int frameNo;
    private MP4Muxer muxer;

    public SequenceEncoder(File out) throws IOException {
        this.ch = NIOUtils.writableFileChannel(out);

        // Transform to convert between RGB and YUV
        transform = new RgbToYuv420(0, 0);

        // Muxer that will store the encoded frames
        muxer = new MP4Muxer(ch, Brand.MP4);

        // Add video track to muxer
        outTrack = muxer.addTrackForCompressed(TrackType.VIDEO, 25);

        // Allocate a buffer big enough to hold output frames
        _out = ByteBuffer.allocate(1920 * 1080 * 6);

        // Create an instance of encoder
        encoder = new H264Encoder();

        // Encoder extra data ( SPS, PPS ) to be stored in a special place of
        // MP4
        spsList = new ArrayList&lt;ByteBuffer&gt;();
        ppsList = new ArrayList&lt;ByteBuffer&gt;();

    }

    public void encodeImage(Picture bi) throws IOException {
        if (toEncode == null) {
            toEncode = Picture.create(bi.getWidth(), bi.getHeight(), ColorSpace.YUV420);
        }

        // Perform conversion ( RGB -&gt; YUV )
        transform.transform(bi, toEncode);

        // Encode image into H.264 frame, the result is stored in '_out' buffer
        _out.clear();
        ByteBuffer result = encoder.encodeFrame(_out, toEncode);

        // Based on the frame above form correct MP4 packet
        spsList.clear();
        ppsList.clear();
        H264Utils.encodeMOVPacket(result, spsList, ppsList);

        // Add packet to video track
        outTrack.addFrame(new MP4Packet(result, frameNo, 25, 1, frameNo, true, null, frameNo, 0));

        frameNo++;
    }

    public void finish() throws IOException {
        // Push saved SPS/PPS to a special storage in MP4
        outTrack.addSampleEntry(H264Utils.createMOVSampleEntry(spsList, ppsList));

        // Write MP4 header and finalize recording
        muxer.writeHeader();
        NIOUtils.closeQuietly(ch);
    }
}
</code></pre>

<p>And finally to convert <strong>TO</strong> and <strong>FROM</strong> Android image use:</p>

<pre><code>public static Picture fromBitmap(Bitmap src) {
    Picture dst = Picture.create((int)src.getWidth(), (int)src.getHeight(), RGB);
    fromBitmap(src, dst);
    return dst;
}

public static void fromBitmap(Bitmap src, Picture dst) {
    int[] dstData = dst.getPlaneData(0);
    int[] packed = new int[src.getWidth() * src.getHeight()];

    src.getPixels(packed, 0, src.getWidth(), 0, 0, src.getWidth(), src.getHeight());

    for (int i = 0, srcOff = 0, dstOff = 0; i &lt; src.getHeight(); i++) {
        for (int j = 0; j &lt; src.getWidth(); j++, srcOff++, dstOff += 3) {
            int rgb = packed[srcOff];
            dstData[dstOff]     = (rgb &gt;&gt; 16) &amp; 0xff;
            dstData[dstOff + 1] = (rgb &gt;&gt; 8) &amp; 0xff;
            dstData[dstOff + 2] = rgb &amp; 0xff;
        }
    }
}

public static Bitmap toBitmap(Picture src) {
    Bitmap dst = Bitmap.create(pic.getWidth(), pic.getHeight(), ARGB_8888);
    toBitmap(src, dst);
    return dst;
}

public static void toBitmap(Picture src, Bitmap dst) {
    int[] srcData = src.getPlaneData(0);
    int[] packed = new int[src.getWidth() * src.getHeight()];

    for (int i = 0, dstOff = 0, srcOff = 0; i &lt; src.getHeight(); i++) {
        for (int j = 0; j &lt; src.getWidth(); j++, dstOff++, srcOff += 3) {
            packed[dstOff] = (srcData[srcOff] &lt;&lt; 16) | (srcData[srcOff + 1] &lt;&lt; 8) | srcData[srcOff + 2];
        }
    }
    dst.setPixels(packed, 0, src.getWidth(), 0, 0, src.getWidth(), src.getHeight());
}
</code></pre>

<p><strong>FINALLY</strong> on decoding you'll get YUV frame out, in order to transform it to RGB frame go:  </p>

<pre><code>Transform transform = ColorUtil.getTransform(pic.getColor(), ColorSpace.RGB);
Picture rgb = Picture.create(pic.getWidth(), pic.getHeight(), ColorSpace.RGB);
transform.transform(pic, rgb);
</code></pre>

<p>And make sure your download JAR with all deps: <a href="http://jcodec.org/downloads/jcodec-0.1.3-uberjar.jar">http://jcodec.org/downloads/jcodec-0.1.3-uberjar.jar</a></p>
