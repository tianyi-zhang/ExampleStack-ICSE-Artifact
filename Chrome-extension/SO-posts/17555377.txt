<p>I have no experience but it looks like it has much weaker typing than java.  The first part of your questions is very simple.</p>

<pre><code>//this checks for null objects
public static boolean isEmpty(Object o) {
  return o == null;
}
</code></pre>

<p>However, in your example code, you are checking for particular fields with specific names.  This is far more complex in java.  You can use <a href="http://docs.oracle.com/javase/tutorial/reflect/" rel="nofollow">reflection</a>, but you need to check for both methods and fields.  You will then need to check for the appropriate return types: Number, int, long, short, float, double.  So, it is possible, but would require a bunch of work and would be slow.</p>

<p>A simpler, yet more restrictive mechanism would be to only check for common types:
<em>(updated to fix bug with Enumeration and add array; array has to be broken down for each primative due to how arrays work in java)</em></p>

<pre><code>public static boolean isEmpty(Object o) {
    if (o == null) {
        return true;
    }
    else if (o instanceof Object[]) {
        return ((Object[]) o).length &lt;= 0;
    }
    else if (o instanceof boolean[]) {
        return ((boolean[]) o).length &lt;= 0;
    }
    else if (o instanceof byte[]) {
        return ((byte[]) o).length &lt;= 0;
    }
    else if (o instanceof short[]) {
        return ((short[]) o).length &lt;= 0;
    }
    else if (o instanceof char[]) {
        return ((char[]) o).length &lt;= 0;
    }
    else if (o instanceof int[]) {
        return ((int[]) o).length &lt;= 0;
    }
    else if (o instanceof long[]) {
        return ((long[]) o).length &lt;= 0;
    }
    else if (o instanceof float[]) {
        return ((float[]) o).length &lt;= 0;
    }
    else if (o instanceof double[]) {
        return ((double[]) o).length &lt;= 0;
    }
    else if (o instanceof CharSequence) {
        return ((CharSequence) o).length() &lt;= 0;
    }
    else if (o instanceof Collection) {
        return ((Collection) o).isEmpty();
    }
    else if (o instanceof Map) {
        return ((Map) o).isEmpty();
    }
    else if (o instanceof Enumeration) {
        return !((Enumeration) o).hasMoreElements();
    }
    else if (o instanceof Dictionary) {
        return ((Dictionary) o).isEmpty();
    }
    else if (o instanceof Iterable) {
        // NOTE: may not be efficient because an iterator is created
        return !((Iterable) o).iterator().hasNext();
    }

  return false;
}
</code></pre>

<p><em>Update: The following is the previous version with reflection to check for methods, the code could be expanded to support fields.  Handling the return types wasn't as difficult as I initially thought.  It seams the autoboxing works even with reflection.  I also threw in a check to see if the object has an isEmpty() boolean method.</em></p>

<pre><code>public static boolean isEmpty(final Object o) {
    if (o == null) {
        return true;
    }
    else if (o instanceof Object[]) {
        return ((Object[]) o).length &lt;= 0;
    }
    else if (o instanceof boolean[]) {
        return ((boolean[]) o).length &lt;= 0;
    }
    else if (o instanceof byte[]) {
        return ((byte[]) o).length &lt;= 0;
    }
    else if (o instanceof short[]) {
        return ((short[]) o).length &lt;= 0;
    }
    else if (o instanceof char[]) {
        return ((char[]) o).length &lt;= 0;
    }
    else if (o instanceof int[]) {
        return ((int[]) o).length &lt;= 0;
    }
    else if (o instanceof long[]) {
        return ((long[]) o).length &lt;= 0;
    }
    else if (o instanceof float[]) {
        return ((float[]) o).length &lt;= 0;
    }
    else if (o instanceof double[]) {
        return ((double[]) o).length &lt;= 0;
    }
    else if (o instanceof CharSequence) {
        return ((CharSequence) o).length() &lt;= 0;
    }
    else if (o instanceof Collection) {
        return ((Collection) o).isEmpty();
    }
    else if (o instanceof Map) {
        return ((Map) o).isEmpty();
    }
    else if (o instanceof Enumeration) {
        return !((Enumeration) o).hasMoreElements();
    }
    else if (o instanceof Dictionary) {
        return ((Dictionary) o).isEmpty();
    }
    else if (o instanceof Iterable) {
        // NOTE: may not be efficient because an iterator is created
        return !((Iterable) o).iterator().hasNext();
    }

    // reflection code

    final Number length = retrieveNumberFromMethod(o, "length");
    if (length != null) {
        return length.shortValue() &lt;= 0;
    }

    final Number size = retrieveNumberFromMethod(o, "size");
    if (size != null) {
        return size.shortValue() &lt;= 0;
    }

    final Boolean isEmpty = retrieveBooleanFromMethod(o, "isEmpty");
    if (isEmpty != null) {
        return isEmpty;
    }

    return false;
}

static Number retrieveNumberFromMethod(final Object o, final String methodName) {
    try {
        final Number number = (Number) o.getClass().getMethod(methodName).invoke(o);
        return number;
    }
    catch (final IllegalArgumentException e) {
        throw new IllegalStateException("Unable to retrieve number from " + methodName + " on " + o, e);
    }
    catch (final SecurityException e) {
        throw new IllegalStateException("Unable to retrieve number from " + methodName + " on " + o, e);
    }
    catch (final InvocationTargetException e) {
        throw new IllegalStateException("Unable to retrieve number from " + methodName + " on " + o, e);
    }
    catch (final IllegalAccessException e) {
        return null;
    }
    catch (final NoSuchMethodException e) {
        return null;
    }
}

static Boolean retrieveBooleanFromMethod(final Object o, final String methodName) {
    try {
        final Boolean bool = (Boolean) o.getClass().getMethod(methodName).invoke(o);
        return bool;
    }
    catch (final IllegalArgumentException e) {
        throw new IllegalStateException("Unable to retrieve boolean from " + methodName + " on " + o, e);
    }
    catch (final SecurityException e) {
        throw new IllegalStateException("Unable to retrieve boolean from " + methodName + " on " + o, e);
    }
    catch (final InvocationTargetException e) {
        throw new IllegalStateException("Unable to retrieve boolean from " + methodName + " on " + o, e);
    }
    catch (final IllegalAccessException e) {
        return null;
    }
    catch (final NoSuchMethodException e) {
        return null;
    }
}
</code></pre>
