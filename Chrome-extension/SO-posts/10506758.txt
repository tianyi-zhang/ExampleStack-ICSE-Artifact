<p>I would not do #2. So far as I know, there is no inherent performance benefit to writing to a channel group. If you look at the code for <a href="http://netty.io/docs/stable/xref/org/jboss/netty/channel/group/DefaultChannelGroup.html" rel="nofollow">DefaultChannelGroup</a>, it simply iterates through the registered channels, issues the write and collects the futures:</p>

<pre><code>public ChannelGroupFuture write(Object message) {
         Map&lt;Integer, ChannelFuture&gt; futures =
             new LinkedHashMap&lt;Integer, ChannelFuture&gt;(size());
         if (message instanceof ChannelBuffer) {
             ChannelBuffer buf = (ChannelBuffer) message;
             for (Channel c: nonServerChannels.values()) {
                 futures.put(c.getId(), c.write(buf.duplicate()));
             }
         } else {
             for (Channel c: nonServerChannels.values()) {
                 futures.put(c.getId(), c.write(message));
             }
         }
         return new DefaultChannelGroupFuture(this, futures);
     }
</code></pre>

<p>.... although you do get the benefit of a multiplexed future, which if you care about the completion callbacks, is useful.</p>

<p>I would not do #3 either since you are just giving the downstream handlers more work to do, discarding data that you went to all the bother to write in the first place.</p>

<p>So I would either:</p>

<ol>
<li>Implement Option #1</li>
<li>Extend DefaultChannelGroup and add a write method that is clever enough to skip the channel in question. You would probably have to provide a bit more meta-data when you add the channels to the group.</li>
</ol>
