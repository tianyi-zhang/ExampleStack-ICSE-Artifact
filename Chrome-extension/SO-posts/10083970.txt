<p>To test the servlet, you need at least two Google Accounts. One Google Account must be added as at least a Viewer on your Google App Engine Admin Console, the other Google Account must not be added. The Google Account that is not added in the Admin console should not be able to access any servlet where the role is defined as admin.</p>

<p>If for some reason the tests fail, you need to make sure you've followed all the steps in the documentation to secure the servlet and implement an authentication schema. Below outlines using Google OAuth and the UserService as an example.</p>

<p>Out of the box, Google App Engine gives you two roles to use within your application:  User and Admin.</p>

<p>Admin users are defined as any user that is listed as <a href="https://developers.google.com/appengine/docs/adminconsole/roles">any one of the three roles</a> on the Google App Engine project, so if you want to grant someone admin access to your servlet, you could add them as a Viewer in the <a href="http://appengine.google.com">http://appengine.google.com</a> panel.</p>

<p>The <a href="https://developers.google.com/appengine/docs/java/javadoc/com/google/appengine/api/users/UserService">UserService</a> class gives you access to the logged in user. You would need to use this to create a login URL for your user, log them in through Google using his or her Google account, redirect him or her to your application, and then use <code>UserService.isUserAdmin()</code> to determine if that user is indeed an admin user.</p>

<p><a href="https://developers.google.com/appengine/docs/java/gettingstarted/usingusers">Using the Users Service</a> describes in detail how to get started using the UserService class. </p>

<pre><code>package guestbook;

import java.io.IOException;
import javax.servlet.http.*;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

public class GuestbookServlet extends HttpServlet {
    public void doGet(HttpServletRequest req, HttpServletResponse resp)
          throws IOException {
        UserService userService = UserServiceFactory.getUserService();
        User user = userService.getCurrentUser();

        if (user != null) {
            resp.setContentType("text/plain");
            if(userService.isUserAdmin()) {
                resp.getWriter().println("Hello, " + user.getNickname() + ", you are logged in as an admin");
            } else {
                resp.getWriter().println("Hello, " + user.getNickname());
            }
        } else {
            resp.sendRedirect(userService.createLoginURL(req.getRequestURI()));
        }
    }
}
</code></pre>

<p>The <a href="https://developers.google.com/appengine/docs/java/users/overview">Google App Engine Users Java API Overview</a> demonstrates how to handle logging in users on Google App Engine:</p>

<pre><code>import java.io.IOException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

public class MyServlet extends HttpServlet {
    public void doGet(HttpServletRequest req, HttpServletResponse resp)
            throws IOException {
        UserService userService = UserServiceFactory.getUserService();

        String thisURL = req.getRequestURI();

        resp.setContentType("text/html");
        if (req.getUserPrincipal() != null) {
            resp.getWriter().println("&lt;p&gt;Hello, " +
                                 req.getUserPrincipal().getName() +
                                 "!  You can &lt;a href=\"" +
                                 userService.createLogoutURL(thisURL) +
                                 "\"&gt;sign out&lt;/a&gt;.&lt;/p&gt;");
        } else {
            resp.getWriter().println("&lt;p&gt;Please &lt;a href=\"" +
                                 userService.createLoginURL(thisURL) +
                                 "\"&gt;sign in&lt;/a&gt;.&lt;/p&gt;");
        } 
    }
}
</code></pre>

<p><strong>Securing the Servlet:</strong></p>

<blockquote>
  <p>If you have pages that the user should not be able to access unless signed in, you can establish a security constraint for those pages in the deployment descriptor (the web.xml</p>
</blockquote>

<p>The <a href="https://developers.google.com/appengine/docs/java/config/webxml#Security_and_Authentication">Deployment Descriptor: Security and Authentication</a> page demonstrates how to modify your web.xml so that only admins can access certain servlets.</p>

<pre><code>&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;url-pattern&gt;/profile/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;role-name&gt;*&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;

&lt;security-constraint&gt;
    &lt;web-resource-collection&gt;
        &lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;
    &lt;/web-resource-collection&gt;
    &lt;auth-constraint&gt;
        &lt;role-name&gt;admin&lt;/role-name&gt;
    &lt;/auth-constraint&gt;
&lt;/security-constraint&gt;
</code></pre>

<p>In this example, the servlet <code>/profile</code> is accessible by users with any role, indicated by <code>*</code>, and the <code>/admin</code> servlet is only accessible by users with the role <code>admin</code>.</p>

<p>While Google App Engine Java does have built-in security, the roles are somewhat limited. If you need finer grain control over the roles of your users, see <a href="http://blog.springsource.org/2010/08/02/spring-security-in-google-app-engine/">Luke Taylor's Post on Spring Security in Google App Engine</a>. The example is old, but if you turn your logging level up to TRACE, you can make it work on the latest versions of Spring and the latest GAE SDK.</p>
