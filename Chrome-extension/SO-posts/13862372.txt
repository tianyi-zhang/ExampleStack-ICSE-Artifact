<p>The LdapTemplate (spring-ldap-core 1.3.1RELEASE) is useless in this scenario(to bad, I believe it is useless for others as well)- since on the LdapTemplate.authenticate(...) method performs a search, which obviously can not be completed without a successfull binding first.</p>

<p>I adapted the same concept like in the ActiveDirectoryLdapAuthenticationProvider:</p>

<ol>
<li><p>Authenticating against the LDAP with the old fashion way </p>

<pre><code>private static DirContext bindAsUser(String username, String password) {
  final String bindUrl = url;

  Hashtable&lt;String, String&gt; env = new Hashtable&lt;String, String&gt;();
  env.put(Context.SECURITY_AUTHENTICATION, "simple");
  String bindPrincipal = username;
  env.put(Context.SECURITY_PRINCIPAL, bindPrincipal);
  env.put(Context.PROVIDER_URL, bindUrl);
  env.put(Context.SECURITY_CREDENTIALS, password);
  env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");

  try {
    return contextFactory.createContext(env);
  } catch (NamingException e) {
    throw new RuntimeException(e);
  }
}  
</code></pre></li>
<li><p>Using the SpringSecurityLdapTemplate for quering the LDAP</p></li>
</ol>

<p>Another issue with the spring-ldap-core 1.3.1RELEASE, I can not understand why it was not merged to spring-security-ldap: 3.1.</p>
