<p>In Java, you use a <a href="http://www.oracle.com/technetwork/java/javase/jdbc/index.html" rel="nofollow">JDBC</a> driver for standardized communication with a database. Your choice to use SQLLite is probably OK (it sounds like you are trying to learn basics RESTful webservices). For a "real" application you would probably pick some other database like PostgreSQL or MySQL.</p>

<p>Xerials <a href="https://bitbucket.org/xerial/sqlite-jdbc" rel="nofollow">sqlite-jdbc</a> seems to be a popular implementation of a JDBC driver for SQLite.</p>

<p>With maven, all you need to do is to add a dependency to your pom.xml. Maven will then download the jar, and any necessary dependencies and allow you to use it in your application:</p>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.xerial&lt;/groupId&gt;
      &lt;artifactId&gt;sqlite-jdbc&lt;/artifactId&gt;
      &lt;version&gt;3.7.2&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>

<p>For an example on how to set up a connection and run queries against the database, the sample example at the Xerial sqlite-jdbc homepage seems like the best of starting points:</p>

<pre><code>import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Sample
{
  public static void main(String[] args) throws ClassNotFoundException
  {
    // load the sqlite-JDBC driver using the current class loader
    Class.forName("org.sqlite.JDBC");

    Connection connection = null;
    try
    {
      // create a database connection
      connection = DriverManager.getConnection("jdbc:sqlite:sample.db");
      Statement statement = connection.createStatement();
      statement.setQueryTimeout(30);  // set timeout to 30 sec.

      statement.executeUpdate("drop table if exists person");
      statement.executeUpdate("create table person (id integer, name string)");
      statement.executeUpdate("insert into person values(1, 'leo')");
      statement.executeUpdate("insert into person values(2, 'yui')");
      ResultSet rs = statement.executeQuery("select * from person");
      while(rs.next())
      {
        // read the result set
        System.out.println("name = " + rs.getString("name"));
        System.out.println("id = " + rs.getInt("id"));
      }
    }
    catch(SQLException e)
    {
      // if the error message is "out of memory", 
      // it probably means no database file is found
      System.err.println(e.getMessage());
    }
    finally
    {
      try
      {
        if(connection != null)
          connection.close();
      }
      catch(SQLException e)
      {
        // connection close failed.
        System.err.println(e);
      }
    }
  }
}
</code></pre>
