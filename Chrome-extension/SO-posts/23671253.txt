<p>From reading the actual code of <code>AsyncTask.java</code> it actually <strong>uses</strong> a <code>Future</code> task and then some more. A <code>Future</code> is a task that executes asynchronously on the go. An <code>AsyncTask</code> is scheduled on a queue for a single (or pool of) background thread(s).</p>

<p>An <code>AsyncTask</code> is actually more "superior" than a <code>Future</code> task. It does fancy scheduling and optimizations on top of <code>Future</code>'s functionality. Just look at the API introduction levels. <code>Future</code> was introduced right from the start API 1.0. The <code>AsyncTask</code> object was introduced in API 3. </p>

<p>An AsyncTask has-a Future task, not is-a Future.</p>

<p><a href="https://github.com/android/platform_frameworks_base/blob/master/core/java/android/os/AsyncTask.java" rel="nofollow">AsyncTask.java</a></p>

<pre><code>/**
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask() {
    mWorker = new WorkerRunnable&lt;Params, Result&gt;() {
        public Result call() throws Exception {
            mTaskInvoked.set(true);

            Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
            //noinspection unchecked
            return postResult(doInBackground(mParams));
        }
    };

    mFuture = new FutureTask&lt;Result&gt;(mWorker) {
        @Override
        protected void done() {
            try {
                postResultIfNotInvoked(get());
            } catch (InterruptedException e) {
                android.util.Log.w(LOG_TAG, e);
            } catch (ExecutionException e) {
                throw new RuntimeException("An error occured while executing doInBackground()",
                        e.getCause());
            } catch (CancellationException e) {
                postResultIfNotInvoked(null);
            }
        }
    };
}
</code></pre>
