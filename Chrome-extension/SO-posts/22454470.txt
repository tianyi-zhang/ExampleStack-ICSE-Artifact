<p>You can also try this using Canvas
First create a custom view</p>

<pre><code>public class BitmapGraphics extends View 
{
    Bitmap p;
    Display display;
    int textSize = 10;

    public BitmapGraphics(Context context) 
    {
        super(context);
        display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        init();
    }

    public BitmapGraphics(Context context, AttributeSet attrs) 
    {
        super(context, attrs);
        display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        init();
    }

    private void init() 
    {
        this.setFocusableInTouchMode(true);
        this.setFocusable(true);
        p = BitmapFactory.decodeResource(getResources(), R.drawable.icon);
    }

    @Override
    protected void onDraw(Canvas canvas) 
    {
        canvas.drawBitmap(p, 0, 0, null);
    }
}
</code></pre>

<p>Then use the custom view in your layout</p>

<pre><code>&lt;com.riz.em.BitmapGraphics
      android:id="@+id/graphics"
      android:layout_width="fill_parent"
      android:layout_height="fill_parent"/&gt;
</code></pre>

<p>And then in your activity</p>

<pre><code>public class SplashBitmap extends Activity {
    protected boolean _active = true;
    protected int _splashTime = 2000;
    AnimationSet rootSet;
    BitmapGraphics graphics;

    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        graphics = (BitmapGraphics) findViewById(R.id.graphics);
        rootSet = getAnimation();

        Thread splashTread = new Thread() {
            @Override
            public void run() {
                graphics.startAnimation(rootSet);
                try {
                    int waited = 0;
                    while (_active &amp;&amp; (waited &lt; _splashTime)) {
                        sleep(100);
                        if (_active) {
                            waited += 100;
                        }
                    }
                } catch (InterruptedException e) {
                } finally {
                    _active = false;
                    finish();
                }
            }
        };
        splashTread.start();
    }

    private AnimationSet getAnimation() {
        rootSet = new AnimationSet(true);
        rootSet.setInterpolator(new BounceInterpolator());

        TranslateAnimation trans1 = new TranslateAnimation(0, 0, -400, 0);
        trans1.setStartOffset(0);
        trans1.setDuration(800);
        trans1.setFillAfter(true);
        rootSet.addAnimation(trans1);

        ScaleAnimation scale = new ScaleAnimation(0, 1, 0, 1,
                ScaleAnimation.RELATIVE_TO_SELF, 0.5f,
                ScaleAnimation.RELATIVE_TO_SELF, 0.5f);
        scale.setDuration(800);
        scale.setFillAfter(true);
        AnimationSet childSet = new AnimationSet(true);
        childSet.addAnimation(scale);
        childSet.setInterpolator(new BounceInterpolator());
        rootSet.addAnimation(childSet);

        Animation outtoRight = new TranslateAnimation(
                Animation.RELATIVE_TO_PARENT, 0.0f,
                Animation.RELATIVE_TO_PARENT, +1.0f,
                Animation.RELATIVE_TO_PARENT, 0.0f,
                Animation.RELATIVE_TO_PARENT, 0.0f);
        outtoRight.setStartOffset(4000);
        outtoRight.setDuration(400);
        outtoRight.setInterpolator(new AccelerateInterpolator());
        rootSet.addAnimation(outtoRight);

        return rootSet;
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            _active = false;
        }
        return true;
    }
</code></pre>

<p>I have use this in my app for animating bitmap in splash screen and of-course with little modification you can use this in your app also </p>
