<p>You can parse the entire stream, and then pull out what you need. Here's an example of parsing it:</p>

<pre><code>    String url=getUrl();
    JSONObject jsonObject = new JSONObject();
    StringBuilder stringBuilder=new StringBuilder();
    try 
    {
        HttpGet httpGet = new HttpGet(url);
        HttpClient client = new DefaultHttpClient();
        HttpResponse response = client.execute(httpGet);
        HttpEntity entity = response.getEntity();
        InputStream stream = entity.getContent();
        int b;
        while ((b = stream.read()) != -1) {
            stringBuilder.append((char) b);
        }

        jsonObject = new JSONObject(stringBuilder.toString());

    } catch (JSONException e) {
        e.printStackTrace();
    } catch (ClientProtocolException e) {
    } catch (IOException e) {    }
</code></pre>

<p>Reading it, you have to navigate your way through the table, something like this:</p>

<pre><code>jsonObject.getJSONObject("Results");
</code></pre>

<p>Here's an example from one of my programs using this library:</p>

<pre><code>int statusCode=jobj.getJSONObject("info").getInt("statuscode");
</code></pre>

<p>I make heavy use out of the following to get it right:</p>

<pre><code>jsonObject.names();
</code></pre>

<p>That will give you the name of all of the keys. From there, you have to figure out if it's an array, an object, or a primitive type. It takes me a bit to get it right, but once you've done it once, it's done forever, hopefully. Take a look at <a href="http://developer.android.com/reference/org/json/JSONObject.html" rel="nofollow">the Android documents</a> on their JSON library.</p>
