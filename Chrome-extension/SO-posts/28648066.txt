<p>I cannot verify it at the moment but my guess is that you have a blank space generating some problems here:</p>

<pre><code>1. private AppiumDriver driver;
2.
3. @Before
4. public void setUp() throws Exception {
5.    File classpathRoot = new File(System.getProperty("user.dir"));
6.    File appDir = new File(classpathRoot, "../../../data/app/ "); // &lt;== HERE
7.    File app = new File(appDir, "Facebook.apk");
8.    ...
</code></pre>

<p>Appium log is telling you that the generated path is:</p>

<pre><code>"app":"/Users/eladb/WorkspaceQa/myAppiumExm/../../../data/app/ /Facebook.apk"
</code></pre>

<p>That space in line 6 at <code>"app/ "</code> is causing the final path to be <code>"/Users/eladb/WorkspaceQa/myAppiumExm/../../../data/app/ /Facebook.apk"</code>. I would rewrite line 6 like this:</p>

<pre><code>File appDir = new File(classpathRoot, "../../../data/app/");
</code></pre>

<p>Instead of <code>"app/ "</code>, use <code>"...app/"</code></p>

<h2>Canonical paths</h2>

<p>I haven't been using Java for a while so I do not remember IO APIs how they work, however you should find a better way to get the absolute path to you appfile because you have a final address which using the parent folder pattern <code>../</code> to access a resource... This is not the best. The final path should be:</p>

<pre><code>"app":"/Users/data/app/Facebook.apk"
</code></pre>

<p>Am I right? In <a href="http://stackoverflow.com/questions/1099300/whats-the-difference-between-getpath-getabsolutepath-and-getcanonicalpath">this answer</a> you can see that probably you should be using <code>getCanonicalPath</code> rather than <code>getAbsolutePath</code>.</p>

<p>If my guess is right, the following code should work:</p>

<pre><code>public void setUp() throws Exception {
    File classpathRoot = new File(System.getProperty("user.dir"));
    File appDir = new File(classpathRoot, "../../../data/app/");
    File app = new File(appDir, "Facebook.apk");
    DesiredCapabilities capabilities = new DesiredCapabilities();
    capabilities.setCapability(CapabilityType.BROWSER_NAME, "");
    capabilities.setCapability("deviceName","Android Emulator");
    capabilities.setCapability("platformVersion", "4.4");
    capabilities.setCapability("platformName","Android");
    capabilities.setCapability("app", app.getCanonicalPath());
    driver = new AndroidDriver(new URL("http://127.0.0.1:4723/wd/hub"), capabilities);
}
</code></pre>

<h2>If you want to automate an existing app...</h2>

<p>So looks like you might want to automate an existing app, the set of capabilities is as follows for Android:</p>

<pre><code>public void setUp() throws Exception {
    DesiredCapabilities capabilities = new DesiredCapabilities();
    capabilities.setCapability(CapabilityType.BROWSER_NAME, "");
    capabilities.setCapability("deviceName","Android Emulator");
    capabilities.setCapability("platformVersion", "4.4");
    capabilities.setCapability("platformName","Android");
    capabilities.setCapability("appPackage", "&lt;java-package-name-of-the-app&gt;");
    capabilities.setCapability("appActivity", "&lt;android-app-activity-name&gt;");
    driver = new AndroidDriver(new URL("http://127.0.0.1:4723/wd/hub"), capabilities);
}
</code></pre>

<p>Those new capabilities: <code>appPackage</code> and <code>appActivity</code> can be found in your app's property if you inspect Settings.</p>
