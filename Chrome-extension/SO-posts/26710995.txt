<p>I personaly use Ion's callback to set the <code>ImageView</code>'s <code>Bitmap</code> myself, and make it circular (or whatever) then:</p>

<pre><code>final ImageView imageView = (ImageView) ...
Ion.with(context)
    .load(url)
    .asBitmap()
    .setCallback(new FutureCallback&lt;Bitmap&gt;() {
            @Override
            public void onCompleted(final Exception e, final Bitmap bitmap) {
                // check for (e != null)
                final Bitmap circleBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);
                final BitmapShader shader = new BitmapShader (bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
                final Paint paint = new Paint();
                paint.setShader(shader);
                final Canvas canvas = new Canvas(circleBitmap);
                canvas.drawCircle(bitmap.getWidth() / 2, bitmap.getHeight() / 2, bitmap.getWidth() / 2, paint);
                // maybe bitmap.recycle() here?
                imageView.setImageBitmap(circularBitmap);
            }
    });
</code></pre>

<p>This general structure allows you to work with <code>Bitmap</code> in any way you want.</p>

<p><strong>EDIT: If you are using Support Library v4, you should use <a href="https://developer.android.com/reference/android/support/v4/graphics/drawable/RoundedBitmapDrawable.html" rel="nofollow">RoundedBitmapDrawable</a> instead:</strong></p>

<pre><code>final RoundedBitmapDrawable roundedBitmapDrawable = RoundedBitmapDrawableFactory.create(getResources(), bitmap);
roundedBitmapDrawable.setCornerRadius(Math.min(roundedBitmapDrawable.getMinimumWidth(), roundedBitmapDrawable.getMinimumHeight()) / 2.0F);
imageView.setImageDrawable(roundedBitmapDrawable);
</code></pre>
