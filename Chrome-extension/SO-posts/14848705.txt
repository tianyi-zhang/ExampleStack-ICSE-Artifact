<p>Well you haven't posted your real code otherwise I would have told you exact solution.
Now based on your sample code, all I can suggest is look out for the line which is responsible for setting checkbox state in getview method:</p>

<pre><code>holder.name.setChecked(country.isSelected());
</code></pre>

<p>Now on your header checkbox click listener, all you have to do is set that parameter to true.
Based on example it will be  country.setSelected(true); for all items which should be checked on header click.</p>

<p>Then call </p>

<pre><code>dataAdapter.notifyDataSetChanged();
</code></pre>

<p>It will refresh your listview and mark all those checkboxes as selected.</p>

<p>EDIT:</p>

<p>Here is working code to select all items under a header using SeparatedListAdapter:</p>

<p>ListSample.java</p>

<pre><code>import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import android.app.Activity;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

public class ListSample extends Activity implements HeaderClickListener
    {

        public final static String ITEM_TITLE = "title";
        public final static String ITEM_CAPTION = "caption";

        // SectionHeaders
        private final static String[] days = new String[]{"Mon", "Tue", "Wed", "Thur", "Fri"};

        // MENU - ListView
        private ListView addJournalEntryItem;

        // Adapter for ListView Contents
        private SeparatedListAdapter adapter;

        // ListView Contents
        private ListView journalListView;

        public Map&lt;String, ?&gt; createItem(String title, String caption)
            {
                Map&lt;String, String&gt; item = new HashMap&lt;String, String&gt;();
                item.put(ITEM_TITLE, title);
                item.put(ITEM_CAPTION, caption);
                return item;
            }

        @Override
        public void onCreate(Bundle icicle)
            {
                super.onCreate(icicle);
                // Sets the View Layer
                setContentView(R.layout.main);
                // Interactive Tools
                final ArrayAdapter&lt;String&gt; journalEntryAdapter = new ArrayAdapter&lt;String&gt;(this, R.layout.add_journalentry_menuitem, new String[]{"Add Journal Entry"});
                // AddJournalEntryItem
                addJournalEntryItem = (ListView) this.findViewById(R.id.add_journalentry_menuitem);
                addJournalEntryItem.setAdapter(journalEntryAdapter);
                addJournalEntryItem.setOnItemClickListener(new OnItemClickListener()
                    {
                        @Override
                        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long duration)
                            {
                                String item = journalEntryAdapter.getItem(position);
                                Toast.makeText(getApplicationContext(), item, Toast.LENGTH_SHORT).show();
                            }
                    });

                // Create the ListView Adapter
                adapter = new SeparatedListAdapter(this);
                // Add Sections
                for (int i = 0; i &lt; days.length; i++)
                {
                    ArrayList&lt;CategoryList&gt; categoryLists = new ArrayList&lt;CategoryList&gt;();
                    for(int j = 0; j &lt; 10; j++)
                    {
                    CategoryList categoryList = new CategoryList();
                    categoryList.setSelected(false);
                    categoryList.setTitle(days[i] + j);
                    categoryLists.add(categoryList);
                    }
                    CustomBaseAdpater baseAdpater = new CustomBaseAdpater(categoryLists);
                    adapter.addSection(days[i], baseAdpater);
                }

                // Get a reference to the ListView holder
                journalListView = (ListView) this.findViewById(R.id.list_journal);

                // Set the adapter on the ListView holder
                journalListView.setAdapter(adapter);

                // Listen for Click events
                journalListView.setOnItemClickListener(new OnItemClickListener()
                    {
                        @Override
                        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long duration)
                            {
                                String item = (String) adapter.getItem(position);
                                Toast.makeText(getApplicationContext(), item, Toast.LENGTH_SHORT).show();
                            }
                    });
            }

        private class CustomBaseAdpater extends BaseAdapter
        {

            ArrayList&lt;CategoryList&gt; list = null;
            CustomBaseAdpater( ArrayList&lt;CategoryList&gt; categoryLists )
            {
                this.list = categoryLists;
            }

            @Override
            public int getCount() {
                return list.size();
            }

            @Override
            public Object getItem(int position) {
                return null;
            }

            @Override
            public long getItemId(int position) {
                return 0;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                ViewHolder viewHolder = null;
                if (null == convertView)
                {
                    viewHolder = new ViewHolder();
                    LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
                    convertView = inflater.inflate(R.layout.item_row, null);
                    viewHolder.checkBox = (CheckBox) convertView.findViewById(R.id.checkItem);
                    viewHolder.textView = (TextView) convertView.findViewById(R.id.textTitle);
                    convertView.setTag(viewHolder);
                }
                else
                    viewHolder = (ViewHolder) convertView.getTag();

                viewHolder.checkBox.setChecked(list.get(position).isSelected());
                viewHolder.textView.setText(list.get(position).getTitle());

                return convertView;
            }

            private class ViewHolder
            {
                CheckBox checkBox;
                TextView textView;
            }
            private void checkCompleteSection()
            {
                for(CategoryList categoryList : this.list)
                categoryList.setSelected(true);
            }
        }

        @Override
        public void refreshSection(String sectionName) {
            if(adapter.sections.get(sectionName) != null)
            {
                ((CustomBaseAdpater)(adapter.sections.get(sectionName))).checkCompleteSection();
                adapter.notifyDataSetChanged();
            }
        }

    }
</code></pre>

<p>SeparatedListAdapter.java</p>

<pre><code>import java.util.LinkedHashMap;
import java.util.Map;

import android.content.Context;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Adapter;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.Toast;

public class SeparatedListAdapter extends BaseAdapter
    {
        public final Map&lt;String, Adapter&gt; sections = new LinkedHashMap&lt;String, Adapter&gt;();
        public final ArrayAdapter&lt;String&gt; headers;
        public final static int TYPE_SECTION_HEADER = 0;
        Context context = null;

        public SeparatedListAdapter(Context context)
            {
                headers = new ArrayAdapter&lt;String&gt;(context, R.layout.list_header);
                this.context = context;
            }

        public void addSection(String section, Adapter adapter)
            {
                this.headers.add(section);
                this.sections.put(section, adapter);
            }

        public Object getItem(int position)
            {
                for (Object section : this.sections.keySet())
                    {
                        Adapter adapter = sections.get(section);
                        int size = adapter.getCount() + 1;

                        // check if position inside this section
                        if (position == 0) return section;
                        if (position &lt; size) return adapter.getItem(position - 1);

                        // otherwise jump into next section
                        position -= size;
                    }
                return null;
            }

        public int getCount()
            {
                // total together all sections, plus one for each section header
                int total = 0;
                for (Adapter adapter : this.sections.values())
                    total += adapter.getCount() + 1;
                return total;
            }

        @Override
        public int getViewTypeCount()
            {
                // assume that headers count as one, then total all sections
                int total = 1;
                for (Adapter adapter : this.sections.values())
                    total += adapter.getViewTypeCount();
                return total;
            }

        @Override
        public int getItemViewType(int position)
            {
                int type = 1;
                for (Object section : this.sections.keySet())
                    {
                        Adapter adapter = sections.get(section);
                        int size = adapter.getCount() + 1;

                        // check if position inside this section
                        if (position == 0) return TYPE_SECTION_HEADER;
                        if (position &lt; size) return type + adapter.getItemViewType(position - 1);

                        // otherwise jump into next section
                        position -= size;
                        type += adapter.getViewTypeCount();
                    }
                return -1;
            }

        public boolean areAllItemsSelectable()
            {
                return false;
            }

        @Override
        public boolean isEnabled(int position)
            {
                return (getItemViewType(position) != TYPE_SECTION_HEADER);
            }

        @Override
        public View getView(int position, View convertView, ViewGroup parent)
            {
                int sectionnum = 0;
                for (Object section : this.sections.keySet())
                    {
                        Adapter adapter = sections.get(section);
                        int size = adapter.getCount() + 1;

                        // check if position inside this section
                        if (position == 0) 
                        {
                         View headerView = headers.getView(sectionnum, convertView, parent);
                         headerView.setTag(section);
                         headerView.setOnClickListener(new OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    String sectionName = v.getTag().toString();
                                Toast.makeText(context,  sectionName ,2000).show();
                                ((HeaderClickListener) context).refreshSection(sectionName);    
                                }
                            });
                         return headerView;
                        }
                        if (position &lt; size) return adapter.getView(position - 1, convertView, parent);

                        // otherwise jump into next section
                        position -= size;
                        sectionnum++;
                    }
                return null;
            }

        @Override
        public long getItemId(int position)
            {
                return position;
            }

    }
</code></pre>

<p>item_row.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal" &gt;
    &lt;CheckBox 
        android:id="@+id/checkItem"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="5dp"
        /&gt;
    &lt;TextView 
        android:id="@+id/textTitle"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        /&gt;

&lt;/LinearLayout&gt;
</code></pre>
