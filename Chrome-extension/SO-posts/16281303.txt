<p>It's not very simple and fast to implement it. First you need a component(Could be a broadcastReceiver) on the test phone "waiting" for the sms. You could register your receiver in order to trigger the sms event and check for the sender for example, or the text itself to see if it's a "request-gps" sms. When you receive the sms you could start a Service to track your gps location, and when you get it, you could reply to this number with the location. In your application (which send firstly the sms) you receive the sms with the gps location and you could display the position in a map.</p>

<p>So the user send the sms:</p>

<pre><code>smsManager.sendTextMessage(smsNumber, null, requestGps, null, null);
</code></pre>

<p>On the "animal side" there is the receiver:</p>

<pre><code>   @Override
      public void onReceive(Context context, Intent intent) {


        //---get the SMS message passed in---
        Bundle bundle = intent.getExtras();        
        SmsMessage[] msgs = null;
        String sender = "";            
        if (bundle != null)
        {
            //---retrieve the SMS message received---
            Object[] pdus = (Object[]) bundle.get("pdus");
            msgs = new SmsMessage[pdus.length];            
            for (int i=0; i&lt;msgs.length; i++){
                msgs[i] = SmsMessage.createFromPdu((byte[])pdus[i]);                
                sender += msgs[i].getOriginatingAddress(); 
            }   
        } 
  }
</code></pre>

<p>On the service (Always "animal" side) you register for GPS location and then you reply to the SMS</p>

<pre><code>smsManager.sendTextMessage(smsNumber, null, gpsLocation, null, null);
</code></pre>

<p>And in user side you receive the sms exactly as the "animal" does, and then you display the gps coordinates on your map</p>
