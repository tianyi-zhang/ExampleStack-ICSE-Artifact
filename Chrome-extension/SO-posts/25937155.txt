<p>Another Possibility. I use this technique quite a bit in Java games on the PC. It uses a little transparency class I stumbled across a number of years ago at this location:</p>

<pre><code> /*************************************************************************
 * The Transparency class was also developed by a thrid party. Info
 * on its use can be found at:
 *
 * http://www.rgagnon.com/javadetails/java-0265.html
 *
 *************************************************************************/
//Transparency is a "Static", "Inner" class that will set a given color
//as transparent in a given image.
class Transparency {
    public static Image set(Image im, final Color color) {
        ImageFilter filter = new RGBImageFilter() { //Inner - Inner class -- very bad
            // the color we are looking for... Alpha bits are set to opaque
            public int markerRGB = color.getRGB() | 0xFF000000;

            public final int filterRGB(int x, int y, int rgb) {
                if ( ( rgb | 0xFF000000 ) == markerRGB ) {
                    // Mark the alpha bits as zero - transparent
                    return 0x00FFFFFF &amp; rgb;
                }
                else {
                    // nothing to do
                    return rgb;
                }
            }
        };
        //apply the filter created above to the image
        ImageProducer ip = new FilteredImageSource(im.getSource(), filter);
        return Toolkit.getDefaultToolkit().createImage(ip);
    }
}
</code></pre>

<p>Taking a Java Image object as input it will take what ever color you give it and perform the math on the image turning the color transparent.</p>

<p>Good luck.</p>
