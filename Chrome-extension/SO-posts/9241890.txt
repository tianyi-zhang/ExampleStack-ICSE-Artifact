<p>OK, here is the steps:  </p>

<ol>
<li>go to <a href="http://www.antlr.org/">ANTLR Site</a> and download the latest version now it's 3.4</li>
<li>Download the Java.g and the JavaTreeParser.g files from <a href="http://www.antlr.org/grammar/1207932239307/Java1_5Grammars">here</a>.</li>
<li>run $java -jar antlrTool Java.g and $java -jar antlrTool JavaTreeParser.g</li>
<li>5 files will be generated:
<ol>
<li>Java.tokens</li>
<li>JavaLexer.java</li>
<li>JavaParser.java</li>
<li>JavaTreeParser.g</li>
<li>JavaTreeParser.tokens</li>
</ol></li>
</ol>

<p>use this java code to generate the Abstract Syntax Tree and to print it:</p>

<pre><code>        String input = "public class HelloWord {"+
                   "public void print(String r){" +
                   "for(int i = 0;true;i+=2)" +
                   "System.out.println(r);" +
                   "}" +
                   "}";

    CharStream cs = new ANTLRStringStream(input);
    JavaLexer jl = new JavaLexer(cs);

    CommonTokenStream tokens = new CommonTokenStream();
    tokens.setTokenSource(jl);
    JavaParser jp = new JavaParser(tokens);
    RuleReturnScope result = jp.compilationUnit();
    CommonTree t = (CommonTree) result.getTree();

    CommonTreeNodeStream nodes = new CommonTreeNodeStream(t);

    nodes.setTokenStream(tokens);

    JavaTreeParser walker = new JavaTreeParser(nodes);

    System.out.println("\nWalk tree:\n");

    printTree(t,0);


    System.out.println(tokens.toString());

    }

public static void printTree(CommonTree t, int indent) {
    if ( t != null ) {
        StringBuffer sb = new StringBuffer(indent);
        for ( int i = 0; i &lt; indent; i++ )
            sb = sb.append("   ");
        for ( int i = 0; i &lt; t.getChildCount(); i++ ) {
            System.out.println(sb.toString() + t.getChild(i).toString());
            printTree((CommonTree)t.getChild(i), indent+1);
        }
    }
}
</code></pre>
