<p>They use catching exceptions to make the <code>equals()</code> code shorter. I don't think it's a good practice but it works. They replace many <code>if</code>-checks by catching the exceptions. </p>

<p>Have a look at an example of auto-generated <code>equals()</code> method by Eclipse:</p>

<pre><code>public class Person {
    final private String firstName;
    final private String lastName;
    ...
    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        Person other = (Person) obj;
        if (firstName == null) {
            if (other.firstName != null) {
                return false;
            }
        }
        else if (!firstName.equals(other.firstName)) {
            return false;
        }
        if (lastName == null) {
            if (other.lastName != null) {
                return false;
            }
        }
        else if (!lastName.equals(other.lastName)) {
            return false;
        }
        return true;
    }
}
</code></pre>

<p>That's a correct way of implementing <code>equals()</code> to fully <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-" rel="nofollow">fulfill its contract</a>.
Now notice that in all the cases when some test for a proper type or for a null fails, the <code>equals()</code> method returs <code>false</code>. So the idea in the code you provided is to ommit all the checks and just catch the exception. Something like this:</p>

<pre><code>@Override
public boolean equals(Object obj) {
    try {
        // Ommit any type-checks before type-casting
        // and replace them with catching ClassCastException:
        final Person other = (Person) obj;
        // Ommit any null-checks before using the references
        // and replace them with catching NullPointerException:
        if (firstName.equals(other.firstName)
                &amp;&amp; lastName.equals(other.lastName)) {
            return true;
        }
    }
    catch (ClassCastException | NullPointerException unused) {
        // swallow the exception as it is not an error here
    }
    return false;
}
</code></pre>

<p>As you may see, the code does the same but is significantly shorter. However, it is usually considered as bad practice. Still I must admit that the code is better readable :)</p>

<p>The reason why it is considered as bad practice is very well described in Joshua Bloch's <a href="http://uet.vnu.edu.vn/~chauttm/e-books/java/Effective.Java.2nd.Edition.May.2008.3000th.Release.pdf" rel="nofollow">Effective Java</a>, Item 57: Use exceptions only for exceptional conditions:</p>

<blockquote>
  <p>Exceptions are, as their name implies, to be used only for exceptional
  conditions; they should never be used for ordinary control flow.</p>
</blockquote>
