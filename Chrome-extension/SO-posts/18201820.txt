<p>If you need to change your adapter data to delete or recreate i have made simple changes in android Support4Demos to demonstrate how i have update my adapter 's Fragment pages.</p>

<pre><code>/**
 * Demonstrates combining a TabHost with a ViewPager to implement a tab UI
 * that switches between tabs and also allows the user to perform horizontal
 * flicks to move between the tabs.
 */
public class FragmentTabsPager extends FragmentActivity implements View.OnClickListener,FragmentCallBack{

    TabHost mTabHost;
    ViewPager  mViewPager;

    TabsAdapter mTabsAdapter;

    private Button mBtn_nextFragment;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setContentView(R.layout.fragment_tabs_pager);
        mTabHost = (TabHost)findViewById(android.R.id.tabhost);

        mBtn_nextFragment=(Button)findViewById(R.id.btn_next_fragment);

        mBtn_nextFragment.setOnClickListener(this);

        mTabHost.setup();

        mViewPager = (ViewPager)findViewById(R.id.pager);

        mTabsAdapter = new TabsAdapter(this, mTabHost, mViewPager);

        mTabsAdapter.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"),
                FragmentStackSupport.CountingFragment.class, null);
        mTabsAdapter.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"),
                LoaderCursorSupport.CursorLoaderListFragment.class, null);
        mTabsAdapter.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"),
                LoaderCustomSupport.AppListFragment.class, null);
        mTabsAdapter.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"),
                LoaderThrottleSupport.ThrottledLoaderListFragment.class, null);

        if (savedInstanceState != null) {
            mTabHost.setCurrentTabByTag(savedInstanceState.getString("tab"));
        }
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putString("tab", mTabHost.getCurrentTabTag());
    }

    /**
     * This is a helper class that implements the management of tabs and all
     * details of connecting a ViewPager with associated TabHost.  It relies on a
     * trick.  Normally a tab host has a simple API for supplying a View or
     * Intent that each tab will show.  This is not sufficient for switching
     * between pages.  So instead we make the content part of the tab host
     * 0dp high (it is not shown) and the TabsAdapter supplies its own dummy
     * view to show as the tab content.  It listens to changes in tabs, and takes
     * care of switch to the correct paged in the ViewPager whenever the selected
     * tab changes.
     */
    public static class TabsAdapter extends FragmentStatePagerAdapter
            implements TabHost.OnTabChangeListener, ViewPager.OnPageChangeListener {
        private final Context mContext;
        private final TabHost mTabHost;
        private final ViewPager mViewPager;
        private final ArrayList&lt;TabInfo&gt; mTabs = new ArrayList&lt;TabInfo&gt;();

        static final class TabInfo {
            private final String tag;
            private final Class&lt;?&gt; clss;
            private final Bundle args;

            TabInfo(String _tag, Class&lt;?&gt; _class, Bundle _args) {
                tag = _tag;
                clss = _class;
                args = _args;
            }
        }

        static class DummyTabFactory implements TabHost.TabContentFactory {
            private final Context mContext;

            public DummyTabFactory(Context context) {
                mContext = context;
            }

            @Override
            public View createTabContent(String tag) {
                View v = new View(mContext);
                v.setMinimumWidth(0);
                v.setMinimumHeight(0);
                return v;
            }
        }

        public TabsAdapter(FragmentActivity activity, TabHost tabHost, ViewPager pager) {
            super(activity.getSupportFragmentManager());
            mContext = activity;
            mTabHost = tabHost;
            mViewPager = pager;
            mTabHost.setOnTabChangedListener(this);
            mViewPager.setAdapter(this);
            mViewPager.setOnPageChangeListener(this);
        }

        public void clearData(){

            mTabs.clear();
            notifyDataSetChanged();

        }

        public void addTab(TabHost.TabSpec tabSpec, Class&lt;?&gt; clss, Bundle args) {
            tabSpec.setContent(new DummyTabFactory(mContext));
            String tag = tabSpec.getTag();

            TabInfo info = new TabInfo(tag, clss, args);
            mTabs.add(info);

            mTabHost.addTab(tabSpec);

            notifyDataSetChanged();
        }

        @Override
        public int getCount() {
            return mTabs.size();
        }

        @Override
        public Fragment getItem(int position) {
            TabInfo info = mTabs.get(position);
            return Fragment.instantiate(mContext, info.clss.getName(), info.args);
        }

        @Override
        public void onTabChanged(String tabId) {
            int position = mTabHost.getCurrentTab();
            mViewPager.setCurrentItem(position);
        }

        @Override
        public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {

        }

        @Override
        public void onPageSelected(int position) {
            // Unfortunately when TabHost changes the current tab, it kindly
            // also takes care of putting focus on it when not in touch mode.
            // The jerk.
            // This hack tries to prevent this from pulling focus out of our
            // ViewPager.
            TabWidget widget = mTabHost.getTabWidget();
            int oldFocusability = widget.getDescendantFocusability();
            widget.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
            mTabHost.setCurrentTab(position);
            widget.setDescendantFocusability(oldFocusability);

        }

        @Override
        public void onPageScrollStateChanged(int state) {
        }
    }

    @Override
    public void onClick(View v) {


        mTabsAdapter.clearData();

        mTabHost.clearAllTabs();
        //mTabsAdapter.notifyDataSetChanged();

        Bundle mBundleSimple=new Bundle();
        mBundleSimple.putString("data", "SimpleData");

        mTabsAdapter.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"),
                FragmentStackSupport.CountingFragment.class, mBundleSimple);

        Bundle mBundleContacts=new Bundle();
        mBundleContacts.putString("data", "Contacts");

        mTabsAdapter.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"),
                LoaderCursorSupport.CursorLoaderListFragment.class, mBundleContacts);

        Bundle mBundleCustom=new Bundle();
        mBundleCustom.putString("data", "Custom");

        mTabsAdapter.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"),
                LoaderCustomSupport.AppListFragment.class, mBundleCustom);

        Bundle mBundleThrottle=new Bundle();
        mBundleThrottle.putString("data", "Throttle");

        mTabsAdapter.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"),
                LoaderThrottleSupport.ThrottledLoaderListFragment.class, mBundleThrottle);


        mViewPager.setAdapter(mTabsAdapter);

    }

    @Override
    public void ClickButton(String strToken) {

        if(strToken.equalsIgnoreCase("OneBtn")){


            mTabsAdapter.clearData();

            mTabHost.clearAllTabs();
            //mTabsAdapter.notifyDataSetChanged();

            Bundle mBundleSimple=new Bundle();
            mBundleSimple.putString("data", "SimpleData");

            mTabsAdapter.addTab(mTabHost.newTabSpec("simple").setIndicator("Simple"),
                    FragmentStackSupport.CountingFragment.class, mBundleSimple);

            Bundle mBundleContacts=new Bundle();
            mBundleContacts.putString("data", "SimpleData");

            mTabsAdapter.addTab(mTabHost.newTabSpec("contacts").setIndicator("Contacts"),
                    LoaderCursorSupport.CursorLoaderListFragment.class, mBundleContacts);

            Bundle mBundleCustom=new Bundle();
            mBundleCustom.putString("data", "Custom");

            mTabsAdapter.addTab(mTabHost.newTabSpec("custom").setIndicator("Custom"),
                    LoaderCustomSupport.AppListFragment.class, mBundleCustom);

            Bundle mBundleThrottle=new Bundle();
            mBundleThrottle.putString("data", "Throttle");

            mTabsAdapter.addTab(mTabHost.newTabSpec("throttle").setIndicator("Throttle"),
                    LoaderThrottleSupport.ThrottledLoaderListFragment.class, mBundleThrottle);


            mViewPager.setAdapter(mTabsAdapter);
        }

    }
}
</code></pre>

<p>In above Fragment Activity i have made below change to recreate Adapter data.</p>

<p>1.Make public function which clear Fragments list and in this example that is mTabs.
2.After clear Fragments Array add your new Fragment with your required change ,in above class you can see that i have add fragments with it's bundles and that i can get in all Fragment class.
3.Set Adaper in ViewPager.</p>

<p>Below is class which hold code of Fragment .</p>

<pre><code>public class FragmentStackSupport extends FragmentActivity {
    int mStackLevel = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_stack);

        // Watch for button clicks.
        Button button = (Button)findViewById(R.id.new_fragment);
        button.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                addFragmentToStack();
            }
        });
        button = (Button)findViewById(R.id.home);
        button.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                // If there is a back stack, pop it all.
                FragmentManager fm = getSupportFragmentManager();
                if (fm.getBackStackEntryCount() &gt; 0) {
                    fm.popBackStack(fm.getBackStackEntryAt(0).getId(),
                            FragmentManager.POP_BACK_STACK_INCLUSIVE);
                }
            }
        });

        if (savedInstanceState == null) {
            // Do first time initialization -- add initial fragment.
            Fragment newFragment = CountingFragment.newInstance(mStackLevel);
            FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
            ft.add(R.id.simple_fragment, newFragment).commit();
        } else {
            mStackLevel = savedInstanceState.getInt("level");
        }
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt("level", mStackLevel);
    }


    void addFragmentToStack() {
        mStackLevel++;

        // Instantiate a new fragment.
        Fragment newFragment = CountingFragment.newInstance(mStackLevel);

        // Add the fragment to the activity, pushing this transaction
        // on to the back stack.
        FragmentTransaction ft = getSupportFragmentManager().beginTransaction();
        ft.replace(R.id.simple_fragment, newFragment);
        ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
        ft.addToBackStack(null);
        ft.commit();
    }



    public static class CountingFragment extends Fragment implements OnClickListener {
        int mNum;

        Button mBtnOne;

        FragmentCallBack mFragmentCallBack;

        /**
         * Create a new instance of CountingFragment, providing "num"
         * as an argument.
         */
        static CountingFragment newInstance(int num) {
            CountingFragment f = new CountingFragment();

            // Supply num input as an argument.
            Bundle args = new Bundle();
            args.putInt("num", num);
            f.setArguments(args);

            return f;
        }

        /**
         * When creating, retrieve this instance's number from its arguments.
         */
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            mNum = getArguments() != null ? getArguments().getInt("num") : 1;


            if(getArguments()!=null){

                if(getArguments().containsKey("data")){

                    String dataIs=getArguments().getString("data");

                    Log.v("LOG_TAG", "THis Tab data is  "+ dataIs );


                }
            }
        }

        /**
         * The Fragment's UI is just a simple text view showing its
         * instance number.
         */
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {

             if(getArguments()!=null){

                if(getArguments().containsKey("data")){

                    String dataIs=getArguments().getString("data");

                    Log.v("LOG_TAG", "THis Tab data is  onCreateView "+ dataIs );


                }
             }

            View v = inflater.inflate(R.layout.hello_world, container, false);

            TextView tv = (TextView) v.findViewById(R.id.text);

            mBtnOne=(Button)v.findViewById(R.id.btn_one);

            mBtnOne.setOnClickListener(this);

           tv.setText("Fragment #" + mNum);
            tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb));
            return v;
        }

        @Override
        public void onClick(View v) {

            try{
                mFragmentCallBack=(FragmentCallBack) this.getActivity();

                mFragmentCallBack.ClickButton("OneBtn");

            }catch(ClassCastException classExc){

                classExc.printStackTrace();
            }

        }
    }

}
</code></pre>

<p>Now when some thing is change in any of your fragment you need to create one interface which send CallBack to FragmentActivity which hold your ViewPager so you can remove existing Fragment and recreate it again .</p>

<p>Here is my interface class.</p>

<pre><code>public interface FragmentCallBack {


    public void ClickButton(String strToken);
} 
</code></pre>

<p>Hope you will get how you can do that same in your code.</p>
