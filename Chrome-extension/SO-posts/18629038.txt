<p>Yes, from the implementation of the window, you can see every time you call setcontentview(), the former view are all removed.</p>

<pre><code>@Override
public void setContentView(int layoutResID) {
    if (mContentParent == null) {
        installDecor();
    } else {
        mContentParent.removeAllViews();
    }
    mLayoutInflater.inflate(layoutResID, mContentParent);
    final Callback cb = getCallback();
    if (cb != null &amp;&amp; !isDestroyed()) {
        cb.onContentChanged();
    }
}
</code></pre>

<p>And more deep inside... you can see all the child views are removed and de-referenced. And they are left for GC.</p>

<pre><code>public void removeAllViewsInLayout() {
    final int count = mChildrenCount;
    if (count &lt;= 0) {
        return;
    }

    final View[] children = mChildren;
    mChildrenCount = 0;

    final View focused = mFocused;
    final boolean detach = mAttachInfo != null;
    View clearChildFocus = null;

    needGlobalAttributesUpdate(false);

    for (int i = count - 1; i &gt;= 0; i--) {
        final View view = children[i];

        if (mTransition != null) {
            mTransition.removeChild(this, view);
        }

        if (view == focused) {
            view.clearFocusForRemoval();
            clearChildFocus = view;
        }

        if (view.getAnimation() != null ||
                (mTransitioningViews != null &amp;&amp; mTransitioningViews.contains(view))) {
            addDisappearingView(view);
        } else if (detach) {
           view.dispatchDetachedFromWindow();
        }

        onViewRemoved(view);

        view.mParent = null;
        children[i] = null;
    }

    if (clearChildFocus != null) {
        clearChildFocus(clearChildFocus);
    }
}
</code></pre>
