<p>You can do naively though. First you need to sort the array. You can do it using any of sorting algorithms. I did use quick sort. And then check a position with its next position. If they are not same, add value in a new array, otherwise skip this iteration. </p>

<p><strong>Sample Code (Quick Sort):</strong> </p>

<pre><code> public static void quickSort(int[] array, int low, int high) {
    int i = low;
    int j = high;

    int pivot = array[low + (high - low) / 2];

    while (i &lt;= j) {
        while (array[i] &lt; pivot) i++;
        while (array[j] &gt; pivot) j--;
        if (i &lt;= j) {
            exchange(array, i, j);
            i++;
            j--;
        }
    }
    if (0 &lt; j) quickSort(array, 0, j);
    if (i &lt; high) quickSort(array, i, high);
}

public static void exchange(int[] array, int i, int j) {
    int temp = array[i];
    array[i] = array[j];
    array[j] = temp;
}
</code></pre>

<p><strong>Remove duplicates:</strong></p>

<pre><code> public static int[] removeDuplicate(int[] arrays) {
    quickSort(arrays, 0, arrays.length - 1);

    int[] newArrays = new int[arrays.length];
    int count = 0;
    for (int i = 0; i &lt; arrays.length - 1; i++) {
        if (arrays[i] != arrays[i + 1]) {
            newArrays[count] = arrays[i];
            count++;
        }
    }
    return newArrays;
}
</code></pre>
