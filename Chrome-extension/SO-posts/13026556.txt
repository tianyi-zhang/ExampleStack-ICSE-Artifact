<p>I have solved my problem by making a timer in one activity and calling its protected function in my other activity.</p>

<p>This is the startTimer function to start the timer:</p>

<pre><code>private void startTimer(){ 
    if (mTimer == null) { 
        mTimer = new Timer(); 
    } 
    if (mTimerTask == null) { 
        mTimerTask = new TimerTask() { 
            @Override 
            public void run() { 
                Log.i(TAG, "count: "+String.valueOf(count)); 
                sendMessage(UPDATE_TEXTVIEW); 

                do { 
                    try { 
                        Log.i(TAG, "sleep(1000)..."); 
                        Thread.sleep(1000); 
                    } catch (InterruptedException e) { 
                    }    
                } while (isPause);  
                count ++;   
            } 
        }; 
    } 
    if(mTimer != null &amp;&amp; mTimerTask != null ) 
        mTimer.schedule(mTimerTask, delay, period); 
} 
</code></pre>

<p>and this is the public function which can be used by any other activity:</p>

<pre><code>public String valueOfTimer()
{
    return String.valueOf(count);
}
</code></pre>

<p>and this is how I am getting the value on other activity:</p>

<pre><code>private void updateTime()
{
    TimerActivity tm  = new TimerActivity();

    String time = tm.valueOfTimer();
    t2.setText(time);
    System.out.println("Time::"+time);
}
</code></pre>
