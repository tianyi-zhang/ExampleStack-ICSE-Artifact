<p>It's always better to have it in a separate file, preferably in the JAR itself, so you can easily reach it with <code>getResourceAsStream()</code>.</p>

<p>You can then easily edit this file without messing with code, and you can also modify it after the app is compiled to JAR.</p>

<p>It's a good practice to divide logic from data, in general.</p>

<hr>

<p>Here are some methods from my FileUtils class you might like:</p>

<pre><code>public static String streamToString(InputStream in) {

    BufferedReader br = null;
    StringBuilder sb = new StringBuilder();

    String line;
    try {

        br = new BufferedReader(new InputStreamReader(in));
        while ((line = br.readLine()) != null) {
            sb.append(line + "\n");
        }

    } catch (IOException e) {
        Log.e(e);
    } finally {
        if (br != null) {
            try {
                br.close();
            } catch (IOException e) {
                Log.e(e);
            }
        }
    }

    return sb.toString();
}


public static InputStream stringToStream(String text) {

    try {
        return new ByteArrayInputStream(text.getBytes("UTF-8"));
    } catch (UnsupportedEncodingException e) {
        Log.e(e);
        return null;
    }
}


public static InputStream getResource(String path) {

    return FileUtils.class.getResourceAsStream(path);
}
</code></pre>

<p>You can also use a <code>SimpleConfig</code> class to parse lists and maps from files:<br>
(comment out the Log.something calls and replace with System.err.println())</p>

<pre><code>package net.mightypork.rpack.utils;


import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;


/**
 * Utility for parsing simple config files&lt;br&gt;
 * # and // mark a comment&lt;br&gt;
 * empty lines and lines without "=" are ignored&lt;br&gt;
 * lines with "=" must have "key = value" format, or a warning is logged.&lt;br&gt;
 * use "NULL" to create empty value.
 * 
 * @author MightyPork
 */
public class SimpleConfig {

    /**
     * Load list from file
     * 
     * @param file file
     * @return map of keys and values
     * @throws IOException
     */
    public static List&lt;String&gt; listFromFile(File file) throws IOException {

        String fileText = FileUtils.fileToString(file);

        return listFromString(fileText);
    }


    /**
     * Load map from file
     * 
     * @param file file
     * @return map of keys and values
     * @throws IOException
     */
    public static Map&lt;String, String&gt; mapFromFile(File file) throws IOException {

        String fileText = FileUtils.fileToString(file);

        return mapFromString(fileText);
    }


    /**
     * Load list from string
     * 
     * @param text text of the file
     * @return map of keys and values
     */
    public static List&lt;String&gt; listFromString(String text) {

        List&lt;String&gt; list = new ArrayList&lt;String&gt;();

        String[] groupsLines = text.split("\n");

        for (String s : groupsLines) {
            // ignore invalid lines
            if (s.length() == 0) continue;
            if (s.startsWith("#") || s.startsWith("//")) continue;

            // NULL value
            if (s.equalsIgnoreCase("NULL")) s = null;

            if (s != null) s = s.replace("\\n", "\n");

            // save extracted key-value pair
            list.add(s);
        }

        return list;
    }


    /**
     * Load map from string
     * 
     * @param text text of the file
     * @return map of keys and values
     */
    public static Map&lt;String, String&gt; mapFromString(String text) {

        LinkedHashMap&lt;String, String&gt; pairs = new LinkedHashMap&lt;String, String&gt;();

        String[] groupsLines = text.split("\n");

        for (String s : groupsLines) {
            // ignore invalid lines
            if (s.length() == 0) continue;
            if (s.startsWith("#") || s.startsWith("//")) continue;
            if (!s.contains("=")) continue;

            // split and trim
            String[] parts = s.split("=");
            for (int i = 0; i &lt; parts.length; i++) {
                parts[i] = parts[i].trim();
            }

            // check if both parts are valid
            if (parts.length == 0) {
                Log.w("Bad line in config file: " + s);
                continue;
            }

            if (parts.length == 1) {
                parts = new String[] { parts[0], "" };
            }

            if (parts.length != 2) {
                Log.w("Bad line in config file: " + s);
                continue;
            }


            // NULL value
            if (parts[0].equalsIgnoreCase("NULL")) parts[0] = null;
            if (parts[1].equalsIgnoreCase("NULL")) parts[1] = null;

            if (parts[0] != null) parts[0] = parts[0].replace("\\n", "\n");
            if (parts[1] != null) parts[1] = parts[1].replace("\\n", "\n");

            // save extracted key-value pair
            pairs.put(parts[0], parts[1]);
        }

        return pairs;
    }


    /**
     * Save map to file
     * 
     * @param target
     * @param data
     * @throws IOException
     */
    public static void mapToFile(File target, Map&lt;String, String&gt; data) throws IOException {

        String text = ""; //# File written by SimpleConfig

        for (Entry&lt;String, String&gt; e : data.entrySet()) {
            if (text.length() &gt; 0) text += "\n";

            String key = e.getKey();
            String value = e.getValue();

            if (key == null) key = "NULL";
            if (value == null) value = "NULL";

            key = key.replace("\n", "\\n");
            value = value.replace("\n", "\\n");

            text += key + " = " + value;
        }

        FileUtils.stringToFile(target, text);

    }


    /**
     * Save list to file
     * 
     * @param target
     * @param data
     * @throws IOException
     */
    public static void listToFile(File target, List&lt;String&gt; data) throws IOException {

        String text = ""; //# File written by SimpleConfig

        for (String s : data) {
            if (text.length() &gt; 0) text += "\n";

            if (s == null) s = "NULL";

            s = s.replace("\n", "\\n");

            text += s;
        }

        FileUtils.stringToFile(target, text);

    }
}
</code></pre>
