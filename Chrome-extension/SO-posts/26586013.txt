<p>Ok @user3912886, now i understand your problem.
Your issue is that opening a file shouldn't de undoable.
Then you can assing first the text to text area and later add the listener.</p>

<pre><code>    public class UndoAndRedo extends javax.swing.JFrame {


        int i = 0;
        UndoManager undoManager = new UndoManager();

        public UndoAndRedo() {
            initComponents();
            rollback.setEnabled(false);
            redo.setEnabled(false);
        }

        @SuppressWarnings("unchecked")
    // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;                          
        private void initComponents() {

            tp = new javax.swing.JTabbedPane();
            jMenuBar1 = new javax.swing.JMenuBar();
            fileMenu = new javax.swing.JMenu();
            open = new javax.swing.JMenuItem();
            rollback = new javax.swing.JMenuItem();
            redo = new javax.swing.JMenuItem();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

            fileMenu.setText("File");

            open.setText("Open");
            open.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    openActionPerformed(evt);
                }
            });
            fileMenu.add(open);

            rollback.setText("Rollback");
            rollback.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    rollbackActionPerformed(evt);
                }
            });
            fileMenu.add(rollback);

            redo.setText("Redo");
            redo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    redoActionPerformed(evt);
                }
            });
            fileMenu.add(redo);

            jMenuBar1.add(fileMenu);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
            );

            pack();
        }// &lt;/editor-fold&gt;                        

        private void openActionPerformed(java.awt.event.ActionEvent evt) {
            final JFileChooser jc = new JFileChooser();
            int returnVal = jc.showOpenDialog(UndoAndRedo.this);
            String title;
            File file = null;
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                file = jc.getSelectedFile();
            }
            JTextArea text = new JTextArea();
            if (jc.getSelectedFile() != null) {
                BufferedReader br = null;
                StringBuffer str = new StringBuffer("");
                try {
                    br = new BufferedReader(new FileReader(file));
                    String line;
                    while ((line = br.readLine()) != null) {
                        str.append(line + "\n");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(UndoAndRedo.class.getName()).log(Level.SEVERE, null, ex);
                }
                String t = str.toString();
                final JInternalFrame internalFrame = new JInternalFrame("", true, true);
                title = file.getName();
                text.setFont(new java.awt.Font("Miriam Fixed", 0, 13));                    
                i += 1;
                internalFrame.setName("Doc " + i);
                JScrollPane scrollpane = new JScrollPane(text);
                internalFrame.setTitle(title);
                tp.add(internalFrame);
                internalFrame.add(scrollpane);
                internalFrame.setVisible(true);
                text.setText(t);
                text.setCaretPosition(0);
                text.getDocument().addUndoableEditListener(new UndoableEditListener() {
                    @Override
                    public void undoableEditHappened(UndoableEditEvent e) {
                        undoManager.addEdit(e.getEdit());
                        rollback.setEnabled(undoManager.canUndo());
                        redo.setEnabled(undoManager.canRedo());
                    }
                });

            }
        }

        private void rollbackActionPerformed(java.awt.event.ActionEvent evt) {
            rollback.setEnabled(undoManager.canUndo());
            if (undoManager.canUndo()) {
                undoManager.undo();
            }
            rollback.setEnabled(undoManager.canUndo());
            redo.setEnabled(undoManager.canRedo());
        }

        private void redoActionPerformed(java.awt.event.ActionEvent evt) {
            redo.setEnabled(undoManager.canRedo());
            if (undoManager.canRedo()) {
                undoManager.redo();
            }
            rollback.setEnabled(undoManager.canUndo());
            redo.setEnabled(undoManager.canRedo());
        }

        public static void main(String args[]) {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(UndoAndRedo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(UndoAndRedo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(UndoAndRedo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(UndoAndRedo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new UndoAndRedo().setVisible(true);
                }
            });
        }
        private javax.swing.JMenu fileMenu;
        private javax.swing.JMenuBar jMenuBar1;
        private javax.swing.JMenuItem open;
        private javax.swing.JMenuItem redo;
        private javax.swing.JMenuItem rollback;
        private javax.swing.JTabbedPane tp;
    }
</code></pre>
