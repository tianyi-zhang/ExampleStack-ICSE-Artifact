<p>Maybe something like the following:</p>

<p><strong>Update:</strong></p>

<p>To counteract misunderstandings, the following piece of code will ensure:</p>

<ul>
<li>Unique Pairs</li>
<li>In a random order</li>
</ul>

<p>You will have <code>n!/(n-k)!</code> unique pairs, assuming there are no duplicate elements in the source list, where <code>n</code> is the number of names and <code>k</code> is <code>2</code> as we are creating pairs.</p>

<p>After creating the unique pairs, i shuffle them to get randomness.</p>

<p>To use a better shuffle algorithm, <code>Collections.shuffle(pairs, new SecureRandom())</code> could be used.</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class NamePairTest {


  private static class NamePair {
    private final String one;
    private final String two;

    public NamePair(String one, String two) {
      super();
      this.one = one;
      this.two = two;
    }


    @Override
    public int hashCode() {
      final int prime = 31;
      int result = 1;
      result = prime * result + ((one == null) ? 0 : one.hashCode());
      result = prime * result + ((two == null) ? 0 : two.hashCode());
      return result;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null) return false;
      if (getClass() != obj.getClass()) return false;
      NamePair other = (NamePair) obj;
      if (one == null) {
        if (other.one != null) return false;
      } else if (!one.equals(other.one)) return false;
      if (two == null) {
        if (other.two != null) return false;
      } else if (!two.equals(other.two)) return false;
      return true;
    }

    @Override
    public String toString() {
      return one + " - " + two;
    }
  }


  public List&lt;NamePair&gt; createPairs(List&lt;String&gt; names) {
    List&lt;NamePair&gt; pairs = new ArrayList&lt;&gt;();
    // create all possible unique pairs, given the names list.
    for (String one : names) {
      for (String two : names) {
        // a pair must not have the same name twice
        if (!one.equals(two)) {
          NamePair newPair = new NamePair(one, two);
          // only add the pair if it is not already in the list of pairs.
          // this test will only be necessary if the names list contains duplicates.
          if (!pairs.contains(newPair)) pairs.add(newPair);
        } // if
      } // for
    } // for
    // now shuffle the list, as currently it is ordered.
    Collections.shuffle(pairs);
    return pairs;
  }


  public static void main(String[] args) {
    List&lt;String&gt; availableNames = Arrays.asList("A", "B", "C", "D", "E");
    NamePairTest namePairTest = new NamePairTest();
    for (NamePair pair : namePairTest.createPairs(availableNames)) {
      System.out.println(pair);
    }
  }

}
</code></pre>
