<p>Below is a method I use to trim long strings in my webapps.
The "soft" <code>boolean</code> as you put it, if set to <code>true</code> will preserve the last word.
This is the most concise way of doing it that I could come up with that uses a StringBuffer which is a lot more efficient than recreating a string which is immutable.</p>

<pre><code>public static String trimString(String string, int length, boolean soft) {
    if(string == null || string.trim().isEmpty()){
        return string;
    }

    StringBuffer sb = new StringBuffer(string);
    int actualLength = length - 3;
    if(sb.length() &gt; actualLength){
        // -3 because we add 3 dots at the end. Returned string length has to be length including the dots.
        if(!soft)
            return escapeHtml(sb.insert(actualLength, "...").substring(0, actualLength+3));
        else {
            int endIndex = sb.indexOf(" ",actualLength);
            return escapeHtml(sb.insert(endIndex,"...").substring(0, endIndex+3));
        }
    }
    return string;
}
</code></pre>

<p><strong>Update</strong></p>

<p>I've changed the code so that the <code>...</code> is appended in the StringBuffer, this is to prevent needless creations of <code>String</code> implicitly which is slow and wasteful.</p>

<p><strong>Note:</strong> <code>escapeHtml</code> is a static import from apache commons:</p>

<p><code>import static org.apache.commons.lang.StringEscapeUtils.escapeHtml;</code></p>

<p>You can remove it and the code should work the same.</p>
