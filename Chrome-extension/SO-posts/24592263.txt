<p>Don't use <code>getViewport().add(...)</code>, use <code>getViewport().setView(...)</code></p>

<p>This is because a viewport conceptually controls a single view and does so in a special way.</p>

<p>Don't use <code>setSize</code> or <code>setLocation</code>, this suggestions the use of a <code>null</code> layout, which is going to cause problems when run on different systems, with different fonts and rendering pipelines.  Stick with the layout management API, it'll make life much simpler </p>

<p><strong>Updated</strong></p>

<p>First things first, don't modify the state of the table or model in anyway from within cell renderers, this will set of a serious of never ending updates.</p>

<p>Second, use a TableModelListener to monitor for changes to the state of the table and a TableColumnModelListener to monitor changes to the column model</p>

<p>When you detect a change in either of these, you need to probe the appropriate cell renderer(s) to determine their preferred size(s) and adjust the column/row size accordingly.</p>

<p>Just be sure, you're not making adjustments because of events raised because of your adjustments ;)</p>

<p><strong>Updated with example</strong></p>

<p>This is a really basic example to try and give a generally idea of how you might achieve this...</p>

<p><img src="http://i.stack.imgur.com/EbEaU.png" alt="enter image description here"></p>

<pre><code>import java.awt.Color;
import java.awt.Component;
import static java.awt.Component.TOP_ALIGNMENT;
import java.awt.EventQueue;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

public class VariableTable {

    public static void main(String[] args) {
        new VariableTable();
    }

    private JTable table;
    private boolean ignoreUpdates;

    public VariableTable() {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                    ex.printStackTrace();
                }

                table = new JTable(loadTableModel());
                table.getColumnModel().getColumn(2).setCellRenderer(new TextAreaRenderer());

                table.getModel().addTableModelListener(new TableModelListener() {
                    @Override
                    public void tableChanged(TableModelEvent e) {
                        updateTableProperties();
                    }
                });
                table.getColumnModel().addColumnModelListener(new TableColumnModelListener() {

                    @Override
                    public void columnAdded(TableColumnModelEvent e) {
                        updateTableProperties();
                    }

                    @Override
                    public void columnRemoved(TableColumnModelEvent e) {
                        updateTableProperties();
                    }

                    @Override
                    public void columnMoved(TableColumnModelEvent e) {
                        updateTableProperties();
                    }

                    @Override
                    public void columnMarginChanged(ChangeEvent e) {
                        updateTableProperties();
                    }

                    @Override
                    public void columnSelectionChanged(ListSelectionEvent e) {
                    }
                });

                updateTableProperties();

                JFrame frame = new JFrame("Testing");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.add(new JScrollPane(table));
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
            }
        });
    }

    protected void updateTableProperties() {
        if (!ignoreUpdates) {
            ignoreUpdates = true;
            try {
                for (int i = 0; i &lt; table.getColumnCount() - 1; i++) {
                    adjustColumnSizes(i, 2);
                }
                adjustJTableRowSizes(2);
            } finally {
                ignoreUpdates = false;
            }
        }
    }

    private void adjustJTableRowSizes(int column) {
        for (int row = 0; row &lt; table.getRowCount(); row++) {
            int maxHeight = 0;
            TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
            Object valueAt = table.getValueAt(row, column);
            Component tableCellRendererComponent = cellRenderer.getTableCellRendererComponent(table, valueAt, false, false, row, column);

            DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
            TableColumn tc = colModel.getColumn(column);

            int heightPreferable = tableCellRendererComponent.getPreferredSize().height;
            tableCellRendererComponent.setSize(tc.getWidth(), heightPreferable);
            heightPreferable = tableCellRendererComponent.getPreferredSize().height;

            maxHeight = Math.max(heightPreferable, maxHeight);
            table.setRowHeight(row, maxHeight);
        }

    }

    public void adjustColumnSizes(int column, int margin) {
        DefaultTableColumnModel colModel = (DefaultTableColumnModel) table.getColumnModel();
        TableColumn col = colModel.getColumn(column);
        int width;

        TableCellRenderer renderer = col.getHeaderRenderer();
        if (renderer == null) {
            renderer = table.getTableHeader().getDefaultRenderer();
        }
        Component comp = renderer.getTableCellRendererComponent(table, col.getHeaderValue(), false, false, 0, 0);
        width = comp.getPreferredSize().width;

        for (int r = 0; r &lt; table.getRowCount(); r++) {
            renderer = table.getCellRenderer(r, column);
            comp = renderer.getTableCellRendererComponent(table, table.getValueAt(r, column), false, false, r, column);
            int currentWidth = comp.getPreferredSize().width;
            width = Math.max(width, currentWidth);
        }

        width += 2 * margin;

        col.setPreferredWidth(width);
        col.setWidth(width);
//        col.setMinWidth(width);
        col.setMaxWidth(width);
    }

    public TableModel loadTableModel() {

        DefaultTableModel model = new DefaultTableModel(
                        new String[]{"Chapter", "Paragraph", "Text"}, 0);

        int chapter = 0;
        int paragraph = 0;
        try (BufferedReader br = new BufferedReader(new FileReader(new File("Book.txt")))) {

            String text = null;
            while ((text = br.readLine()) != null) {
                if (text.startsWith("Chapter:")) {
                    chapter++;
                    paragraph = 0;
                } else if (text.trim().length() &gt; 0) {
                    paragraph++;
                    model.addRow(new Object[]{
                        chapter,
                        paragraph,
                        text
                    });
                }
            }

        } catch (IOException exp) {
            exp.printStackTrace();;
        }

        return model;

    }

    public static class TextAreaRenderer extends JTextArea implements TableCellRenderer {

        protected static Border NOT_SELECTED_BORDER = new EmptyBorder(1, 1, 1, 1);

        public TextAreaRenderer() {
            setLineWrap(true);
            setWrapStyleWord(true);
            this.setAlignmentY(TOP_ALIGNMENT);
            setBorder(NOT_SELECTED_BORDER);
            setColumns(20);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                        boolean hasFocus, int row, int column) {
            setText(value.toString());

            if (table == null) {
                return this;
            }

            Color fg = null;
            Color bg = null;

            JTable.DropLocation dropLocation = table.getDropLocation();
            if (dropLocation != null
                            &amp;&amp; !dropLocation.isInsertRow()
                            &amp;&amp; !dropLocation.isInsertColumn()
                            &amp;&amp; dropLocation.getRow() == row
                            &amp;&amp; dropLocation.getColumn() == column) {

                fg = UIManager.getColor("Table.dropCellForeground");
                bg = UIManager.getColor("Table.dropCellBackground");

                isSelected = true;
            }

            if (isSelected) {
                setForeground(fg == null ? table.getSelectionForeground()
                                : fg);
                setBackground(bg == null ? table.getSelectionBackground()
                                : bg);
            } else {
                Color background = table.getBackground();
                if (background == null || background instanceof javax.swing.plaf.UIResource) {
                    Color alternateColor = UIManager.getColor("Table.alternateRowColor");
                    if (alternateColor != null &amp;&amp; row % 2 != 0) {
                        background = alternateColor;
                    }
                }
                setForeground(table.getForeground());
                setBackground(background);
            }

            setFont(table.getFont());

            if (hasFocus) {
                Border border = null;
                if (isSelected) {
                    border = UIManager.getBorder("Table.focusSelectedCellHighlightBorder");
                }
                if (border == null) {
                    border = UIManager.getBorder("Table.focusCellHighlightBorder");
                }
                setBorder(border);

                if (!isSelected &amp;&amp; table.isCellEditable(row, column)) {
                    Color col;
                    col = UIManager.getColor("Table.focusCellForeground");
                    if (col != null) {
                        super.setForeground(col);
                    }
                    col = UIManager.getColor("Table.focusCellBackground");
                    if (col != null) {
                        super.setBackground(col);
                    }
                }
            } else {
                setBorder(NOT_SELECTED_BORDER);
            }

            return this;
        }

    }
}
</code></pre>
