<p>You can obviously customize the PopupMenu in your own way. Its quite simple. But first you need to take care of one very important thing.</p>

<p>The PopupMenu is created like this,</p>

<pre><code>PopupMenu popupMenu = new PopupMenu(context, anchorView);
</code></pre>

<p>Now the "context" here plays a very important role in styling. The style of the PopupMenu depends on the style of the context that you pass. So be very careful in this. I wasted almost half-and-hour figuring out this.</p>

<p>If you are in a fragment just pass "getActivity()" and you are done.</p>

<p><strong>Styling of the PopupMenu items</strong></p>

<p>Just override the following items in your style,</p>

<pre><code>&lt;item name="textAppearanceLargePopupMenu"&gt;@style/myPopupMenuTextAppearanceLarge&lt;/item&gt;
&lt;item name="android:textAppearanceLargePopupMenu"&gt;@style/myPopupMenuTextAppearanceLarge&lt;/item&gt;

&lt;item name="textAppearanceSmallPopupMenu"&gt;@style/myPopupMenuTextAppearanceSmall&lt;/item&gt;
&lt;item name="android:textAppearanceSmallPopupMenu"&gt;@style/myPopupMenuTextAppearanceSmall&lt;/item&gt;
</code></pre>

<p>And customize the text appearance as you want,</p>

<pre><code>&lt;style name="myPopupMenuTextAppearanceSmall" parent="@style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Small"&gt;
            &lt;item name="android:textColor"&gt;@color/text_hint_color&lt;/item&gt;
&lt;/style&gt;

&lt;style name="myPopupMenuTextAppearanceLarge" parent="@style/TextAppearance.AppCompat.Light.Widget.PopupMenu.Large"&gt;
            &lt;item name="android:textColor"&gt;@color/text_hint_color&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>If you want to change the background of the PopupMenu, do this</p>

<pre><code>&lt;item name="popupMenuStyle"&gt;@style/myPopupMenuStyle&lt;/item&gt;
    &lt;item name="android:popupMenuStyle"&gt;@style/myPopupMenuStyle&lt;/item&gt;
</code></pre>

<p><strong>Advanced Styling</strong></p>

<p>The PopupMenu items do not support showing the icons by default. But showing the icons can make it look so much better. I recommend trying it.</p>

<p>To implement this just put the following code in your activity and you are good to go,</p>

<pre><code>  @Override
    public boolean onMenuOpened(int featureId, Menu menu) {
        if (featureId == Window.FEATURE_ACTION_BAR &amp;&amp; menu != null) {
            if (menu.getClass().getSimpleName().equals("MenuBuilder")) {
                try {
                    Method m = menu.getClass().getDeclaredMethod(
                            "setOptionalIconsVisible", Boolean.TYPE);
                    m.setAccessible(true);
                    m.invoke(menu, true);
                } catch (NoSuchMethodException e) {
                    Log.e("tag", "onMenuOpened", e);
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }
            }
        }
        return super.onMenuOpened(featureId, menu);
    }
</code></pre>

<p>Hope it helps.</p>
