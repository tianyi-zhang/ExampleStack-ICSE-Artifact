<p>There is another way of doing "random" ordered numbers with LFSR, take a look at: </p>

<p><a href="http://en.wikipedia.org/wiki/Linear_feedback_shift_register" rel="nofollow">http://en.wikipedia.org/wiki/Linear_feedback_shift_register</a></p>

<p>with this technique you can achieve the ordered random number by index and making sure the values are not duplicated.</p>

<p><strong>But these are not TRUE random numbers because the random generation is deterministic.</strong></p>

<p>But <strong>depending your case</strong> you can use this technique reducing the amount of processing on random number generation when using shuffling.</p>

<p>Here a LFSR algorithm in java, (I took it somewhere I don't remeber):</p>

<pre><code>public final class LFSR {
    private static final int M = 15;

    // hard-coded for 15-bits
    private static final int[] TAPS = {14, 15};

    private final boolean[] bits = new boolean[M + 1];

    public LFSR() {
        this((int)System.currentTimeMillis());
    }

    public LFSR(int seed) {
        for(int i = 0; i &lt; M; i++) {
            bits[i] = (((1 &lt;&lt; i) &amp; seed) &gt;&gt;&gt; i) == 1;
        }
    }

    /* generate a random int uniformly on the interval [-2^31 + 1, 2^31 - 1] */
    public short nextShort() {
        //printBits();

        // calculate the integer value from the registers
        short next = 0;
        for(int i = 0; i &lt; M; i++) {
            next |= (bits[i] ? 1 : 0) &lt;&lt; i;
        }

        // allow for zero without allowing for -2^31
        if (next &lt; 0) next++;

        // calculate the last register from all the preceding
        bits[M] = false;
        for(int i = 0; i &lt; TAPS.length; i++) {
            bits[M] ^= bits[M - TAPS[i]];
        }

        // shift all the registers
        for(int i = 0; i &lt; M; i++) {
            bits[i] = bits[i + 1];
        }

        return next;
    }

    /** returns random double uniformly over [0, 1) */
    public double nextDouble() {
        return ((nextShort() / (Integer.MAX_VALUE + 1.0)) + 1.0) / 2.0;
    }

    /** returns random boolean */
    public boolean nextBoolean() {
        return nextShort() &gt;= 0;
    }

    public void printBits() {
        System.out.print(bits[M] ? 1 : 0);
        System.out.print(" -&gt; ");
        for(int i = M - 1; i &gt;= 0; i--) {
            System.out.print(bits[i] ? 1 : 0);
        }
        System.out.println();
    }


    public static void main(String[] args) {
        LFSR rng = new LFSR();
        Vector&lt;Short&gt; vec = new Vector&lt;Short&gt;();
        for(int i = 0; i &lt;= 32766; i++) {
            short next = rng.nextShort();
            // just testing/asserting to make 
            // sure the number doesn't repeat on a given list
            if (vec.contains(next))
                throw new RuntimeException("Index repeat: " + i);
            vec.add(next);
            System.out.println(next);
        }
    }
}
</code></pre>
