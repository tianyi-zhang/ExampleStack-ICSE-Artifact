<pre><code>package com.timesoft;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import android.app.Activity;
import android.content.Context;
import android.graphics.Typeface;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import com.wheel.ArrayWheelAdapter;
import com.wheel.NumericWheelAdapter;
import com.wheel.OnWheelChangedListener;
import com.wheel.WheelView;

public class Popup_Date extends Activity {
    /** Called when the activity is first created. */
WheelView month;
WheelView year;
WheelView day;

String months[];

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.popup_date);
    Calendar calendar = Calendar.getInstance();     

    month = (WheelView) findViewById(R.id.month);
    year = (WheelView) findViewById(R.id.year);
    day = (WheelView) findViewById(R.id.day);

    OnWheelChangedListener listener = new OnWheelChangedListener() {
        public void onChanged(WheelView wheel, int oldValue, int newValue) {
            updateDays(year, month, day);
        }
        };

    // month
    int curMonth = calendar.get(Calendar.MONTH);
     months= new String[] { "January", "February", "March",
            "April", "May", "June", "July", "August", "September",
            "October", "November", "December" };
    month.setViewAdapter(new DateArrayAdapter(this, months, curMonth));
    month.setCurrentItem(curMonth);
    month.addChangingListener(listener);

    // year
    int curYear = calendar.get(Calendar.YEAR);
    year.setViewAdapter(new DateNumericAdapter(this, curYear-10, curYear + 10,0));
    year.setCurrentItem(curYear);
    year.addChangingListener(listener);

    // day
    updateDays(year, month, day);
    day.setCurrentItem(calendar.get(Calendar.DAY_OF_MONTH)-1);
}
public void setclick(View v) {
    if(GlobalData.forwhich.equals("1"))
    {
    GlobalData.leave_date_from = String.valueOf(year.getCurrentItem()+2001) + "-"
            + month.getCurrentItem() + "-"
            + String.valueOf(day.getCurrentItem()+1);
    }
    else if(GlobalData.forwhich.equals("2"))
    {
        GlobalData.leave_date_to = String.valueOf(year.getCurrentItem()+2001) + "-"
        + month.getCurrentItem() + "-"
        + String.valueOf(day.getCurrentItem()+1);
    }
    else
    {
        GlobalData.selected_date = String.valueOf(year.getCurrentItem()+2001) + "-"
        + months[month.getCurrentItem()] + "-"
        + String.valueOf(day.getCurrentItem()+1);
    }
    finish();
}
/**
 * Updates day wheel. Sets max days according to selected month and year
 */
void updateDays(WheelView year, WheelView month, WheelView day) {
    Calendar calendar = Calendar.getInstance();
    calendar.set(Calendar.YEAR,calendar.get(Calendar.YEAR) + year.getCurrentItem());
    calendar.set(Calendar.MONTH, month.getCurrentItem());

    int maxDays = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);
    day.setViewAdapter(new DateNumericAdapter(this, 1, maxDays, calendar
            .get(Calendar.DAY_OF_MONTH) - 1));
    int curDay = Math.min(maxDays, day.getCurrentItem() + 1);
    day.setCurrentItem(curDay - 1, true);

    calendar.set(Calendar.DAY_OF_MONTH, day.getCurrentItem() + 1);
    Log.i("date :",
            new SimpleDateFormat("dd/MM/yyyy").format(calendar.getTime()));
}

/**
 * Adapter for numeric wheels. Highlights the current value.
 */
private class DateNumericAdapter extends NumericWheelAdapter {
    // Index of current item
    int currentItem;
    // Index of item to be highlighted
    int currentValue;

    /**
     * Constructor
     */
    public DateNumericAdapter(Context context, int minValue, int maxValue,
            int current) {
        super(context, minValue, maxValue);
        this.currentValue = current;
        setTextSize(16);
    }

    @Override
    protected void configureTextView(TextView view) {
        super.configureTextView(view);
        if (currentItem == currentValue) {
            view.setTextColor(0xFF0000F0);
        }
        view.setTypeface(Typeface.SANS_SERIF);
    }

    @Override
    public View getItem(int index, View cachedView, ViewGroup parent) {
        currentItem = index;
        return super.getItem(index, cachedView, parent);
    }
}

/**
 * Adapter for string based wheel. Highlights the current value.
 */
private class DateArrayAdapter extends ArrayWheelAdapter&lt;String&gt; {
    // Index of current item
    int currentItem;
    // Index of item to be highlighted
    int currentValue;

    /**
     * Constructor
     */
    public DateArrayAdapter(Context context, String[] items, int current) {
        super(context, items);
        this.currentValue = current;
        setTextSize(16);
    }

    @Override
    protected void configureTextView(TextView view) {
        super.configureTextView(view);
        if (currentItem == currentValue) {
            view.setTextColor(0xFF0000F0);
        }
        view.setTypeface(Typeface.SANS_SERIF);
    }

    @Override
    public View getItem(int index, View cachedView, ViewGroup parent) {
        currentItem = index;
        return super.getItem(index, cachedView, parent);
    }
}
</code></pre>

<p>}</p>
