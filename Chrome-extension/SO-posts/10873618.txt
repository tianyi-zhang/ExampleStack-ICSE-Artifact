<p>It's possible to group several conditions in the same <code>case</code> statement using the mechanism of <em>fall through</em> allowed by switch statements, it's mentioned in the <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" rel="nofollow">Java tutorial</a> and fully specified in section <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-14.html#jls-14.11" rel="nofollow">ยง14.11. The switch Statement</a> of the <a href="http://docs.oracle.com/javase/specs/jls/se7/html/index.html" rel="nofollow">Java Language Specification</a>.</p>

<p>The following snippet of code was taken from an example in the tutorial, it calculates the number of days in each month (numbered from month 1 to month 12):</p>

<pre><code>switch (month) {
    case 1: case 3: case 5:
    case 7: case 8: case 10:
    case 12:
        numDays = 31;
        break;
    case 4: case 6:
    case 9: case 11:
        numDays = 30;
        break;
    case 2:
        if (((year % 4 == 0) &amp;&amp; 
             !(year % 100 == 0))
             || (year % 400 == 0))
            numDays = 29;
        else
            numDays = 28;
        break;
    default:
        System.out.println("Invalid month.");
        break;
}
</code></pre>

<p>As you can see, for covering a range of values in a single <code>case</code> statement the only alternative is to list each of the possible values individually, one after the other. As an additional example, here's how to implement the pseudocode in the question:</p>

<pre><code>switch(num) {
    case 1: case 2: case 3: case 4: case 5:
        System.out.println("testing case 1 to 5");
        break;
    case 6: case 7: case 8: case 9: case 10:
        System.out.println("testing case 6 to 10");
        break;
}
</code></pre>
