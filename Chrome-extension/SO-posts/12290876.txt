<p>There are a few things to notice:</p>

<ul>
<li>Java is not very easy to use when you require unsigned bytes (e.g. for indexing);</li>
<li>if you create a state in <code>S</code> and <code>T</code>, you should really notice that these values change, when you decrypt <em>with the same instance</em> you take the state used for encryption;</li>
<li>the above code is not very efficient memory wise, and you can easily rewrite it to take byte arrays;</li>
<li>to use a String, after refactoring the arguments to <code>byte[]</code>, you first need to use <a href="/questions/tagged/character-encoding" class="post-tag" title="show questions tagged 'character-encoding'" rel="tag">character-encoding</a> first, e.g. using <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/String.html#getBytes(java.nio.charset.Charset)" rel="nofollow"><code>String.getBytes(Charset charset)</code></a>;</li>
</ul>

<p>To make life easier, and to have some fun late night hacking, I improved your code and tested it against a single vector in <a href="http://tools.ietf.org/html/rfc6229" rel="nofollow">rfc6229</a> using a zero'd out byte array.</p>

<p>UPDATE: As micahk points out below, the evil C XOR swap that was used prevented this code from encrypting the final byte of input in Java. Using regular old swaps fixes it.</p>

<p><strong>Warning</strong>: the code below should be considered a coding exercise. Please use a well vetted library instead of the code snippet below to perform RC4 (or Ron's Code 4, ARC4 etc.) in your application. That means using <code>Cipher.getInstance("RC4");</code> or the ARC4 classes in Bouncy Castle.</p>

<pre><code>public class RC4 {
    private final byte[] S = new byte[256];
    private final byte[] T = new byte[256];
    private final int keylen;

    public RC4(final byte[] key) {
        if (key.length &lt; 1 || key.length &gt; 256) {
            throw new IllegalArgumentException(
                    "key must be between 1 and 256 bytes");
        } else {
            keylen = key.length;
            for (int i = 0; i &lt; 256; i++) {
                S[i] = (byte) i;
                T[i] = key[i % keylen];
            }
            int j = 0;
            byte tmp;
            for (int i = 0; i &lt; 256; i++) {
                j = (j + S[i] + T[i]) &amp; 0xFF;
                tmp = S[j];
                S[j] = S[i];
                S[i] = tmp;
            }
        }
    }

    public byte[] encrypt(final byte[] plaintext) {
        final byte[] ciphertext = new byte[plaintext.length];
        int i = 0, j = 0, k, t;
        byte tmp;
        for (int counter = 0; counter &lt; plaintext.length; counter++) {
            i = (i + 1) &amp; 0xFF;
            j = (j + S[i]) &amp; 0xFF;
            tmp = S[j];
            S[j] = S[i];
            S[i] = tmp;
            t = (S[i] + S[j]) &amp; 0xFF;
            k = S[t];
            ciphertext[counter] = (byte) (plaintext[counter] ^ k);
        }
        return ciphertext;
    }

    public byte[] decrypt(final byte[] ciphertext) {
        return encrypt(ciphertext);
    }
}
</code></pre>

<p>Happy coding.</p>
