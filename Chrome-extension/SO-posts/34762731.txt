<p>since you are using <code>CoordinatorLayout</code> you could create a custom <code>Behaviour</code> that can achieve what you requested follow example below: 
<code>create</code> a class that <code>extends CoordinatorLayout.Behavior&lt;View&gt;</code>   follow example below: </p>

<pre><code>public class QuickReturnFloaterBehavior extends CoordinatorLayout.Behavior&lt;View&gt; {

    private int distance;

    public QuickReturnFloaterBehavior(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    @Override
    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {
        return (nestedScrollAxes &amp; ViewCompat.SCROLL_AXIS_VERTICAL) != 0;
    }

    @Override public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {
        if (dy &gt; 0 &amp;&amp; distance &lt; 0 || dy &lt; 0 &amp;&amp; distance &gt; 0) {
            child.animate().cancel();
            distance = 0;
        }
        distance += dy;
        final int height = child.getHeight() &gt; 0 ? (child.getHeight()) : 600/*update this accordingly*/;
        if (distance &gt; height &amp;&amp; child.isShown()) {
            hide(child);
        } else if (distance &lt; 0 &amp;&amp; !child.isShown()) {
            show(child);
        }
    }

    private void hide(View view) {
        view.setVisibility(View.GONE);// use animate.translateY(height); instead
    }

    private void show(View view) {
        view.setVisibility(View.VISIBLE);// use animate.translateY(-height); instead
    }

}
</code></pre>

<p>now to apply this <code>behaviour</code> add this to your layout</p>

<pre><code>app:layout_behavior="com.example.QuickReturnFloaterBehavior"
</code></pre>
