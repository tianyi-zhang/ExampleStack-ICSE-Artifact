<p>For a fully functional, you should define how a Customer and Address object equal with each others. The best way to do this is to override equals() and hashcode() functions Here is an example For Customer, you can apply the pattern for Address object:</p>

<pre><code>public class Customer {

    private String name;
    private Address address;
    private String accountNumber;

    public Customer(String name, Address address, String accountNumber) {
        // your put constructor code
    }

    // put your getting and setting methods here

    @Override
    public boolean equals(Object obj) {
        if (this == obj)  
            return true;  
        if (obj == null)  
            return false;  
        if (getClass() != obj.getClass())  
            return false;  

        Customer otherCustomer = (Customer) obj;  

        // define how the names equals
        if (this.name == null) {  

            if (otherCustomer.getName() != null) {  
                return false;
            }

        } else if (!this.name.equals(otherCustomer.getName())) {
            return false;
        }

        // define how the accountNumber equals
        if (this.accountNumber == null) {  

            if (otherCustomer.getAccountNumber() != null) {  
                return false;
            }

        } else if (!this.accountNumber.equals(otherCustomer.getAccountNumber())) {
            return false;
        }

        //define how the Address equals
        if (this.address == null) {  

            if (otherCustomer.getAddress() != null) {  
                return false;
            }

        } else if (this.address.equals(otherCustomer.getAddress())) {
            return true;
        } else {
            return  false;
        }

        return true;

    };

    @Override
    public int hashCode() {
         final int prime = 31;  

            int result = 1;  
            result = prime * result 
                    + ((name == null) ? 0 : name.hashCode()) 
                    + ((accountNumber == null) ? 0 : accountNumber.hashCode())
                    + ((address.getCityField() == null) ? 0 : address.getCityField() .hashCode()) 
                    + ((address.getStateField() == null) ? 0 : address.getStateField() .hashCode())
                    + ((address.getStreetField() == null) ? 0 : address.getStreetField() .hashCode())
                    + address.getZipField();

            return result;  

    }
 }
</code></pre>

<p>and then in your addActionListener() function check if your customer already existed or not:</p>

<pre><code>Customer newCustomer = new Customer(nameField.getText(),new Address(streetField.getText(), cityField.getText(), stateField.getText(), Integer.parseInt(zipField.getText())), Integer.parseInt(accountNumberField.getText())));

    if (!customerList.contains(newCustomer)) {
        customerList.add(newCustomer)
    }
</code></pre>
