<p>Just for reference, this is what I've ended up with (based on URLEncodedUtils, and returning a Map).</p>

<p>Features:</p>

<ul>
<li>it accepts the query string part of the url (you can use <code>request.getQueryString()</code>)</li>
<li>an empty query string will produce an empty <code>Map</code></li>
<li>a parameter without a value (?test) will be mapped to an empty <code>List&lt;String&gt;</code></li>
</ul>

<p>Code:</p>

<pre><code>public static Map&lt;String, List&lt;String&gt;&gt; getParameterMapOfLists(String queryString) {
    Map&lt;String, List&lt;String&gt;&gt; mapOfLists = new HashMap&lt;String, List&lt;String&gt;&gt;();
    if (queryString == null || queryString.length() == 0) {
        return mapOfLists;
    }
    List&lt;NameValuePair&gt; list = URLEncodedUtils.parse(URI.create("http://localhost/?" + queryString), "UTF-8");
    for (NameValuePair pair : list) {
        List&lt;String&gt; values = mapOfLists.get(pair.getName());
        if (values == null) {
            values = new ArrayList&lt;String&gt;();
            mapOfLists.put(pair.getName(), values);
        }
        if (pair.getValue() != null) {
            values.add(pair.getValue());
        }
    }

    return mapOfLists;
}
</code></pre>

<p>A compatibility helper (values are stored in a String array just as in <a href="http://download.oracle.com/javaee/1.3/api/javax/servlet/ServletRequest.html#getParameterMap%28%29" rel="nofollow">ServletRequest.getParameterMap()</a>):</p>

<pre><code>public static Map&lt;String, String[]&gt; getParameterMap(String queryString) {
    Map&lt;String, List&lt;String&gt;&gt; mapOfLists = getParameterMapOfLists(queryString);

    Map&lt;String, String[]&gt; mapOfArrays = new HashMap&lt;String, String[]&gt;();
    for (String key : mapOfLists.keySet()) {
        mapOfArrays.put(key, mapOfLists.get(key).toArray(new String[] {}));
    }

    return mapOfArrays;
}
</code></pre>
