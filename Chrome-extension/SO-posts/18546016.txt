<p>I finally made a custom Adapter, took reference from here:</p>

<p>1) <a href="http://stackoverflow.com/questions/5234576/what-adapter-shall-i-use-to-use-hashmap-in-a-listview">What adapter shall I use to use HashMap in a ListView</a>  </p>

<p>2) <a href="http://www.vogella.com/articles/AndroidListView/article.html">http://www.vogella.com/articles/AndroidListView/article.html</a>. </p>

<p>3) <a href="http://www.youtube.com/watch?v=wDBM6wVEO70">http://www.youtube.com/watch?v=wDBM6wVEO70</a></p>

<p>4) <a href="https://dl.google.com/googleio/2010/android-world-of-listview-android.pdf">https://dl.google.com/googleio/2010/android-world-of-listview-android.pdf</a></p>

<p><strong>Edit:</strong> Based on suggestions in the comments, I have invoked a ViewHolder pattern to handle recycling of views and address the concerns of memory management and battery use. The complete code is as follows: </p>

<pre><code>public class TreeMapAdapter extends ArrayAdapter&lt;String&gt; {
    private final Context context;
    private final String[] values;
    String[] mValues;


    private TreeMap&lt;String, String&gt; mData = new TreeMap&lt;String, String&gt;();
    private String[] mKeys;

    public TreeMapAdapter(Context context, String[] mKeys,TreeMap&lt;String, String&gt; data) {
        super(context, R.layout.chklistlayout, mKeys);
        this.context = context;
        this.values = mKeys;
        mData  = data;
        mValues = mData.values().toArray(new String[data.size()]);
    }
    public int getCount() {

        return mData.size();

    }

    public String getItem(int position) {

        return mData.get(mKeys[position]);
    }


    public long getItemId(int arg0) {

        return arg0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {


        if (convertView == null) { 
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.chklistlayout, 
                    parent, false);
            holder = new ViewHolder(); 
            holder.textView = (TextView) convertView.findViewById(R.id.textView1); 
            holder.imageview = (TextView) convertView.findViewById(R.id.textView2); 
            holder.CB = (CheckBox) convertView.findViewById(R.id.checkBox1); 

            convertView.setTag(holder); 
        } else { 
            holder = (ViewHolder) convertView.getTag(); 
        }
        holder.textView.setText(values[position]);
        holder.imageview.setText(mValues[position]);


        String s = mValues[position];
        if (s.contains("h")) {
            holder.CB.setChecked(true);
        } else {

        }

        return convertView;
    }
} 
</code></pre>

<p>Following is the holder class: </p>

<pre><code>static class ViewHolder {

    TextView textView, imageview;
    CheckBox CB;


}
</code></pre>

<p>There are three ways to recycle views, one is called as the Dumb way, the other as the right way and the one used in this example is the fastest way. Users who stumble on this post later, I highly recommend to go through the YouTube video. Its worth it! </p>

<p>In a nutshell ConvertView is responsible for recycling of views, it keeps track of all the views which are moving out of screen focus and returns one view which is recycled and reused. </p>

<p>Lastly Thanks to KMDev, who sparked this thought of researching more and making a template for Holder pattern. </p>
