<p>You have basically two options here: add the self-signed certificate to your JVM truststore or configure your client to </p>

<h3>Option 1</h3>

<p>Export the certificate from your browser and import it in your JVM truststore (to establish a chain of trust):</p>

<pre><code>&lt;JAVA_HOME&gt;\bin\keytool -import -v -trustcacerts
-alias server-alias -file server.cer
-keystore cacerts.jks -keypass changeit
-storepass changeit 
</code></pre>

<h3>Option 2</h3>

<p>Disable Certificate Validation (code from <a href="http://www.exampledepot.com/egs/javax.net.ssl/trustall.html">Example Depot</a>):</p>

<pre><code>// Create a trust manager that does not validate certificate chains
TrustManager[] trustAllCerts = new TrustManager[] { 
    new X509TrustManager() {     
        public java.security.cert.X509Certificate[] getAcceptedIssuers() { 
            return new X509Certificate[0];
        } 
        public void checkClientTrusted( 
            java.security.cert.X509Certificate[] certs, String authType) {
            } 
        public void checkServerTrusted( 
            java.security.cert.X509Certificate[] certs, String authType) {
        }
    } 
}; 

// Install the all-trusting trust manager
try {
    SSLContext sc = SSLContext.getInstance("SSL"); 
    sc.init(null, trustAllCerts, new java.security.SecureRandom()); 
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
} catch (GeneralSecurityException e) {
} 
// Now you can access an https URL without having the certificate in the truststore
try { 
    URL url = new URL("https://hostname/index.html"); 
} catch (MalformedURLException e) {
} 
</code></pre>

<p>Note that <strong>I do not recommend the Option #2 at all</strong>. Disabling the trust manager defeats some parts of SSL and makes you vulnerable to man in the middle attacks. Prefer Option #1 or, even better, have the server use a "real" certificate signed by a well known CA. </p>
