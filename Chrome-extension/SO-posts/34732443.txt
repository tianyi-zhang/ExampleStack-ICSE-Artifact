<p>Here is a simple demo, with working progress on a coded <code>SwipeRefreshLayout</code>
each time you Swipe it will add an item to the list</p>

<p>my Activity:</p>

<pre><code>public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        RelativeLayout container = (RelativeLayout) findViewById(R.id.container);

        CustomSwipeRefresh swipeRefresh = new CustomSwipeRefresh(this);
        container.addView(swipeRefresh);
        swipeRefresh.refreshData();
    }
}
</code></pre>

<p>with layout:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:id="@+id/container"
    tools:context="com.divshark.customswiperefresh.MainActivity"&gt;


&lt;/RelativeLayout&gt;
</code></pre>

<p>Then i created CustomSwipeRefresh :</p>

<pre><code>public class CustomSwipeRefresh extends SwipeRefreshLayout {

    private static final String TAG = CustomSwipeRefresh.class.getSimpleName();

    private static int MIN_LIST = 50;

    private List&lt;String&gt; mItems = new ArrayList&lt;&gt;();
    private Context mContext;

    private ListView listView;
    private ListAdapter mAdapter;

    public CustomSwipeRefresh(Context context){
        super(context);

        this.mContext = context;


        mAdapter = new ListAdapter(mContext, mItems);

        listView = new ListView(context);
        listView.setAdapter(mAdapter);
        listView.setBackgroundColor(Color.WHITE);
        listView.setDivider(null);
        listView.setDividerHeight(0);
        addView(listView);

        setOnRefreshListener(new OnRefreshListener() {
            @Override
            public void onRefresh() {

                setRefreshing(true);

                postDelayed(new Runnable() {
                    @Override
                    public void run() {

                        onRefreshData(true);

                        Log.d(TAG,"--- FINISHED REFRESHING ---");
                        setRefreshing(false);
                    }
                }, 2000);

            }
        });

    }

    public void refreshData(){
        onRefreshData(false);
    }

    /**
     * Called when the data is refreshed in the list
     */
    private void onRefreshData(boolean addItem){

        if(addItem){
            MIN_LIST++;
        }

        mItems.clear();

        for(int i = 0; i &lt; MIN_LIST; i++){
            mItems.add("New item "+ Integer.toString(i + 1));
        }

        mAdapter.notifyDataSetChanged();
    }


    public class ListAdapter extends BaseAdapter{

        public List&lt;String&gt; mItems;
        public Context mContext;
        public LayoutInflater mInflater;

         class Holder{
            AppCompatTextView mTvItem;
        }

        public ListAdapter(Context context, List&lt;String&gt; items){

            this.mContext = context;
            this.mItems = items;
            this.mInflater = LayoutInflater.from(mContext);

        }

        @Override
        public int getCount() {
            return mItems.size();
        }

        @Override
        public Object getItem(int position) {
            return mItems.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {

            Holder holder ;

            if(convertView == null){
                holder = new Holder();
                convertView = mInflater.inflate(R.layout.item_row, parent, false);

                holder.mTvItem = (AppCompatTextView) convertView.findViewById(R.id.item);

                convertView.setTag(holder);
            }else{
                holder = (Holder) convertView.getTag();
            }

            String item = mItems.get(position);
            if(item != null){
                holder.mTvItem.setText(item);
            }

            return convertView;
        }
    }
}
</code></pre>

<p>and item layout:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="match_parent"
    android:layout_height="match_parent" android:padding="16dp"&gt;
&lt;android.support.v7.widget.AppCompatTextView
    android:id="@+id/item"
    android:layout_width="wrap_content"
    android:layout_height="match_parent" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Hope this helps!</p>
