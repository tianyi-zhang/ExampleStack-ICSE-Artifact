<ul>
<li>use, override <code>boolean isSelected, boolean hasFocus</code> (built_in methods) from <code>getTableCellRendererComponent</code> instead of referencing back to JTable - <code>table.isCellSelected(row, column)</code>, ba reseting Color for rest of cells in else statement, e.g. simple torso</li>
</ul>

<p>.</p>

<pre><code>   private class StatusRenderer implements TableCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setBackground(table.getSelectionBackground());
            } else {
                setBackground(table.getBackground());
            }
            return this;
        }
    }
</code></pre>

<ul>
<li><p>change <a href="http://docs.oracle.com/javase/tutorial/uiswing/components/table.html#selection">ListSelectionMode for JTable</a></p></li>
<li><p>remove every this.Xxx, are useless</p></li>
<li><p>don't to setSize, use JFrame.pack() instead and/or set size for JScrollPane  e.g. <code>table.setPreferredScrollableViewportSize(table.getPreferredSize());</code>(for reasonable numbers or rows and columns, otherwise use Dimension(x, x))</p></li>
</ul>

<p>EDIT</p>

<pre><code>import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.UIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

public class TableRolloverDemo {

    private JFrame frame = new JFrame("TableRolloverDemo");
    private JTable table = new JTable();
    private String[] columnNames = new String[]{"Column"};
    private Object[][] data = new Object[][]{{false}, {false}, {true}, {true},
        {false}, {false}, {true}, {true}, {false}, {false}, {true}, {true}};

    public TableRolloverDemo() {
        final DefaultTableModel model = new DefaultTableModel(data, columnNames) {
            //private boolean ImInLoop = false;

            @Override
            public Class&lt;?&gt; getColumnClass(int columnIndex) {
                return Boolean.class;
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                if (columnIndex == 0) {
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
                if (columnIndex == 0) {
                    //if (!ImInLoop) {
                    //    ImInLoop = true;
                        Boolean bol = (Boolean) aValue;
                        super.setValueAt(aValue, rowIndex, columnIndex);
                        for (int i = 0; i &lt; this.getRowCount(); i++) {
                            if (i != rowIndex) {
                                super.setValueAt(!bol, i, columnIndex);
                            }
                        }
                    //    ImInLoop = false;
                    //}
                } else {
                    super.setValueAt(aValue, rowIndex, columnIndex);
                }
            }
        };
        RolloverMouseAdapter rolloverAdapter = new RolloverMouseAdapter(table);
        RolloverBooleanRenderer renderer = new RolloverBooleanRenderer(rolloverAdapter);
        table.addMouseListener(rolloverAdapter);
        table.addMouseMotionListener(rolloverAdapter);
        table.setDefaultRenderer(Boolean.class, renderer);
        table.setModel(model);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.add(new JScrollPane(table));
        frame.pack();
        frame.setLocationByPlatform(true);
        frame.setVisible(true);
    }

    private class RolloverMouseAdapter extends MouseAdapter {

        private int row = -1;
        private int column = -1;
        private JTable table;

        public RolloverMouseAdapter(JTable table) {
            this.table = table;
        }

        public boolean isRolloverCell(int row, int column) {
            return this.row == row &amp;&amp; this.column == column;
        }

        @Override
        public void mouseMoved(MouseEvent e) {
            int lastRow = row;
            int lastColumn = column;
            row = table.rowAtPoint(e.getPoint());
            column = table.columnAtPoint(e.getPoint());
            if (row == lastRow &amp;&amp; column == lastColumn) {
                return;
            }
            if (row &gt;= 0 &amp;&amp; column &gt;= 0) {
                table.repaint(table.getCellRect(row, column, false));
            }
            if (lastRow &gt;= 0 &amp;&amp; lastColumn &gt;= 0) {
                table.repaint(table.getCellRect(lastRow, lastColumn, false));
            }
        }

        @Override
        public void mouseExited(MouseEvent e) {
            if (row &gt;= 0 &amp;&amp; column &gt;= 0) {
                table.repaint(table.getCellRect(row, column, false));
            }
            row = column = -1;
        }
    }

    private class RolloverBooleanRenderer extends JCheckBox implements
            TableCellRenderer, UIResource {

        private final Border noFocusBorder = new EmptyBorder(1, 1, 1, 1);
        private RolloverMouseAdapter adapter;

        public RolloverBooleanRenderer(RolloverMouseAdapter adapter) {
            super();
            this.adapter = adapter;
            setHorizontalAlignment(JLabel.CENTER);
            setBorderPainted(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value, boolean isSelected, boolean hasFocus, int row,
                int column) {

            getModel().setRollover(adapter.isRolloverCell(row, column));
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                super.setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(table.getBackground());
            }
            setSelected((value != null &amp;&amp; ((Boolean) value).booleanValue()));
            if (hasFocus) {
                setBorder(UIManager.getBorder("Table.focusCellHighlightBorder"));
            } else {
                setBorder(noFocusBorder);
            }
            return this;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                TableRolloverDemo tableRolloverDemo = new TableRolloverDemo();
            }
        });
    }
}
</code></pre>
