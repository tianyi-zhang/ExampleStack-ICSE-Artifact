<p>Here's code I wrote that will tell you the generic types of a class.  Use this to compare the generic types of A against target.getClass():</p>

<pre><code>/**
 * Gets a list of type Class that contains the type arguments that a child class has used to extend a generic base
 * class.
 * 
 * For example, if a class called ChildClass has this signature:
 * 
 * &lt;code&gt;
 *  public class ChildClass extends ParentClass&lt;Integer, String&gt; 
 * &lt;/code&gt;
 * 
 * then the list returned would have two entries: Integer and String.
 * 
 * @param baseClass The generic base class being extended.
 * @param childClass The child class that is doing the extending.
 * @return A list of type Class containing the raw classes for the type arguments.
 */
public &lt;T&gt; List&lt;Class&lt;?&gt;&gt; getTypeArguments(Class&lt;T&gt; baseClass, Class&lt;? extends T&gt; childClass) {

    Map&lt;Type, Type&gt; resolvedTypes = new HashMap&lt;Type, Type&gt;();
    Type type = childClass;

    // start walking up the inheritance hierarchy until we hit baseClass
    while (getClass(type) != null &amp;&amp; !getClass(type).equals(baseClass)) {
        if (type instanceof Class) {
            // there is no useful information for us in raw types, so just keep going.
            type = ((Class&lt;?&gt;) type).getGenericSuperclass();
        } else {
            ParameterizedType parameterizedType = (ParameterizedType) type;
            Class&lt;?&gt; rawType = (Class&lt;?&gt;) parameterizedType.getRawType();

            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
            TypeVariable&lt;?&gt;[] typeParameters = rawType.getTypeParameters();
            for (int i = 0; i &lt; actualTypeArguments.length; i++) {
                resolvedTypes.put(typeParameters[i], actualTypeArguments[i]);
            }

            if (!rawType.equals(baseClass)) {
                type = rawType.getGenericSuperclass();
            }
        }
    }

    // finally, for each actual type argument provided to baseClass, determine (if possible) the raw class for that
    // type argument
    Type[] actualTypeArguments;
    if (type instanceof Class) {
        actualTypeArguments = ((Class&lt;?&gt;) type).getTypeParameters();
    } else {
        actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();
    }

    // convert types to their raw classes
    List&lt;Class&lt;?&gt;&gt; typeArgumentsAsClasses = new ArrayList&lt;Class&lt;?&gt;&gt;();
    for (Type baseType : actualTypeArguments) {
        while (resolvedTypes.containsKey(baseType)) {
            baseType = resolvedTypes.get(baseType);
        }
        typeArgumentsAsClasses.add(getClass(baseType));
    }

    return typeArgumentsAsClasses;

}

/**
 * Gets the Class for a Type. If the Type is a variable type, null is returned.
 * 
 * @param type The Type to get the Class for
 * @return Returns the Class, unless Type is a variable type, then null is returned.
 */
public Class&lt;?&gt; getClass(Type type) {

    Class&lt;?&gt; returnClass = null;

    if (type instanceof Class) {
        returnClass = (Class&lt;?&gt;) type;
    } else if (type instanceof ParameterizedType) {
        returnClass = getClass(((ParameterizedType) type).getRawType());
    } else if (type instanceof GenericArrayType) {
        Class&lt;?&gt; componentClass = getClass(((GenericArrayType) type).getGenericComponentType());
        if (componentClass != null) {
            returnClass = Array.newInstance(componentClass, 0).getClass();
        }
    }

    return returnClass;

}
</code></pre>
