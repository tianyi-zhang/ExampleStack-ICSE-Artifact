<p>Because the <code>Adapter</code> used for <code>AutoCompleteTextView</code> must be implements <code>Filterable</code> interface, so modify your <code>CustomAdapter</code> like following:</p>

<pre><code>public class CustomAdapter extends BaseAdapter&lt;CustomItem&gt; implements Filterable {

    ArrayFilter mFilter;
    ...

    // please override other method in BaseAdatper as your need
    ...

    @Override
    public Filter getFilter() {
        if (mFilter == null) {
            mFilter = new ArrayFilter();
        }
        return mFilter;
    }

    // you can modify the custom Filter used for AutoCompleteTextView as your need
    private class ArrayFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence prefix) {
            FilterResults results = new FilterResults();

            if (mOriginalValues == null) {
                synchronized (mLock) {
                    mOriginalValues = new ArrayList&lt;T&gt;(mObjects);
                }
            }

            if (prefix == null || prefix.length() == 0) {
                ArrayList&lt;T&gt; list;
                synchronized (mLock) {
                    list = new ArrayList&lt;T&gt;(mOriginalValues);
                }
                results.values = list;
                results.count = list.size();
            } else {
                String prefixString = prefix.toString().toLowerCase();

                ArrayList&lt;T&gt; values;
                synchronized (mLock) {
                    values = new ArrayList&lt;T&gt;(mOriginalValues);
                }

                final int count = values.size();
                final ArrayList&lt;T&gt; newValues = new ArrayList&lt;T&gt;();

                for (int i = 0; i &lt; count; i++) {
                    final T value = values.get(i);
                    final String valueText = value.toString().toLowerCase();

                    // First match against the whole, non-splitted value
                    if (valueText.startsWith(prefixString)) {
                        newValues.add(value);
                    } else {
                        final String[] words = valueText.split(" ");
                        final int wordCount = words.length;

                        // Start at index 0, in case valueText starts with space(s)
                        for (int k = 0; k &lt; wordCount; k++) {
                            if (words[k].startsWith(prefixString)) {
                                newValues.add(value);
                                break;
                            }
                        }
                    }
                }

                results.values = newValues;
                results.count = newValues.size();
            }

            return results;
        }

        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            //noinspection unchecked
            mObjects = (List&lt;T&gt;) results.values;
            if (results.count &gt; 0) {
                notifyDataSetChanged();
            } else {
                notifyDataSetInvalidated();
            }
        }
    }
}
</code></pre>

<p>You can refer to the <code>ArrayAdapter</code>'s source code. </p>
