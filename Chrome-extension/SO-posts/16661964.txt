<ul>
<li><p>This might work in JDK 1.7.0 or later:</p>

<pre><code>MultiLineTableCellRenderer r = new MultiLineTableCellRenderer();
UIDefaults d = new UIDefaults();
d.put("TextArea.borderPainter", new Painter() {
  @Override public void paint(Graphics2D g, Object o, int w, int h) {}
});
r.putClientProperty("Nimbus.Overrides", d);
r.putClientProperty("Nimbus.Overrides.InheritDefaults", false);

table.setDefaultRenderer(String.class, r);
</code></pre></li>
</ul>

<p><img src="http://i.stack.imgur.com/2RvnV.png" alt="enter image description here"></p>

<p>SSCCE</p>

<pre><code>import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.*;
import javax.swing.table.*;
import javax.swing.UIManager.LookAndFeelInfo;

public class TestJTableMultiline2 {
  public JComponent makeUI() {
    String[] columnNames = {"A", "B", "C"};
    Object[][] data = {
      {"A0, Line1\nA0, Line2\nA0, Line3", "B0, Line1\nB0, Line2", "C0, Line1"},
      {"A1, Line1", "B1, Line1\nB1, Line2", "C1, Line1"},
      {"A2, Line1", "B2, Line1", "C2, Line1"}
    };
    DefaultTableModel model = new DefaultTableModel(data, columnNames) {
      @Override public Class&lt;?&gt; getColumnClass(int column) {
        return String.class;
      }
      @Override public boolean isCellEditable(int row, int column) {
        return false;
      }
    };
    JTable table = new JTable(model);
    table.setAutoCreateRowSorter(true);

    MultiLineTableCellRenderer r = new MultiLineTableCellRenderer();
    UIDefaults d = new UIDefaults();
    d.put("TextArea.borderPainter", new Painter() {
      @Override public void paint(Graphics2D g, Object o, int w, int h) {}
    });
    r.putClientProperty("Nimbus.Overrides", d);
    r.putClientProperty("Nimbus.Overrides.InheritDefaults", false);

    table.setDefaultRenderer(String.class, r);
    return new JScrollPane(table);
  }
  public static void main(String[] args) {
    EventQueue.invokeLater(new Runnable() {
      @Override public void run() {
        createAndShowGUI();
      }
    });
  }
  public static void createAndShowGUI() {
    try {
      for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch(Exception e) {
      e.printStackTrace();
    }
    JFrame f = new JFrame("Multi-Line Cell Example 2");
    f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    f.getContentPane().add(new TestJTableMultiline2().makeUI());
    f.setSize(320, 240);
    f.setLocationRelativeTo(null);
    f.setVisible(true);
  }
}

class MultiLineTableCellRenderer extends JTextArea implements TableCellRenderer {
  private List&lt;List&lt;Integer&gt;&gt; rowColHeight = new ArrayList&lt;List&lt;Integer&gt;&gt;();
  //private Border fhb = UIManager.getBorder("Table.focusCellHighlightBorder");
  //private Border epb = BorderFactory.createEmptyBorder(2,5,2,5);
  public MultiLineTableCellRenderer() {
    super();
    setLineWrap(true);
    setWrapStyleWord(true);
    setOpaque(true);
    //System.out.println(fhb.getBorderInsets(this));
    //setBorder(epb);
  }
  @Override
  public Component getTableCellRendererComponent(
    JTable table, Object value, boolean isSelected,
    boolean hasFocus, int row, int column) {
    setFont(table.getFont());
    setText(value != null ? value.toString() : "");
    setMargin(new Insets(2,5,2,5));
    //setBorder(hasFocus ? fhb : epb);
    if (isSelected) {
      setForeground(table.getSelectionForeground());
      setBackground(table.getSelectionBackground());
    } else {
      setForeground(table.getForeground());
      setBackground(table.getBackground());
    }
    adjustRowHeight(table, row, column);
    return this;
  }

  /**
   * Calculate the new preferred height for a given row, and sets the height on the table.
   * http://blog.botunge.dk/post/2009/10/09/JTable-multiline-cell-renderer.aspx
   */
  private void adjustRowHeight(JTable table, int row, int column) {
    //The trick to get this to work properly is to set the width of the column to the
    //textarea. The reason for this is that getPreferredSize(), without a width tries
    //to place all the text in one line. By setting the size with the with of the column,
    //getPreferredSize() returnes the proper height which the row should have in
    //order to make room for the text.
    //int cWidth = table.getTableHeader().getColumnModel().getColumn(column).getWidth();
    int cWidth = table.getCellRect(row, column, false).width; //Ignore IntercellSpacing
    setSize(new Dimension(cWidth, 1000));
    int prefH = getPreferredSize().height;
    while (rowColHeight.size() &lt;= row) {
      rowColHeight.add(new ArrayList&lt;Integer&gt;(column));
    }
    List&lt;Integer&gt; colHeights = rowColHeight.get(row);
    while (colHeights.size() &lt;= column) {
      colHeights.add(0);
    }
    colHeights.set(column, prefH);
    int maxH = prefH;
    for (Integer colHeight : colHeights) {
      if (colHeight &gt; maxH) {
        maxH = colHeight;
      }
    }
    if (table.getRowHeight(row) != maxH) {
      table.setRowHeight(row, maxH);
    }
  }
}
</code></pre>
