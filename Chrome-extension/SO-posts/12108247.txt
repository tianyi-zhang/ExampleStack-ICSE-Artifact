<p>I've dug a little deeper and traveled from <code>OrderedUnorderedList</code> over <code>ListItem</code> to <code>List</code>... </p>

<pre><code>/**
 * Adds an &lt;CODE&gt;Element&lt;/CODE&gt; to the &lt;CODE&gt;List&lt;/CODE&gt;.
 *
 * @param   o       the element to add.
 * @return true if adding the object succeeded
 * @since 5.0.1 (signature changed to use Element)
 */
@Override
public boolean add(final Element o) {
    if (o instanceof ListItem) {
        ListItem item = (ListItem) o;
        if (this.numbered || this.lettered) {
            Chunk chunk = new Chunk(this.preSymbol, this.symbol.getFont());
            chunk.setAttributes(this.symbol.getAttributes());
            int index = this.first + this.list.size();
            if ( this.lettered )
                chunk.append(RomanAlphabetFactory.getString(index, this.lowercase));
            else
                chunk.append(String.valueOf(index));
            chunk.append(this.postSymbol);
            item.setListSymbol(chunk);
        }
        else {
            item.setListSymbol(this.symbol);
        }
        item.setIndentationLeft(this.symbolIndent, this.autoindent);
        item.setIndentationRight(0);
        return this.list.add(item);
    }
    else if (o instanceof List) {
        List nested = (List) o;
        nested.setIndentationLeft(nested.getIndentationLeft() + this.symbolIndent);
        this.first--;
        return this.list.add(nested);
    }
    return false;
}
</code></pre>

<p>This code refers to <code>this.symbol.getFont()</code> which is set to undefined on class initialization...</p>

<pre><code>public class List implements TextElementArray, Indentable {

    [...]    

    /** This is the listsymbol of a list that is not numbered. */
    protected Chunk symbol = new Chunk("- ");
</code></pre>

<p>I simply used another <code>Chunk</code> constructor which takes a <code>Font</code> of mine and voila... <strong>SOLVED</strong>. The numbered list no longer uses <strong>Helvetica</strong> but my own font which gets embedded properly.</p>

<p>This took me ages! Another way might have been to implement an own TagProcessor for <code>&lt;ol&gt;</code> but we don't have the time for this anymore. I'll file a bug report for this... we'll see if it gets fixed a bit more flexible.</p>
