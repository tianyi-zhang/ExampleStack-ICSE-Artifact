<p>Use this function:</p>

<pre><code> public void calcPath( final double fromLat, final double fromLon,
final double toLat, final double toLon ) {
    log("calculating path ...");
    new AsyncTask&lt;Void, Void, GHResponse&gt;(){    
        float time;
        protected GHResponse doInBackground( Void... v ){
            StopWatch sw = new StopWatch().start();
            GHRequest req = new GHRequest(fromLat, fromLon, toLat, toLon).
            setAlgorithm(AlgorithmOptions.DIJKSTRA_BI);
            req.getHints().
            put("instructions", "false");
            GHResponse resp = hopper.route(req);
            time = sw.stop().getSeconds();
            return resp;
        }
        protected void onPostExecute( GHResponse resp ){
            if (!resp.hasErrors()){
                log("from:" + fromLat + "," + fromLon + " to:" + toLat + ","
                + toLon + " found path with distance:" + resp.getDistance()
                / 1000f + ", nodes:" + resp.getPoints().getSize() + ", time:"
                + time + " " + resp.getDebugInfo());
                logUser("the route is " + (int) (resp.getDistance() / 100) / 10f
                + "km long, time:" + resp.getMillis() / 60000f + "min, debug:" + time);
                mapView.getLayerManager().getLayers().add(createPolyline(resp));
                //mapView.redraw();
            } else{
                logUser("Error:" + resp.getErrors());
            }
            shortestPathRunning = false;
        }
    }.execute();
}
</code></pre>

<p>All source you can find at <a href="https://github.com/graphhopper/graphhopper" rel="nofollow">https://github.com/graphhopper/graphhopper</a></p>
