<p>I think this is going to help you </p>

<pre><code>   public class YourClassName RecognitionListener{
    private SpeechRecognizer speech = null;
    private Intent recognizerIntent;
    private String LOG_TAG = "VoiceRecognitionActivity";



   @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.activity_camera);


 speech = SpeechRecognizer.createSpeechRecognizer(this);
        speech.setRecognitionListener(this);
        recognizerIntent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
        recognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_PREFERENCE,
                "en");

        recognizerIntent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE, getApplication().getPackageName());
        recognizerIntent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,
                RecognizerIntent.LANGUAGE_MODEL_WEB_SEARCH);
        recognizerIntent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS, 3);
      speech.startListening(recognizerIntent);



}



  @Override
    public void onReadyForSpeech(Bundle params) {
        Log.i(LOG_TAG+"&gt;"+ "onReadyForSpeech");
    }

    @Override
    public void onBeginningOfSpeech() {

        Log.i(LOG_TAG+"&gt; "+"onBeginningOfSpeech");

    }

    @Override
    public void onRmsChanged(float rmsdB) {
        Log.i(LOG_TAG+"&gt;"+ "onRmsChanged: " + rmsdB);
    }

    @Override
    public void onBufferReceived(byte[] buffer) {
        Log.i(LOG_TAG+"&gt;"+ "onBufferReceived: " + buffer);
    }

    @Override
    public void onEndOfSpeech() {
        Log.i(LOG_TAG+"&gt;"+ "onEndOfSpeech");


    }

    @Override
    public void onError(int error) {
        String errorMessage = getErrorText(error);
        Log.d(LOG_TAG+"&gt;"+ "FAILED " + errorMessage);
      if(errorMessage.contains("RecognitionService busy"))
      {  speech.stopListening();
        speech.startListening(recognizerIntent);


      }else if(errorMessage.contains("No speech input")){
          speech.stopListening();
            speech.startListening(recognizerIntent);

        }else if(errorMessage.contains("No match")){
          speech.stopListening();

          speech.startListening(recognizerIntent);
        }
//        speech.destroy();
//        speech.startListening(recognizerIntent);
    }

    @Override
    public void onResults(Bundle results) {
        Log.i(LOG_TAG+"&gt;"+ "onResults");
        ArrayList&lt;String&gt; matches = results
                .getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
        String text = "";
        for (String result : matches)
            text += result + "\n";
        if(text.contains("your Keyword here")){
            camera.takePicture(null, null, this);
            Log.v(text+"these are results");

        }

        Log.v(text+"On result");
    }


   @Override
    public void onPartialResults(Bundle partialResults) {
        Log.i(LOG_TAG+"&gt;"+ "onPartialResults");
    }

    @Override
    public void onEvent(int eventType, Bundle params) {
        Log.i(LOG_TAG+"&gt;"+ "onEvent");
    }


    public  String getErrorText(int errorCode) {
        String message;
        switch (errorCode) {
            case SpeechRecognizer.ERROR_AUDIO:
                message = "Audio recording error";
                break;
            case SpeechRecognizer.ERROR_CLIENT:
                message = "Client side error";
                break;
            case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS:
                message = "Insufficient permissions";
                break;
            case SpeechRecognizer.ERROR_NETWORK:
                message = "Network error";
                break;
            case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:
                message = "Network timeout";
                break;
            case SpeechRecognizer.ERROR_NO_MATCH:
                message = "No match";


                break;
            case SpeechRecognizer.ERROR_RECOGNIZER_BUSY:
                message = "RecognitionService busy";

                break;
            case SpeechRecognizer.ERROR_SERVER:
                message = "error from server";
                break;
            case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:
                message = "No speech input";

                break;
            default:
                message = "Didn't understand, please try again.";
                break;
        }
        return message;
    }

}
</code></pre>
