<blockquote>
  <p>FloatingActionButton that have AutoHide by Scrolling,</p>
</blockquote>

<p>You must use <code>android.support.v4.widget.NestedScrollView</code> instead of <code>ScrollView</code>. You can't use the ScrollView. You have to use the NestedScrollView or a view that implements the NestedScrollingChild interface, like a RecyclerView.</p>

<p>To achieve this kind of pattern you have to implement your custom <code>Behavior</code>. There is a nice code posted by a Googler that hides the FAB when the user scrolls down and shows it when they scroll back up. Reuses the same animation that FloatingActionButton.Behavior uses for hiding/showing the FAB in reaction to the AppBarLayout exiting/entering.</p>

<p><strong>UPDATED 18/07/2015</strong></p>

<p>With the <strong>22.2.1</strong> you can simply add the code posted below, using the pre-built animations.
Just use a class like this: (original source <a href="https://github.com/chrisbanes/cheesesquare/compare/master...ianhanniballake:scroll_aware_fab">here</a>)</p>

<pre><code>public class ScrollAwareFABBehavior extends FloatingActionButton.Behavior {
    public ScrollAwareFABBehavior(Context context, AttributeSet attrs) {
        super();
    }

    @Override
    public boolean onStartNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child,
                                       final View directTargetChild, final View target, final int nestedScrollAxes) {
        // Ensure we react to vertical scrolling
        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL
                || super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
    }

    @Override
    public void onNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child,
                               final View target, final int dxConsumed, final int dyConsumed,
                               final int dxUnconsumed, final int dyUnconsumed) {
        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);
        if (dyConsumed &gt; 0 &amp;&amp; child.getVisibility() == View.VISIBLE) {
            // User scrolled down and the FAB is currently visible -&gt; hide the FAB
            child.hide();
        } else if (dyConsumed &lt; 0 &amp;&amp; child.getVisibility() != View.VISIBLE) {
            // User scrolled up and the FAB is currently not visible -&gt; show the FAB
            child.show();
        }
    }
}
</code></pre>

<p>Then you can apply this behaviour to your FAB using:</p>

<pre><code>&lt;android.support.design.widget.FloatingActionButton
        android:id="@+id/fab"
     app:layout_behavior="com.support.android.designlibdemo.ScrollAwareFABBehavior" /&gt;
</code></pre>

<p>With <strong>Design 22.2.0</strong>:
You have to use a class like this: (original source <a href="https://github.com/ianhanniballake/cheesesquare/commit/aefa8b57e61266e4ad51bef36e669d69f7fd749c">here</a>)</p>

<pre><code>public class ScrollAwareFABBehavior extends FloatingActionButton.Behavior {
    private static final Interpolator INTERPOLATOR = new FastOutSlowInInterpolator();
    private boolean mIsAnimatingOut = false;

    public ScrollAwareFABBehavior(Context context, AttributeSet attrs) {
        super();
    }

    @Override
    public boolean onStartNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child,
                                       final View directTargetChild, final View target, final int nestedScrollAxes) {
        // Ensure we react to vertical scrolling
        return nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL
                || super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
    }

    @Override
    public void onNestedScroll(final CoordinatorLayout coordinatorLayout, final FloatingActionButton child,
                               final View target, final int dxConsumed, final int dyConsumed,
                               final int dxUnconsumed, final int dyUnconsumed) {
        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);
        if (dyConsumed &gt; 0 &amp;&amp; !this.mIsAnimatingOut &amp;&amp; child.getVisibility() == View.VISIBLE) {
            // User scrolled down and the FAB is currently visible -&gt; hide the FAB
            animateOut(child);
        } else if (dyConsumed &lt; 0 &amp;&amp; child.getVisibility() != View.VISIBLE) {
            // User scrolled up and the FAB is currently not visible -&gt; show the FAB
            animateIn(child);
        }
    }

    // Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits
    private void animateOut(final FloatingActionButton button) {
        if (Build.VERSION.SDK_INT &gt;= 14) {
            ViewCompat.animate(button).scaleX(0.0F).scaleY(0.0F).alpha(0.0F).setInterpolator(INTERPOLATOR).withLayer()
                    .setListener(new ViewPropertyAnimatorListener() {
                        public void onAnimationStart(View view) {
                            ScrollAwareFABBehavior.this.mIsAnimatingOut = true;
                        }

                        public void onAnimationCancel(View view) {
                            ScrollAwareFABBehavior.this.mIsAnimatingOut = false;
                        }

                        public void onAnimationEnd(View view) {
                            ScrollAwareFABBehavior.this.mIsAnimatingOut = false;
                            view.setVisibility(View.GONE);
                        }
                    }).start();
        } else {
            Animation anim = AnimationUtils.loadAnimation(button.getContext(), R.anim.fab_out);
            anim.setInterpolator(INTERPOLATOR);
            anim.setDuration(200L);
            anim.setAnimationListener(new Animation.AnimationListener() {
                public void onAnimationStart(Animation animation) {
                    ScrollAwareFABBehavior.this.mIsAnimatingOut = true;
                }

                public void onAnimationEnd(Animation animation) {
                    ScrollAwareFABBehavior.this.mIsAnimatingOut = false;
                    button.setVisibility(View.GONE);
                }

                @Override
                public void onAnimationRepeat(final Animation animation) {
                }
            });
            button.startAnimation(anim);
        }
    }

    // Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters
    private void animateIn(FloatingActionButton button) {
        button.setVisibility(View.VISIBLE);
        if (Build.VERSION.SDK_INT &gt;= 14) {
            ViewCompat.animate(button).scaleX(1.0F).scaleY(1.0F).alpha(1.0F)
                    .setInterpolator(INTERPOLATOR).withLayer().setListener(null)
                    .start();
        } else {
            Animation anim = AnimationUtils.loadAnimation(button.getContext(), R.anim.fab_in);
            anim.setDuration(200L);
            anim.setInterpolator(INTERPOLATOR);
            button.startAnimation(anim);
        }
    }
}
</code></pre>

<p>Then you can apply this behaviour to your FAB using:</p>

<pre><code>&lt;android.support.design.widget.FloatingActionButton
        android:id="@+id/fab"
     app:layout_behavior="com.support.android.designlibdemo.ScrollAwareFABBehavior" /&gt;
</code></pre>

<p>Of course you can change this code to obtain your favorite pattern.</p>

<blockquote>
  <p>And, I want to have a FloatingActionButton Menu by clicking on FloatingActionButton, like this:</p>
</blockquote>

<p>Currently the original FAB doesn't support this pattern. You have to implement a custom code to achieve it.</p>
