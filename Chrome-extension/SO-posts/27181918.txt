<p>In order to avoid setting everything else <code>focusable</code> (which is painful if you happen to use the same text view in many other layouts), we opt to override the logic to intercept touch screen events at activity level instead:</p>

<pre><code>@Override
public boolean dispatchTouchEvent(MotionEvent event) {
    View v = getCurrentFocus();
    if (v instanceof EditText) {
        int scrcoords[] = new int[2];
        v.getLocationOnScreen(scrcoords);
        // calculate the relative position of the clicking position against the position of the view
        float x = event.getRawX() - scrcoords[0];
        float y = event.getRawY() - scrcoords[1];

        // check whether action is up and the clicking position is outside of the view
        if (event.getAction() == MotionEvent.ACTION_UP
                &amp;&amp; (x &lt; 0 || x &gt; v.getRight() - v.getLeft()
                || y &lt; 0 || y &gt; v.getBottom() - v.getTop())) {
            if (v.getOnFocusChangeListener() != null) {
                v.getOnFocusChangeListener().onFocusChange(v, false);
            }
        }
    }
    return super.dispatchTouchEvent(event);
}
</code></pre>

<p>If you put this logic in your base activity, any screen with an edit text now will fire <code>onFocusChange</code> when you tap anywhere outside it. By listening to <code>onFocusChange</code> you can <code>clearFocus</code> or <code>requestFocus</code> on another view. It's a hack more or less but at least you don't have to set focusable for any other items on many layouts.</p>

<p>See <a href="http://developer.android.com/reference/android/app/Activity.html#dispatchTouchEvent(android.view.MotionEvent)" rel="nofollow">http://developer.android.com/reference/android/app/Activity.html#dispatchTouchEvent(android.view.MotionEvent)</a></p>
