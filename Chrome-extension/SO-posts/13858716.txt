<p>Well Answering my own first question  :) 
Actually i could not get directly to the solution - but atleast found 2 ways out.</p>

<ol>
<li><p>You can take 2 imageview's. Allocate the 1st Imageview ( ref it as imageview1 ) with the image source  and then place the 2nd Imageview ( ref it as imageview2 ) on imageview1 , such a way that it covers entire screen ( fill parent - both height and width ) .<br>
Now in .java file , assign <code>imageview2.setOnTouchListener(this);</code> and override the onLoad() method as per your need . Eg.  </p>

<p>`public boolean onTouch(View v, MotionEvent event) {</p>

<pre><code>int action = event.getAction();
switch (action) {
case MotionEvent.ACTION_DOWN:

    oldx = downx = event.getX();
    oldy = downy = event.getY();            
    break;

case MotionEvent.ACTION_MOVE:

    downx = event.getX();
    downy = event.getY();

    canvas.drawLine(oldx, oldy, downx, downy, paint);
    imgvw.invalidate();

    oldx = downx ;
    oldy = downy ;          
    break;

case MotionEvent.ACTION_UP:
    upx = event.getX();
    upy = event.getY();

    canvas.drawLine(oldx, oldy, upx, upy, paint);
    imgvw.invalidate();

    break;
case MotionEvent.ACTION_CANCEL:
                 // SOME CODE THAT YOU WANNA USE 
    break;
default:
    break;
}
return true;
</code></pre>

<p>}`</p></li>
</ol>

<blockquote>
  <p>Paint paint = new Paint() ;</p>
  
  <p>paint.setColor(Color.GREEN);</p>
</blockquote>

<p>This will help to draw on imageview2 but it would seem as if it is been drawn on imageview1 :)</p>

<ol>
<li>The second method is pretty straight forward - 
Create a new class ( cal it MyImageview ) extending ImageView .
Now in your activity class, create an object of MyImageView and <code>setContentView(myImageView(this))</code>  and attach a <code>setOnTouchListener(this);</code> , implement the onTouch method as specified above and this will work fine .</li>
</ol>
