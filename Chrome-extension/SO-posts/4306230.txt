<p>If someone need to do something like I needed, I made this</p>

<pre><code>private MultiAutoCompleteTextView searchEdit;

private ArrayAdapter&lt;String&gt; adapter = null;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);

    adapter = new ArrayAdapter&lt;String&gt;(this,
            android.R.layout.simple_dropdown_item_1line, manager
                    .getContacts());

    setListAdapter(adapter);

    searchEdit = (MultiAutoCompleteTextView) findViewById(R.id.search_box);

    searchEdit.addTextChangedListener(filterTextWatcher);

    searchEdit.setTokenizer(new SpaceTokenizer());

    searchEdit.setAdapter(adapter);

    searchEdit.setOnClickListener(new OnClickListener() {

        public void onClick(View v) {
            String t = ((TextView) v).getText().toString();
            String f = searchEdit.getText().toString();

            int s = searchEdit.getSelectionStart();
            int i = s;

            while (i &gt; 0 &amp;&amp; f.charAt(i - 1) != ' ') {
                i--;
            }

            adapter.getFilter().filter(t.substring(i, s));
        }
    });

    okButton = (Button) findViewById(R.id.ok);
    okButton.setOnClickListener(new OnClickListener() {

        public void onClick(View v) {
            Bundle stats = new Bundle();
            stats.putString("ConversationName", searchEdit.getText()
                    .toString());

            Intent i = new Intent();
            i.putExtras(stats);
            setResult(RESULT_OK, i);
            finish();
        }
    });

    searchEdit.setOnKeyListener(new OnKeyListener() {

        public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT
                    || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT
                    || keyCode == KeyEvent.KEYCODE_DPAD_UP
                    || keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {

                String t = ((TextView) v).getText().toString();
                String f = searchEdit.getText().toString();

                int s = searchEdit.getSelectionStart();
                int i = s;

                while (i &gt; 0 &amp;&amp; f.charAt(i - 1) != ' ') {
                    i--;
                }

                adapter.getFilter().filter(t.substring(i, s));

                return false;
            }

            return false;
        }
    });

    getListView().setOnItemClickListener(
            new ListView.OnItemClickListener() {
                public void onItemClick(AdapterView&lt;?&gt; parent, View view,
                        int position, long id) {

                    String t = adapter.getItem(position);
                    String f = searchEdit.getText().toString();

                    int s = searchEdit.getSelectionStart();
                    int i = s;

                    while (i &gt; 0 &amp;&amp; f.charAt(i - 1) != ' ') {
                        i--;
                    }

                    searchEdit.getText().insert(s, t.substring(s - i));
                }
            });
}


    @Override
protected void onDestroy() {
    super.onDestroy();
    searchEdit.removeTextChangedListener(filterTextWatcher);
}


private TextWatcher filterTextWatcher = new TextWatcher() {

    public void afterTextChanged(Editable s) {
        okButton.setEnabled(searchEdit.getText().toString().trim()
                .length() &gt; 0);
    }

    public void beforeTextChanged(CharSequence s, int start, int count,
            int after) {
    }

    public void onTextChanged(CharSequence s, int start, int before,
            int count) {
        adapter.getFilter().filter(s);
    }

};



public class SpaceTokenizer implements Tokenizer {

public int findTokenStart(CharSequence text, int cursor) {
    int i = cursor;

    while (i &gt; 0 &amp;&amp; text.charAt(i - 1) != ' ') {
        i--;
    }
    while (i &lt; cursor &amp;&amp; text.charAt(i) == ' ') {
        i++;
    }

    return i;
}

public int findTokenEnd(CharSequence text, int cursor) {
    int i = cursor;
    int len = text.length();

    while (i &lt; len) {
        if (text.charAt(i) == ' ') {
            return i;
        } else {
            i++;
        }
    }

    return len;
}

public CharSequence terminateToken(CharSequence text) {
    int i = text.length();

    while (i &gt; 0 &amp;&amp; text.charAt(i - 1) == ' ') {
        i--;
    }

    if (i &gt; 0 &amp;&amp; text.charAt(i - 1) == ' ') {
        return text;
    } else {
        if (text instanceof Spanned) {
            SpannableString sp = new SpannableString(text + " ");
            TextUtils.copySpansFrom((Spanned) text, 0, text.length(),
                    Object.class, sp, 0);
            return sp;
        } else {
            return text + " ";
        }
    }
}
}
</code></pre>

<p>The xml looks like this:</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="fill_parent" android:layout_height="fill_parent"
android:orientation="vertical"
android:drawingCacheQuality="high"&gt;

&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="fill_parent" android:layout_height="wrap_content"
android:orientation="horizontal"&gt;


    &lt;MultiAutoCompleteTextView
        android:layout_marginLeft="1dip"
        android:layout_marginTop="1dip"
        android:layout_height="wrap_content" 
        android:layout_weight="1"
        android:layout_width="fill_parent"
        android:dropDownHeight="0px" 
        android:hint="@string/To" 
        android:id="@+id/search_box"
        &gt;&lt;/MultiAutoCompleteTextView&gt;



    &lt;Button android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
        android:text="Ok"
        android:id="@+id/ok"
        android:enabled="false"
        /&gt;  


&lt;/LinearLayout&gt;     
&lt;ListView android:id="@android:id/list" android:layout_width="fill_parent"
    android:layout_height="fill_parent" android:layout_weight="1" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Hope this help</p>
