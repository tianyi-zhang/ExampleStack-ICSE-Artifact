<p>I do not know of any standard Java implementation, but the following code (using LibGDX to provide points and matrix operations) works for me. To get the transformation matrix I use <code>getProjectionMatrix</code>; once I have it, I can transform points using something similar to <code>transformPoints</code> above. You could call <code>transformPoints</code> for each of the "square pixels" in your first image, and would get the corners for the corresponding "projected pixel" in the second image. This is slow, but hey, nobody is forcing you <em>not</em> to use OpenGL...</p>

<pre><code>/**
 * Transforms all points in a polygon using a 3x3 projection matrix.
 * 
 * @param t
 *            the 3x3 transform matrix
 * @param points
 *            the points to transform. Coordinates will be overwritten
 */
public static void transformPoints(Matrix3 t, Vector2... points) {
    Vector3 v3 = new Vector3();
    for (Vector2 v : points) {
        v3.set(v.x, v.y, 1);
        v3.mul(t);
        v.set(v3.x / v3.z, v3.y / v3.z);
    }
}

private static Matrix3 mapBasisToImage(Vector2[] v) {
    // solve (v1 v2 v3) * &lt;a b c&gt; = v4 using &lt;a b c&gt; = (v1 v2 v3)^-1 * v4
    Matrix3 v123 = new Matrix3(new float[] { v[0].x, v[0].y, 1, v[1].x,
            v[1].y, 1, v[2].x, v[2].y, 1 });
    Vector3 v4 = new Vector3(new float[] { v[3].x, v[3].y, 1 });
    float[] M = v123.val.clone();
    v4.mul(v123.inv());
    // scale by solutions
    for (int i = 0; i &lt; 3; i++) {
        M[i + 0] *= v4.x;
        M[i + 3] *= v4.y;
        M[i + 6] *= v4.z;
    }
    Matrix3 bti = new Matrix3(M);
    return bti;
}

/**
 * Calculates a projection matrix from two corresponding sets of four
 * non-collinear 2d vertices. Notice that "view" and "world" are actually
 * interchangeable. Use sparingly: several intermediate matrices are
 * required, and performance may suffer if called in a tight loop.
 * 
 * @param view
 *            four points in the "view" (a camera pointed at the world,
 *            probably with some kind of perspective distortion)
 * @param world
 *            four corresponding points in the "world" (where distances and
 *            angles are correct)
 * @return a 3d projection that can be used to transform any view-based 2d
 *         vector into 'real space', and inverted to undo the process.
 * @see &lt;a href="http://jsfiddle.net/dFrHS/1/"&gt;this example&lt;/a&gt;, referenced
 *      and described an excellent @see &lt;a
 *      href="http://math.stackexchange.com/questions/296794/"&gt;
 *      math.stackexchange.com answer&lt;/a&gt;.
 */
public static Matrix3 getProjectionMatrix(Vector2[] view, Vector2[] world) {

    Matrix3 A = mapBasisToImage(view);
    Matrix3 B = mapBasisToImage(world);

    // combined - translates any vector from v-space to w-space
    return B.mul(A.inv());
}
</code></pre>

<p>Converting it to standard Java classes should be easy (although standard Java has no Point3D, you just need x, y and z; and there are plenty of simple matrix inversion &amp; multiplication libraries out there).</p>
