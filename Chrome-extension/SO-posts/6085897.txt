<p>Java has some good core facilities to get do this really simple.
The solution below uses regular expression to go through your content and allows you to replace the characters.  This solution does require to do a little work in that you need to provide the escape codes.  You can find a list of escape codes here  [http://www.w3.org/TR/html4/sgml/entities.html][1] or Google the web for others.  </p>

<p>Here is the code below:</p>

<pre><code>import java.util.regex.*;
import java.util.*;

public class HtmlUnescape {
    public static void main(String[] args){
        HashMap&lt;String,String&gt; codes = new HashMap&lt;String,String&gt;();
        codes.put("&amp;lt;", "&lt;");
        codes.put("&amp;gt;", "&gt;");
        codes.put("&amp;#34;", "\"");

        String html = "&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;The great escape &amp;#34;example&amp;#34;&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;";

        Matcher matcher = Pattern.compile("&amp;#*\\w\\w\\w?\\w?;").matcher(html);
        StringBuffer matchBuffer = new StringBuffer();
        while(matcher.find()){
            matcher.appendReplacement(matchBuffer, codes.get(matcher.group()));
        }
        matcher.appendTail(matchBuffer);
        System.out.println (matchBuffer.toString());
    }
}
</code></pre>

<p>What is going on in the code:</p>

<ul>
<li>First, the hash stores the codes to unescape. </li>
<li>Second, variable html stores escape HTML to process. </li>
<li>Next, we use the regex expression to search and replace the escaped codes using:
<ul>
<li>Matcher.find(),</li>
<li>Matcher.appendReplacement(), and</li>
<li>Matcher.appendTail() methods.</li>
</ul></li>
</ul>

<p>Try that.  I have no insight on performance of large files such as yours. But, the code is simple enough to where you can tweak it to get the desired performance.</p>
