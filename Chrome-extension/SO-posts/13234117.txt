<p>Usually passwords are encrypted using some algorithm say (MD5) and exchange with services... You don't have to decrypt password... it's like you create a MD5 hash string of password and the key is the actual password it self. </p>

<p>So on server, you would store MD5 hash of actual password and each client will create MD5 hash string of given password and finally you would validate both hash strings for password verification... </p>

<p>You would easily find java code online to create MD5 hash... one example is </p>

<pre><code>public static String convertStringToMD5Hash(String string) {
    byte[] hash;

    try {
        hash = MessageDigest.getInstance("MD5").digest(string.getBytes("UTF-8"));
    } catch (NoSuchAlgorithmException e) {
        throw new RuntimeException("MD5 not supported?", e);
    } catch (UnsupportedEncodingException e) {
        throw new RuntimeException("UTF-8 not supported?", e);
    }

    StringBuilder hex = new StringBuilder(hash.length * 2);

    for (byte b : hash) {
        int i = (b &amp; 0xFF);
        if (i &lt; 0x10)
            hex.append('0');
        hex.append(Integer.toHexString(i));
    }

    return hex.toString();
}
</code></pre>

<blockquote>
  <p>Disclaimer: Code works on my machine and may need
  improvement/optimization for production use</p>
</blockquote>
