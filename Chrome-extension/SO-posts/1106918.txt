<p>If your objects implement Serializable, you can use writeObject() and readObject() to make a deep copy.  We have a data transfer object hierarchy and support deep copies via this method in the abstract superclass (DTO):</p>

<pre><code>/**
 * Reply a deep copy of this DTO.  This generic method works for any DTO subclass:
 * 
 *      Person person = new Person();
 *      Person copy = person.deepCopy();
 * 
 * Note: Using Java serialization is easy, but can be expensive.  Use with care.
 * 
 * @return A deep copy of this DTO.
 */
@SuppressWarnings("unchecked")
public &lt;T extends DTO&gt; T deepCopy()
{
 try
 {
  ObjectOutputStream oos = null;
  ObjectInputStream ois = null;
  try
  {
   ByteArrayOutputStream bos = new ByteArrayOutputStream();
   oos = new ObjectOutputStream(bos);
   oos.writeObject(this);
   oos.flush();
   ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));
   return (T) ois.readObject();
  }
  finally
  {
   oos.close();
   ois.close();
  }
 }
 catch ( ClassNotFoundException cnfe )
 {
  // Impossible, since both sides deal in the same loaded classes.
  return null;
 }
 catch ( IOException ioe )
 {
  // This has to be "impossible", given that oos and ois wrap a *byte array*.
  return null;
 }
}
</code></pre>

<p>(I'm certain that someone will find a reason why these exceptions <em>can</em> occur.)</p>

<p>Other serialization libraries (eg, XStream) could be used in the same manner.</p>
