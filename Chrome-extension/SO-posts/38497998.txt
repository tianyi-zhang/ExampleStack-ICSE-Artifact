<p>You need to define a function to know the "distance" between two strings.</p>

<p>Basically you need a function that take two strings in input and return a value representing the distance. Comparing the different distances you can find the most similar string.</p>

<p>An example of distance function is the <a href="https://en.wikipedia.org/wiki/Levenshtein_distance" rel="nofollow">Levenshtein</a> function.</p>

<p><a href="https://en.wikibooks.org/wiki/Algorithm_Implementation/Strings/Levenshtein_distance" rel="nofollow">Here</a> you can find functions in different languages implementing the Levenshtein function. The following code is the java implementation taken from that site:</p>

<pre><code>public class LevenshteinDistance {                                               
    private static int minimum(int a, int b, int c) {                            
        return Math.min(Math.min(a, b), c);                                      
    }                                                                            

    public static int computeLevenshteinDistance(CharSequence lhs, CharSequence rhs) {      
        int[][] distance = new int[lhs.length() + 1][rhs.length() + 1];        

        for (int i = 0; i &lt;= lhs.length(); i++)                                 
            distance[i][0] = i;                                                  
        for (int j = 1; j &lt;= rhs.length(); j++)                                 
            distance[0][j] = j;                                                  

        for (int i = 1; i &lt;= lhs.length(); i++)                                 
            for (int j = 1; j &lt;= rhs.length(); j++)                             
                distance[i][j] = minimum(                                        
                        distance[i - 1][j] + 1,                                  
                        distance[i][j - 1] + 1,                                  
                        distance[i - 1][j - 1] + ((lhs.charAt(i - 1) == rhs.charAt(j - 1)) ? 0 : 1));

        return distance[lhs.length()][rhs.length()];                           
    }                                                                            
}
</code></pre>

<p>You can use it as follow:</p>

<pre><code>public String mostSimilar(String toBeCompared, String[] strings) {
    int minDistance = Integer.MAX_VALUE;
    String similar = null;
    for (String str : strings) {
        int d = LevenshteinDistance.computeLevenshteinDistance(str, toBeCompared);
        if (d &lt; minDistance) {
            minDistance = d;
            similar = str;
        }
    }
    return similar;
}
</code></pre>

<hr>

<p><a href="https://en.wikipedia.org/wiki/String_metric" rel="nofollow">Here</a> a quite complete list of string metric functions.</p>
