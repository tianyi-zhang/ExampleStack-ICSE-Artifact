<p>As stated in the page provided by you:</p>

<blockquote>
  <p>This AppWidgetProvider defines only the onUpdate() method for the
  purpose of defining a PendingIntent that launches an Activity and
  attaching it to the App Widget's button with
  setOnClickPendingIntent(int, PendingIntent). Notice that it includes a
  loop that iterates through each entry in appWidgetIds, which is an
  array of IDs that ide</p>
</blockquote>

<p>Also:</p>

<blockquote>
  <p>As described in Using the AppWidgetProvider Class, you normally use
  setOnClickPendingIntent() to set an object's click behaviorâ€”such as to
  cause a button to launch an Activity. But this approach is not allowed
  for child views in an individual collection item (to clarify, you
  could use setOnClickPendingIntent() to set up a global button in the
  Gmail app widget that launches the app, for example, but not on the
  individual list items). Instead, to add click behavior to individual
  items in a collection, you use setOnClickFillInIntent(). This entails
  setting up up a pending intent template for your collection view, and
  then setting a fill-in intent on each item in the collection via your
  RemoteViewsFactory.</p>
</blockquote>

<p>What about that example from the link that you provided? I didn't read that page carefully (you definitely should), but shouldn't you setOnClickPendingIntent() or setOnClickFillInIntent()?:</p>

<pre><code>public class ExampleAppWidgetProvider extends AppWidgetProvider {

    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
        final int N = appWidgetIds.length;

        // Perform this loop procedure for each App Widget that belongs to this provider
        for (int i=0; i&lt;N; i++) {
            int appWidgetId = appWidgetIds[i];

            // Create an Intent to launch ExampleActivity
            Intent intent = new Intent(context, ExampleActivity.class);
            PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);

            // Get the layout for the App Widget and attach an on-click listener
            // to the button
            RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.appwidget_provider_layout);
            views.setOnClickPendingIntent(R.id.button, pendingIntent);

            // Tell the AppWidgetManager to perform an update on the current app widget
            appWidgetManager.updateAppWidget(appWidgetId, views);
        }
    }
}
</code></pre>
