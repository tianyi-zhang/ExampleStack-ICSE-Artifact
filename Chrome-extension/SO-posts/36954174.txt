<p>I do the same thing with following structure : </p>

<p>first of all create AnimationHelper class like following :</p>

<pre><code>public class AnimationHelper {
    public static void expand(final View v) {
        v.measure(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
        final int targetHeight = v.getMeasuredHeight();

        v.getLayoutParams().height = 0;
        v.setVisibility(View.VISIBLE);
        Animation a = new Animation() {
            @Override
            protected void applyTransformation(float interpolatedTime, Transformation t) {
                v.getLayoutParams().height = interpolatedTime == 1
                        ? LinearLayout.LayoutParams.WRAP_CONTENT
                        : (int) (targetHeight * interpolatedTime);
                v.requestLayout();
            }

            @Override
            public boolean willChangeBounds() {
                return true;
            }
        };

        // 1dp/ms
        a.setDuration((int) (targetHeight / v.getContext().getResources().getDisplayMetrics().density));
        v.startAnimation(a);
    }

    public static void collapse(final View v) {
        final int initialHeight = v.getMeasuredHeight();

        Animation a = new Animation() {
            @Override
            protected void applyTransformation(float interpolatedTime, Transformation t) {
                if (interpolatedTime == 1) {
                    v.setVisibility(View.GONE);
                } else {
                    v.getLayoutParams().height = initialHeight - (int) (initialHeight * interpolatedTime);
                    v.requestLayout();
                }
            }

            @Override
            public boolean willChangeBounds() {
                return true;
            }
        };
        // 1dp/ms
        a.setDuration((int) (initialHeight / v.getContext().getResources().getDisplayMetrics().density));
        v.startAnimation(a);
    }
}
</code></pre>

<p>Then in your xml put Layout which you want to expand like following (in my case it's <code>view_popup_menu_expand</code>):</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/default_background"
    android:orientation="vertical"&gt;

    &lt;android.support.v7.widget.CardView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/card_background"&gt;


            &lt;TextView
                android:id="@+id/btn_expand"
                style="@style/IconFont.Large"
                android:layout_width="36dp"
                android:layout_height="36dp"
                android:layout_gravity="right"
                android:text="@string/icon_chevron_up"
                android:textColor="@color/color_primary_dark" /&gt;




    &lt;/android.support.v7.widget.CardView&gt;

    &lt;include layout="@layout/view_popup_menu_expand" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Then set a listener to your Card and pass your <code>view_popup_menu_exapand</code> to AnimationHelper.expand()</p>

<p>You can find complete implementation <a href="https://github.com/AmirHadifar/Flashcard" rel="nofollow">Here</a></p>
