<p>With reference to your Edit 2, it is always going to look a bit iffy because it violates an older programming orthodoxy than OO: 'structured programming' (see <a href="http://en.wikipedia.org/wiki/Structured_programming" rel="nofollow">http://en.wikipedia.org/wiki/Structured_programming</a> ). It smacks of goto as well, and all good programmers know they need to go to confession if they let a goto into their code.</p>

<p>There could be some concern that it might make it harder for a compiler to analyse the control flow of a function, but it is the sort of tool that typically gets used for efficiency reasons. For instance, the Apache implementation of <code>java.lang.String</code> uses it in this function that is at least intended to be an optimisation:</p>

<pre><code>/*
 * An implementation of a String.indexOf that is supposed to perform
 * substantially better than the default algorithm if the "needle" (the
 * subString being searched for) is a constant string.
 *
 * For example, a JIT, upon encountering a call to String.indexOf(String),
 * where the needle is a constant string, may compute the values cache, md2
 * and lastChar, and change the call to the following method.
 */
@SuppressWarnings("unused")
private static int indexOf(String haystackString, String needleString,
        int cache, int md2, char lastChar) {
    char[] haystack = haystackString.value;
    int haystackOffset = haystackString.offset;
    int haystackLength = haystackString.count;
    char[] needle = needleString.value;
    int needleOffset = needleString.offset;
    int needleLength = needleString.count;
    int needleLengthMinus1 = needleLength - 1;
    int haystackEnd = haystackOffset + haystackLength;
    outer_loop: for (int i = haystackOffset + needleLengthMinus1; i &lt; haystackEnd;) {
        if (lastChar == haystack[i]) {
            for (int j = 0; j &lt; needleLengthMinus1; ++j) {
                if (needle[j + needleOffset] != haystack[i + j
                        - needleLengthMinus1]) {
                    int skip = 1;
                    if ((cache &amp; (1 &lt;&lt; haystack[i])) == 0) {
                        skip += j;
                    }
                    i += Math.max(md2, skip);
                    continue outer_loop;
                }
            }
            return i - needleLengthMinus1 - haystackOffset;
        }

        if ((cache &amp; (1 &lt;&lt; haystack[i])) == 0) {
            i += needleLengthMinus1;
        }
        i++;
    }
    return -1;
}
</code></pre>
