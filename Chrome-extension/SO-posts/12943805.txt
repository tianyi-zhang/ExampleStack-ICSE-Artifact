<p>You could move the connection handling code to an extra thread (lets call it KnockKnockHandler):</p>

<pre><code>public class KnockKnockHandler extends Thread {
    private Socket socket;
    public KnockKnockWorker(Socket socket) {
       this.socket = socket;
    }
    public void run() {
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
        BufferedReader in = new BufferedReader(
            new InputStreamReader(
            socket.getInputStream()));
        String inputLine, outputLine;
        KnockKnockProtocol kkp = new KnockKnockProtocol();

        outputLine = kkp.processInput(null);
        out.println(outputLine);

        while ((inputLine = in.readLine()) != null) {
             outputLine = kkp.processInput(inputLine);
             out.println(outputLine);
             if (outputLine.equals("Bye."))
                break;
        }
        out.close();
        in.close();
        socket.close();
    }
}
</code></pre>

<p>Once somebody connects to your server you create a new instance of KnockKnockHandler and start it:</p>

<pre><code>try {
    clientSocket = serverSocket.accept();
    KnockKnockHandler handler = new KnockKnockHandler(clientSocket);
    handler.start();
} catch (IOException e) {
    System.err.println("Accept failed.");
    System.exit(1);
}
</code></pre>

<p>If you take this into a loop your server will never shut down (except an exception is thrown or the JVM is terminated ;-) ):</p>

<pre><code>while(true) {
    try {
        clientSocket = serverSocket.accept();
        KnockKnockHandler handler = new KnockKnockHandler(clientSocket);
        handler.start();
    } catch (IOException e) {
        System.err.println("Accept failed.");
        System.exit(1);
    }
}
</code></pre>

<p>If a client connects your server will start a new Thread and go into the next iteration of the loop and wait for the next client to connect.</p>
