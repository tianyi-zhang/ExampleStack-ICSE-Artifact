<p>This is because of the verifyPurchase() method in the Security class that has been change in the new fixes. Let me show you what is the exact problem is:</p>

<p><strong>Security class changes</strong></p>

<p><strong>OLD CODE</strong></p>

<pre><code> public static boolean verifyPurchase(String base64PublicKey, String signedData, String signature) {
          if (signedData == null) {
            Log.e(TAG, "data is null");
            return false;
        }

        boolean verified = false;
        if (!TextUtils.isEmpty(signature)) {
            PublicKey key = Security.generatePublicKey(base64PublicKey);
            verified = Security.verify(key, signedData, signature);
            if (!verified) {
                Log.w(TAG, "signature does not match data.");
                return false;
            }
        }
        return true;
    }
</code></pre>

<p><strong>New Code</strong></p>

<pre><code>public static boolean verifyPurchase(String base64PublicKey,
            String signedData, String signature) {

    if (TextUtils.isEmpty(signedData) || TextUtils.isEmpty(base64PublicKey)
                || TextUtils.isEmpty(signature)) {
        Log.e(TAG, "Purchase verification failed: missing data.");
            return false;
    }

    PublicKey key = Security.generatePublicKey(base64PublicKey);
    return Security.verify(key, signedData, signature);

}
</code></pre>

<p>According to what I have searched and tested from New code,</p>

<p><strong>Why it happens</strong> because we will not get any signature while we are using dummy product like "android.test.purchased". So in the old code it is working good because we were return true even if signature is not given and for the New code we are returning false.</p>

<p>more information about the signature data null or blank from <a href="http://stackoverflow.com/questions/14272012/android-in-app-billing-v3-not-receiving-signatures">link1</a> and <a href="http://stackoverflow.com/questions/9790125/billingservice-android-no-signature">link2</a></p>

<p>So I suggest you just replace old code method verifyPurchase() instead of New Code method.</p>

<p>I think may be New Code will work fine for the real product but not in the dummy product. But yet I have not tested for the real product.</p>

<p>Let me search more about this, why they changed code and what is the purpose behind that.</p>

<p><strong>EDIT:</strong></p>

<p>BuildConfig.DEBUG will also give you the solution for the test purchases. </p>

<p>In the verifyPurchase I changed <code>return false</code> to:</p>

<pre><code> Log.e(TAG, "Purchase verification failed: missing data.");
        if (BuildConfig.DEBUG) {
                return true;
        }
        return false;
</code></pre>

<p>but you should be aware to use this only in test scenario's.</p>

<p>This will return true, if you have a debug build, and the signature data is missing. Since the BuildConfig.DEBUG will be false in a production build this should be OK. But better is to remove this code after everything is debugged.</p>

<p>I have edited some code in the verifyPurchase() method, check it below:</p>

<pre><code>public static boolean verifyPurchase(String base64PublicKey,
        String signedData, String signature) {

    if (signedData == null) {
        Log.e(TAG, "data is null");
        return false;
    }

    if (TextUtils.isEmpty(signedData) || TextUtils.isEmpty(base64PublicKey)
            || TextUtils.isEmpty(signature)) {
        Log.e(TAG, "Purchase verification failed: missing data.");
        if (BuildConfig.DEBUG) {
            Log.d("DeBUG", "&gt;&gt;&gt;"+BuildConfig.DEBUG);
            return true;
        }
        return false;
    }

    PublicKey key = Security.generatePublicKey(base64PublicKey);
    return Security.verify(key, signedData, signature);
}
</code></pre>

<p>I got this from <code>GvS's answer</code> <a href="http://stackoverflow.com/questions/19732025/android-in-app-billing-purchase-verification-failed">android in app billing purchase verification failed</a>.</p>

<p>hope it is helpful for you.</p>
