<p>Here is a method, which returns methods with specific annotations:</p>

<pre><code>public static List&lt;Method&gt; getMethodsAnnotatedWith(final Class&lt;?&gt; type, final Class&lt;? extends Annotation&gt; annotation) {
    final List&lt;Method&gt; methods = new ArrayList&lt;Method&gt;();
    Class&lt;?&gt; klass = type;
    while (klass != Object.class) { // need to iterated thought hierarchy in order to retrieve methods from above the current instance
        // iterate though the list of methods declared in the class represented by klass variable, and add those annotated with the specified annotation
        final List&lt;Method&gt; allMethods = new ArrayList&lt;Method&gt;(Arrays.asList(klass.getDeclaredMethods()));       
        for (final Method method : allMethods) {
            if (method.isAnnotationPresent(annotation)) {
                Annotation annotInstance = method.getAnnotation(annotation);
                // TODO process annotInstance
                methods.add(method);
            }
        }
        // move to the upper class in the hierarchy in search for more methods
        klass = klass.getSuperclass();
    }
    return methods;
}
</code></pre>

<p>It can be easily modified to your specific needs. Pls note that the provided method traverses class hierarchy in order to find methods with required annotations.</p>

<p>Here is a method for your specific needs:</p>

<pre><code>public static List&lt;Method&gt; getMethodsAnnotatedWithMethodXY(final Class&lt;?&gt; type) {
    final List&lt;Method&gt; methods = new ArrayList&lt;Method&gt;();
    Class&lt;?&gt; klass = type;
    while (klass != Object.class) { // need to iterated thought hierarchy in order to retrieve methods from above the current instance
        // iterate though the list of methods declared in the class represented by klass variable, and add those annotated with the specified annotation
        final List&lt;Method&gt; allMethods = new ArrayList&lt;Method&gt;(Arrays.asList(klass.getDeclaredMethods()));
        for (final Method method : allMethods) {
            if (method.isAnnotationPresent(MethodXY.class)) {
                MethodXY annotInstance = method.getAnnotation(MethodXY.class);
                if (annotInstance.x() == 3 &amp;&amp; annotInstance.y() == 2) {         
                    methods.add(method);
                }
            }
        }
        // move to the upper class in the hierarchy in search for more methods
        klass = klass.getSuperclass();
    }
    return methods;
}
</code></pre>

<p>For invocation of the found method(s) pls refer a <a href="http://download.oracle.com/javase/tutorial/reflect/member/methodInvocation.html">tutorial</a>. One of the potential difficulties here is the number of method arguments, which could vary between found methods and thus requiring some additional processing.</p>
