<p>In your custom adapter as mentioned in your link, In the <code>getView</code> method add click listner to image button 
So you can handle click of your image buttons in the custom adapter and if you want to send data between activities you can also send it in that click listner on based of position on click</p>

<pre><code>myImageButton.setOnClickListener(new OnClickListener()
            {
                public void onClick(View v)
                {
Intent intent = new Intent(Context, nextactivity.class);
intent.putExtra("value",ValueArray[position]);
startActivity(intent);
})};
</code></pre>

<p>Check it out and let me know if this helps you</p>

<p>Compare your code with below posted code</p>

<pre><code>/*
 * Copyright (C) 2010 Eric Harlow
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.ericharlow.DragNDrop;

import java.util.ArrayList;

import android.content.Context;
import android.content.Intent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public final class DragNDropAdapter extends BaseAdapter implements RemoveListener, DropListener{

    //private int[] mIds;
    //private int[] mLayouts;
    private LayoutInflater mInflater;
    private ArrayList&lt;String&gt; mContent;
    private Context mContext;

    public DragNDropAdapter(Context context, ArrayList&lt;String&gt; content) {
        mContext = context;
        init(context,new int[]{android.R.layout.simple_list_item_1},new int[]{android.R.id.text1}, content);
    }

    /*public DragNDropAdapter(Context context, int[] itemLayouts, int[] itemIDs, ArrayList&lt;String&gt; content) {
        init(context,itemLayouts,itemIDs, content);
    }*/

    private void init(Context context, int[] layouts, int[] ids, ArrayList&lt;String&gt; content) {
        // Cache the LayoutInflate to avoid asking for a new one each time.
        mInflater = LayoutInflater.from(context);
        //mIds = ids;
        //mLayouts = layouts;
        mContent = content;
    }

    /**
     * The number of items in the list
     * @see android.widget.ListAdapter#getCount()
     */
    public int getCount() {
        return mContent.size();
    }

    /**
     * Since the data comes from an array, just returning the index is
     * sufficient to get at the data. If we were using a more complex data
     * structure, we would return whatever object represents one row in the
     * list.
     *
     * @see android.widget.ListAdapter#getItem(int)
     */
    public String getItem(int position) {
        return mContent.get(position);
    }

    /**
     * Use the array index as a unique id.
     * @see android.widget.ListAdapter#getItemId(int)
     */
    public long getItemId(int position) {
        return position;
    }

    /**
     * Make a view to hold each row.
     *
     * @see android.widget.ListAdapter#getView(int, android.view.View,
     *      android.view.ViewGroup)
     */
    public View getView(final int position, View convertView, ViewGroup parent) {
        // A ViewHolder keeps references to children views to avoid unneccessary calls
        // to findViewById() on each row.
        ViewHolder holder;

        // When convertView is not null, we can reuse it directly, there is no need
        // to reinflate it. We only inflate a new View when the convertView supplied
        // by ListView is null.
        if (convertView == null) {
            mInflater = LayoutInflater.from(mContext);
            convertView = mInflater.inflate(R.layout.dragitem, null);
            // Creates a ViewHolder and store references to the two children views
            // we want to bind data to.
            holder = new ViewHolder();
            holder.text = (TextView) convertView.findViewById(R.id.TextView01);
            holder.image=(ImageView)convertView.findViewById(R.id.ImageView01);
            convertView.setTag(holder);
        } else {
            // Get the ViewHolder back to get fast access to the TextView
            // and the ImageView.
            holder = (ViewHolder) convertView.getTag();
        }
        holder.image.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {

                Toast.makeText(mContext,"ImageClickClick "+position, Toast.LENGTH_LONG).show();
                Intent noteIntent = new Intent(mContext,AnotherActivity.class);
                noteIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                mContext.startActivity(noteIntent);
            }
        });
        // Bind the data efficiently with the holder.
        holder.text.setText(mContent.get(position));

        return convertView;
    }

    static class ViewHolder {
        TextView text;
        ImageView image;
    }

    public void onRemove(int which) {
        if (which &lt; 0 || which &gt; mContent.size()) return;       
        mContent.remove(which);
    }

    public void onDrop(int from, int to) {
        String temp = mContent.get(from);
        mContent.remove(from);
        mContent.add(to,temp);
    }


}
</code></pre>
