<p>Okay, this version works with two new Map objects and two iterations and sorts on values. Hope, the performs well although the map entries must be looped twice:</p>

<pre><code>public static void main(String[] args) {
 Map&lt;String, String&gt; unsorted = new HashMap&lt;String, String&gt;();
 unsorted.put("Cde", "Cde_Value");
 unsorted.put("Abc", "Abc_Value");
 unsorted.put("Bcd", "Bcd_Value");

 Comparator&lt;String&gt; comparer = new Comparator&lt;String&gt;() {
  @Override
  public int compare(String o1, String o2) {
   return o1.compareTo(o2);
  }};

 System.out.println(sortByValue(unsorted, comparer));

}

public static &lt;K, V&gt; Map&lt;K,V&gt; sortByValue(Map&lt;K, V&gt; in, Comparator&lt;? super V&gt; compare) {
 Map&lt;V, K&gt; swapped = new TreeMap&lt;V, K&gt;(compare);
 for(Entry&lt;K,V&gt; entry: in.entrySet()) {
  if (entry.getValue() != null) {
   swapped.put(entry.getValue(), entry.getKey());
  }
 }
 LinkedHashMap&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;();
 for(Entry&lt;V,K&gt; entry: swapped.entrySet()) {
  if (entry.getValue() != null) {
   result.put(entry.getValue(), entry.getKey());
  }
 }
 return result;
}
</code></pre>

<p>The solution uses a TreeMap with a Comparator and sorts out all null keys and values. First, the ordering functionality from the TreeMap is used to sort upon the values, next the sorted Map is used to create a result as a LinkedHashMap that retains has the same order of values.</p>

<p>Greetz, GHad</p>
