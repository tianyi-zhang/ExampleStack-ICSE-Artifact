<p>I was just playing around with this same subject, which is the fastest way to access the pixels. I currently know of two ways for doing this:</p>

<ol>
<li>Using BufferedImage's <code>getRGB()</code> method as described in @tskuzzy's answer.</li>
<li><p>By accessing the pixels array directly using:</p>

<pre><code>byte[] pixels = ((DataBufferByte) bufferedImage.getRaster().getDataBuffer()).getData();
</code></pre></li>
</ol>

<p>If you are working with large images and performance is an issue, the first method is absolutely not the way to go. The <code>getRGB()</code> method combines the alpha, red, green and blue values into one int and then returns the result, which in most cases you'll do the reverse to get these values back.</p>

<p>The second method will return the red, green and blue values directly for each pixel, and if there is an alpha channel it will add the alpha value. Using this method is harder in terms of calculating indices, but is much faster than the first approach.</p>

<p>In my application I was able to reduce the time of processing the pixels by more than 90% by just switching from the first approach to the second!</p>

<p>Here is a comparison I've setup to compare the two approaches:</p>

<pre><code>import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.IOException;
import javax.imageio.ImageIO;

public class PerformanceTest {

   public static void main(String[] args) throws IOException {

      BufferedImage hugeImage = ImageIO.read(PerformanceTest.class.getResource("12000X12000.jpg"));

      System.out.println("Testing convertTo2DUsingGetRGB:");
      for (int i = 0; i &lt; 10; i++) {
         long startTime = System.nanoTime();
         int[][] result = convertTo2DUsingGetRGB(hugeImage);
         long endTime = System.nanoTime();
         System.out.println(String.format("%-2d: %s", (i + 1), toString(endTime - startTime)));
      }

      System.out.println("");

      System.out.println("Testing convertTo2DWithoutUsingGetRGB:");
      for (int i = 0; i &lt; 10; i++) {
         long startTime = System.nanoTime();
         int[][] result = convertTo2DWithoutUsingGetRGB(hugeImage);
         long endTime = System.nanoTime();
         System.out.println(String.format("%-2d: %s", (i + 1), toString(endTime - startTime)));
      }
   }

   private static int[][] convertTo2DUsingGetRGB(BufferedImage image) {
      int width = image.getWidth();
      int height = image.getHeight();
      int[][] result = new int[height][width];

      for (int row = 0; row &lt; height; row++) {
         for (int col = 0; col &lt; width; col++) {
            result[row][col] = image.getRGB(col, row);
         }
      }

      return result;
   }

   private static int[][] convertTo2DWithoutUsingGetRGB(BufferedImage image) {

      final byte[] pixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
      final int width = image.getWidth();
      final int height = image.getHeight();
      final boolean hasAlphaChannel = image.getAlphaRaster() != null;

      int[][] result = new int[height][width];
      if (hasAlphaChannel) {
         final int pixelLength = 4;
         for (int pixel = 0, row = 0, col = 0; pixel &lt; pixels.length; pixel += pixelLength) {
            int argb = 0;
            argb += (((int) pixels[pixel] &amp; 0xff) &lt;&lt; 24); // alpha
            argb += ((int) pixels[pixel + 1] &amp; 0xff); // blue
            argb += (((int) pixels[pixel + 2] &amp; 0xff) &lt;&lt; 8); // green
            argb += (((int) pixels[pixel + 3] &amp; 0xff) &lt;&lt; 16); // red
            result[row][col] = argb;
            col++;
            if (col == width) {
               col = 0;
               row++;
            }
         }
      } else {
         final int pixelLength = 3;
         for (int pixel = 0, row = 0, col = 0; pixel &lt; pixels.length; pixel += pixelLength) {
            int argb = 0;
            argb += -16777216; // 255 alpha
            argb += ((int) pixels[pixel] &amp; 0xff); // blue
            argb += (((int) pixels[pixel + 1] &amp; 0xff) &lt;&lt; 8); // green
            argb += (((int) pixels[pixel + 2] &amp; 0xff) &lt;&lt; 16); // red
            result[row][col] = argb;
            col++;
            if (col == width) {
               col = 0;
               row++;
            }
         }
      }

      return result;
   }

   private static String toString(long nanoSecs) {
      int minutes    = (int) (nanoSecs / 60000000000.0);
      int seconds    = (int) (nanoSecs / 1000000000.0)  - (minutes * 60);
      int millisecs  = (int) ( ((nanoSecs / 1000000000.0) - (seconds + minutes * 60)) * 1000);


      if (minutes == 0 &amp;&amp; seconds == 0)
         return millisecs + "ms";
      else if (minutes == 0 &amp;&amp; millisecs == 0)
         return seconds + "s";
      else if (seconds == 0 &amp;&amp; millisecs == 0)
         return minutes + "min";
      else if (minutes == 0)
         return seconds + "s " + millisecs + "ms";
      else if (seconds == 0)
         return minutes + "min " + millisecs + "ms";
      else if (millisecs == 0)
         return minutes + "min " + seconds + "s";

      return minutes + "min " + seconds + "s " + millisecs + "ms";
   }
}
</code></pre>

<p>Can you guess the output? ;)</p>

<pre><code>Testing convertTo2DUsingGetRGB:
1 : 16s 911ms
2 : 16s 730ms
3 : 16s 512ms
4 : 16s 476ms
5 : 16s 503ms
6 : 16s 683ms
7 : 16s 477ms
8 : 16s 373ms
9 : 16s 367ms
10: 16s 446ms

Testing convertTo2DWithoutUsingGetRGB:
1 : 1s 487ms
2 : 1s 940ms
3 : 1s 785ms
4 : 1s 848ms
5 : 1s 624ms
6 : 2s 13ms
7 : 1s 968ms
8 : 1s 864ms
9 : 1s 673ms
10: 2s 86ms

BUILD SUCCESSFUL (total time: 3 minutes 10 seconds)
</code></pre>
