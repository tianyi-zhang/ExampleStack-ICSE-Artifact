<p>What google seems to use in this example is to change the "protected Dialog onCreateDialog (int id) {" so that it is called internally always which is called "showDialog (showRetry? 1: 0);" creating default dialog for retry/cancel.</p>

<p>I suggest to use the following code, creating a handy method that creates the standard dialog, and changing or removing the "onCreateDialog()" as this becomes unnecessary.</p>

<pre><code>protected Dialog onCreateDialog(int id) {
    return CreateDialogRetryCancel(id);
}

public Dialog CreateDialogRetryCancel(int id) {
    final boolean bRetry = id == 1;
    return new AlertDialog.Builder(this)
        .setTitle(R.string.unlicensed_dialog_title)
        .setMessage(bRetry ? R.string.unlicensed_dialog_retry_body : R.string.unlicensed_dialog_body)
        .setPositiveButton(bRetry ? R.string.retry_button : R.string.buy_button, new DialogInterface.OnClickListener() {
            boolean mRetry = bRetry;
            public void onClick(DialogInterface dialog, int which) {
                if ( mRetry ) {
                    doCheck();
                } else {
                    Intent marketIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(
                            "http://market.android.com/details?id=" + getPackageName()));
                        startActivity(marketIntent);                        
                }
            }
        })
        .setNegativeButton(R.string.quit_button, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                finish();
            }
        }).create();
}

private void displayDialog(final boolean showRetry) {
    mHandler.post(new Runnable() {
        public void run() {
            setProgressBarIndeterminateVisibility(false);
            CreateDialogRetryCancel(showRetry ? 1 : 0).show();
            //showDialog(showRetry ? 1 : 0);
            mCheckLicenseButton.setEnabled(true);
        }
    });
}    
</code></pre>
