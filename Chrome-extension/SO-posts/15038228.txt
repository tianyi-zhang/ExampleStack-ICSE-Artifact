<p>It's because an array of type <code>T</code> cannot be instantiated without knowing the type <code>Class&lt;T&gt;</code>. Contrast this with <code>toArray(T[] array)</code>, which has the following source (example from <code>LinkedList</code>). Notice that the passed-in array is used not only as a possible container, but to possibly instantiate a new array of that type. This code throws an exception if <code>T</code> is not a superclass of <code>E</code>; if objects can't be added to the array.</p>

<pre><code>@SuppressWarnings("unchecked")
public &lt;T&gt; T[] toArray(T[] a) {
    if (a.length &lt; size)
        a = (T[])java.lang.reflect.Array.newInstance(
                            a.getClass().getComponentType(), size);
    int i = 0;
    Object[] result = a;
    for (Node&lt;E&gt; x = first; x != null; x = x.next)
        result[i++] = x.item;

    if (a.length &gt; size)
        a[size] = null;

    return a;
}
</code></pre>
