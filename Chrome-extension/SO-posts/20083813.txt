<p>I don't know of any simple way of doing this.  You won't necessarily know the entire set of classes that your application will eventually end up loading.  You could traverse your entire classpath looking for classes, and load and initialize them one by one, but this is terribly inefficient, and you will likely end up processing many classes that you wouldn't have ever loaded anyway.</p>

<p>If you only need to initialize certain classes, either piecewise or from a predefined list, you could use a method like <code>RuntimeHelpers.encureClassInitialized()</code> below:</p>

<pre><code>public final class RuntimeHelpers {
    private RuntimeHelpers() {
        throw new IllegalStateException("Code is supposed to be unreachable.");
    }

    public static void ensureClassInitialized(final Class&lt;?&gt; clazz) {
        getUnsafeInstance().ensureClassInitialized(Objects.requireNonNull(clazz, "clazz"));
    }

    private static Unsafe _unsafe;

    private static Unsafe getUnsafeInstance() {
        if (_unsafe != null) {
            return _unsafe;
        }

        try {
            return (_unsafe = Unsafe.getUnsafe());
        }
        catch (Throwable ignored) {
        }

        try {
            final Field instanceField = Unsafe.class.getDeclaredField("theUnsafe");
            instanceField.setAccessible(true);
            _unsafe = (Unsafe) instanceField.get(Unsafe.class);
        }
        catch (Throwable t) {
            throw new IllegalStateException(
                String.format(
                    "Could not load an instance of the %s class.",
                    Unsafe.class.getName()
                )
            );
        }

        return _unsafe;
    }
}
</code></pre>

<p><strong>Be warned</strong> that this code depends on JDK internals that could (in theory) change between releases or even be removed altogether.  It may not work at all on non-Oracle JDKs.</p>
