<p>If your method is supposed to be asynchronous then it cannot return the JSON result right now...</p>

<p>What you can do is provide a callback to your async task which will be called when result is available:</p>

<pre><code>    public class JSONmethod {
    static InputStream is = null;
    static String res = "";
    static JSONObject jArray = null;

    public static interface JSONCallback {
        public void onResult(JSONObject result);
    }

    public static void getJSONfromURL(final String url, final JSONCallback callback) {

        new AsyncTask&lt;String, Void, JSONObject&gt;() {

            @Override
            protected JSONObject doInBackground(String... params) {

                try {
                    HttpClient httpclient = new DefaultHttpClient();
                    HttpPost httppost = new HttpPost(url);
                    HttpResponse response = httpclient.execute(httppost);
                    HttpEntity entity = response.getEntity();
                    is = entity.getContent();

                } catch (Exception e) {
                    Log.e("log_tag",
                            "Error in http connection " + e.toString());
                }

                try {
                    BufferedReader reader = new BufferedReader(
                            new InputStreamReader(is, "iso-8859-1"), 8);
                    StringBuilder sb = new StringBuilder();
                    String line = null;
                    while ((line = reader.readLine()) != null) {
                        sb.append(line + "\n");
                    }
                    is.close();
                    res = sb.toString();
                } catch (Exception e) {
                    Log.e("log_tag",
                            "Error converting result " + e.toString());
                }
                Log.i("Result BG ", res);
                try {

                    jArray = new JSONObject(res);
                } catch (JSONException e) {
                    Log.e("log_tag", "Error parsing data " + e.toString());
                }

                callback.onResult(jArray);

                return jArray; // at this point the JSONOBJECT has been
                                // fetched

            }

        }.execute();
    }
}
</code></pre>

<p>And you would use it like that:</p>

<pre><code>    JSONmethod.getJSONfromURL(url, new JSONCallback() {

        @Override
        public void onResult(JSONObject result) {
            // Do whatever you want with the result
        }
    });
</code></pre>
