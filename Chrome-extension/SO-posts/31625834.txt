<p>I've been searching for a solution myself and eventually came out with a good compromise in my opinion.</p>

<p>As soon as my query is finished, I store in an <code>HashMap&lt;String, String&gt; contact_map</code> my values as</p>

<pre><code>int SENDER_ADDRESS = cursor.getColumnIndex(Telephony.TextBasedSmsColumns.ADDRESS);

while (cursor.moveToNext()) {
                contact_map.put(
                        cursor.getString(SENDER_ADDRESS),
                        getContactName(getApplicationContext(), cursor.getString(SENDER_ADDRESS))
                );
            }
</code></pre>

<p>Method getContactName:</p>

<pre><code>public static String getContactName(Context context, String phoneNumber) {
    ContentResolver cr = context.getContentResolver();
    Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(phoneNumber));
    Cursor cursor = cr.query(uri, new String[]{ContactsContract.PhoneLookup.DISPLAY_NAME}, null, null, null);
    if (cursor == null) {
        return null;
    }
    String contactName = null;
    if(cursor.moveToFirst()) {
        contactName = cursor.getString(cursor.getColumnIndex(ContactsContract.PhoneLookup.DISPLAY_NAME));
    }

    if(cursor != null &amp;&amp; !cursor.isClosed()) {
        cursor.close();
    }

    if (contactName != null) {
        return contactName;
    } else {
        return phoneNumber;
    }

}
</code></pre>

<p>EDIT:
I then get the contact name with</p>

<pre><code>String name = contact_map.get(cursor.getString(SENDER_ADDRESS));
</code></pre>

<p>Hope it helps!</p>
