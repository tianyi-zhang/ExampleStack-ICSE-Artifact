<p>man, your code lacks the relation between the check box and the object and also you didn't implement <code>onCheckedchangeListener</code> inside your adapter .... 
here is what you need <a href="http://www.vogella.de/articles/AndroidListView/article.html#listadvanced_interactive" rel="nofollow">http://www.vogella.de/articles/AndroidListView/article.html#listadvanced_interactive</a>
Or <strong>I'll wrap it for you</strong>:</p>

<ol>
<li><p>you'll need to create a class model.java which represents the cell of the list as follows:</p>

<pre><code>public class Model {
     private String title;
     private String body;
     private boolean isSelected;

     public Model(String title, String body) {
          this.title = title;
          this.body = body;
          this.isSelected = false;
     }

     // here you MUST create your set of setters and getters.
}
</code></pre></li>
<li><p>modify your adapter to extend <code>ArrayAdapter&lt;Model&gt;</code></p></li>
<li><p>modify the constructor of the adapter to be </p>

<pre><code>private Model[] model;
public EfficientAdapter(Context context, Model model) {

     mInflater = LayoutInflater.from(context);
     this.model = model;

}
</code></pre></li>
<li><p>then you'll need to add the <code>onCheckedChangeListener</code> inside your adapter inside the <code>getView</code> method , so your <code>getView</code> method will look like this:</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    View view = null;
    if (convertView == null) {
        LayoutInflater inflator = context.getLayoutInflater();

        final ViewHolder viewHolder = new ViewHolder();
        viewHolder.text1 = (TextView) convertView.findViewById(R.id.title);
        viewHolder.text2 = (TextView) convertView.findViewById(R.id.body);
        viewHolder.checkBox = (CheckBox) convertView.findViewById(R.id.checkbox);
        viewHolder.checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {

            @Override
            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {

                Model element = (Model) viewHolder.checkbox.getTag();

                element.setSelected(buttonView.isChecked());
            }
        });
        view.setTag(viewHolder);
        viewHolder.checkbox.setTag(list[position]);
    } else {
        view = convertView;
        ((ViewHolder) view.getTag()).checkbox.setTag(list[position]);
    }

    ViewHolder holder = (ViewHolder) view.getTag();
    holder.text1.setText(tempTitle[position]);
    holder.text2.setText(tempBody[position]);
    return view;
}
</code></pre></li>
<li><p>then create the model array inside your activity and pass it to the adapter.</p></li>
<li><p>the last thing to be done is to delete the selected items from the list:</p>

<pre><code>final ArrayList&lt;Model&gt; newModel = new ArrayList&lt;Model&gt;();

for (int i = 0; i &lt; model.length/*this is the original model*/; i++) {

    if(model[i].isChecked()){

        // fill the array list ...
        newModel.add(model[i]);
    }
}
</code></pre></li>
<li><p>that's it, pass the newModel to the adapter and rest the adapter to the list.</p></li>
</ol>

<p>step number 7 can be performed also by filling the model(the original one which is passed originally to the array) and then call <code>notifyDataSetChanged()</code> using the adapter.</p>

<p>that's all and that's what always worked for me... hope this helps you too.</p>
