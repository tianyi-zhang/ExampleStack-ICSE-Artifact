<p>Here's a simple method to unescape XML.  It handles the predefined XML entities and decimal numerical entities (&amp;#nnnn;).  Modifying it to handle hex entities (&amp;#xhhhh;) should be simple.</p>

<pre><code>public static String unescapeXML( final String xml )
{
    Pattern xmlEntityRegex = Pattern.compile( "&amp;(#?)([^;]+);" );
    //Unfortunately, Matcher requires a StringBuffer instead of a StringBuilder
    StringBuffer unescapedOutput = new StringBuffer( xml.length() );

    Matcher m = xmlEntityRegex.matcher( xml );
    Map&lt;String,String&gt; builtinEntities = null;
    String entity;
    String hashmark;
    String ent;
    int code;
    while ( m.find() ) {
        ent = m.group(2);
        hashmark = m.group(1);
        if ( (hashmark != null) &amp;&amp; (hashmark.length() &gt; 0) ) {
            code = Integer.parseInt( ent );
            entity = Character.toString( (char) code );
        } else {
            //must be a non-numerical entity
            if ( builtinEntities == null ) {
                builtinEntities = buildBuiltinXMLEntityMap();
            }
            entity = builtinEntities.get( ent );
            if ( entity == null ) {
                //not a known entity - ignore it
                entity = "&amp;" + ent + ';';
            }
        }
        m.appendReplacement( unescapedOutput, entity );
    }
    m.appendTail( unescapedOutput );

    return unescapedOutput.toString();
}

private static Map&lt;String,String&gt; buildBuiltinXMLEntityMap()
{
    Map&lt;String,String&gt; entities = new HashMap&lt;String,String&gt;(10);
    entities.put( "lt", "&lt;" );
    entities.put( "gt", "&gt;" );
    entities.put( "amp", "&amp;" );
    entities.put( "apos", "'" );
    entities.put( "quot", "\"" );
    return entities;
}
</code></pre>
