<p>The problem is that your equals implementation is false.</p>

<p>Consider this :</p>

<pre><code>Person p4 = new Person("Naveen", 21, 2000);
System.out.println(p2.equals(p4));
</code></pre>

<p>It prints false, or it should print true.</p>

<p>Or <code>map.get(Object key)</code> need the equals method to check if the key is already store in the map.</p>

<blockquote>
  <p>More formally, if this map contains a mapping from a key k to a value
  v such that (key==null ? k==null : key.equals(k))</p>
</blockquote>

<p>What's your problem with your equals method ? </p>

<p>In your equals method, you should replace </p>

<pre><code>person.getSalary() == salary
</code></pre>

<p>By  <br/><br/>
    1. <code>person.getSalary().equals(salary)</code><br/>
    2. <code>person.getSalary().floatValue() == salary.floatValue()</code></p>

<p>Because <code>getSalary()</code> returns a <code>Float</code> object, so <code>==</code> will check their references and not their values.</p>

<p>There is no need of a the <code>Float</code> wrapper class, you should use <code>float salary;</code> or <code>double salary;</code> (if you want more precision).</p>

<p>You can use the equals implementations generated by Eclipse :</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    Person other = (Person) obj;
    if (id != other.id)
        return false;
    if (name == null) {
        if (other.name != null)
            return false;
    } else if (!name.equals(other.name))
        return false;
    if (salary == null) {
        if (other.salary != null)
            return false;
    } else if (!salary.equals(other.salary))
        return false;
    return true;
}
</code></pre>

<p><br/></p>

<pre><code>System.out.println(map.get(new Person("Naveen", 21, 2000)));
</code></pre>

<p>prints </p>

<pre><code>Name :Naveen, id : 21
</code></pre>
