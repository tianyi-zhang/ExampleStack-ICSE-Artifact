<p>You need to create your own <strong>ArrayAdapter</strong>:</p>

<pre><code>private class YourAdapter extends ArrayAdapter&lt;String&gt; {
   // do some work
}
</code></pre>

<p>Then you should specify how will look your row with XML, exactly for your goal, i recommend to you use RelativeLayout and it can looks like this:</p>

<p><strong>row.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"&gt;

    &lt;TextView 
        android:id="@+id/name"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        /&gt;

    &lt;TextView 
        android:id="@+id/email"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:layout_below="@id/name"
        /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>So then in <strong>YourAdapter</strong> you have to set super constuctor:</p>

<pre><code>public YourAdapter() {
   super(YourActivity.this, R.layout.row, data);
}
</code></pre>

<p>Then for customize your data in <code>ListView</code> + more effective implementation i recommend to you override <code>getView()</code> method and also use <code>Holder design pattern</code>.</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {         
   ViewHolder holder = null;
   LayoutInflater inflater = getLayoutInflater();
      if (convertView == null) {
         convertView = inflater.inflate(R.layout.row, null, false);
         holder = new ViewHolder(convertView);
         convertView.setTag(holder);
      }
      else {
         holder = (ViewHolder) convertView.getTag();
      }     
      holder.getUpperText().setText(dataSource[position]);
      holder.getLowerText().setText(dataSource[position]);

   return convertView;  
}
</code></pre>

<p>Finally just initialize <code>ListView</code> and set <code>Adapter</code>:</p>

<pre><code>ListView list = (ListView) findViewById(R.id.list);
list.setAdapter(new YourAdapter());
</code></pre>

<p><br><strong>Note:</strong> <code>Design pattern Holder</code> represents arbitrary object that holds child widgets of each row, so you need to find them only once and then with <code>Holder</code> object you will always have access to them.</p>

<p>Implementation of <code>Holder</code> can looks like this:</p>

<pre><code>public class ViewHolder {
   private View row;
   private TextView upperText = null, lowerText = null;

   public ViewHolder(View row) {
      this.row = row;
   }

   public TextView getUpperText() {
      if (this.upperText == null) {
         this.upperText = (TextView) inView.findViewById(R.id.someId);
      }
      return this.upperText;
   }

   public TextView getLowerText() {
      if (this.lowerText == null) {
         this.lowerText = (TextView) inView.findViewById(R.id.someId);
      }
      return this.lowerText;
   }
}
</code></pre>

<p><br>Hope it helps.</p>
