<p>Thank you Giolekva!</p>

<p>I rewrote it, refactoring some:</p>

<ul>
<li>The collection of visited nodes doesn't have to be a map.</li>
<li>For path reconstruction, the next node could be looked up, instead of the previous node, eliminating the need for reversing the directions.</li>
</ul>

<pre><code>public List&lt;Node&gt; getDirections(Node sourceNode, Node destinationNode) {
    //Initialization.
    Map&lt;Node, Node&gt; nextNodeMap = new HashMap&lt;Node, Node&gt;();
    Node currentNode = sourceNode;

    //Queue
    Queue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;();
    queue.add(currentNode);

    /*
     * The set of visited nodes doesn't have to be a Map, and, since order
     * is not important, an ordered collection is not needed. HashSet is 
     * fast for add and lookup, if configured properly.
     */
    Set&lt;Node&gt; visitedNodes = new HashSet&lt;Node&gt;();
    visitedNodes.add(currentNode);

    //Search.
    while (!queue.isEmpty()) {
        currentNode = queue.remove();
        if (currentNode.equals(destinationNode)) {
            break;
        } else {
            for (Node nextNode : getChildNodes(currentNode)) {
                if (!visitedNodes.contains(nextNode)) {
                    queue.add(nextNode);
                    visitedNodes.add(nextNode);

                    //Look up of next node instead of previous.
                    nextNodeMap.put(currentNode, nextNode);
                }
            }
        }
    }

    //If all nodes are explored and the destination node hasn't been found.
    if (!currentNode.equals(destinationNode)) {
        throw new RuntimeException("No feasible path.");
    }

    //Reconstruct path. No need to reverse.
    List&lt;Node&gt; directions = new LinkedList&lt;Node&gt;();
    for (Node node = sourceNode; node != null; node = nextNodeMap.get(node)) {
        directions.add(node);
    }

    return directions;
}
</code></pre>
