<p>I May not be fully correct, But the parsers are to be blamed.I implemented a <code>Java parser 1.5</code> which basically calls a <code>compilationUnit()</code>.This gets started by getting the stream of the source .</p>

<p>The stream is tokenised (creates tokens -keywords,variables..all smaller parts).It may then make several calls- EG if the Java program has to start with a keyword, it may then look for a access specifier then.After that, the parser need to have the keyword "class".It the find other possibilities after the key word. EG. I may write <code>public class{}</code> or <code>public int i;</code>.If it gets the correct keyword, parsing continues else a <code>ParseException</code> is thrown.</p>

<p>For instance I made a small change in the Parser:</p>

<pre><code>private Token jj_consume_token(int kind) throws ParseException {   
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc &gt; 100) {
                jj_gc = 0;
                for (int i = 0; i &lt; jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen &lt; jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }

            return token;
        }

        jj_kind = kind;
        throw generateParseException();

        } 
    }
</code></pre>

<p>To:</p>

<pre><code>private Token jj_consume_token(int kind) throws ParseException {

        try{
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc &gt; 100) {
                jj_gc = 0;
                for (int i = 0; i &lt; jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen &lt; jj_gen) {
                            c.first = null;
                        }
                        c = c.next;
                    }
                }
            }

            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
           } catch (ParseException ex) {
            recover(ex,SEMICOLON);
            return token;
        } 
    }
</code></pre>

<p>Recovery block looks like:</p>

<pre><code>void recover(ParseException ex, int recoveryPoint) {
        syntaxErrors.add(ex);
        Token t;
        do {
            t = getNextToken();
        } while (t.kind != EOF &amp;&amp; t.kind != recoveryPoint);
    }
</code></pre>

<p>So what I just did? I recovered the exception thrown by the parser even if there is no method or just statements.EG</p>

<pre><code>class A{
Date d;
System.out.print("No exception");
}
</code></pre>

<p>I don't get error now.I made changes.So, if you want your parser to report an Exception in such cases, you can implement your parser :) hope you get it now.</p>
