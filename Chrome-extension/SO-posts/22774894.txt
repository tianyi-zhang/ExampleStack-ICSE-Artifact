<p>You have one error that jump out at me. Note that if you have a syntax error, most compilers will freak out and mark everything past the actual error as errors. The best way to debug accidental syntax errors is to look at the first error :)</p>

<pre><code>boolean = b1, b2;
</code></pre>

<p>Makes no sense. a variable declaration is as follows</p>

<pre><code>[Type] [Variable Name] | ,[Additional Vars];
</code></pre>

<p>so it should be <code>boolean b1, b2;</code></p>

<pre><code>private String decode(char c) {

 switch (c) {

    case 'A': case 'B': case 'C': return "2";

    case 'D': case 'E': case 'F': return "3";

    case 'G': case 'H': case 'I': return "4";

    case 'J': case 'K': case 'L': return "5";

    case 'M': case 'N': case 'O': return "6";

    case 'P': case 'Q': case 'R': case 'S': return "7";

    case 'T': case 'U': case 'V': return "8";

    case 'W': case 'X': case 'Y': case 'z': return "9";

    default: return "";

    }

}
</code></pre>

<p>I suggest you use a lookup table(hashmap) to do this set of code, it looks much less ugly and is easier on sore eyes.</p>

<p>An example of that would be </p>

<pre><code>private static final Map&lt;Char, String&gt; myDecodeLookup = new Hashmap&lt;Char,String&gt;();

static{ //initializer block
    myDecodeLookup.put('A', "2");
    myDecodeLookup.put('B', "2");
    //and so and and so forth
}

private String decode(char c) throws KeyNotFoundException{
   return MyClassName.myDecodeLookup.get(c); //you should code this to support the keynotfoundexception that this might throw, or not.
}
</code></pre>

<p>If you ever find yourself debugging a <strong>syntax error</strong> for 5 hours, you should probably take a step back and look up the syntax of the language constructs themselves... that's good advice to take going forward.</p>
