<p>Path to sdcard is:</p>

<pre><code>android.os.Environment.getExternalStorageDirectory().getPath()
</code></pre>

<p>To write a file, you can use the regular java.io.File methods for that.</p>

<p>For example, for creating a text files I use a helper method like this:</p>

<pre><code> /**
  * Stores text content into a file
  * @param filename Path to the output file
  * @param content Content to be stored in file
  * @throws IOException
  */
 public void storeFile(final String filename, final String content, String charSet)
 throws IOException {
     if (charSet==null) charSet = "utf-8";
     Writer w = new OutputStreamWriter( new FileOutputStream(filename), charSet );
     w.write(content);
     w.flush();
     w.close();
 }

 public void storeFile(final String filename, final String content)
 throws IOException {
     storeFile(filename, content, null);
 }
</code></pre>

<p>or copying a file to sdcard:</p>

<pre><code>public static final void copyfile(String srFile, String dtFile){
    try{
        File f1 = new File(srFile);
        File f2 = new File(dtFile);
        InputStream in = new FileInputStream(f1);
        OutputStream out = new FileOutputStream(f2);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) &gt; 0){
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        System.out.println("File copied to " + f2.getAbsolutePath());
    } catch(FileNotFoundException ex){
        System.out.println(ex.getMessage() + " in the specified directory.");
        System.exit(0);
    } catch(IOException e){
        System.out.println(e.getMessage());
    }
}
</code></pre>
