<p>What you try to do is to block main UI Thread till get response from click on <code>OK</code>.
Not good idea.</p>

<p>You can find some conversation in <a href="https://groups.google.com/forum/#!topic/android-developers/-PGsJYMa3PU" rel="nofollow">Google groups</a> about that issue, but solution they suggest is too complicated for your goal (your choice).</p>

<p>Anyways I would create Handler that should take care about button click, like:</p>

<pre><code>protected static final int DIALOG_CLICKED = 1;

private Handler mHandler = new Handler() {
    @Override
    public void handleMessage(Message msg) {
        String txt;
        switch (msg.what) {
        case DIALOG_CLICKED:
            Boolean bool = Boolean.parseBoolean(msg.obj.toString());
            // When user press on "OK",
            // your braking point goes here
            break;
        default:
            super.handleMessage(msg);
        }
    }
};
</code></pre>

<p>After modify <code>performchecks</code>:</p>

<pre><code>private void performchecks() {

        AlertDialog.Builder builder = new AlertDialog.Builder(
                this);
        builder.setTitle(R.string.remindernotsettitle);
        builder.setMessage(R.string.remindernotmessage)
        .setPositiveButton(R.string.yes,
                new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog,
                    int id) {

                mHandler.sendMessage(mHandler.obtainMessage(DIALOG_CLICKED, true)); 
            }
        });
        builder.setNegativeButton(R.string.no,
                new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog,
                    int id) {
                mHandler.sendMessage(mHandler.obtainMessage(DIALOG_CLICKED, false)); 
            }
        });

        builder.create().show();           
}
</code></pre>
