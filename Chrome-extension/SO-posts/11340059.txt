<p>Here is the code I use to implement pinch zoom in an <code>ImageView</code> using <code>ScaleGestureDetector</code>. With little or no modification you should be able to use it too, since you can use transformation marices too, to draw on a <code>Canvas</code>.</p>

<pre><code>@Override
public boolean onScale(ScaleGestureDetector detector) {
    float mScaleFactor = (float) Math.min(
        Math.max(.8f, detector.getScaleFactor()), 1.2);
    float origScale = saveScale;
    saveScale *= mScaleFactor;
    if (saveScale &gt; maxScale) {
        saveScale = maxScale;
        mScaleFactor = maxScale / origScale;
    } else if (saveScale &lt; minScale) {
        saveScale = minScale;
        mScaleFactor = minScale / origScale;
    }
    right = width * saveScale - width
            - (2 * redundantXSpace * saveScale);
    bottom = height * saveScale - height
            - (2 * redundantYSpace * saveScale);
    if (origWidth * saveScale &lt;= width
            || origHeight * saveScale &lt;= height) {
        matrix.postScale(mScaleFactor, mScaleFactor, width / 2, height / 2);
        if (mScaleFactor &lt; 1) {
            matrix.getValues(m);
            float x = m[Matrix.MTRANS_X];
            float y = m[Matrix.MTRANS_Y];
            if (mScaleFactor &lt; 1) {
                if (Math.round(origWidth * saveScale) &lt; width) {
                    if (y &lt; -bottom)
                        matrix.postTranslate(0, -(y + bottom));
                    else if (y &gt; 0)
                        matrix.postTranslate(0, -y);
                } else {
                    if (x &lt; -right)
                        matrix.postTranslate(-(x + right), 0);
                    else if (x &gt; 0)
                        matrix.postTranslate(-x, 0);
                }
            }
        }
    } else {
        matrix.postScale(mScaleFactor, mScaleFactor, detector.getFocusX(), detector.getFocusY());
        matrix.getValues(m);
        float x = m[Matrix.MTRANS_X];
        float y = m[Matrix.MTRANS_Y];
        if (mScaleFactor &lt; 1) {
            if (x &lt; -right)
                matrix.postTranslate(-(x + right), 0);
            else if (x &gt; 0)
                matrix.postTranslate(-x, 0);
            if (y &lt; -bottom)
                matrix.postTranslate(0, -(y + bottom));
            else if (y &gt; 0)
                matrix.postTranslate(0, -y);
        }
    }
    return true;
}
</code></pre>

<p>In my case, I computed the neccesary values in the <code>onMeasure()</code> method of the View, you might want to do this somewhere else in your <code>SurfaceView</code></p>

<pre><code>width = MeasureSpec.getSize(widthMeasureSpec); // Change this according to your screen size
height = MeasureSpec.getSize(heightMeasureSpec); // Change this according to your screen size

// Fit to screen.
float scale;
float scaleX = (float) width / (float) bmWidth;
float scaleY = (float) height / (float) bmHeight;
scale = Math.min(scaleX, scaleY);
matrix.setScale(scale, scale);
setImageMatrix(matrix);
saveScale = 1f;
scaleMappingRatio = saveScale / scale;

// Center the image
redundantYSpace = (float) height - (scale * (float) bmHeight);
redundantXSpace = (float) width - (scale * (float) bmWidth);
redundantYSpace /= (float) 2;
redundantXSpace /= (float) 2;

matrix.postTranslate(redundantXSpace, redundantYSpace);

origWidth = width - 2 * redundantXSpace;
origHeight = height - 2 * redundantYSpace;
right = width * saveScale - width - (2 * redundantXSpace * saveScale);
bottom = height * saveScale - height - (2 * redundantYSpace * saveScale);
setImageMatrix(matrix);
</code></pre>

<p>A little explanation:</p>

<p><code>saveScale</code> is the current scale ratio of the <code>Bitmap</code></p>

<p><code>mScaleFactor</code> is the factor you have to multiply your scale ratio with.</p>

<p><code>maxScale</code> and <code>minScale</code> can be constant values.</p>

<p><code>width</code> and <code>height</code> are the dimensions of the screen.</p>

<p><code>redundantXSpace</code> and <code>redundantYSpace</code> are the empty between the image borders and screen borders since the image is centered when in it is smaller then the screen</p>

<p><code>origHeight</code> and <code>origWidth</code> are the sizes of the bitmap</p>

<p><code>matrix</code> is the current transformation matrix used to draw the bitmap</p>

<p>The trick is, that when I first scaled and centered the image on initialization, I picked that scale ratio to be 1 and with <code>scaleMappingRatio</code> I mapped the actual scale values of the image relative to that.</p>
