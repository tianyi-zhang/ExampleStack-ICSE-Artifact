<p>You should use a custom LayoutManager - which measures its children (either <strong>LinearLayoutManager</strong> or <strong>GridLayoutManager</strong>):</p>

<pre><code>public class CustomLayoutManager extends GridLayoutManager {
private static final String TAG = CustomLayoutManager.class.getCanonicalName();
// Number of columns to show in the grid
private static final int SPAN_COUNT = 2;

public CustomLayoutManager(final Context context) {
    super(context, SPAN_COUNT);
}

private final int[] mMeasuredDimension = new int[2];

@Override
public void onMeasure(final RecyclerView.Recycler recycler, final RecyclerView.State state,
                      final int widthSpec, final int heightSpec) {

    final int widthMode = View.MeasureSpec.getMode(widthSpec);
    final int heightMode = View.MeasureSpec.getMode(heightSpec);
    final int widthSize = View.MeasureSpec.getSize(widthSpec);
    final int heightSize = View.MeasureSpec.getSize(heightSpec);

    int width = 0;
    int height = 0;
    for (int i = 0; i &lt; getItemCount(); i++) {
        measureScrapChild(recycler, View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.
                        UNSPECIFIED),
                View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
                mMeasuredDimension);


        if (getOrientation() == HORIZONTAL) {
            width = width + mMeasuredDimension[0];
            if (i == 0) {
                height = mMeasuredDimension[1];
            }
        } else {
            height = height + mMeasuredDimension[1];
            if (i == 0) {
                width = mMeasuredDimension[0];
            }
        }
    }
    switch (widthMode) {
        case View.MeasureSpec.EXACTLY:
            width = widthSize;
        case View.MeasureSpec.AT_MOST:
        case View.MeasureSpec.UNSPECIFIED:
    }

    switch (heightMode) {
        case View.MeasureSpec.EXACTLY:
            height = heightSize;
        case View.MeasureSpec.AT_MOST:
        case View.MeasureSpec.UNSPECIFIED:
    }

    setMeasuredDimension(width, height);
}

private void measureScrapChild(final RecyclerView.Recycler recycler, final int widthSpec,
                               final int heightSpec, final int[] measuredDimension) {
    try {
        View view = recycler.getViewForPosition(0);

        if (view != null) {
            RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();

            int childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,
                    getPaddingLeft() + getPaddingRight(), p.width);

            int childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,
                    getPaddingTop() + getPaddingBottom(), p.height);

            view.measure(childWidthSpec, childHeightSpec);
            measuredDimension[0] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;
            measuredDimension[1] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;
            recycler.recycleView(view);
        }
    } catch (Exception e) {
        Log.e(TAG, e.getMessage());
    }
}}
</code></pre>
