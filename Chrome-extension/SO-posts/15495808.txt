<p>I solved my problem in a messy way through interface. So, I changed adapter to something like this (interface and a new method added)</p>

<pre><code>public class MyMessagesAdapter extends BaseAdapter {

    public interface OnViewButtonClickedListener {
        public void OnPerson(String id);
    }

    private static final String TAG = "*** MyMessagesAdapter ***";
    private static final String[] TEMP_ITEMS = {"Person 1", "Person 2", "Person 3", "Person 4", "Person 5", "Person 6"};
    private static final String TEMP_DESCRIPTION = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book.";

    private LayoutInflater myInflater;
    private ImageDownloader imageDownloader;
    private OnViewButtonClickedListener listener;

    public MyMessagesAdapter(Context context) {
        myInflater = LayoutInflater.from(context);

        imageDownloader = ImageDownloader.getInstance(context);
    }

    @Override
    public int getCount() {
        return TEMP_ITEMS.length;
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        ViewHolder holder;

        if (convertView == null) {
            convertView = myInflater.inflate(R.layout.list_my_messages_row, null);
            holder = new ViewHolder();

            holder.tvUserName = (TextView) convertView.findViewById(R.id.tvUserName);
            holder.tvDescription = (TextView) convertView.findViewById(R.id.tvDescription);
            holder.ivPicture = (ImageView) convertView.findViewById(R.id.ivPicture);
            holder.btnView = (Button) convertView.findViewById(R.id.btnView);
            holder.btnView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    listener.OnPerson("" + position);
                }
            });

            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }

        holder.tvUserName.setText(TEMP_ITEMS[position]);
        holder.tvDescription.setText(TEMP_DESCRIPTION);
        imageDownloader.displayImage(holder.ivPicture, "");

        return convertView;
    }

    public void setOnViewButtonClickedListener(OnViewButtonClickedListener listener) {
        this.listener = listener;
    }

    static class ViewHolder {
        TextView tvUserName;
        TextView tvDescription;
        ImageView ivPicture;
        Button btnView;
    }
}
</code></pre>

<p>Then i implement it in fragmentA like this.</p>

<pre><code> @Override
public void onActivityCreated(Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);

    // Setup adapter in order to be assigned to list view later
    adapter = new MyMessagesAdapter(context);
    adapter.setOnViewButtonClickedListener(new MyMessagesAdapter.OnViewButtonClickedListener() {
        @Override
        public void OnPerson(String id) {
            Toast.makeText(context, id, Toast.LENGTH_SHORT).show();
        }
    });

    // Assign adapter to list view
    listView.setAdapter(adapter);

    Log.i(TAG, "Fragment created");
}
</code></pre>

<p>So, I need to add another interface to this activity (like before) and implement it in FragmentActivity. Then FragmentActivity will replace FragmentA with FragmentB</p>

<p>Since this is not the nice way that I was looking for, please tell me your suggestion if you have better idea. Thanks</p>
