<p>Forgive me for being fastidious, but the solution suggested by the majority, i.e., <code>min + rng.nextInt(max - min + 1))</code>, seems perilous due to the fact that:</p>

<ul>
<li>rng.nextInt(n) cannot reach Integer.MAX_VALUE.</li>
<li>(max - min) may cause overflow when min is negative.</li>
</ul>

<p>A foolproof solution would return correct results for any min &lt;= max within [Integer.MIN_VALUE, Integer.MAX_VALUE]. Consider the following na√Øve implementation:</p>

<pre><code>int nextIntInRange(int min, int max, Random rng) {
   if (min &gt; max) {
      throw new IllegalArgumentException("Cannot draw random int from invalid range [" + min + ", " + max + "].");
   }
   int diff = max - min;
   if (diff &gt;= 0 &amp;&amp; diff != Integer.MAX_VALUE) {
      return (min + rng.nextInt(diff + 1));
   }
   int i;
   do {
      i = rng.nextInt();
   } while (i &lt; min || i &gt; max);
   return i;
}
</code></pre>

<p>Although inefficient, note that the probability of success in the while-loop will always be 50% or higher.</p>
