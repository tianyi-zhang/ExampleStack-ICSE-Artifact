<p>Maybe you could to do your own customAuthenticationProvider:</p>

<p>Xml configuration</p>

<pre><code>&lt;authentication-manager alias="authenticationManager"&gt;  
&lt;authentication-provider ref="customAuthenticationProvider" /&gt;
&lt;/authentication-manager&gt;
</code></pre>

<p>Java code</p>

<pre><code>@Component
public class CustomAuthenticationProvider implements AuthenticationProvider {

    private static final String CREDENCIALES_INCORRECTAS = "Username o password incorrectos";

    private static final String CUENTA_IS_NOT_ENABLED = "La cuenta de usuario no ha sido activada.";

    @Autowired
    private UsersService usersService;

    @Autowired
    private PasswordEncoderSha256 passwordEncoder;

    @Override
    public Authentication authenticate(Authentication authentication)
            throws AuthenticationException {
        String username = authentication.getName();
        String password = (String) authentication.getCredentials();

                //Find by username or email
        User user = usersService.findUserForAuthentication(username);

        if (user == null) {
            throw new BadCredentialsException(CREDENCIALES_INCORRECTAS);
        }

        if (!user.isEnabled()) {
            throw new BadCredentialsException(CUENTA_IS_NOT_ENABLED);
        }
        password = passwordEncoder.encodeSha256Password(password);

        if (!password.equals(user.getPassword())) {
            throw new BadCredentialsException(CREDENCIALES_INCORRECTAS);
        }

        Collection&lt;? extends GrantedAuthority&gt; authorities = user
                .getAuthorities();

        return new UsernamePasswordAuthenticationToken(user.getUsername(),
                password, authorities);
    }

    @Override
    public boolean supports(Class&lt;?&gt; arg0) {
        return true;
    }

}
</code></pre>
