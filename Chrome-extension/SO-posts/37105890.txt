<p>But those devices are already paired, or am I getting it wrong.</p>

<p>Here is a class which is responsible for connecting and then for pairing devices.</p>

<pre><code>public class DeviceListActivity extends Activity {

    ArrayList&lt;BluetoothDevice&gt; arrayListPairedBluetoothDevices;
    ArrayList&lt;String&gt; arrayListpaired;
    ArrayAdapter&lt;String&gt; adapter,detectedAdapter;
    BluetoothDevice bdDevice;
    ArrayList&lt;BluetoothDevice&gt; arrayListBluetoothDevices = null;
    ListItemClicked listItemClicked;
    ListView newDevicesListView;


    private static final String TAG = "DeviceListActivity";
    //making btAdapter and ArrayAdapter
    private BluetoothAdapter mBtAdapter;
    private ArrayAdapter&lt;String&gt; mNewDevicesArrayAdapter;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_device_list);

        mBtAdapter = BluetoothAdapter.getDefaultAdapter();

        // onclicklistener for discovering devices
        Button scanButton = (Button) findViewById(R.id.scan);
        scanButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                doDiscovery();
                v.setVisibility(View.GONE);
            }
        });


        // FOR DISCOVERY

        mNewDevicesArrayAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_single_choice);
        // Find and set up the ListView for newly discovered devices
        newDevicesListView = (ListView) findViewById(R.id.new_devices);
        newDevicesListView.setAdapter(mNewDevicesArrayAdapter);
        /////////////////newDevicesListView.setOnItemClickListener(mDeviceClickListener);
        // Register for broadcasts when a device is discovered
        IntentFilter filter = new IntentFilter(BluetoothDevice.ACTION_FOUND);
        DeviceListActivity.this.registerReceiver(mReceiver, filter);
        // Register for broadcasts when discovery has finished
        filter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
        DeviceListActivity.this.registerReceiver(mReceiver, filter);

        // FOR PAIRED
        ArrayAdapter&lt;String&gt; pairedDevicesArrayAdapter = new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_1);
        ListView pairedListView = (ListView) findViewById(R.id.paired_devices);
        pairedListView.setAdapter(pairedDevicesArrayAdapter);
        ////////////////////////pairedListView.setOnItemClickListener(mDeviceClickListener);
        Set&lt;BluetoothDevice&gt; pairedDevices = mBtAdapter.getBondedDevices();

        // If there are paired devices, add each one to the ArrayAdapter
        if (pairedDevices.size() &gt; 0) {
            findViewById(R.id.title_paired_devices).setVisibility(View.VISIBLE);
            for (BluetoothDevice device : pairedDevices) {
                pairedDevicesArrayAdapter.add(device.getName() + "\n" + device.getAddress());
            }
        } else {
            String noDevices = getResources().getText(R.string.none_paired).toString();
            pairedDevicesArrayAdapter.add(noDevices);
        }





        arrayListPairedBluetoothDevices = new ArrayList&lt;BluetoothDevice&gt;();
        arrayListpaired = new ArrayList&lt;String&gt;();
        arrayListBluetoothDevices = new ArrayList&lt;BluetoothDevice&gt;();
        adapter= new ArrayAdapter&lt;String&gt;(DeviceListActivity.this, android.R.layout.simple_list_item_1, arrayListpaired);
        listItemClicked = new ListItemClicked();


    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // Unregister broadcast listeners
        this.unregisterReceiver(mReceiver);
    }


    private void doDiscovery() {
        Log.d(TAG, "doDiscovery()");

        // Indicate scanning in the title
        setProgressBarIndeterminateVisibility(true);
        setTitle(R.string.scanning);

        // Turn on sub-title for new devices
        findViewById(R.id.title_new_devices).setVisibility(View.VISIBLE);

        // Request discover from BluetoothAdapter
        mBtAdapter.startDiscovery();
    }

    private final BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();

            // When discovery finds a device
            if (BluetoothDevice.ACTION_FOUND.equals(action)) {
                // Get the BluetoothDevice object from the Intent
                BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                // If it's already paired, skip it, because it's been listed already
                if (device.getBondState() != BluetoothDevice.BOND_BONDED) {
                    mNewDevicesArrayAdapter.add(device.getName() + "\n" + device.getAddress());
                    arrayListBluetoothDevices.add(device);
                    mNewDevicesArrayAdapter.notifyDataSetChanged();
                }
                if(arrayListBluetoothDevices.size()&lt;1) // this checks if the size of bluetooth device is 0,then add the
                {                                           // device to the arraylist.
                    arrayListBluetoothDevices.add(device);
                    mNewDevicesArrayAdapter.notifyDataSetChanged();
                }

                // When discovery is finished, change the Activity title
            }



            else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {
                setProgressBarIndeterminateVisibility(false);
                setTitle(R.string.select_device);
                if (mNewDevicesArrayAdapter.getCount() == 0) {
                    String noDevices = getResources().getText(R.string.none_found).toString();
                    mNewDevicesArrayAdapter.add(noDevices);
                }
            }
        }
    };

    class ListItemClicked implements AdapterView.OnItemClickListener
    {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
            // TODO Auto-generated method stub
            bdDevice = arrayListBluetoothDevices.get(position);
            //bdClass = arrayListBluetoothDevices.get(position);
            Log.i("Log", "The dvice : "+bdDevice.toString());
            /*
             * here below we can do pairing without calling the callthread(), we can directly call the
             * connect(). but for the safer side we must usethe threading object.
             */
            //callThread();
            //connect(bdDevice);
            Boolean isBonded = false;
            try {
                isBonded = createBond(bdDevice);
                if(isBonded)
                {
                    //arrayListpaired.add(bdDevice.getName()+"\n"+bdDevice.getAddress());
                    //adapter.notifyDataSetChanged();
                    getPairedDevices();
                    adapter.notifyDataSetChanged();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }//connect(bdDevice);
            Log.i("Log", "The bond is created: "+isBonded);
        }
    }


    public boolean createBond(BluetoothDevice btDevice)
            throws Exception
    {
        Class class1 = Class.forName("android.bluetooth.BluetoothDevice");
        Method createBondMethod = class1.getMethod("createBond");
        Boolean returnValue = (Boolean) createBondMethod.invoke(btDevice);
        return returnValue.booleanValue();
    }


    private void getPairedDevices() {
        Set&lt;BluetoothDevice&gt; pairedDevice = mBtAdapter.getBondedDevices();
        if(pairedDevice.size()&gt;0)
        {
            for(BluetoothDevice device : pairedDevice)
            {
                arrayListpaired.add(device.getName()+"\n"+device.getAddress());
                arrayListPairedBluetoothDevices.add(device);
            }
        }
        adapter.notifyDataSetChanged();
    }

    @Override
    protected void onStart() {
        // TODO Auto-generated method stub
        super.onStart();
        getPairedDevices();
        newDevicesListView.setOnItemClickListener(listItemClicked);
    }

}
</code></pre>
