<p>I use the below code to achieve this effect</p>

<pre><code>public Bitmap applyReflection(Drawable drawable) {
    Bitmap originalImage = ((BitmapDrawable)drawable).getBitmap();
    final int reflectionGap = 4;
    int width = originalImage.getWidth();
    int height = originalImage.getHeight();           
    Matrix matrix = new Matrix();
    matrix.preScale(1, -1);
    Bitmap reflectionImage = Bitmap.createBitmap(originalImage, 0, height/2, width, height/2, matrix, false);          
    Bitmap bitmapWithReflection = Bitmap.createBitmap(width, (height + height/2), Config.ARGB_8888);
    Canvas canvas = new Canvas(bitmapWithReflection);
    canvas.drawBitmap(originalImage, 0, 0, null);
    Paint defaultPaint = new Paint();
    canvas.drawRect(0, height, width, height + reflectionGap, defaultPaint);
    canvas.drawBitmap(reflectionImage,0, height + reflectionGap, null);

    Paint paint = new Paint();
    LinearGradient shader = new LinearGradient(0, originalImage.getHeight(), 0,

            bitmapWithReflection.getHeight() + reflectionGap, 0x70ffffff, 0x00ffffff, TileMode.CLAMP);
    paint.setShader(shader);
    paint.setXfermode(new PorterDuffXfermode(Mode.DST_IN));
    canvas.drawRect(0, height, width, bitmapWithReflection.getHeight() + reflectionGap, paint);

    return bitmapWithReflection;
}
</code></pre>

<p>Let me know if you face any issues with the above code.</p>

<p>Credits : <a href="http://xjaphx.wordpress.com/learning/tutorials/" rel="nofollow">http://xjaphx.wordpress.com/learning/tutorials/</a></p>
