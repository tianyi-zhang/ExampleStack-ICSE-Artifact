<p>If you're just trying to rotate the JPEG images you receive from calling takePicture, then setRotation is the right method to use. </p>

<p>Is the question about what value to pass into setRotation? Assuming you want real-world 'up' to be 'up' in the saved JPEG image, setRotate needs to be set based on the current orientation of the camera sensor relative to the world.</p>

<p>You can find out what the relative orientation of the whole device to the world is, and you can find out what the orientation of the camera sensor is relative to the device's 'natural' orientation, and combine the two rotations into the final answer. The math is easy to get wrong, which is why we have it explicitly spelled out in the API documentation for <a href="http://developer.android.com/reference/android/hardware/Camera.Parameters.html#setRotation%28int%29" rel="nofollow">setRotation</a>, reproduced here:</p>

<pre><code>public void onOrientationChanged(int orientation) {
   if (orientation == ORIENTATION_UNKNOWNsetRotation) return;
   android.hardware.Camera.CameraInfo info =
        new android.hardware.Camera.CameraInfo();
   android.hardware.Camera.getCameraInfo(cameraId, info);
   orientation = (orientation + 45) / 90 * 90;
   int rotation = 0;
   if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {
     rotation = (info.orientation - orientation + 360) % 360;
   } else {  // back-facing camera
     rotation = (info.orientation + orientation) % 360;
   }
   mParameters.setRotation(rotation);
}
</code></pre>

<p>You'll need to inherit from <a href="http://developer.android.com/reference/android/view/OrientationEventListener.html" rel="nofollow">OrientationEventListener</a> and implement the above for the callback method. Of course, you should check that your camera is open, and that mParameters, etc, is valid before updating the parameters.</p>

<p>Please note that this only rotates the JPEGs that are sent out by the camera. If you see that your preview is not correctly oriented in your UI, you need to call <a href="http://developer.android.com/reference/android/hardware/Camera.html#setDisplayOrientation%28int%29" rel="nofollow">setDisplayOrientation</a> for that. The camera sensor is normally lined up with the landscape orientation of the device, so landscape camera apps can often get away without calling this function, even though they should in case they're on an unusual Android device. However, if you're writing a portrait app, it's likely mandatory you adjust the display orientation to align with your UI.  As with setRotation, you need to take a few factors into account, and sample code for doing the math right is included in the documentation.</p>
