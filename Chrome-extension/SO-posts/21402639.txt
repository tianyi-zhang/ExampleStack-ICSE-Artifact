<p>Here is a class that take care of the location logic : </p>

<pre><code>public class GPSManager extends Service implements android.location.LocationListener {

// LOG
protected static final String   TAG                             = GPSManager.class.getSimpleName();
// DATA
protected Context               mContext;
protected static GPSManager     mInstance;
// DISTANCE BEFORE UPDATE
protected static final long     MIN_DISTANCE_CHANGE_FOR_UPDATES = 0;                                // meters
// TIME BEFORE UPDATE IN MILLISECONDE
protected static final long     MIN_TIME_BW_UPDATES             = 1000 * 30 * 1;                    // minute
// LOCATION MANAGER
protected LocationManager       mLocationManager;
boolean                         mIsGPSEnabled                   = false;
boolean                         mIsNetworkEnabled               = false;
boolean                         mCanGetLocation                 = false;
public Location                 mLocation;
double                          mLatitude;
double                          mLongitude;

public GPSManager() {
    mContext = null;
}

public static GPSManager getInstance() {
    if (mInstance == null) {
        mInstance = new GPSManager();
    }
    return mInstance;
}

public void set_mContext(Context context) {
    this.mContext = context;
}

public Location get_mLocation(Context context) {
    mContext = context;
    try {
        mLocationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);
        mIsGPSEnabled = mLocationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
        mIsNetworkEnabled = mLocationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
        if (!mIsGPSEnabled &amp;&amp; !mIsNetworkEnabled) {
            // NO NETWORK PROVIDER ENABLED
        }
        else {
            this.mCanGetLocation = true;
            if (mIsNetworkEnabled) {
                mLocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                Log.d("Network", "Network");
                if (mLocationManager != null) {
                    mLocation = mLocationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    if (mLocation != null) {
                        mLatitude = mLocation.getLatitude();
                        mLongitude = mLocation.getLongitude();
                    }
                }
            }
            // if GPS Enabled get lat/long using GPS Services
            if (mIsGPSEnabled) {
                if (mLocation == null) {
                    mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.d("GPS Enabled", "GPS Enabled");
                    if (mLocationManager != null) {
                        mLocation = mLocationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                        if (mLocation != null) {
                            mLatitude = mLocation.getLatitude();
                            mLongitude = mLocation.getLongitude();
                        }
                    }
                }
            }
        }
    }
    catch (Exception e) {
        // DO NOTHING
    }
    return mLocation;
}

public void stopUsingGPS() {
    if (mLocationManager != null) {
        mLocationManager.removeUpdates(GPSManager.this);
    }
}

public double get_mLatitude() {
    if (mLocation != null) {
        mLatitude = mLocation.getLatitude();
    }
    return mLatitude;
}

public double get_mLongitude() {
    if (mLocation != null) {
        mLongitude = mLocation.getLongitude();
    }
    return mLongitude;
}

public boolean canGetLocation() {
    return this.mCanGetLocation;
}

/**
 * Function to show settings alert dialog On pressing Settings button will lauch Settings Options
 */
public void showSettingsAlert(String title, String msg) {
    AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);
    alertDialog.setTitle(title);
    alertDialog.setMessage(msg);
    // SETTING BUTTON
    alertDialog.setPositiveButton("Param√®tres", new DialogInterface.OnClickListener() {

        public void onClick(DialogInterface dialog, int which) {
            Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
            mContext.startActivity(intent);
        }
    });
    // cancel button
    alertDialog.setNegativeButton("Annuler", new DialogInterface.OnClickListener() {

        public void onClick(DialogInterface dialog, int which) {
            dialog.cancel();
        }
    });
    // show
    alertDialog.show();
}

@Override
public void onLocationChanged(Location location) {
}

@Override
public void onProviderDisabled(String provider) {
}

@Override
public void onProviderEnabled(String provider) {
}

@Override
public void onStatusChanged(String provider, int status, Bundle extras) {
}

@Override
public IBinder onBind(Intent arg0) {
    return null;
}
}
</code></pre>

<p>And now how to use it in your activity : </p>

<pre><code>    protected LatLng        mLocation;
    protected GPSManager    mGpsManager;
    private GoogleMap       mGoogleMap;

@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_map);
        // get location
        mGpsManager = GPSManager.getInstance();
        mGpsManager.set_mContext(this);
        Location location = mGpsManager.get_mLocation(this);
        mLocation = new LatLng(location.getLatitude(), location.getLongitude());
        // setup map
        mGoogleMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();
        mGoogleMap.setIndoorEnabled(true);
        mGoogleMap.setMyLocationEnabled(true);
        mGoogleMap.moveCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(mLocation.latitude, mLocation.longitude), 8.0f));
    }


    @Override
    protected void onDestroy() {
        clearMap(mGoogleMap);
        super.onDestroy();
    }

    private void clearMap(GoogleMap googleMap) {
        googleMap.clear();
    }
</code></pre>

<p>I didn't put the location updates but you will surely find a way ;)</p>
