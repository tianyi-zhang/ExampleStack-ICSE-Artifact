<blockquote>
  <p>To create a custom ViewGroup, the only method you need to override is
  onLayout. The onLayout is triggered after the ViewGroup itself has
  finished laying itself out inside its own container ViewGroup and is
  now responsible for laying out its children. It should call the layout
  method on all of its children to now position and size them (the left
  and top parameters will determine the child view’s x and y and the
  right and bottom will determine its width (right – left) and height
  (top-bottom).</p>
</blockquote>

<p>So your TreeViewGroup code will look like : </p>

<pre><code>    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        int count = getChildCount();
        for (int i = 0; i &lt; count; i++) {
            View child = getChildAt(i);
            if (child.getVisibility() != GONE) {

                ViewGroup.LayoutParams lp = (ViewGroup.LayoutParams) child
                        .getLayoutParams();

                int childLeft = 0;
                int childTop = 0;
                child.layout(childLeft, childTop,
                        childLeft + child.getMeasuredWidth(),
                        childTop + child.getMeasuredHeight());

            }
        }
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        measureChildren(widthMeasureSpec, heightMeasureSpec);

        int measuredWidth = 200; // Calculate the height
        int measuredHeight = 200; // Calculate the width

        setMeasuredDimension(measuredWidth, measuredHeight);
    }
</code></pre>

<p>Refer this link <a href="http://arpitonline.com/2012/07/01/creating-custom-layouts-for-android/" rel="nofollow">http://arpitonline.com/2012/07/01/creating-custom-layouts-for-android/</a> </p>
