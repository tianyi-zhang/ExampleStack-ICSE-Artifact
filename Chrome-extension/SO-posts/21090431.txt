<p>Put this class in your code...this is a email class in which automatically sends your mail via gmail browser without redirecting to any other page as you want... </p>

<pre><code>public class Mail extends javax.mail.Authenticator {
private String _user;
private String _pass;

private String[] _to;
private String _from;

private String _port;
private String _sport;

private String _host;

private String _subject;
private String _body; 

private boolean _auth;

private boolean _debuggable;

private Multipart _multipart;
String tag="Mail";

public Mail() {
    _host = "smtp.gmail.com"; // default smtp server
    _port = "465"; // default smtp port
    _sport = "465"; // default socketfactory port

    _user = ""; // username
    _pass = ""; // password
    _from = ""; // email sent from
    _subject = ""; // email subject
    _body = ""; // email body

    _debuggable = false; // debug mode on or off - default off
    _auth = true; // smtp authentication - default on

    _multipart = new MimeMultipart();

    // There is something wrong with MailCap, javamail can not find a
    // handler for the multipart/mixed part, so this bit needs to be added.
    MailcapCommandMap mc = (MailcapCommandMap) CommandMap
            .getDefaultCommandMap();
    mc.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
    mc.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
    mc.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
    mc.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
    mc.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
    CommandMap.setDefaultCommandMap(mc);
}

public Mail(String user, String pass) {
    this();

    _user = user;
    _pass = pass;
}

public boolean send() throws Exception {
    Properties props = _setProperties();

             Log.d("tag",tag);
    if (!_user.equals("") &amp;&amp; !_pass.equals("") &amp;&amp; _to.length &gt; 0
            &amp;&amp; !_from.equals("") &amp;&amp; !_subject.equals("")
            &amp;&amp; !_body.equals("")) {
        Session session = Session.getInstance(props, this);

        MimeMessage msg = new MimeMessage(session);

        msg.setFrom(new InternetAddress(_from));

        InternetAddress[] addressTo = new InternetAddress[_to.length];
        for (int i = 0; i &lt; _to.length; i++) {
            addressTo[i] = new InternetAddress(_to[i]);
        }
        msg.setRecipients(MimeMessage.RecipientType.TO, addressTo);

        msg.setSubject(_subject);
        msg.setSentDate(new Date());

        // setup message body
        BodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setText(_body);
        _multipart.addBodyPart(messageBodyPart);

        // Put parts in message
        msg.setContent(_body,"text/html");

        // send email
        Transport.send(msg);

        return true;
    } else {
        return false;
    }
}

public void addAttachment(String filename) throws Exception {
    BodyPart messageBodyPart = new MimeBodyPart();
    DataSource source = new FileDataSource(filename);
    messageBodyPart.setDataHandler(new DataHandler(source));
    messageBodyPart.setFileName(filename);

    _multipart.addBodyPart(messageBodyPart);
}

@Override
public PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication(_user, _pass);
}

private Properties _setProperties() {
    Properties props = new Properties();

    props.put("mail.smtp.host", _host);

    if (_debuggable) {
        props.put("mail.debug", "true");
    }

    if (_auth) {
        props.put("mail.smtp.auth", "true");
    }

    props.put("mail.smtp.port", _port);
    props.put("mail.smtp.socketFactory.port", _sport);
    props.put("mail.smtp.socketFactory.class",
            "javax.net.ssl.SSLSocketFactory");
    props.put("mail.smtp.socketFactory.fallback", "false");

    return props;
}

// the getters and setters
public String getBody() {
    return _body;
}

public void setBody(String _body) {
    this._body = _body;
}

public void setTo(String[] toArr) {
    this._to = toArr;
}

// more of the getters and setters â€¦..

public void setFrom(String string) {
    this._from = string;

}

public void setSubject(String string) {
    this._subject = string;

}
</code></pre>

<p>}</p>

<p>and use a function...</p>

<pre><code>          private void sendMail() {

    Log.d("----", "sending");
    try {

        Mail m = new Mail("your email id", "password");
        String[] toArr = { "recever id" };


        m.setTo(toArr);
        m.setFrom("your email id");
        m.setSubject("Information");

        String customHtml="&lt;br/&gt;&lt;br/&gt;&lt;table border='1'&gt;&lt;tr&gt;&lt;td&gt;&lt;b&gt;"+getResources().getString(R.string.Comment)+"&lt;/b&gt;&lt;/td&gt;" +
                "&lt;td&gt;"+edt_comment.getText().toString()+"&lt;/td&gt;&lt;/tr&gt;" +
                "&lt;tr&gt;&lt;td&gt;&lt;b&gt;"+getResources().getString(R.string.Name)+"&lt;/b&gt;&lt;/td&gt;" +
                "&lt;td&gt;"+edt_name.getText().toString()+"&lt;/td&gt;&lt;/tr&gt;" +
                "&lt;tr&gt;&lt;td&gt;&lt;b&gt;"+getResources().getString(R.string.Email)+"&lt;/b&gt;&lt;/td&gt;" +
                "&lt;td&gt;"+edt_email.getText().toString()+"&lt;/td&gt;&lt;/tr&gt;" +
                "&lt;tr&gt;&lt;td&gt;&lt;b&gt;"+getResources().getString(R.string.Phone)+"&lt;/b&gt;&lt;/td&gt;" +
                "&lt;td&gt;"+edt_phn.getText().toString()+"&lt;/td&gt;&lt;/tr&gt;";

        m.setBody(customHtml);


        if (m.send()) {
            runOnUiThread(new Runnable() {

                @Override
                public void run() {
                    Toast.makeText(P_Ask_Question.this,
                            "Mail has been sent successfully.",
                            Toast.LENGTH_LONG).show();

                }
            });
        } else {
            runOnUiThread(new Runnable() {

                @Override
                public void run() {


                    Toast.makeText(
                            P_Ask_Question.this,
                            "Mail is not sent successfully",
                            Toast.LENGTH_LONG).show();

                }
            });
        }
    } catch (Exception e) {
        // TODO Auto-generated catch block


        e.printStackTrace();

    }
</code></pre>
