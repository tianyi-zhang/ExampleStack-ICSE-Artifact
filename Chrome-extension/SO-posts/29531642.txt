<p>As your implementation of <code>doesNotContain(..)</code> is close to the implementation of the <code>containsAll(..)</code> implementation I would propose to use that one. If you execute <code>list1.containsAll(list2)</code> the implementation will loop over all elements of <code>list2</code> to check if there is an equal object in <code>list1</code>. That's the reason you need to override <code>public boolean equals(Object obj)</code> in <code>LocalDate</code>.</p>

<p>Find below a small example to show what's done by the <code>containsAll(..)</code></p>

<p>the main procedure to run the check</p>

<pre><code>public static void main(String[] args) throws Exception {
    List&lt;LocalDate&gt; list1 = new LinkedList&lt;&gt;();
    list1.add(new LocalDate("112233"));
    list1.add(new LocalDate("223344"));

    List&lt;LocalDate&gt; list2 = new LinkedList&lt;&gt;();
    list2.add(new LocalDate("112233"));
    list2.add(new LocalDate("112233"));

    System.out.println("list1 = " + list1);
    System.out.println("list2 = " + list2);

    System.out.println("list1.containsAll(list2) = " + list1.containsAll(list2));
    System.out.println("list2.containsAll(list1) = " + list2.containsAll(list1));
}
</code></pre>

<p>if you implement <code>LocalDate</code> without overriding the equals method, <code>equals</code> will be true only if you compare the references of the <strong>same</strong> object.</p>

<pre><code>// a naive implementation for demonstration purpose
class LocalDate {

    String hour;
    String minute;
    String second;

    LocalDate(String string) {
        hour = string.substring(0, 2);
        minute = string.substring(2, 4);
        second = string.substring(4, 6);
    }

    @Override
    public String toString() {
        return String.format("LocalDate{%s%s%s} - hashcode: %d", hour, minute, second, this.hashCode());
    }
}
</code></pre>

<p>the result will be</p>

<pre><code>list1 = [LocalDate{112233} - hashcode: 33039820, LocalDate{223344} - hashcode: 31311199]
list2 = [LocalDate{112233} - hashcode: 13177912, LocalDate{112233} - hashcode: 21924553]
list1.containsAll(list2) = false
list2.containsAll(list1) = false
</code></pre>

<p>if you override the equals method (hashcode has been omitted for demonstration purpose)</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (obj == null) {
        return false;
    }
    if (getClass() != obj.getClass()) {
        return false;
    }
    final LocalDate other = (LocalDate) obj;
    System.out.println(toString() + ".equals(" + obj.toString() + ')');
    if (!Objects.equals(this.hour, other.hour)) {
        return false;
    }
    if (!Objects.equals(this.minute, other.minute)) {
        return false;
    }
    if (!Objects.equals(this.second, other.second)) {
        return false;
    }
    return true;
}
</code></pre>

<p>the output will be</p>

<pre><code>list1 = [LocalDate{112233} - hashcode: 33336787, LocalDate{223344} - hashcode: 12767201]
list2 = [LocalDate{112233} - hashcode: 31311199, LocalDate{112233} - hashcode: 13177912]
// generated output by the method containsAll(..)
LocalDate{112233} - hashcode: 31311199.equals(LocalDate{112233} - hashcode: 33336787)
LocalDate{112233} - hashcode: 13177912.equals(LocalDate{112233} - hashcode: 33336787)
list1.containsAll(list2) = true
// generated output by the method containsAll(..)
LocalDate{112233} - hashcode: 33336787.equals(LocalDate{112233} - hashcode: 31311199)
LocalDate{223344} - hashcode: 12767201.equals(LocalDate{112233} - hashcode: 31311199)
LocalDate{223344} - hashcode: 12767201.equals(LocalDate{112233} - hashcode: 13177912)
list2.containsAll(list1) = false
</code></pre>

<p>based on the printed <code>Object.hashcode()</code> you can easily see that the containsAll() method loops over all elemnts in the list on which you call the method.</p>

<p>If you want to improve the check you need to clarify first following points
- are the elements in the list unique -> then better use a <code>Set</code>
- must the list have the same number of elements -> if yes you can compare as first step their sizes
- if you need to check only that list2 has only elements which are in list1 (means the list contains unique values) -> call the containsAll method on list2
- it might also be worth to sort the lists before (depends on the contained data)</p>

<p>Without those information it is not possible to give a suggestion which will be <code>the best</code> in all cases.</p>
