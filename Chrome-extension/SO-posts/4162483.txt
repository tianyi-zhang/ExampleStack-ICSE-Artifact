<p>`IMO, keep aside the thought that you're making a library (.jar file according to my interpretation of this question).</p>

<p>Focus on creating a simple Java class first, like this: </p>

<pre><code>//SieveOfEratosthenes.java
  public class PrimeSieve{
    public static void main(String args[])
    {
    int N = Integer.parseInt(args[0]);
             // initially assume all integers are prime
    boolean[] isPrime = new boolean[N + 1];
    for (int i = 2; i &lt;= N; i++) {
        isPrime[i] = true;
    }

    // mark non-primes &lt;= N using Sieve of Eratosthenes
    for (int i = 2; i*i &lt;= N; i++) {

        // if i is prime, then mark multiples of i as nonprime
        // suffices to consider mutiples i, i+1, ..., N/i
        if (isPrime[i]) {
            for (int j = i; i*j &lt;= N; j++) {
                isPrime[i*j] = false;
            }
        }
    }

    // count primes
    int primes = 0;
    for (int i = 2; i &lt;= N; i++) {
        if (isPrime[i]) primes++;
    }
    System.out.println("The number of primes &lt;= " + N + " is " + primes);
}
}
</code></pre>

<p>Now, the next step; Implementing it for larger values, you can always use BigInteger. SO questions pertaining to the same: </p>

<ol>
<li><a href="http://stackoverflow.com/questions/1801003">Java BigInteger Prime numbers</a></li>
<li><a href="http://stackoverflow.com/questions/1592058/problems-with-java-math-biginteger">Problems with java.math.BigInteger</a></li>
<li><a href="http://stackoverflow.com/questions/3629165/how-do-bignums-implementations-work">BigNums Implementation</a></li>
</ol>

<p>Try reading all questions related to BigInteger class on SO, <a href="http://stackoverflow.com/questions/tagged/biginteger">BigInteger Tagged questions.</a></p>

<p>Hope this helps.</p>
