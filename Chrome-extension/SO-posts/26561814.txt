<p>Finally , I solved the problem .</p>

<p>Here is the updated code .I removed the arrayList.clear and feedItems.clear. They were emptying my listview.</p>

<p>MainActivity.java</p>

<pre><code>package com.sri.vaave;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.content.res.Configuration;
import android.content.res.TypedArray;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.app.ActionBarDrawerToggle;
import android.support.v4.widget.DrawerLayout;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;

import com.android.volley.Cache;
import com.android.volley.Cache.Entry;
import com.android.volley.Request.Method;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.VolleyLog;
import com.android.volley.toolbox.JsonObjectRequest;
import com.sri.vaave.adapter.FeedListAdapter;
import com.sri.vaave.app.AppController;
import com.sri.vaave.data.FeedItem;


public class MainActivity extends Activity  {

    private static final String TAG = MainActivity.class.getSimpleName();
    private ListView listView;
    private FeedListAdapter listAdapter;
    private List&lt;FeedItem&gt; feedItems;
    private List&lt;FeedItem&gt; arrayTemplist;
    private String URL_FEED = "http://coherendz.net/vaavefeed1.json";
    private DrawerLayout mDrawerLayout;
    private ListView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;
    private ArrayList&lt;NavDrawerItem&gt; navDrawerItems;
    private TypedArray navMenuIcons;
    private NavDrawerListAdapter adapter;

    // nav drawer title
    private CharSequence mDrawerTitle;

    // used to store app title
    private CharSequence mTitle;

    // slide menu items
    private String[] navMenuTitles;

    Iterator itr;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // TODO Auto-generated method stub

        feedItems = new ArrayList&lt;FeedItem&gt;();


        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        try {
                buildFeed(0);
            } catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

           getActionBar().setHomeButtonEnabled(true);
           getActionBar().setDisplayHomeAsUpEnabled(true);

            // These two lines not needed, 
            // just to get the look of facebook (changing background color &amp; hiding the icon)

            getActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor("#3b5998"))); 
            getActionBar().setIcon( 
                       new ColorDrawable(getResources().getColor(android.R.color.transparent))); 

            mTitle = mDrawerTitle = getTitle();
            navMenuTitles = getResources().getStringArray(R.array.Options);

         // nav drawer icons from resources
            navMenuIcons = getResources()
                    .obtainTypedArray(R.array.nav_drawer_icons);


            mDrawerLayout = (DrawerLayout) findViewById(R.id.drawerLayout);
            mDrawerList = (ListView) findViewById(R.id.drawerList);


            navDrawerItems = new ArrayList&lt;NavDrawerItem&gt;();

            // adding nav drawer items to array
            // Home
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[0], navMenuIcons.getResourceId(0, -1)));
            // Find People
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[1], navMenuIcons.getResourceId(1, -1)));
            // Photos
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[2], navMenuIcons.getResourceId(2, -1)));
            // Communities, Will add a counter here
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[3], navMenuIcons.getResourceId(3, -1), true, "22"));
            // Pages
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[4], navMenuIcons.getResourceId(4, -1)));
            // What's hot, We  will add a counter here
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[5], navMenuIcons.getResourceId(5, -1), true, "50+"));
            // all
            navDrawerItems.add(new NavDrawerItem(navMenuTitles[6], navMenuIcons.getResourceId(6, -1)));

           // Recycle the typed array
            navMenuIcons.recycle();

         // setting the nav drawer list adapter
            adapter = new NavDrawerListAdapter(getApplicationContext(),
                    navDrawerItems);

               mDrawerList.setAdapter(adapter);
               mDrawerList.setOnItemClickListener(new SlideMenuClickListener());

               mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
                        R.drawable.ic_drawer, //nav menu toggle icon
                        R.string.drawer_open, // nav drawer open - description for accessibility
                        R.string.drawer_close // nav drawer close - description for accessibility
                )
                {
                    public void onDrawerClosed(View view) {
                        getActionBar().setTitle(mTitle);
                        // calling onPrepareOptionsMenu() to show action bar icons
                        invalidateOptionsMenu();
                    }

                    public void onDrawerOpened(View drawerView) {
                        getActionBar().setTitle(mDrawerTitle);
                        // calling onPrepareOptionsMenu() to hide action bar icons
                        invalidateOptionsMenu();
                    }
                };


                mDrawerLayout.setDrawerListener(mDrawerToggle);           
            }



            private void populateFeedList() {
          // TODO Auto-generated method stub

            feedItems = getData(0);

            //getData(0);
            populateListView(feedItems); 

    }
            private void populateListView(List dataFeed) {
            // TODO Auto-generated method stub
                          // feedItems = new ArrayList&lt;FeedItem&gt;();
                           listAdapter = new FeedListAdapter(this, dataFeed);
                           listView = (ListView) findViewById(R.id.list);
                           listView.setAdapter(listAdapter);
                           listAdapter.notifyDataSetChanged();          

            }
            /***
             * Called when invalidateOptionsMenu() is triggered
             */
            @Override
            public boolean onPrepareOptionsMenu(Menu menu) {
                // if nav drawer is opened, hide the action items
                boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
                menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
                return super.onPrepareOptionsMenu(menu);
            }

            @Override
            public void setTitle(CharSequence title) {
                mTitle = title;
                getActionBar().setTitle(mTitle);
            }



            /**
             * Slide menu item click listener
             * */
            private class SlideMenuClickListener implements
                    ListView.OnItemClickListener {
                @Override
                public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position,
                        long id) {// display view for selected nav drawer item

                    Toast.makeText(MainActivity.this,navMenuTitles[position]+" was selected", Toast.LENGTH_LONG).show();
                    setTitle(navMenuTitles[position]);
                    displayView(position);
                    mDrawerLayout.closeDrawer(mDrawerList);
                }

                private void displayView(int position) {
                    // TODO Auto-generated method stub
                    feedItems = new ArrayList&lt;FeedItem&gt;();
                    switch(position){

                    case 0: try {
                            buildFeed(0);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                            break;        
                    case 1: try {
                            buildFeed(7);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                            break;
                    case 2: try {
                            buildFeed(1);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                            break;
                    case 3: try {
                            buildFeed(13);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                            break;
                    case 4: try {
                            buildFeed(12);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                            break;        
                    default:
                        try {
                            buildFeed(0);
                        } catch (JSONException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        break;
                    }
                }
            }


                private List getData(int nodeType) {

                // TODO Auto-generated method stub

                    // We first check for cached request 
                       Cache cache = AppController.getInstance().getRequestQueue().getCache(); 
                        Entry entry = cache.get(URL_FEED);
                        String data = null;
                        if (entry != null) { 
                            // fetch the data from cache 
                            try { 
                                data = new String(entry.data, "UTF-8");
                                try { 
                                    parseJsonFeed(new JSONObject(data)); 
                                } catch (JSONException e) { 
                                    e.printStackTrace(); 
                                } 
                            } catch (UnsupportedEncodingException e) { 
                                e.printStackTrace(); 
                            } 

                        } else { 
                            // making fresh volley request and getting json 
                            JsonObjectRequest jsonReq = new JsonObjectRequest(Method.GET, 
                                    URL_FEED, null, new Response.Listener&lt;JSONObject&gt;() { 

                                        @Override 
                                        public void onResponse(JSONObject response) { 
                                            VolleyLog.d(TAG, "Response: " + response.toString()); 
                                            if (response != null) { 
                                                parseJsonFeed(response); 
                                            } 
                                        } 
                                    }, new Response.ErrorListener() { 

                                        @Override 
                                        public void onErrorResponse(VolleyError error) { 
                                            VolleyLog.d(TAG, "Error: " + error.getMessage()); 
                                        } 
                                    }); 

                        // Adding request to volley request queue 
                        AppController.getInstance().addToRequestQueue(jsonReq);

                       }

                        return feedItems;
                    }          

                     /** 
                     * Parsing json reponse and passing the data to feed view list adapter 
                     * */ 
                    private void parseJsonFeed(JSONObject response) {

                        FeedItem item;
                        itr = response.keys();
                        try 
                      {     
                        while(itr.hasNext())

                        {
                                String key = itr.next().toString();
                                JSONObject entry = response.getJSONObject(key);

                                JSONObject phone = entry.getJSONObject("basic");
                                String name = phone.getString("title");
                                String description = phone.getString("description");
                                int nodetype = phone.getInt("node_type");
                                JSONObject comments = entry.getJSONObject("comments");
                                String comments_count = comments.getString("count");
                                JSONObject like = entry.getJSONObject("likes");
                                String like_count = like.getString("count");
                                String readable_date = phone.getString("readable_date");



                                item = new FeedItem();
                                item.setNode_type(nodetype); 
                                item.setName(String.valueOf(name));               
                                item.setStatus(String.valueOf(description)); 
                                item.setReadable_date(String.valueOf(readable_date));
                                item.setComments_count(String.valueOf(comments_count));
                                item.setLike_count(String.valueOf(like_count));


                                feedItems.add(item);

                            }                

                          } 
                          catch (JSONException e) 
                          {
                                e.printStackTrace(); 
                          } 
                     }

            /**
             * When using the ActionBarDrawerToggle, you must call it during
             * onPostCreate() and onConfigurationChanged()...
             */

            @Override
            protected void onPostCreate(Bundle savedInstanceState) {
                super.onPostCreate(savedInstanceState);
                // Sync the toggle state after onRestoreInstanceState has occurred.
                mDrawerToggle.syncState();
            }

            @Override
            public void onConfigurationChanged(Configuration newConfig) {
                super.onConfigurationChanged(newConfig);
                // Pass any configuration change to the drawer toggls
                mDrawerToggle.onConfigurationChanged(newConfig);
            }


            @Override
            public boolean onOptionsItemSelected(MenuItem item) {
                // TODO Auto-generated method stub
                // toggle nav drawer on selecting action bar app icon/title
                if (mDrawerToggle.onOptionsItemSelected(item)) 
                {
                    return true;
                }
                // Handle action bar actions click
                switch (item.getItemId()) 
                {
                case R.id.action_settings:
                    return true;
                default:
                    return super.onOptionsItemSelected(item);
                }
            }

            @Override
            public boolean onCreateOptionsMenu(Menu menu) {
                // TODO Auto-generated method stub
                getMenuInflater().inflate(R.menu.main, menu);
                return true;
            }

            private void buildFeed(int nodeType) throws JSONException {
            // TODO Auto-generated method stub

            getData(0);

            arrayTemplist = new ArrayList&lt;FeedItem&gt;();

                if(nodeType!=0){

                     for(int x=0;x&lt;feedItems.size();x++)
                    {

                      int currentNodeType = feedItems.get(x).getNode_type();

                        if (nodeType == currentNodeType)
                        {
                            arrayTemplist.add(feedItems.get(x));                  
                        }

                    }

                feedItems = arrayTemplist;

                }
                else{

                }

                populateListView(feedItems);
       }            
}
</code></pre>
