<p>I finally found the correct regex to match any characteres (including chinese or other languages) and give me each word of the search: </p>

<p>Example if the search is : </p>

<blockquote>
  <p>harlan coben "harlan coben"</p>
</blockquote>

<p>Each match found will be:</p>

<blockquote>
  <p>harlan <br/>
  coben <br/>"Harlan coben"</p>
</blockquote>

<p>Here is the used code:</p>

<pre><code>Pattern PATTERN = Pattern.compile("(?&gt;\"[^\"]+\"+)|(?&gt;[^ ]+)+");
Matcher match = PATTERN.matcher(motRecherche);
match.reset();
int iM = 0;

while(match.find()){
    if(iM &gt; 0){
        query.append("%20AND%20");
    }

    String utf_encoded = CommonUtils.escapeSolrQuery(match.group(0));
    query.append(":"+utf_encoded);
    iM++;
}
</code></pre>

<p>Another thing about SolR, it's needed to escape some special characters <b>+ - &amp;&amp; || ! ( ) { } [ ] ^ " ~ * ? : \</b> , SolR provides a client class called ClientUtils and a method escapeQueryChars() that i change for me:</p>

<pre><code>public static String escapeSolrQuery(String searchWord){

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i &lt; searchWord.length(); i++) {
          char c = searchWord.charAt(i);

          if (c == '\\' || c == '+' || c == '-' || c == '!'  || c == '(' || c == ')' || c == ':'
            || c == '^' || c == '[' || c == ']' || c == '{' || c == '}' || c == '~'
            || c == '*' || c == '?' || c == '|' || c == '&amp;'  || c == ';' || c == '/') 
          {
            sb.append('\\');
          }

          if(c == '\"' &amp;&amp; !searchWord.matches("\"[^\"]+\"")){
              sb.append('\\');
          }
          sb.append(c);
        }
       return sb.toString();
    } 
</code></pre>

<p>Now it works fine :)</p>
