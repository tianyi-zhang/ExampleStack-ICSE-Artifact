<p>You need use several <code>ClassLoader</code> if you want a resource in a jar. This fragment works in AppServers too.</p>

<p>In this example I read from <code>sqlite-jdbc-3.7.2.jar</code> the file located in <code>org.sqlite</code> package.</p>

<pre><code>public class Main {

private static InputStream getResourceAsStream(String resource) throws FileNotFoundException {
    String stripped = resource.startsWith("/") ? resource.substring(1) : resource;
    InputStream stream = null;
    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
    if (classLoader != null) {
        stream = classLoader.getResourceAsStream(stripped);
    }
    if (stream == null) {
        stream = MyClass.class.getResourceAsStream(resource);
    }
    if (stream == null) {
        stream = MyClass.class.getClassLoader().getResourceAsStream(stripped);
    }
    if (stream == null) {
        throw new FileNotFoundException("File not found: " + resource);
    }
    return stream;
}

public static void main(String[] args) throws FileNotFoundException {
    // Read file from JAR sqlite-jdbc-3.7.2.jar
    Scanner sc = new Scanner(getResourceAsStream("org/sqlite/NativeDB.c"));
    while(sc.hasNextLine()) {
        System.out.println(sc.nextLine());
    }
}
</code></pre>

<p>}</p>

<p>For more details read <a href="http://en.wikipedia.org/wiki/Java_Classloader" rel="nofollow">Java Classloader</a></p>

<p>If you want update the contents, may <a href="http://www.codeland.org" rel="nofollow">Jar Inspector</a> help you.</p>
