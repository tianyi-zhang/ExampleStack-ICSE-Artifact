<p>You can achieve the same using picasso </p>

<p>Below is the code :</p>

<pre><code>Picasso.with(context).load(imageURL)
            .error(drawable)
            .placeholder(drawable)
            .transform(new RoundedTransformation()).into(imgView);

public class RoundedTransformation implements Transformation {
@Override
public Bitmap transform(Bitmap source) {
    try {

        int size = Math.min(source.getWidth(), source.getHeight());

        int x = (source.getWidth() - size) / 2;
        int y = (source.getHeight() - size) / 2;

        Bitmap squaredBitmap = Bitmap
                .createBitmap(source, x, y, size, size);
        if (squaredBitmap != source) {
            source.recycle();
        }

        Bitmap bitmap = Bitmap.createBitmap(size, size, source.getConfig());

        Canvas canvas = new Canvas(bitmap);
        Paint paint = new Paint();
        BitmapShader shader = new BitmapShader(squaredBitmap,
                BitmapShader.TileMode.CLAMP, BitmapShader.TileMode.CLAMP);
        paint.setShader(shader);
        paint.setAntiAlias(true);

        float r = size / 2f;
        canvas.drawCircle(r, r, r, paint);

        squaredBitmap.recycle();
        return bitmap;
    } catch (Exception e) {
        // TODO: handle exception
        if (BuildConfig.DEBUG)
            e.printStackTrace();
        return null;
    }

}

@Override
public String key() {
    return "circle";
}
</code></pre>

<p>}</p>
