<p>I had a same problem last month and I managed to solve it using the google's <a href="https://code.google.com/p/libphonenumber/" rel="nofollow">libphonenumber</a> library.</p>

<p>The problem only occurs with local/national phone numbers as they can be saved without country code or using '0'.</p>

<p>For example :</p>

<p>A typical phone number in India can be saved in following formats</p>

<pre><code>  a. +919665123456
  b. 919665123456
  c. 09665123456
  d. 9665123456
</code></pre>

<p>and each of the above are perfectly valid formats to dial in India only</p>

<p>But in case if the phone numbers which belong to other than your native country it has to be saved compulsory with Country Code or you won't be able to make a call.</p>

<pre><code>ex. 

 a. +1732-757-2923    (US)
 b. +97433-456-789    (Qatar)
</code></pre>

<p>So, the problem of matching contacts really occurs if the concerning contact is <code>local/national</code>.</p>

<p>And that's where <code>libphonenumber</code> comes into the picture. Using the library we can extract the phone number in actual national format belonging to that particular country. </p>

<p>Here's the trick. First pass the received number from sms as it is to the uri for matching in database. If it doesn't matches then extract the nationalized phone number
     using libphonenumber and then again pass it as uri for matching. (<code>Uri.encode(number)</code>)</p>

<p>It worked in my case.</p>

<p>I've used it in the following way.</p>

<pre><code>public String getContactDisplayNameByNumber(String number) {

    if (number != null &amp;&amp; number.length() != 0) {

        String name = lookupNumber(number);

        if (!name.contains(number))
            return name;
        else {

            TelephonyManager manager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);

            String usersCountryISOCode = manager.getNetworkCountryIso();

            PhoneNumberUtil phoneUtil = PhoneNumberUtil.getInstance();
            try {
                PhoneNumber phonenUmber = phoneUtil.parse(name,
                        usersCountryISOCode);
                if (phoneUtil.isValidNumber(phonenUmber)) {
                    temp = phoneUtil
                            .getNationalSignificantNumber(phonenUmber);


                    name = lookupNumber(temp);
                    return name;
                }

            } catch (Exception e) {

                e.printStackTrace();

            }
            return number;
        }
    } else {
        return "Invalid Number";
    }
}

private String lookupNumber(String number) {

    uri = Uri.withAppendedPath(
            ContactsContract.PhoneLookup.CONTENT_FILTER_URI,
            Uri.encode(number));
    name = number;

    contentResolver = getContentResolver();
    contactLookup = contentResolver.query(uri, columns, null, null, null);

    try {
        if (contactLookup != null &amp;&amp; contactLookup.getCount() &gt; 0) {
            contactLookup.moveToNext();
            name = contactLookup.getString(contactLookup
                    .getColumnIndex(ContactsContract.Data.DISPLAY_NAME));

        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (contactLookup != null) {
            contactLookup.close();
        }
    }

    return name;
}
</code></pre>

<p>Hope it solves your problem.</p>
