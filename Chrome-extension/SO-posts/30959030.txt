<blockquote>
  <p>Executes the given tasks, returning a list of Futures holding their
  status and results when all complete. <strong>Future.isDone() is true for each
  element of the returned list.</strong> Note that a completed task could have
  terminated either normally or by throwing an exception. The results of
  this method are undefined if the given collection is modified while
  this operation is in progress.</p>
</blockquote>

<p>Futures can only be done when execution is finished, therefore this method can only return when the tasks have been executed.</p>

<p>That it can throw an InterruptedException is also indicative of a blocking action.</p>

<p>Looking at the implementation of <code>invokeAll</code> in <code>java.util.concurrent.AbstractExecutorService</code> (comment inline):</p>

<pre><code>public &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)
    throws InterruptedException {
    if (tasks == null)
        throw new NullPointerException();
    ArrayList&lt;Future&lt;T&gt;&gt; futures = new ArrayList&lt;Future&lt;T&gt;&gt;(tasks.size());
    boolean done = false;
    try {
        for (Callable&lt;T&gt; t : tasks) {
            RunnableFuture&lt;T&gt; f = newTaskFor(t);
            futures.add(f);
            execute(f);
        }
        for (int i = 0, size = futures.size(); i &lt; size; i++) {
            Future&lt;T&gt; f = futures.get(i);
            if (!f.isDone()) {
                try {
                    f.get(); // &lt;== *** BLOCKS HERE ***

                } catch (CancellationException ignore) {
                } catch (ExecutionException ignore) {
                }
            }
        }
        done = true;
        return futures;
    } finally {
        if (!done)
            for (int i = 0, size = futures.size(); i &lt; size; i++)
                futures.get(i).cancel(true);
    }
}
</code></pre>

<p>In fact, looking at a reference implementation is what you generally should do in these cases when the Javadoc-Specese appears to be difficult to decipher. <sup>(with the caveat in mind that some implementation details are not part of the spec.)</sup></p>
