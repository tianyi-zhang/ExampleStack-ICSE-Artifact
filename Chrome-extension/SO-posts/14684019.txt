<p>The only way to use a layout in a Dialog is to subclass it:</p>

<pre><code>class MyDialog extends Dialog{
public MyDialog(Context context) {
    super(context);
}

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.dialog);

    String[] arr1 = new String[]{"title1", "title2", "title3"};
    String[] arr2 = new String[]{"content1", "content2", "content3"};

    ListView  list = (ListView)findViewById(R.id.list);
    list.setAdapter(new MyAdapter(arr1, arr2));
}
</code></pre>

<p>where R.layout.dialog is your layout where your listView is defined, which we will set a Custom Adapter, inflating a layout containing the two strings.</p>

<pre><code>private final class MyAdapter extends BaseAdapter{
    private String[] mArray1;
    private String[] mArray2;

    public MyAdapter(String[] arr1, String[] arr2) {
        mArray1 = arr1;
        mArray2 = arr2;
    }

    public int getCount() { return mArray1.length; }
    public Object getItem(int position) { return mArray1[position]; }
    public long getItemId(int position) { return 0; }

    public View getView(int position, View convertView, ViewGroup parent) {
        String str1 = mArray1[position];
        String str2 = mArray2[position];
        if(convertView==null){
            LayoutInflater li = getLayoutInflater();
            convertView = li.inflate(R.layout.my_list_cell, null);
        }

        TextView text1 = (TextView)convertView.findViewById(R.id.text1);
        text1.setText(str1);

        TextView text2 = (TextView)convertView.findViewById(R.id.text2);
        text1.setText(str2);

        return convertView;
    }
}
</code></pre>
