<p>This is my implementation of DynamicSelectionCell. </p>

<p>Use a single DynamicSelectionCell object and use the <em>addOption</em> method to add options for each row. Options are stored in a Map with the Key being the row number.</p>

<p>For each row <em>$i</em> in the table the options stored in the Map for key <em>$i</em> are rendered.</p>

<p>Works on DataGrid, CellTable.</p>

<p><strong><em>CODE</em></strong></p>

<pre><code>public class DynamicSelectionCell extends AbstractInputCell&lt;String, String&gt; {

    public TreeMap&lt;Integer, List&lt;String&gt;&gt; optionsMap = new TreeMap&lt;Integer, List&lt;String&gt;&gt;();
    interface Template extends SafeHtmlTemplates {
        @Template("&lt;option value=\"{0}\"&gt;{0}&lt;/option&gt;")
        SafeHtml deselected(String option);

        @Template("&lt;option value=\"{0}\" selected=\"selected\"&gt;{0}&lt;/option&gt;")
        SafeHtml selected(String option);
    }

    private static Template template;

    private TreeMap&lt;Integer, HashMap&lt;String, Integer&gt;&gt; indexForOption = new TreeMap&lt;Integer, HashMap&lt;String, Integer&gt;&gt;();

    /**
     * Construct a new {@link SelectionCell} with the specified options.
     *
     * @param options the options in the cell
     */
    public DynamicSelectionCell() {
        super("change");
        if (template == null) {
            template = GWT.create(Template.class);
        }
    }

    public void addOption(List&lt;String&gt; newOps, int key){
        optionsMap.put(key, newOps);
        HashMap&lt;String, Integer&gt; localIndexForOption = new HashMap&lt;String, Integer&gt;();
        indexForOption.put(ind, localIndexForOption);
        refreshIndexes();
    }

    public void removeOption(int index){        
        optionsMap.remove(index);
        refreshIndexes();
    }

    private void refreshIndexes(){
        int ind=0;
        for (List&lt;String&gt; options : optionsMap.values()){
            HashMap&lt;String, Integer&gt; localIndexForOption = new HashMap&lt;String, Integer&gt;();
            indexForOption.put(ind, localIndexForOption);
            int index = 0;
            for (String option : options) {
                localIndexForOption.put(option, index++);
            }
            ind++;
        }
    }

    @Override
    public void onBrowserEvent(Context context, Element parent, String value,
            NativeEvent event, ValueUpdater&lt;String&gt; valueUpdater) {
        super.onBrowserEvent(context, parent, value, event, valueUpdater);
        String type = event.getType();
        if ("change".equals(type)) {
            Object key = context.getKey();
            SelectElement select = parent.getFirstChild().cast();
            String newValue = optionsMap.get(context.getIndex()).get(select.getSelectedIndex());
            setViewData(key, newValue);
            finishEditing(parent, newValue, key, valueUpdater);
            if (valueUpdater != null) {
                valueUpdater.update(newValue);
            }
        }
    }

    @Override
    public void render(Context context, String value, SafeHtmlBuilder sb) {
        // Get the view data.
        Object key = context.getKey();
        String viewData = getViewData(key);
        if (viewData != null &amp;&amp; viewData.equals(value)) {
            clearViewData(key);
            viewData = null;
        }

        int selectedIndex = getSelectedIndex(viewData == null ? value : viewData, context.getIndex());
        sb.appendHtmlConstant("&lt;select tabindex=\"-1\"&gt;");
        int index = 0;
        try{
        for (String option : optionsMap.get(context.getIndex())) {
            if (index++ == selectedIndex) {
                sb.append(template.selected(option));
            } else {
                sb.append(template.deselected(option));
            }
        }
        }catch(Exception e){
            System.out.println("error");
        }
        sb.appendHtmlConstant("&lt;/select&gt;");
    }

    private int getSelectedIndex(String value, int ind) {
        Integer index = indexForOption.get(ind).get(value);
        if (index == null) {
            return -1;
        }
        return index.intValue();
    }
} 
</code></pre>
