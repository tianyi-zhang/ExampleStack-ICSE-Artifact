<p>Here here is the code I am using to retrieve all the classes belonging to a package and any sub-packages. You just need to search the list of returned classes for those implementing Randomizer using reflection.</p>

<pre><code>/**
 * Scans all classes accessible from the context class loader which belong
 * to the given package and subpackages.
 * &lt;p&gt;
 * Inspired from post on: {@code http://snippets.dzone.com/posts/show/4831}
 */
public static List&lt;Class&lt;?&gt;&gt; getClasses(String packageName)
        throws ClassNotFoundException, IOException {

    // Retrieving current class loader
    final ClassLoader classLoader
            = Thread.currentThread().getContextClassLoader();

    // Computing path from the package name
    final String path = packageName.replace('.', '/');

    // Retrieving all accessible resources
    final Enumeration&lt;URL&gt; resources = classLoader.getResources(path);
    final List&lt;File&gt; dirs = new ArrayList&lt;File&gt;();

    while (resources.hasMoreElements()) {
        final URL resource = resources.nextElement();
        final String fileName = resource.getFile();
        final String fileNameDecoded = URLDecoder.decode(fileName, "UTF-8");
        dirs.add(new File(fileNameDecoded));
    }

    // Preparing result
    final ArrayList&lt;Class&lt;?&gt;&gt; classes = new ArrayList&lt;Class&lt;?&gt;&gt;();

    // Processing each resource recursively
    for (File directory : dirs) {
        classes.addAll(findClasses(directory, packageName));
    }

    // Returning result
    return classes;

}

/**
 * Recursive method used to find all classes in a given directory and
 * subdirs.
 */
public static List&lt;Class&lt;?&gt;&gt; findClasses(File directory, String packageName)
        throws ClassNotFoundException {

    // Preparing result
    final List&lt;Class&lt;?&gt;&gt; classes = new ArrayList&lt;Class&lt;?&gt;&gt;();

    if ( directory == null )
        return classes;

    if (!directory.exists())
        return classes;

    // Retrieving the files in the directory
    final File[] files = directory.listFiles();

    for (File file : files) {

        final String fileName = file.getName();

        // Do we need to go recursive?
        if (file.isDirectory()) {

            classes.addAll(findClasses(file, packageName + "." + fileName));

        } else if (fileName.endsWith(".class") &amp;&amp; !fileName.contains("$")) {

            Class&lt;?&gt; _class;

                _class = Class.forName(packageName + '.'
                        + fileName.substring(0, fileName.length() - 6));

            classes.add(_class);

        }

    }

    return classes;

}
</code></pre>
