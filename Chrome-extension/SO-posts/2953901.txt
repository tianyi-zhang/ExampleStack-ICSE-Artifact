<p>How about Quicksort?</p>

<hr>

<h2>Java</h2>

<p>The following is a java example found via a google search, </p>

<p>the URL is <a href="http://www.mycstutorials.com/articles/sorting/quicksort" rel="nofollow">http://www.mycstutorials.com/articles/sorting/quicksort</a></p>

<pre><code>public void quickSort(int array[]) 
// pre: array is full, all elements are non-null integers
// post: the array is sorted in ascending order
{
   quickSort(array, 0, array.length - 1);   // quicksort all the elements in the array
}


public void quickSort(int array[], int start, int end)
{
   int i = start;      // index of left-to-right scan
   int k = end;        // index of right-to-left scan

   if (end - start &gt;= 1)               // check that there are at least two elements to sort
   {
       int pivot = array[start];       // set the pivot as the first element in the partition

       while (k &gt; i)                   // while the scan indices from left and right have not met,
       {
           while (array[i] &lt;= pivot &amp;&amp; i &lt;= end &amp;&amp; k &gt; i) // from the left, look for the first
              i++;                                        // element greater than the pivot
           while (array[k] &gt; pivot &amp;&amp; k &gt;= start &amp;&amp; k &gt;= i) // from the right, look for the first
              k--;                                          // element not greater than the pivot
           if (k &gt; i)                  // if the left seekindex is still smaller than
               swap(array, i, k);      // the right index, swap the corresponding elements
       }
       swap(array, start, k);          // after the indices have crossed, swap the last element in
                                       // the left partition with the pivot 
       quickSort(array, start, k - 1); // quicksort the left partition
       quickSort(array, k + 1, end);   // quicksort the right partition
    }
    else // if there is only one element in the partition, do not do any sorting
    {
        return;                        // the array is sorted, so exit
    }
}

public void swap(int array[], int index1, int index2) 
// pre: array is full and index1, index2 &lt; array.length
// post: the values at indices 1 and 2 have been swapped
{
   int temp      = array[index1];      // store the first value in a temp
   array[index1] = array[index2];      // copy the value of the second into the first
   array[index2] = temp;               // copy the value of the temp into the second
}
</code></pre>

<hr>

<h2>Scala</h2>

<p>A quick attempt at a Scala version. Open season for code improvers ;@)</p>

<pre><code>def qsort(l: List[Int]): List[Int] = {
  l match {
    case Nil         =&gt; Nil
    case pivot::tail =&gt; qsort(tail.filter(_ &lt; pivot)) ::: pivot :: qsort(tail.filter(_ &gt;= pivot))
  }
}
</code></pre>
