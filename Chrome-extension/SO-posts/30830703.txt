<p>Let's follow the source code of <code>RecyclerView</code>:</p>

<pre><code>@Override
public int computeVerticalScrollOffset() {
    return mLayout.canScrollVertically() ? mLayout.computeVerticalScrollOffset(mState) : 0;
}
</code></pre>

<p>mLayout is an instance of <code>LayoutManager</code>. In our case, it should belong to <code>StaggeredGridLayoutManager</code>. Let's check there:</p>

<pre><code>@Override
public int computeVerticalScrollOffset(RecyclerView.State state) {
    return computeScrollOffset(state);
}
</code></pre>

<p>then here:</p>

<pre><code>private int computeScrollOffset(RecyclerView.State state) {
    if (getChildCount() == 0) {
        return 0;
    }
    ensureOrientationHelper();
    return ScrollbarHelper.computeScrollOffset(state, mPrimaryOrientation,
            findFirstVisibleItemClosestToStart(!mSmoothScrollbarEnabled, true)
            , findFirstVisibleItemClosestToEnd(!mSmoothScrollbarEnabled, true),
            this, mSmoothScrollbarEnabled, mShouldReverseLayout);
}
</code></pre>

<p>And finally we go to ScrollbarHelper.computeScrollOffset:</p>

<pre><code>/**
 * @param startChild View closest to start of the list. (top or left)
 * @param endChild   View closest to end of the list (bottom or right)
 */
static int computeScrollOffset(RecyclerView.State state, OrientationHelper orientation,
        View startChild, View endChild, RecyclerView.LayoutManager lm,
        boolean smoothScrollbarEnabled, boolean reverseLayout) {
    if (lm.getChildCount() == 0 || state.getItemCount() == 0 || startChild == null ||
            endChild == null) {
        return 0;
    }
    final int minPosition = Math.min(lm.getPosition(startChild),
            lm.getPosition(endChild));
    final int maxPosition = Math.max(lm.getPosition(startChild),
            lm.getPosition(endChild));
    final int itemsBefore = reverseLayout
            ? Math.max(0, state.getItemCount() - maxPosition - 1)
            : Math.max(0, minPosition);
    if (!smoothScrollbarEnabled) {
        return itemsBefore;
    }
    final int laidOutArea = Math.abs(orientation.getDecoratedEnd(endChild) -
            orientation.getDecoratedStart(startChild));
    final int itemRange = Math.abs(lm.getPosition(startChild) -
            lm.getPosition(endChild)) + 1;
    final float avgSizePerRow = (float) laidOutArea / itemRange;

    return Math.round(itemsBefore * avgSizePerRow + (orientation.getStartAfterPadding()
            - orientation.getDecoratedStart(startChild)));
}
</code></pre>

<p>And we should focus on last statement. This method returns the offset calculated by items * avgHeight, which isn't accurate when our items have variety of height.</p>

<p>As a result, when we use a <code>LinearLayoutManager</code> of <code>GridLayoutManager</code>, since height of each row is confirmed, <code>computeVerticalScrollOffset()</code> will return correct distance. However, unfortunately, when we use <code>StaggeredGridLayoutManager</code>, we cannot get accurate scroll offset by it.</p>

<p><strong>P.S</strong> I know the reason why it isn't correct, but I don't know how to get correct scroll distance. If anyone knows, please visit: <a href="http://stackoverflow.com/questions/30805156/how-to-get-correct-scroll-distance-of-recyclerview-when-using-a-staggeredgridlay">How to get correct scroll distance of RecyclerView when using a StaggeredGridLayoutManager?</a> and post your answer. </p>
