<p>You're going to have to be more specific on exactly WHAT you want your function to get.  There are many different definitions of "combinations" and you haven't specified whether you want ordered or unordered combinations.</p>

<p>Mathematically, if you have n elements and want a LIST of k of them (ordered with repeats), that gives you</p>

<pre><code>n ^ k
</code></pre>

<p>combinations.  (6 ^ 4 = 1296 combinations in your original example, which is a lot!).  However, if you have n elements and want a MULTISET of k of them (unordered with repeats), that gives you</p>

<pre><code>(n + k - 1)! / (k! * (n - 1)!)
</code></pre>

<p>combinations and is a much harder enumeration.</p>

<p>If k is small, you can generate the first one with a limited number of for loops but this becomes cumbersome very quickly as k grows.  This strongly hints at the need for a RECURSIVE method:</p>

<pre><code>public static String[] getAllLists(String[] elements, int lengthOfList)
{
    //initialize our returned list with the number of elements calculated above
    String[] allLists = new String[(int)Math.pow(elements.length, lengthOfList)];

    //lists of length 1 are just the original elements
    if(lengthOfList == 1) return elements; 
    else
    {
        //the recursion--get all lists of length 3, length 2, all the way up to 1
        String[] allSublists = getAllLists(elements, lengthOfList - 1);

        //append the sublists to each element
        int arrayIndex = 0;

        for(int i = 0; i &lt; elements.length; i++)
        {
            for(int j = 0; j &lt; allSublists.length; j++)
            {
                //add the newly appended combination to the list
                allLists[arrayIndex] = elements[i] + allSublists[j];
                arrayIndex++;
            }
        }

        return allLists;
    }
}
</code></pre>

<p>Not only will this method generate all the lists, but it will enumerate them in order.  That is, the output will be</p>

<pre><code>aaaa
aaab
aaac
aaa1
aaa2
aaa3
aaba
aabb
aabc
aab1
...
3323
333a
333b
333c
3331
3332
3333
</code></pre>

<p>using your original input.  It can also generate any length of words (be very careful with this!  Just with words of length 8 I wound up with 1,679,616 combinations!).</p>

<p>If the method confuses you (it's a recursive method, so it's a bit hard to follow) or if you want a solution to the second combination problem, feel free to ask.  Also, this method is somewhat inefficient because it recalculates the combinations for all the sublists, so it's not viable for really long lists.  If you really wanted efficiency you would store the already-calculated tuples in a global list.</p>
