<p>Try this answer. First, the data:</p>

<pre><code>int[] a = {1,2,3,4,5,6,7,7,7,7};
</code></pre>

<p>Here, we build a map counting the number of times each number appears:</p>

<pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();
for (int i : a) {
    Integer count = map.get(i);
    map.put(i, count != null ? count+1 : 0);
}
</code></pre>

<p>Now, we find the number with the maximum frequency and return it:</p>

<pre><code>Integer popular = Collections.max(map.entrySet(),
    new Comparator&lt;Map.Entry&lt;Integer, Integer&gt;&gt;() {
    @Override
    public int compare(Entry&lt;Integer, Integer&gt; o1, Entry&lt;Integer, Integer&gt; o2) {
        return o1.getValue().compareTo(o2.getValue());
    }
}).getKey();
</code></pre>

<p>As you can see, the most popular number is seven:</p>

<pre><code>System.out.println(popular);
&gt; 7
</code></pre>

<p><strong>EDIT</strong></p>

<p>Here's my answer <em>without</em> using maps, lists, etc. and using only arrays; although I'm sorting the array in-place. It's O(n log n) complexity, better than the O(n^2) accepted solution.</p>

<pre><code>public int findPopular(int[] a) {

    if (a == null || a.length == 0)
        return 0;

    Arrays.sort(a);

    int previous = a[0];
    int popular = a[0];
    int count = 1;
    int maxCount = 1;

    for (int i = 1; i &lt; a.length; i++) {
        if (a[i] == previous)
            count++;
        else {
            if (count &gt; maxCount) {
                popular = a[i-1];
                maxCount = count;
            }
            previous = a[i];
            count = 1;
        }
    }

    return count &gt; maxCount ? a[a.length-1] : popular;

}
</code></pre>
