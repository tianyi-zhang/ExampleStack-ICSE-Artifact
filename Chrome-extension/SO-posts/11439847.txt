<p>You can make the class you've already written into an <code>AsyncTask</code> where the <code>doInBackground()</code> method returns a <code>JSONObject</code>.  In <code>AsyncTask</code> land, the value returned from <code>doInBackground()</code> (the method called on a background thread) is passed to <code>onPostExecute()</code> which is called on the main thread.  You can use <code>onPostExecute()</code> to notify your <code>Activity</code> that the operation is finished and either pass the object directly through a custom callback interface you define, or by just having the <code>Activity</code> call <code>AsyncTask.get()</code> when the operation is complete to get back your parsed JSON.  So, for example we can extend your class with the following:</p>

<pre><code>public class JSONParser extends AsyncTask&lt;String, Void, JSONObject&gt; {
    public interface MyCallbackInterface {
        public void onRequestCompleted(JSONObject result);
    }

    private MyCallbackInterface mCallback;

    public JSONParser(MyCallbackInterface callback) {
        mCallback = callback;
    }

    public JSONObject getJSONFromUrl(String url) { /* Existing Method */ }

    @Override
    protected JSONObject doInBackground(String... params) {
        String url = params[0];            
        return getJSONFromUrl(url);
    }

    @Override
    protected onPostExecute(JSONObject result) {
        //In here, call back to Activity or other listener that things are done
        mCallback.onRequestCompleted(result);
    }
}
</code></pre>

<p>And use this from an Activity like so:</p>

<pre><code>public class MyActivity extends Activity implements MyCallbackInterface {
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //...existing code...

        JSONParser parser = new JSONParser(this);
        parser.execute("http://my.remote.url");
    }

    @Override
    public void onRequestComplete(JSONObject result) {
        //Hooray, here's my JSONObject for the Activity to use!
    }
}
</code></pre>

<p>Also, <strong>as a side note</strong>, you can replace all the following code in your parsing method:</p>

<pre><code>is = httpEntity.getContent();           

try {
    BufferedReader reader = new BufferedReader(new InputStreamReader(
            is, "iso-8859-1"), 8);
    StringBuilder sb = new StringBuilder();
    String line = null;
    while ((line = reader.readLine()) != null) {
        sb.append(line + "n");
     }
    is.close();
    json = sb.toString();
} catch (Exception e) {
    Log.e("Buffer Error", "Error converting result " + e.toString());
}
</code></pre>

<p>With this:</p>

<pre><code>json = EntityUtils.toString(httpEntity);
</code></pre>

<p>Hope that Helps!</p>
