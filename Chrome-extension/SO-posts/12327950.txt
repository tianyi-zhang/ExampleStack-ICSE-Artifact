<p>In your mainactivity, do this modification doing dbUser.open() before calling insert and doing dbUser.close() after insert is done.</p>

<p>This is the modification:</p>

<pre><code>                dbUser = new DBUserAdapter(SampleViewBase.this);
                dbUser.open(); // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; look at this modification too
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = sdf.format(Calendar.getInstance().getTime()); // reading local time in the system


                //    mRgba= (Mat)processFrame(mCamera);



                ByteArrayOutputStream blob = new ByteArrayOutputStream();
                bmp.compress(CompressFormat.PNG, 100 /*ignored for PNG*/, blob);
                photo = blob.toByteArray();
                dbUser.insert(photo, dateTime);
                dbUser.close(); // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; look at this modification too
                Log.d("bitmapdataaaaaaaaaaaaaaaaaaaaaaa",""+photo);
                Bitmap bmp32 = bmp.copy(Bitmap.Config.ARGB_8888, true);
</code></pre>

<p>This is the MainActivity code with modifications:</p>

<pre><code>    public abstract class SampleViewBase extends SurfaceView implements SurfaceHolder.Callback, Runnable {
    private static final String TAG = "Sample-ImageManipulations::SurfaceView";
    DBUserAdapter dbUser= null ;


    private SurfaceHolder       mHolder;
    private VideoCapture        mCamera;
    private Context mContext;
    byte[] photo;
    //  Mat mRgba;
    Mat mRgba = new Mat(); 
    Mat mRgba1= new Mat(); 
    // private FpsMeter            mFps;
    int[] intArray = new int[50];
//  int[] y;
//  int check=0;
    int cod=0;


    public SampleViewBase(Context context) {
        super(context);
        this.mContext = context;
        mHolder = getHolder();
        mHolder.addCallback(this);
        // mFps = new FpsMeter();
        Log.i(TAG, "Instantiated new " + this.getClass());
                                          }

    public boolean openCamera() {
        Log.i(TAG, "openCamera");
        synchronized (this) {
            releaseCamera();
            mCamera = new VideoCapture(Highgui.CV_CAP_ANDROID);
            if (!mCamera.isOpened()) {
                mCamera.release();
                mCamera = null;
                Log.e(TAG, "Failed to open native camera");
                return false;
            }
        }
        return true;
    }

    public void releaseCamera() {
        Log.i(TAG, "releaseCamera");
        synchronized (this) {
            if (mCamera != null) {
                mCamera.release();
                mCamera = null;
            }
        }
    }

    public void setupCamera(int width, int height) {
        Log.i(TAG, "setupCamera("+width+", "+height+")");
        synchronized (this) {
            if (mCamera != null &amp;&amp; mCamera.isOpened()) {
                List&lt;Size&gt; sizes = mCamera.getSupportedPreviewSizes();
                int mFrameWidth = width;
                int mFrameHeight = height;

                // selecting optimal camera preview size
                {
                    double minDiff = Double.MAX_VALUE;
                    for (Size size : sizes) {
                        if (Math.abs(size.height - height) &lt; minDiff) {
                            mFrameWidth = (int) size.width;
                            mFrameHeight = (int) size.height;
                            minDiff = Math.abs(size.height - height);
                        }
                    }
                }

                mCamera.set(Highgui.CV_CAP_PROP_FRAME_WIDTH, mFrameWidth);
                mCamera.set(Highgui.CV_CAP_PROP_FRAME_HEIGHT, mFrameHeight);
            }
        }

    }

    public void surfaceChanged(SurfaceHolder _holder, int format, int width, int height) {
        Log.i(TAG, "surfaceChanged");
        setupCamera(width, height);
    }

    public void surfaceCreated(SurfaceHolder holder) {
        Log.i(TAG, "surfaceCreated");
        (new Thread(this)).start();
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
        Log.i(TAG, "surfaceDestroyed");
        releaseCamera();
    }

    protected abstract Bitmap processFrame(VideoCapture capture);

    public void run() {
        Log.i(TAG, "Starting processing thread");
        //mFps.init();

        while (true) {
            Bitmap bmp = null;

            synchronized (this) {
                if (mCamera == null) {
                    Log.i(TAG, "mCamera == null");
                    break;
                }

                if (!mCamera.grab()) {
                    Log.e(TAG, "mCamera.grab() failed");
                    break;
                                   }
                 bmp = processFrame(mCamera);
                 String i1=bmp.toString();
                 dbUser = new DBUserAdapter(mContext);
                 dbUser.open(); // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; look at this modification too
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = sdf.format(Calendar.getInstance().getTime()); // reading local time in the system


                //    mRgba= (Mat)processFrame(mCamera);



                ByteArrayOutputStream blob = new ByteArrayOutputStream();
                bmp.compress(CompressFormat.PNG, 100 /*ignored for PNG*/, blob);
                photo = blob.toByteArray();
                dbUser.insert(photo, dateTime);
                dbUser.close(); // &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; look at this modification too
                Log.d("bitmapdataaaaaaaaaaaaaaaaaaaaaaa",""+photo);
                Bitmap bmp32 = bmp.copy(Bitmap.Config.ARGB_8888, true);

                Utils.bitmapToMat(bmp32,mRgba); 
                Utils.bitmapToMat(bmp32,mRgba1); 
        //      Log.d("lengthhhhhhhhhhhh",""+bitmapdata.length);
                //              for(int k=0;k&lt;bitmapdata.length;k++)
                //              {
                //                  
                //              }
                bmp = processFrame(mCamera);
                int i= bmp.getWidth();
                int j=bmp.getHeight();
                Log.d("Coming outoutttttttttttt ","Coming outputtttttttt");
                intArray=FindFeatures(mRgba1.getNativeObjAddr(),mRgba.getNativeObjAddr());
                Log.d("valueeeeeeeeee",""+intArray[0]);
                Log.d("valueeeeeeeeee",""+intArray[1]);
                Log.d("valueeeeeeeeee",""+intArray[2]);
                Log.d("valueeeeeeeeee",""+intArray[3]);
                Log.d("valueeeeeeeeee",""+intArray[3]);
            //  Log.d("Coming outo-----------------------==========","hjhjhj");
                //    mRgba=(Mat)bitmapdata;
                //  mFps.measure();
            //   Utils.matToBitmap(mRgba, bmp);

            }

            if (bmp != null)
            {
                Canvas canvas = mHolder.lockCanvas();
                if (canvas != null) 
                {
                    //Log.d("Coming outo---454545--------------------==========","hjhjhj");
                    canvas.drawBitmap(bmp, (canvas.getWidth() - bmp.getWidth()) / 2, (canvas.getHeight() - bmp.getHeight()), null);
                    // mFps.draw(canvas, (canvas.getWidth() - bmp.getWidth()) / 2, 0);

                    mHolder.unlockCanvasAndPost(canvas);
                }
                bmp.recycle();
                }

            //FindFeatures(bitmapdata,j,i);
        }

        Log.i(TAG, "Finishing processing thread");
    }
    //   public native void FindFeatures(final byte[] bitmapdata,long m,int height,int width);
    public native int[] FindFeatures(long n,long m);
    static {
    //  Log.d("Coming hereeeeeee","Coming hereeeeeeeeeeeeee");
        System.loadLibrary("mixed_sample");

    }

    public class Demo
    {
        int[] x;
        int[] y;
        int check=0;
        int cod=0;
    }
}
</code></pre>

<p>Modify DBUserAdapter constructor:</p>

<pre><code> public DBUserAdapter(Context context) {
            this.context = ctx; 
            DBHelper = new DatabaseHelper(context); 
        }
</code></pre>
