<p>I tried to search but couldn't find documentation either.
But while looking at source of AbsListView, I found following</p>

<pre><code> View mScrollUp;
 View mScrollDown;

 public void setScrollIndicators(View up, View down) {
    mScrollUp = up;
    mScrollDown = down;
}


void updateScrollIndicators() {
    if (mScrollUp != null) {
        boolean canScrollUp;
        // 0th element is not visible
        canScrollUp = mFirstPosition &gt; 0;

        // ... Or top of 0th element is not visible
        if (!canScrollUp) {
            if (getChildCount() &gt; 0) {
                View child = getChildAt(0);
                canScrollUp = child.getTop() &lt; mListPadding.top;
            }
        }

        mScrollUp.setVisibility(canScrollUp ? View.VISIBLE : View.INVISIBLE);
    }

    if (mScrollDown != null) {
        boolean canScrollDown;
        int count = getChildCount();

        // Last item is not visible
        canScrollDown = (mFirstPosition + count) &lt; mItemCount;

        // ... Or bottom of the last element is not visible
        if (!canScrollDown &amp;&amp; count &gt; 0) {
            View child = getChildAt(count - 1);
            canScrollDown = child.getBottom() &gt; mBottom - mListPadding.bottom;
        }

        mScrollDown.setVisibility(canScrollDown ? View.VISIBLE : View.INVISIBLE);
    }
}
</code></pre>

<p>Here mListPadding is</p>

<pre><code>   Rect mListPadding = new Rect();
</code></pre>

<p>This might help in understanding concept better. I haven't tried this yet but from my understanding, if top of first element of the listview or bottom of the last element or last element is not visible and if list can be scrollable (to up or down) then respective view gets visible by calling updateScrollIndicators() method</p>

<p>Hope this will be useful for you</p>
