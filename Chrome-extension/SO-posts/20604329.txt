<p>Here's my solution.
It isn't perfect, but it's good enough to score 100/100.
(I think that it shouldn't have passed a test with a big A and small X)</p>

<p>Anyway, it fills a new <code>counter</code> array with each leaf that falls</p>

<p>counter has the size of X because I don't care for leafs that fall farther than X, therefore the try-catch block.</p>

<p>AFTER X leafs fell (because it's the minimum amount of leafs) I begin checking whether I have a complete way - I'm checking that every int in count is greater than 0.
If so, I return i, else I break and try again.</p>

<pre><code>public static int solution(int X, int[] A){
    int[] count = new int[X];
    for (int i = 0; i &lt; A.length; i++){
        try{
            count[A[i]-1]++;
        } catch (ArrayIndexOutOfBoundsException e){ }
        if (i &gt;= X - 1){
            for (int j = 0; j&lt; count.length; j++){
                if (count[j] == 0){
                    break;
                }
                if (j == count.length - 1){
                    return i;
                }
            }
        }
    }
    return -1;
}
</code></pre>
