<p>I used to write from app widget to both internal and external Android memory with following code:</p>

<pre><code>        URL adr = new URL(cleanUrl);


        HttpURLConnection urlConnection = (HttpURLConnection) adr.openConnection();

        urlConnection.setRequestMethod("GET");
        urlConnection.setDoOutput(true);
        urlConnection.setReadTimeout(5000);

        urlConnection.connect();

        File file = new File(path, name);

        FileOutputStream fileOutput = new FileOutputStream(file);

        InputStream inputStream = urlConnection.getInputStream();

        byte[] buffer = new byte[1024];
        int bufferLength = 0; 
        while ( (bufferLength = inputStream.read(buffer)) &gt; 0 ) {
            fileOutput.write(buffer, 0, bufferLength);
        }
        fileOutput.flush();

        fileOutput.close();
</code></pre>

<p>Where path was both: </p>

<pre><code>        path = mContext.getFilesDir();
</code></pre>

<p>or</p>

<pre><code>        path = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
</code></pre>

<p>and</p>

<pre><code>        path.mkdirs(); 
</code></pre>

<p>In both cases I've got a <strong>FileNotFoundException</strong> and a created file with zero length.</p>

<p>I've <strong>managed to write</strong> to both types of Android memory with a following function:</p>

<pre><code>   protected InputStream get(String url) throws ClientProtocolException, IOException {

    final HttpClient client = new DefaultHttpClient();

    HttpGet getRequest = new HttpGet(url);

    HttpResponse response = client.execute(getRequest);
    if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
        return null;
    }


    final HttpEntity entity = response.getEntity();
    if (entity != null) {
        try {
            return entity.getContent();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    return null;
}
</code></pre>

<p>And following usage:</p>

<pre><code>          File file = new File(path, name);

        FileOutputStream fileOutput = new FileOutputStream(file);
        InputStream inputStream = get(cleanUrl);            

        byte[] buffer = new byte[1024];
        int bufferLength = 0;
        while ( (bufferLength = inputStream.read(buffer)) &gt; 0 ) {

            fileOutput.write(buffer, 0, bufferLength);
        }
        fileOutput.flush();

        fileOutput.close();
</code></pre>
