<p>Since you have a TabHost it's a lot more complicated than if you were using the ActionBar's tabs. The solution we settled for our app was to customize the frameworks 9-patch images for the tab indicator. Since there doesn't seem to be a way to reference a custom tab indicator, we had to replicate the tab view as well and use that when we create the tabs for the TabHost. You'll have to download the full framework source to get some of these files. Here's what you need to do:</p>

<p>1) Copy the file /data/res/drawable/tab_indicator_holo.xml from the frameworks source.</p>

<p>2) Copy the 9-patches referenced in tab_indicator_holo.xml and modify them to fit your application. You'll need the following files for each density you want to include: </p>

<ul>
<li>tab_selected_pressed_holo.9.png</li>
<li>tab_unselected_pressed_holo.9.png</li>
<li>tab_selected_focused_holo.9.png</li>
<li>tab_unselected_focused_holo.9.png</li>
<li>tab_selected_holo.9.png</li>
<li>tab_unselected_holo.9.png</li>
</ul>

<p>3) Create a custom tab style:</p>

<pre><code>&lt;style name="MyCustomTabView" parent="@android:style/Widget.Holo.Tab"&gt;
    &lt;item name="android:background"&gt;@drawable/tab_indicator_holo&lt;/item&gt;
&lt;/style&gt;
</code></pre>

<p>4) Create a copy of the tab view layout from the framework:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;!-- Copyright (C) 2011 The Android Open Source Project

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
--&gt;

&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_height="?android:attr/actionBarSize"
    android:orientation="horizontal"
    style="@style/MyCustomTabView"&gt;

    &lt;ImageView
        android:id="@+id/icon"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_vertical"
        android:paddingTop="12dip"
        android:paddingBottom="12dip"
        android:paddingLeft="12dip"
        android:paddingRight="12dip"
        android:visibility="gone"/&gt;

    &lt;TextView
        style="@android:style/Widget.Holo.ActionBar.TabText"
        android:id="@+id/title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_vertical"
        android:visibility="gone"/&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>5) The final step is in your activity's code, when you create the tabs, you set the indicator to a view you create from the above layout. This is what it could look like (this is Tabs1.java from the ApiDemos example app modifided to create the custom indicator view):</p>

<pre><code>/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.apis.view;

import android.app.TabActivity;
import android.os.Bundle;
import android.widget.TabHost;
import android.widget.TabHost.TabSpec;
import android.view.LayoutInflater;

import com.example.android.apis.R;

/**
 * An example of tabs that uses labels ({@link TabSpec#setIndicator(CharSequence)})
 * for its indicators and views by id from a layout file ({@link TabSpec#setContent(int)}).
 */
public class Tabs1 extends TabActivity {

    private View createTabIndicator(Drawable icon, String title) {
        if (mInflater == null) {
            mInflater = getLayoutInflater();
        }

        View view = mInflater.inflate(R.layout.tab_view, null);

        if (icon != null) {
            ImageView imageView = (ImageView) view.findViewById(R.id.icon);
            imageView.setImageDrawable(icon);
            imageView.setVisibility(View.VISIBLE);
        }

        if (title != null) {
            TextView textView = (TextView) view.findViewById(R.id.title);
            textView.setText(title);
            textView.setVisibility(View.VISIBLE);
        }

        return view;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        TabHost tabHost = getTabHost();

        LayoutInflater.from(this).inflate(R.layout.tabs1, tabHost.getTabContentView(), true);

        tabHost.addTab(tabHost.newTabSpec("tab1")
                .setIndicator(createTabIndicator(null, "tab1"))
                .setContent(R.id.view1));
        tabHost.addTab(tabHost.newTabSpec("tab2")
                .setIndicator(createTabIndicator(null, "tab2"))
                .setContent(R.id.view2));
        tabHost.addTab(tabHost.newTabSpec("tab3")
                .setIndicator(createTabIndicator(null, "tab3"))
                .setContent(R.id.view3));
    }
}
</code></pre>

<p>If the exact Holo look isn't a requirement for you, this could be simplified a bit. Hope this helps!  </p>
