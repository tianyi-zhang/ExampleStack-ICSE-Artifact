<p>I think what you need is in <a href="http://hi-android.info/src/com/android/mms/data/WorkingMessage.java.html" rel="nofollow">this class</a> of the source code .
Generally take a look at how they do it at google.. 
specifically take a look at this method </p>

<pre><code>    private static Uri createDraftMmsMessage(PduPersister persister, SendReq sendReq,
        SlideshowModel slideshow) {
    try {
        PduBody pb = slideshow.toPduBody();
        sendReq.setBody(pb);
        Uri res = persister.persist(sendReq, Mms.Draft.CONTENT_URI);
        slideshow.sync(pb);
        return res;
    } catch (MmsException e) {
        return null;
    }
}
</code></pre>

<p>And after creating the Draft (step one) then you update the draft to sent. by calling the other method </p>

<pre><code> private static void updateDraftMmsMessage(Uri uri, PduPersister persister,
        SlideshowModel slideshow, SendReq sendReq) {
    if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
        LogTag.debug("updateDraftMmsMessage uri=%s", uri);
    }
    if (uri == null) {
        Log.e(TAG, "updateDraftMmsMessage null uri");
        return;
    }
    persister.updateHeaders(uri, sendReq);
    final PduBody pb = slideshow.toPduBody();

    try {
        persister.updateParts(uri, pb);
    } catch (MmsException e) {
        Log.e(TAG, "updateDraftMmsMessage: cannot update message " + uri);
    }

    slideshow.sync(pb);
}
</code></pre>

<p>Now I know you cannot run this code from your app since you're not building in the source, or even if you are it may be a challenge to do so (even though I think that if you do build in the source if you code correctly the google code should handle the save stuff)</p>

<p>in any case you should be able to save mms message in the provider by following what they do in this class. </p>

<p>cheers...</p>

<p>and post your progress...</p>
