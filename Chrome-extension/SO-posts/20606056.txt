<pre><code>I can't read &lt;content&gt; tag from the response
</code></pre>

<p>Under tag content you have tag script. So you need to parse script tag also</p>

<pre><code>&lt;content&gt;
  &lt;script&gt; // Original sdk: "http://lp.mydas.mobi/custom/rich/common/js/mmisdk/mmsdk.min.js" &lt;/script&gt;
&lt;/content&gt;
</code></pre>

<p>Example :</p>

<p>I added dummy values for testing. I put the xml in assests folder and i parsed the xml as below   </p>

<pre><code>&lt;mojiva&gt;

    &lt;ad
        feed="xyz"
        type="thirdparty" &gt;

        &lt;url&gt;
                &lt;![CDATA[http://google.com]]&gt;
        &lt;/url&gt;

        &lt;text&gt;
                &lt;![CDATA[my text]]&gt;
        &lt;/text&gt;

        &lt;track&gt;
                 &lt;![CDATA[my track]]&gt;
        &lt;/track&gt;

        &lt;content&gt;

            &lt;script&gt;
   "http://lp.mydas.mobi/custom/rich/common/js/mmisdk/mmsdk.min.js" 
            &lt;/script&gt;
        &lt;/content&gt;
    &lt;/ad&gt;

&lt;/mojiva&gt;
</code></pre>

<p>And  parsing</p>

<pre><code>InputStream is = MainActivity.this.getResources().getAssets().open("xmlparser.xml");
new Testing(is);
</code></pre>

<p>Then</p>

<pre><code>    public class Testing {

    InputStream is;
    ArrayList&lt;AllEntry&gt; all;
    private static final String ns = null;
    public Testing(InputStream is) {
        // TODO Auto-generated constructor stub
        this.is = is;
        getData(); 
    }
    public List&lt;AllEntry&gt; getData() {
        try {
            XmlPullParser parser = Xml.newPullParser();
            parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
            parser.setInput(is, null);
            parser.nextTag();
            all = (ArrayList&lt;AllEntry&gt;) readFeed(parser);
            for(int i=0;i&lt;all.size();i++)
            {

                Log.i("........",""+all.get(i).url);
                Log.i("........",""+all.get(i).text);
                Log.i("........",""+all.get(i).track);
                Log.i("........",""+all.get(i).content);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return all;
    }

    private List&lt;AllEntry&gt; readFeed(XmlPullParser parser)
            throws XmlPullParserException, IOException {
        List&lt;AllEntry&gt; entries = new ArrayList&lt;AllEntry&gt;();
       String value=null;
        parser.require(XmlPullParser.START_TAG, ns, "mojiva");
        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }
            String name = parser.getName();
            if (name.equals("ad")) {
                String relType = parser.getAttributeValue(null, "feed");  
                  if (relType.equals("xyz")){
                      value = parser.getAttributeValue(null, "type");
                   if(value.equals("thirdparty"))   
                    entries.add(readAd(parser));

              }

            } else {
                skip(parser);
            }
        }
        return entries;
    }

    private AllEntry readAd(XmlPullParser parser) throws XmlPullParserException, IOException {
        parser.require(XmlPullParser.START_TAG, ns, "ad");

        String url = null;
        String text = null;
        String track = null;
        String content = null;
        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }
            String name = parser.getName();
            Log.i("...............",name);
            if (name.equals("url")) {
                url = readUrl(parser);
            } else if (name.equals("text")) {
                text= readTexta(parser);
            } else if (name.equals("track")) {
               track = readTrack(parser);
            } 
            else if (name.equals("content")) {
                   content = readContent(parser);
                }else {
                skip(parser);
            }
        }
        return new AllEntry(url, text, track,content);
    }


    private String readContent(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "content");
         String content = null;
        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }
            String name = parser.getName();
            if (name.equals("script")) {
             content=   readScript(parser);
             Log.i(".......",content);
            } else {
                skip(parser);
            }
        }  

        return content;
    }
    private String readScript(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "script");
        String url = readText(parser);
        parser.require(XmlPullParser.END_TAG, ns, "script");
        return url;
    }
    private String readUrl(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "url");
        String url = readText(parser);
        parser.require(XmlPullParser.END_TAG, ns, "url");
        return url;
    }

    private String readTexta(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "text");
        String text = readText(parser);
        parser.require(XmlPullParser.END_TAG, ns, "text");
        return text;
    }
    private String readTrack(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "track");
        String track = readText(parser);
        parser.require(XmlPullParser.END_TAG, ns, "track");
        return track;
    }
     private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {
            String result = "";
            if (parser.next() == XmlPullParser.TEXT) {
                result = parser.getText();
                parser.nextTag();
            }
            return result;
        }

    private void skip(XmlPullParser parser) throws XmlPullParserException,
            IOException {
        if (parser.getEventType() != XmlPullParser.START_TAG) {
            throw new IllegalStateException();
        }
        int depth = 1;
        while (depth != 0) {
            switch (parser.next()) {
            case XmlPullParser.END_TAG:
                depth--;
                break;
            case XmlPullParser.START_TAG:
                depth++;
                break;
            }
        }
    }
    public static class AllEntry{
        //public final String ad;
        public final String url;
        public final String text;
        public final String track;
        public final String content;

        private AllEntry(String url, String text,String track,String content) {
            this.url = url;
            this.text = text;
            this.track = track;
            this.content= content;

        }
    }
}
</code></pre>

<p>Log</p>

<pre><code>12-16 03:04:02.956: I/........(1932):                 http://google.com
12-16 03:04:02.956: I/........(1932):         
12-16 03:04:02.956: I/........(1932):                 my text
12-16 03:04:02.956: I/........(1932):         
12-16 03:04:02.956: I/........(1932):                  my track
12-16 03:04:02.956: I/........(1932):         
12-16 03:04:02.966: I/........(1932):    "http://lp.mydas.mobi/custom/rich/common/js/mmisdk/mmsdk.min.js" 
</code></pre>
