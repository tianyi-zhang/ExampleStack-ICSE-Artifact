<p><code>boolean[] b = new boolean[3]</code> is a boolean array with 3 data points</p>

<pre><code>b[0] = true; //or false
b[1] = false; //or true
b[2] = true; //or false
</code></pre>

<p><code>int count = 0;</code> is a variable of type <code>int</code></p>

<p><code>void set(boolean [] x, int i)</code> sets a <code>boolean array</code> to equal true in position one. For example</p>

<pre><code>set(b,1)
</code></pre>

<p>would set the variables to</p>

<pre><code>b[1] = true
count = 1
</code></pre>

<p><code>ba</code> is an instance of your class C. In this case it allows you to call your method <code>set(boolean [] x, int i)</code> and your boolean array, <code>b</code> from your code</p>

<p>Finally the first if statement <code>if(b[0]&amp;&amp;b[1]||b[2])</code> says if(the first position, <code>b[0]</code> in b is true <strong>and</strong> either position two, <code>b[1]</code>, <strong>or</strong> the third position, <code>b[2]</code>, is true) then add one to the count variable.</p>

<p>The second if statement <code>if(b[1]&amp;&amp;b[++count-2])</code> says if(the second position in the array, <code>b[1]</code>, is true <strong>and</strong> b[count-1] is true) then add 7 to the variable count.</p>

<p>The last line of <code>test()</code> says print out the value of the variable count to the command console</p>

<p><strong>Edit</strong></p>

<p>A vector is another method of storing values in Java but it is not limited to one datatype, such as <code>int</code> or <code>double</code>. For example</p>

<pre><code>import java.util.*;

public class VectorDemo {

   public static void main(String args[]) {
      // initial size is 3, increment is 2
      Vector v = new Vector(3, 2);
      System.out.println("Initial size: " + v.size());
      System.out.println("Initial capacity: " +
      v.capacity());
      v.addElement(new Integer(1));
      v.addElement(new Integer(2));
      System.out.println("Capacity after four additions: " +
          v.capacity());

      v.addElement(new Double(5.45));
      System.out.println("Current capacity: " +
      v.capacity());
      v.addElement(new Double(6.08));
      v.addElement(new Integer(7));
      System.out.println("Current capacity: " +
      v.capacity());
      v.addElement(new Float(9.4));
      v.addElement(new Integer(10));
      System.out.println("Current capacity: " +
      v.capacity());
      v.addElement(new Integer(11));
      v.addElement(new Integer(12));
      System.out.println("First element: " +
         (Integer)v.firstElement());
      System.out.println("Last element: " +
         (Integer)v.lastElement());
      if(v.contains(new Integer(3)))
         System.out.println("Vector contains 3.");
      // enumerate the elements in the vector.
      Enumeration vEnum = v.elements();
      System.out.println("\nElements in vector:");
      while(vEnum.hasMoreElements())
         System.out.print(vEnum.nextElement() + " ");
      System.out.println();
   }
}
</code></pre>

<p>Whereas an array can only hold one type of data and its size is specified when it is declared. For example</p>

<pre><code>int[] intArray = new int[2];
intArray[0] = 1;
intArray[1] = 250;
</code></pre>

<p>or it can be declared as</p>

<pre><code>int[] intArray = {1,250};
</code></pre>

<p>See <a href="http://www.tutorialspoint.com/java/java_vector_class.htm" rel="nofollow">here</a> for more information on Vectors and <a href="http://www.tutorialspoint.com/java/java_arrays.htm" rel="nofollow">here</a> for more information on Arrays.</p>
