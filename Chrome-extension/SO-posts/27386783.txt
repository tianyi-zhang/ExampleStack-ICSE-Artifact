<p>Google Cloud Platform has multiple datacenters and they do not always hold the same state of the same record. This is especially true if you query for the value immediately after increasing it. You can use ancestor queries to retrieve the Entity, that will make it up to date and consistent. Please look at the article [1] for details.</p>

<p>Here's a link with ancestor query [2]. The idea is that when you use an ancestor query, it forces the query to return data after all changes are finalized (for that query). This ensures up-to-date strong consistency.</p>

<p>[1] - <a href="https://cloud.google.com/developers/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore/" rel="nofollow">https://cloud.google.com/developers/articles/balancing-strong-and-eventual-consistency-with-google-cloud-datastore/</a></p>

<p>[2] - <a href="https://cloud.google.com/appengine/docs/java/datastore/queries#Java_Ancestor_queries" rel="nofollow">https://cloud.google.com/appengine/docs/java/datastore/queries#Java_Ancestor_queries</a></p>

<p>===---=== Example (from the 2nd link I provided)</p>

<pre><code>DatastoreService datastore = DatastoreServiceFactory.getDatastoreService();

Entity tom = new Entity("Person", "Tom");
Key tomKey = tom.getKey();
datastore.put(tom);


Entity weddingPhoto = new Entity("Photo", tomKey);
weddingPhoto.setProperty("imageURL",
                         "http://domain.com/some/path/to/wedding_photo.jpg");

Entity babyPhoto = new Entity("Photo", tomKey);
babyPhoto.setProperty("imageURL",
                      "http://domain.com/some/path/to/baby_photo.jpg");

Entity dancePhoto = new Entity("Photo", tomKey);
dancePhoto.setProperty("imageURL",
                       "http://domain.com/some/path/to/dance_photo.jpg");

Entity campingPhoto = new Entity("Photo");
campingPhoto.setProperty("imageURL",
                         "http://domain.com/some/path/to/camping_photo.jpg");

List&lt;Entity&gt; photoList = Arrays.asList(weddingPhoto, babyPhoto,
                                       dancePhoto, campingPhoto);
datastore.put(photoList);


Query photoQuery = new Query("Photo")
                         .setAncestor(tomKey);  


// This returns weddingPhoto, babyPhoto, and dancePhoto,
// but not campingPhoto, because tom is not an ancestor
List&lt;Entity&gt; results = datastore.prepare(photoQuery)
                                .asList(FetchOptions.Builder.withDefaults());
</code></pre>

<p>===---===
See these parts:</p>

<p>Entity weddingPhoto = new Entity("Photo", tomKey);</p>

<p>Entity dancePhoto = new Entity("Photo", tomKey);</p>

<p>This generates an Entity with an ancestor key "tomKey".</p>

<p>Now save the Entities into the Datastore:</p>

<pre><code>List&lt;Entity&gt; photoList = Arrays.asList(weddingPhoto, babyPhoto,
                                           dancePhoto, campingPhoto);
datastore.put(photoList);
</code></pre>

<p>When you need to fetch the results, perform a special query:</p>

<pre><code>Query photoQuery = new Query("Photo")
                             .setAncestor(tomKey); 
</code></pre>

<p>This makes sure the photoQuery isn't just a random query aimed at any random datacenter pulling out any data; it makes sure it fetches the up-to-date data from the datastore.</p>
