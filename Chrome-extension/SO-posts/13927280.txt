<p>Look at this post, it have the similar problem. You need to use Media scanner.
<a href="http://stackoverflow.com/questions/11552014/android-why-my-saved-image-is-not-appearing-in-the-default-gallery-of-my-phone">Android - Why my saved image is not appearing in the default gallery of my phone?</a></p>

<pre><code>import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Environment;


public class ImageSaver {
    private String TAG = "ImageSaver";
    private Context context;
    private String FILENAME_LEADER = "bijintokei";
    private String DOWNLOAD_FOLDER = "download";
    private String STORAGE_DESTINATION = "/sdcard";
    private CompressFormat COMPRESS_FORMAT = CompressFormat.JPEG;

    /**
     * Return file extension
     * 
     * @return
     */
    private String getFileExtention() {
        String result = "bmp";
        if (COMPRESS_FORMAT.equals(CompressFormat.JPEG)) {
            result = "jpg";
        }
        if (COMPRESS_FORMAT.equals(CompressFormat.PNG)) {
            result = "png";
        }
        return result;
    }

    /**
     * Constructor
     * 
     * @param context
     */
    public ImageSaver(Context context) {
        this.context = context;
    }

    /**
     * Return appropriate file path for saving
     * 
     * @param hhmm
     * @return File path
     */
    public String getFilePath4Saving(String hhmm) {
        String fileName = "", destination = this.getDefaultLocation(), filePath = "";
        int i = 0;
        File file;
        do {
            fileName = getMixedFileName(hhmm, i++);
            filePath = String.format("%s/%s", destination, fileName);
            file = new File(filePath);
        } while (file.exists());
        Log.d(TAG, "File path for saving: " + filePath);
        return filePath;

    }

    /**
     * Return a mixed file name from: - FILENAME_LEADER - Specified time - Order
     * number
     * 
     * @param hhmm
     * @param i
     * @return
     */
    private String getMixedFileName(String hhmm, int i) {
        String fileName = String.format("%s%s", FILENAME_LEADER, hhmm);
        String extension = getFileExtention();
        String result = String.format("%s.%s", fileName, extension);
        if (i &gt; 0) {
            result = String.format("%s-%d.%s", fileName, i, extension);
        }
        return result;
    }

    /**
     * Make sure Download folder is exists in the specified path
     */
    private boolean MakeSureFolderIsExists(String path, String folder) {
        File file = new File(path + "/" + folder);
        boolean result = true;
        if (!file.exists()) {
            result = file.mkdir();
            Log.d(TAG,
                    "Create folder " + path + "/" + folder + ": "
                            + Boolean.toString(result));
        }
        return result;
    }

    /**
     * Return default location for saving image
     * 
     * @return By default return external storage
     */
    private String getDefaultLocation() {
        String result = this.STORAGE_DESTINATION;
        if (MakeSureFolderIsExists(result, DOWNLOAD_FOLDER)) {
            result = result + "/" + DOWNLOAD_FOLDER;
        }
        return result;
    }

    /**
     * Save bitmap for hhmm minute to default destination
     * 
     * @param bitmap
     * @param hhmm
     * @throws IOException
     */
    public void saveImage(Bitmap bitmap, String hhmm) throws IOException {
        Log.d(TAG, "Saving image: " + hhmm);
        String filePath = getFilePath4Saving(hhmm);
        File fo = new File(filePath);
        FileOutputStream out = new FileOutputStream(fo);
        bitmap.compress(CompressFormat.JPEG, 100, out);
        out.flush();
        out.close();
        requestMediaScannerRefesh();
    }

    /**
     * Require Media Scanner refresh
     */
    private void requestMediaScannerRefesh() {
        context.sendBroadcast(new Intent(Intent.ACTION_MEDIA_MOUNTED, Uri
                .parse("file://" + Environment.getExternalStorageDirectory())));
    }
    public static Bitmap decodeFile(File f,int screenHeight,
            int screenWidth){
        Bitmap b = null;
        try {

            //Decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;

            FileInputStream fis = new FileInputStream(f);
            BitmapFactory.decodeStream(fis, null, o);
            fis.close();

            int scale = 1;
            if (o.outHeight &gt; screenHeight || o.outWidth &gt; screenWidth) {
                scale = (int)Math.pow(2, (int) Math.round(Math.log(screenHeight / (double) Math.max(o.outHeight, o.outWidth)) / Math.log(0.5)));
            }

            //Decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize = scale;
            fis = new FileInputStream(f);
            b = BitmapFactory.decodeStream(fis, null, o2);
            fis.close();
        } catch (IOException e) {
        }
        return b;
    }
}
</code></pre>
