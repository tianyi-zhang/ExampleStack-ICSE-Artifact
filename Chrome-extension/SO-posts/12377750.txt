<p>FrostWire Team over here.</p>

<p>All the selector crap api doesn't work as expected. After trying all the solutions presented in this thread to no good, we just solved the problem at the moment of inflating the ListView Item.</p>

<ol>
<li><p>Make sure your item keeps it's state, we did it as a member variable of the MenuItem (boolean selected)</p></li>
<li><p>When you inflate, ask if the underlying item is selected, if so, just set the drawable resource that you want as the background (be it a 9patch or whatever). Make sure your adapter is aware of this and that it calls notifyDataChanged() when something has been selected.</p>

<pre><code>    @Override
public View getView(int position, View convertView, ViewGroup parent) {
    View rowView = convertView;
    if (rowView == null) {
        LayoutInflater inflater = act.getLayoutInflater();
        rowView = inflater.inflate(R.layout.slidemenu_listitem, null);
        MenuItemHolder viewHolder = new MenuItemHolder();
        viewHolder.label = (TextView) rowView.findViewById(R.id.slidemenu_item_label);
        viewHolder.icon = (ImageView) rowView.findViewById(R.id.slidemenu_item_icon);
        rowView.setTag(viewHolder);
    }

    MenuItemHolder holder = (MenuItemHolder) rowView.getTag();
    String s = items[position].label;
    holder.label.setText(s);
    holder.icon.setImageDrawable(items[position].icon);

    //Here comes the magic
    rowView.setSelected(items[position].selected);

    rowView.setBackgroundResource((rowView.isSelected()) ? R.drawable.slidemenu_item_background_selected : R.drawable.slidemenu_item_background);

    return rowView;
}
</code></pre></li>
</ol>

<p>It'd be really nice if the selectors would actually work, in theory it's a nice and elegant solution, but it seems like it's broken. KISS.</p>
