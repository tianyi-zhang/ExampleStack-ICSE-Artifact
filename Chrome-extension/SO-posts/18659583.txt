<p>Very similar to this: <a href="http://stackoverflow.com/questions/7631890/opengl-rotation-at-a-point">Opengl rotation at a point</a></p>

<p>You're already rotating about the correct axis, just around the wrong pivot. You want to translate the point to rotate around to be at the origin, then apply the rotation, then translate back again.</p>

<p><img src="http://i.stack.imgur.com/NyeAh.png" alt="enter image description here"></p>

<p>So to rotate around point x, y...</p>

<pre><code>translate(-x, -y)
rotate(...)
translate(x, y)

drawMyObject()
</code></pre>

<p>Creating a function drawAxes() which draws 3 r/g/b lines can be very helpful for figuring out transformation orders and will allow you to "see" the otherwise invisible origins, directions and scales after each transform.</p>

<p><em>EDIT</em> forgot it was android, sorry. Maybe try with this: <a href="http://stackoverflow.com/questions/16027455/what-is-the-easiest-way-to-draw-line-using-opengl-es-android">What is the easiest way to draw line using OpenGL-ES (android)</a></p>

<p><em>Ignore the following unless desktop OpenGL:</em></p>

<pre><code>void drawAxes()
{
    glBegin(GL_LINES);
    glColor3f(1.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(1.0f, 0.0f, 0.0f);
    glColor3f(0.0f, 1.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 1.0f, 0.0f);
    glColor3f(0.0f, 0.0f, 1.0f);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3f(0.0f, 0.0f, 1.0f);
    glEnd();
}
</code></pre>
