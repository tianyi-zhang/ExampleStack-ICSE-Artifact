<p>(1) Yes, absolutely. The tokens (class: CoreLabel) returned each store begin and end character offsets for each token. The easiest way to get at the offsets for whole entities is with the <code>classifyToCharacterOffsets()</code> method. See the example below.</p>

<p>(2) Yes, but there is some subtlety in interpreting these. That is, a lot of the uncertainty is often over not whether these three words should be a PERSON or an ORGANIZATION but whether the ORGANIZATION should be two words long or three words long, etc. Actually, the NER classifier is putting probabilities (really, unnormalized clique potentials) over the assignments of labels and label sequences at each point. There are various methods that you can use to interrogate these scores. I illustrate a couple of the simpler ones, where they are rendered as probabilities below.  If you want more and know how to interpret CRFs, you can get the CliqueTree for a sentence and do what you want with it. In practice, rather than doing any of this, often the easier thing to deal with is just a k-best list of labelings, each with a full sentence probability assigned. I also show that below.</p>

<p>(3) Sorry, not with the code that is there now. It's just a simple demo. If you wanted to extend it's functionality, you're welcome to. Happy to get code contributions back!</p>

<p>Below is an expanded version of <code>NERDemo.java</code> from the distribution, which illustrates some of these options.</p>

<pre><code>package edu.stanford.nlp.ie.demo;

import edu.stanford.nlp.ie.AbstractSequenceClassifier;
import edu.stanford.nlp.ie.crf.*;
import edu.stanford.nlp.io.IOUtils;
import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.CoreAnnotations;
import edu.stanford.nlp.sequences.DocumentReaderAndWriter;
import edu.stanford.nlp.sequences.PlainTextDocumentReaderAndWriter;
import edu.stanford.nlp.util.Triple;

import java.util.List;


/** This is a demo of calling CRFClassifier programmatically.
 *  &lt;p&gt;
 *  Usage: {@code java -mx400m -cp "stanford-ner.jar:." NERDemo [serializedClassifier [fileName]] }
 *  &lt;p&gt;
 *  If arguments aren't specified, they default to
 *  classifiers/english.all.3class.distsim.crf.ser.gz and some hardcoded sample text.
 *  &lt;p&gt;
 *  To use CRFClassifier from the command line:
 *  &lt;/p&gt;&lt;blockquote&gt;
 *  {@code java -mx400m edu.stanford.nlp.ie.crf.CRFClassifier -loadClassifier [classifier] -textFile [file] }
 *  &lt;/blockquote&gt;&lt;p&gt;
 *  Or if the file is already tokenized and one word per line, perhaps in
 *  a tab-separated value format with extra columns for part-of-speech tag,
 *  etc., use the version below (note the 's' instead of the 'x'):
 *  &lt;/p&gt;&lt;blockquote&gt;
 *  {@code java -mx400m edu.stanford.nlp.ie.crf.CRFClassifier -loadClassifier [classifier] -testFile [file] }
 *  &lt;/blockquote&gt;
 *
 *  @author Jenny Finkel
 *  @author Christopher Manning
 */

public class NERDemo {

  public static void main(String[] args) throws Exception {

    String serializedClassifier = "classifiers/english.all.3class.distsim.crf.ser.gz";

    if (args.length &gt; 0) {
      serializedClassifier = args[0];
    }

    AbstractSequenceClassifier&lt;CoreLabel&gt; classifier = CRFClassifier.getClassifier(serializedClassifier);

    /* For either a file to annotate or for the hardcoded text example, this
       demo file shows several ways to process the input, for teaching purposes.
    */

    if (args.length &gt; 1) {

      /* For the file, it shows (1) how to run NER on a String, (2) how
         to get the entities in the String with character offsets, and
         (3) how to run NER on a whole file (without loading it into a String).
      */

      String fileContents = IOUtils.slurpFile(args[1]);
      List&lt;List&lt;CoreLabel&gt;&gt; out = classifier.classify(fileContents);
      for (List&lt;CoreLabel&gt; sentence : out) {
        for (CoreLabel word : sentence) {
          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');
        }
        System.out.println();
      }

      System.out.println("---");
      out = classifier.classifyFile(args[1]);
      for (List&lt;CoreLabel&gt; sentence : out) {
        for (CoreLabel word : sentence) {
          System.out.print(word.word() + '/' + word.get(CoreAnnotations.AnswerAnnotation.class) + ' ');
        }
        System.out.println();
      }

      System.out.println("---");
      List&lt;Triple&lt;String, Integer, Integer&gt;&gt; list = classifier.classifyToCharacterOffsets(fileContents);
      for (Triple&lt;String, Integer, Integer&gt; item : list) {
        System.out.println(item.first() + ": " + fileContents.substring(item.second(), item.third()));
      }
      System.out.println("---");
      System.out.println("Ten best");
      DocumentReaderAndWriter&lt;CoreLabel&gt; readerAndWriter = classifier.makePlainTextReaderAndWriter();
      classifier.classifyAndWriteAnswersKBest(args[1], 10, readerAndWriter);

      System.out.println("---");
      System.out.println("Probabilities");
      classifier.printProbs(args[1], readerAndWriter);


      System.out.println("---");
      System.out.println("First Order Clique Probabilities");
      ((CRFClassifier) classifier).printFirstOrderProbs(args[1], readerAndWriter);

    } else {

      /* For the hard-coded String, it shows how to run it on a single
         sentence, and how to do this and produce several formats, including
         slash tags and an inline XML output format. It also shows the full
         contents of the {@code CoreLabel}s that are constructed by the
         classifier. And it shows getting out the probabilities of different
         assignments and an n-best list of classifications with probabilities.
      */

      String[] example = {"Good afternoon Rajat Raina, how are you today?",
                          "I go to school at Stanford University, which is located in California." };
      for (String str : example) {
        System.out.println(classifier.classifyToString(str));
      }
      System.out.println("---");

      for (String str : example) {
        // This one puts in spaces and newlines between tokens, so just print not println.
        System.out.print(classifier.classifyToString(str, "slashTags", false));
      }
      System.out.println("---");

      for (String str : example) {
        System.out.println(classifier.classifyWithInlineXML(str));
      }
      System.out.println("---");

      for (String str : example) {
        System.out.println(classifier.classifyToString(str, "xml", true));
      }
      System.out.println("---");

      int i=0;
      for (String str : example) {
        for (List&lt;CoreLabel&gt; lcl : classifier.classify(str)) {
          for (CoreLabel cl : lcl) {
            System.out.print(i++ + ": ");
            System.out.println(cl.toShorterString());
          }
        }
      }

      System.out.println("---");

    }
  }

}
</code></pre>
