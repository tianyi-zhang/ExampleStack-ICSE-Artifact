<p>Versions of Android earlier than 8 do not have <a href="http://developer.android.com/reference/android/util/Base64.html" rel="nofollow">Base64</a> built in. You can use this class in that case.</p>

<pre class="lang-java prettyprint-override"><code>public class Base64 {
   private static final char[] S_BASE64CHAR = {
       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
       'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
       'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd',
       'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
       'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7',
       '8', '9', '+', '/'
   };
   private static final char S_BASE64PAD = '=';
   private static final byte[] S_DECODETABLE = new byte[128];
   static {
       for (int i = 0;  i &lt; S_DECODETABLE.length;  i ++)
           S_DECODETABLE[i] = Byte.MAX_VALUE;  // 127
       for (int i = 0;  i &lt; S_BASE64CHAR.length;  i ++) // 0 to 63
           S_DECODETABLE[S_BASE64CHAR[i]] = (byte)i;
   }

   private static int decode0(char[] ibuf, byte[] obuf, int wp) throws Exception {
       int outlen = 3;
       if (ibuf[3] == S_BASE64PAD)  outlen = 2;
       if (ibuf[2] == S_BASE64PAD)  outlen = 1;
       int b0 = S_DECODETABLE[ibuf[0]];
       int b1 = S_DECODETABLE[ibuf[1]];
       int b2 = S_DECODETABLE[ibuf[2]];
       int b3 = S_DECODETABLE[ibuf[3]];
       switch (outlen) {
       case 1:
           obuf[wp] = (byte)(b0 &lt;&lt; 2 &amp; 0xfc | b1 &gt;&gt; 4 &amp; 0x3);
           return 1;
       case 2:
           obuf[wp++] = (byte)(b0 &lt;&lt; 2 &amp; 0xfc | b1 &gt;&gt; 4 &amp; 0x3);
           obuf[wp] = (byte)(b1 &lt;&lt; 4 &amp; 0xf0 | b2 &gt;&gt; 2 &amp; 0xf);
           return 2;
       case 3:
           obuf[wp++] = (byte)(b0 &lt;&lt; 2 &amp; 0xfc | b1 &gt;&gt; 4 &amp; 0x3);
           obuf[wp++] = (byte)(b1 &lt;&lt; 4 &amp; 0xf0 | b2 &gt;&gt; 2 &amp; 0xf);
           obuf[wp] = (byte)(b2 &lt;&lt; 6 &amp; 0xc0 | b3 &amp; 0x3f);
           return 3;
       default:
           throw new Exception("internalError00");
       }
   }

   /**
    *
    */
   public static byte[] decode(char[] data, int off, int len) throws Exception {
       char[] ibuf = new char[4];
       int ibufcount = 0;
       byte[] obuf = new byte[len/4*3+3];
       int obufcount = 0;
       for (int i = off;  i &lt; off+len;  i ++) {
           char ch = data[i];
           if (ch == S_BASE64PAD
               || ch &lt; S_DECODETABLE.length &amp;&amp; S_DECODETABLE[ch] != Byte.MAX_VALUE) {
               ibuf[ibufcount++] = ch;
               if (ibufcount == ibuf.length) {
                   ibufcount = 0;
                   obufcount += decode0(ibuf, obuf, obufcount);
               }
           }
       }
       if (obufcount == obuf.length)
           return obuf;
       byte[] ret = new byte[obufcount];
       System.arraycopy(obuf, 0, ret, 0, obufcount);
       return ret;
   }

   /**
    *
    */
   public static byte[] decode(String data) throws Exception {
       char[] ibuf = new char[4];
       int ibufcount = 0;
       byte[] obuf = new byte[data.length()/4*3+3];
       int obufcount = 0;
       for (int i = 0;  i &lt; data.length();  i ++) {
           char ch = data.charAt(i);
           if (ch == S_BASE64PAD
               || ch &lt; S_DECODETABLE.length &amp;&amp; S_DECODETABLE[ch] != Byte.MAX_VALUE) {
               ibuf[ibufcount++] = ch;
               if (ibufcount == ibuf.length) {
                   ibufcount = 0;
                   obufcount += decode0(ibuf, obuf, obufcount);
               }
           }
       }
       if (obufcount == obuf.length)
           return obuf;
       byte[] ret = new byte[obufcount];
       System.arraycopy(obuf, 0, ret, 0, obufcount);
       return ret;
   }


   /**
    * Returns base64 representation of specified byte array.
    */
   public static String encode(byte[] data) {
       return encode(data, 0, data.length);
   }

   /**
    * Returns base64 representation of specified byte array.
    */
   public static String encode(byte[] data, int off, int len) {
       if (len &lt;= 0)  return "";
       char[] out = new char[len/3*4+4];
       int rindex = off;
       int windex = 0;
       int rest = len-off;
       while (rest &gt;= 3) {
           int i = ((data[rindex]&amp;0xff)&lt;&lt;16)
                   +((data[rindex+1]&amp;0xff)&lt;&lt;8)
                   +(data[rindex+2]&amp;0xff);
           out[windex++] = S_BASE64CHAR[i&gt;&gt;18];
           out[windex++] = S_BASE64CHAR[(i&gt;&gt;12)&amp;0x3f];
           out[windex++] = S_BASE64CHAR[(i&gt;&gt;6)&amp;0x3f];
           out[windex++] = S_BASE64CHAR[i&amp;0x3f];
           rindex += 3;
           rest -= 3;
       }
       if (rest == 1) {
           int i = data[rindex]&amp;0xff;
           out[windex++] = S_BASE64CHAR[i&gt;&gt;2];
           out[windex++] = S_BASE64CHAR[(i&lt;&lt;4)&amp;0x3f];
           out[windex++] = S_BASE64PAD;
           out[windex++] = S_BASE64PAD;
       } else if (rest == 2) {
           int i = ((data[rindex]&amp;0xff)&lt;&lt;8)+(data[rindex+1]&amp;0xff);
           out[windex++] = S_BASE64CHAR[i&gt;&gt;10];
           out[windex++] = S_BASE64CHAR[(i&gt;&gt;4)&amp;0x3f];
           out[windex++] = S_BASE64CHAR[(i&lt;&lt;2)&amp;0x3f];
           out[windex++] = S_BASE64PAD;
       }
       return new String(out, 0, windex);
   }

}
</code></pre>
