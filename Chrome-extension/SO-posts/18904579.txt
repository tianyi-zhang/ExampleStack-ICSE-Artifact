<p>Here is what i did, hope it fits your need, i did it with 2 cases only, but it's the same thing for more cases : </p>

<pre><code>public class MainActivity extends Activity {

    CaseWorker worker;


    Button button1;
    Button button2;


    @Override
    protected void onCreate(Bundle savedInstanceState)  {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        button1 = (Button)findViewById(R.id.button1);
        button2 = (Button)findViewById(R.id.button2);

        button1.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                worker = new CaseOne();

            }
        });


        button2.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {
                worker = new CaseTwo();

            }
        });

    }

    public void anotherMethod(String[] givenVitals){
       worker.SetVitals(givenVitals);
   }
}
</code></pre>

<p>Here is the CaseWorker interface, you can add to it other behaviours that are case dependent : </p>

<pre><code>public interface CaseWorker {
    public  String[] SetVitals(String[] givenVitals);
}
</code></pre>

<p>And here are the two implementations corresponding to the two cases  : </p>

<pre><code>public class CaseOne implements CaseWorker {

    @Override
    public String[] SetVitals(String[] givenVitals) {
        // do the work the first way
        return null;
    }

}


public class CaseTwo implements CaseWorker {

    @Override
    public String[] SetVitals(String[] givenVitals) {
        // do the work the second way
        return null;
    }

}
</code></pre>

<p>You can add other buttons, and for each button you add you will have to provide another CaseWorker implementation : CaseThree, CaseFour, ...
No need to switch because you're already doing it by setting the listeners to the differents buttons you have (the switch is already in the UI).</p>
