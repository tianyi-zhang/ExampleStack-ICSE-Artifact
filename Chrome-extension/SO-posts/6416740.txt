<p><strong>List All Threads and their Groups</strong></p>

<pre><code>public class Main
{
    public static void visit(final ThreadGroup group, final int level)
    {
        final Thread[] threads = new Thread[group.activeCount() * 2];
        final int numThreads = group.enumerate(threads, false);

        for (int i = 0; i &lt; numThreads; i++)
        {
            Thread thread = threads[i];
            System.out.format("%s:%s\n", group.getName(), thread.getName());
        }

        final ThreadGroup[] groups = new ThreadGroup[group.activeGroupCount() * 2];
        final int numGroups = group.enumerate(groups, false);

        for (int i = 0; i &lt; numGroups; i++)
        {
            visit(groups[i], level + 1);
        }
    }

    public static void main(final String[] args)
    {
        ThreadGroup root = Thread.currentThread().getThreadGroup().getParent();
        while (root.getParent() != null)
        {
            root = root.getParent();
        }

        visit(root, 0);
    }
}
</code></pre>

<p>Based on your edits, you might can find out what group and name the thread is and get a reference to it that way and do what you need to do.</p>

<p><strong>For your own code in the future</strong></p>

<p>You want to look at <a href="http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorCompletionService.html" rel="nofollow">ExecutorCompletionService</a> and the other thread management facilities in <a href="http://download.oracle.com/javase/6/docs/api/java/util/concurrent/package-summary.html" rel="nofollow">java.util.concurrent</a>. You should not be managing threads manually in Java anymore, pretty much every case you can imagine is handled one or more of the <a href="http://download.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html" rel="nofollow">ExecutorService</a> implementations.</p>
