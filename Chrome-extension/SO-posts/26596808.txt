<p>You can write a custom <a href="http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/TypeAdapterFactory.html" rel="nofollow">TypeAdapterFactory</a> and handle incoming object's <code>isSomeCase()</code> result in its <a href="https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/TypeAdapter.html" rel="nofollow">TypeAdapter</a>'s <code>write()</code> method and apply your logic there:</p>

<pre><code>public class ATypeAdapterFactory implements TypeAdapterFactory {

    public TypeAdapter&lt;A&gt; create(Gson gson, TypeToken type) {
        if (!A.class.isAssignableFrom(type.getRawType())) {
            // Check if incoming raw type is an instance of A interface
            return null;
        } 

        final TypeAdapter&lt;A&gt; delegate = gson.getDelegateAdapter(this, type);

        return new TypeAdapter&lt;A&gt;() {

            @Override
            public void write(JsonWriter out, A value) throws IOException {
                if(value.isSomeCase()) {
                    // your custom logic here
                    out.beginObject();
                    out.name("x").value(0);
                    out.endObject();
                } else {
                    // default serialization here
                    delegate.write(out, value);
                }
            }

            @Override
            public A read(JsonReader in) throws IOException {
                return delegate.read(in);
            }
        };
    }
}
</code></pre>

<p><strong>Test:</strong></p>

<pre><code>final GsonBuilder gsonBuilder = new GsonBuilder();
// Register custom type adapter factory
gsonBuilder.registerTypeAdapterFactory(new ATypeAdapterFactory());
final Gson gson = gsonBuilder.create();

A aSomeCaseTrue = new AImpl(true);
System.out.print("aSomeCaseTrue:" + gson.toJson(aSomeCaseTrue));
// writes; aSomeCaseTrue:{"x":0}


A aSomeCaseFalse = new AImpl(false);
System.out.print("aSomeCaseFalse:" + gson.toJson(aSomeCaseFalse););
// writes; aSomeCaseFalse:{"someCase":false}
</code></pre>

<p><strong>Extras:</strong></p>

<p>1) Your interface:</p>

<pre><code>interface A {
    boolean isSomeCase();
}
</code></pre>

<p>2) A sample class which implements your sample interface:</p>

<pre><code>class AImpl implements A {
    boolean someCase;

    public AImpl(boolean value) {
        this.someCase = value;
    }

    @Override
    public boolean isSomeCase() {
        return someCase;
    }
}
</code></pre>
