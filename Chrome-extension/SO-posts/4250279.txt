<p>After experimenting I have finally found a way to do this with good quality results.  I'll write this up for anyone that might find this answer helpful in the future.</p>

<p>To solve the first problem, the artifacts and weird dithering introduced into the images, you need to insure your image stays as a 32-bit ARGB_8888 image.  Using the code in my question, you can simply add this line to the options before the second decode.</p>

<pre><code>options.inPreferredConfig = Bitmap.Config.ARGB_8888;
</code></pre>

<p>After adding that, the artifacts were gone but edges throughout the images came through jagged instead of crisp.  After some more experimentation I discovered that resizing the bitmap using a Matrix instead of Bitmap.createScaledBitmap produced much crisper results.</p>

<p>With those two solutions, the images are now resizing perfectly.  Below is the code I am using in case it benefits someone else coming across this problem.</p>

<pre><code>// Get the source image's dimensions
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
BitmapFactory.decodeFile(STRING_PATH_TO_FILE, options);

int srcWidth = options.outWidth;
int srcHeight = options.outHeight;

// Only scale if the source is big enough. This code is just trying to fit a image into a certain width.
if(desiredWidth &gt; srcWidth)
    desiredWidth = srcWidth;



// Calculate the correct inSampleSize/scale value. This helps reduce memory use. It should be a power of 2
// from: http://stackoverflow.com/questions/477572/android-strange-out-of-memory-issue/823966#823966
int inSampleSize = 1;
while(srcWidth / 2 &gt; desiredWidth){
    srcWidth /= 2;
    srcHeight /= 2;
    inSampleSize *= 2;
}

float desiredScale = (float) desiredWidth / srcWidth;

// Decode with inSampleSize
options.inJustDecodeBounds = false;
options.inDither = false;
options.inSampleSize = inSampleSize;
options.inScaled = false;
options.inPreferredConfig = Bitmap.Config.ARGB_8888;
Bitmap sampledSrcBitmap = BitmapFactory.decodeFile(STRING_PATH_TO_FILE, options);

// Resize
Matrix matrix = new Matrix();
matrix.postScale(desiredScale, desiredScale);
Bitmap scaledBitmap = Bitmap.createBitmap(sampledSrcBitmap, 0, 0, sampledSrcBitmap.getWidth(), sampledSrcBitmap.getHeight(), matrix, true);
sampledSrcBitmap = null;

// Save
FileOutputStream out = new FileOutputStream(NEW_FILE_PATH);
scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);
scaledBitmap = null;
</code></pre>

<p>EDIT:  After continual work on this I have found that the images still aren't 100% perfect.  I'll make an update if I can improve it.</p>

<p><strong>Update:</strong>  After revisting this, I found <a href="http://stackoverflow.com/questions/4821488/bad-image-quality-after-resizing-scaling-bitmap">this question on SO</a> and there was an answer that mentioned the inScaled option.  This helped with the quality as well so I added updated the answer above to include it. I also now null the bitmaps after they are done being used.</p>

<p>Also, as a side note, if you are using these images in a WebView, make sure you take <a href="http://developer.android.com/guide/webapps/targeting.html#ViewportDensity">this post into consideration.</a></p>

<p>Note: you should also add a check to make sure the width and height are valid numbers (not -1).  If they are, it will cause the inSampleSize loop to become infinite.</p>
