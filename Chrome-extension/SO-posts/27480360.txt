<p>First of all add the following permission in you app's manifest file</p>

<pre><code>&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" /&gt;
</code></pre>

<p>Then check the following code which I used in my application to set s user's profile pic. </p>

<p>// on click listener for the camera trigger
    image.setOnClickListener(new View.OnClickListener() {</p>

<pre><code>        @Override
        public void onClick(View v) {
            Intent cameraintent = new Intent(
                    MediaStore.ACTION_IMAGE_CAPTURE);
            startActivityForResult(cameraintent, 101);

        }
    });
</code></pre>

<p>//onActivityResult</p>

<pre><code>@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
    Uri selectedImage = null;
    Bitmap bitmap;

    try {
        switch (requestCode) {
        case 101:
            if (resultCode == Activity.RESULT_OK) {
                if (null != data) {
                    selectedImage = data.getData(); // the uri of the image
                                                    // taken
                    bitmap = decodeSampledBitmapFromUri(this,
                            selectedImage, 100, 100);
                    image.setImageBitmap(bitmap);
                }
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
    }

    super.onActivityResult(requestCode, resultCode, data);
}
</code></pre>

<p>//Bitmap sampling </p>

<pre><code>public static Bitmap decodeSampledBitmapFromUri(Activity callingActivity,
        Uri uri, int reqWidth, int reqHeight) {
    try {
        InputStream input = callingActivity.getContentResolver()
                .openInputStream(uri);
        // First decode with inJustDecodeBounds=true to check dimensions
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        options.inSampleSize = 2; // make the bitmap size half of the
                                    // original one
        BitmapFactory.decodeStream(input, null, options);

        // Calculate inSampleSize
        options.inSampleSize = calculateInSampleSize(options, reqWidth,
                reqHeight);
        input.close();

        // Decode bitmap with inSampleSize set
        options.inJustDecodeBounds = false;

        input = callingActivity.getContentResolver().openInputStream(uri);
        Bitmap bitmap = BitmapFactory.decodeStream(input, null, options);
        return bitmap;
    } catch (FileNotFoundException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
        return null;
    } catch (IOException e) {// TODO Auto-generated catch block
        e.printStackTrace();
        return null;
    }

}
</code></pre>

<p>//calculate sample size</p>

<pre><code>public static int calculateInSampleSize(BitmapFactory.Options options,
        int reqWidth, int reqHeight) {
    // Raw height and width of image
    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {

        final int halfHeight = height / 2;
        final int halfWidth = width / 2;

        // Calculate the largest inSampleSize value that is a power of 2 and
        // keeps both
        // height and width larger than the requested height and width.
        while ((halfHeight / inSampleSize) &gt; reqHeight
                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
            inSampleSize *= 2;
        }
    }

    return inSampleSize;
}
</code></pre>
