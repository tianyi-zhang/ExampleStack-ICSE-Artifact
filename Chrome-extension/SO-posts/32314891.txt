<p>Sorry, but <strong>you can't</strong>. At least not with this lib.</p>

<p>I've looked into the code and I saw that this "infinite scrolling" is default behavior, and if you want to disabled it you have either to implement your own slider, or suggest and edit for the original author...</p>

<p>The "problem" is on those two methods of the <code>SliderLayout.java</code> class:</p>

<pre><code>/**
 * move to next slide.
 */
public void moveNextPosition(boolean smooth) {

    if (getRealAdapter() == null)
        throw new IllegalStateException("You did not set a slider adapter");

    mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1, smooth);
}

// ...

/**
 * move to prev slide.
 */
public void movePrevPosition(boolean smooth) {

    if (getRealAdapter() == null)
        throw new IllegalStateException("You did not set a slider adapter");

    mViewPager.setCurrentItem(mViewPager.getCurrentItem() - 1, smooth);
}
</code></pre>

<p>And the <code>setCurrentItem</code> is located inside the <code>ViewPagerEx.java</code> class, where you can see that this infinite scrolling is default behavior. (Look at the <code>setCurrentItemInternal</code> method).</p>

<pre><code> void setCurrentItemInternal(int item, boolean smoothScroll, boolean always, int velocity) {
        if (mAdapter == null || mAdapter.getCount() &lt;= 0) {
            setScrollingCacheEnabled(false);
            return;
        }
        if (!always &amp;&amp; mCurItem == item &amp;&amp; mItems.size() != 0) {
            setScrollingCacheEnabled(false);
            return;
        }

        if (item &lt; 0) {
            item = 0;
        } else if (item &gt;= mAdapter.getCount()) {
            item = mAdapter.getCount() - 1;
        }
        final int pageLimit = mOffscreenPageLimit;
        if (item &gt; (mCurItem + pageLimit) || item &lt; (mCurItem - pageLimit)) {
            // We are doing a jump by more than one page.  To avoid
            // glitches, we want to keep all current pages in the view
            // until the scroll ends.
            for (int i=0; i&lt;mItems.size(); i++) {
                mItems.get(i).scrolling = true;
            }
        }
        final boolean dispatchSelected = mCurItem != item;

        if (mFirstLayout) {
            // We don't have any idea how big we are yet and shouldn't have any pages either.
            // Just set things up and let the pending layout handle things.
            mCurItem = item;
            triggerOnPageChangeEvent(item);
            requestLayout();
        } else {
            populate(item);
            scrollToItem(item, smoothScroll, velocity, dispatchSelected);
        }
    }
</code></pre>
