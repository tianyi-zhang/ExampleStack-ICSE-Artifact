<p>My requirement is to </p>

<ul>
<li>Click on the ScalableTextView</li>
<li>Open a listActivity and display various length string items.</li>
<li>Select a text from list.</li>
<li>Set the text back to the ScalableTextView in another activity. </li>
</ul>

<p>I referred the link: <a href="http://stackoverflow.com/questions/5033012/auto-scale-textview-text-to-fit-within-bounds/21851157#21851157">Auto Scale TextView Text to Fit within Bounds</a> (including comments) and also the <a href="http://androidxref.com/4.1.1/xref/frameworks/base/core/java/com/android/internal/widget/DialogTitle.java" rel="nofollow">DialogTitle.java</a></p>

<p>I found that the solution provided is nice and simple but it does not dynamically change the size of the text box. It works great when
<i>the selected text length from the list view is greater in size than the existing text lenght in the</i> <code>ScalableTextView</code>. When selected the text having length smaller than the existing text in the <code>ScalableTextView</code>, it do not increase the size of the text, showing the text in the smaller size. </p>

<p>I modified the ScalableTextView.java to readjust the text size based on the text length. Here is my <code>ScalableTextView.java</code></p>

<pre><code>public class ScalableTextView extends TextView
{
float defaultTextSize = 0.0f;

public ScalableTextView(Context context, AttributeSet attrs, int defStyle)
{
    super(context, attrs, defStyle);
    setSingleLine();
    setEllipsize(TruncateAt.END);
    defaultTextSize = getTextSize();
}

public ScalableTextView(Context context, AttributeSet attrs)
{
    super(context, attrs);
    setSingleLine();
    setEllipsize(TruncateAt.END);
    defaultTextSize = getTextSize();
}

public ScalableTextView(Context context)
{
    super(context);
    setSingleLine();
    setEllipsize(TruncateAt.END);
    defaultTextSize = getTextSize();
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
{
    setTextSize(TypedValue.COMPLEX_UNIT_PX, defaultTextSize);
    super.onMeasure(widthMeasureSpec, heightMeasureSpec);

    final Layout layout = getLayout();
    if (layout != null)
    {
        final int lineCount = layout.getLineCount();
        if (lineCount &gt; 0)
        {
            int ellipsisCount = layout.getEllipsisCount(lineCount - 1);
            while (ellipsisCount &gt; 0)
            {
                final float textSize = getTextSize();

                // textSize is already expressed in pixels
                setTextSize(TypedValue.COMPLEX_UNIT_PX, (textSize - 1));

                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
                ellipsisCount = layout.getEllipsisCount(lineCount - 1);
            }
        }
    }
}
}
</code></pre>

<p>Happy Coding....</p>
