<p>Following code will give you screen resolution at run time.</p>

<pre><code>DisplayMetrics displaymetrics = new DisplayMetrics();
getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
deviceHeightPix = displaymetrics.heightPixels;
deviceWidthPix = displaymetrics.widthPixels;
</code></pre>

<p>and from that you can pass those height and width or resolution as you want in following function. This function will return you a sample size created from original one.
And it will not reduce any quality.
For example, you have screen size of 480 * 800 (Normal and Medium Density)
And your image has size 1500*2000, so first get your screen size,
pass to following function, it will return back 480*800 resolution image without reducing its quality. </p>

<pre><code>public Bitmap decodeSampledBitmapFromResource(Resources res, int resId,
        int reqWidth, int reqHeight) {

    // First decode with inJustDecodeBounds=true to check dimensions
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeResource(res, resId, options);

    Log.d("Home", "Image Resizer -&gt; ReqHieght : " + reqHeight);
    Log.d("Home", "Image Resizer -&gt; ReqWidth  : " + reqWidth);

    // Calculate inSampleSize
    options.inSampleSize = calculateInSampleSize(options, reqWidth,
            reqHeight);
    Log.d("Home", "Image Resizer -&gt; Samplesize:" + options.inSampleSize);
    // Decode bitmap with inSampleSize set
    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeResource(res, resId, options);
}
</code></pre>

<p>To use above function,</p>

<p><code>Bitmap bitmap = DecodeSampledBitmapFromResource(getResources(),R.drawable.home_screen,480,800);</code></p>

<p>Benefit of using this function is that, you don't need to create <code>TWO</code> objects of <code>Bitmap</code>.
First object holds <code>decoded</code> image, and second object use that first object to <code>scale</code> it.</p>
