<p>One way without recursion is the following: Use a binary mask and make all the possible combinations.</p>

<pre><code>public HashSet&lt;HashSet&gt; createPowerSet(Object[] array)
{
    HashSet&lt;HashSet&gt; powerSet=new HashSet();
    boolean[] mask= new boolean[array.length];

    for(int i=0;i&lt;Math.pow(2, array.length);i++)
    {
        HashSet set=new HashSet();
        for(int j=0;j&lt;mask.length;j++)
        {
            if(mask[i])
                set.add(array[j]);
        }
        powerSet.add(set);      

        increaseMask(mask);
    }

    return powerSet;
}

public void increaseMask(boolean[] mask)
{
    boolean carry=false;

    if(mask[0])
        {
            mask[0]=false;
            carry=true;
        }
    else
        mask[0]=true;

    for(int i=1;i&lt;mask.length;i++)
    {
        if(mask[i]==true &amp;&amp; carry==true)
        mask[i]=false;
        else if (mask[i]==false &amp;&amp; carry==true)
        {
            mask[i]=true;
            carry=false;
        }
        else 
            break;

    }

}
</code></pre>
