<p>Here's a solution that does not use hash. It should be faster, but it still exceeds the time limit.</p>

<pre><code>import java.util.ArrayList;

public class Solution {
    public static void main(String[] args) {

      int[] S = {1, 0, -1, 0, -2, 2};
      int target = 0;
      test(S, target);
    }

    public static void test(int[] num, int target) {
      System.out.print("a:");
      for (int i : num) {
        System.out.print(" " + i);
      }
      System.out.println(": " + target);
      ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = fourSum(num, target);
      for (ArrayList&lt;Integer&gt; list : res) {
        System.out.println(list);
      }
      System.out.println();
    }

    // a+b+c+d = target
    public static ArrayList&lt;ArrayList&lt;Integer&gt;&gt; fourSum(int[] num, int target) {
        // Start typing your Java solution below
        // DO NOT write main() function

       // Sort
       {
        for (int i = 0; i &lt; num.length; i++) {
            for (int j = i + 1; j &lt; num.length; j++) {
                if (num[j] &lt; num[i]) {
                    int tmp = num[i];
                    num[i] = num[j];
                    num[j] = tmp;
                }
            }
        }
       }
      ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();
      int i = 0;
      while (i &lt; num.length - 3) {
        int j = i + 1;
        while (j &lt; num.length - 2) {
            int k = j + 1, l = num.length - 1;
            while (k &lt; l) {
                int sum = num[i] + num[j] + num[k] + num[l];
                if (sum &gt; target) {
                    l--;
                    while (k &lt; l &amp;&amp; num[l] == num[l+1]) l--;
                } else if (sum &lt; target) {
                    k++;
                    while (k &lt; l &amp;&amp; num[k] == num[k-1]) k++;
                } else {
                    ArrayList&lt;Integer&gt; list =
                        new ArrayList&lt;Integer&gt;(4);
                    list.add(num[i]); list.add(num[j]);
                    list.add(num[k]); list.add(num[l]);
                    res.add(list);
                    k++;
                    while (k &lt; l &amp;&amp; num[k] == num[k-1]) k++;
                    l--;
                    while (k &lt; l &amp;&amp; num[l] == num[l+1]) l--;
                }
            }
            j++;
            while (j &lt; num.length &amp;&amp; num[j] == num[j-1]) j++;
        }
        i++;
        while (i &lt; num.length &amp;&amp; num[i] == num[i-1]) {
            i++;
        }
      }

      return res;
    }
}
</code></pre>
