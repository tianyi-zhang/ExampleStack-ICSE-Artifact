<p>Create another class which holds those 4 fields as properties and implement/autogenerate <code>equals()</code> and <code>hashCode()</code> <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html">according the contract</a> (important! otherwise it can't be used as a proper <code>Map</code> key) and finally use it as (composite) key for the <code>Map</code>.</p>

<p>Here's what Eclipse has autogenerated for me (the <code>equals()</code> is open for improvement, it's somewhat verbose):</p>

<pre><code>public class CompositeKey {

    private String code;
    private BigDecimal referenceNumber1;
    private BigDecimal referenceNumber2;
    private Date time;

    public CompositeKey(String code, BigDecimal referenceNumber1, BigDecimal referenceNumber2, Date time) {
        this.code = code;
        this.referenceNumber1 = referenceNumber1;
        this.referenceNumber2 = referenceNumber2;
        this.time = time;
    }

    public String getCode() {
        return code;
    }

    public BigDecimal getReferenceNumber1() {
        return referenceNumber1;
    }

    public BigDecimal getReferenceNumber2() {
        return referenceNumber2;
    }

    public Date getTime() {
        return time;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        CompositeKey other = (CompositeKey) obj;
        if (code == null) {
            if (other.code != null)
                return false;
        }
        else if (!code.equals(other.code))
            return false;
        if (referenceNumber1 == null) {
            if (other.referenceNumber1 != null)
                return false;
        }
        else if (!referenceNumber1.equals(other.referenceNumber1))
            return false;
        if (referenceNumber2 == null) {
            if (other.referenceNumber2 != null)
                return false;
        }
        else if (!referenceNumber2.equals(other.referenceNumber2))
            return false;
        if (time == null) {
            if (other.time != null)
                return false;
        }
        else if (!time.equals(other.time))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((code == null) ? 0 : code.hashCode());
        result = prime * result + ((referenceNumber1 == null) ? 0 : referenceNumber1.hashCode());
        result = prime * result + ((referenceNumber2 == null) ? 0 : referenceNumber2.hashCode());
        result = prime * result + ((time == null) ? 0 : time.hashCode());
        return result;
    }

}
</code></pre>
