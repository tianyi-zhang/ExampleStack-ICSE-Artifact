<p>To try and improve a little on Maragues's solution, I've made a few changes.</p>

<p>The solution is to create a custom <em>Matcher&lt;View&gt;</em> that wraps another <em>Matcher&lt;View&gt;</em> for the parent view, and takes the index of the child view to be matched.</p>

<pre><code>public static Matcher&lt;View&gt; nthChildOf(final Matcher&lt;View&gt; parentMatcher, final int childPosition) {
    return new TypeSafeMatcher&lt;View&gt;() {
        @Override
        public void describeTo(Description description) {
            description.appendText("position " + childPosition + " of parent ");
            parentMatcher.describeTo(description);
        }

        @Override
        public boolean matchesSafely(View view) {
            if (!(view.getParent() instanceof ViewGroup)) return false;
            ViewGroup parent = (ViewGroup) view.getParent();

            return parentMatcher.matches(parent)
                    &amp;&amp; parent.getChildCount() &gt; childPosition
                    &amp;&amp; parent.getChildAt(childPosition).equals(view);
        }
    };
}
</code></pre>

<p><strong>Detailed Explanation</strong></p>

<p>You can override the <em>describeTo</em> method in order to give an easy to understand description of the matcher by appending to the <em>Description</em> argument. You'll also want to propagate the <em>describeTo</em> call to the parent matcher so it's description also gets added.</p>

<pre><code>@Override
public void describeTo(Description description) {
    description.appendText("position " + childPosition + " of parent "); // Add this matcher's description.
    parentMatcher.describeTo(description); // Add the parentMatcher description.
}
</code></pre>

<p>Next, you should override <em>matchesSafely</em> which will determine when a match in the view hierarchy has been found. When called with a view whose parent matches the provided parent matcher, check that the view is equal to the child at the provided position. </p>

<p>If the parent doesn't have a <em>childCount</em> greater than the child position, <em>getChildAt</em> will return null and cause the test to crash. It's better to avoid crashing and allow the test to fail so that we get a proper test report and error message.</p>

<pre><code>@Override
public boolean matchesSafely(View view) {
if (!(view.getParent() instanceof ViewGroup)) return false; // If it's not a ViewGroup we know it doesn't match.
    ViewGroup parent = (ViewGroup) view.getParent();

    return parentMatcher.matches(parent) // Check that the parent matches.
            &amp;&amp; parent.getChildCount() &gt; childPosition // Make sure there's enough children.
            &amp;&amp; parent.getChildAt(childPosition).equals(view); // Check that this is the right child.
}
</code></pre>
