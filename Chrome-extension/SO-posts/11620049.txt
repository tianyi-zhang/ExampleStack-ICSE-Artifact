<p>Can you post your full <code>AppInfoAdapter</code>? Also is there any reason extending from <code>BaseAdapter</code> and not <code>ArrayAdapter</code>? If you have an <code>ArrayList</code> of objects, use <code>ArrayAdapter</code>, it already implements <code>Filterable</code> interface.</p>

<p>Actually you are using a <code>List</code>, your adapter can be rewritten to extends <code>ArrayAdapter</code> which already is <code>Filterable</code>.</p>

<pre><code>public class AppInfoAdapter extends ArrayAdapter&lt;ApplicationInfo&gt; {

    private Context mContext;
    PackageManager mPackManager;

    public AppInfoAdapter(Context c, List&lt;ApplicationInfo&gt; list, PackageManager pm) {
        super(c, 0, new ArrayList&lt;ApplicationInfo&gt;());
        mContext = c;
        mPackManager = pm;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // get the selected entry
        ApplicationInfo entry = (ApplicationInfo) getItem(position);

        // reference to convertView
        View v = convertView;

        // inflate new layout if null
        if(v == null) {
            LayoutInflater inflater = LayoutInflater.from(mContext);
            v = inflater.inflate(R.layout.layout_appinfo, null);
        }

        // load controls from layout resources
        ImageView ivAppIcon = (ImageView)v.findViewById(R.id.ivIcon);
        TextView tvAppName = (TextView)v.findViewById(R.id.tvName);
        TextView tvPkgName = (TextView)v.findViewById(R.id.tvPack);

        // set data to display
        ivAppIcon.setImageDrawable(entry.loadIcon(mPackManager));
        tvAppName.setText(entry.loadLabel(mPackManager));
        tvPkgName.setText(entry.packageName);

        // return view
        return v;
    }
}
</code></pre>
