<p>This bit of your code:</p>

<pre><code>    if (response == HttpURLConnection.HTTP_OK) {
        in = httpConn.getInputStream();
    }
</code></pre>

<p>prevents from <code>in</code> being assigned when you get a 404. If you get anything besides an HTTP_OK (200), <code>in</code> will be null and your InputStreamReader assignment will fail.</p>

<p>To handle this error, you can use the following pattern:</p>

<pre><code>class HTTPException extends IOException {
    private int responseCode;

    public HTTPException( final int responseCode ) {
        super();
        this.responseCode = responseCode;
    }

    public int getResponseCode() {
        return this.responseCode;
    }
}
</code></pre>

<p>Then change your code as follows:</p>

<pre><code>private InputStream OpenHttpConnection(String urlString) throws IOException {
    Log.d("Networking", "InputStream called");
    InputStream in = null;
    int response = -1;

    URL url = new URL(urlString);
    URLConnection conn = url.openConnection();

    if(!(conn instanceof HttpURLConnection))
        throw new IOException("Not an HTTP connection");
    try {
        HttpURLConnection httpConn = (HttpURLConnection) conn;

        httpConn.setConnectTimeout(10000);
        httpConn.setReadTimeout(10000);
        httpConn.setAllowUserInteraction(false);
        httpConn.setInstanceFollowRedirects(true);
        httpConn.setRequestMethod("GET");
        httpConn.connect();
        response = httpConn.getResponseCode();
        if (response == HttpURLConnection.HTTP_OK) {
            in = httpConn.getInputStream();
        } else { // this is new
            throw new HTTPException( response );
        }

    }
    catch (Exception ex) {
            Log.d("Networking", "" + ex.getLocalizedMessage());
            throw new IOException("Error connecting");
        }
    return in;
}

private String DownloadText(String URL) {
    int BUFFER_SIZE = 2000;
    InputStream in = null;
    try {
        in = OpenHttpConnection(URL);
        } 
    catch (IOException e) {
        Log.d("Networking", "" + e.getLocalizedMessage());
        return "";
    }
    InputStreamReader isr = new InputStreamReader(in);
    int charRead;
    String str = "";
    char[] inputBuffer = new char[BUFFER_SIZE];
    try {
        while ((charRead = isr.read(inputBuffer))&gt;0) {
            //---convert the chars to a String---
            String readString = String.copyValueOf(inputBuffer, 0, charRead);
            str += readString;
            inputBuffer = new char[BUFFER_SIZE]; }
        in.close();
    }
    catch( HTTPException e ) {
        Log.d( String.format( "HTTP Response not ok: %d", e.getResponseCode() ) );
        // handle whatever else you need to handle here.
    }
    catch (IOException e) {
        Log.d("Networking", "" + e.getLocalizedMessage());
        return "";
    }
    return str;
}
</code></pre>
