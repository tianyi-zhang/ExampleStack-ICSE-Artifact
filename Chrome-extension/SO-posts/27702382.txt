<p>Create a custom adapter like this -</p>

<pre><code>    public class CustomUsersAdapter extends ArrayAdapter&lt;User&gt; {
    public CustomUsersAdapter(Context context, ArrayList&lt;User&gt; users) {
        super(context, 0, users);
     }

     @Override
     public View getView(int position, View convertView, ViewGroup parent) {
        // Get the data item for this position
        User user = getItem(position);    
        // Check if an existing view is being reused, otherwise inflate the view
        if (convertView == null) {
           convertView = LayoutInflater.from(getContext()).inflate(R.layout.item_user, parent, false);
        }
        // Lookup view for data population
        TextView tvName = (TextView) convertView.findViewById(R.id.title);
        Typeface type = Typeface.createFromAsset(getAssets(),"fonts/Kokila.ttf"); 
        tvName.setTypeface(type);
        // Populate the data into the template view using the data object
        tvName.setText(user.name);
        // Return the completed view to render on screen
        return convertView;
    }
}
</code></pre>

<p>here we used <code>item_user</code>, which is layout to your each line. Like this - </p>

<pre><code>    &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent" &gt;

    &lt;TextView
        android:id="@+id/title"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_toRightOf="@+id/icon"
        android:paddingBottom="10dp"
        android:textColor="#CC0033"
        android:textSize="16dp" /&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>We used this code to set the typeface,</p>

<pre><code>Typeface type = Typeface.createFromAsset(getAssets(),"fonts/Kokila.ttf"); 
txtView.setTypeface(type);
</code></pre>

<p>and you will have to put your font file in a new folder with name "fonts".</p>
