<p>The following method uses recursion to achieve this. Pass in any <code>Container</code>, and this method will return a <code>Component</code> array of all of the non-Container components located anywhere "inside" of the <code>Container</code>.</p>

<pre><code>    private Component[] getComponents(Component container) {
        ArrayList&lt;Component&gt; list = null;

        try {
            list = new ArrayList&lt;Component&gt;(Arrays.asList(
                  ((Container) container).getComponents()));
            for (int index = 0; index &lt; list.size(); index++) {
                for (Component currentComponent : getComponents(list.get(index))) {
                    list.add(currentComponent);
                }
            }
        } catch (ClassCastException e) {
            list = new ArrayList&lt;Component&gt;();
        }

        return list.toArray(new Component[list.size()]);
        }
    }
</code></pre>

<p>Simply loop through the elements of the returned array and disable the components.</p>

<pre><code>for(Component component : getComponents(container)) {
    component.setEnabled(false);
}
</code></pre>
