<p><strong>Basic Layout / Top-Down Approach</strong></p>

<p>Start with what you know and put that into methods. You start with names and the stuff they need to perform. Don't think about implementation for a second, just about the flow of logic. </p>

<p>In your case, you'll need something like:</p>

<pre><code>public void createHash(File sourceDir, File targetDir)

public String createHash(File file)

public void writeHash(File toFile, String hash)
</code></pre>

<p><strong>Wrap it in main()</strong></p>

<p>You need to fill in your class-name there.</p>

<pre><code>public static void main(String[] args) {
   new YourClass().createHash(new File(args[0]), new File(args[1]));
}
</code></pre>

<p><strong>Implement Top-Down</strong></p>

<p>Start with the outermost method and try to get that right. You can start with dummy code for the rest. </p>

<pre><code>public void createHash(File sourceDir, File targetDir) {
  for(File f : sourceDir.listFiles()) {
     String hash = createHash(f); //That you almost have
     File target = new File(targetDir, f.getName()+".hash");
     writeHash(target, hash);
  } 
}

public String createHash(f) {
  return f.getName(); //This is where your existing code will go later
}

public String writeHash(File target, String hash) {
  System.out.println("I'd write " + hash + " to File " + file.getName());
}
</code></pre>

<p>Now your program should be able to iterate through source folder, create (dummy) hashes and print to System.out what files it would write.</p>

<p><strong>Refine methods</strong></p>

<p>Now do the rest step by step - one method at a time. Until you're done or something breaks - in which case you come back for help.</p>

<pre><code>  public String createHash(File datafile) throws IOException {
    //SNIP - YOUR CODE BEGINS
    MessageDigest md = MessageDigest.getInstance("SHA1");
    FileInputStream fis = new FileInputStream(datafile);
    byte[] dataBytes = new byte[1024];

    int nread = 0; 

    while ((nread = fis.read(dataBytes)) != -1) {
      md.update(dataBytes, 0, nread);
    }

    byte[] mdbytes = md.digest();

    //convert the byte to hex format
    StringBuffer sb = new StringBuffer("");
    for (int i = 0; i &lt; mdbytes.length; i++) {
      sb.append(Integer.toString((mdbytes[i] &amp; 0xff) + 0x100, 16).substring(1));
    }
  //SNAP - YOUR CODE ENDS
  }
  public void writeFile(File target, String hash) {
     try(FileOutputStream fo = new FileOutputStream(target)) {
       fo.write(hash.getBytes());
     } catch(IOException e) {
       System.err.println("No Hash Written for " + target.getName());
     }
  }
</code></pre>

<p><strong>Working Example</strong></p>

<pre><code>import java.io.*;
import java.security.MessageDigest;

public class Checksums {

    public static void main(String[] args) {
        String sourceDir = "/Users/Jan/Desktop/Folder1";
        String targetDir = "/Users/Jan/Desktop/Folder2";
        try {
            new Checksums().createHash(new File(sourceDir), new File(targetDir));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void createHash(File sourceDir, File targetDir) throws Exception {
        for (File f : sourceDir.listFiles()) {
            String hash = createHash(f); // That you almost have
            File target = new File(targetDir, f.getName() + ".hash");
            writeHash(target, hash);
        }
    }

    public String createHash(File datafile) throws Exception {
        // SNIP - YOUR CODE BEGINS
        MessageDigest md = MessageDigest.getInstance("SHA1");
        FileInputStream fis = new FileInputStream(datafile);
        byte[] dataBytes = new byte[1024];

        int nread = 0;

        while ((nread = fis.read(dataBytes)) != -1) {
            md.update(dataBytes, 0, nread);
        }

        byte[] mdbytes = md.digest();

        // convert the byte to hex format
        StringBuffer sb = new StringBuffer("");
        for (int i = 0; i &lt; mdbytes.length; i++) {
            sb.append(Integer.toString((mdbytes[i] &amp; 0xff) + 0x100, 16).substring(1));
        }
        // SNAP - YOUR CODE ENDS
        return sb.toString();
    }

    public void writeHash(File target, String hash) {
        try (FileOutputStream fo = new FileOutputStream(target)) {
            fo.write(hash.getBytes());
            System.out.println("Hash written for " + target.getAbsolutePath());
        } catch (IOException e) {
            System.err.println("No Hash Written for " + target.getName());
        }
    }

}
</code></pre>
