<p>If you want to do the check using a regex you should create a final static Pattern object, that way the regex only needs to be compiled once. Compiling the regex takes about as long as performing the match so by taking this precaution you'll cut the execution time of the method in half.</p>

<pre><code>final static Pattern NUMBER_PATTERN = Pattern.compile("[+-]?\\d*\\.?\\d+");

static boolean isNumber(String input) {
    Matcher m = NUMBER_PATTERN.matcher(input);
    return m.matches();
}
</code></pre>

<p>I'm assuming a number is a string with nothing but decimal digits in it, possibly a + or - sign at the start and at most one decimal point (not at the end) and no other characters (including commas, spaces, numbers in other counting systems, Roman numerals, hieroglyphs).</p>

<p>This solution is succinct and pretty fast but you can shave a couple of milliseconds per million invocations by doing it like this</p>

<pre><code>static boolean isNumber(String s) {
    final int len = s.length();
    if (len == 0) {
        return false;
    }
    int dotCount = 0;
    for (int i = 0; i &lt; len; i++) {
        char c = s.charAt(i);
        if (c &lt; '0' || c &gt; '9') {
            if (i == len - 1) {//last character must be digit
                return false;
            } else if (c == '.') {
                if (++dotCount &gt; 1) {
                    return false;
                }
            } else if (i != 0 || c != '+' &amp;&amp; c != '-') {//+ or - allowed at start
                return false;
            }

        }
    }
    return true;
}
</code></pre>
