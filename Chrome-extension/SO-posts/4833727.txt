<p>You can use Jetty server. It's very easy to embed it in your Java SE application. You can find more info here:</p>

<p><a href="http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty" rel="nofollow">http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty</a></p>

<p>I think section <strong>Configuring a File Server</strong> would be especially interesting for you:</p>

<p><a href="http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty#Configuring_a_File_Server" rel="nofollow">http://wiki.eclipse.org/Jetty/Tutorial/Embedding_Jetty#Configuring_a_File_Server</a></p>

<p>Here is an example that you can find there:</p>

<pre><code>public class FileServer
{
    public static void main(String[] args) throws Exception
    {
        Server server = new Server();
        SelectChannelConnector connector = new SelectChannelConnector();
        connector.setPort(8080);
        server.addConnector(connector);

        ResourceHandler resource_handler = new ResourceHandler();
        resource_handler.setDirectoriesListed(true);
        resource_handler.setWelcomeFiles(new String[]{ "index.html" });

        resource_handler.setResourceBase(".");

        HandlerList handlers = new HandlerList();
        handlers.setHandlers(new Handler[] { resource_handler, new DefaultHandler() });
        server.setHandler(handlers);

        server.start();
        server.join();
    }
}
</code></pre>

<p>If you configure <code>resourceBase</code> with path to your folder like this: <code>resource_handler.setResourceBase("/path/to/your/folder")</code>, then all files in this folder would be available through HTTP.</p>
