<p>If the <code>Socket</code> has an associated <code>SocketChannel</code>, you cannot directly read from it's <code>InputStream</code>. You'll get <code>IllegalBlockingModeException</code>. See <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/net/Socket.html#getInputStream%28%29" rel="nofollow">here</a>.</p>

<p>You can block on non-blocking SocketChannels by <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/channels/SelectableChannel.html#register%28java.nio.channels.Selector,%20int%29" rel="nofollow">registering</a> them to a <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/channels/Selector.html" rel="nofollow">Selector</a> and using <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/channels/Selector.html#select%28%29" rel="nofollow">select()</a> or <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/channels/Selector.html#select%28long%29" rel="nofollow">select(long timeout)</a>. Those methods usually block until a registered channel is ready (or the timeout expired).</p>

<p>The channel is still non-blocking for threads not using a selector.</p>

<p>Modified example from <a href="http://tutorials.jenkov.com/java-nio/selectors.html" rel="nofollow">here</a>:</p>

<pre><code>Selector selector = Selector.open();
channel.configureBlocking(false);

// register for OP_READ: you are interested in reading from the channel
channel.register(selector, SelectionKey.OP_READ);

while (true) {
  int readyChannels = selector.select(); // This one blocks...

  // Safety net if the selector awoke by other means
  if (readyChannels == 0) continue;

  Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();
  Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();

  while (keyIterator.hasNext()) {
    SelectionKey key = keyIterator.next();

    keyIterator.remove();

    if (!key.isValid()) {
      continue;
    } else if (key.isAcceptable()) {
        // a connection was accepted by a ServerSocketChannel.
    } else if (key.isConnectable()) {
        // a connection was established with a remote server.
    } else if (key.isReadable()) {
        // a channel is ready for reading
    } else if (key.isWritable()) {
        // a channel is ready for writing
    }
  }
}
</code></pre>
