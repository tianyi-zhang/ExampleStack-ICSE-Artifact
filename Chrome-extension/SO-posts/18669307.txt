<p>At the time of writing this answer, the accepted answer is flawed in that it will contains duplicates in its result.</p>

<p>For those who have trouble wrapping their head around recursion, here's a non-recursive alternative. You get bonus points for realizing this is also a breadth-first search alternative to the depth-first approach of the other answer.</p>

<pre><code>private List&lt;View&gt; getAllChildrenBFS(View v) {
    List&lt;View&gt; visited = new ArrayList&lt;View&gt;();
    List&lt;View&gt; unvisited = new ArrayList&lt;View&gt;();
    unvisited.add(v);

    while (!unvisited.isEmpty()) {
        View child = unvisited.remove(0);
        visited.add(child);
        if (!(child instanceof ViewGroup)) continue;
        ViewGroup group = (ViewGroup) child;
        final int childCount = group.getChildCount();
        for (int i=0; i&lt;childCount; i++) unvisited.add(group.getChildAt(i));
    }

    return visited;
}
</code></pre>

<p>A couple of quick tests (nothing formal) suggest this alternative is also faster, although that has most likely to do with the number of new <code>ArrayList</code> instances the other answer creates. Also, results may vary based on how vertical/horizontal the view hierarchy is.</p>
