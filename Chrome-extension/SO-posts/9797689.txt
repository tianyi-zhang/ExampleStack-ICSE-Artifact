<p>Full working solution to best of my knowledge</p>

<ul>
<li>BFS of each class hierarchy going "upwards" - result into LinkedHashSet (preserve order + no duplicates)</li>
<li>Intersect each set with the next to find anything in common, again LinkedHashSet to preserve order</li>
<li>The remaining "ordered" set is the common ancestors, first in list is "nearest", last is furthest. </li>
<li>Empty list implies no ancestors (apart from object)</li>
</ul>

<p>Code</p>

<pre><code>private static Set&lt;Class&lt;?&gt;&gt; getClassesBfs(Class&lt;?&gt; clazz) {
    Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;Class&lt;?&gt;&gt;();
    Set&lt;Class&lt;?&gt;&gt; nextLevel = new LinkedHashSet&lt;Class&lt;?&gt;&gt;();
    nextLevel.add(clazz);
    do {
        classes.addAll(nextLevel);
        Set&lt;Class&lt;?&gt;&gt; thisLevel = new LinkedHashSet&lt;Class&lt;?&gt;&gt;(nextLevel);
        nextLevel.clear();
        for (Class&lt;?&gt; each : thisLevel) {
            Class&lt;?&gt; superClass = each.getSuperclass();
            if (superClass != null &amp;&amp; superClass != Object.class) {
                nextLevel.add(superClass);
            }
            for (Class&lt;?&gt; eachInt : each.getInterfaces()) {
                nextLevel.add(eachInt);
            }
        }
    } while (!nextLevel.isEmpty());
    return classes;
}

private static List&lt;Class&lt;?&gt;&gt; commonSuperClass(Class&lt;?&gt;... classes) {
    // start off with set from first hierarchy
    Set&lt;Class&lt;?&gt;&gt; rollingIntersect = new LinkedHashSet&lt;Class&lt;?&gt;&gt;(
            getClassesBfs(classes[0]));
    // intersect with next
    for (int i = 1; i &lt; classes.length; i++) {
        rollingIntersect.retainAll(getClassesBfs(classes[i]));
    }
    return new LinkedList&lt;Class&lt;?&gt;&gt;(rollingIntersect);
}
</code></pre>

<p>Supporting methods and test</p>

<pre><code>private static void test(Class&lt;?&gt;... classes) {
    System.out.println("Common ancestor for "
            + simpleClassList(Arrays.asList(classes)) + ", Result =&gt;  "
            + simpleClassList(commonSuperClass(classes)));
}

private static String simpleClassList(Collection&lt;Class&lt;?&gt;&gt; classes) {
    StringBuilder builder = new StringBuilder();
    for (Class&lt;?&gt; clazz : classes) {
        builder.append(clazz.getSimpleName());
        builder.append(",");
    }
    return builder.toString();
}

public static void main(String[] args) {
    test(A.class, AImpl.class);
    test(A.class, B.class, C.class);
    test(A.class, AB.class);
    test(AImpl.class, ABImpl.class);
    test(ABImpl.class, ABImpl2.class);
    test(AImpl.class, ABImpl.class, ABImpl2.class);
    test(ABImpl.class, ABImpl2.class, BCImpl.class);
    test(AImpl.class, ABImpl.class, ABImpl2.class, BCImpl.class);
    test(AB.class, ABImpl.class);
}
</code></pre>

<p>Output</p>

<pre><code>Common ancestor for A,AImpl,, Result =&gt;  A,
Common ancestor for A,B,C,, Result =&gt;  
Common ancestor for A,AB,, Result =&gt;  A,
Common ancestor for AImpl,ABImpl,, Result =&gt;  A,
Common ancestor for ABImpl,ABImpl2,, Result =&gt;  A,B,
Common ancestor for AImpl,ABImpl,ABImpl2,, Result =&gt;  A,
Common ancestor for ABImpl,ABImpl2,BCImpl,, Result =&gt;  B,
Common ancestor for AImpl,ABImpl,ABImpl2,BCImpl,, Result =&gt;  
Common ancestor for AB,ABImpl,, Result =&gt;  AB,A,B,
</code></pre>
