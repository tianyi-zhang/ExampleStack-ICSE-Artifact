<p>Let's try like this</p>

<p>URL img_value=new URL(img[position]);</p>

<pre><code>               Bitmap mIcon1 = BitmapFactory.decodeStream(img_value.openConnection().getInputStream());

                holder.image.setImageBitmap(mIcon1); 
</code></pre>

<p>here holder.image is an image widget kept in your xml for image view.</p>

<p>It directy load an image from the given url.
or else try like this below by creating class named DrawableManager...</p>

<p>new DrawableManager().fetchDrawableOnThread(VAL3[position],holder.icon);</p>

<pre><code>package com.fsp.demo;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.net.MalformedURLException;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.graphics.drawable.Drawable;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.widget.ImageView;

public class DrawableManager {
    @SuppressWarnings("unchecked")
    private final Map drawableMap;

    public DrawableManager() {
        drawableMap = new HashMap&lt;String, SoftReference&lt;Drawable&gt;&gt;();
    }

    @SuppressWarnings("unchecked")
    public Drawable fetchDrawable(String urlString) {
        SoftReference&lt;Drawable&gt; drawableRef = (SoftReference&lt;Drawable&gt;) drawableMap
                .get(urlString);
        if (drawableRef != null) {
            Drawable drawable = drawableRef.get();
            if (drawable != null)
                return drawable;
            // Reference has expired so remove the key from drawableMap
            drawableMap.remove(urlString);
        }

        if (Constants.LOGGING)
            Log.d(this.getClass().getSimpleName(), "image url:" + urlString);
        try {
            InputStream is = fetch(urlString);
            Drawable drawable = Drawable.createFromStream(is, "src");
            drawableRef = new SoftReference&lt;Drawable&gt;(drawable);
            drawableMap.put(urlString, drawableRef);
            if (Constants.LOGGING)
                Log.d(this.getClass().getSimpleName(),
                        "got a thumbnail drawable: " + drawable.getBounds()
                                + ", " + drawable.getIntrinsicHeight() + ","
                                + drawable.getIntrinsicWidth() + ", "
                                + drawable.getMinimumHeight() + ","
                                + drawable.getMinimumWidth());
            return drawableRef.get();
        } catch (MalformedURLException e) {
            if (Constants.LOGGING)
                Log.e(this.getClass().getSimpleName(), "fetchDrawable failed",
                        e);
            return null;
        } catch (IOException e) {
            if (Constants.LOGGING)
                Log.e(this.getClass().getSimpleName(), "fetchDrawable failed",
                        e);
            return null;
        }
    }

    @SuppressWarnings("unchecked")
    public void fetchDrawableOnThread(final String urlString,
            final ImageView imageView) {
//      Log.v("Drawable_url",urlString);
        SoftReference&lt;Drawable&gt; drawableRef = (SoftReference&lt;Drawable&gt;) drawableMap
                .get(urlString);
        if (drawableRef != null) {
            Drawable drawable = drawableRef.get();
            if (drawable != null) {
                imageView.setImageDrawable(drawableRef.get());
                return;
            }
            // Reference has expired so remove the key from drawableMap
            drawableMap.remove(urlString);
        }

        final Handler handler = new Handler() {
            public void handleMessage(Message message) {
                imageView.setImageDrawable((Drawable) message.obj);
            }
        };

        Thread thread = new Thread() {
            @Override
            public void run() {
                // TODO : set imageView to a "pending" image
                Drawable drawable = fetchDrawable(urlString);
                Message message = handler.obtainMessage(1, drawable);
                handler.sendMessage(message);
            }
        };
        thread.start();
    }

    private InputStream fetch(String urlString) throws MalformedURLException,
            IOException {
        DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpGet request = new HttpGet(urlString);
        HttpResponse response = httpClient.execute(request);
        return response.getEntity().getContent();
    }

}
</code></pre>
