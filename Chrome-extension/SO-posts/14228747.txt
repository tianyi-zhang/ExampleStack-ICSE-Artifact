<pre><code>use an AsyncTask but instead it populates on the UI thread. I tried and tried with an AsyncTask, but I lost the fight!
</code></pre>

<p>Use Arraylists instead of the hashmap. I have used the Arraylist and add Elements in the asyncTask. </p>

<pre><code>public class Home extends Activity {
/** Called when the activity is first created. */
static final String URL = "https://dl.dropbox.com/u/43058382/BeanPickerColorToolUpdates/ColorPacksList.xml";

static final String KEY_ITEM = "Book"; // parent node
static final String KEY_BOOKAUTHOR = "book_author";
static final String KEY_BOOKRATING = "BookRating";
static final String KEY_BOOKID = "BookID";
static final String KEY_BOOKDESC = "BookDescription";
static final String KEY_BOOKDATEPUBLISHED = "DatePublished";
static final String KEY_BOOKTITLE = "BookTitle";
static final String KEY_BOOKCODE = "BookCode";

    static ArrayList&lt;String&gt; BookTitle = null;
static ArrayList&lt;Integer&gt; BookRating = null;
static ArrayList&lt;String&gt; BookDescription = null;
static ArrayList&lt;String&gt; BookCoverPhotos = null;
static ArrayList&lt;String&gt; BookAuther = null;

    ConnectivityManager cm;

    @Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);


    cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);

    // First Check the Internet Connectivity
    if (cm.getActiveNetworkInfo() != null
                &amp;&amp; cm.getActiveNetworkInfo().isAvailable()
                &amp;&amp; cm.getActiveNetworkInfo().isConnected()) {
            // Avoid to reload the page again and again
            if (BookTitle == null) {
                BookTitle = new ArrayList&lt;String&gt;();
                BookRating = new ArrayList&lt;Integer&gt;();
                BookDescription = new ArrayList&lt;String&gt;();
                BookIDs = new ArrayList&lt;String&gt;();
                BookCode = new ArrayList&lt;String&gt;();
                BookCoverPhotos = new ArrayList&lt;String&gt;();
                BookAuther = new ArrayList&lt;String&gt;();

                                    // Execute the AsyncTask
                new myBackGroundTask().execute(URL);
            } else {

                ImageAdapter adapter2 = new ImageAdapter(getBaseContext(),
                        act);
                adapter2.notifyDataSetChanged();
                gridView.setAdapter(adapter2);
                             }
</code></pre>

<p>and here is the asyncTask Showing how we can parse the XML in background</p>

<pre><code>private class myAsyncTask extends AsyncTask&lt;String, Integer, String&gt; {

    ProgressDialog progressDialog;
    ImageAdapter adapter = new ImageAdapter(getBaseContext(), act);

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        progressDialog = ProgressDialog.show(getParent(),
                "Your Title ...",
                "This may Take a few seconds.\nPlease Wait...");

    }

    @Override
    protected String doInBackground(String... params) {

        String URL = params[0];
        XMLParser parser = new XMLParser();
        String XMLString = null;
        XMLString = parser.getXmlFromUrl_FeaturedBooks(URL, lIndex);

        if (XMLString != null) {

            Document doc = parser.getDomElement(XMLString);
            NodeList nl = doc.getElementsByTagName(KEY_ITEM);

            // looping through all item nodes &lt;item&gt;

            for (int i = 0; i &lt; nl.getLength(); i++) {

                Element e = (Element) nl.item(i);

                try {
                    BookRating.add(Integer.valueOf(parser.getValue(e,
                            KEY_BOOKRATING)));

                } catch (Exception e2) {
                    BookRating.add(0);
                }

                BookDescription.add(parser.getValue(e, KEY_BOOKDESC));
                BookTitle.add(parser.getValue(e, KEY_BOOKTITLE));
                BookCoverPhotos
                        .add("http://shiaislamicbooks.com/books_Snaps/"
                                + parser.getValue(e, KEY_BOOKCODE)
                                + "/1_thumb.jpg");
                int tempCount = BookCoverPhotos.size() - 1;
                BookAuther.add(parser.getValue(e, KEY_BOOKAUTHOR));

                publishProgress(i + 1);
            }

        } else {
                            // Request Time
            publishProgress(5000);
        }

        return null;
    }

    @Override
    protected void onProgressUpdate(Integer... values) {
        super.onProgressUpdate(values);
        progressDialog.setMessage(values[0]
                + " Book(s) found \nPlease wait...");
        adapter.notifyDataSetChanged();
        if (values[0] == 5000) {
            Toast.makeText(context,
                    "Rrequest Time out!\nNo or Slow Internet Connection!",
                    Toast.LENGTH_LONG).show();
        }
    }

    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);
        progressDialog.dismiss();
        adapter.notifyDataSetChanged();
        gridView.setAdapter(adapter);

    }
}
</code></pre>

<h3>Edit</h3>

<p>Here is the imageAdapter which extends the BaseAdapter class</p>

<pre><code>public class ImageAdapter extends BaseAdapter {

    public ImageAdapter(Context c) {
        context = c;

    }

    // ---returns the number of images---
    public int getCount() {

        return BookTitle.size();

    }

    public ImageAdapter(Context ctx, Activity act) {

        inflater = (LayoutInflater) act
                .getSystemService(Context.LAYOUT_INFLATER_SERVICE);

    }

    // ---returns the ID of an item---
    public Object getItem(int position) {
        return position;
    }

    public long getItemId(int position) {
        return position;
    }

    // ---returns an ImageView view---
    public View getView(int position, View convertView, ViewGroup parent) {

        // ImageView bmImage;

        final ViewHolder holder;
        View vi = convertView;
        if (convertView == null) {
            vi = inflater.inflate(R.layout.grid_style, parent, false);
            holder = new ViewHolder();
            holder.txt_BooksTitle = (TextView) vi
                    .findViewById(R.id.txt_BookTitle);

            holder.img_BookCoverPhoto = (ImageView) vi
                    .findViewById(R.id.imgBookCover);
            vi.setTag(holder);
        } else {

            holder = (ViewHolder) vi.getTag();
        }
        holder.txt_BooksTitle.setText(BookTitle.get(position) + "");
        holder.img_BookCoverPhoto.setImageBitmap(bitmapArray.get(position));
        return vi;
    }
}

class ViewHolder {
    TextView txt_BooksTitle;
    ImageView img_BookCoverPhoto;
}
</code></pre>
