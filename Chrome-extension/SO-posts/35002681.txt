<p>Well, if you want the text to be drawn normally (as in a 0 degree rotation), but scale to meet the boundaries of the View, you can use something like this:</p>

<pre><code>public class ScalingTextCustomTextView extends CustomTextView {

    public ScalingTextCustomTextView(Context context) {
        super(context);
    }

    public ScalingTextCustomTextView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        int parentWidth = MeasureSpec.getSize(widthMeasureSpec);
        int height = getMeasuredHeight();

        refitText(this.getText().toString(), parentWidth);

        this.setMeasuredDimension(parentWidth, height);
    }

    @Override
    protected void onTextChanged(final CharSequence text, final int start, final int before, final int after) {
        refitText(text.toString(), this.getWidth());
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        if(w != oldw)
            refitText(this.getText().toString(), w);
    }

    private void refitText(String text, int textWidth) {
        if(textWidth &lt;= 0)
            return;

        int targetWidth = textWidth - this.getPaddingLeft() - this.getPaddingRight();
        float hi = 200;
        float lo = 2;
        final float threshold = 0.5f;

        Paint temp = new Paint();
        temp.set(getPaint());

        while((hi - lo) &gt; threshold){
            float size = (hi + lo) / 2;
            temp.setTextSize(size);

            if(temp.measureText(text) &gt;= targetWidth)
                hi = size;
            else lo = size;
        }

        this.setTextSize(TypedValue.COMPLEX_UNIT_PX, lo);
    }
}`
</code></pre>

<p>If you want it to rotate 45 degrees, you can just add:</p>

<pre><code>@Override
public void onDraw(Canvas canvas){
    canvas.save();
    canvas.rotate(45, canvas.getWidth() / 2, canvas.getHeight() / 2);
    super.onDraw(canvas);
    canvas.restore();
}
</code></pre>

<p>But if you want that to scale slightly larger to fit the longest distance, you'd have to adjust refitText to calculate the target width based on the distance from top-left to bottom-right.</p>

<p>This should point you in the right direction, though.</p>
