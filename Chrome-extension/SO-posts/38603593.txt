<p>You can try with the code belows:</p>

<pre><code>public void loadPhotoToView(String path) {
        File imgFile = new File(path);
        if (imgFile.exists()) {
            imageView.setImageBitmap(decodeFile(imgFile));
        }
    }

    // Decode image and scale it to reduce memory consumption
    public Bitmap decodeFile(File f) {
        try {
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(new FileInputStream(f), null, o);

            // The new size we want to scale to, the bigger the better of quality
            final int REQUIRED_SIZE = 200;

            // Find the correct scale value. It should be the power of 2.
            int scale = 1;
            while (o.outWidth / scale / 2 &gt;= REQUIRED_SIZE &amp;&amp;
                    o.outHeight / scale / 2 &gt;= REQUIRED_SIZE) {
                scale *= 2;
            }

            // Decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize = scale;
            return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
        } catch (FileNotFoundException e) {
        }
        return null;
    }
</code></pre>

<p>Another way is use a library like Picasso to load image:</p>

<pre><code>Picasso.with(this).load(imgFile).into(imageView);
</code></pre>
