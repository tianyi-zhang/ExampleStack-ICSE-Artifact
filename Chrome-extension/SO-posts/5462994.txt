<p>Here is the code sample from <a href="http://technojeeves.com/joomla/index.php/free/75-scan-ip-range" rel="nofollow">TechnoJeeves</a> to do this. </p>

<pre><code>import java.net.InetAddress;

public class ScanNet {
    public static void main(String[] args) throws Exception {
    int[] bounds = ScanNet.rangeFromCidr("192.168.1.255/24");

    for (int i = bounds[0]; i &lt;= bounds[1]; i++) {
        String address = InetRange.intToIp(i);
        InetAddress ip = InetAddress.getByName(address);

        if (ip.isReachable(100)) { // Try for one tenth of a second
            System.out.printf("Address %s is reachable\n", ip);
        }
    }
}

public static int[] rangeFromCidr(String cidrIp) {
    int maskStub = 1 &lt;&lt; 31;
    String[] atoms = cidrIp.split("/");
    int mask = Integer.parseInt(atoms[1]);
    System.out.println(mask);

    int[] result = new int[2];
    result[0] = InetRange.ipToInt(atoms[0]) &amp; (maskStub &gt;&gt; (mask - 1)); // lower bound
    result[1] = InetRange.ipToInt(atoms[0]); // upper bound
    System.out.println(InetRange.intToIp(result[0]));
    System.out.println(InetRange.intToIp(result[1]));

    return result;
}

static class InetRange {
    public static int ipToInt(String ipAddress) {
        try {
            byte[] bytes = InetAddress.getByName(ipAddress).getAddress();
            int octet1 = (bytes[0] &amp; 0xFF) &lt;&lt; 24;
            int octet2 = (bytes[1] &amp; 0xFF) &lt;&lt; 16;
            int octet3 = (bytes[2] &amp; 0xFF) &lt;&lt; 8;
            int octet4 = bytes[3] &amp; 0xFF;
            int address = octet1 | octet2 | octet3 | octet4;

            return address;
        } catch (Exception e) {
            e.printStackTrace();

            return 0;
        }
    }

    public static String intToIp(int ipAddress) {
        int octet1 = (ipAddress &amp; 0xFF000000) &gt;&gt;&gt; 24;
        int octet2 = (ipAddress &amp; 0xFF0000) &gt;&gt;&gt; 16;
        int octet3 = (ipAddress &amp; 0xFF00) &gt;&gt;&gt; 8;
        int octet4 = ipAddress &amp; 0xFF;

        return new StringBuffer().append(octet1).append('.').append(octet2)
                                 .append('.').append(octet3).append('.')
                                 .append(octet4).toString();
    }
} }
</code></pre>
