<p>I stumbled over the answers here and in the linked question in my search and want to add two pieces of information, as the accepted answer doesn't fit my quite similar scenario, but there is an additional solution that fits even in that case (cert and hostname don't match for test systems).</p>

<ol>
<li>There is a github request to add such a functionality. So perhaps soon the problem will be solved: <a href="https://github.com/jhy/jsoup/pull/343" rel="nofollow">https://github.com/jhy/jsoup/pull/343</a> 
edit: Github request was resolved and the method to disable certificate validation is: validateTLSCertificates(boolean validate)</li>
<li>Based on <a href="http://www.nakov.com/blog/2009/07/16/disable-certificate-validation-in-java-ssl-connections/" rel="nofollow">http://www.nakov.com/blog/2009/07/16/disable-certificate-validation-in-java-ssl-connections/</a> I found a solution which seems to work (at least in my scenario where jsoup 1.7.3 is called as part of a maven task). I wrapped it in a method <code>disableSSLCertCheck()</code> that I call before the very first Jsoup.connect().</li>
</ol>

<p><strong>Before you use this method</strong>, you should be really sure that you understand what you do there - not checking SSL certificates is a really stupid thing. Always use correct SSL certificates for your servers which are signed by a commonly accepted CA. If you can't afford a commonly accepted CA use correct SSL certificates nevertheless with @BalusC accepted answer above. If you can't configure correct SSL certificates (which should never be the case in production environments) the following method could work:</p>

<pre><code>    private void disableSSLCertCheck() throws NoSuchAlgorithmException, KeyManagementException {
    // Create a trust manager that does not validate certificate chains
    TrustManager[] trustAllCerts = new TrustManager[] {new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }
            public void checkClientTrusted(X509Certificate[] certs, String authType) {
            }
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
            }
        }
    };

    // Install the all-trusting trust manager
    SSLContext sc = SSLContext.getInstance("SSL");
    sc.init(null, trustAllCerts, new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

    // Create all-trusting host name verifier
    HostnameVerifier allHostsValid = new HostnameVerifier() {
        public boolean verify(String hostname, SSLSession session) {
            return true;
        }
    };

    // Install the all-trusting host verifier
    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
    }
</code></pre>
