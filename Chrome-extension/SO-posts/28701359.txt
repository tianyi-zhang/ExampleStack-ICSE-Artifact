<p>You need to give a unique field name to the JButton in the center.</p>

<pre><code>goingButton = new JButton("Going...");
pane.add(goingButton, BorderLayout.CENTER);
</code></pre>

<p>Then you need to write an action listener for the other buttons that change the text of the goingButton.  Here's how you set the text of a JButton.</p>

<pre><code>    button.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent event) {
            goingButton.setText("Going up");
        }       
    });
</code></pre>

<p>Edited to just give you the modified code.  You're not going to learn anything if others do your work for you.</p>

<p>Here's a screen shot of the BorderLayoutDemo.</p>

<p><img src="http://i.stack.imgur.com/63wfc.png" alt="Border Layout Demo"></p>

<p>And here's the code, formatted and modified for you:</p>

<pre><code>package com.ggl.testing;

/*
 * BorderLayoutDemo.java
 *
 */
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class BorderLayoutDemo {
    private static final boolean RIGHT_TO_LEFT = false;

    private JButton goingButton;

    public void addComponentsToPane(Container pane) {

        if (!(pane.getLayout() instanceof BorderLayout)) {
            pane.add(new JLabel("Container doesn't use BorderLayout!"));
            return;
        }

        if (RIGHT_TO_LEFT) {
            pane.setComponentOrientation(java.awt.ComponentOrientation.RIGHT_TO_LEFT);
        }

        pane.setPreferredSize(new Dimension(400, 400));

        JButton button = new JButton("Up");
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                goingButton.setText("Going up");
            }
        });
        pane.add(button, BorderLayout.PAGE_START);

        // Make the center component 400x400
        // typical usage of BorderLayout.

        goingButton = new JButton("Going...");
        goingButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                goingButton.setText("Going crazy");
            }
        });
        pane.add(goingButton, BorderLayout.CENTER);

        button = new JButton("Left");
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                goingButton.setText("Going left");
            }
        });
        pane.add(button, BorderLayout.LINE_START);

        button = new JButton("Down");
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                goingButton.setText("Going down");
            }
        });
        pane.add(button, BorderLayout.PAGE_END);

        button = new JButton("Right");
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                goingButton.setText("Going right");
            }
        });
        pane.add(button, BorderLayout.LINE_END);
    }

    /**
     * Create the GUI and show it. For thread safety, this method should be
     * invoked from the event dispatch thread.
     */
    private void createAndShowGUI() {

        // Create and set up the window.
        JFrame frame = new JFrame("BorderLayoutDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        // Set up the content pane.
        addComponentsToPane(frame.getContentPane());
        // Use the content pane's default BorderLayout. No need for
        // setLayout(new BorderLayout());
        // Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args) {
        /* Use an appropriate Look and Feel */
        try {
            // UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        }
        /* Turn off metal's use bold fonts */
        UIManager.put("swing.boldMetal", Boolean.FALSE);

        // Schedule a job for the event dispatch thread:
        // creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new BorderLayoutDemo().createAndShowGUI();
            }
        });
    }
}
</code></pre>
