<p>This first thing that comes to mind for me is to have a custom <code>ViewPager</code> in which, when your touch listeners get notified of a specific event you could set the <code>swipeable</code> <code>boolean</code> in <code>ViewPager</code> to false and set it back to true whichever way best fits your application.</p>

<pre><code>public class CustomViewPager extends ViewPager {
    private boolean swipeable = true;

    public CustomViewPager(Context context) {
        super(context);
    }

    public CustomViewPager(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    // Call this method in your motion events when you want to disable or enable
    // It should work as desired.
    public void setSwipeable(boolean swipeable) {
        this.swipeable = swipeable;
    }

    @Override
    public boolean onInterceptTouchEvent(MotionEvent arg0) {
        return (this.swipeable) ? super.onInterceptTouchEvent(arg0) : false; 
    }

}
</code></pre>

<hr>

<p>Make sure to change your layout file to show:</p>



<pre><code>&lt;com.your.package.CustomViewPager .. /&gt;
</code></pre>

<p>Instead of:</p>



<pre><code>&lt;android.support.v4.view.ViewPager .. /&gt;
</code></pre>

<hr>

<p><strong>Edit 2</strong></p>

<p>Here is my setup (Working with the above <code>CustomViewPager</code>):</p>

<pre><code>CustomViewPager mViewPager;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // Set up the action bar.
    final ActionBar actionBar = getActionBar();
    actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

    // Create the adapter that will return a fragment for each of the three
    // primary sections of the app.
    mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

    // Set up the CustomViewPager with the sections adapter.
    mViewPager = (CustomViewPager) findViewById(R.id.pager);
    mViewPager.setAdapter(mSectionsPagerAdapter);
    mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
        @Override
        public void onPageSelected(int position) {
            actionBar.setSelectedNavigationItem(position);
        }
    });

    // For each of the sections in the app, add a tab to the action bar.
    for (int i = 0; i &lt; mSectionsPagerAdapter.getCount(); i++) {
        actionBar.addTab(actionBar.newTab()
                .setText(mSectionsPagerAdapter.getPageTitle(i))
                .setTabListener(this));
    }

}

public void swipeOn(View v) {
    mViewPager.setSwipeable(true);
}

public void swipeOff(View v) {
    mViewPager.setSwipeable(false);
}
</code></pre>

<p>The above shown <code>onCreate</code> is in my <code>MainActivity</code> class which extends <code>FragmentActivity</code>  and implements <code>ActionBar.TabListener</code></p>
