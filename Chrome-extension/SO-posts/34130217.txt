<p>Assuming you are using a <code>BinaryTree&lt;E&gt;</code> similiar to <a href="http://cs.williams.edu/~morgan/cs136-s08/javadoc/structure5/structure5/BinaryTree.html" rel="nofollow">this documentation</a></p>

<p>You can see <a href="http://ideone.com/dGeHpL" rel="nofollow">live version of my solution</a></p>

<p>This is how <code>BinaryTree&lt;E&gt;</code> is built where <code>BinaryTree&lt;E&gt;</code> is the Binary-Tree node itself, and every node in the tree is a tree by itself. This is how the insert method for <code>BinaryTree&lt;E&gt;</code> looks like</p>

<pre><code>public void insert(T value)
{
    if (this.value == null)
    {
        this.value = value;
        return;
    }
    else
    {
        if (this.value.compareTo(value) &gt;= 0)
        {
            if (this.left == null)
                this.left = new BinaryTree&lt;T&gt;(value);
            else
                this.left.add(value);
        }
        else
        {
            if (this.right == null)
                this.right = new BinaryTree&lt;T&gt;(value);
            else
                this.right.add(value);
        }
    }
}
</code></pre>

<p>Here is how the recursive function look like</p>

<pre><code>    private void mirrorSymmetricTree(MirrorTreeNode&lt;T&gt; m, BinaryTreeNode&lt;T&gt; n)
    {
        if (n == null) // base case
        {
            return;
        }

        if (n.left != null)
        {
            m.left = new MirrorTreeNode&lt;T&gt;(n.left.value);
            mirrorSymmetricTree(m.left, n.left);
        }

        if (n.right != null)
        {
            m.right = new MirrorTreeNode&lt;T&gt;(n.right.value);
            mirrorSymmetricTree(m.right, n.right);
        }
    }

    public static MirrorTree mirrorSymmetricTree(BinaryTree&lt;T&gt; t)
    {
        if (t == null)
        {
            return null;
        }

        if (t.root != null)
        {
            this.root = new MirrorTreeNode&lt;T&gt;(t.root.value);
            mirrorSymmetricTree(this.root, t.root);
        }

        return this;
    }
</code></pre>

<p>Where your MirrorTree node would look like this</p>

<pre><code>class MirrorTreeNode&lt;T extends Comparable&lt;T&gt;&gt;
{
    public T value;
    public MirrorTreeNode&lt;T&gt; left;
    public MirrorTreeNode&lt;T&gt; right;

    public MirrorTreeNode&lt;T&gt; (T value)
    {
        this.value = value;
        this.left = null;
        this.right = null;
    }

    ..
}
</code></pre>

<p>Then you can mirror a tree by calling <code>mirrorSymmetricTree</code> on a <code>BinaryTree</code></p>

<pre><code>BinaryTree&lt;String&gt; t1 = new  BinaryTree&lt;&gt;();
t1.addAll({"D","B","F","A","C","E","G"});

//            D
//        B       F
//      A   C   E   G

t1.printDFS();

// A, B, C, D, E, F, G

MirrorTree&lt;String&gt; t2 = new MirrorTree&lt;&gt;();
t2.mirrorSymmetricTree(t1);

// t2 is a copy of t1 now

t2.printDFS();

// A, B, C, D, E, F, G
</code></pre>

<p>Notes</p>

<ul>
<li><p>In order to mirror a binary tree of size N, you have to visit every node in that tree once, thus mirroring a tree has time complexity of <code>O(N)</code></p></li>
<li><p>In order to mirror a binary tree, the items you store has to be <code>Comparable</code>, meaning they can be compared to find out if <code>this.value &gt; input</code> or <code>this.value &lt; input</code> to decide where to put it in the tree</p></li>
<li><p>In order to make sure the items are <code>Comparable</code>, you either implement this manually, or you demand that template type has to implement <code>Comparable&lt;T&gt;</code> interface, which force <code>T</code> to have <code>compareTo</code> function that let you compare values\keys as if they were numbers, where <code>A.compareTo(B) &gt; 0</code> is equivlant to <code>A &gt; B</code></p></li>
</ul>
