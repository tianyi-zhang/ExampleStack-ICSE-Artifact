<p>I figured out that my approach was to complicated for my problem (thanks to MH. for pointing me to this).</p>

<p>Instead I catch the URL request via HttpClient, parse it and give it as html string direct to the view. Sadly this must done in a separate thread (or using external java sources, like <a href="https://developer.android.com/training/volley/simple.html" rel="nofollow">Volly</a>) </p>

<p>class NewsLoaderTask extends AsyncTask {</p>

<pre><code>private WebView webView;

public void init(WebView _webView)
{
    webView = _webView;
}

protected String doInBackground(String... urlStrings) {
    try {
        URI webUrl = new URI(urlStrings[0]);
        HttpClient httpclient = new DefaultHttpClient();
        HttpResponse response = httpclient.execute(new HttpGet(webUrl));
        StatusLine statusLine = response.getStatusLine();
        if(statusLine.getStatusCode() == HttpStatus.SC_OK){
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            response.getEntity().writeTo(out);
            String responseString = out.toString();
            out.close();

            return responseString;
        } else{
            //Closes the connection.
            response.getEntity().getContent().close();
            throw new IOException(statusLine.getReasonPhrase());
        }
    } catch (Exception e)
    {
        Log.i("NewsFragment", "exepction: " + e.toString());
    }
    return "";
}

protected void onPostExecute(String result) {
    // TODO parse my text

    // The baseurl points to the path with the .css and as entry point for gfx
    webView.loadDataWithBaseURL("file:///android_asset/html/library/", outputString, "text/html; charset=utf-8", "UTF-8", null);
}
</code></pre>

<p>}</p>

<p>In my WebView I create a NewsLoaderTask instance and initialize it with my webview as parameter (for displaying the text)</p>

<pre><code>NewsLoaderTask newsloaderTask = new NewsLoaderTask();
newsloaderTask.init(webView);
newsloaderTask.execute(getArguments().getString("url"));
</code></pre>
