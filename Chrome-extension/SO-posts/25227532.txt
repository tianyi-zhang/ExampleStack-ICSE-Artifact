<p>This is not a simple problem. First, since you will want to wait, you need to do this on a background thread (using AsyncTask or a simple thread). Second, if you want it to continue trying/operating after the user exits the activity, you will need a service.</p>

<p>That said, you already have the code in place to check for the "sent" PendingIntent for the message. You need your thread/service to wait for the broadcast receiver responde from the sent message to get a response. </p>

<p>In your "sendSMS" method, you are registering a broadcast receiver to listen for the status of the SMS send. It will tell you whether the send was successful or not, and then you can either continue sending location updates, try again or whatever.</p>

<p>Like this:</p>

<pre><code>  basecontext.registerReceiver(new BroadcastReceiver() {
      @Override
      public void onReceive(Context arg0, Intent arg1) {                  
          switch (getResultCode()) {
          case Activity.RESULT_OK:
              Toast.makeText(basecontext, "SMS sent",
                      Toast.LENGTH_SHORT).show();

              // add code here to send next message

              break;
          case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
              Toast.makeText(basecontext, "Generic failure",
                      Toast.LENGTH_SHORT).show();

              // add code here to try again or wait

              break;
          case SmsManager.RESULT_ERROR_NO_SERVICE:
              Toast.makeText(basecontext,"No Service",Toast.LENGTH_SHORT).show();

              // add code here to try again or wait

              break;
          case SmsManager.RESULT_ERROR_NULL_PDU:                        
              Toast.makeText(basecontext, "Null PDU",
                      Toast.LENGTH_SHORT).show();                           

              // add code here to try again or wait

              break;
          case SmsManager.RESULT_ERROR_RADIO_OFF:
              Toast.makeText(basecontext, "Radio off",
                      Toast.LENGTH_SHORT).show();                           

              // add code here to try again or wait

              break;
          }
      }
  }, new IntentFilter(SENT + someMessageId));
</code></pre>

<p>Your intent filter also needs to identify the message (where I added "someMessageId") if you send more than one SMS before waiting for the receiver to respond.</p>
