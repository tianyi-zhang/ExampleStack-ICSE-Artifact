<p>Many thanks to Baz for putting me on the right track and providing me with some initial code. But having taken all this in I wanted something cleaner to use in my RCP view itself and also though a generic instance of a combo box would be a nice to have in future, so I've wrapped all the boilerplate stuff in a new class that you can use like this:</p>

<pre><code>    List&lt;Person&gt; persons = new ArrayList&lt;Person&gt;();
    persons.add(new Person("Baz",26));
    persons.add(new Person("Glen",27));
    persons.add(new Person("Jimmy",18));

    TypedComboBox&lt;Person&gt; box = new TypedComboBox&lt;Person&gt;(parent);

    box.addSelectionListener(new TypedComboBoxSelectionListener&lt;Person&gt;() {

        @Override
        public void selectionChanged(TypedComboBox&lt;Person&gt; typedComboBox,
                Person newSelection) {
            System.out.println(newSelection);
        }
    });

    box.setLabelProvider(new TypedComboBoxLabelProvider&lt;Person&gt;() {

        @Override
        public String getSelectedLabel(Person element) {
            return element.getName();
        }

        @Override
        public String getListLabel(Person element) {
            return element.getName() + " | " + element.getAge();
        }
    });


    box.setContent(persons);

    box.selectFirstItem();
</code></pre>

<p>For my view where I'm going to need multiple selection boxes with various objects I am much more happy using the typed box as I'm not casting stuff and reproducing boilerplate code in the body of the view's code.</p>

<p>You don't have to set a label provider if you just want the toSting() method used, otherwise there are two labels to provide, one for the selected item, and one for all the others.</p>

<p>Just in case anyone stumbles upon this question with the same issue as me here's my code, feedback would be greatly appreciated.</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

import org.eclipse.jface.viewers.ArrayContentProvider;
import org.eclipse.jface.viewers.ComboViewer;
import org.eclipse.jface.viewers.ISelectionChangedListener;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.LabelProvider;
import org.eclipse.jface.viewers.SelectionChangedEvent;
import org.eclipse.jface.viewers.StructuredSelection;
import org.eclipse.swt.SWT;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

public class TypedComboBox&lt;T&gt; {

    private ComboViewer viewer;
    private TypedComboBoxLabelProvider&lt;T&gt; labelProvider;
    private List&lt;T&gt; content;
    private List&lt;TypedComboBoxSelectionListener&lt;T&gt;&gt; selectionListeners;
    private T currentSelection;

    public TypedComboBox(Composite parent) {
        this.viewer = new ComboViewer(parent, SWT.READ_ONLY);
        this.viewer.setContentProvider(ArrayContentProvider.getInstance());

        viewer.setLabelProvider(new LabelProvider() {
            @Override
            public String getText(Object element) {
                T typedElement = getTypedObject(element);
                if (labelProvider != null &amp;&amp; typedElement != null) {
                    if (typedElement == currentSelection) {
                        return labelProvider.getSelectedLabel(typedElement);
                    } else {
                        return labelProvider.getListLabel(typedElement);
                    }

                } else {
                    return element.toString();
                }
            }
        });

        viewer.addSelectionChangedListener(new ISelectionChangedListener() {
            @Override
            public void selectionChanged(SelectionChangedEvent event) {
                IStructuredSelection selection = (IStructuredSelection) event
                        .getSelection();
                T typedSelection = getTypedObject(selection.getFirstElement());
                if (typedSelection != null) {
                    currentSelection = typedSelection;
                    viewer.refresh();
                    notifySelectionListeners(typedSelection);
                }

            }
        });

        this.content = new ArrayList&lt;T&gt;();
        this.selectionListeners = new ArrayList&lt;TypedComboBoxSelectionListener&lt;T&gt;&gt;();
    }

    public void setLabelProvider(TypedComboBoxLabelProvider&lt;T&gt; labelProvider) {
        this.labelProvider = labelProvider;
    }

    public void setContent(List&lt;T&gt; content) {
        this.content = content;
        this.viewer.setInput(content.toArray());
    }

    public T getSelection() {
        return currentSelection;
    }

    public void setSelection(T selection) {
        if (content.contains(selection)) {
            viewer.setSelection(new StructuredSelection(selection), true);
        }
    }

    public void selectFirstItem() {
        if (content.size()&gt;0) {
            setSelection(content.get(0));
        }
    }
    public void addSelectionListener(TypedComboBoxSelectionListener&lt;T&gt; listener) {
        this.selectionListeners.add(listener);
    }

    public void removeSelectionListener(
            TypedComboBoxSelectionListener&lt;T&gt; listener) {
        this.selectionListeners.remove(listener);
    }

    private T getTypedObject(Object o) {
        if (content.contains(o)) {
            return content.get(content.indexOf(o));
        } else {
            return null;
        }
    }

    private void notifySelectionListeners(T newSelection) {
        for (TypedComboBoxSelectionListener&lt;T&gt; listener : selectionListeners) {
            listener.selectionChanged(this, newSelection);
        }
    }
</code></pre>

<p>And the label provider interface.</p>

<pre><code>public interface TypedComboBoxLabelProvider&lt;T&gt; {

    public String getSelectedLabel(T element);

    public String getListLabel(T element);

}
</code></pre>

<p>And the selection listener:</p>

<pre><code>public interface TypedComboBoxSelectionListener&lt;T&gt; {

    public void selectionChanged(TypedComboBox&lt;T&gt; typedComboBox, T newSelection);
}
</code></pre>
