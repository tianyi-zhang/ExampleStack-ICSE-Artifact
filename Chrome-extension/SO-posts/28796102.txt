<p>If I understand correctly you just want two columns so you can set this either in your layout file:</p>

<pre><code>&lt;GridView
 ...
 android:numColumns="2"/&gt;
</code></pre>

<p>Or in code:</p>

<pre><code>gridView.setNumColumns(2);
</code></pre>

<p>Now everything you put into the array that populates the grid will be placed into the correct position.  </p>

<p>arrayElement1, arrayElement2, arrayElement3, arrayElement4...  will display like this:</p>

<pre><code>1,2
3,4
...
</code></pre>

<p>If it must be dynamic then I don't think that the <code>GridView</code> with a passed in list of static objects is the best way to go.  I would use a <code>ListView</code> and override an adapter that allows you to populate a custom view that has two <code>FrameLayout</code> views next to each other inside another <code>LinearLayout</code> - the left frame with the time and right frame with the string you want to display next to it.  This method will give you the same appearance of the grid view with two columns but give you far more control over everything about the process.</p>

<p><strong>elenco_appuntamenti.xml</strong> (your layout file)</p>

<pre><code>...
&lt;ListView
  android:id="@+id/container"
  ....
  /&gt;
...
</code></pre>

<p><strong>individual_row.xml</strong> This will be the row that contains both the time and the event text next to each other.  This is each row that we will push into the <code>ListView</code>.</p>

<p>
</p>

<pre><code>&lt;FrameLayout
    android:layout_width="75dp"
    android:layout_height="75dp"&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="8:00"
        android:gravity="center"
        android:layout_gravity="center"
        android:id="@+id/timeText"/&gt;

    &lt;/FrameLayout&gt;

&lt;FrameLayout
    android:layout_width="75dp"
    android:layout_height="75dp"&gt;

    &lt;TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="EVENT"
        android:gravity="center"
        android:layout_gravity="center"
        android:id="@+id/eventText"/&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p></p>

<p>Adapter to populate the rows with data:</p>

<pre><code>public class yourAdapter extends ArrayAdapter{

    public class EntryHolderItem{

        TextView txtTime;
        TextView txtEvent;

    }

    List&lt;SettingsMenuEntry&gt; itemList;
    EntryHolderItem viewHolder;
    public SomeObject entry_object;

    public yourAdapter(Context _context, int layout, List&lt;SettingsMenuEntry&gt; itemList){
        super(_context, layout, itemList);

        this.itemList = itemList;

    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent){

        if(convertView == null){


            String inflator = Context.LAYOUT_INFLATER_SERVICE;

            LayoutInflater vi = (LayoutInflater)getContext().getSystemService(inflator);

            convertView = vi.inflate(R.layout.individual_row, parent, false);

            viewHolder = new EntryHolderItem();
            viewHolder.txtTime    = (TextView) convertView.findViewById(R.id.timeText);
            viewHolder.txtEvent = (TextView) convertView.findViewById(R.id.eventText);
            convertView.setTag(viewHolder);

        }else{

            viewHolder = (EntryHolderItem) convertView.getTag();
        }

        entry_object = getItem(position);

        //if you pass in just your list of times that you have built already you will only have
        //a string object available to you
        viewHolder.txtTime.setText(entry_object);
        viewHolder.txtEvent.setText("event goes here");

        //but if you decide to create a list of objects that have fields you could do something
        //like this:
        //obviously this will break if you are not passing in an object with 
        //these fields
        //viewHolder.txtTime.setText(entry_object.time);
        //viewHolder.txtEvent.setText(entry_object.event);

        return convertView;

    }

}
</code></pre>

<p>Now you can call yourAdapter much like you already have and setting the adapter on your listView.  You will want to replace your GridView with a ListView in your <code>elenco_appuntamenti</code> layout:</p>

<pre><code>listView = (ListView) rootView.findViewById(R.id.container);
ArrayAdapter&lt;String&gt; adapter = new yourAdapter&lt;String&gt;(getActivity(), android.R.layout.simple_list_item_1, orari);
listView.setAdapter(adapter);
</code></pre>
