<p>Hello I managed to take a video @ 30fps or we can even get a video @60 fps from my idea and my video is super smooth</p>

<p>If anybody is intereseted please check this out.</p>

<p>The idea is simple we want screen shot of every frame with a 60fps or 29.97fps(my video).</p>

<p>Done in 3 steps:
1) render everything at 1/60 as delta time of screen</p>

<p>2) take screenhots of every frame</p>

<p>3) make a video of all those png files(i use adobe premiere pro)</p>

<p>Step 1) in libgdx i extend the Game class and make a new class MyGame extends Game
or class MyGame extends ApplicationListener
now change its render method for temporary use</p>

<pre><code>ScreenShotUtils screenShotUtils=new ScreenShotUtils();
@Override
    public void render () {
        //if (screen != null) screen.render(Gdx.graphics.getDeltaTime());
        //write your video fps as 1f/29.97f or 1f/30f
        if (screen != null){
            screen.render(1f/60f);
            screenShotUtils.update();
        }
    }
</code></pre>

<p>Step 2) capture screenshots using the capture method of ScreenShotUtils class
call the capture method when you need to capture just make a button in your game to start and stop recording</p>

<pre><code>//call on start click
screenShotUtils.capture(true);
//call on stop click
screenShotUtils.capture(false);
</code></pre>

<p>Note: when you will start the capture the game will lag, it will be super slow, but the render delta time will not let the ui update less then 60 fps and you will get screenshots at 60 fps, now play the game during this lag and you will have smooth image sequence during video publishing</p>

<pre><code>public class ScreenShotUtils {
    String filefolder="D:/capturefolder";// your folder to put the images in
    String filenameprefix="";
    int frameid=0,captureLimit=-1;
    private boolean isCapturing=false;
    public void setCaptureLimit(int frames){
        captureLimit=frames;
    }
    public boolean isCapturing(){
        return isCapturing;
    }

    public void capture(boolean capture){
        if(capture){
            if(!isCapturing) {
                isCapturing = true;
                filenameprefix="Demo"+System.currentTimeMillis();//Images Prefix
                frameid=0;
            }
        }else{
            isCapturing=false;
            captureLimit=-1;
            frameid=0;
        }
    }
    public void capture(boolean capture, int frames){
        if(capture){
            if(!isCapturing) {
                isCapturing = true;
                filenameprefix="Demo"+System.currentTimeMillis();//Images Prefix
                frameid=0;
            }
            captureLimit=frames;
        }else{
            isCapturing=false;
            captureLimit=-1;
            frameid=0;
        }
    }

    public void update() {

        // render before capturing

        if(isCapturing) {
            if(captureLimit&lt;0)
                saveScreenshot();
            else
                if(captureLimit==0){
                    isCapturing = false;
                    captureLimit=-1;
                }else{
                    saveScreenshot();
                    captureLimit--;
                }
        }
    }
    private void saveScreenshot() {
        int MAX_DIGITS = 6;
        String fname = "" + (frameid++);
        int zeros = MAX_DIGITS - fname.length();
        for (int i = 0; i &lt; zeros; i++) {
            fname = "0" + fname;
        }

        FileHandle file = new FileHandle(filefolder+"/"+filenameprefix +"-"+ fname+".png");
        Pixmap pixmap = getScreenshot(0, 0, Gdx.graphics.getWidth(),
                Gdx.graphics.getHeight(), true);
        PixmapIO.writePNG(file, pixmap);
        pixmap.dispose();
    }
    private Pixmap getScreenshot(int x, int y, int w, int h, boolean flipY) {
        Gdx.gl.glPixelStorei(GL20.GL_PACK_ALIGNMENT, 1);

        Pixmap pixmap = new Pixmap(w, h, Pixmap.Format.RGB888);
        ByteBuffer pixels = pixmap.getPixels();
        Gdx.gl.glReadPixels(x, y, w, h, GL20.GL_RGB, GL20.GL_UNSIGNED_BYTE, pixels);

        if (flipY) {
            final int numBytes = w * h * 3;
            byte[] lines = new byte[numBytes];
            final int numBytesPerLine = w * 3;
            for (int i = 0; i &lt; h; i++) {
                pixels.position((h - i - 1) * numBytesPerLine);
                pixels.get(lines, i * numBytesPerLine, numBytesPerLine);
            }
            pixels.clear();
            pixels.put(lines);
        }     

        return pixmap;
    }
}
</code></pre>

<p>3) i used adobe premiere pro for video making, you can use other tools search google(convert image sequence to video)
<a href="https://helpx.adobe.com/premiere-pro/using/importing-still-images.html" rel="nofollow">https://helpx.adobe.com/premiere-pro/using/importing-still-images.html</a>
Section: Import images as an image sequence</p>

<p>Note: i use screenshots of format RGB not RGBA because the alpha bits were messing with the borders of the images. you can try it</p>

<p>Aditionally you can modify the code to save files to android sdcard i used the desktop version, just change the saveScreenshot method's file handle</p>

<p>Disclaimer: i used the screnshot codes and modified them from this website <a href="http://www.wendytech.de/2012/07/opengl-screen-capture-in-real-time/" rel="nofollow">http://www.wendytech.de/2012/07/opengl-screen-capture-in-real-time/</a></p>
