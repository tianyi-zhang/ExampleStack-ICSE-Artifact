<p>To put it simply, get rid of TableLayout and TableRow and TextView altogether!</p>

<p>If you collect profiling data from Eclipse, you'll see that most of the CPU/real time is spent in the addView() method from the TabletLayout and also the TextView. calls!</p>

<p>Each time I've replaced a TableLayout and TextView with custom implementations it resulted in a HUGE performance gain!</p>

<p>TextView should be replaced by custom View, TableLayout by custom ListView.</p>

<p>EDIT: I have created a few custom views depending on my needs. To put it simply I've overwritten the View class with onDraw() and onMeasure() methods: </p>

<p>In below code, the painter is created once in the static constructor, so are textBaseline and textHeight as I'm using a single font size for all those custom "text" views.</p>

<pre><code>@Override
protected void onDraw(Canvas canvas) 
{
    final int width = getWidth();
    final float size = painter.measureText(innerText);

    canvas.drawText(innerText, width - size - 5, textBaseline, painter);

    if (underline)
    {
        canvas.drawLine(0, canvas.getHeight() - 1, canvas.getWidth(), canvas.getHeight() - 1, painter);
    }
}

@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) 
{
    int w = MeasureSpec.getSize(widthMeasureSpec);
    int h = MeasureSpec.getSize(heightMeasureSpec);

    if (innerText != null &amp;&amp; painter != null)
    {
        switch (MeasureSpec.getMode(widthMeasureSpec))
        {
            case MeasureSpec.EXACTLY:
                break;
            case MeasureSpec.AT_MOST:
            case MeasureSpec.UNSPECIFIED:
                w = (int)( (painter.measureText(innerText) + 5) );
                break;
        }
    }
    switch (MeasureSpec.getMode(heightMeasureSpec))
    {
        case MeasureSpec.EXACTLY:
            break;
        case MeasureSpec.AT_MOST:
        case MeasureSpec.UNSPECIFIED:
            h = (int)( textHeight );
            break;
    }

    setMeasuredDimension(w, h);
}
</code></pre>
