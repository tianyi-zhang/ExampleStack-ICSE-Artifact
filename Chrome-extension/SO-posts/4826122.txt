<p>If you want to handle <code>https</code> etc, I suggest you do something like this:</p>

<pre><code>int slashslash = url.indexOf("//") + 2;
domain = url.substring(slashslash, url.indexOf('/', slashslash));
</code></pre>

<p>Note that this is includes the <code>www</code> part (just as <code>URL.getHost()</code> would do) which is actually part of the domain name.</p>

<p><strong>Edit Requested via comments</strong></p>

<p>Here are two methods that might be helpful:</p>

<pre><code>/**
 * Will take a url such as http://www.stackoverflow.com and return www.stackoverflow.com
 * 
 * @param url
 * @return
 */
public static String getHost(String url){
    if(url == null || url.length() == 0)
        return "";

    int doubleslash = url.indexOf("//");
    if(doubleslash == -1)
        doubleslash = 0;
    else
        doubleslash += 2;

    int end = url.indexOf('/', doubleslash);
    end = end &gt;= 0 ? end : url.length();

    int port = url.indexOf(':', doubleslash);
    end = (port &gt; 0 &amp;&amp; port &lt; end) ? port : end;

    return url.substring(doubleslash, end);
}


/**  Based on : http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.3.3_r1/android/webkit/CookieManager.java#CookieManager.getBaseDomain%28java.lang.String%29
 * Get the base domain for a given host or url. E.g. mail.google.com will return google.com
 * @param host 
 * @return 
 */
public static String getBaseDomain(String url) {
    String host = getHost(url);

    int startIndex = 0;
    int nextIndex = host.indexOf('.');
    int lastIndex = host.lastIndexOf('.');
    while (nextIndex &lt; lastIndex) {
        startIndex = nextIndex + 1;
        nextIndex = host.indexOf('.', startIndex);
    }
    if (startIndex &gt; 0) {
        return host.substring(startIndex);
    } else {
        return host;
    }
}
</code></pre>
