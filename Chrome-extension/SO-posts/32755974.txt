<p>First you need to create a Model class (lets say Category), that contains the <code>name</code> and the <code>id</code>:</p>

<pre><code>public class  Category{
    public String name;
    public String id;
}
</code></pre>

<p>Then load a list of Category object from your json:</p>

<pre><code>List&lt;Category&gt; CATEGORY = new ArrayList&lt;Category&gt;();
for(int i=0;i&lt;categories.length();i++){
     JSONObject c = categories.getJSONObject(i);
     Category category = new Category();
     category.name = c.getString(TAG_NAME);
     category.id = c.getString(TAG_ID);

     CATEGORY.add(category);
 }
</code></pre>

<p>Finally pass a  <code>HashMap&lt;String, List&lt;Category&gt;&gt;</code> as parameter in your adapter instead of <code>HashMap&lt;String, List&lt;String&gt;&gt;</code>. And change your adapter methods to support Category object instead of String.</p>

<p>So when you call <code>getChild()</code> method, it will return a <code>Category</code> object where you can find the <code>name</code> and the <code>id</code> (<code>Category.name</code> , <code>Category.id</code>)</p>

<p><strong>Update</strong></p>

<p>Change your adapter class to:</p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter {

    private Context _context;
    private List&lt;String&gt; _listDataHeader; // header titles
    // child data in format of header title, child title
    private HashMap&lt;String, List&lt;Category&gt;&gt; _listDataChild;

    public ExpandableListAdapter(Context context, List&lt;String&gt; listDataHeader,
                                 HashMap&lt;String, List&lt;Category&gt;&gt; listChildData) {
        this._context = context;
        this._listDataHeader = listDataHeader;
        this._listDataChild = listChildData;
    }

    @Override
    public Category getChild(int groupPosition, int childPosititon) {
        return this._listDataChild.get(this._listDataHeader.get(groupPosition))
                .get(childPosititon);
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }

    @Override
    public View getChildView(int groupPosition, final int childPosition,
                             boolean isLastChild, View convertView, ViewGroup parent) {

        final Category childCategory = (Category) getChild(groupPosition, childPosition);

        if (convertView == null) {
            LayoutInflater infalInflater = (LayoutInflater) this._context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.list_item, null);
        }

        TextView txtListChild = (TextView) convertView
                .findViewById(R.id.lblListItem);

        txtListChild.setText(childCategory.name);
        return convertView;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        return this._listDataChild.get(this._listDataHeader.get(groupPosition))
                .size();
    }

    @Override
    public Object getGroup(int groupPosition) {
        return this._listDataHeader.get(groupPosition);
    }

    @Override
    public int getGroupCount() {
        return this._listDataHeader.size();
    }

    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded,
                             View convertView, ViewGroup parent) {
        String headerTitle = (String) getGroup(groupPosition);
        if (convertView == null) {
            LayoutInflater infalInflater = (LayoutInflater) this._context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.list_group, null);
        }

        TextView lblListHeader = (TextView) convertView
                .findViewById(R.id.lblListHeader);
        lblListHeader.setTypeface(null, Typeface.BOLD);
        lblListHeader.setText(headerTitle);

        return convertView;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    }
}
</code></pre>

<p>And in your click listener:</p>

<pre><code>expListView.setOnChildClickListener(new ExpandableListView.OnChildClickListener() {

   @Override
   public boolean onChildClick(ExpandableListView parent, View v,
                                                int groupPosition, int childPosition, long id) {
          // TODO Auto-generated method stub

            String header = listDataHeader.get(groupPosition);
            Category child = listDataChild.get(header).get(childPosition);

            // child.name to get the name
            // child.id to get the id
           Toast.makeText(getActivity(),"ChildNme: "+child.name+" ChildId: "+child.id, Toast.LENGTH_SHORT).show();
            return false;
          }
   }); 
</code></pre>
