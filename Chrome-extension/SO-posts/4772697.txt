<p>Here is an alternative answer without creating a new process through Runtime.getRuntime().exec(...) - and you can maintain your System.in/out channels, too. However,
if you are new to the world of java programming and trying to learn the ropes, I would suggest following camickr's advice and not messing with the ClassLoader as described below.</p>

<p>I am assuming the class you need to run is self contained (uses no inner classes) and not already in your classpath or jarfile so you could just create an instance and call its main().
If there are multiple class files involved, just repeat the method for loading them.</p>

<p>So, in the ActionListener that your JButton addActionListener()-ed to ...</p>

<pre><code>public void actionPerformed (ActionEvent e) {
    String classNameToRun = e.getActionCommand(); // Or however you want to get it
    try {
        new MyClassLoader().getInstance(classNameToRun).main (null);
    } catch (ClassNotFoundException ce) {
        JOptionPane.showMessageDialog (null, "Sorry, Cannot load class "+classNameToRun,
                            "Your title", JOptionPane.ERROR_MESSAGE);
}}
</code></pre>

<p>You will need a new class MyClassLoader already in your classpath. Here is a pseudocode:</p>

<pre><code>import java.io.*;
import java.security.*;

public class MyClassLoader extends ClassLoader {

        protected       String classDirectory = "dirOfClassFiles" + File.separator,
                                packageName = "packageNameOfClass.";

        /**
         * Given a classname, get contents of the class file and return it as a byte array.
         */

        private byte[] getBytes (String className) throws IOException {
                byte[] classBytes = null;
                File file = new File (classDirectory + className + ".class");

                // Find out length of the file and assign memory
                // Deal with FileNotFoundException if it is not there
                long len = file.length();
                classBytes = new byte[(int) len];

                // Open the file
                FileInputStream fin = new FileInputStream (file);

                // Read it into the array; if we don't get all, there's an error.
                // System.out.println ("Reading " + len + " bytes");
                int bCount = fin.read (classBytes);
                if (bCount != len)
                        throw new IOException ("Found "+bCount+" bytes, expecting "+len );

                // Don't forget to close the file!
                fin.close();
                // And finally return the file contents as an array
                return classBytes;
        }

        public Class loadClass (String className, boolean resolve)
                                                throws IOException, ClassNotFoundException,
                                                IllegalAccessException, InstantiationException {
                Class myClass = findLoadedClass (packageName + className);
                if (myClass != null)
                        return myClass;

                byte[] rawBytes = getBytes (className);
                myClass = defineClass (packageName + className,
                                                rawBytes, 0, rawBytes.length);
                // System.out.println ("Defined class " +packageName + className);
                if (myClass == null)
                        return myClass;
                if (resolve)
                        resolveClass (myClass);

                return myClass;
        }

        public Object getInstance (String className) throws ClassNotFoundException {
                try {
                        return loadClass (className, true).newInstance();
                } catch (InstantiationException inExp) {        inExp.printStackTrace();
                } catch (IllegalAccessException ilExp) {        ilExp.printStackTrace();
                } catch (IOException ioExp) {                   ioExp.printStackTrace();
                }
                return null;
        }
}
</code></pre>

<p>Notes:
This works well when the class you are trying to load is residing on your local machine and you are running java from the command line. I was never successful trying to get an applet to download a classfile from some servlet and load it - security will not allow that. In that case, the workaround is just to run another applet in another window, but that's another thread. The above classloading solves the problem of having to jar up every single classfile that you might be needing - just to start the GUI. Good luck, - M.S.</p>
