<p>Here is a complete guide for how to package and run the executable. I based it on what I found here and other links, as well as my own trial and error. </p>

<p>1.) In your SDK project, put the executable file in your /assets folder</p>

<p>2.) Programmatically get the String of that files directory (/data/data/your_app_name/files) like this</p>

<pre><code>String appFileDirectory = getFilesDir().getPath();
String executableFilePath = appFileDirectory + "/executable_file";
</code></pre>

<p>3.) In your app's project Java code: copy the executable file from /assets folder into your app's "files" subfolder (usually /data/data/your_app_name/files) with a function like this:</p>

<pre><code>private void copyAssets(String filename) {

AssetManager assetManager = getAssets();

InputStream in = null;
OutputStream out = null;
Log.d(TAG, "Attempting to copy this file: " + filename); // + " to: " +       assetCopyDestination);

try {
    in = assetManager.open(filename);
    Log.d(TAG, "outDir: " + appFileDirectory);
    File outFile = new File(appFileDirectory, filename);
    out = new FileOutputStream(outFile);
    copyFile(in, out);
    in.close();
    in = null;
    out.flush();
    out.close();
    out = null;
} catch(IOException e) {
Log.e(TAG, "Failed to copy asset file: " + filename, e);
} 

Log.d(TAG, "Copy success: " + filename);
}
</code></pre>

<p>4.) Change the file permissions on executable_file to actually make it executable. Do it with Java calls:</p>

<pre><code>File execFile = new File(executableFilePath);
execFile.setExecutable(true);
</code></pre>

<p>5.) Execute the file like this:</p>

<pre><code>Process process = Runtime.getRuntime().exec(executableFilePath);
</code></pre>

<p>Note that any files referred to here (such as input and output files) must have their full path Strings constructed. This is because this is a separate spawned process and it has no concept of what the "pwd" is.</p>

<p>If you want to read the command's stdout you can do this, but so far it's only working for me for system commands (like "ls"), not the executable file:</p>

<pre><code>BufferedReader reader = new BufferedReader(
new InputStreamReader(process.getInputStream()));
int read;
char[] buffer = new char[4096];
StringBuffer output = new StringBuffer();
while ((read = reader.read(buffer)) &gt; 0) {
    output.append(buffer, 0, read);
}
reader.close();
process.waitFor();
</code></pre>

<p>Log.d(TAG, "output: " + output.toString());</p>
