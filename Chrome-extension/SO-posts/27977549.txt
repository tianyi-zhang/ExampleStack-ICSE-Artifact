<p>Never use a KeyListener for this sort of thing as it can mess up the basic function of the JTextField. To listen for changes in the JTextField's content as it's being entered, consider instead adding a DocumentListener to the JTextField's Document.</p>

<p>And if you need to restrict the input to numeric or use any other type of restriction, set the Document's filter via a DocumentFilter (remember to cast it to a PlainDocument first), <strong>or</strong> use a JFormattedTextField, <strong>or</strong> use (my favorite) a JSpinner.</p>

<p>e.g.,</p>

<pre><code>Document doc = myTextField.getDocument();
doc.addDocumentListener(new DocumentListener() {

        void insertUpdate(DocumentEvent e) {
            // ... code to check document change here
        }

        void removeUpdate(DocumentEvent e){
            // ... code to check document change here
        }

        void changedUpdate(DocumentEvent e){
            // ... code to check document change here
        }

});
</code></pre>

<hr>

<p>For example, use of a DocumentListener <strong>and</strong> a DocumentFilter together, the first to add numbers, the second to be sure that only numbers are entered. </p>

<p>Edited now to handle 15 JTextFields:</p>

<pre><code>import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;

@SuppressWarnings("serial")
public class DocListenerEg extends JPanel {
   private static final int FIELD_COUNT = 15;
   private static final int COLS = 6;
   private List&lt;JTextField&gt; fieldList = new ArrayList&lt;&gt;();
   private JTextField sumField = new JTextField(COLS);

   public DocListenerEg() {
      sumField.setFocusable(false);

      DocListener docListener = new DocListener();
      DocFilter docFilter = new DocFilter();
      for (int i = 0; i &lt; FIELD_COUNT; i++) {
         JTextField textField = new JTextField(COLS);
         Document doc = textField.getDocument();
         doc.addDocumentListener(docListener);
         ((PlainDocument) doc).setDocumentFilter(docFilter);
         add(textField);
         fieldList.add(textField);
         String labelText = i &lt; (FIELD_COUNT - 1) ? "+" : "=";
         add(new JLabel(labelText));
      }
      add(sumField);
   }

   private class DocFilter extends DocumentFilter {
      private boolean checkIfIntegerOrEmpty(String text) {
         if (text.isEmpty()) {
            return true;
         } else {
            try {
               Integer.parseInt(text);
               return true;
            } catch (NumberFormatException e) {
            }
         }
         return false;
      }

      @Override
      public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {
         Document doc = fb.getDocument();
         String preText = doc.getText(0, doc.getLength());

         StringBuilder sb = new StringBuilder(preText);
         sb.insert(offset, string);

         if (checkIfIntegerOrEmpty(sb.toString())) {
            super.insertString(fb, offset, string, attr);
         }

      }

      @Override
      public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
         Document doc = fb.getDocument();
         String preText = doc.getText(0, doc.getLength());

         StringBuilder sb = new StringBuilder(preText);
         int end = offset + length;
         sb.replace(offset, end, "");

         if (checkIfIntegerOrEmpty(sb.toString())) {            
            super.remove(fb, offset, length);
         }
      }

      @Override
      public void replace(FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {
         Document doc = fb.getDocument();
         String preText = doc.getText(0, doc.getLength());

         StringBuilder sb = new StringBuilder(preText);
         int end = offset + length;
         sb.replace(offset, end, text);

         if (checkIfIntegerOrEmpty(sb.toString())) {            
            super.replace(fb, offset, length, text, attrs);
         }
      }
   }

   private class DocListener implements DocumentListener {

      private void textChanged() {
         int sum = 0;
         for (JTextField jTextField : fieldList) {
            String text = jTextField.getText().trim();
            if (!text.isEmpty()) {
               sum += Integer.parseInt(text);
            }
         }
         sumField.setText(String.valueOf(sum));
      }

      @Override
      public void insertUpdate(DocumentEvent e) {
         textChanged();
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
         textChanged();
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
         textChanged();
      }

   }

   private static void createAndShowGui() {
      DocListenerEg mainPanel = new DocListenerEg();

      JFrame frame = new JFrame("DocListenerEg");
      frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      frame.getContentPane().add(mainPanel);
      frame.pack();
      frame.setLocationByPlatform(true);
      frame.setVisible(true);
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }
}
</code></pre>

<hr>

<p>Edit: You state in comment,</p>

<blockquote>
  <p>Read whole code, much informative , however way too big if i want to implement for more then 30 textfields .. I have solved the problem , now pasting the solution.</p>
</blockquote>

<p>OK, so this new code below adds numbers from <strong>100 JTextFields</strong>, again with minimal change to original code. To see which solution works best, to see which solution <em>scales</em> best, try to change your current solution to handle something similar:</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;

@SuppressWarnings("serial")
public class DocListenerEg extends JPanel {
   private static final int COLS = 6;
   private static final int GAP = 5;
   private static final int SIDE = 10;
   private List&lt;JTextField&gt; fieldList = new ArrayList&lt;&gt;();
   private JTextField sumField = new JTextField(COLS);

   public DocListenerEg() {
      sumField.setFocusable(false);

      JPanel additionFieldPanel = new JPanel(new GridLayout(SIDE, SIDE, GAP, GAP));
      additionFieldPanel.setBorder(BorderFactory.createTitledBorder("Numbers To Add"));

      DocListener docListener = new DocListener();
      DocFilter docFilter = new DocFilter();
      for (int i = 0; i &lt; SIDE * SIDE; i++) {
         JTextField textField = new JTextField(COLS);
         Document doc = textField.getDocument();
         doc.addDocumentListener(docListener);
         ((PlainDocument) doc).setDocumentFilter(docFilter);
         fieldList.add(textField);
         additionFieldPanel.add(textField);
      }

      JPanel sumPanel = new JPanel();
      sumPanel.add(new JLabel("Sum Of All Numbers:"));
      sumPanel.add(sumField);

      setLayout(new BorderLayout());
      add(additionFieldPanel, BorderLayout.CENTER);
      add(sumPanel, BorderLayout.PAGE_END);
   }

   private class DocFilter extends DocumentFilter {
      private boolean checkIfIntegerOrEmpty(String text) {
         if (text.isEmpty()) {
            return true;
         } else {
            try {
               Integer.parseInt(text);
               return true;
            } catch (NumberFormatException e) {
            }
         }
         return false;
      }

      @Override
      public void insertString(FilterBypass fb, int offset, String string,
            AttributeSet attr) throws BadLocationException {
         Document doc = fb.getDocument();
         String preText = doc.getText(0, doc.getLength());

         StringBuilder sb = new StringBuilder(preText);
         sb.insert(offset, string);

         if (checkIfIntegerOrEmpty(sb.toString())) {
            super.insertString(fb, offset, string, attr);
         }

      }

      @Override
      public void remove(FilterBypass fb, int offset, int length)
            throws BadLocationException {
         Document doc = fb.getDocument();
         String preText = doc.getText(0, doc.getLength());

         StringBuilder sb = new StringBuilder(preText);
         int end = offset + length;
         sb.replace(offset, end, "");

         if (checkIfIntegerOrEmpty(sb.toString())) {            
            super.remove(fb, offset, length);
         }
      }

      @Override
      public void replace(FilterBypass fb, int offset, int length, String text,
            AttributeSet attrs) throws BadLocationException {
         Document doc = fb.getDocument();
         String preText = doc.getText(0, doc.getLength());

         StringBuilder sb = new StringBuilder(preText);
         int end = offset + length;
         sb.replace(offset, end, text);

         if (checkIfIntegerOrEmpty(sb.toString())) {            
            super.replace(fb, offset, length, text, attrs);
         }
      }
   }

   private class DocListener implements DocumentListener {

      private void textChanged() {
         int sum = 0;
         for (JTextField jTextField : fieldList) {
            String text = jTextField.getText().trim();
            if (!text.isEmpty()) {
               System.out.println(text);
               sum += Integer.parseInt(text);
            }
         }
         sumField.setText(String.valueOf(sum));
      }

      @Override
      public void insertUpdate(DocumentEvent e) {
         textChanged();
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
         textChanged();
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
         textChanged();
      }

   }

   private static void createAndShowGui() {
      DocListenerEg mainPanel = new DocListenerEg();

      JFrame frame = new JFrame("DocListenerEg");
      frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      frame.getContentPane().add(mainPanel);
      frame.pack();
      frame.setLocationByPlatform(true);
      frame.setVisible(true);
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }
}
</code></pre>
