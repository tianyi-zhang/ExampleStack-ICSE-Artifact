<p>If my Google skills serve me, <code>Val()</code> converts a string to a number; is that correct?</p>

<p>If so, <a href="http://java.sun.com/javase/6/docs/api/java/lang/Integer.html#parseInt%28java.lang.String%29" rel="nofollow"><code>Integer.parseInt(myString)</code></a> or <a href="http://java.sun.com/javase/6/docs/api/java/lang/Double.html#parseDouble%28java.lang.String%29" rel="nofollow"><code>Double.parseDouble(myString)</code></a> are the closest Java equivalents. However, any invalid character causes them to treat the entire string as invalid; you can't parse, say, street numbers from an address with them.</p>

<p><strong>Edit:</strong> Here is a method that is a closer equivalent:</p>

<pre><code>public static double val(String str) {
    StringBuilder validStr = new StringBuilder();
    boolean seenDot = false;   // when this is true, dots are not allowed
    boolean seenDigit = false; // when this is true, signs are not allowed
    for (int i = 0; i &lt; str.length(); i++) {
        char c = str.charAt(i);
        if (c == '.' &amp;&amp; !seenDot) {
            seenDot = true;
            validStr.append(c);
        } else if ((c == '-' || c == '+') &amp;&amp; !seenDigit) {
            validStr.append(c);
        } else if (Character.isDigit(c)) {
            seenDigit = true;
            validStr.append(c);
        } else if (Character.isWhitespace(c)) {
            // just skip over whitespace
            continue;
        } else {
            // invalid character
            break;
        }
    }
    return Double.parseDouble(validStr.toString());
}
</code></pre>

<p>Test:</p>

<pre><code>public static void main(String[] args) {
    System.out.println(val(" 1615 198th Street N.E."));
    System.out.println(val("2457"));
    System.out.println(val(" 2 45 7"));
    System.out.println(val("24 and 57"));
}
</code></pre>

<p>Output:</p>

<pre>1615198.0
2457.0
2457.0
24.0
</pre>

<p>I can't vouch for its speed, but it is likely that <code>Double.parseDouble</code> is the most expensive part. I suppose it might be a little faster to do the double parsing in this function also, but I would have be certain that this is a bottleneck first. Otherwise, it's just not worth the trouble.</p>
