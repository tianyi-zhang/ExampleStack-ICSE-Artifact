<p>If I understood correctly your code, the problems seems to lay on the fact that the recursion is not well implemented, in the sense that your program will keep looping the last for loop even after it has found the right answer.</p>

<p>Say for instance that in the first blank square, the right number is a 4. But the possible list of numbers (at that point in time) that your program is considering is {2, 4, 6, 7}. In this case, what it seems to happen, is that it will find indeed the right answer at 4, and it will generate the correct output. But it will still check for 6 and 7. And since it will (of course) fail to find any answer, it will leave the inputs blank, giving you back the original board.</p>

<p>Now, although I think you had to some extent the right idea in setting a global variable to store the actual answer. The problem is that you're not generating a copy of the array, and you're simply copying the pointer (reference) to it.</p>

<p>You could simply create a copy method to actually copy the entire array, but keep in mind that even if you do generate the correct answer, your algorithm will still needlessly loop and waste time.</p>

<p>For reference, here's the solve method I wrote, where my isValid() method is equivalent to your isTrue() :</p>

<pre><code>public static final int SIZE = 9;

public static boolean solve(int[][] s) {

    for (int i = 0; i &lt; SIZE; i++) {
        for (int j = 0; j &lt; SIZE; j++) {
            if (s[i][j] != 0) {
                continue;
            }
            for (int num = 1; num &lt;= SIZE; num++) {
                if (isValid(num, i, j, s)) {
                    s[i][j] = num;
                    if (solve(s)) {
                        return true;
                    } else {
                        s[i][j] = 0;
                    }
                }
            }
            return false;
        }
    }
    return true;
}
</code></pre>
