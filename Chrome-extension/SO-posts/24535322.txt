<p>For clear and good quality voice
Try using <strong>*44100 or 16000 sample rate *</strong></p>

<p>Note:- 44100 sample rate may not work on Amulator.
and also make sure you have correct header format</p>

<p>Ignore variables which are not related to this</p>

<p><strong><em>Using AudioRecord class to record</em></strong></p>

<pre><code>public class Mediarec extends Activity {

public static final int SAMPLE_RATE = 44100;

public static int count=0;
private AudioRecord mRecorder;
private File mRecording;
private byte[] mBuffer;
private final String startRecordingLabel = "Start recording";
private final String stopRecordingLabel = "Stop recording";
private boolean mIsRecording = false;
OnGainSelected gs;
SharedPreferences sp;
String Shared = "Shared";
String stored_gain;
AudioManager am;
protected int bitsPerSamples = 16;

private Button show_gain;
Switch bluetooth;
Button button;

@Override
public void onCreate(final Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.fragment_mediarec);
    sp = getSharedPreferences(Shared, Context.MODE_PRIVATE);
    button = (Button) findViewById(R.id.start);
    bluetooth = (Switch) findViewById(R.id.switch1);


    initRecorder();




    button.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(final View v) {


                Log.d("Normal()","Recordng frm Normal MIC");
                Normal();


        }
    });

}

protected void Normal() {
    // TODO Auto-generated method stub
    if (!mIsRecording ) {
        button.setText(stopRecordingLabel);
        mIsRecording = true;
        Log.d("Normal","Rec Started");
        mRecorder.startRecording();
        mRecording = getFile("raw");
        startBufferedWrite(mRecording);
    } else {
        button.setText(startRecordingLabel);
        mIsRecording = false;
        mRecorder.stop();
        File waveFile = getFile("wav");
        try {
            rawToWave(mRecording, waveFile);
        } catch (IOException e) {
            Toast.makeText(Mediarec.this, e.getMessage(),
                    Toast.LENGTH_SHORT).show();
        }
        Toast.makeText(Mediarec.this, "Recorded to " + waveFile.getName(),
                Toast.LENGTH_SHORT).show();
    }
}



@Override
public void onDestroy() {
    mRecorder.release();
    super.onDestroy();
}

private void initRecorder() {
    int bufferSize = AudioRecord.getMinBufferSize(SAMPLE_RATE,
            AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT);
    mBuffer = new byte[bufferSize];
    mRecorder = new AudioRecord(MediaRecorder.AudioSource.MIC, SAMPLE_RATE,
            AudioFormat.CHANNEL_IN_MONO, AudioFormat.ENCODING_PCM_16BIT,
            bufferSize);
}

private void startBufferedWrite(final File file) {
    new Thread(new Runnable() {
        @Override
        public void run() {
            DataOutputStream output = null;
            try {
                output = new DataOutputStream(new BufferedOutputStream(
                        new FileOutputStream(file)));
                while (mIsRecording) {

                    int readSize = mRecorder.read(mBuffer, 0,
                            mBuffer.length);

                    for (int i = 0; i &lt; readSize; i++) {
                        output.write(mBuffer[i]);
                    }

                }
            } catch (IOException e) {
                Toast.makeText(Mediarec.this, e.getMessage(),
                        Toast.LENGTH_SHORT).show();
            } finally {

                if (output != null) {
                    try {
                        output.flush();
                    } catch (IOException e) {
                        Toast.makeText(Mediarec.this, e.getMessage(),
                                Toast.LENGTH_SHORT).show();
                    } finally {
                        try {
                            output.close();
                        } catch (IOException e) {
                            Toast.makeText(Mediarec.this, e.getMessage(),
                                    Toast.LENGTH_SHORT).show();
                        }
                    }
                }
            }
        }
    }).start();
}

private void rawToWave(final File rawFile, final File waveFile)
        throws IOException {

    byte[] rawData = new byte[(int) rawFile.length()];
    DataInputStream input = null;
    try {

        input = new DataInputStream(new FileInputStream(rawFile));
        input.read(rawData);
    } finally {
        if (input != null) {
            input.close();
        }
    }

    DataOutputStream output = null;
    try {
        output = new DataOutputStream(new FileOutputStream(waveFile));
        // WAVE header
        // see http://ccrma.stanford.edu/courses/422/projects/WaveFormat/
        writeString(output, "RIFF"); // chunk id
        writeInt(output, 36 + rawData.length); // chunk size
        writeString(output, "WAVE"); // format
        writeString(output, "fmt "); // subchunk 1 id
        writeInt(output, 16); // subchunk 1 size
        writeShort(output, (byte) 1); // audio format (1 = PCM)
        writeShort(output, (byte) 1); // number of channels
        writeInt(output, SAMPLE_RATE); // sample rate
        writeInt(output, SAMPLE_RATE * 2); // byte rate
        writeShort(output, (byte) 2); // block align
        writeShort(output, (byte) 16); // bits per sample
        writeString(output, "data"); // subchunk 2 id
        writeInt(output, rawData.length); // subchunk 2 size



        output.write(rawData);

    } catch (Exception e) {
        Toast.makeText(getApplicationContext(), "" + e, Toast.LENGTH_LONG)
                .show();
    } finally {
        if (output != null) {
            output.close();
        }
    }
}



private File getFile(final String suffix) {
    Time time = new Time();
    time.setToNow();
    return new File(Environment.getExternalStorageDirectory(),
            time.format("%Y%m%d%H%M%S") + "." + suffix);
}

private void writeInt(final DataOutputStream output, final int value)
        throws IOException {
    output.write(value &gt;&gt; 0);
    output.write(value &gt;&gt; 8);
    output.write(value &gt;&gt; 16);
    output.write(value &gt;&gt; 24);
}

private void writeShort(final DataOutputStream output, final short value)
        throws IOException {
    output.write(value &gt;&gt; 0);
    output.write(value &gt;&gt; 8);
}

private void writeString(final DataOutputStream output, final String value)
        throws IOException {
    for (int i = 0; i &lt; value.length(); i++) {
        output.write(value.charAt(i));
    }
}
</code></pre>

<p>}</p>
