<p>find below a simple example how to use the Java core java.util.logging.Logger. If there is no compulsory reason to use it, I woud suggest you to have a look on one of the Java logging frameworks around (they are most of the time easier to configure).</p>

<pre><code>package sub.optimal.logger;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;
import java.util.logging.Formatter;
import java.util.logging.LogRecord;

public class CustomFormatter extends Formatter {

    private static final String format =  "%1tH:%&lt;tM:%&lt;tS %2$-7s %3$s (%4$s) %5$s%6$s%n";
    private static final Date date = new Date();

    @Override
    public String format(LogRecord record) {
        date.setTime(record.getMillis());
        String source = "";
        if (record.getSourceClassName() != null) {
            source = record.getSourceClassName();
            if (record.getSourceMethodName() != null) {
                source += " " + record.getSourceMethodName();
            }
        }
        String message = formatMessage(record);
        String throwable = "";
        if (record.getThrown() != null) {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            pw.println();
            record.getThrown().printStackTrace(pw);
            pw.close();
            throwable = sw.toString();
        }
        return String.format(format,
                date,
                record.getLevel().getName(),
                record.getLoggerName(),
                source,
                message,
                throwable);
    }
}
</code></pre>

<p>.</p>

<pre><code>package sub.optimal.logger;

import java.io.IOException;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author SubOptimal
 */
public class Main {

    public static void main(String[] args) throws Exception {
        new Main().loggerDemo();
    }

    private void loggerDemo() throws IOException, SecurityException {
        Logger logger = Logger.getLogger("MyLogger");
        // don't forward any logging to this logger to his parent
        logger.setUseParentHandlers(false);
        // log messages of all level
        logger.setLevel(Level.ALL);

        // define the logfile
        FileHandler fh = new FileHandler("my_log_file.log");
        logger.addHandler(fh);

        // a Formatter with a custom format
        CustomFormatter formatter = new CustomFormatter();
        fh.setFormatter(formatter);

        // few logging examples
        logger.config("message as logger.config");
        logger.fine("message as logger.fine");
        logger.finer("message as logger.finer");
        logger.finest("message as logger.finest");
        logger.info("message as logger.info");
        logger.severe("message as logger.severe");
        logger.warning("message as logger.warning");
    }
}
</code></pre>
