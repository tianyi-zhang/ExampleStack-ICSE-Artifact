<p>Here is an alternative solution to @Terrance's answer. You can easly outsource the conversion. The <a href="http://code.google.com/p/google-gson/">Gson library</a> does wonderful work converting various data structures into JSON and the other way around.</p>

<pre><code>public static void execute() {
    Map&lt;String, String&gt; comment = new HashMap&lt;String, String&gt;();
    comment.put("subject", "Using the GSON library");
    comment.put("message", "Using libraries is convenient.");
    String json = new GsonBuilder().create().toJson(comment, Map.class);
    makeRequest("http://192.168.0.1:3000/post/77/comments", json);
}

public static HttpResponse makeRequest(String uri, String json) {
    try {
        HttpPost httpPost = new HttpPost(uri);
        httpPost.setEntity(new StringEntity(json));
        httpPost.setHeader("Accept", "application/json");
        httpPost.setHeader("Content-type", "application/json");
        return new DefaultHttpClient().execute(httpPost);
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    } catch (ClientProtocolException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
    return null;
}
</code></pre>

<p>Similar can be done by using <a href="http://jackson.codehaus.org/">Jackson</a> instead of Gson. I also recommend taking a look at <a href="http://square.github.io/retrofit/">Retrofit</a> which hides a lot of this boilerplate code for you. For more experienced developers I recommend trying out <a href="https://github.com/ReactiveX/RxAndroid">RxAndroid</a>.</p>
