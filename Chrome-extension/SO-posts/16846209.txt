<p>This is What I have done:</p>

<p><strong>Layout:</strong></p>

<pre><code> &lt;EditText
    android:id="@+id/editTextSearch"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:inputType="text"
    android:hint="@string/search" &gt;
&lt;/EditText&gt;


&lt;ListView
    android:id="@id/android:list"
    android:textFilterEnabled="true"
    android:layout_width="match_parent"
    android:layout_height="wrap_content" &gt;
&lt;/ListView&gt;
</code></pre>

<p>Pay attention to android:textFilterEnabled="true" in ListView.</p>

<p><strong>My ListActivity or ListFragment:</strong></p>

<pre><code>public class ClientesActivity extends ListFragment {

private MyListCursorAdapter myAdapter;

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {

    View view = inflater.inflate(R.layout.activity_clientes, container, false);

            //call to a method that fill my list
    myListGetFilled(view);

            //Put a listener to edit text search
    EditText etSearch = (EditText) view.findViewById(R.id.editTextSearch);
    etSearch.addTextChangedListener(new TextWatcher() {

        @Override
        public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {
            // When user changed the Text
            myAdapter.getFilter().filter(cs);   

        }

        @Override
        public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
                int arg3) {
            // TODO Auto-generated method stub

        }

        @Override
        public void afterTextChanged(Editable arg0) {
            // TODO Auto-generated method stub                          
        }
    });


    return view;
}

    private void myListGetFilled(View view){

    Cursor mCursor = DB.fillMyList(getActivity());

    if(mCursor.getCount()&gt;0){

        String[] from = new String[] { "name", "description"};
        int[] to = new int[] { R.id.textViewName,  R.id.textViewDescription};

        ListView myListView = (ListView) view.findViewById (android.R.id.list);

        myAdapter = new MyListCursorAdapter(context, R.layout.activity_row_list, mCursor, from, to);
        myListView .setAdapter(myAdapter);

    }
}
</code></pre>

<p><strong>And finally my custom cursor adapter:</strong></p>

<pre><code>public class MyListCursorAdapter extends SimpleCursorAdapter implements Filterable{

     ...

   /*THE METHOD THAT DOES THE MAGIC*/
   public Cursor runQueryOnBackgroundThread(CharSequence constraint) {

    if (getFilterQueryProvider() != null){ 
        return getFilterQueryProvider().runQuery(constraint); 
    }

    Cursor filterResultsData = DB.getResults(constraint);
    return filterResultsData;
  }
}
</code></pre>

<p>And that's it!!. </p>

<p>Hope this can be useful to anyone. And if you think there is a better solution than this one, please share!!.</p>
