<p>I have reproduced your error by running your code on my side - the problem is that  <code>recursion(nums, start, (end - start)/2 - 1)</code> gets to a point where start index = <code>2</code> and the end index is <code>-3</code> - the recursion therefore never stops.</p>

<p>Here is the correction - I tested it against an array like this:
<code>int[] nums = new int[]{1,2,3,4,5,6,6};</code></p>

<pre><code>private static boolean recursion(int[] nums, int start, int end) {

        if((end - start) == 0){ return false;}

        if((end - start) == 1){             
            //This is really where the recursion should end...unless if there were no duplicate, in which case we repeat
            if(nums[start] == nums[end]){
                return true;
            }
            else{
                //we checked all against the first number - now we move the start to the next item on list
                //so our new START is (start+1) and our new END (length-1)
                return recursion(nums, (start+1), (nums.length-1));
            }
        }
        else{
            if(end &lt; 0){return false;}

            //here you evaluate if the start and end numbers are different 
            if(nums[start] == nums[end]){return true;}          
            return recursion(nums, start, (end - 1));          
        }       

    }
</code></pre>

<p>Please replace your "recursion" function with the code above and let's see if it works for you.   </p>
