<p>Output a serialization of the byte array behind the values of <code>attribute</code> to see exactly what characters it contains. This will help you catch stuff like nbsp for whitespace etc. When this is done, you can change your string matching to what you actually get back from the database, or tune your persistence to produce straight forward values.</p>

<p>It is not enough to just println the variable, instead, you have to iterate over all the buckets in the array and output them in hex or dec - your target output is something like "[44, 53, 4C, .. ]", which would correspond to "DSL..". To convert the byte array to a hex representation, you can use this snippet, or as an exercise, try it on your own:</p>

<pre><code>public static String convertToHexString(byte[] data) {
    StringBuffer buf = new StringBuffer();
    for (int i = 0; i &lt; data.length; i++) {
        int nibble = (data[i] &gt;&gt;&gt; 4) &amp; 0x0F;
        int two_nibbles = 0;
        do {
            if ((0 &lt;= nibble) &amp;&amp; (nibble &lt;= 9))
                buf.append((char) ('0' + nibble));
            else
                buf.append((char) ('a' + (nibble - 10)));

            nibble = data[i] &amp; 0x0F;
        } while (two_nibbles++ &lt; 1);
    }
    return buf.toString();
}
</code></pre>

<p>Now when you have that output, take an <a href="http://www.electronicdeveloper.de/AllASCIITabellen.aspx" rel="nofollow">ascii table</a> to look up which values are contained in the string and change your ifs depending on what is actually contained in the Strings. Possibly by using a matching regex. 
Chances are the whitespaces are some non-trivial blank characters like <code>&amp;nbsp;</code> (Hex: A0), but it's also possible that you are having an encoding problem. Feel free to post the hex values if the character tables don't help.</p>
