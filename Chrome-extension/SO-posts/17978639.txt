<p>It seems this is not supported by the default jersey 2.0 framework, the fix for this is to create your own MessageBodyReader, see below;</p>

<pre><code>@Provider
public class FormDataReader implements MessageBodyReader&lt;Object&gt; {

    @Override
    public boolean isReadable(Class&lt;?&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType) {
        return mediaType.isCompatible(MediaType.APPLICATION_FORM_URLENCODED_TYPE);
    }

    @Override
    public Object readFrom(Class&lt;Object&gt; type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap&lt;String, String&gt; httpHeaders, InputStream entityStream) throws IOException, WebApplicationException {
        String queryString = IOUtils.toString(entityStream);

        Object result = type.newInstance();
        BeanUtils.copyProperties(result, getUrlParameters(queryString));
        return result;
    }

    public static Map&lt;String, String&gt; getUrlParameters(String queryString)
            throws UnsupportedEncodingException {
        Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
        for (String param : queryString.split("&amp;")) {
            String pair[] = param.split("=");
            String key = URLDecoder.decode(pair[0], "UTF-8");
            String value = "";
            if (pair.length &gt; 1) {
                value = URLDecoder.decode(pair[1], "UTF-8");
            }
            params.put(new String(key), new String(value));
        }
        return params;
    }

}
</code></pre>
