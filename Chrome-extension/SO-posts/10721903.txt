<p>When you run this as web application you Context is initialized with server details</p>

<pre><code>Context context = new InitialContext(); // This is initialized when you run as web app
</code></pre>

<p>When you run as standalone program by calling main method the same is not true</p>

<p>you can get rid of this by initializing your context.</p>

<pre><code>Properties prop = new Properties();
prop.put(Context.INITIAL_CONTEXT_FACTORY, "your provider"); // like for websphere it is com.ibm.websphere.naming.WsnInitialContextFactory and weblogic weblogic.jndi.WLInitialContextFactory
prop.put(Context.PROVIDER_URL, "server path"); //
Context context = new InitialContext(prop);
</code></pre>

<p>Note: Generally you don't write it like that instead your code will check if it is running in WEBMODE or TEST and in case test it will initialize Context or else it will just use the normal context.</p>

<p>this will initialize your context and you would be able to run it from main method.</p>

<p>Edit: Glassfish configuration taken from <a href="http://glassfish.java.net/javaee5/ejb/EJB_FAQ.html" rel="nofollow">here</a></p>

<pre><code>  Properties props = new Properties();

  props.setProperty("java.naming.factory.initial", 
                    "com.sun.enterprise.naming.SerialInitContextFactory");

  props.setProperty("java.naming.factory.url.pkgs", 
                    "com.sun.enterprise.naming");

  props.setProperty("java.naming.factory.state",
                    "com.sun.corba.ee.impl.presentation.rmi.JNDIStateFactoryImpl");


  // optional.  Defaults to localhost.  Only needed if web server is running 
  // on a different host than the appserver    
  props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");

  // optional.  Defaults to 3700.  Only needed if target orb port is not 3700.
  props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");

  InitialContext ic = new InitialContext(props);
</code></pre>
