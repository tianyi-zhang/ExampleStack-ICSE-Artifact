<p>So after fighting few days i got a workaround by implementing my method for it.</p>

<pre><code>private String validateHebrewPassword(String password)
        {
                if (password.length() &lt; mPasswordMinLength) {
                        return getString(mIsAlphaMode ?
                                        R.string.lockpassword_password_too_short
                                        : R.string.lockpassword_pin_too_short, mPasswordMinLength);
                }
                if (password.length() &gt; mPasswordMaxLength) {
                        return getString(mIsAlphaMode ?
                                        R.string.lockpassword_password_too_long
                                        : R.string.lockpassword_pin_too_long, mPasswordMaxLength + 1);
                }

            for (int i = 0; i &lt; password.length(); i++)
            {
                char c = password.charAt(i);
                        System.out.println("Validate Hebrew Password Success "+ " Char "+c+" for password "+password+ " langauage "+locale);

            }
            return null;
        }
</code></pre>

<p>And modiying its validatePasswor() caller a bit specific to hebrew like:</p>

<pre><code>    private void handleNext() {
                final String pin = mPasswordEntry.getText().toString();
                if (TextUtils.isEmpty(pin)) {
                    return;
                }
                String errorMsg = null;
                if (mUiStage == Stage.Introduction) 
                {
                    String locale = java.util.Locale.getDefault().getLanguage();
                    if(locale.equals("iw")) //Specific Hebrew check
                    { 
                        errorMsg = validateHebrewPassword(pin); //New Method
                    }
                    else
                    {
                        errorMsg = validatePassword(pin); //AOSP Method
                    }
                    if (errorMsg == null) 
                    {
                        mFirstPin = pin;
                        mPasswordEntry.setText("");
                        updateStage(Stage.NeedToConfirm);
                    }
                } else if (mUiStage == Stage.NeedToConfirm) {
                    if (mFirstPin.equals(pin)) {
                        final boolean isFallback = getActivity().getIntent().getBooleanExtra(
                                LockPatternUtils.LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK, false);
                        mLockPatternUtils.clearLock(isFallback);
                        mLockPatternUtils.saveLockPassword(pin, mRequestedQuality, isFallback);
                        getActivity().setResult(RESULT_FINISHED);
                        getActivity().finish();
                    } else {
                        CharSequence tmp = mPasswordEntry.getText();
                        if (tmp != null) {
                            Selection.setSelection((Spannable) tmp, 0, tmp.length());
                        }
                        updateStage(Stage.ConfirmWrong);
                    }
                }
                if (errorMsg != null) {
                    showError(errorMsg, mUiStage);
                }
            }

private void updateUi() {
            String password = mPasswordEntry.getText().toString();
            final int length = password.length();
            if (mUiStage == Stage.Introduction &amp;&amp; length &gt; 0) {
                if (length &lt; mPasswordMinLength) {
                    String msg = getString(mIsAlphaMode ? R.string.lockpassword_password_too_short
                            : R.string.lockpassword_pin_too_short, mPasswordMinLength);
                    mHeaderText.setText(msg);
                    mNextButton.setEnabled(false);
                } else 
                {
                    String locale = java.util.Locale.getDefault().getLanguage();
                    String error = null;
                    if(locale.equals("iw")) //Specific Hebrew check
                    { 
                        error = validateHebrewPassword(password); //New method
                    }
                    else
                    {
                        error = validatePassword(password); //AOSP Method
                    }
                    if (error != null) {
                        mHeaderText.setText(error);
                        mNextButton.setEnabled(false);
                    } else {
                        mHeaderText.setText(R.string.lockpassword_press_continue);
                        mNextButton.setEnabled(true);
                    }
                }
            } else {
                mHeaderText.setText(mIsAlphaMode ? mUiStage.alphaHint : mUiStage.numericHint);
                mNextButton.setEnabled(length &gt; 0);
            }
            mNextButton.setText(mUiStage.buttonText);
        }
</code></pre>
