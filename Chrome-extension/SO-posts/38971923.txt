<p><strong>First</strong>, in your Activity, create the static variable <code>appContext</code>, which holds the Application Context and function below:</p>

<pre><code> //Initialize Application Context
 private static Context appContext;

 //Get Application Context (for use in external functions)
    public static Context getContext() {
        return appContext;
    }
</code></pre>

<p>...and set the variable in <code>onCreate(Bundle savedInstanceState)</code>: </p>

<pre><code>     //Set application context (for use in external functions)
     appContext = this;
</code></pre>

<p><strong>Second</strong>, create class in separate file below:</p>

<p><em>File: JavaScriptInterface.java</em></p>

<pre><code>import android.content.Context;
import android.util.Log;
import android.webkit.JavascriptInterface;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;    

class JavaScriptInterface {        

    @JavascriptInterface
    public String getFileContents(String assetName){
        return readAssetsContent(MainActivity.getContext(), assetName);
    }

    //Read resources from "assets" folder in string
    public String readAssetsContent(Context context, String name) {
        BufferedReader in = null;
        try {
            StringBuilder buf = new StringBuilder();
            InputStream is = context.getAssets().open(name);
            in = new BufferedReader(new InputStreamReader(is));

            String str;
            boolean isFirst = true;
            while ( (str = in.readLine()) != null ) {
                if (isFirst)
                    isFirst = false;
                else
                    buf.append('\n');
                buf.append(str);
            }
            return buf.toString();
        } catch (IOException e) {
            Log.e("error", "Error opening asset " + name);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException e) {
                    Log.e("error", "Error closing asset " + name);
                }
            }
        }

        return null;
    }

}
</code></pre>

<p><strong>Third</strong>, do not forget to initialize your Webview to use JavaScriptInterface:</p>

<pre><code>     //Set JS interface from JS/HTML code execution
     mWebView.addJavascriptInterface(new JavaScriptInterface(), "android");
</code></pre>

<p><strong>Fourth</strong>, call the android method <code>getFileContents()</code> to load the local resources in your HTML with JavaScript:  </p>

<pre><code>       &lt;script type="text/javascript"&gt;
          var s = document.createElement('script');
          s.innerHTML = window.android.getFileContents('js/jquery.min.js');
          document.head.appendChild(s);

          //check if jquery is loaded now...
          if(typeof $ != "undefined") {
              $(document).ready(function() {
                    alert("jQuery is loaded!");
             });
          } else {
                alert("jQuery is NOT loaded!");
          }
       &lt;/script&gt;
</code></pre>

<p><strong>Note:</strong> the local resource in this example is in <code>/assets/js/</code> sub-folder.</p>
