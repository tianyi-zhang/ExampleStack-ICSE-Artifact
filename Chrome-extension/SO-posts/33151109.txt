<p>I found a good solution for my question <a href="https://github.com/romannurik/Android-SwipeToDismiss" rel="nofollow">here</a>
u need to change a bit SwipeDismissTouchListener this way </p>

<pre><code>public class SwipeDismissTouchListener implements View.OnTouchListener {

private int mSlop;
private int mMinFlingVelocity;
private int mMaxFlingVelocity;
private long mAnimationTime;

// Fixed properties
private CustomEditTextWithCheckbox mView;
private DismissCallbacks mCallbacks;
private int mViewWidth = 1; // 1 and not 0 to prevent dividing by zero

// Transient properties
private float mDownX;
private float mDownY;
private boolean mSwiping;
private int mSwipingSlop;
private VelocityTracker mVelocityTracker;
private float mTranslationX;

public interface DismissCallbacks {
    boolean canDismiss();
    void onDismiss(View view);
}

public SwipeDismissTouchListener(CustomEditTextWithCheckbox view, DismissCallbacks callbacks) {
    ViewConfiguration vc = ViewConfiguration.get(view.getContext());
    mSlop = vc.getScaledTouchSlop();
    mMinFlingVelocity = vc.getScaledMinimumFlingVelocity() * 16;
    mMaxFlingVelocity = vc.getScaledMaximumFlingVelocity();
    mAnimationTime = view.getContext().getResources().getInteger(
            android.R.integer.config_shortAnimTime);
    mView = view;
    mCallbacks = callbacks;
}

@Override
public boolean onTouch(View view, MotionEvent motionEvent) {
    // offset because the view is translated during swipe
    motionEvent.offsetLocation(mTranslationX, 0);

    if (mViewWidth &lt; 2) {
        mViewWidth = mView.getWidth();
    }

    switch (motionEvent.getActionMasked()) {
        case MotionEvent.ACTION_DOWN: {
            // TODO: ensure this is a finger, and set a flag
            mDownX = motionEvent.getRawX();
            mDownY = motionEvent.getRawY();
            if (mCallbacks.canDismiss()) {
                mVelocityTracker = VelocityTracker.obtain();
                mVelocityTracker.addMovement(motionEvent);
            }
            return false;
        }

        case MotionEvent.ACTION_UP: {
            if (mVelocityTracker == null) {
                break;
            }

            float deltaX = motionEvent.getRawX() - mDownX;
            mVelocityTracker.addMovement(motionEvent);
            mVelocityTracker.computeCurrentVelocity(1000);
            float velocityX = mVelocityTracker.getXVelocity();
            float absVelocityX = Math.abs(velocityX);
            float absVelocityY = Math.abs(mVelocityTracker.getYVelocity());
            boolean dismissRight = false;
            if (Math.abs(deltaX) &gt; mViewWidth / 2 &amp;&amp; mSwiping) {
                dismissRight = deltaX &gt; 0;
            } else if (mMinFlingVelocity &lt;= absVelocityX &amp;&amp; absVelocityX &lt;= mMaxFlingVelocity
                    &amp;&amp; absVelocityY &lt; absVelocityX
                    &amp;&amp; absVelocityY &lt; absVelocityX &amp;&amp; mSwiping) {
                dismissRight = mVelocityTracker.getXVelocity() &gt; 0;
            }
            if (dismissRight) {
               mView.onSwipeRight();
            } else if (mSwiping) {
               mView.onSwipeLeft();
            }
            mVelocityTracker.recycle();
            mVelocityTracker = null;
            mTranslationX = 0;
            mDownX = 0;
            mDownY = 0;
            mSwiping = false;
            break;
        }

        case MotionEvent.ACTION_CANCEL: {
            if (mVelocityTracker == null) {
                break;
            }

            mVelocityTracker.recycle();
            mVelocityTracker = null;
            mTranslationX = 0;
            mDownX = 0;
            mDownY = 0;
            mSwiping = false;
            break;
        }

        case MotionEvent.ACTION_MOVE: {
            if (mVelocityTracker == null) {
                break;
            }

            mVelocityTracker.addMovement(motionEvent);
            float deltaX = motionEvent.getRawX() - mDownX;
            float deltaY = motionEvent.getRawY() - mDownY;
            if (Math.abs(deltaX) &gt; mSlop &amp;&amp; Math.abs(deltaY) &lt; Math.abs(deltaX) / 2) {
                mSwiping = true;
                mSwipingSlop = (deltaX &gt; 0 ? mSlop : -mSlop);
                mView.getParent().requestDisallowInterceptTouchEvent(true);

                MotionEvent cancelEvent = MotionEvent.obtain(motionEvent);
                cancelEvent.setAction(MotionEvent.ACTION_CANCEL |
                        (motionEvent.getActionIndex() &lt;&lt;
                                MotionEvent.ACTION_POINTER_INDEX_SHIFT));
                mView.onTouchEvent(cancelEvent);
                cancelEvent.recycle();
            }

            break;
        }
    }
    return false;
}
}
</code></pre>

<p>doint this way it works perfectly, hope it will be helpfull</p>
