<p>Give this a try. It's a little messy and you can clean it up. But its pretty much what you are looking for. You can add an entry and if it exists, it wont add it again. It will also delete an entry just fine. Check out the main method for its usage. The constructor handles creating the file if it does not exist.</p>

<pre><code>import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class FileModification
{
    private File file = null;

    /**
     * Constructor
     * 
     * @param file
     */
    public FileModification(File file)
    {
        this.file = file;

        if(!file.exists())
        {
            try
            {
                file.createNewFile();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }
    }

    /**
     * Add an entry if it doesn't exist
     * 
     * @param entry
     * @return true if successfully added/updated
     */
    public boolean addEntry(String entry)
    {
        try
        {
            // Construct the new file that will later be renamed to the original
            // filename.
            File tempFile = new File(file.getAbsolutePath() + ".tmp");

            BufferedReader br = new BufferedReader(new FileReader(file));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            // Read from the original file and write to the new
            // unless content matches data to be removed.
            String line;
            boolean isDuplicate = false;
            while ((line = br.readLine()) != null)
            {
                if (line.equals(entry))
                {
                    isDuplicate = true;
                    System.out.println("Is duplicate");
                }
                pw.println(line);
                pw.flush();
            }

            if(!isDuplicate)
            {
                System.out.println("Added: " + entry);

                pw.println(entry);
                pw.flush();
            }

            pw.close();
            br.close();

            // Delete the original file
            if (!file.delete())
            {
                System.out.println("Could not delete file");
                return false;
            }

            // Rename the new file to the filename the original file had.
            if (!tempFile.renameTo(file))
            {
                System.out.println("Could not rename file");
                return false;
            }

            return true;
        }
        catch (FileNotFoundException ex)
        {
            ex.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Delete entry
     * 
     * @param entry
     * @return true if successfully deleted
     */
    public boolean deleteEntry(String entry)
    {
        try
        {
            // Construct the new file that will later be renamed to the original
            // filename.
            File tempFile = new File(file.getAbsolutePath() + ".tmp");

            BufferedReader br = new BufferedReader(new FileReader(file));
            PrintWriter pw = new PrintWriter(new FileWriter(tempFile));

            // Read from the original file and write to the new
            // unless content matches data to be removed.
            String line;
            while ((line = br.readLine()) != null)
            {
                if (!line.equals(entry))
                {
                    pw.println(line);
                    pw.flush();
                }
                else
                {
                    System.out.println("Deleted: " + entry);
                }
            }
            pw.close();
            br.close();

            // Delete the original file
            if (!file.delete())
            {
                System.out.println("Could not delete file");
                return false;
            }

            // Rename the new file to the filename the original file had.
            if (!tempFile.renameTo(file))
            {
                System.out.println("Could not rename file");
                return false;
            }

            return true;
        }
        catch (FileNotFoundException ex)
        {
            ex.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * @return the file
     */
    public File getFile()
    {
        return file;
    }

    /**
     * @param file
     *            the file to set
     */
    public void setFile(File file)
    {
        this.file = file;
    }

    public static void main(String[] args)
    {
        FileModification mod = new FileModification(new File("TEST.txt"));
        mod.addEntry("NEW ENTRY1");
        mod.addEntry("NEW ENTRY2");
        mod.addEntry("NEW ENTRY3");

        mod.deleteEntry("NEW ENTRY1");
    }
}
</code></pre>
