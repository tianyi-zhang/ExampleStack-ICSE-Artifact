<p>If you are relatively new to opencv on Android I strongly suggest you start with the sample that comes with the opencv android SDK called image-manipulations. There is only one java file ImageManipulationsActivity.java but it has samples of all the typical opencv operations such as Canny etc. It also shows you how to do the async loading of opencv. If you can get that to work on your device then you are in a good starting position. </p>

<p>Note that opencv on Android needs the opencv manager and uses native libraries and so trying to run on an emulator may not be that successful; I would recommend testing on your device when developing. </p>

<p>As others have said, you need to copy the image file over to your device to read it. I use Eclipse DDMS File Explorer and put the files in mnt/sdcard. I then use the following function to load (it could do with more error checking but this should illustrate the idea):</p>

<pre><code>public Mat loadImageFromFile(String fileName) {

    Mat rgbLoadedImage = null;

    File root = Environment.getExternalStorageDirectory();
    File file = new File(root, fileName);

    // this should be in BGR format according to the
    // documentation.
    Mat image = Highgui.imread(file.getAbsolutePath());

    if (image.width() &gt; 0) {

        rgbLoadedImage = new Mat(image.size(), image.type());

        Imgproc.cvtColor(image, rgbLoadedImage, Imgproc.COLOR_BGR2RGB);

        if (DEBUG)
            Log.d(TAG, "loadedImage: " + "chans: " + image.channels()
                    + ", (" + image.width() + ", " + image.height() + ")");

        image.release();
        image = null;
    }

    return rgbLoadedImage;

}
</code></pre>

<p>you'll see it comes in as BGR format so I convert to RGB for my purposes.</p>

<p>Getting your Mat to then display on Android I think has been covered by previous questions.</p>
