<p>I found Sebastian Roth's answer very helpful with resources, but since it wasn't really an answer to my question, I thought I'd share what I came up with.</p>

<p>Here is the code I use to detect views ( only views that will accept a drop that is ) given a coordinate on the screen.</p>

<pre><code>            private DropView findDropTarget( int x, int y, int[] dropCoordinates ){
                final Rect r = mRectTemp;
                final ArrayList&lt;DropView&gt; dropTargets = ((main) context).getBoardDropTargets();
                final int count = dropTargets.size();
                for (int i=count-1; i&gt;=0; i--) {
                    final DropView target = dropTargets.get(i);
                    target.getHitRect(r);
                    target.getLocationOnScreen(dropCoordinates);
                    r.offset(dropCoordinates[0] - target.getLeft(), dropCoordinates[1] - target.getTop());
                    if (r.contains(x, y)) {
                        dropCoordinates[0] = x - dropCoordinates[0];
                        dropCoordinates[1] = y - dropCoordinates[1];
                        return target;
                    }
                }
           }
</code></pre>

<p>Ok, first off mRectTemp is just an allocated Rectangle so you don't have to keep creating new ones ( I.E. final Rect r = new Rect() )</p>

<p>The next line dropTargets is a list of views that will accept a drop in my app.
Next I loop through each view.</p>

<p>I then use getHitRect(r) to return the screen coordiantes of the view.</p>

<p>I then offset the coordiantes to account for the notification bar or any other view that could displace the coordiantes.</p>

<p>finally I see if x and y are inside the coordinates of the given rectangle r ( x and y are the event.rawX() and event.rawY() ).</p>

<p>It actually turned out to be simpler then expected and works very well.</p>
