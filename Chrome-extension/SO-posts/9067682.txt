<p>Using reflection and hoping that all the wrapper objects for primitives contains a constructor with a string argument for value, you may be able to achieve this like the following</p>

<pre><code>// A sample test with main
public static void main(String[] args) {
    Object obj = create(Integer.class, "54896");
    Integer val = (Integer) obj;
    System.out.println(val);
}

// Method to create the desired object with the given value
private static Object create(Class myClass, String value) {
    Object obj = null;
    try {
        Constructor constructor = myClass.getConstructor(new Class[]{String.class});
        obj=constructor.newInstance(value);
    } catch (SecurityException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (NoSuchMethodException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IllegalArgumentException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InstantiationException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (IllegalAccessException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    } catch (InvocationTargetException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    return obj;
}
</code></pre>
