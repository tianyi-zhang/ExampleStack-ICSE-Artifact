<p>I added a new layout to act as a root view and host a stack of fragments within a single tab.
I stumbled upon video that demonstrated the behavior I was looking for and implemented it.  </p>

<p>Many thanks to GitHub user, <a href="https://github.com/danilao/" rel="nofollow" title="Github's Dani Lao">Dani Lao</a> for his <a href="https://github.com/danilao/fragments-viewpager-example/" rel="nofollow" title="Fragments in a ViewPager Example">source code</a>.</p>

<p>My Implementation:</p>

<p><strong>activity_main.xml</strong></p>

<pre><code>&lt;android.support.v4.view.ViewPager xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/pager"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity" /&gt;
</code></pre>

<p><strong>MainActivity.java</strong></p>

<pre><code>...

public class MainActivity extends FragmentActivity {

    SectionsPagerAdapter mSectionsPagerAdapter;
    ViewPager mViewPager;
    ...
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_add:
                android.support.v4.app.FragmentTransaction ft = getSupportFragmentManager()
                        .beginTransaction();
                ft.replace(R.id.personnel_root, new PersonnelViewFragment());
                ft.setTransition(android.support.v4.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
                ft.addToBackStack(null);
                ft.commit();
                return true;
            case R.id.action_search:
                ft = getSupportFragmentManager()
                        .beginTransaction();
                ft.replace(R.id.personnel_root, new PersonnelListFragment());
                ft.setTransition(android.support.v4.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN);
                ft.addToBackStack(null);
                ft.commit();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }
    ...
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        final ActionBar actionBar = getActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

        mSectionsPagerAdapter = new SectionsPagerAdapter(this, getSupportFragmentManager());

        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mSectionsPagerAdapter);

        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
            }
        });
        ActionBar.TabListener actionBarTabListener = new ActionBar.TabListener() {

            @Override
            public void onTabUnselected(Tab tab, FragmentTransaction ft) {
            }

            @Override
            public void onTabSelected(Tab tab, FragmentTransaction ft) {
                mViewPager.setCurrentItem(tab.getPosition());
            }

            @Override
            public void onTabReselected(Tab tab, FragmentTransaction ft) {
            }
        };
        // For each of the sections in the app, add a tab to the action bar.
        for (int i = 0; i &lt; mSectionsPagerAdapter.getCount(); i++) {
            actionBar.addTab(
                    actionBar.newTab()
                            .setText(mSectionsPagerAdapter.getPageTitle(i))
                            .setTabListener(actionBarTabListener));
        }
    }
}
</code></pre>

<p><strong>fragment_personnel_root.xml</strong> (New)</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/personnel_root"
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;

&lt;/FrameLayout&gt;
</code></pre>

<p><strong>PersonnelRootFragment.java</strong> (New)</p>

<pre><code>public class PersonnelRootFragment extends Fragment {

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
            Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_personnel_root, container, false);

        FragmentTransaction fragmentTransaction = getActivity().getSupportFragmentManager()
                .beginTransaction();
        fragmentTransaction.replace(R.id.personnel_root, new PersonnelListFragment());
        fragmentTransaction.commit();
        return rootView;
    }
}
</code></pre>

<p><strong>fragment_personnel_list.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/LinearLayout1"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity" &gt;

    &lt;TextView
        android:id="@+id/textPersonnelHeader"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/text_all_personnel"
        android:textAppearance="?android:attr/textAppearanceMedium"
        android:textColor="@color/mc_med_brown" /&gt;

    &lt;EditText
        android:id="@+id/editTextPersonnelSearch"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:ems="10"
        android:hint="@string/search_hint" &gt;

        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;ListView
        android:id="@+id/listViewPersonnel"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textFilterEnabled="true" &gt;
    &lt;/ListView&gt;

&lt;/LinearLayout&gt;
</code></pre>
