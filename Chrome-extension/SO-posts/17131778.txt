<p>I had a similar issue and the way I solved it was as followed</p>

<p>I created a new API method in the endpoint class. In my case I had to fetch row(s) corresponding to specific email address from a userTable entity class. So I passed on emailAddress as  a String parameter to the API Method I has added in the endpoint class. I the example below emaiAddress was not the primary key for my entity. </p>

<pre><code>@SuppressWarnings({ "unchecked", "unused" })
@ApiMethod(name = "getUserTableByEmail")
public CollectionResponse&lt;UserTable&gt; getUserTableByEmail(
        @Nullable @Named("cursor") String cursorString,
        @Nullable @Named("limit") Integer limit,
        @Named ("emailAddress") String email) {

    EntityManager mgr = null;
    Cursor cursor = null;
    List&lt;UserTable&gt; execute = null;

    try {
        mgr = getEntityManager();
        Query query = mgr.createQuery("select n from UserTable n where n.emailAddress = '"+email+"'");
        if (cursorString != null &amp;&amp; cursorString != "") {
            cursor = Cursor.fromWebSafeString(cursorString);
            query.setHint(JPACursorHelper.CURSOR_HINT, cursor);
        }

        if (limit != null) {
            query.setFirstResult(0);
            query.setMaxResults(limit);
        }

        execute = (List&lt;UserTable&gt;) query.getResultList();
        cursor = JPACursorHelper.getCursor(execute);
        if (cursor != null)
            cursorString = cursor.toWebSafeString();

        for (UserTable obj : execute)
            ;
    } finally {
        mgr.close();
    }

    return CollectionResponse.&lt;UserTable&gt; builder().setItems(execute)
            .setNextPageToken(cursorString).build();
}
</code></pre>

<p>Note one thing however. I still used the method to return a CollectionResponse object, you can very well return just a userTable(entity) object if you are sure that there is only one row returned with your select criteria. 
I my android code, I user CollectionResponse.isEmpty() to check if there was anything returned, if it was returning rows then ii used the method CollectionResponse.getItem() to retrieve the rows.
If you want the query to return only one result then you can specify the Integer parameter "limit" as 1 while executing the endpoint method in your android code or just put 
<code>query.setMaxResults(1);</code>
in the method above.</p>
