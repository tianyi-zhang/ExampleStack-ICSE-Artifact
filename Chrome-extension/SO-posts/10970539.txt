<p><em><strong>You Should Try this for Sure</em></strong>, <br></p>

<pre><code>    // Create a trust manager that does not validate certificate chains
    TrustManager[] trustAllCerts = new TrustManager[]{
        new X509TrustManager() {
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }
            public void checkClientTrusted(
                java.security.cert.X509Certificate[] certs, String authType) {
            }
            public void checkServerTrusted(
                java.security.cert.X509Certificate[] certs, String authType) {
            }
        }
    };

    // Install the all-trusting trust manager
    // Try "SSL" or Replace with "TLS"
    try {
        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new java.security.SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
    } catch (Exception e) {
    }

    // Now you can access an https URL without having the certificate in the truststore 
           // Your Code Goes Here
</code></pre>

<p><strong>Here are More Solutions for This</strong><br><a href="http://www.exampledepot.com/egs/javax.net.ssl/trustall.html" rel="nofollow">Certificate Validation in an HTTPS Connection</a>
<br><S>
<a href="http://blog.antoine.li/2010/10/22/android-trusting-ssl-certificates/" rel="nofollow">Android: Trusting SSL certificates</a>
<br>
<a href="http://stackoverflow.com/a/6378872/1008278">http://stackoverflow.com/a/6378872/1008278</a></s></p>
