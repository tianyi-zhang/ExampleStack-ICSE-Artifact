<p>The thing is that your implementation only calculates the distance and not the resulting matrix.</p>

<p>This solution is based on the <strong><a href="http://en.wikipedia.org/wiki/Wagner%E2%80%93Fischer_algorithm" rel="nofollow">Wagnerâ€“Fischer algorithm</a></strong>:</p>

<pre><code>public class LevenshteinDistance {

    public static void main(String[] args) {
        String str1 = "164164617044", str2 = "164164617044";

        System.out.print("String 1: \"" + str1 + "\" String 2: \"" + str2
                + "\".\n\n");

        int[][] resultingMatrix = resultingMatrix(str1, str2);
        int distance = resultingMatrix[str1.length()][str2.length()];
        double similarity = similarity(str1, str2, distance), similarityPercentage = similarity * 100.0;

        System.out.print("Levenshtein distance = " + distance + ".\n\n");
        System.out.print("Similarity = " + similarity + ".\n\n");
        System.out.print("Similarity Percentage = " + similarityPercentage
                + "%.\n\n");

        System.out.print("Resulting Matrix:\n");

        for (int charsInStr2 = 0; charsInStr2 &lt; str2.length(); charsInStr2++) {
            if (charsInStr2 == 0) {
                System.out.print(String.format("%-5s%-5s%-5s", " ", " ", "'" + str2.charAt(charsInStr2) + "'"));
            } else {
                System.out
                        .print(String.format("%-5s", "'" + str2.charAt(charsInStr2)+ "'"));
            }
        }

        System.out.print("\n");

        for (int i = 0; i &lt; resultingMatrix.length; i++) {
            String line = "";

            for (int j = 0; j &lt; resultingMatrix[i].length; j++) {
                line += String.format("%-5s", resultingMatrix[i][j]);
            }
            if(i == 0)
                System.out.printf("%-4s %s\n", " ", line);
            else{
                System.out.printf("%-4s %s\n", "'" + str1.charAt(i-1) + "'", line);
            }
        }
    }

    public static int[][] resultingMatrix(String str1, String str2) {
        int[][] dist = new int[str1.length() + 1][str2.length() + 1];

        for (int i = 0; i &lt;= str1.length(); i++) {
            dist[i][0] = i;
        }

        for (int j = 1; j &lt;= str2.length(); j++) {
            dist[0][j] = j;
        }

        for (int i = 1; i &lt;= str1.length(); i++)
            for (int j = 1; j &lt;= str2.length(); j++)
                dist[i][j] = Math
                        .min(Math.min(dist[i - 1][j] + 1, dist[i][j - 1] + 1),
                                dist[i - 1][j - 1]
                                        + ((str1.charAt(i - 1) == str2
                                                .charAt(j - 1)) ? 0 : 1));
        return dist;
    }

    public static double similarity(String str1, String str2, int distance) {
        double bigLenght = Math.max(str1.length(), str2.length());

        return (bigLenght - distance) / bigLenght;
    }
}
</code></pre>

<p><strong>Example:</strong></p>

<blockquote>
<pre><code>String 1: "164164617044" String 2: "164164617044".

Levenshtein distance = 0.

Similarity = 1.0.

Similarity Percentage = 100.0%.

Resulting Matrix:
          '1'  '6'  '4'  '1'  '6'  '4'  '6'  '1'  '7'  '0'  '4'  '4'  
     0    1    2    3    4    5    6    7    8    9    10   11   12   
'1'  1    0    1    2    3    4    5    6    7    8    9    10   11   
'6'  2    1    0    1    2    3    4    5    6    7    8    9    10   
'4'  3    2    1    0    1    2    3    4    5    6    7    8    9    
'1'  4    3    2    1    0    1    2    3    4    5    6    7    8    
'6'  5    4    3    2    1    0    1    2    3    4    5    6    7    
'4'  6    5    4    3    2    1    0    1    2    3    4    5    6    
'6'  7    6    5    4    3    2    1    0    1    2    3    4    5    
'1'  8    7    6    5    4    3    2    1    0    1    2    3    4    
'7'  9    8    7    6    5    4    3    2    1    0    1    2    3    
'0'  10   9    8    7    6    5    4    3    2    1    0    1    2    
'4'  11   10   9    8    7    6    5    4    3    2    1    0    1    
'4'  12   11   10   9    8    7    6    5    4    3    2    1    0
</code></pre>
</blockquote>

<p>Note that the Levensthein distance is <strong>always</strong> the element in the right bottom corner of the resulting matrix (resultingMatrix[<strong>str1Len</strong>][<strong>str2Len</strong>]). Also, take a look at the method for calculating the similarity in my solution.</p>
