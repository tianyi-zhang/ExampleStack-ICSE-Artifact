<p>Use the below for reference and modify the below according to your requirements.</p>

<p>You have the below in onDraw()</p>

<pre><code> canvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);
 // will clear the draw
</code></pre>

<p>Everytime you can invalidate() will call onDraw(canvas). Your draw will be refreshed.</p>

<p>I don't know what you are trying to do but i removed the above</p>

<p>Moved the inside onSizeChanged</p>

<pre><code>   mBitmap = Bitmap.createBitmap((int)myWidth, (int)myHeight, Bitmap.Config.ARGB_8888); 
   mCanvas = new Canvas(mBitmap); 
</code></pre>

<p>Your code works fine. Tested it on emulator.</p>

<pre><code> public class MainActivity extends Activity {

DrawingView dv ;


@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    dv = new DrawingView(this);
    setContentView(dv); 
}

public class DrawingView extends View {

    private static final float MINP = 0.25f;
    private static final float MAXP = 0.75f;
    public Bitmap mBitmap,tileImage;
    public Canvas mCanvas;
    public Path mPath;
    public Paint mBitmapPaint;   
    float myWidth;
    float myHeight;
    Paint tile ;
    public Paint mPaint;
    public MaskFilter mEmboss;
    public MaskFilter mBlur;
    public ArrayList&lt;Path&gt; paths = new ArrayList&lt;Path&gt;();
    public ArrayList&lt;Paint&gt;paints = new ArrayList&lt;Paint&gt;();
    public ArrayList&lt;Path&gt; undonePaths = new ArrayList&lt;Path&gt;(); 
    public ArrayList&lt;Paint&gt;undonePaints = new ArrayList&lt;Paint&gt;();
    BitmapShader shader;

    public DrawingView(Context c) {
        super(c);

        mPaint = new Paint();
        mPaint.setAntiAlias(true);
        mPaint.setDither(true);
        mPaint.setColor(Color.RED);
        tile = new Paint();
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeJoin(Paint.Join.ROUND);
        mPaint.setStrokeCap(Paint.Cap.ROUND);
        mPaint.setStrokeWidth(12);
        mEmboss = new EmbossMaskFilter(new float[] { 1, 1, 1 }, 0.4f, 6, 3.5f);
        mBlur = new BlurMaskFilter(8, BlurMaskFilter.Blur.NORMAL);
        mPath = new Path();
        mBitmapPaint = new Paint(Paint.DITHER_FLAG);
        tileImage =  BitmapFactory.decodeResource(getResources(),R.drawable.ic_launcher);
        shader = new BitmapShader(tileImage, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT); 
        tile.setShader(shader);
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        mBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
        mCanvas = new Canvas(mBitmap);    
        myWidth =w;
        myHeight = h;

    }

    @Override
    protected void onDraw(Canvas canvas) {
        canvas.drawBitmap(mBitmap, 0, 0, mBitmapPaint);
        Log.v("onDraw:", "curent paths size:"+paths.size());
        for (Path p : paths){
            canvas.drawPath(p, mPaint);
        }
        canvas.drawPath(mPath,mPaint);
    }

    public void onClickUndo () { 

        if (paths.size()&gt;0) 
        { 
           undonePaths.add(paths.remove(paths.size()-1));
           undonePaints.add(paints.remove(paints.size()-1));
           invalidate();
         }
        else
        {

        }

    }
    public void onClickRedo (){
        if (undonePaths.size()&gt;0) 
        { 
            paths.add(undonePaths.remove(undonePaths.size()-1));
            paints.add(undonePaints.remove(undonePaints.size()-1));
            invalidate();
        } 
        else 
        {

        }

     }
    public void onClickClear (){
        paths.clear();
        undonePaths.clear();
        invalidate();

     }
    public void saveDrawing(){


        FileOutputStream outStream = null;
        String fileName = "tempTag";
        try {

            outStream = new FileOutputStream("/sdcard/" + fileName + ".png");

            mBitmap.compress(Bitmap.CompressFormat.PNG, 100, outStream);
            outStream.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
        }


    }
    private float mX, mY;
    private static final float TOUCH_TOLERANCE = 4;

    private void touch_start(float x, float y) {
        undonePaths.clear();
        mPath.reset();
        mPath.moveTo(x, y);
        mX = x;
        mY = y;
    }

    private void touch_move(float x, float y) {
        float dx = Math.abs(x - mX);
        float dy = Math.abs(y - mY);
        if (dx &gt;= TOUCH_TOLERANCE || dy &gt;= TOUCH_TOLERANCE) {
            mPath.quadTo(mX, mY, (x + mX) / 2, (y + mY) / 2);
            mX = x;
            mY = y;
        }
    }

    private void touch_up() {
        mPath.lineTo(mX, mY);

        mCanvas.drawPath(mPath, mPaint);

        paths.add(mPath);
        paints.add(mPaint);

        mPath = new Path(); 
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        float x = event.getX();
        float y = event.getY();
        if(x&gt;myWidth){
            x=myWidth;

        }
        if(y&gt;myHeight){
            y=myHeight;

        }
        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            touch_start(x, y);
            invalidate();
            break;
        case MotionEvent.ACTION_MOVE:
            touch_move(x, y);
            invalidate();
            break;
        case MotionEvent.ACTION_UP:
            touch_up();
            invalidate();
            break;
        }
        return true;
    }
}
</code></pre>

<p><img src="http://i.stack.imgur.com/jyvKN.png" alt="enter image description here"></p>
