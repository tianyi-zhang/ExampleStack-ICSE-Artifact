<p>just change your code </p>

<pre><code> new BitmapWorkerTask(holder.imgView,filepath[position]).execute();
</code></pre>

<p>and change async task like this;</p>

<pre><code> public class BitmapWorkerTask extends AsyncTask&lt;Object, Void, Bitmap&gt; {

private ImageView imv;
private String path;
Bitmap bitmap = null;
  public BitmapWorkerTask(ImageView imv,String path){
  this.path=path;
  this.imv=imv;
}


// Decode image in background.
@Override
protected Bitmap doInBackground(Object... params) {


   bitmap=decodeFile(path);

    return bitmap;
}

// Once complete, see if ImageView is still around and set bitmap.
@Override
protected void onPostExecute(Bitmap result) {
    if (!imv.getTag().toString().equals(path)) {
        /* The path is not same. This means that this
              image view is handled by some other async task. 
              We don't do anything and return. */
        return;
    }


    if(/*result != null &amp;&amp; */imv != null){
        imv.setVisibility(View.VISIBLE);
  //    imv.setImageBitmap(result);
        imv.setImageBitmap(bitmap);
    }else{
        imv.setVisibility(View.GONE);
    }
}

public Bitmap decodeFile(String path){
    try {
        Log.d("111111111111","1111111111111111111");
        // Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(path, o);
        // The new size we want to scale to
        final int REQUIRED_SIZE = 70;
        // Find the correct scale value. It should be the power of 2.
        int scale = 1;
        while (o.outWidth / scale / 2 &gt;= REQUIRED_SIZE &amp;&amp; o.outHeight / scale / 2 &gt;=REQUIRED_SIZE)
            scale *= 2;
        // Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeFile(path, o2);
    } catch (Throwable e) {
        e.printStackTrace();
    }
    return null;
}
}
</code></pre>
