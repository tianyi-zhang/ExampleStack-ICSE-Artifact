<p>One approach would be to scape the XML you are sending as an argument.  If you were sending the XML from another ASP.NET application, you could use: Uri.EscapeDataString.  According to this post (<a href="http://stackoverflow.com/questions/8317505/c-sharp-uri-escapedatastring-equivalent-for-java">C# Uri.EscapeDatastring() equivalent for Java</a>), you would have to use Java's URL or URI classes to escape a string that can later be consumed in your ASP.NET application.  But, java.net.URL and java.net.URI don't let you escape XML.  So, you could do the following:</p>

<p>1] Add this method to your Java code. This is a modified version of the code I found here: <a href="http://stackoverflow.com/a/10035382/2168278">http://stackoverflow.com/a/10035382/2168278</a>.  You can, as it is suggested in the post, use an XML library.</p>

<pre><code>public static String xmlEscapeText(String t) 
{
   StringBuilder sb = new StringBuilder();
   for(int i = 0; i &lt; t.length(); i++){
      char c = t.charAt(i);
      switch(c){
      case '&lt;': sb.append("%3C"); break;
      case '&gt;': sb.append("%3E"); break;
      case '\"': sb.append("%22"); break;
      case '&amp;': sb.append("%26"); break;
      case ' ': sb.append("%20"); break;
      case '/': sb.append("%2F"); break;
      default:
         if(c&gt;0x7e) {
            sb.append("&amp;#"+((int)c)+";");
         }else
            sb.append(c);
      }
   }
   return sb.toString();
}
</code></pre>

<p>2] In your ASP.NET code (which I'm assuming to be C#), you can then get the XML by:</p>

<pre><code>var myXML = Uri.UnescapeDataString(op);
</code></pre>

<p>I tested my code using this piece of XML: </p>

<pre><code>&lt;note&gt;&lt;to&gt;Tove&lt;/to&gt;&lt;from&gt;Jani&lt;/from&gt;&lt;heading&gt;Reminder&lt;/heading&gt;&lt;body&gt;Don't forget me this weekend!&lt;/body&gt;&lt;/note&gt;
</code></pre>

<p>which I got from here: <a href="http://www.w3schools.com/xml/note.xml" rel="nofollow">http://www.w3schools.com/xml/note.xml</a></p>
