<p>Alright, this is by no means an answer to the problem described in the question. Look at it as an alternative to replace <code>PopupMenu</code> in order to achieve what was asked.</p>

<h2>No <code>PopupMenu</code></h2>

<p>After digging through the documents for <code>PopupMenu</code> and its source code, I finally come to understand that <code>PopupMenu</code> is not an implementation that would allow customization (my apology to the PO for the misconception in the comments).</p>

<h2>An alternative</h2>

<p>As an alternative, a <code>ListPopupWindow</code> is a preferred choice to create a popup menu with the following reasons:</p>

<ol>
<li>It shares the same parent with <code>PopupMenu</code> - <code>ListView</code>.</li>
<li>It is flexible, allowing custom <code>Adapter</code> to be defined with custom layout.</li>
<li>It also allows run-time creation like <code>PopupMenu</code> does, and allows attaching resource id to the item view.</li>
</ol>

<h2>Implementation</h2>

<p>First of all, let's define a custom layout for the popup item (<code>popup_item_view.xml</code>).</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"&gt;
    &lt;TextView
        android:id="@+id/popup_text"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Next, define a custom <code>Adapter</code> class to manipulate the layout.</p>

<pre><code>package com.example.popupmenu;

import android.support.annotation.NonNull;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PopupAdapter extends BaseAdapter {
    public static class Item {
        public final int id;
        public final String title;

        public Item(int id, @NonNull String title) {
            this.id = id;
            this.title = title;
        }
    }

    private List&lt;Item&gt; mItemList = new ArrayList&lt;&gt;();

    public PopupAdapter(@NonNull Item[] items) {
        mItemList.addAll(Arrays.asList(items));
    }

    @Override
    public int getCount() {
        return mItemList.size();
    }

    @Override
    public Item getItem(int position) {
        return mItemList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        final Item item = getItem(position);
        if (convertView == null) {
            LayoutInflater inflater = LayoutInflater.from(parent.getContext());
            convertView = inflater.inflate(R.layout.popup_item_view, parent, false);
        }
        convertView.setId(item.id);
        TextView titleView = (TextView) convertView.findViewById(R.id.popup_text);
        titleView.setText(item.title);
        return convertView;
    }
}
</code></pre>

<p>Finally, replace the <code>PopupMenu</code> code with this.</p>

<pre><code>PopupAdapter.Item[] items = {
    new PopupAdapter.Item(R.id.popup_item_1, "item 1"),
    new PopupAdapter.Item(R.id.popup_item_2, "item 2")
};

ListPopupWindow popup = new ListPopupWindow(MainActivity.this);
popup.setAnchorView(view);
popup.setAdapter(new PopupAdapter(items));
popup.setModal(true);
popup.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
    @Override
    public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        // do something
    }

    @Override
    public void onNothingSelected(AdapterView&lt;?&gt; parent) {
       // do something
    }
});
popup.show();
</code></pre>

<p>Hope this helps.</p>
