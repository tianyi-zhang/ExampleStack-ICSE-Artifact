<p>I found <a href="https://stackoverflow.com/questions/8119366/sorting-hashmap-by-values">this post</a> that might help. One you cannot sort a Hashmap because there is no definitive order to it. If you want to sort through a <em>LinkedHashMap</em> though, this is how you do it. (A LinkedHashMap just has a definitive iterative order)</p>

<pre><code>public LinkedHashMap sortHashMapByValues(HashMap passedMap) {
   List mapKeys = new ArrayList(passedMap.keySet());
   List mapValues = new ArrayList(passedMap.values());
   Collections.sort(mapValues);
   Collections.sort(mapKeys);

   LinkedHashMap sortedMap = new LinkedHashMap();

   Iterator valueIt = mapValues.iterator();
   while (valueIt.hasNext()) {
       Object val = valueIt.next();
       Iterator keyIt = mapKeys.iterator();

       while (keyIt.hasNext()) {
           Object key = keyIt.next();
           String comp1 = passedMap.get(key).toString();
           String comp2 = val.toString();

           if (comp1.equals(comp2)){
               passedMap.remove(key);
               mapKeys.remove(key);
               sortedMap.put((String)key, (Double)val);
               break;
           }

       }

   }
   return sortedMap;
}
</code></pre>

<p>If you want to remove the lowest value on the other hand, I doubt this is the easiest thing you could do something like this to sort them.</p>

<pre><code>public static Entry&lt;String, Integer&gt; removeLowest(LinkedHashMap&lt;String, Integer&gt; map){
    Entry&lt;String, Integer&gt; lowest = null;
    for(Entry&lt;String,Integer&gt; e: map){
        if(lowest==null || e.getValue().compareTo(lowest.getValue()) &lt; 0){
            lowest = e;
        }
    }
    return lowest;
}
</code></pre>

<p>PS: Don't forget to accept my answer if it works for you.</p>

<p>Update: If you want to remove say half of the map. You would sort it first then do this.</p>

<pre><code>public static LinkedHashMap&lt;String, Integer&gt; getTopHalf(LinkedHashMap&lt;String, Integer&gt; map){
    LinkedHashMap&lt;String, Integer&gt; sorted = sortHashMapByValues(map);
    LinkedHashMap&lt;String, Integer&gt; out = new LinkedHashMap&lt;String, Integer&gt;();
    Iterator&lt;Entry&lt;String,Integer&gt;&gt; it = sorted.entrySet().iterator();
    for(int i = 0;  i&lt;map.size()/2; i++){
        Entry&lt;String, Integer&gt; e = it.next();
        out.put(e.getKey(), e.getValue());
    }
    return out;
}
</code></pre>
