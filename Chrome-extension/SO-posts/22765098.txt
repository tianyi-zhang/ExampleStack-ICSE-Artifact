<p>You can't avoid iterating but if you're using <a href="/questions/tagged/java-8" class="post-tag" title="show questions tagged &#39;java-8&#39;" rel="tag">java-8</a>, you could use the <a href="http://download.java.net/lambda/b78/docs/api/java/util/Map.html#replaceAll%28java.util.function.BiFunction%29" rel="nofollow"><code>replaceAll</code></a> method which will do that for you.</p>

<blockquote>
  <p>Apply the specified function to each entry in this map, replacing each
  entry's value with the result of calling the function's Function#map
  method with the current entry's key and value.</p>
</blockquote>

<pre><code>m.replaceAll((k,v) -&gt; yourDefaultValue);
</code></pre>

<p>Basically it iterates through each node of the table the map holds and affect the return value of the function for each value.</p>

<pre><code>@Override
public void replaceAll(BiFunction&lt;? super K, ? super V, ? extends V&gt; function) {
    Node&lt;K,V&gt;[] tab;
    if (function == null)
        throw new NullPointerException();
    if (size &gt; 0 &amp;&amp; (tab = table) != null) {
        int mc = modCount;
        for (int i = 0; i &lt; tab.length; ++i) {
            for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) {
                e.value = function.apply(e.key, e.value); //&lt;-- here
            }
        }
        if (modCount != mc)
            throw new ConcurrentModificationException();
    }
}
</code></pre>

<p>Example:</p>

<pre><code>public static void main (String[] args){ 
    Map&lt;String, Integer&gt; m = new HashMap&lt;&gt;();
    m.put("1",1);
    m.put("2",2);

    System.out.println(m);
    m.replaceAll((k,v) -&gt; null);
    System.out.println(m);
}
</code></pre>

<p>Output:</p>

<pre><code>{1=1, 2=2}
{1=null, 2=null}
</code></pre>
