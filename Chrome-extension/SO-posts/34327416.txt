<pre><code>public int calculateInSampleSize(BitmapFactory.Options options,
            int reqWidth, int reqHeight) {
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height &gt; reqHeight || width &gt; reqWidth) {
            final int heightRatio = Math.round((float) height
                    / (float) reqHeight);
            final int widthRatio = Math.round((float) width / (float) reqWidth);
            inSampleSize = heightRatio &lt; widthRatio ? heightRatio : widthRatio;
        }
        final float totalPixels = width * height;
        final float totalReqPixelsCap = reqWidth * reqHeight * 2;
        while (totalPixels / (inSampleSize * inSampleSize) &gt; totalReqPixelsCap) {
            inSampleSize++;
        }

        return inSampleSize;
    }
    public Bitmap compressImage(String imageUri) {
        String filePath = imageUri;
        Bitmap scaledBitmap = null;
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        options.inJustDecodeBounds = false;
        options.inDither = false;
        options.inPurgeable = true;
        options.inInputShareable = true;
        options.inTempStorage = new byte[16 * 1024];
        Bitmap bmp = null;
        try {
            bmp = BitmapFactory.decodeFile(filePath, options);
        } catch (OutOfMemoryError exception) {
            ConstantDataBikerApp.logErrorInfo(MyTrolleyApplicationData.getAppContext(),
                    AnalyticsEvent.EVENT_ERROR,
                    ConstantDataBikerApp.getStackTraceString(exception));
            exception.printStackTrace();
        }
        int actualHeight = options.outHeight;
        int actualWidth = options.outWidth;

        // max Height and width values of the compressed image is taken as
        // 816x612

        float maxHeight = 816.0f;
        float maxWidth = 612.0f;
        float imgRatio = actualWidth / actualHeight;
        float maxRatio = maxWidth / maxHeight;

        // width and height values are set maintaining the aspect ratio of the
        // image

        if (actualHeight &gt; maxHeight || actualWidth &gt; maxWidth) {
            if (imgRatio &lt; maxRatio) {
                imgRatio = maxHeight / actualHeight;
                actualWidth = (int) (imgRatio * actualWidth);
                actualHeight = (int) maxHeight;
            } else if (imgRatio &gt; maxRatio) {
                imgRatio = maxWidth / actualWidth;
                actualHeight = (int) (imgRatio * actualHeight);
                actualWidth = (int) maxWidth;
            } else {
                actualHeight = (int) maxHeight;
                actualWidth = (int) maxWidth;

            }
        }

        // setting inSampleSize value allows to load a scaled down version of
        // the original image

        options.inSampleSize = calculateInSampleSize(options, actualWidth,
                actualHeight);

        // inJustDecodeBounds set to false to load the actual bitmap
        options.inJustDecodeBounds = false;

        // this options allow android to claim the bitmap memory if it runs low
        // on memory
        options.inPurgeable = true;
        options.inInputShareable = true;
        options.inTempStorage = new byte[16 * 1024];
        try {
            bmp = BitmapFactory.decodeFile(filePath, options);
        } catch (OutOfMemoryError exception) {
            ConstantDataBikerApp.logErrorInfo(MyTrolleyApplicationData.getAppContext(),
                    AnalyticsEvent.EVENT_ERROR,
                    ConstantDataBikerApp.getStackTraceString(exception));
            exception.printStackTrace();
        }
        try {
            scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight,
                    Bitmap.Config.ARGB_8888);
        } catch (OutOfMemoryError exception) {
            ConstantDataBikerApp.logErrorInfo(MyTrolleyApplicationData.getAppContext(),
                    AnalyticsEvent.EVENT_ERROR,
                    ConstantDataBikerApp.getStackTraceString(exception));
            exception.printStackTrace();
        }
        float ratioX = actualWidth / (float) options.outWidth;
        float ratioY = actualHeight / (float) options.outHeight;
        float middleX = actualWidth / 2.0f;
        float middleY = actualHeight / 2.0f;
        Matrix scaleMatrix = new Matrix();
        scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);
        Canvas canvas = new Canvas(scaledBitmap);
        canvas.setMatrix(scaleMatrix);
        canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2,
                middleY - bmp.getHeight() / 2, new Paint(
                        Paint.FILTER_BITMAP_FLAG));
        if (bmp != null) {
            bmp.recycle();
        }
        ExifInterface exif;
        try {
            exif = new ExifInterface(filePath);
            int orientation = exif.getAttributeInt(
                    ExifInterface.TAG_ORIENTATION, 0);
            Log.d("EXIF", "Exif: " + orientation);
            Matrix matrix = new Matrix();
            if (orientation == 6) {
                matrix.postRotate(90);
                Log.d("EXIF", "Exif: " + orientation);
            } else if (orientation == 3) {
                matrix.postRotate(180);
                Log.d("EXIF", "Exif: " + orientation);
            } else if (orientation == 8) {
                matrix.postRotate(270);
                Log.d("EXIF", "Exif: " + orientation);
            }
            scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0,
                    scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix,
                    true);
        } catch (IOException e) {
            ConstantDataBikerApp.logErrorInfo(MyTrolleyApplicationData.getAppContext(),
                    AnalyticsEvent.EVENT_ERROR,
                    ConstantDataBikerApp.getStackTraceString(e));
            e.printStackTrace();
        }
        return scaledBitmap;
    }
    // /--------------- compress image if size &gt; 500 KB and return byte64 string
    // of compress image
    // /----------------if out of memory occur return byte64 string of compress
    // image original image
    // /----------------this processing must be done in asynctask
    public String getCompressBase64(String imagePath, Context context) {
        String base64 = "";
        if (imagePath.startsWith("content://")) {
            String contentpath = getPath(context, Uri.parse(imagePath));
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(new File(contentpath));
                if (fileInputStream != null
                        &amp;&amp; fileInputStream.available() &gt; 500) {
                    Bitmap bitmap = null;
                    try {
                        bitmap = compressImage(contentpath);
                    } catch (OutOfMemoryError e) {
                    }
                    if (bitmap != null) {
                        ByteArrayOutputStream baosCompressImage = new ByteArrayOutputStream();
                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100,
                                baosCompressImage);
                        bitmap.recycle();
                        byte[] compressImageByte = baosCompressImage
                                .toByteArray();
                        return Base64.encodeToString(compressImageByte,
                                Base64.DEFAULT);
                    } else {
                        Bitmap bm = BitmapFactory.decodeStream(fileInputStream);
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);
                        byte[] b = baos.toByteArray();
                        bm.recycle();
                        return Base64.encodeToString(b, Base64.DEFAULT);
                    }
                }
            } catch (Exception e) {
            }
        } else {
            FileInputStream fileInputStream = null;
            try {
                fileInputStream = new FileInputStream(new File(imagePath));

                if (fileInputStream != null
                        &amp;&amp; fileInputStream.available() &gt; 500) {
                    Bitmap bitmap = null;
                    try {
                        bitmap = compressImage(imagePath);
                    } catch (OutOfMemoryError e) {
                    }
                    if (bitmap != null) {
                        ByteArrayOutputStream baosCompressImage = new ByteArrayOutputStream();
                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100,
                                baosCompressImage);
                        bitmap.recycle();
                        byte[] compressImageByte = baosCompressImage
                                .toByteArray();
                        return Base64.encodeToString(compressImageByte,
                                Base64.DEFAULT);
                    } else {
                        Bitmap bm = BitmapFactory.decodeStream(fileInputStream);
                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);
                        bm.recycle();
                        byte[] b = baos.toByteArray();
                        return Base64.encodeToString(b, Base64.DEFAULT);
                    }
                }
            } catch (Exception e) {
            }
        }
        return base64;
    }
    public String getRealPathFromURI(Context context, Uri contentUri) {
        Cursor cursor = null;
        try {
            String[] proj = {MediaColumns.DATA};
            cursor = context.getContentResolver().query(contentUri, proj, null,
                    null, null);
            int column_index = cursor
                    .getColumnIndexOrThrow(MediaColumns.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }
</code></pre>
