<p>I don't really understand your question or problem. However I see some bugs in the row reduction echelon form solving method. I recently wrote this method as well. Mine works. Since I don't suspect this to be a Java homework assignment but rather an interest in programming mathematical algorithms, I will just throw in my code. I recommend taking a look at how the rref method is actually defined in the world of maths.</p>

<p>The bug I spotted is that the <code>factor</code> you use is wrong. Take a look at my code (note that it doesn't put zero rows to the bottom of the matrix):</p>

<pre><code>public static double[][] rref(double[][] mat)
{
    double[][] rref = new double[mat.length][mat[0].length];

    /* Copy matrix */
    for (int r = 0; r &lt; rref.length; ++r)
    {
        for (int c = 0; c &lt; rref[r].length; ++c)
        {
            rref[r][c] = mat[r][c];
        }
    }

    for (int p = 0; p &lt; rref.length; ++p)
    {
        /* Make this pivot 1 */
        double pv = rref[p][p];
        if (pv != 0)
        {
            double pvInv = 1.0 / pv;
            for (int i = 0; i &lt; rref[p].length; ++i)
            {
                rref[p][i] *= pvInv;
            }
        }

        /* Make other rows zero */
        for (int r = 0; r &lt; rref.length; ++r)
        {
            if (r != p)
            {
                double f = rref[r][p];
                for (int i = 0; i &lt; rref[r].length; ++i)
                {
                    rref[r][i] -= f * rref[p][i];
                }
            }
        }
    }

    return rref;
}
</code></pre>
