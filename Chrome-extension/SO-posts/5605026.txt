<p>What you can do is use the <code>Html.fromHtml()</code> <a href="http://developer.android.com/reference/android/text/Html.html" rel="nofollow">function</a>.</p>

<p>It will leave you with a <code>Spanned</code> - type object. You might use the seperate spans on the locations to handle the tags?</p>

<p>An example to edit tags.
Situations: a text with html tags, that work using html.fromhtml. But sometimes the urls are relative (using "/file.html" instead of "http://domain.com/file.html") and so it can't be used. Sending the spannable to my function below finds all spans for a URL and adds the domain. You could use somehting else ofcourse for your specific tags:</p>

<pre><code>protected Spanned correctLinkPaths (Spanned spantext) {
    Object[] spans = spantext.getSpans(0, spantext.length(), Object.class);
    for (Object span : spans) {
        int start = spantext.getSpanStart(span);
        int end = spantext.getSpanEnd(span);
        int flags = spantext.getSpanFlags(span);
        if (span instanceof URLSpan) {
            URLSpan urlSpan = (URLSpan) span;

            if (!urlSpan.getURL().startsWith("http")) {
                if (urlSpan.getURL().startsWith("/")) {
                    urlSpan = new URLSpan("http://www.domain.com" + urlSpan.getURL());
                } else {
                    urlSpan = new URLSpan("http://www.domain.com/" + urlSpan.getURL());
                }
            }

            ((Spannable) spantext).removeSpan(span);
            ((Spannable) spantext).setSpan(urlSpan, start, end, flags);
        }
    }
    return spantext;
}
</code></pre>

<p>I'm not sure this is the most efficient way to do it, is was one of my first connections to spannables, but at least it shows some tricks you can do with spannables :D</p>
