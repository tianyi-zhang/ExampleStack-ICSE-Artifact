<p>You have placed fragment layout inside a fragment <code>current_forefast_fragment.xml</code>. This has caused looped impact in your <code>Current_forecast_fragment</code> and <code>OutOfMemoryError</code>. So, delete this line from <code>current_forefast_fragment.xml</code>:</p>

<pre><code>&lt;fragment
    android:id="@+id/current_fragment"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:name="koemdzhiev.com.stormy.Current_forecast_fragment"/&gt;
</code></pre>

<p>In order to get a fragment reference you will need modify your <code>MainActivity</code> and other fragment classes from where you want retain <code>Current_forecast_fragment</code>. I'll assume that you have two fragments <code>Tab1.java</code> and <code>Current_forecast_fragment.java</code>. In first one we need to define <code>Callback</code> interface with proper method:</p>

<pre><code>import android.app.Activity;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

/**
 * Created by hp1 on 21-01-2015.
 */
public class Tab1 extends Fragment {

    private Callback callback;

    public interface Callback{
        Current_forecast_fragment getCurrentForecastFragment();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View v =inflater.inflate(R.layout.tab_1,container,false);

        Button btn1 = (Button) v.findViewById(R.id.btn1);
        btn1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                callback.getCurrentForecastFragment();
            }
        });
        return v;
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        callback = (Callback) activity;
    }
}
</code></pre>

<p>After that implement mentioned <code>Callback</code> in class <code>MainActivity</code>:</p>

<pre><code>public class MainActivity extends AppCompatActivity implements Tab1.Callback {
    ViewPager pager;
    ViewPagerAdapter adapter;
    SlidingTabLayout tabs;
    CharSequence Titles[] = {"Current", "Hourly", "Daily"};
    int Numboftabs = 3;
    Current_forecast_fragment mCurrent_forecast_fragment;

    public static final String TAG = MainActivity.class.getSimpleName();
    public static final String LOCATION_KEY = "location_key";
    public static final String DAILY_FORECAST = "DAILY_FORECAST";
    public static final String HOURLY_FORECAST = "HOURLY_FORECAST";
    //default coordinates - Gotse Delchev, UK Lati:57.156866 ; Long:
    private double latitude = 41.5667;
    private double longitude = 23.7333;
    private LocationManager locationManager;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //-----------MY CODE STARTS HERE-----------------

        //mCurrent_forecast_fragment = (Current_forecast_fragment) getSupportFragmentManager().findFragmentById(R.id.current_fragment);
        //Log.d("MainActivity",mCurrent_forecast_fragment.getTag() + "Georgi");
        //getLocation();

        // Creating The ViewPagerAdapter and Passing Fragment Manager, Titles fot the Tabs and Number Of Tabs.
        adapter = new ViewPagerAdapter(getSupportFragmentManager(), Titles, Numboftabs);

        // Assigning ViewPager View and setting the adapter
        pager = (ViewPager) findViewById(R.id.pager);
        pager.setAdapter(adapter);

        // Assiging the Sliding Tab Layout View
        tabs = (SlidingTabLayout) findViewById(R.id.tabs);
        tabs.setDistributeEvenly(true); // To make the Tabs Fixed set this true, This makes the tabs Space Evenly in Available width

        // Setting Custom Color for the Scroll bar indicator of the Tab View
        tabs.setCustomTabColorizer(new SlidingTabLayout.TabColorizer() {
            @Override
            public int getIndicatorColor(int position) {
                return getResources().getColor(R.color.tabsScrollColor);
            }
        });

        // Setting the ViewPager For the SlidingTabsLayout
        tabs.setViewPager(pager);


    }

    public Current_forecast_fragment getCurrentForecastFragment() {
        // second argument is position of Current_forecast_fragment in ViewPagerAdapter
        mCurrent_forecast_fragment = (Current_forecast_fragment) adapter.instantiateItem(pager, 1);
        return mCurrent_forecast_fragment;
    }
}
</code></pre>

<p>Now you can access your <code>Current_forecast_fragment</code> instance from <code>Tab1.java</code> by calling interface method <code>callback.getCurrentForecastFragment()</code>.</p>
