<p>Instead of using ImageViews, for your use case, it would be better to use a <a href="http://developer.android.com/reference/android/graphics/Canvas.html" rel="nofollow">Canvas</a> to handle the drawing yourself.</p>

<p>Draw a canvas fullscreen with a transparent background. Create an array of bitmaps(one for each image you want to draw, remember to use a circle mask to make them bubble shaped, watch out for memory issues) and draw them to screen at different positions.</p>

<p>Use a custom RNG algorithm to generate appropriate positions for your bitmaps, and then draw them on the canvas. Use a <a href="http://developer.android.com/reference/java/lang/Thread.html" rel="nofollow">Thread</a> to handle the animations.</p>

<p><a href="http://www.mail-archive.com/android-developers@googlegroups.com/msg30548.html" rel="nofollow">Here</a>'s the code for generating a circular cropped bitmap:</p>

<pre><code>int targetWidth = 100;
    int targetHeight = 100;
    Bitmap targetBitmap = Bitmap.createBitmap(
        targetWidth,
        targetHeight,
        Bitmap.Config.ARGB_8888);
    Canvas canvas = new Canvas(targetBitmap);
    Path path = new Path();
    path.addCircle(
        ((float)targetWidth - 1) / 2,
        ((float)targetHeight - 1) / 2,
        (Math.min(((float)targetWidth), ((float)targetHeight)) / 2),
        Path.Direction.CCW);
    canvas.clipPath(path);
    Bitmap sourceBitmap = BitmapFactory.decodeResource(
        getResources(),
        R.drawable.my_image);
    canvas.drawBitmap(
        sourceBitmap,
        new Rect(0, 0, sourceBitmap.getWidth(), sourceBitmap.getHeight()),
        new Rect(0, 0, targetWidth, targetHeight),
        null);
    ImageView imageView = (ImageView)findViewById(R.id.my_image_view);
    imageView.setImageBitmap(targetBitmap);
</code></pre>

<p>Of course, you will have to modify this code to draw the bitmap to the canvas instead of setting it in the ImageView. It would be more efficient, to crop the Bitmap once, then place the cropped image into the array of Bitmaps.</p>
