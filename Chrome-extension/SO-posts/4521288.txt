<pre><code>import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.Map;

import com.google.common.base.CharMatcher;
import com.google.common.base.Charsets;
import com.google.common.base.Joiner;
import com.google.common.base.Splitter;
import com.google.common.collect.Maps;
import com.google.common.io.Files;
import com.google.common.io.LineProcessor;

public class AnimalSummaryBuilder
{
 private static final Splitter SPLITTER = Splitter.on(CharMatcher.anyOf(","));

 private static final Joiner JOINER = Joiner.on("\t");

 @SuppressWarnings("unchecked")
 public static void main(final String[] args) throws Exception
 {
  @SuppressWarnings("rawtypes")
  Map&lt;Animal, Summary&gt; result = Files.readLines(new File("c:/1.txt"), Charsets.ISO_8859_1, new LineProcessor() {

   private final Map&lt;Animal, Summary&gt; result = Maps.newHashMap();

   public Object getResult()
   {
    return result;
   }

   public boolean processLine(final String line) throws IOException
   {
    Iterator&lt;String&gt; columns = SPLITTER.split(line).iterator();

    String date = columns.next();
    String name = columns.next();
    int value = Integer.valueOf(columns.next()).intValue();

    Animal currentRow = new Animal(date, name);

    if (result.containsKey(currentRow))
    {
     Summary summary = result.get(currentRow);
     summary.increaseCount();
     summary.addToTotal(value);
    }
    else
    {
     Summary initialSummary = new Summary();
     initialSummary.setCount(1);
     initialSummary.setTotal(value);
     result.put(currentRow, initialSummary);
    }
    return true;
   }
  });

  for (Map.Entry&lt;Animal, Summary&gt; entry : result.entrySet())
  {
   Animal animal = entry.getKey();
   Summary summary = entry.getValue();
   System.out.println(JOINER.join(animal.date, animal.name, summary.total, summary.count));
  }
 }

 final static class Animal
 {
  String date;

  String name;

  public Animal(final String date, final String n)
  {
   this.date = date;
   this.name = n;
  }

  @Override
  public int hashCode()
  {
   final int prime = 31;
   int result = 1;
   result = prime * result + ((date == null) ? 0 : date.hashCode());
   result = prime * result + ((name == null) ? 0 : name.hashCode());
   return result;
  }

  @Override
  public boolean equals(Object obj)
  {
   if (this == obj)
   {
    return true;
   }
   if (obj == null)
   {
    return false;
   }
   if (!(obj instanceof Animal))
   {
    return false;
   }
   Animal other = (Animal) obj;
   if (date == null)
   {
    if (other.date != null)
    {
     return false;
    }
   }
   else if (!date.equals(other.date))
   {
    return false;
   }
   if (name == null)
   {
    if (other.name != null)
    {
     return false;
    }
   }
   else if (!name.equals(other.name))
   {
    return false;
   }
   return true;
  }

 }

 final static class Summary
 {
  private int total;

  private int count;

  void setTotal(int value)
  {
   total = value;
  }

  void setCount(int i)
  {
   count = i;
  }

  void increaseCount()
  {
   count++;
  }

  void addToTotal(int valueToAdd)
  {
   total += valueToAdd;
  }
 }
}
</code></pre>
