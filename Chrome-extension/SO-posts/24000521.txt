<p>You need to sum up the runTime inside of that logic. Else you always get the same frame. Take a look at the getKeyFrame method: (Marked the importend part for you)</p>

<pre><code>public TextureRegion getKeyFrame (float stateTime) {
    int frameNumber = getKeyFrameIndex(stateTime);
    return keyFrames[frameNumber];
}

public int getKeyFrameIndex (float stateTime) {
    if (keyFrames.length == 1) return 0;

    int frameNumber = (int)(stateTime / frameDuration); //this will always produce the same picture if you dont sum up the time!
    switch (playMode) {
    case NORMAL:
    frameNumber = Math.min(keyFrames.length - 1, frameNumber);
    break;
    case LOOP:
    frameNumber = frameNumber % keyFrames.length;
    break;
    case LOOP_PINGPONG:
    frameNumber = frameNumber % ((keyFrames.length * 2) - 2);
    if (frameNumber &gt;= keyFrames.length) frameNumber = keyFrames.length - 2 - (frameNumber - keyFrames.length);
    break;
    case LOOP_RANDOM:
    frameNumber = MathUtils.random(keyFrames.length - 1);
    break;
    case REVERSED:
    frameNumber = Math.max(keyFrames.length - frameNumber - 1, 0);
    break;
    case LOOP_REVERSED:
    frameNumber = frameNumber % keyFrames.length;
    frameNumber = keyFrames.length - frameNumber - 1;
    break;
    }
    return frameNumber;
}
</code></pre>

<p>So hold somewhere a timer where you sumup the deltatimes</p>

<p>and change your code to something like this:</p>

<pre><code>private void drawBirdHit(float runTime) {
    sum += runTime;
    batcher.draw(birdAnimationHit.getKeyFrame(sum), bird.getX(),
            bird.getY(), bird.getWidth() / 2.0f,
            bird.getHeight() / 2.0f, bird.getWidth(), bird.getHeight(),
            1.4f, 1.4f, bird.getRotation());
}
</code></pre>

<p>The Animation itself does not have a timer for that. You can just request the right keyframe depending on the past time, not on the current deltatime.</p>
