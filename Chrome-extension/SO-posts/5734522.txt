<p>I noticed all the Pair implementations being strewn around here attribute meaning to the order of the two values. When I think of a pair, I think of a combination of two items in which the order of the two is of no importance. Here's my implementation of an unordered pair, with <code>hashCode</code> and <code>equals</code> overrides to ensure the desired behaviour in collections. Also cloneable.</p>

<pre><code>/**
 * The class &lt;code&gt;Pair&lt;/code&gt; models a container for two objects wherein the
 * object order is of no consequence for equality and hashing. An example of
 * using Pair would be as the return type for a method that needs to return two
 * related objects. Another good use is as entries in a Set or keys in a Map
 * when only the unordered combination of two objects is of interest.&lt;p&gt;
 * The term "object" as being a one of a Pair can be loosely interpreted. A
 * Pair may have one or two &lt;code&gt;null&lt;/code&gt; entries as values. Both values
 * may also be the same object.&lt;p&gt;
 * Mind that the order of the type parameters T and U is of no importance. A
 * Pair&amp;lt;T, U&gt; can still return &lt;code&gt;true&lt;/code&gt; for method &lt;code&gt;equals&lt;/code&gt;
 * called with a Pair&amp;lt;U, T&gt; argument.&lt;p&gt;
 * Instances of this class are immutable, but the provided values might not be.
 * This means the consistency of equality checks and the hash code is only as
 * strong as that of the value types.&lt;p&gt;
 */
public class Pair&lt;T, U&gt; implements Cloneable {

    /**
     * One of the two values, for the declared type T.
     */
    private final T object1;
    /**
     * One of the two values, for the declared type U.
     */
    private final U object2;
    private final boolean object1Null;
    private final boolean object2Null;
    private final boolean dualNull;

    /**
     * Constructs a new &lt;code&gt;Pair&amp;lt;T, U&amp;gt;&lt;/code&gt; with T object1 and U object2 as
     * its values. The order of the arguments is of no consequence. One or both of
     * the values may be &lt;code&gt;null&lt;/code&gt; and both values may be the same object.
     *
     * @param object1 T to serve as one value.
     * @param object2 U to serve as the other value.
     */
    public Pair(T object1, U object2) {

        this.object1 = object1;
        this.object2 = object2;
        object1Null = object1 == null;
        object2Null = object2 == null;
        dualNull = object1Null &amp;&amp; object2Null;

    }

    /**
     * Gets the value of this Pair provided as the first argument in the constructor.
     *
     * @return a value of this Pair.
     */
    public T getObject1() {

        return object1;

    }

    /**
     * Gets the value of this Pair provided as the second argument in the constructor.
     *
     * @return a value of this Pair.
     */
    public U getObject2() {

        return object2;

    }

    /**
     * Returns a shallow copy of this Pair. The returned Pair is a new instance
     * created with the same values as this Pair. The values themselves are not
     * cloned.
     *
     * @return a clone of this Pair.
     */
    @Override
    public Pair&lt;T, U&gt; clone() {

        return new Pair&lt;T, U&gt;(object1, object2);

    }

    /**
     * Indicates whether some other object is "equal" to this one.
     * This Pair is considered equal to the object if and only if
     * &lt;ul&gt;
     * &lt;li&gt;the Object argument is not null,
     * &lt;li&gt;the Object argument has a runtime type Pair or a subclass,
     * &lt;/ul&gt;
     * AND
     * &lt;ul&gt;
     * &lt;li&gt;the Object argument refers to this pair
     * &lt;li&gt;OR this pair's values are both null and the other pair's values are both null
     * &lt;li&gt;OR this pair has one null value and the other pair has one null value and
     * the remaining non-null values of both pairs are equal
     * &lt;li&gt;OR both pairs have no null values and have value tuples &amp;lt;v1, v2&gt; of
     * this pair and &amp;lt;o1, o2&gt; of the other pair so that at least one of the
     * following statements is true:
     * &lt;ul&gt;
     * &lt;li&gt;v1 equals o1 and v2 equals o2
     * &lt;li&gt;v1 equals o2 and v2 equals o1
     * &lt;/ul&gt;
     * &lt;/ul&gt;
     * In any other case (such as when this pair has two null parts but the other
     * only one) this method returns false.&lt;p&gt;
     * The type parameters that were used for the other pair are of no importance.
     * A Pair&amp;lt;T, U&gt; can return &lt;code&gt;true&lt;/code&gt; for equality testing with
     * a Pair&amp;lt;T, V&gt; even if V is neither a super- nor subtype of U, should
     * the the value equality checks be positive or the U and V type values
     * are both &lt;code&gt;null&lt;/code&gt;. Type erasure for parameter types at compile
     * time means that type checks are delegated to calls of the &lt;code&gt;equals&lt;/code&gt;
     * methods on the values themselves.
     *
     * @param obj the reference object with which to compare.
     * @return true if the object is a Pair equal to this one.
     */
    @Override
    public boolean equals(Object obj) {

        if(obj == null)
            return false;

        if(this == obj)
            return true;

        if(!(obj instanceof Pair&lt;?, ?&gt;))
            return false;

        final Pair&lt;?, ?&gt; otherPair = (Pair&lt;?, ?&gt;)obj;

        if(dualNull)
            return otherPair.dualNull;

        //After this we're sure at least one part in this is not null

        if(otherPair.dualNull)
            return false;

        //After this we're sure at least one part in obj is not null

        if(object1Null) {
            if(otherPair.object1Null) //Yes: this and other both have non-null part2
                return object2.equals(otherPair.object2);
            else if(otherPair.object2Null) //Yes: this has non-null part2, other has non-null part1
                return object2.equals(otherPair.object1);
            else //Remaining case: other has no non-null parts
                return false;
        } else if(object2Null) {
            if(otherPair.object2Null) //Yes: this and other both have non-null part1
                return object1.equals(otherPair.object1);
            else if(otherPair.object1Null) //Yes: this has non-null part1, other has non-null part2
                return object1.equals(otherPair.object2);
            else //Remaining case: other has no non-null parts
                return false;
        } else {
            //Transitive and symmetric requirements of equals will make sure
            //checking the following cases are sufficient
            if(object1.equals(otherPair.object1))
                return object2.equals(otherPair.object2);
            else if(object1.equals(otherPair.object2))
                return object2.equals(otherPair.object1);
            else
                return false;
        }

    }

    /**
     * Returns a hash code value for the pair. This is calculated as the sum
     * of the hash codes for the two values, wherein a value that is &lt;code&gt;null&lt;/code&gt;
     * contributes 0 to the sum. This implementation adheres to the contract for
     * &lt;code&gt;hashCode()&lt;/code&gt; as specified for &lt;code&gt;Object()&lt;/code&gt;. The returned
     * value hash code consistently remain the same for multiple invocations
     * during an execution of a Java application, unless at least one of the pair
     * values has its hash code changed. That would imply information used for 
     * equals in the changed value(s) has also changed, which would carry that
     * change onto this class' &lt;code&gt;equals&lt;/code&gt; implementation.
     *
     * @return a hash code for this Pair.
     */
    @Override
    public int hashCode() {

        int hashCode = object1Null ? 0 : object1.hashCode();
        hashCode += (object2Null ? 0 : object2.hashCode());
        return hashCode;

    }

}
</code></pre>

<p>This implementation has been properly unit tested and the use in a Set and Map has been tried out.  </p>

<p>Notice I'm not claiming to release this in the public domain. This is code I've just written for use in an application, so if you're going to use it, please refrain from making a direct copy and mess about with the comments and names a bit. Catch my drift?</p>
