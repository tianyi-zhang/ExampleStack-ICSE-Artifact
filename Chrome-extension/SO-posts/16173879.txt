<p><code>MathFloat</code> together with <code>float</code> casts is the cause of your problem.  </p>

<p>I rewrote, now it works, it gives 79.34m</p>

<p>But the main problem is that you use the wrong formula for this task, you use here the greater circle distance formula with law of cosines, which is well know to be "ill conditioned" for floating point arithmetic. Then to make it even worse, you use that with single precision only, instead of double.</p>

<p>The more robust formula is the <code>haversine</code> formula.
It was designed to overcome the disadvantage of the greater circle formula.</p>

<p>Here your original code fixed, (but i still recommend use the haversine formula instead)</p>

<pre><code>public void test1() {

    // 79.34253285803419
    double lat1 = 38.655553;
    double lon1 = -121.091611;

    double lat2 = 38.654875;
    double lon2 = -121.091324;

    System.out.println(distanceBetween(lat1,  lon1,  lat2,  lon2));
}

public static double distanceBetween (double currentLat2, double currentLong2, double mallLat2, double mallLong2)
{
        double pk = 180 / Math.PI;
        double a1 = currentLat2 / pk;
        double a2 = currentLong2 / pk;
        double b1 = mallLat2 / pk;
        double b2 = mallLong2 / pk;

        double t1 = Math.cos( a1) * Math.cos(a2) * Math.cos(b1) * Math.cos(b2);
        double t2 = Math.cos( a1) * Math.sin(a2) * Math.cos(b1) * Math.sin(b2);
        double t3 = Math.sin( a1) * Math.sin(b1);
        double tt = Math.acos(t1 + t2 + t3);

       return 6366000*tt;
}
</code></pre>
