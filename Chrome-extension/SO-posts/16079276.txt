<p>Depending to <code>logback-classic</code> is not a good idea as @palacsint stated. You can achieve what you want using Java's Reflection API. Note that this approach puts some overhead to your program because of use of reflection.</p>



<h2>Usage:</h2>

<pre class="lang-java prettyprint-override"><code>LogbackUtils.setLogLevel("com.stackoverflow.sample", "DEBUG")
</code></pre>

<h2>Code:</h2>

<pre class="lang-java prettyprint-override"><code>public  static final String LOGBACK_CLASSIC        = "ch.qos.logback.classic";
public  static final String LOGBACK_CLASSIC_LOGGER = "ch.qos.logback.classic.Logger";
public  static final String LOGBACK_CLASSIC_LEVEL  = "ch.qos.logback.classic.Level";
private static final Logger logger                 = LoggerFactory.getLogger(LogbackUtils.class);

/**
 * Dynamically sets the logback log level for the given class to the specified level.
 *
 * @param loggerName Name of the logger to set its log level. If blank, root logger will be used.
 * @param logLevel   One of the supported log levels: TRACE, DEBUG, INFO, WARN, ERROR, FATAL,
 *                   OFF. {@code null} value is considered as 'OFF'.
 */
public static boolean setLogLevel(String loggerName, String logLevel)
{
    String logLevelUpper = (logLevel == null) ? "OFF" : logLevel.toUpperCase();

    try
    {
        Package logbackPackage = Package.getPackage(LOGBACK_CLASSIC);
        if (logbackPackage == null)
        {
            logger.info("Logback is not in the classpath!");
            return false;
        }

        // Use ROOT logger if given logger name is blank.
        if ((loggerName == null) || loggerName.trim().isEmpty())
        {
            loggerName = (String) getFieldValue(LOGBACK_CLASSIC_LOGGER, "ROOT_LOGGER_NAME");
        }

        // Obtain logger by the name
        Logger loggerObtained = LoggerFactory.getLogger(loggerName);
        if (loggerObtained == null)
        {
            // I don't know if this case occurs
            logger.warn("No logger for the name: {}", loggerName);
            return false;
        }

        Object logLevelObj = getFieldValue(LOGBACK_CLASSIC_LEVEL, logLevelUpper);
        if (logLevelObj == null)
        {
            logger.warn("No such log level: {}", logLevelUpper);
            return false;
        }

        Class&lt;?&gt;[] paramTypes =  { logLevelObj.getClass() };
        Object[]   params     =  { logLevelObj };

        Class&lt;?&gt; clz    = Class.forName(LOGBACK_CLASSIC_LOGGER);
        Method   method = clz.getMethod("setLevel", paramTypes);
        method.invoke(loggerObtained, params);

        logger.debug("Log level set to {} for the logger '{}'", logLevelUpper, loggerName);
        return true;
    }
    catch (Exception e)
    {
        logger.warn("Couldn't set log level to {} for the logger '{}'", logLevelUpper, loggerName, e);
        return false;
    }
}

// getFieldValue() method omitted for bravity from here,
// but available at GitHub link below.
</code></pre>

<h2>Full code including tests: <a href="https://gist.github.com/mmdemirbas/5411395" rel="nofollow">Github Gist</a>.</h2>
