<p>I hope the following would be useful. 
These are two different approached:</p>

<ul>
<li><p>Simple Intersection where you compare all the elements from one array
to another array. </p></li>
<li><p>Sorting and searching based approach which sorts one array and search second array element in first array using binary
search.</p></li>
</ul>

<p><code>
//</p>

<pre><code>public class IntersectionOfUnsortedArrays {
    public static void main(String[] args) {
        int[] arr1 = { 12, 4, 17 };
        int[] arr2 = { 1, 12, 7, 17 };
        System.out.println("Intersection Using Simple Comparision");
        printArray(simpleIntersection(arr1, arr2));
        System.out.println("Intersection Using Sort and Binary Search");
        printArray(sortingBasedIntersection(arr1, arr2));
    }

    /*
     * Simple intersection based on the comparison without any sorting.
     * Complexity O(n^2)
     */
    public static int[] simpleIntersection(int[] a, int[] b) {
        int minlen = a.length &gt; b.length ? b.length : a.length;
        int c[] = new int[minlen];
        int k=0;
        for(int i=0;i&lt;a.length;i++){
            for(int j=0;j&lt;b.length;j++){
                if(a[i]==b[j]){
                    c[k++]=a[i];
                }
            }
        }
        int arr[] = new int[k];
        // copy the final array to remove unwanted 0's from the array c
        System.arraycopy(c, 0, arr, 0, k);
        return arr;
    }

    /*
     * Sorting and Searching based intersection.
     * Complexity Sorting O(n^2) + Searching O(log n)
     */

    public static int[] sortingBasedIntersection(int[] a, int[] b){
        insertionSort(a);
        int minlen = a.length &gt; b.length ? b.length : a.length;
        int c[] = new int[minlen];
        int k=0;
        for(int i=0;i&lt;b.length;i++){
            int result = binarySearch(a,0,a.length,b[i]);
            if(result &gt; -1){
                c[k++] = a[result];
            }
        }
        int arr[] = new int[k];
        // copy the final array to remove unwanted 0's from the array c
        System.arraycopy(c, 0, arr, 0, k);
        return arr;
    }

    public static void insertionSort(int array[]) {
        for (int i = 1; i &lt; array.length; i++) {
            int j = i;
            int b = array[i];
            while ((j &gt; 0) &amp;&amp; (array[j - 1] &gt; b)) {
                array[j] = array[j - 1];
                j--;
            }
            array[j] = b;
        }
    }

    static int binarySearch(int arr[], int low, int high, int num) {
        if (high &lt; low)
            return -1;
        int mid = (low + high) / 2;
        if (num == arr[mid])
            return mid;
        if (num &gt; arr[mid])
            return binarySearch(arr, (mid + 1), high, num);
        else
            return binarySearch(arr, low, (mid - 1), num);
    }

    public static void printArray(int[] array) {
        for (int value : array) {
            System.out.print(" "+value);
        }
        System.out.println("\n");
    }
}
</code></pre>

<p></code></p>
