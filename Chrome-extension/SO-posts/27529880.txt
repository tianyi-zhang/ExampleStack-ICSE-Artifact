<p>If you are <strong>really</strong> concerned by performance you can use <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/math/IntMath.html#pow(int,%20int)" rel="nofollow">Guava.IntMath.pow()</a> which does exponentiate in O(log(n)) time. Source code of this implementation is below:</p>

<pre><code>public static int pow(int b, int k) {
    checkNonNegative("exponent", k);
    switch (b) {
      case 0:
        return (k == 0) ? 1 : 0;
      case 1:
        return 1;
      case (-1):
        return ((k &amp; 1) == 0) ? 1 : -1;
      case 2:
        return (k &lt; Integer.SIZE) ? (1 &lt;&lt; k) : 0;
      case (-2):
        if (k &lt; Integer.SIZE) {
          return ((k &amp; 1) == 0) ? (1 &lt;&lt; k) : -(1 &lt;&lt; k);
        } else {
          return 0;
        }
      default:
        // continue below to handle the general case
    }
    for (int accum = 1;; k &gt;&gt;= 1) {
      switch (k) {
        case 0:
          return accum;
        case 1:
          return b * accum;
        default:
          accum *= ((k &amp; 1) == 0) ? 1 : b;
          b *= b;
      }
    }
  }
</code></pre>

<p>You should also note that in most practical cases regular <code>Math.pow()</code> will be enough for your solution. You should think about swapping algorithms if it really slows down your program.</p>
