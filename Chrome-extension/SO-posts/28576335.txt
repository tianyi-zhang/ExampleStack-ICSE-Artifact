<p>You need to use associativity and compare operator precedence. I have mostly covered all the operators.</p>

<p>Pre-requiste - Expression should be splitted by space <code>' '</code>.</p>

<pre><code>import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

public class Test{

    public static final int                LEFT_ASSOC      = 0;
    public static final int                RIGHT_ASSOC     = 1;
    public static final Map&lt;String, int[]&gt; ARITH_OPERATORS = new HashMap&lt;String, int[]&gt;();
    public static final Map&lt;String, int[]&gt; REL_OPERATORS   = new HashMap&lt;String, int[]&gt;();
    public static final Map&lt;String, int[]&gt; LOG_OPERATORS   = new HashMap&lt;String, int[]&gt;();
    public static final Map&lt;String, int[]&gt; OPERATORS       = new HashMap&lt;String, int[]&gt;();

    static {
        ARITH_OPERATORS.put("+", new int[] { 25, LEFT_ASSOC });
        ARITH_OPERATORS.put("-", new int[] { 25, LEFT_ASSOC });
        ARITH_OPERATORS.put("*", new int[] { 30, LEFT_ASSOC });
        ARITH_OPERATORS.put("/", new int[] { 30, LEFT_ASSOC });
        ARITH_OPERATORS.put("%", new int[] { 30, LEFT_ASSOC });
        ARITH_OPERATORS.put("^", new int[] { 35, RIGHT_ASSOC });
        ARITH_OPERATORS.put("**", new int[] { 30, LEFT_ASSOC });

        REL_OPERATORS.put("&lt;", new int[] { 20, LEFT_ASSOC });
        REL_OPERATORS.put("&lt;=", new int[] { 20, LEFT_ASSOC });
        REL_OPERATORS.put("&gt;", new int[] { 20, LEFT_ASSOC });
        REL_OPERATORS.put("&gt;=", new int[] { 20, LEFT_ASSOC });
        REL_OPERATORS.put("==", new int[] { 20, LEFT_ASSOC });
        REL_OPERATORS.put("!=", new int[] { 20, RIGHT_ASSOC });

        LOG_OPERATORS.put("!", new int[] { 15, RIGHT_ASSOC });

        LOG_OPERATORS.put("&amp;&amp;", new int[] { 10, LEFT_ASSOC });

        LOG_OPERATORS.put("||", new int[] { 5, LEFT_ASSOC });

        LOG_OPERATORS.put("EQV", new int[] { 0, LEFT_ASSOC });
        LOG_OPERATORS.put("NEQV", new int[] { 0, LEFT_ASSOC });

        OPERATORS.putAll(ARITH_OPERATORS);
        OPERATORS.putAll(REL_OPERATORS);
        OPERATORS.putAll(LOG_OPERATORS);
    }

    public static void main(String args[]) {
        String inputExpression = "a + ( c - h ) / ( b * d )";

        String[] input = inputExpression.split(" ");
        List&lt;String&gt; output = infixToRPN(input);
        System.out.println(output.toString());
    }

    private static boolean isAssociative(String token, int type) {
        if (!isOperator(token)) {
            System.out.println("");
        }
        if (OPERATORS.get(token)[1] == type) {
            return true;
        }
        return false;
    }

    private static boolean isOperator(String token) {
        return OPERATORS.containsKey(token);
    }

    private static int cmpPrecedence(String token1, String token2) {
        if (!isOperator(token1) || !isOperator(token2)) {
            System.out.println("");
        }
        return OPERATORS.get(token1)[0] - OPERATORS.get(token2)[0];
    }

    private static ArrayList&lt;String&gt; infixToRPN(String[] inputTokens) {
        ArrayList&lt;String&gt; out = new ArrayList&lt;String&gt;();
        Stack&lt;String&gt; stack = new Stack&lt;String&gt;();
        // For all the input tokens [S1] read the next token [S2]
        for (String token : inputTokens) {
            if (isOperator(token)) {
                // If token is an operator (x) [S3]
                while (!stack.empty() &amp;&amp; isOperator(stack.peek())) {
                    // [S4]
                    if ((isAssociative(token, LEFT_ASSOC) &amp;&amp; cmpPrecedence(token, stack.peek()) &lt;= 0)
                            || (isAssociative(token, RIGHT_ASSOC) &amp;&amp; cmpPrecedence(token, stack.peek()) &lt; 0)) {
                        out.add(stack.pop()); // [S5] [S6]
                        continue;
                    }
                    break;
                }
                // Push the new operator on the stack [S7]
                stack.push(token);
            } else if (token.equals("(")) {
                stack.push(token); // [S8]
            } else if (token.equals(")")) {
                // [S9]
                while (!stack.empty() &amp;&amp; !stack.peek().equals("(")) {
                    out.add(stack.pop()); // [S10]
                }
                stack.pop(); // [S11]
            } else {
                out.add(token); // [S12]
            }
        }
        while (!stack.empty()) {
            out.add(stack.pop()); // [S13]
        }
        return out;
    }
}
</code></pre>

<p><strong>output</strong></p>

<pre><code>[a, c, h, -, b, d, *, /, +]
</code></pre>
