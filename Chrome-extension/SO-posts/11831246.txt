<p>Use bitmap options:</p>

<pre><code>final BitmapFactory.Options options = new BitmapFactory.Options();
options.inPreferredConfig = Bitmap.Config.RGB_565; //Use this if you dont require Alpha channel
options.inSampleSize = 4; // The higher, the smaller the image size and resolution read in
</code></pre>

<p>Then set the options in the decode</p>

<pre><code>BitmapFactory.decodeFile(path, options)
</code></pre>

<p><a href="http://developer.android.com/training/displaying-bitmaps/load-bitmap.html" rel="nofollow">Here is a good link to read through, about how to display Bitmaps effciently.</a></p>

<p>You could even write a method like this to obtain a sized image at your desired resolution.</p>

<p>The following method checks the size the image, then decodes from file, with in-sample size to resize your image from sdcard accordingly, while keeping memory usage at a low.</p>

<pre><code>   public static Bitmap decodeSampledBitmapFromFile(string path,
        int reqWidth, int reqHeight) { // BEST QUALITY MATCH

    // First decode with inJustDecodeBounds=true to check dimensions
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    BitmapFactory.decodeFile(path, options);

    // Calculate inSampleSize
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        options.inPreferredConfig = Bitmap.Config.RGB_565;
        int inSampleSize = 1;

        if (height &gt; reqHeight) {
            inSampleSize = Math.round((float)height / (float)reqHeight);
        }

        int expectedWidth = width / inSampleSize;

        if (expectedWidth &gt; reqWidth) {
            //if(Math.round((float)width / (float)reqWidth) &gt; inSampleSize) // If bigger SampSize..
            inSampleSize = Math.round((float)width / (float)reqWidth);
        }


    options.inSampleSize = inSampleSize;

    // Decode bitmap with inSampleSize set
    options.inJustDecodeBounds = false;

        return BitmapFactory.decodeFile(path, options);
  }
</code></pre>
