<p>JSPs ultimately get generated to <code>.java</code> classes which get compiled as servlets. Check the server's work folder. In case of Tomcat, a <code>/test.jsp</code> gets generated as <code>/org/apache/jsp/test_jsp.java</code> file in Tomcat's <code>/work</code> folder. </p>

<p>The following lines</p>

<pre class="lang-html prettyprint-override"><code>&lt;jsp:useBean id="dog" class="com.example.Dog" scope="application"&gt;
     &lt;jsp:setProperty name="dog" property="breed" value="House Dog !!!"/&gt;
&lt;/jsp:useBean&gt;
</code></pre>

<p><em>(the only change I made is adding a package; packageless classes are Badâ„¢)</em></p>

<p>are generated as</p>

<pre class="lang-java prettyprint-override"><code>  com.example.Dog dog = null;
  synchronized (application) {
    dog = (com.example.Dog) _jspx_page_context.getAttribute("dog", javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
    if (dog == null){
      dog = new com.example.Dog();
      _jspx_page_context.setAttribute("dog", dog, javax.servlet.jsp.PageContext.APPLICATION_SCOPE);
      out.write("\n");
      out.write("     ");
      org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("dog"), "breed", "House Dog !!!", null, null, false);
      out.write('\n');
    }
  }
</code></pre>

<p>Tomcat is open source, according to its source code, the <code>JspRuntimeLibrary#introspecthelper()</code> method delegates to <code>internalIntrospecthelper()</code> which ultimately does this:</p>

<pre><code>Method method = null;
Class&lt;?&gt; type = null;
Class&lt;?&gt; propertyEditorClass = null;
try {
    java.beans.BeanInfo info
        = java.beans.Introspector.getBeanInfo(bean.getClass());
    if ( info != null ) {
        java.beans.PropertyDescriptor pd[]
            = info.getPropertyDescriptors();
        for (int i = 0 ; i &lt; pd.length ; i++) {
            if ( pd[i].getName().equals(prop) ) {
                method = pd[i].getWriteMethod();
                type   = pd[i].getPropertyType();
                propertyEditorClass = pd[i].getPropertyEditorClass();
                break;
            }
        }
    }
    if ( method != null ) {
        if (type.isArray()) {
            if (request == null) {
                throw new JasperException(
                    Localizer.getMessage("jsp.error.beans.setproperty.noindexset"));
            }
            Class&lt;?&gt; t = type.getComponentType();
            String[] values = request.getParameterValues(param);
            //XXX Please check.
            if(values == null) return;
            if(t.equals(String.class)) {
                method.invoke(bean, new Object[] { values });
            } else {
                createTypedArray (prop, bean, method, values, t,
                                  propertyEditorClass); 
            }
        } else {
            if(value == null || (param != null &amp;&amp; value.equals(""))) return;
            Object oval = convert(prop, value, type, propertyEditorClass);
            if ( oval != null )
                method.invoke(bean, new Object[] { oval });
        }
    }
} catch (Exception ex) {
    Throwable thr = ExceptionUtils.unwrapInvocationTargetException(ex);
    ExceptionUtils.handleThrowable(thr);
    throw new JasperException(ex);
}
</code></pre>

<p>You see, it's using <a href="http://docs.oracle.com/javase/6/docs/api/java/beans/Introspector.html" rel="nofollow"><code>java.beans.Introspector</code></a> to get bean information and properties by <a href="http://docs.oracle.com/javase/6/docs/api/java/beans/BeanInfo.html#getPropertyDescriptors%28%29" rel="nofollow"><code>BeanInfo#getPropertyDescriptors()</code></a>. The desired <code>&lt;jsp:setProperty&gt;</code> method is obtained as <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Method.html" rel="nofollow"><code>java.lang.reflect.Method</code></a> by <a href="http://docs.oracle.com/javase/6/docs/api/java/beans/PropertyDescriptor.html#getWriteMethod%28%29" rel="nofollow"><code>PropertyDescriptor#getWriteMethod()</code></a>. Finally it uses the <a href="http://docs.oracle.com/javase/tutorial/reflect/index.html" rel="nofollow">Reflection API</a> to invoke the method.</p>
