<p>This was done so that if the type parameter is a wildcard, these methods can still be called.</p>

<p>If you have a <code>Map&lt;?, ?&gt;</code>, Java won't allow you to call any methods that are declared with the generic types as arguments. This prevents you from violating the type constraints so you cannot, for instance, call <code>put(key, value)</code> with the wrong types.</p>

<p>If <code>get()</code> were defined as <code>get(K key)</code> instead of the current <code>get(Object key)</code>, it too would have been excluded due to this same rule. This would make a wildcarded Map practically unusable.</p>

<p>In theory, the same applies to <code>remove()</code>, as removing an object can never violate the type constraints either.</p>

<p>Here is an example of code that would not have been possible if <code>get</code> had been declared as <code>get(T key)</code>:</p>

<pre><code>public static &lt;K,V&gt; Map&lt;K, V&gt; intersect(Map&lt;? extends K, ? extends V&gt; m1, Map&lt;? extends K, ? extends V&gt; m2) {
    Map&lt;K,V&gt; result = new HashMap&lt;K, V&gt;();
    for (Map.Entry&lt;? extends K, ? extends V&gt; e1 : m1.entrySet()) {
        V value = m2.get(e1.getKey()); // this would not work in case of Map.get(K key)
        if (e1.getValue().equals(value)) {
            result.put(e1.getKey(), e1.getValue());
        }
    }
    return result;
}
</code></pre>

<p><code>e1.getKey()</code> returns an object of some unknown subtype of <code>K</code> (the subtype used by <code>m1</code>), but <code>m2</code> uses a potentially different subtype of <code>K</code>. Had <code>Map.get()</code> been declared as <code>get(K key)</code>, this usage would not have been allowed.</p>
