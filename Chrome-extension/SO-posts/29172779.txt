<p>The easier solution for me was:</p>

<p><strong>Considerations:</strong></p>

<ul>
<li>This solution requires autogenerated Navigation Drawer Activity
provided by Android Studio.</li>
<li>Classes <code>DrawerItem</code>, <code>CustomDrawerAdapter</code> and layout <code>custom_drawer_item.xml</code> were taken from <a href="http://www.tutecentral.com/android-custom-navigation-drawer/">this tutorial</a>.</li>
</ul>

<p><strong>1. Create this class for wrap the custom drawer item:</strong></p>

<pre><code>public class DrawerItem {

  String ItemName;
  int imgResID;

  public DrawerItem(String itemName, int imgResID) {
        super();
        ItemName = itemName;
        this.imgResID = imgResID;
  }

  public String getItemName() {
        return ItemName;
  }
  public void setItemName(String itemName) {
        ItemName = itemName;
  }
  public int getImgResID() {
        return imgResID;
  }
  public void setImgResID(int imgResID) {
        this.imgResID = imgResID;
  }
}
</code></pre>

<p><strong>2. Create custom layout (custom_drawer_item.xml) for your drawer items:</strong></p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent" &gt;

&lt;LinearLayout
    android:id="@+id/itemLayout"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_alignParentLeft="true"
    android:orientation="vertical"
    android:layout_marginTop="0dp"
    android:background="?android:attr/activatedBackgroundIndicator"&gt;

    &lt;LinearLayout
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:minHeight="55dp"&gt;

        &lt;ImageView
            android:id="@+id/drawer_icon"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"/&gt;

        &lt;TextView
            android:id="@+id/drawer_itemName"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:textAppearance="?android:attr/textAppearanceLarge"/&gt;
    &lt;/LinearLayout&gt;

    &lt;View
        android:layout_width="match_parent"
        android:layout_height="1dp"
        android:layout_marginBottom="1dp"
        android:layout_marginTop="1dp"
        android:layout_marginLeft="10dp"
        android:layout_marginRight="10dp"
        android:background="#DADADC"&gt;
    &lt;/View&gt;
&lt;/LinearLayout&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p><strong>3. Create your custom adapter:</strong></p>

<pre><code>import java.util.List;
import android.app.Activity;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.ImageView;
import android.widget.TextView;

public class CustomDrawerAdapter extends ArrayAdapter&lt;DrawerItem&gt; {

Context context;
List&lt;DrawerItem&gt; drawerItemList;
int layoutResID;

public CustomDrawerAdapter(Context context, int layoutResourceID, List&lt;DrawerItem&gt; listItems) {
    super(context, layoutResourceID, listItems);
    this.context = context;
    this.drawerItemList = listItems;
    this.layoutResID = layoutResourceID;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {
    // TODO Auto-generated method stub

    DrawerItemHolder drawerHolder;
    View view = convertView;

    if (view == null) {
        LayoutInflater inflater = ((Activity) context).getLayoutInflater();
        drawerHolder = new DrawerItemHolder();

        view = inflater.inflate(layoutResID, parent, false);
        drawerHolder.ItemName = (TextView)view.findViewById(R.id.drawer_itemName);
        drawerHolder.icon = (ImageView) view.findViewById(R.id.drawer_icon);

        view.setTag(drawerHolder);

    } else {
        drawerHolder = (DrawerItemHolder) view.getTag();
    }

    DrawerItem dItem = (DrawerItem) this.drawerItemList.get(position);

    drawerHolder.icon.setImageDrawable(view.getResources().getDrawable(
            dItem.getImgResID()));
    drawerHolder.ItemName.setText(dItem.getItemName());

    return view;
}

private static class DrawerItemHolder {
    TextView ItemName;
    ImageView icon;
}
}
</code></pre>

<p><strong>4. In autogenerated <code>NavigationDrawerFragment</code> class <code>onCreateView</code> method, replace the autogenerated adapter for this:</strong></p>

<pre><code>ArrayList&lt;DrawerItem&gt; dataList = new ArrayList&lt;DrawerItem&gt;();
dataList.add(new DrawerItem(getString(R.string.title_section1), R.drawable.ic_action_1));
dataList.add(new DrawerItem(getString(R.string.title_section2), R.drawable.ic_action_2));
dataList.add(new DrawerItem(getString(R.string.title_section3), R.drawable.ic_action_3));

mDrawerListView.setAdapter(new CustomDrawerAdapter(
        getActivity(),
        R.layout.custom_drawer_item,
        dataList));
</code></pre>

<p>Remember replace <code>R.string.title_sectionN</code> and <code>R.drawable.ic_action_N</code> for your own resources.</p>
