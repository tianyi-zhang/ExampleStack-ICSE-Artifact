<p>According to the hashcode / equals contract, there is nothing wrong.</p>

<p>But that doesn't necessarily make the code correct.  It all depends on the <em>required equality semantics</em> of the class.</p>

<p>For instance, if there are required to be more than 2^32 distinct states that a <code>Test</code> object could have, then this approach cannot possibly work ... because there are only 2^32 distinct values that can be returned by a <code>hashCode()</code> method.  And even in the sub 2^32 case, you are depending on the <em>existence</em> of a perfect hashing function for the class.  Finding / writing a function won't always be practical.</p>

<hr>

<p>The other thing to note is that your approach is often going to be less efficient than implementing equals in the normal way.  Why?  Compare this example:</p>

<pre><code>class Test {
    private boolean field1;
    private boolean field2;

    @Override
    public int hashCode() {
        return (field1 ? 0 : 1) * 2 + (field2 ? 0 : 1);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (this == obj)
            return true;
        if (getClass() != obj.getClass())
            return false;
        Test other = (Test) obj;
        // version 1
        if(this.hashCode() == other.hashCode()) {
            return true;
        } else {
            return false;
        }
        // version 2
        if (this.field1 == other.field1 &amp;&amp; this.field2 == other.field2) {
            return true;
        } else {
            return false;
        }
    }
}
</code></pre>

<p>Now compare the "version 1" and "version 2" fragments:</p>

<ul>
<li>version 1 - 2 method calls, 5 compare-and-branches and 1 multiply.  </li>
<li>version 2 - 0 method calls, 2 compare-and-branch and 0 multiplies.</li>
</ul>

<p>Now the JIT compiler may optimize significantly, but in this case, the calculation of the hashcodes will probably out-weigh any saving.  Even if you cached the hashcodes (like <code>String</code> does for example) you need the conditions to be "just right" for the hashcode-based approach to be better.</p>
