<p>First it is not advisable to have listview inside a listview , as it creates scrolling problem .ExpandableListView is recommended</p>

<p>Preview:
<a href="http://i.stack.imgur.com/Ygk9n.jpg" rel="nofollow"><img src="http://i.stack.imgur.com/Ygk9n.jpg" alt="enter image description here"></a></p>

<p>Now in this tutorial you will be able to add list item and sub list item with edittext , Lets start with defining layouts</p>

<p>1.Define ExpandableListView tag in activity_main.xml

</p>

<pre><code>&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal"
    android:weightSum="1" &gt;

    &lt;EditText
        android:id="@+id/add_item_et"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:ems="10" &gt;

        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;Button
        android:onClick="addItem"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="+" /&gt;
&lt;/LinearLayout&gt;

&lt;ExpandableListView
    android:id="@+id/parent_list_view"
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;
&lt;/ExpandableListView&gt;
</code></pre>

<p></p>

<ol start="2">
<li><p>Define layout for outer list list_group.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="8dp"
    android:background="#000000"&gt;


&lt;TextView
    android:id="@+id/lblListHeader"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:paddingLeft="?android:attr/expandableListPreferredItemPaddingLeft"
    android:textSize="17dp"
    android:textColor="#f9f93d" /&gt;

&lt;/LinearLayout&gt;
</code></pre></li>
<li><p>Create layout for child list (We will have to different layout for child)</p></li>
</ol>

<p>list_item.xml</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="55dip"
        android:orientation="vertical" &gt;


    &lt;TextView
        android:id="@+id/lblListItem"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="17dip"
        android:paddingTop="5dp"
        android:paddingBottom="5dp"
        android:paddingLeft="?android:attr/expandableListPreferredChildPaddingLeft" /&gt;

    &lt;/LinearLayout&gt;
</code></pre>

<p>list_item_2.xml</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
    &lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"&gt;

    &lt;EditText
        android:id="@+id/add_child_list_et"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:ems="10" 
        android:layout_marginLeft="32dp"&gt;

        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;Button
        android:id="@+id/add_child_list_bt"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="+" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<ol start="4">
<li><p>Define ExpandableListView in MainActivity.java</p>

<p>public class MainActivity extends Activity {</p>

<pre><code>private ExpandableListView elv;
private ExpandableListAdapter adapter;
private List&lt;String&gt; listDataHeader;//This is main List
private HashMap&lt;String, List&lt;String&gt;&gt; listDataChild;//This is child list
private EditText addHeaders;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.listview_layout);

    elv = (ExpandableListView) findViewById(R.id.parent_list_view);
    addHeaders=(EditText) findViewById(R.id.add_item_et);
    init();

    adapter = new ExpandableListAdapter(MainActivity.this,listDataHeader,listDataChild);//This is a custom adapter that we will define shortly

    elv.setAdapter(adapter);


}

private void init() {

    listDataHeader = new ArrayList&lt;String&gt;();
    listDataChild=new HashMap&lt;String, List&lt;String&gt;&gt;(); 

    //Just creating one item in our list to start with something
    listDataHeader.add(new String("Header 1"));
    List&lt;String&gt; subHeaderOne=new ArrayList&lt;String&gt;();
    subHeaderOne.add("");//Create First item always empty as we will have different layout for this
    subHeaderOne.add("Header1 SubHeading 1");   

    listDataChild.put(listDataHeader.get(0), subHeaderOne);

}

public void addItem(View v) {
    //We will add new item in listDataHeader and also in listDataChild
    String header="";
    header=addHeaders.getText().toString();
    if(header.length()&gt;1){
        listDataHeader.add(header);
        List&lt;String&gt; childList=new ArrayList&lt;String&gt;();
        childList.add("");//necessary to have atleast one empty item in our child list where we will set different layout
        listDataChild.put(header, childList);
    }

    addHeaders.setText("");
    adapter.notifyDataSetChanged();

    }

 }
</code></pre></li>
<li><p>Now the Dirty part defining our own custom adapter ExpandableListAdapter.java</p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter{

private List&lt;String&gt; listDataHeader;
private HashMap&lt;String, List&lt;String&gt;&gt; listDataChild;
private Context context;

public ExpandableListAdapter(Context context,
        List&lt;String&gt; listDataHeader,
        HashMap&lt;String, List&lt;String&gt;&gt; listDataChild) {
        this.listDataHeader=listDataHeader;
        this.listDataChild=listDataChild;
        this.context=context;
}

@Override
public int getGroupCount() {
    return listDataHeader.size();
}

@Override
public int getChildrenCount(int groupPosition) {
    return listDataChild.get(listDataHeader.get(groupPosition)).size();
}

@Override
public Object getGroup(int groupPosition) {
    return listDataHeader.get(groupPosition);
}


@Override
public long getGroupId(int groupPosition) {
    return groupPosition;
}



@Override
public boolean hasStableIds() {
    return false;
}

@Override
public View getGroupView(int groupPosition, boolean isExpanded,
        View convertView, ViewGroup parent) {
    final String headerText=(String) getGroup(groupPosition);
    if(convertView==null){
        LayoutInflater inflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        convertView=inflater.inflate(R.layout.list_group, null);
    }

    TextView txtListHeader=(TextView) convertView.findViewById(R.id.lblListHeader);
    txtListHeader.setTypeface(null,Typeface.BOLD);
    txtListHeader.setText(headerText);
    return convertView;
}



@Override
public boolean isChildSelectable(int groupPosition, int childPosition) {
    return true;
}

@Override
public View getChildView(final int groupPosition, int childPosition,
        boolean isLastChild, View convertView, ViewGroup parent) {
    final String childText=(String) getChild(groupPosition, childPosition);

    if(convertView!=null)convertView=null;// If we remove this line then there was problem , Haven't figured it out , its temp solution



    if(convertView==null){
        LayoutInflater inflater =(LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        switch(childPosition){
        case 0:     
            //If child item is the first item in sub list ,we will set layout which contain EditText and button so to add more item in sub list(child list)
            convertView=inflater.inflate(R.layout.list_item_2, null);
            convertView.setId(0);
            break;
        default:
            //If child item is any other than first item in sub list ,we will set layout which contain just TextView
            convertView=inflater.inflate(R.layout.list_item, null);
            convertView.setId(1);
        }

    }

    int viewId=convertView.getId();

    switch(viewId){
    case 0:
        final EditText editText=(EditText) convertView.findViewById(R.id.add_child_list_et);
        Button addButton=(Button) convertView.findViewById(R.id.add_child_list_bt);

        addButton.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String txt="";

                txt=editText.getText().toString();
                List&lt;String&gt; newList=listDataChild.get(listDataHeader.get(groupPosition));
                newList.add(txt);
                editText.setText("");
                notifyDataSetChanged();


            }
        });
        break;
    case 1:
        TextView txtListChild=(TextView) convertView.findViewById(R.id.lblListItem);
        txtListChild.setText(childText+" "+childPosition);
        break;
    }




    return convertView;
}

@Override
public Object getChild(int groupPosition, int childPosition) {
    return (listDataChild.get(listDataHeader.get(groupPosition))).get(childPosition);
}


@Override
public long getChildId(int groupPosition, int childPosition) {
    return childPosition;
}

 }
</code></pre></li>
</ol>

<p>Feel Free to ask anything</p>
