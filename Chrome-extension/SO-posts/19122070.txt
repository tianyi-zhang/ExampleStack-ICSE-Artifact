<p>I use a library I wrote called Java Chronicle for this.  It is designed to persist and queue one million quotes per second without producing any significant garbage.  </p>

<p>I have a demo <a href="https://github.com/OpenHFT/Java-Chronicle/tree/master/chronicle-demo" rel="nofollow">here</a> where it sends quote like objects with nano second timing information at a rate of one million messages per second and it can send tens of millions in a JVM with a 32 MB heap without triggering even a minor collection. The round trip latency is less than 0.6 micro-seconds 90% of the time on my ultra book. ;)</p>

<blockquote>
  <p>from a performance perspective, do I gain anything by going with the second approach or does the first make more sense? </p>
</blockquote>

<p>I strongly recommend not filling your CPU caches with garbage.  In fact I avoid any constructs which create any significant garbage.  You can build a system which creates less than one object per event <em>end to end</em>.  I have a Eden size which is larger than the amount of garbage I produce in a day so no GCs minor or full to worry about.</p>

<blockquote>
  <p>Has anyone implemented this type of pattern before?</p>
</blockquote>

<p>I wrote a profitable low latency trading system in Java five years ago. At the time it was fast enough at 60 micro-seconds tick to trade in Java, but you can do better than that these days.</p>

<p>If you want low latency market data processing system, this is the way I do it.  You might find this presentation I gave at JavaOne interesting as well.</p>

<p><a href="http://www.slideshare.net/PeterLawrey/writing-and-testing-high-frequency-trading-engines-in-java" rel="nofollow">http://www.slideshare.net/PeterLawrey/writing-and-testing-high-frequency-trading-engines-in-java</a></p>

<hr>

<p>EDIT I have added this <a href="https://github.com/OpenHFT/Java-Lang/tree/master/lang/src/test/java/net/openhft/lang/io/examples/ParserExampleMain.java" rel="nofollow">parsing example</a></p>

<pre><code>ByteBuffer wrap = ByteBuffer.allocate(1024);
ByteBufferBytes bufferBytes = new ByteBufferBytes(wrap);
byte[] bytes = "BAC,12.32,12.54,12.56,232443".getBytes();

int runs = 10000000;
long start = System.nanoTime();
for (int i = 0; i &lt; runs; i++) {
    bufferBytes.reset();
    // read the next message.
    bufferBytes.write(bytes);
    bufferBytes.position(0);
    // decode message
    String word = bufferBytes.parseUTF(StopCharTesters.COMMA_STOP);
    double low = bufferBytes.parseDouble();
    double curr = bufferBytes.parseDouble();
    double high = bufferBytes.parseDouble();
    long sequence = bufferBytes.parseLong();
    if (i == 0) {
        assertEquals("BAC", word);
        assertEquals(12.32, low, 0.0);
        assertEquals(12.54, curr, 0.0);
        assertEquals(12.56, high, 0.0);
        assertEquals(232443, sequence);
    }
}
long time = System.nanoTime() - start;
System.out.println("Average time was " + time / runs + " nano-seconds");
</code></pre>

<p>when set with -verbose:gc -Xmx32m it prints</p>

<pre><code>Average time was 226 nano-seconds
</code></pre>

<p>Note: there are no GCes triggered.</p>
