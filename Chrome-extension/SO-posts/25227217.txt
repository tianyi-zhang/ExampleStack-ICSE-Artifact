<p>It a bit complicated, I hope i can do it right, in case you want to get particular row which user swiping on, it need to extracting a method which carry deep in ListView calls <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.0.3_r1/android/widget/ListView.java#ListView.findMotionRow%28int%29" rel="nofollow">findMotionRow</a>, this method declare as an actually <strong>private</strong> visibility for extender, so we must make that method available in our own ListView and learn how to invoke it from the ListView's source code :</p>

<pre><code>public class YourListView extends ListView {
    ...Constructors...

    @Override
    public boolean onInterceptTouchEvent(MotionEvent ev) {
        switch (ev.getAction()) {
            case MotionEvent.ACTION_DOWN:
                mMotionPosition = findMotionRow(ev.getY());
                break;
        }
        return super.onInterceptTouchEvent(ev);
    }

    private int mMotionPosition;

    public int getMotionPosition() {
        return mMotionPosition;
    }

    /**
     * Find which position is motion on.
     * Note : this method copy into public from 4.0 source code.
     * @param y Y coordinate of the motion event.
     * @return Selected index (starting at 0) of the data item.
     */
    private int findMotionRow(float y) {
        int childCount = getChildCount();
        if (childCount &gt; 0) {
            if (!isStackFromBottom()) {
                for (int i = 0; i &lt; childCount; i++) {
                    View v = getChildAt(i);
                    if (y &lt;= v.getBottom()) {
                        return getFirstVisiblePosition() + i;
                    }
                }
            } else {
                for (int i = childCount - 1; i &gt;= 0; i--) {
                    View v = getChildAt(i);
                    if (y &gt;= v.getTop()) {
                        return getFirstVisiblePosition() + i;
                    }
                }
            }
        }
        return INVALID_POSITION;
    }
}
</code></pre>

<p>In the proper place, i.e Activity.onCreate(), we can listening the onTouch event and able to use <code>mMotionPosition</code> to take the row's View :</p>

<pre><code>mYourListView.setOnTouchListener(new View.OnTouchListener() {
    @Override
    public boolean onTouch(View v, MotionEvent event) {
        int hoverChildIndex =
            mYourListView.getMotionPosition() - mYourListView.getFirstVisiblePosition();
        ModelView hoveringView = (ModelView) mYourListView.getChildAt(hoverChildIndex);

        return false;
    }
});
</code></pre>
