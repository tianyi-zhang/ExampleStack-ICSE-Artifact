<p>Your code is far too slow, that's why it takes so much time to execute and doesn't return any output (apparently). You should speed up your <code>isPrime</code> test using the following trick : if n is not a prime, it can be written as n = p x q where p &lt;= sqrt(n) and q > p. Then, <strong>you can stop your loop at sqrt(n)</strong> since you are able to tell that n is not a prime if there is no integer p &lt;= sqrt(n) verifying this property.</p>

<p>The following code uses that remark but also another property : a integer can always be written as 6*p + q where p and q are integers and q &lt; 6. For all p, 6*p + 2 and 6*p + 4 are divisible by 2 and 6*p + 3 is divisible by 3 so for all n = 6*p + q, if n is not divisible by 2 nor by 3, then n has the form 6*p + 1 of 6*p + 5 (or 6*p - 1, which is equivalent).</p>

<pre><code>public static boolean isPrime(int n) {
    if (n == 2 || n == 3)
        return true;
    if(n &lt;= 1 || n % 2 == 0 || n % 3 == 0)
        return false;
    int x = (int) Math.sqrt(n);
    for(int i=1 ; (6*i-1) &lt;= x ; i++)
        if(n % (6*i-1) == 0 || n % (6*i+1) == 0) 
            return false;
    return true;
}
</code></pre>

<p><strong>Edit :</strong></p>

<p>Plus, as stefan.schwetschke observed, you are not incrementing the index of your loop. In this case you should use a for loop since you now exactly the bounds of the index of the loop.</p>
