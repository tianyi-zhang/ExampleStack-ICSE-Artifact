<p>activity class</p>

<pre><code>public class MyActivity extends Activity {
   @Override
   protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
       setContentView(R.layout.activity_my);
      EditText edittext_search = (EditText) findViewById(R.id.edittext_search);
      edittext_search.addTextChangedListener(new TextWatcher() {
         @Override
         public void beforeTextChanged(CharSequence charSequence, int i, int i2, int i3) {

         }

         @Override
         public void onTextChanged(CharSequence charSequence, int i, int i2, int i3) {
            mAdapter.getFilter().filter(charSequence);
         }

         @Override
         public void afterTextChanged(Editable editable) {

         }
      });
   }
}
</code></pre>

<p>layout </p>

<pre><code>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
              android:layout_width="match_parent"
              android:layout_height="match_parent"
              android:orientation="vertical"&gt;

    &lt;EditText
        android:id="@+id/edittext_search"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/&gt;

    &lt;ListView
        android:id="@+id/listview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"&gt;&lt;/ListView&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>adapter class</p>

<pre><code>public class MyAdapter extends ArrayAdapter&lt;String&gt; implements Filterable {
    private MyFilter mFilter;
    private static List&lt;String&gt; mOriginItmeList;
    private static List&lt;String&gt; mItemList;
   public MyAdapter(Context context, int resource, List&lt;String&gt; objects) {
      super(context, resource, objects);
   }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        //TODO inflate listview row
        return super.getView(position, convertView, parent);
    }
    @Override
    public Filter getFilter() {
        if (mFilter == null) {
            mFilter = new MyFilter();
        }
        return mFilter;
    }
    private class MyFilter extends Filter {


        @Override
        protected FilterResults performFiltering(CharSequence constraint) {
            FilterResults results = new FilterResults();
            String search = constraint.toString();
            if (TextUtils.isEmpty(search)) {
                results.values = mOriginItmeList;
                results.count = mOriginItmeList.size();
            } else {
                ArrayList&lt;String&gt; tempList = new ArrayList&lt;String&gt;();
                for (String item : mOriginItmeList) {
                    if (item==search) {
                        tempList.add(item);
                    }
                }
                results.values = tempList;
                results.count = tempList.size();
            }
            return results;
        }


        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            mItemList = (ArrayList&lt;String&gt;) results.values;
        }
    }

}
</code></pre>
