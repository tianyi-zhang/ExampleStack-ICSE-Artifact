<p>Here are the changes you need to do in example or can create a new project as well.</p>

<p><strong>1.Write your all views as Fragments instead of Activities which you want to show in your navigation tabs like</strong></p>

<pre><code>Fragment1, Fragment2,...
</code></pre>

<p>Fragment will be the super class for all your Fragments.</p>

<p>Create xml layouts for each of your fragment and override the onCreateView method of your Fragment classes like : </p>

<pre><code> @Override
 public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {

     // Get the view from respectivelayout.xml

     View view = inflater.inflate(R.layout.respectivelayoput, container, false);

    // Do whatever you want to do like an activity here for all the tabs

    return rootView;
  }
</code></pre>

<p><strong>2.Create an new class which overrides FragmentPagerAdapter for swiping between tabs, something like this</strong> </p>

<pre><code>public class ViewPagerAdapter extends FragmentPagerAdapter {

    // Declare the number of ViewPager pages
    final int PAGE_COUNT = 2;
    Context context;

    public ViewPagerAdapter(FragmentManager fm, Context context) {
        super(fm);
        this.context = context;
    }

    @Override
    public Fragment getItem(int position) {
        switch (position) {
            // Open FragmentTab1.java
            case 0:
                FragmentTab1 fragmenttab1 = new FragmentTab1(context);
                return fragmenttab1;
            // Open FragmentTab2.java
            case 1:
                FragmentTab2 fragmenttab2 = new FragmentTab2(context);
                return fragmenttab2;
           //And so on.., make sure cases must be equal to page count you specified
        }
        return null;
    }

    @Override
    public int getCount() {
        return PAGE_COUNT;
    }

}
</code></pre>

<p><strong>3.Now create a xml layout for your activity only holding a viewpager inside it like (I am using support v4 library for fragment)</strong></p>

<pre><code> &lt;android.support.v4.view.ViewPager
        android:id="@+id/pager"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"&gt;&lt;/android.support.v4.view.ViewPager&gt;
</code></pre>

<p><strong>4.Now here the code snippet of your MainActivity.java(Same in exapmle nothing changed)</strong> </p>

<pre><code>     @Override
     protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Set up the action bar.
        final ActionBar actionBar = getSupportActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);

        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        yourAdaperInstance= new YourFragmentPagerAdapter(getSupportFragmentManager());

        // Set up the ViewPager with the sections adapter.
        mViewPager = (ViewPager) findViewById(R.id.pager);  //created in xml

        mViewPager.setAdapter(mSectionsPagerAdapter);

        // When swiping between different sections, select the corresponding
        // tab. We can also use ActionBar.Tab#select() to do this if we have
        // a reference to the Tab.
        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
            }
        });

        // For each of the sections in the app, add a tab to the action bar.
        for (int i = 0; i &lt; yourAdaperInstance.getCount(); i++) {
            // Create a tab with text corresponding to the page title defined by
            // the adapter. Also specify this Activity object, which implements
            // the TabListener interface, as the callback (listener) for when
            // this tab is selected.
            actionBar.addTab(
                    actionBar.newTab()
                            .setText(mSectionsPagerAdapter.getPageTitle(i))
                            .setTabListener(this));
        }

        // getCount and getPageTitle are defined in your FragmentPagerAdapter, This is the best practice or else you can add tabs and define names everything in Activity also
    }
</code></pre>

<p>You need to Set the TabListener as well but it comes with the example nothing needs to be changed in that.</p>

<p><strong>All these classes(MainActivity, YourFragmentPagerAdapter, Fragment1,Fragment2.. ) are in same Activity class for Studio example but you can make them all separate, I prefer that.</strong></p>
