<p>Fortunately I have found some help from developer site and able to get all available calendars  and show them with dynamic Checkpreferences. </p>

<p>hope my code will help some one in future.</p>

<p>CalendarPreference.java</p>

<pre><code>public class CalendarPreference extends PreferenceActivity{
private static final String CALENDAR_ID = "calendarId";
private static final String[] PROJECTION = new String[] { Calendars._ID,
        Calendars.CALENDAR_DISPLAY_NAME, Calendars.CALENDAR_COLOR };
private Set&lt;String&gt; initialActiveCalendars;

CheckBoxPreference mCheckBoxPreference;
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    addPreferencesFromResource(R.xml.calendaraccounts);
    SharedPreferences prefs = getPreferenceManager().getSharedPreferences();
    initialActiveCalendars = prefs.getStringSet("PREF_ACTIVE_CALENDARS", null);
    populatePreferenceScreen(initialActiveCalendars);


}

private void populatePreferenceScreen(Set&lt;String&gt; activeCalendars) {
    Cursor cursor = createLoadedCursor();
    if (cursor == null) {
        return;
    }
    for (int i = 0; i &lt; cursor.getCount(); i++) {
        cursor.moveToPosition(i);
        CheckBoxPreference checkboxPref = new CheckBoxPreference(this);
        checkboxPref.setTitle(cursor.getString(1));
        checkboxPref.setIcon(createDrawable(cursor.getInt(2)));
        int calendarId = cursor.getInt(0);
        checkboxPref.getExtras().putInt(CALENDAR_ID, calendarId);
        checkboxPref.setChecked(activeCalendars == null
                || activeCalendars.contains(String.valueOf(calendarId)));
        getPreferenceScreen().addPreference(checkboxPref);
    }
}

    @Override
       public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
        return true;
    }


    private Cursor createLoadedCursor() {
    Uri.Builder builder = Calendars.CONTENT_URI.buildUpon();
    ContentResolver contentResolver = getContentResolver();
    return contentResolver.query(builder.build(), PROJECTION, null, null, null);
   }

    @Override
    public void onPause() {
        super.onPause();        
        HashSet&lt;String&gt; selectedCalendars = getSelectedCalenders();  
        if (!selectedCalendars.equals(initialActiveCalendars)) {
            persistSelectedCalendars(selectedCalendars);
            Log.v("Selected Calendars", selectedCalendars.toString());
            NewWidget.updateAllWidgets(this);
        }
    }

    private void persistSelectedCalendars(HashSet&lt;String&gt; prefValues) {
        SharedPreferences prefs = getPreferenceManager().getSharedPreferences();
        Editor editor = prefs.edit();
        editor.putStringSet("PREF_ACTIVE_CALENDARS", prefValues);
        editor.commit();
    }

    private HashSet&lt;String&gt; getSelectedCalenders() {
        PreferenceScreen preferenceScreen = getPreferenceScreen();
        int prefCount = preferenceScreen.getPreferenceCount();
        HashSet&lt;String&gt; prefValues = new HashSet&lt;String&gt;();
        for (int i = 0; i &lt; prefCount; i++) {
            Preference pref = preferenceScreen.getPreference(i);
            if (pref instanceof CheckBoxPreference) {
                CheckBoxPreference checkPref = (CheckBoxPreference) pref;
                if (checkPref.isChecked()) {
                    prefValues.add(String.valueOf(checkPref.getExtras().getInt(CALENDAR_ID)));
                }
            }
        }
        return prefValues;
    }

    private Drawable createDrawable(int color) {
        Drawable drawable = getResources().getDrawable(R.drawable.prefs_calendar_entry);
        drawable.setColorFilter(new LightingColorFilter(0x0, color));
        return drawable;
    }


}
</code></pre>

<p>And here res/xml/calendaraccounts.xml</p>

<pre><code>&lt;PreferenceScreen&gt;

&lt;/PreferenceScreen&gt;
</code></pre>
