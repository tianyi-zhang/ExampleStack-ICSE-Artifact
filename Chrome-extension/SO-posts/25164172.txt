<p>As a prologue, first rule of cryptography : do not do it yourself, use proven tools in their documented use cases to perform the operations.</p>

<p>So I'd first check if you XML document is indeed signed using a standard (I don't know of an XML signature format that is based on PKCS7, but then, I sure don't know everything). If so, I'd find a library that supports this specific format. </p>

<p>XML Signature is standardized along the <code>XMLD Sig</code> umbrella, formalized here : <a href="http://www.w3.org/TR/xmldsig-core/" rel="nofollow">http://www.w3.org/TR/xmldsig-core/</a>. The Oracle JDK ships with a reference implementation (that is derived from an Apache implementation of the standard), using the <code>XMLSignatureFactory</code> base class.</p>

<p>PKCS7 is not used as part of XML DSig, though, so you may have to "do it yourself" (a small enough part of if) in the end, unless there is a protocol that I do not know of.</p>

<p>That said, indeed PKCS7 (superseeded in some cases by CMS) is a standard cryptographic format that allows the signature of arbitrary content. The structure is flexible enough to hold notably : the content to be signed (it can be embedded, or not), the signature and associated algorithm identifiers, plus X509 material linked to the signature (such as Certificates and public keys, certificate revocation lists...).</p>

<p>The Java language does not provide a generic implementation of PKCS7 processing to my knowledge, although the Oracle JDK does under the <code>sun.security.pkcs</code> package. </p>

<p>A popular, common library for PKCS7 processing in Java is BouncyCastle. I'm more familiar with it, so this is what I'll talk about.  </p>

<p>You can find a usage sample here :
<a href="http://i-proving.com/2007/09/21/pkcs7-signatures-using-bouncy-castle/" rel="nofollow">http://i-proving.com/2007/09/21/pkcs7-signatures-using-bouncy-castle/</a></p>

<p>Bouncy Castle has a fairly good example package when you download the source, and also Javadoc. So you can check it out for up-to-date usage of the API. Check for example : 
<a href="https://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cms/CMSSignedData.html" rel="nofollow">https://www.bouncycastle.org/docs/pkixdocs1.5on/org/bouncycastle/cms/CMSSignedData.html</a>, reproduced here for easier reference</p>

<pre><code>CMSSignedData           s = new CMSSignedData(inputStream);
Store                   certStore = s.getCertificates(); // This is where you access embedded certificates
SignerInformationStore  signers = s.getSignerInfos();
Collection              c = signers.getSigners();
Iterator                it = c.iterator();

while (it.hasNext())
{
  SignerInformation   signer = (SignerInformation)it.next();
  Collection          certCollection = certStore.getMatches(signer.getSID());

  Iterator              certIt = certCollection.iterator();
  X509CertificateHolder cert = (X509CertificateHolder)certIt.next();

  if (signer.verify(new JcaSimpleSignerInfoVerifierBuilder().setProvider("BC").build(cert)))
  {
      verified++;
  } 
}
</code></pre>

<p>Remember though, that checking the validity of the signature is one step, the second is to verify that the signing certificates are indeed trustworthy. An example is available here :</p>

<p><a href="http://stackoverflow.com/questions/3166159/verifying-pkcs7-certificates-in-java">Verifying PKCS#7 certificates in Java</a></p>
