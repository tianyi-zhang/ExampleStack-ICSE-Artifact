<p>JXRootPane (of the SwingX project) has it by default, you can do something like</p>

<pre><code>private void installKeyboardActions() {
    Action escAction = new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent evt) {
            JButton cancelButton = getCancelButton();
            if (cancelButton != null) {
                cancelButton.doClick(20);
            }
        }

        /**
         * Overridden to hack around #566-swing: 
         * JXRootPane eats escape keystrokes from datepicker popup.
         * Disable action if there is no cancel button.&lt;p&gt;
         * 
         * That's basically what RootPaneUI does - only not in 
         * the parameterless isEnabled, but in the one that passes
         * in the sender (available in UIAction only). We can't test 
         * nor compare against core behaviour, UIAction has
         * sun package scope. &lt;p&gt;
         * 
         * Cont'd (Issue #1358-swingx: popup menus not closed)
         * The extended hack is inspired by Rob Camick's
         * &lt;a href="http://tips4java.wordpress.com/2010/10/17/escape-key-and-dialog/"&gt; Blog &lt;/a&gt;
         * and consists in checking if the the rootpane has a popup's actionMap "inserted". 
         * NOTE: this does not work if the popup or any of its children is focusOwner.
         */
        @Override
        public boolean isEnabled() {
            Component component = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();
            if (component instanceof JComponent) {
                Action cancelPopup = ((JComponent)component).getActionMap().get("cancel");
                if (cancelPopup != null) return false;
            }
            return (cancelButton != null) &amp;&amp; (cancelButton.isEnabled());
        }
    };
    getActionMap().put("esc-action", escAction);
    InputMap im = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    KeyStroke key = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
    im.put(key, "esc-action");
}


/**
 * Sets the &lt;code&gt;cancelButton&lt;/code&gt; property,
 * which determines the current default cancel button for this &lt;code&gt;JRootPane&lt;/code&gt;.
 * The cancel button is the button which will be activated 
 * when a UI-defined activation event (typically the &lt;b&gt;ESC&lt;/b&gt; key) 
 * occurs in the root pane regardless of whether or not the button 
 * has keyboard focus (unless there is another component within 
 * the root pane which consumes the activation event,
 * such as a &lt;code&gt;JTextPane&lt;/code&gt;).
 * For default activation to work, the button must be an enabled
 * descendant of the root pane when activation occurs.
 * To remove a cancel button from this root pane, set this
 * property to &lt;code&gt;null&lt;/code&gt;.
 *
 * @param cancelButton the &lt;code&gt;JButton&lt;/code&gt; which is to be the cancel button
 * @see #getCancelButton() 
 *
 * @beaninfo
 *  description: The button activated by default for cancel actions in this root pane
 */
public void setCancelButton(JButton cancelButton) { 
    JButton old = this.cancelButton;

    if (old != cancelButton) {
        this.cancelButton = cancelButton;

        if (old != null) {
            old.repaint();
        }
        if (cancelButton != null) {
            cancelButton.repaint();
        } 
    }

    firePropertyChange("cancelButton", old, cancelButton);        
}

/**
 * Returns the value of the &lt;code&gt;cancelButton&lt;/code&gt; property. 
 * @return the &lt;code&gt;JButton&lt;/code&gt; which is currently the default cancel button
 * @see #setCancelButton
 */
public JButton getCancelButton() { 
    return cancelButton;
}
</code></pre>
