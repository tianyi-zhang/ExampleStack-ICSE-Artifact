<p>I've made a small research and check the sources of Android. Actually, the problem is in the default Phone application in the file <code>packages/apps/Phone/src/com/android/phone/PhoneUtils.java</code>. Here is the function:</p>

<pre><code> /**
 * Internally used muting function.
 */
private static void setMuteInternal(Phone phone, boolean muted) {
    final PhoneGlobals app = PhoneGlobals.getInstance();
    Context context = phone.getContext();
    boolean routeToAudioManager =
        context.getResources().getBoolean(R.bool.send_mic_mute_to_AudioManager);
    if (routeToAudioManager) {
        AudioManager audioManager =
            (AudioManager) phone.getContext().getSystemService(Context.AUDIO_SERVICE);
        if (DBG) log("setMuteInternal: using setMicrophoneMute(" + muted + ")...");
        audioManager.setMicrophoneMute(muted);
    } else {
        if (DBG) log("setMuteInternal: using phone.setMute(" + muted + ")...");
        phone.setMute(muted);
    }
    app.notificationMgr.updateMuteNotification();
}
</code></pre>

<p>You can see that if you click on Mute button Phone application checks the parameter <code>R.bool.send_mic_mute_to_AudioManager</code>, which is installed to <code>false</code> (I checked in the sources). Thus, in this case the state is to phone, which is an instance of GSMPhone class. This class communicates with RIL socket and send there appropriate request to setMute (<code>RIL_REQUEST_SET_MUTE</code>). Thus, nowhere on the path of the command the state of AudioManager is updated. Similarly, I do not see that AudioManager notifies to RIL when it change the state of the microphone.</p>

<p>Thus, if you ask AudioManager about the state of microphone it returns the default value (which is false). I do not know if this behavior is expected or is this a bug. You can ask question in the android-platform group and make a link to this question and bug.  </p>
