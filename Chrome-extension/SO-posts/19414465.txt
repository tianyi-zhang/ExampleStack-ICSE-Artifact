<p>Approach 2 is not very optimised, what you should really do is create a <code>Map&lt;Character,Integer&gt;</code> then you don't the second loop to count but you need to then loop each character in each String.</p>

<p>Approach 1, depending on your implementation also only counts for each character occurring in the String, does it consider if the character occurs twice, eg <code>"hash"</code>?</p>

<p>Either approach needs to compare <strong>EACH</strong> character in <strong>EACH</strong> String and then count</p>

<p>This is how approach 2 should be</p>

<pre><code>public static int findFreq(String[] arr,char c) {
    Map&lt;Character,Integer&gt; map  = new HashMap&lt;Character,Integer&gt;();
    for(int i=0;i&lt;arr.length;i++) {
        for(Character ch : arr[i].toCharArray()){
            if(map.containsKey(ch)) 
                map.put(ch,map.get(ch)+1);
            else
                map.put(ch, 1);
        }
    }
    return map.get(Character.valueOf(c));
 }
</code></pre>

<p>Either way both approaches will be O(n), from the <a href="http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html" rel="nofollow">docs for HashMap</a></p>

<blockquote>
  <p>This implementation provides constant-time performance for the basic operations (get and put)</p>
</blockquote>

<p>But that said even with the approach I provided above this requires additional <code>get</code> when populating the map.</p>

<p>So Approach 1 is better if using for a single search, if using repeatedly then approach 2 is the way to go (but populate the map outside the method)</p>

<p>Some metrics for you: </p>

<pre class="lang-none prettyprint-override"><code>Number of Words  |    Array (approach 1)   |   Map (My approach 2)  |  Map (your approach 2)
                 |       (time in ms)      |     (time in ms)       |      (time in ms) 
                 |     (groovy)/(java)     |     (groovy)/(java)    |     (groovy)/(java)     
-------------------------------------------------------------------------------------------
      43303      |         118 /  5        |         229 / 34       |             / 16     
     417221      |         852 / 10        |        1088 / 120      |             / 49
    2086705      |        2929 / 45        |        5064 / 731      |             / 219
</code></pre>

<p>I retract my method, it appears your Map approach is faster! </p>

<p>This was my array method (in case yours differs)</p>

<pre><code>private static int findFreqArray(String[] arr, char c){
    int count = 0;
    for(int i=0;i&lt;arr.length;i++) {
        for(char ch : arr[i].toCharArray()){
            if(ch == c)
                count++;
        }
    }
    return count;  
}
</code></pre>
