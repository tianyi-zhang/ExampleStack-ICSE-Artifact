<p>I think something like this is a lot more readable:</p>

<pre><code>static int[][] transform(int[] arr, int N) {
    int M = (arr.length + N - 1) / N;
    int[][] mat = new int[M][];
    int start = 0;
    for (int r = 0; r &lt; M; r++) {
        int L = Math.min(N, arr.length - start);
        mat[r] = java.util.Arrays.copyOfRange(arr, start, start + L);
        start += L;
    }
    return mat;
}
</code></pre>

<p>Your resulting matrix will be <code>MxN</code>, with the last row possibly having less. It uses <a href="http://java.sun.com/javase/6/docs/api/java/util/Arrays.html#copyOfRange%28int%5B%5D,%20int,%20int%29" rel="nofollow"><code>Arrays.copyOfRange</code></a> instead of manually allocating and copying rows, and some math to figure out <code>M</code> (how many rows will this matrix have?), and <code>L</code> (how many elements will be on this row?)</p>

<pre><code>    System.out.println(Arrays.deepToString(
        transform(new int[] {1,2,3,4,5,6}, 4)
    )); // prints "[[1, 2, 3, 4], [5, 6]]"
</code></pre>
