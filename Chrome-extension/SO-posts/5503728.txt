<p>Somehow, the <code>javax.swing.RepaintManager</code> class can help with the tool-tip repaint issue. The class that extends the <code>RepaintManager</code> below is taken from the example in <strong>Chapter 11, Repaint Manager</strong>: <a href="http://www.java.net/external?url=http://www.curious-creature.org/2007/07/22/repaint-manager-demos-chapter-11/" rel="nofollow">http://www.java.net/external?url=http://www.curious-creature.org/2007/07/22/repaint-manager-demos-chapter-11/</a></p>

<p>It is modified to repaint <code>JTooltipFlickerTest</code>'s contentpane...</p>

<p>Try to comment out <code>installRepaintManager()</code> call in the constructor and you will see the difference...</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.RepaintManager;
import javax.swing.SwingUtilities;

public class JTooltipFlickerTest extends JFrame {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    JPanel panel;

    static public void main (final String[] args) {
        new JTooltipFlickerTest ();
    }


    public JTooltipFlickerTest () {
        super ();
        panel = new JPanel ();          

        setTitle (this.getClass().toString());
        setSize (1024, 768);

        this.getContentPane().setLayout (new BorderLayout());

        SwingUtilities.invokeLater (
                new Runnable () {

                    @Override
                    public void run() {

                        final MouseAdapter ma = new MouseAdapter () {

                            public void mouseMoved (final MouseEvent e) { 
                                panel.setToolTipText ("x: "+e.getX()+", y: "+e.getY());
                            }
                        };  
                        panel.addMouseMotionListener(ma);

                        panel.setDoubleBuffered(true);
                        panel.createToolTip().setDoubleBuffered(true);

                        JTooltipFlickerTest.this.getContentPane().add (panel, "Center");                
                        JTooltipFlickerTest.this.setVisible (true);
                    }
                }
        );

        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        installRepaintManager();

    }

    private void installRepaintManager() {
        ReflectionRepaintManager manager = new ReflectionRepaintManager();
        RepaintManager.setCurrentManager(manager);
    }

    private class ReflectionRepaintManager extends RepaintManager {
        public void addDirtyRegion(JComponent c, int x, int y, int w, int h) {

            int lastDeltaX = c.getX();
            int lastDeltaY = c.getY();

            Container parent = c.getParent();
            while (parent instanceof JComponent) {
                if (!parent.isVisible()) {
                    return;
                }

                if (parent instanceof JTooltipFlickerTest) {
                    x += lastDeltaX;
                    y += lastDeltaY;

                    int gap = getContentPane().getHeight() - h - y;
                    h += 2 * gap + h;

                    lastDeltaX = lastDeltaY = 0;

                    c = (JComponent) parent;
                }

                lastDeltaX += parent.getX();
                lastDeltaY += parent.getY();

                parent = parent.getParent();
            }

            super.addDirtyRegion(c, x, y, w, h);
        }
    }
}
</code></pre>

<p><strong>edited</strong></p>

<p>When <code>installRepaintManager()</code> is disabled, the whole tooltip flickers on both sides of the the edge boundary (it is the same effect as in OP's original code). </p>

<p>When <code>installRepaintManager()</code> is enabled, one part of the tooltip area doesn't flicker inside of the edge boundary. In contrast, the other part of it flickers outside of the edge boundary. But, the flicker is not so bad compared to when <code>installRepaintManager()</code> is disabled.</p>

<p>I know, it is a subtle difference which I guess it leaves nothing to be desired of. At least, the words in the tooltip area are a little bit legible when <code>installRepaintManager()</code> is enabled.</p>

<p>Even when the double-buffered codes are disabled, <code>installRepaintManager()</code> works as expected; that is, the heavyweight component is rapidly repainted to reduce the flicker.</p>

<pre><code>//panel.setDoubleBuffered(true);
//panel.createToolTip().setDoubleBuffered(true);
</code></pre>
