<p>Yes...what you have to do is to rotate the mActionIcon in FloatingActionButtonClass . See below.</p>

<pre><code>   public void applyRotation(float start, float end, final int imgRes) {
    final float centerX = getWidth() / 2.0f;
    final float centerY = getHeight() / 2.0f;

    // The animation listener is used to trigger the next animation
    final Rotate3dAnimation rotation = new Rotate3dAnimation(start, end,
            centerX, centerY, 0, true);
    rotation.setDuration(100);
    rotation.setFillAfter(true);
    rotation.setInterpolator(new AccelerateInterpolator());

    rotation.setAnimationListener(new AnimationListener() {

        @Override
        public void onAnimationStart(Animation animation) {

        }

        @Override
        public void onAnimationRepeat(Animation animation) {

        }

        @Override
        public void onAnimationEnd(Animation animation) {
            mActionIcon = getResources().getDrawable(imgRes);
            mActionIcon.setBounds(0, 0, mActionSize, mActionSize);
            // invalidate();
            rotateSecondImage(-45, 0);
        }

    });

    startAnimation(rotation);

}


private void rotateSecondImage(float start, float end) {
    final float centerX = getWidth() / 2.0f;
    final float centerY = getHeight() / 2.0f;

    // The animation listener is used to trigger the next animation
    final Rotate3dAnimation rotation = new Rotate3dAnimation(start, end,
            centerX, centerY, 0, true);
    rotation.setDuration(100);
    rotation.setFillAfter(true);
    rotation.setInterpolator(new DecelerateInterpolator());
    startAnimation(rotation);
}


public class Rotate3dAnimation extends Animation {
private final float mFromDegrees;
private final float mToDegrees;
private final float mCenterX;
private final float mCenterY;
private final float mDepthZ;
private final boolean mReverse;
private Camera mCamera;

public Rotate3dAnimation(float fromDegrees, float toDegrees, float centerX,
        float centerY, float depthZ, boolean reverse) {
    mFromDegrees = fromDegrees;
    mToDegrees = toDegrees;
    mCenterX = centerX;
    mCenterY = centerY;
    mDepthZ = depthZ;
    mReverse = reverse;
}

@Override
public void initialize(int width, int height, int parentWidth,
        int parentHeight) {
    super.initialize(width, height, parentWidth, parentHeight);
    mCamera = new Camera();
}

@Override
protected void applyTransformation(float interpolatedTime, Transformation t) {
    final float fromDegrees = mFromDegrees;
    float degrees = fromDegrees
            + ((mToDegrees - fromDegrees) * interpolatedTime);

    final float centerX = mCenterX;
    final float centerY = mCenterY;
    final Camera camera = mCamera;

    final Matrix matrix = t.getMatrix();

    camera.save();
    if (mReverse) {
        camera.translate(0.0f, 0.0f, mDepthZ * interpolatedTime);
    } else {
        camera.translate(0.0f, 0.0f, mDepthZ * (1.0f - interpolatedTime));
    }
    camera.rotateZ(degrees);
    camera.getMatrix(matrix);
    camera.restore();

    matrix.preTranslate(-centerX, -centerY);
    matrix.postTranslate(centerX, centerY);
}
</code></pre>

<p>}</p>
