<p>You can use Spring Data .
Sharing example <a href="http://i.stack.imgur.com/pwdtc.jpg" rel="nofollow">enter image description here</a>as below -</p>

<p><strong>pom.xml</strong></p>

<pre><code>&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;WebserviceSpringDataGemFire&lt;/groupId&gt;
  &lt;artifactId&gt;WebserviceSpringDataGemFire&lt;/artifactId&gt;
  &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;name&gt;WebserviceSpringDataGemFire&lt;/name&gt;
 &lt;properties&gt;
        &lt;spring.version&gt;4.1.7.RELEASE&lt;/spring.version&gt;
        &lt;jackson.version&gt;1.9.10&lt;/jackson.version&gt;
        &lt;jdk.version&gt;1.7&lt;/jdk.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;

        &lt;!-- Spring 3 dependencies --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;   

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;   

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;   

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;
            &lt;version&gt;${spring.version}&lt;/version&gt;
        &lt;/dependency&gt;       
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
            &lt;artifactId&gt;spring-data-commons&lt;/artifactId&gt;
            &lt;version&gt;1.5.0.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
            &lt;artifactId&gt;spring-data-commons-core&lt;/artifactId&gt;
            &lt;version&gt;1.0.0.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;
            &lt;artifactId&gt;spring-data-gemfire&lt;/artifactId&gt;
            &lt;version&gt;1.2.0.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;dependency&gt;
          &lt;groupId&gt;com.gemstone.gemfire&lt;/groupId&gt;
          &lt;artifactId&gt;gemfire&lt;/artifactId&gt;
          &lt;version&gt;8.0.0&lt;/version&gt;
       &lt;/dependency&gt;    

        &lt;dependency&gt;
            &lt;!-- Required for Log4J XML configuration files --&gt;
            &lt;groupId&gt;log4j&lt;/groupId&gt;
            &lt;artifactId&gt;apache-log4j-extras&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;log4j&lt;/groupId&gt;
            &lt;artifactId&gt;log4j&lt;/artifactId&gt;
            &lt;version&gt;1.2.15&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;
            &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;
            &lt;version&gt;1.7.0&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;commons-lang&lt;/groupId&gt;
            &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;
            &lt;version&gt;2.3&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;commons-chain&lt;/groupId&gt;
            &lt;artifactId&gt;commons-chain&lt;/artifactId&gt;
            &lt;version&gt;1.2&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;commons-collections&lt;/groupId&gt;
            &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;
            &lt;version&gt;3.2.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;cglib&lt;/groupId&gt;
            &lt;artifactId&gt;cglib-nodep&lt;/artifactId&gt;
            &lt;version&gt;2.2&lt;/version&gt;
        &lt;/dependency&gt;

        &lt;!-- Jackson JSON Mapper --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;
            &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;
            &lt;version&gt;${jackson.version}&lt;/version&gt;
        &lt;/dependency&gt; 
    &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;sourceDirectory&gt;src&lt;/sourceDirectory&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;source&gt;${jdk.version}&lt;/source&gt;
          &lt;target&gt;${jdk.version}&lt;/target&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;version&gt;2.3&lt;/version&gt;
        &lt;configuration&gt;
          &lt;warSourceDirectory&gt;WebContent&lt;/warSourceDirectory&gt;
          &lt;failOnMissingWebXml&gt;false&lt;/failOnMissingWebXml&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>

<p><strong>web.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0"&gt;
  &lt;display-name&gt;WebserviceSpringDataGemFire&lt;/display-name&gt;
  &lt;welcome-file-list&gt;
    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;
    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;
    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
    &lt;welcome-file&gt;default.html&lt;/welcome-file&gt;
    &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;
    &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;
  &lt;/welcome-file-list&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;

    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt;
        &lt;url-pattern&gt;/rest/*&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;

    &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;/WEB-INF/mvc-dispatcher-servlet.xml&lt;/param-value&gt;
    &lt;/context-param&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;
&lt;/web-app&gt;
</code></pre>

<p><strong>mvc-dispatcher-servlet.xml</strong></p>

<pre><code>&lt;beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd"&gt;

    &lt;mvc:annotation-driven /&gt;
    &lt;context:annotation-config /&gt;
    &lt;context:component-scan base-package="spring.gemfire.repository.deptemp"/&gt;

&lt;/beans&gt;
</code></pre>

<p><strong>gemfirebean1.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;  
&lt;beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   xmlns:context="http://www.springframework.org/schema/context"
    xmlns:gfe="http://www.springframework.org/schema/gemfire"  
    xmlns:gfe-data="http://www.springframework.org/schema/data/gemfire"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.1.xsd 
        http://www.springframework.org/schema/gemfire 
        http://www.springframework.org/schema/gemfire/spring-gemfire-1.2.xsd  
        http://www.springframework.org/schema/data/gemfire 
        http://www.springframework.org/schema/data/gemfire/spring-data-gemfire-1.2.xsd"&gt;

    &lt;context:component-scan base-package="spring.gemfire.repository.deptemp"/&gt;

    &lt;gfe:client-cache id="client-cache" cache-xml-location="classpath:gemfire-client.xml" pool-name="gfPool"/&gt;

    &lt;gfe:pool id="gfPool" max-connections="10"&gt;  
        &lt;gfe:locator host="localhost" port="10334"/&gt;        
    &lt;/gfe:pool&gt;   



    &lt;gfe:lookup-region id="departments" name="departments" cache-ref="client-cache"/&gt;  
    &lt;gfe:lookup-region id="employees" name="employees" cache-ref="client-cache"/&gt;  
    &lt;gfe-data:repositories base-package="spring.gemfire.repository.deptemp.repos"  /&gt;  

&lt;/beans&gt; 
</code></pre>

<p><strong>gemfire-client.xml</strong></p>

<pre><code>&lt;!DOCTYPE client-cache PUBLIC
    "-//GemStone Systems, Inc.//GemFire Declarative Caching 6.5//EN"
    "http://www.gemstone.com/dtd/cache6_5.dtd"&gt;
&lt;client-cache&gt;      
    &lt;!-- No cache storage in the client region because of the PROXY client region shortcut setting. --&gt;  
&lt;!--    &lt;pool name="cacheServerPool"&gt;
        &lt;locator host="GCOTDVMR770036.nam.nsroot.net" port="10334" /&gt;
    &lt;/pool&gt; --&gt;
    &lt;region name="departments" refid="PROXY"&gt;  
    &lt;!--   &lt;region-attributes refid="PROXY" pool-name="gfPool" data-policy="replicate"/&gt; --&gt;  
      &lt;region-attributes refid="PROXY" data-policy="replicate"/&gt;
    &lt;/region&gt;     

    &lt;region name="employees" refid="PROXY"&gt;
      &lt;!--   &lt;region-attributes refid="PROXY" pool-name="gfPool" data-policy="replicate"/&gt;   --&gt;
      &lt;region-attributes refid="PROXY" data-policy="replicate"/&gt;
    &lt;/region&gt;  
&lt;/client-cache&gt;  
</code></pre>

<p><strong>Department.java</strong></p>

<pre><code>package spring.gemfire.repository.deptemp.beans;

import java.io.Serializable;
import java.util.Properties;
import org.springframework.data.annotation.Id;
import org.springframework.data.gemfire.mapping.Region;
import com.gemstone.gemfire.cache.Declarable;

@Region("departments")
public class Department implements Declarable, Serializable {
    private static final long   serialVersionUID    = -9097335119586059309L;
    @Id
    private int                 deptno;
    private String              name;

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) { return true; }
        if (obj == null) { return false; }
        if (getClass() != obj.getClass()) { return false; }
        final Department other = (Department) obj;
        if (deptno != other.deptno) { return false; }
        if (name == null) {
            if (other.name != null) { return false; }
        } else if (!name.equals(other.name)) { return false; }
        return true;
    }

    public int getDeptno() {
        return deptno;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + deptno;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    public void init(final Properties props) {
        // TODO Auto-generated method stub
        deptno = Integer.parseInt(props.getProperty("deptno"));
        name = props.getProperty("name");
    }

    public void setDeptno(final int deptno) {
        this.deptno = deptno;
    }

    public void setName(final String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Department [deptno=" + deptno + ", name=" + name + "]";
    }
}
</code></pre>

<p><strong>Employee.java</strong></p>

<pre><code>package spring.gemfire.repository.deptemp.beans;

import java.io.Serializable;
import java.util.Properties;
import org.springframework.data.annotation.Id;
import org.springframework.data.gemfire.mapping.Region;
import com.gemstone.gemfire.cache.Declarable;

@Region("employees")
public class Employee implements Declarable, Serializable {
    private static final long   serialVersionUID    = -8229531542107983344L;
    @Id
    private int                 empno;
    private String              name;
    private String              job;
    private int                 deptno;

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) { return true; }
        if (obj == null) { return false; }
        if (getClass() != obj.getClass()) { return false; }
        final Employee other = (Employee) obj;
        if (deptno != other.deptno) { return false; }
        if (empno != other.empno) { return false; }
        if (job == null) {
            if (other.job != null) { return false; }
        } else if (!job.equals(other.job)) { return false; }
        if (name == null) {
            if (other.name != null) { return false; }
        } else if (!name.equals(other.name)) { return false; }
        return true;
    }

    public int getDeptno() {
        return deptno;
    }

    public int getEmpno() {
        return empno;
    }

    public String getJob() {
        return job;
    }

    public String getName() {
        return name;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + deptno;
        result = prime * result + empno;
        result = prime * result + ((job == null) ? 0 : job.hashCode());
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        return result;
    }

    public void init(final Properties props) {
        // TODO Auto-generated method stub
        empno = Integer.parseInt(props.getProperty("empno"));
        name = props.getProperty("name");
        job = props.getProperty("job");
        deptno = Integer.parseInt(props.getProperty("deptno"));
    }

    public void setDeptno(final int deptno) {
        this.deptno = deptno;
    }

    public void setEmpno(final int empno) {
        this.empno = empno;
    }

    public void setJob(final String job) {
        this.job = job;
    }

    public void setName(final String name) {
        this.name = name;
    }

    @Override
    public String toString() {
        return "Employee [empno=" + empno + ", name=" + name + ", job=" + job + ", deptno=" + deptno + "]";
    }
}
</code></pre>

<p><strong>DeptRepository.java</strong></p>

<pre><code>package spring.gemfire.repository.deptemp.repos;

import java.util.Collection;

import org.springframework.data.gemfire.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import spring.gemfire.repository.deptemp.beans.Department;

//@Repository(DeptRepository.BEAN_ID)
public interface DeptRepository extends CrudRepository&lt;Department, Integer&gt; {
      String BEAN_ID="deptRepository";

    Department findByName(String name);

    @Query("SELECT * FROM /departments")
    Collection&lt;Department&gt; myFindAll();
}
</code></pre>

<p><strong>EmpRepository.java</strong></p>

<pre><code>package spring.gemfire.repository.deptemp.repos;

import java.util.Collection;

import org.springframework.data.gemfire.repository.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import spring.gemfire.repository.deptemp.beans.Employee;

//@Repository(DeptRepository.BEAN_ID)
public interface EmpRepository extends CrudRepository&lt;Employee, Integer&gt; {
    String BEAN_ID="empRepository";

    @Query("SELECT * FROM /employees where deptno = $1")
    Collection&lt;Employee&gt; empsInDeptno(int deptno);

    @Query("SELECT * FROM /employees")
    Collection&lt;Employee&gt; myFindAll();
}
</code></pre>

<p><strong>SpringFactoryConfig.java</strong></p>

<pre><code>package spring.gemfire.repository.deptemp.util;

import org.springframework.beans.factory.BeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public final class SpringFactoryConfig {
    private static String               DEFAULT_CONFIG_FILE = "gemfirebean1.xml";
    private static SpringFactoryConfig  INSTANCE;

    public static final BeanFactory getDefaultSpringBeanFactory() {
        if (INSTANCE == null) {
            INSTANCE = new SpringFactoryConfig(DEFAULT_CONFIG_FILE);
        }
        return INSTANCE.getBeanFactory();
    }

    public static SpringFactoryConfig getSpringFactoryConfig(final String configFile) {
        return new SpringFactoryConfig(configFile);
    }

    private final ApplicationContext    springAppContext;

    private SpringFactoryConfig(final String configFile) {
        springAppContext = new ClassPathXmlApplicationContext("classpath:" + configFile);
        if (springAppContext == null) { throw new IllegalStateException("Cannot get an instance of the Spring bean factory !"); }
    }

    public final &lt;T&gt; T getBean(final String name, final Class&lt;T&gt; beanType) {
        if (springAppContext.isTypeMatch(name, beanType)) {
            return beanType.cast(springAppContext.getBean(name));
        } else {
            throw new IllegalArgumentException("Bean " + name + " is not of appropriate type " + beanType);
        }
    }

    public final BeanFactory getBeanFactory() {
        return springAppContext;
    }
}
</code></pre>

<p><strong>Test.java</strong></p>

<pre><code>package spring.gemfire.repository.test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import spring.gemfire.repository.deptemp.beans.Department;
import spring.gemfire.repository.deptemp.beans.Employee;
import spring.gemfire.repository.deptemp.repos.DeptRepository;
import spring.gemfire.repository.deptemp.repos.EmpRepository;

public class Test {
    public static void main(final String[] args) {
        // TODO Auto-generated method stub
        final Test t = new Test();
        // t.deleteData();
        // t.saveData();
        t.getData();
        System.out.println("all done..");
    }

    private ConfigurableApplicationContext  ctx = null;

    public Test() {
        ctx = new ClassPathXmlApplicationContext("mvc-dispatcher-servlet.xml");
    }

    public void deleteData() {
        final DeptRepository deptRepos = ctx.getBean(DeptRepository.class);
        // get quick size
        System.out.println("** Size of dept repository **");
        System.out.println("Size = " + deptRepos.count());
        // deptRepos.deleteAll();
        final Collection&lt;Department&gt; deps = deptRepos.myFindAll();
        deptRepos.delete(deps);
        for (final Department d : deps) {
            System.out.println(d.toString());
            // deptRepos.delete(d);
        }
        System.out.println("** dept repository deleted All**");
        final EmpRepository empRepos = ctx.getBean(EmpRepository.class);
        // get quick size
        System.out.println("** Size of emp repository **");
        System.out.println("Size = " + empRepos.count());
        // empRepos.deleteAll();
        final Collection&lt;Employee&gt; emps = empRepos.myFindAll();
        empRepos.delete(emps);
        for (final Employee e : emps) {
            System.out.println(e.toString());
            // empRepos.delete(e);
        }
        System.out.println("** empRepos repository deleted All**");
    }

    public void getData() {
        final DeptRepository deptRepos = ctx.getBean(DeptRepository.class);
        // get quick size
        System.out.println("** Size of dept repository **");
        System.out.println("Size = " + deptRepos.count());
        // call findOne crud method by key
        System.out.println("** calling  deptRepos.findOne(\"2\") **");
        final Department dept = deptRepos.findOne(5);
        System.out.println(dept);
        // call findOne crud method for an attribute
        System.out.println("** calling  deptRepos.findByName(\"B\") **");
        final Department dept2 = deptRepos.findByName("B");
        System.out.println(dept2);
        // call my own findAll
        final Collection&lt;Department&gt; deps = deptRepos.myFindAll();
        System.out.println("\n** All Departments using -&gt; deptRepos.myFindAll()");
        System.out.println("Defined as : @Query(\"SELECT * FROM /departments\") ");
        System.out.println("Collection&lt;Department&gt; myFindAll(); ** ");
        for (final Department d : deps) {
            System.out.println(d.toString());
        }
        final EmpRepository empRepos = ctx.getBean(EmpRepository.class);
        // get quick size
        System.out.println("** Size of emp repository **");
        System.out.println("Size = " + empRepos.count());
        final Employee empt = empRepos.findOne(2);
        System.out.println(empt);
        final Collection&lt;Employee&gt; emps = empRepos.empsInDeptno(2);
        System.out.println("\n ** All Employees in dept 2 using -&gt; Collection&lt;Employee&gt; empsInDeptno(int deptno) **");
        for (final Employee e : emps) {
            System.out.println(e.toString());
        }
    }

    public void saveData() {
        final DeptRepository deptRepos = ctx.getBean(DeptRepository.class);
        // get quick size
        System.out.println("** Size of dept repository **");
        System.out.println("Size = " + deptRepos.count());
        final Department d1 = new Department();
        d1.setDeptno(1);
        d1.setName("A");
        final Department d2 = new Department();
        d2.setDeptno(2);
        d2.setName("B");
        final Department d3 = new Department();
        d3.setDeptno(5);
        d3.setName("C");
        final List&lt;Department&gt; dList = new ArrayList&lt;Department&gt;();
        dList.add(d1);
        dList.add(d2);
        dList.add(d3);
        System.out.println("** calling  deptRepos.save() **");
        final Iterable&lt;Department&gt; deptCollection = deptRepos.save(dList);
        for (final Department d : deptCollection) {
            System.out.println("** saved department **" + d);
        }
        final EmpRepository empRepos = ctx.getBean(EmpRepository.class);
        // get quick size
        System.out.println("** Size of emp repository **");
        System.out.println("Size = " + empRepos.count());
        final Employee e1 = new Employee();
        e1.setEmpno(1);
        e1.setName("X");
        e1.setDeptno(1);
        e1.setJob("J1");
        final Employee e2 = new Employee();
        e2.setEmpno(2);
        e2.setName("Y");
        e2.setDeptno(2);
        e2.setJob("J2");
        final Employee e3 = new Employee();
        e3.setEmpno(3);
        e3.setName("Y");
        e3.setDeptno(5);
        e3.setJob("J5");
        final List&lt;Employee&gt; eList = new ArrayList&lt;Employee&gt;();
        eList.add(e1);
        eList.add(e2);
        eList.add(e3);
        System.out.println("** calling  empRepos.save() **");
        final Iterable&lt;Employee&gt; empCollection = empRepos.save(eList);
        for (final Employee e : empCollection) {
            System.out.println("** saved employee **" + e);
        }
    }
}
</code></pre>

<p><strong>GemFireJSONController.java</strong></p>

<pre><code>package spring.gemfire.repository.deptemp.controller;


import java.util.Collection;





import javax.annotation.PostConstruct;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;


import spring.gemfire.repository.deptemp.beans.Department;
import spring.gemfire.repository.deptemp.beans.Employee;
import spring.gemfire.repository.deptemp.repos.DeptRepository;
import spring.gemfire.repository.deptemp.repos.EmpRepository;
import spring.gemfire.repository.deptemp.util.SpringFactoryConfig;


@Controller
@RequestMapping("/gemfire")
public class GemFireJSONController {


     @RequestMapping(value ="/create/employee", method = RequestMethod.POST,headers="Accept=application/json")
        public   ResponseEntity&lt;?&gt;  createEmployee(@RequestBody Employee emp) {
            System.out.println("Start createEmployee.");

            getEmpRepository().save(emp);

              return new ResponseEntity&lt;&gt;(emp, HttpStatus.CREATED);
        }

     @RequestMapping(value ="/create/department", method = RequestMethod.POST,headers="Accept=application/json")
        public   ResponseEntity&lt;?&gt;  createDepartment(@RequestBody Department dept) {
            System.out.println("Start createEmployee.");
            getDeptRepository().save(dept);
              return new ResponseEntity&lt;&gt;(dept, HttpStatus.CREATED);
        }

      @RequestMapping(value = "/employee/all", method = RequestMethod.GET,headers="Accept=application/json")
        public @ResponseBody Collection&lt;Employee&gt; getAllEmployees() {
          System.out.println("Start getAllEmployeess.");      


            return getEmpRepository().myFindAll();
        }

      @RequestMapping(value = "/department/all", method = RequestMethod.GET,headers="Accept=application/json")
        public @ResponseBody Collection&lt;Department&gt; getAllDepartments() {
          System.out.println("Start getAllDepartments.");          

            return getDeptRepository().myFindAll();
        }

      private DeptRepository getDeptRepository(){
             return SpringFactoryConfig.getDefaultSpringBeanFactory().getBean(DeptRepository.BEAN_ID,
                     DeptRepository.class);
      }

      private EmpRepository getEmpRepository(){
             return SpringFactoryConfig.getDefaultSpringBeanFactory().getBean(EmpRepository.BEAN_ID,
                     EmpRepository.class);
      }


}
</code></pre>
