<p>I can now successfully retrieve the version of an APK file from its binary XML data.</p>

<p>This topic is where I got the key to my answer (I also added my version of Ribo's code):
<a href="http://stackoverflow.com/questions/2097813/how-to-parse-the-androidmanifest-xml-file-inside-an-apk-package/14814245#14814245">How to parse the AndroidManifest.xml file inside an .apk package</a></p>

<p>Additionally, here's the XML parsing code I wrote, specifically to fetch the version:</p>

<p>XML Parsing</p>

<pre><code>/**
 * Verifies at Conductor APK path if package version if newer 
 * 
 * @return True if package found is newer, false otherwise
 */
public static boolean checkIsNewVersion(String conductorApkPath) {

    boolean newVersionExists = false;

    // Decompress found APK's Manifest XML
    // Source: http://stackoverflow.com/questions/2097813/how-to-parse-the-androidmanifest-xml-file-inside-an-apk-package/4761689#4761689
    try {

        if ((new File(conductorApkPath).exists())) {

            JarFile jf = new JarFile(conductorApkPath);
            InputStream is = jf.getInputStream(jf.getEntry("AndroidManifest.xml"));
            byte[] xml = new byte[is.available()];
            int br = is.read(xml);

            //Tree tr = TrunkFactory.newTree();
            String xmlResult = SystemPackageTools.decompressXML(xml);
            //prt("XML\n"+tr.list());

            if (!xmlResult.isEmpty()) {

                InputStream in = new ByteArrayInputStream(xmlResult.getBytes());

                // Source: http://developer.android.com/training/basics/network-ops/xml.html
                XmlPullParser parser = Xml.newPullParser();
                parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);

                parser.setInput(in, null);
                parser.nextTag();

                String name = parser.getName();
                if (name.equalsIgnoreCase("Manifest")) {

                    String pakVersion = parser.getAttributeValue(null, "versionName");
                            //NOTE: This is specific to my project. Replace with whatever is relevant on your side to fetch your project's version
                    String curVersion = SharedData.getPlayerVersion();

                    int isNewer = SystemPackageTools.compareVersions(pakVersion, curVersion); 

                    newVersionExists = (isNewer == 1); 
                }

            }
        }

    } catch (Exception ex) {
        android.util.Log.e(TAG, "getIntents, ex: "+ex);
        ex.printStackTrace();
    }

    return newVersionExists;
}
</code></pre>

<p>Version Comparison (seen as SystemPackageTools.compareVersions in previous snippet)
NOTE: This code is inspired from the following topic:  <a href="http://stackoverflow.com/questions/6701948/efficient-way-to-compare-version-strings-in-java">Efficient way to compare version strings in Java</a></p>

<pre><code>/**
 * Compare 2 version strings and tell if the first is higher, equal or lower
 * Source: http://stackoverflow.com/questions/6701948/efficient-way-to-compare-version-strings-in-java
 * 
 * @param ver1 Reference version
 * @param ver2 Comparison version
 * 
 * @return 1 if ver1 is higher, 0 if equal, -1 if ver1 is lower
 */
public static final int compareVersions(String ver1, String ver2) {

    String[] vals1 = ver1.split("\\.");
    String[] vals2 = ver2.split("\\.");
    int i=0;
    while(i&lt;vals1.length&amp;&amp;i&lt;vals2.length&amp;&amp;vals1[i].equals(vals2[i])) {
      i++;
    }

    if (i&lt;vals1.length&amp;&amp;i&lt;vals2.length) {
        int diff = Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));
        return diff&lt;0?-1:diff==0?0:1;
    }

    return vals1.length&lt;vals2.length?-1:vals1.length==vals2.length?0:1;
}
</code></pre>

<p>I hope this helps.</p>
