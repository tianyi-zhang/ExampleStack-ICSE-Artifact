<p>You can try my following sample code. I have posted my full project to <a href="https://github.com/ngocchung/ThreeLevelExpListView">GitHub</a></p>

<p>Of course, you should modify more to meet all your requirements. For basic case, I only use the data source in the <code>arrays.xml</code> file. Hope this helps!</p>

<p><strong>arrays.xml:</strong></p>

<pre><code>&lt;resources&gt;
    &lt;string-array name="items_array_expandable_level_one"&gt;
        &lt;item&gt;Level 1.1&lt;/item&gt;
        &lt;item&gt;Level 1.2&lt;/item&gt;
        &lt;item&gt;Level 1.3&lt;/item&gt;
    &lt;/string-array&gt;
    &lt;string-array name="items_array_expandable_level_one_one_child"&gt;
        &lt;item&gt;Level 1.1.1&lt;/item&gt;
        &lt;item&gt;Level 1.1.2&lt;/item&gt;
    &lt;/string-array&gt;
    &lt;string-array name="items_array_expandable_level_one_two_child"&gt;
        &lt;item&gt;Level 1.2.1&lt;/item&gt;
    &lt;/string-array&gt;
    &lt;string-array name="items_array_expandable_other_child"&gt;
        &lt;item&gt;Second Level 01&lt;/item&gt;
        &lt;item&gt;Second Level 02&lt;/item&gt;
        &lt;item&gt;Second Level 03&lt;/item&gt;
    &lt;/string-array&gt;
    &lt;string-array name="items_array_expandable_level_three"&gt;
        &lt;item&gt;Child Level 01&lt;/item&gt;
        &lt;item&gt;Child Level 02&lt;/item&gt;
    &lt;/string-array&gt;
&lt;/resources&gt;
</code></pre>

<p><strong>CustomExpListView.java:</strong></p>

<pre><code>public class CustomExpListView extends ExpandableListView
{
    public CustomExpListView(Context context)
    {
        super(context);
    }
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
    {
        widthMeasureSpec = MeasureSpec.makeMeasureSpec(960, MeasureSpec.AT_MOST);
        heightMeasureSpec = MeasureSpec.makeMeasureSpec(600, MeasureSpec.AT_MOST);
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }
}
</code></pre>

<p><strong>ParentLevelAdapter.java:</strong></p>

<pre><code>public class ParentLevelAdapter extends BaseExpandableListAdapter {
    private final Context mContext;
    private final List&lt;String&gt; mListDataHeader;
    private final Map&lt;String, List&lt;String&gt;&gt; mListData_SecondLevel_Map;
    private final Map&lt;String, List&lt;String&gt;&gt; mListData_ThirdLevel_Map;
    public ParentLevelAdapter(Context mContext, List&lt;String&gt; mListDataHeader) {
        this.mContext = mContext;
        this.mListDataHeader = new ArrayList&lt;&gt;();
        this.mListDataHeader.addAll(mListDataHeader);
        // Init second level data
        String[] mItemHeaders;
        mListData_SecondLevel_Map = new HashMap&lt;&gt;();
        int parentCount = mListDataHeader.size();
        for (int i = 0; i &lt; parentCount; i++) {
            String content = mListDataHeader.get(i);
            switch (content) {
                case "Level 1.1":
                    mItemHeaders = mContext.getResources().getStringArray(R.array.items_array_expandable_level_one_one_child);
                    break;
                case "Level 1.2":
                    mItemHeaders = mContext.getResources().getStringArray(R.array.items_array_expandable_level_one_two_child);
                    break;
                default:
                    mItemHeaders = mContext.getResources().getStringArray(R.array.items_array_expandable_other_child);
            }
            mListData_SecondLevel_Map.put(mListDataHeader.get(i), Arrays.asList(mItemHeaders));
        }
        // THIRD LEVEL
        String[] mItemChildOfChild;
        List&lt;String&gt; listChild;
        mListData_ThirdLevel_Map = new HashMap&lt;&gt;();
        for (Object o : mListData_SecondLevel_Map.entrySet()) {
            Map.Entry entry = (Map.Entry) o;
            Object object = entry.getValue();
            if (object instanceof List) {
                List&lt;String&gt; stringList = new ArrayList&lt;&gt;();
                Collections.addAll(stringList, (String[]) ((List) object).toArray());
                for (int i = 0; i &lt; stringList.size(); i++) {
                    mItemChildOfChild = mContext.getResources().getStringArray(R.array.items_array_expandable_level_three);
                    listChild = Arrays.asList(mItemChildOfChild);
                    mListData_ThirdLevel_Map.put(stringList.get(i), listChild);
                }
            }
        }
    }
    @Override
    public Object getChild(int groupPosition, int childPosition) {
        return childPosition;
    }
    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }
    @Override
    public View getChildView(int groupPosition, int childPosition,
                             boolean isLastChild, View convertView, ViewGroup parent) {
        final CustomExpListView secondLevelExpListView = new CustomExpListView(this.mContext);
        String parentNode = (String) getGroup(groupPosition);
        secondLevelExpListView.setAdapter(new SecondLevelAdapter(this.mContext, mListData_SecondLevel_Map.get(parentNode), mListData_ThirdLevel_Map));
        secondLevelExpListView.setGroupIndicator(null);
        return secondLevelExpListView;
    }
    @Override
    public int getChildrenCount(int groupPosition) {
        return 1;
    }
    @Override
    public Object getGroup(int groupPosition) {
        return this.mListDataHeader.get(groupPosition);
    }
    @Override
    public int getGroupCount() {
        return this.mListDataHeader.size();
    }
    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }
    @Override
    public View getGroupView(int groupPosition, boolean isExpanded,
                             View convertView, ViewGroup parent) {
        String headerTitle = (String) getGroup(groupPosition);
        if (convertView == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.mContext
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = layoutInflater.inflate(R.layout.drawer_list_group, parent, false);
        }
        TextView lblListHeader = (TextView) convertView
                .findViewById(R.id.lblListHeader);
        lblListHeader.setTypeface(null, Typeface.BOLD);
        lblListHeader.setTextColor(Color.CYAN);
        lblListHeader.setText(headerTitle);
        return convertView;
    }
    @Override
    public boolean hasStableIds() {
        return true;
    }
    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    } }
</code></pre>

<p><strong>SecondLevelAdapter.java:</strong></p>

<pre><code>public class SecondLevelAdapter extends BaseExpandableListAdapter
{
    private final Context mContext;
    private final List&lt;String&gt; mListDataHeader;
    private final Map&lt;String, List&lt;String&gt;&gt; mListDataChild;
    public SecondLevelAdapter(Context mContext, List&lt;String&gt; mListDataHeader, Map&lt;String, List&lt;String&gt;&gt; mListDataChild) {
        this.mContext = mContext;
        this.mListDataHeader = mListDataHeader;
        this.mListDataChild = mListDataChild;
    }
    @Override
    public Object getChild(int groupPosition, int childPosition)
    {
        return this.mListDataChild.get(this.mListDataHeader.get(groupPosition))
                .get(childPosition);
    }
    @Override
    public long getChildId(int groupPosition, int childPosition)
    {
        return childPosition;
    }
    @Override
    public View getChildView(int groupPosition, int childPosition,
                             boolean isLastChild, View convertView, ViewGroup parent)
    {
        final String childText = (String) getChild(groupPosition, childPosition);

        if (convertView == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.mContext
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = layoutInflater.inflate(R.layout.drawer_list_item, parent, false);
        }
        TextView txtListChild = (TextView) convertView
                .findViewById(R.id.lblListItem);
        txtListChild.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15);
        txtListChild.setText(childText);
        return convertView;
    }
    @Override
    public int getChildrenCount(int groupPosition)
    {
        try {
            return this.mListDataChild.get(this.mListDataHeader.get(groupPosition)).size();
        } catch (Exception e) {
            return 0;
        }
    }
    @Override
    public Object getGroup(int groupPosition)
    {
        return this.mListDataHeader.get(groupPosition);
    }
    @Override
    public int getGroupCount()
    {
        return this.mListDataHeader.size();
    }
    @Override
    public long getGroupId(int groupPosition)
    {
        return groupPosition;
    }
    @Override
    public View getGroupView(int groupPosition, boolean isExpanded,
                             View convertView, ViewGroup parent)
    {
        String headerTitle = (String) getGroup(groupPosition);
        if (convertView == null) {
            LayoutInflater layoutInflater = (LayoutInflater) this.mContext
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = layoutInflater.inflate(R.layout.drawer_list_group_second, parent, false);
        }
        TextView lblListHeader = (TextView) convertView
                .findViewById(R.id.lblListHeader);
        lblListHeader.setText(headerTitle);
        lblListHeader.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18);
        lblListHeader.setTextColor(Color.YELLOW);
        return convertView;
    }
    @Override
    public boolean hasStableIds() {
        return true;
    }
    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    }
}
</code></pre>

<p><strong>MainActivity.java:</strong></p>

<pre><code>public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.content_main);
        // Init top level data
        List&lt;String&gt; listDataHeader = new ArrayList&lt;&gt;();
        String[] mItemHeaders = getResources().getStringArray(R.array.items_array_expandable_level_one);
        Collections.addAll(listDataHeader, mItemHeaders);
        ExpandableListView mExpandableListView = (ExpandableListView) findViewById(R.id.expandableListView_Parent);
        if (mExpandableListView != null) {
            ParentLevelAdapter parentLevelAdapter = new ParentLevelAdapter(this, listDataHeader);
            mExpandableListView.setAdapter(parentLevelAdapter);
        }
    }
}
</code></pre>

<p>Screenshot result:</p>

<p><a href="http://i.stack.imgur.com/buiFC.png"><img src="http://i.stack.imgur.com/buiFC.png" alt="Three-level expandable listview"></a></p>
