<p>As previous authors mention you should make a deep copy of object, but with your code you're only making a shallow copy.</p>

<p>The fastest and easiest way to deep copy an object in java is to <code>serialize</code>() it and <code>deserialize</code>().</p>

<p>Assuming all your classes implement java.io.Serializable interface:</p>

<pre><code>public static &lt;T extends Serializable&gt; T copy(T orig) {

    T obj = null;
    try {
        // Write the object out to a byte array
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream out = new ObjectOutputStream(bos);
        out.writeObject(orig);
        out.flush();
        out.close();

        // Make an input stream from the byte array and read
        // a copy of the object back in.
        ObjectInputStream in = new ObjectInputStream(
                new ByteArrayInputStream(bos.toByteArray()));
        obj = (T) in.readObject();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException cnfe) {
        cnfe.printStackTrace();
    }
    return obj;
}
</code></pre>
