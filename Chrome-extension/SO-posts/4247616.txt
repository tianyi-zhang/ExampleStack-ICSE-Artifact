<p>I have resolved this problem, I am sorry if my question was unclear but here is what was not right: The IDCT method had to have the coefficient inside the i and j for loops :</p>

<pre><code>public double[][] applyIDCT(double[][] F) {
        double[][] f = new double[N][N];
        for (int i=0;i&lt;N;i++) {
          for (int j=0;j&lt;N;j++) {
            double sum = 0.0;
            for (int u=0;u&lt;N;u++) {
              for (int v=0;v&lt;N;v++) {
                sum+=(c[u]*c[v])/4.0*Math.cos(((2*i+1)/(2.0*N))*u*Math.PI)*Math.cos(((2*j+1)/(2.0*N))*v*Math.PI)*F[u][v];
              }
            }
            f[i][j]=Math.round(sum);
          }
        }
        return f;
    }
</code></pre>

<p>This only works for a 8x8 bloc of data, or else you would have to change this:</p>

<pre><code>(c[u]*c[v])/4.0)
</code></pre>

<p>into something like this:</p>

<pre><code>(2*c[u]*c[v])/Math.sqrt(M*N)
</code></pre>

<p>Where M and N are the dimentions of the table...</p>

<p>Here are the results with a 2x2 block of data:</p>

<pre><code>Original values
---------------
54.0 =&gt; f[0][0]
35.0 =&gt; f[0][1]
128.0 =&gt; f[1][0]
185.0 =&gt; f[1][1]

From f to F
-----------
200.99999999999994 =&gt; F[0][0]
-18.99999999999997 =&gt; F[0][1]
-111.99999999999997 =&gt; F[1][0]
37.99999999999999 =&gt; F[1][1]

Back to f
---------
54.0 =&gt; f[0][0]
35.0 =&gt; f[0][1]
128.0 =&gt; f[1][0]
185.0 =&gt; f[1][1]
</code></pre>
