<p>I am considering here, both K,V are String values. If you have some other values then first your classes for K,V should follow <code>equals()</code> and <code>hashcode()</code> rules.
Comparable is not required if you follow the following program. </p>

<pre><code>import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class SortMap {
    public Map&lt;String, String&gt; getSortedMap(Map&lt;String, String&gt; mapToSort) {
        Set&lt;Map.Entry&lt;String,String&gt;&gt; mapEntry = mapToSort.entrySet();

        List&lt;Map.Entry&lt;String,String&gt;&gt; listMap= new ArrayList&lt;Map.Entry&lt;String,String&gt;&gt;();
        listMap.addAll(mapEntry);
        Collections.sort(listMap, new Comparator&lt;Map.Entry&lt;String,String&gt;&gt;() {

            @Override
            public int compare(Map.Entry&lt;String,String&gt; o1, Map.Entry&lt;String,String&gt; o2) {
                return  o1.getValue().compareTo(o2.getValue());
            }

        });
        Map&lt;String,String&gt; sortedMap = new LinkedHashMap&lt;String,String&gt;();
        for(Map.Entry&lt;String,String&gt; mapE:listMap)
        {
            sortedMap.put(mapE.getKey(), mapE.getValue());
        }
        System.out.println(sortedMap);
        return sortedMap;
    }

}
</code></pre>

<p><strong>Map.Entry</strong> is nothing but <strong>Entry</strong> class written inside <strong>HashMap</strong> class which implements <strong>Entry</strong> interface which is written inside <strong>Map</strong> interface. so there are rules to use inner class references.</p>

<pre><code>static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; {
        final K key;
        V value;
        Entry&lt;K,V&gt; next;
        final int hash;

        /**
         * Creates new entry.
         */
        Entry(int h, K k, V v, Entry&lt;K,V&gt; n) {
            value = v;
            next = n;
            key = k;
            hash = h;
        }
}
</code></pre>
