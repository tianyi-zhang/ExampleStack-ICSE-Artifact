<pre><code>   private class MatchingNearByLocationTask extends
        AsyncTask&lt;Void, Void, Void&gt; {

    @Override
    protected void onPreExecute() {
        super.onPreExecute();
        // Showing progress dialog
        progressDialog = new ProgressDialog(getContext());
        progressDialog.setMessage("Loading...");
        progressDialog.setCancelable(true);
        progressDialog.show();

    }

    @Override
    protected Void doInBackground(Void... arg0) {

        jsonStr = getLocationInfo(latitude, longitude).toString(); // put longitude and      latitude value from which u want find nearer palce
        if (jsonStr != null) {
            Log.i("location--??", jsonStr);

            JSONObject jsonObj;
            try {
                jsonObj = new JSONObject(jsonStr);

                JSONObject responseJsonObject = jsonObj
                        .getJSONObject("response");

                JSONArray venues = responseJsonObject
                        .getJSONArray(("venues"));

                for (int index = 0; index &lt; venues.length(); index++) {

                    locationObject = new NearByLocationObject();

                    String id = "", name = "", longitude = "", latitude = "";

                    JSONObject venuesJsonObj = venues.getJSONObject(index);

                    id = venuesJsonObj.getString("id");
                    name = venuesJsonObj.getString("name");

                    JSONObject latLngJsonObj = venuesJsonObj
                            .getJSONObject("location");

                    longitude = latLngJsonObj.getString("lng");
                    latitude = latLngJsonObj.getString("lat");

                    locationObject.setId(id);
                    locationObject.setNameOfLocation(name);
                    locationObject.setLocationOfLatitude(latitude);
                    locationObject.setLocationOfLongitude(longitude);

                    nearByLocationArrayList.add(locationObject);

                }

            } catch (JSONException e) {

                e.printStackTrace();
            }

        }

        return null;
    }

    @Override
    protected void onPostExecute(Void result) {
        super.onPostExecute(result);
        // Dismiss the progress dialog
        if (progressDialog.isShowing()) {
            progressDialog.dismiss();
        }

        adapter = new NearByLocationArrayAdapter(getContext(),
                R.layout.nearby_location_item, nearByLocationArrayList);
        nearByLocationListView.setAdapter(adapter);
    }

    @Override
    protected void onCancelled() {

        super.onCancelled();
        progressDialog.dismiss();

    }

}

private JSONObject getLocationInfo(double lat, double lng) {

    HttpGet httpGet = new HttpGet(
            "https://api.foursquare.com/v2/venues/search?ll="
                    + lat
                    + ","
                    + lng
                    + "&amp;radius=100&amp;oauth_token=TNFKWLITLCJYWPSLAXQNHCSDPHZ4IS5PWVDD45OI224JGFFM&amp;v=20140407&amp;intent=checkin");
    HttpClient client = new DefaultHttpClient();
    HttpResponse response;
    StringBuilder stringBuilder = new StringBuilder();

    try {
        response = client.execute(httpGet);
        HttpEntity entity = response.getEntity();
        InputStream stream = entity.getContent();
        int b;
        while ((b = stream.read()) != -1) {
            stringBuilder.append((char) b);
        }
    } catch (ClientProtocolException e) {
    } catch (IOException e) {
    }

    JSONObject jsonObject = new JSONObject();
    try {
        jsonObject = new JSONObject(stringBuilder.toString());
    } catch (JSONException e) {
        e.printStackTrace();
    }

    return jsonObject;
}



public class NearByLocationObject {

String id = "", nameOfLocation, locationOfLatitude, LocationOfLongitude;

public NearByLocationObject() {
    super();
    // TODO Auto-generated constructor stub
}

public NearByLocationObject(String id, String nameOfLocation,
        String locationOfLatitude, String locationOfLongitude) {
    super();
    this.id = id;
    this.nameOfLocation = nameOfLocation;
    this.locationOfLatitude = locationOfLatitude;
    LocationOfLongitude = locationOfLongitude;
}

public String getId() {
    return id;
}

public void setId(String id) {
    this.id = id;
}

public String getNameOfLocation() {
    return nameOfLocation;
}

public void setNameOfLocation(String nameOfLocation) {
    this.nameOfLocation = nameOfLocation;
}

public String getLocationOfLatitude() {
    return locationOfLatitude;
}

public void setLocationOfLatitude(String locationOfLatitude) {
    this.locationOfLatitude = locationOfLatitude;
}

public String getLocationOfLongitude() {
    return LocationOfLongitude;
}

public void setLocationOfLongitude(String locationOfLongitude) {
    LocationOfLongitude = locationOfLongitude;
}
</code></pre>

<p>}</p>
