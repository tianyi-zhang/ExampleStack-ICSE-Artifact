<h3>Object order insignificant</h3>

<p>If the order is not important, you can sort the list using the <code>Set</code> class:</p>

<pre><code>Set&lt;MyObject&gt; mySet = new HashSet&lt;MyObject&gt;(yourList);
</code></pre>

<p>The duplicates will be removed automatically.</p>

<h3>Object order significant:</h3>

<p>If ordering is significant, then you can manually check for duplicates, e.g. using this snippet:</p>

<pre><code>// Copy the list.
ArrayList&lt;String&gt; newList = (ArrayList&lt;String&gt;) list.clone();

// Iterate
for (int i = 0; i &lt; list.size(); i++) {
    for (int j = list.size() - 1; j &gt;= i; j--) {
        // If i is j, then it's the same object and don't need to be compared.
        if (i == j) {
            continue;
        }
        // If the compared objects are equal, remove them from the copy and break
        // to the next loop
        if (list.get(i).equals(list.get(j))) {
            newList.remove(list.get(i));
            break;
        }
        System.out.println("" + i + "," + j + ": " + list.get(i) + "-" + list.get(j));
    }
}
</code></pre>

<p>This will remove all duplicates, leaving the last duplicate value as original entry. In addition, it will check each combination only once.</p>

<h3>Futhermore</h3>

<p>You cannot modify a list while an <code>Iterator</code> (which is usually used in a for-each loop) is looping through an array. This will throw a <code>ConcurrentModificationException</code>. You can modify the array if you are looping it using a for loop. Then you must control the iterator position (decrementing it while removing an entry).</p>
