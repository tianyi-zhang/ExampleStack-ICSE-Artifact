<p>Don't add the <code>sub menus</code> for the <code>recent items</code> as string, add them as <code>MenuItem</code> itself.
I tried to fulfill the requirement by changing few lines in your code:</p>

<p>FULL CODE:</p>

<pre><code>public class RecentItem extends javax.swing.JFrame {

    JTextArea tx;
    int i=0;
    int recentItems_count=0;
    String filename;
    String recentItem;
    Queue&lt;String&gt; q;
    public RecentItem() {
        q=new LinkedList&lt;&gt;();
        initComponents();
    }


    @SuppressWarnings("unchecked")
    // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;//GEN-BEGIN:initComponents
    private void initComponents() {

        tp = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        create = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        open = new javax.swing.JMenuItem();
        recentItems = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");



        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });
        jMenu1.add(open);

        recentItems.setText("Recent Items.....");
//        recentItems.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                recentItemsActionPerformed(evt);
//            }
//        }); /* NO NEED FOR THESE */
        jMenu1.add(recentItems);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// &lt;/editor-fold&gt;



    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed

           FileDialog fd = new FileDialog(RecentItem.this, "Select File", FileDialog.LOAD);
           fd.show();
           String title;
           String sts;
           if (fd.getFile() != null) {
           sts = fd.getDirectory() + fd.getFile();
           title=fd.getFile();
           //System.out.println("title :"+sts);
           BufferedReader br = null;
           StringBuffer str = new StringBuffer("");
           try {
                br = new BufferedReader(new FileReader(sts));
                String line;
                try {
                    while ((line = br.readLine()) != null) {
                        str.append(line + "\n");
                    }
                } catch (IOException ex) {
                    Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
            }
            String t = str.toString();
            final JInternalFrame internalFrame = new JInternalFrame("",true,true);  
            tx = new JTextArea();
            internalFrame.add(tx);
            i+=1;
            internalFrame.setName("Document"+i);
            internalFrame.setTitle(title);
            tp.add(internalFrame);
            internalFrame.setVisible(true);
            internalFrame.addInternalFrameListener(new InternalFrameAdapter() {
                @Override
                public void internalFrameClosing(InternalFrameEvent e) {
                    tp.remove(internalFrame);
                }
            });
            tx.setText(t);
            q.add(sts);
            /*CHANGES*/
            JMenuItem STS=new JMenuItem(sts); //creating new menu item with the string
            STS.addActionListener(new java.awt.event.ActionListener() {  //adding action listenner
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    subMenuActionPerformed(evt,sts);
                }               
            });
            recentItems.add(STS);  //adding the newly created item to the menu

            recentItems_count++;

            if(recentItems_count&gt;2){
                recentItem=(String)q.remove();
                recentItems.removeAll();
                // recentItems_count--;
                for (String string : q) {
                     /*DOING THE SAME, HERE AGAIN */
                    JMenuItem item=new JMenuItem(string);
                    item.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            subMenuActionPerformed(evt,string);
                        }               
                    });
                    recentItems.add(item);
                }
            }
            try {
                br.close();
            } catch (IOException ex) {
                Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /*EVENT TO OPEN A FILE IN NEW TAB*/
    private void subMenuActionPerformed(ActionEvent evt, String title) {
        BufferedReader br = null;
           StringBuffer str = new StringBuffer("");
           String fileName=new File(title).getName();
             try {
                br = new BufferedReader(new FileReader(title));
                String line;
             try {
                        while ((line = br.readLine()) != null) {
                        str.append(line + "\n");
                    }
                    } catch (IOException ex) {
                    Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
                }
                } catch (FileNotFoundException ex) {
                Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
            }
         String t = str.toString();
         final JInternalFrame internalFrame = new JInternalFrame("",true,true);  
        tx = new JTextArea();
        internalFrame.add(tx);
        i+=1;
        internalFrame.setName("Document"+i);
        internalFrame.setTitle(fileName);
        tp.add(internalFrame);
        internalFrame.setVisible(true);
             internalFrame.addInternalFrameListener(new InternalFrameAdapter() {
        @Override
        public void internalFrameClosing(InternalFrameEvent e) {
            tp.remove(internalFrame);
        }
    });
            tx.setText(t);
            try{
            br.close();
        } catch(IOException e){}

               }

//    private void recentItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recentItemsActionPerformed
//        Object[] selectedObjects = recentItems.getSelectedObjects();
//        System.out.println(selectedObjects);
//
//    }//GEN-LAST:event_recentItemsActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //&lt;editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) "&gt;
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecentItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecentItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecentItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecentItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //&lt;/editor-fold&gt;

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RecentItem().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem create;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem open;
    private javax.swing.JMenu recentItems;
    private javax.swing.JMenuItem save;
    private javax.swing.JTabbedPane tp;
    // End of variables declaration//GEN-END:variables

}
</code></pre>

<p>The changed portion is at the adding of menus in the <code>recent items</code> menu:</p>

<pre><code>        JMenuItem STS=new JMenuItem(sts); //creating new menu item with the string
        STS.addActionListener(new java.awt.event.ActionListener() {  //adding action listenner
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subMenuActionPerformed(evt,sts);
            }               
        });
        recentItems.add(STS);  //adding the newly created item to the menu

        recentItems_count++;

        if(recentItems_count&gt;2){
            recentItem=(String)q.remove();
            recentItems.removeAll();
            // recentItems_count--;
            for (String string : q) {
                 /*DOING THE SAME, HERE AGAIN */
                JMenuItem item=new JMenuItem(string);
                item.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        subMenuActionPerformed(evt,string);
                    }               
                });
                recentItems.add(item);
            }
        }
</code></pre>

<p>And the <code>subMenuActionPerformed(evt,string)</code> method:</p>

<pre><code>private void subMenuActionPerformed(ActionEvent evt, String title) {
    BufferedReader br = null;
       StringBuffer str = new StringBuffer("");
       String fileName=new File(title).getName();
         try {
            br = new BufferedReader(new FileReader(title));
            String line;
         try {
                    while ((line = br.readLine()) != null) {
                    str.append(line + "\n");
                }
                } catch (IOException ex) {
                Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
            }
            } catch (FileNotFoundException ex) {
            Logger.getLogger(RecentItem.class.getName()).log(Level.SEVERE, null, ex);
        }
     String t = str.toString();
     final JInternalFrame internalFrame = new JInternalFrame("",true,true);  
    tx = new JTextArea();
    internalFrame.add(tx);
    i+=1;
    internalFrame.setName("Document"+i);
    internalFrame.setTitle(fileName);
    tp.add(internalFrame);
    internalFrame.setVisible(true);
         internalFrame.addInternalFrameListener(new InternalFrameAdapter() {
    @Override
    public void internalFrameClosing(InternalFrameEvent e) {
        tp.remove(internalFrame);
    }
});
        tx.setText(t);

        try{
            br.close();
        } catch(IOException e){}

           }
</code></pre>
