<p>Change:</p>

<pre><code>row.add("cell", row);
</code></pre>

<p>To:</p>

<pre><code>row.add("cell", cell);
</code></pre>

<p>On a side note, the <code>Gson</code> object is quite powerful, and should be capable of serializing your student list without all the manual code you're using now. Worst come to worst, you should consider creating a <a href="http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/TypeAdapter.html" rel="nofollow"><code>TypeAdapter</code></a> for your student class, registering it with Gson, and serializing as a list:</p>

<p>Hypothetical Student class:</p>

<pre><code>public class Student implements Serializable {
    private static final long serialVersionUID = 1L;

    private String ssn;
    private String schoolId;
    private String firstName;
    private String middleName;
    private String lastName;
    private Calendar enrollDate;

    // Constructors, getters/setters

    @Override
    public String toString() {
        return String.format("Student[%s,%s (%s)]", getLastName(),
                getFirstName(), getSchoolId());
    }
}
</code></pre>

<p>Corresponding adapter:</p>

<pre><code>public class StudentAdapter extends TypeAdapter&lt;Student&gt; {

    public StudentAdapter() {
        super();
    }

    @Override
    public Student read(final JsonReader reader) throws IOException {
        if (reader.peek() == JsonToken.NULL) {
            reader.nextNull();
            return null;
        }

        final Student student = new Student();

        reader.beginObject();
        while (reader.hasNext()) {
            final String name = reader.nextName();
            if ("firstName".equals(name)) {
                student.setFirstName(reader.nextString());
            } else if ("lastName".equals(name)) {
                student.setLastName(reader.nextString());
            } else if ("schoolId".equals(name)) {
                student.setSchoolId(reader.nextString());
            }
        }
        reader.endObject();

        return student;
    }

    @Override
    public void write(final JsonWriter writer, final Student student)
            throws IOException {
        if (student == null) {
            writer.nullValue();
            return;
        }

        writer.beginObject();
        writer.name("firstName");
        writer.value(student.getFirstName());
        writer.name("lastName");
        writer.value(student.getLastName());
        writer.name("schoolId");
        writer.value(student.getSchoolId());
        writer.endObject();
    }
}
</code></pre>

<p>Test code:</p>

<pre><code>final List&lt;Student&gt; origStudentList = Arrays.asList(new Student(
        "B12J9", "Samantha", "Cole"), new Student("A09K2", "Adebisi",
        "Onihan"), new Student(null, "Miguel", "Rodriguez"));

final Gson gson = new GsonBuilder().registerTypeAdapter(Student.class,
        new StudentAdapter()).create();

final String json = gson.toJson(origStudentList);
System.out.println(json);

final List&lt;Student&gt; unmarshalledStudentList = gson.fromJson(json,
        new TypeToken&lt;List&lt;Student&gt;&gt;() {
        }.getType());
System.out.println(unmarshalledStudentList);
</code></pre>

<p>In the above example, I've illustrated how to create an adapter that selectively serializes just the <code>schoolId</code>, <code>firstName</code> and <code>lastName</code> properties of a hypothetical <code>Student</code> object. You can use this as a starting point, and there are other examples of type adapters in the Javadoc I linked.</p>
