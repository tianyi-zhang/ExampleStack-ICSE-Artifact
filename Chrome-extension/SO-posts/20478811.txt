<p>I think there are <strong>many many many ways</strong> to do that.<br>
So be prepared to take some time reading this,<br>
and please read the whole post before deciding what to do<br>
and and the end i have created some code for you :)  </p>

<p>I will 'briefly' sum up the ways you could go,<br>
because there is a different way for every different thing you want to achieve.  </p>

<p>If you want to create <strong>not very complex <code>hard edge</code> lighting</strong> effects like this:<br>
(forgive me if i used your image as example :D)  </p>

<p><img src="http://i.stack.imgur.com/tvhDd.png" alt="hard light example"></p>

<p>then you could use a <strong>black tile image</strong>:  </p>

<p><img src="http://i.stack.imgur.com/5JUhW.png" alt="black tile"></p>

<p>and <strong>lay it over / behind</strong> your tiles and set the one in foreground to a specific <strong>alpha value</strong>.<br>
both will look exactly the same, just one time you add transparency to the black tile<br>
and the other time to the tile.<br>
if you maybe create many 50% alpha black tiles it will look like this:  </p>

<p><img src="http://i.stack.imgur.com/ThMHu.png" alt="hard light with black tiles example"></p>

<p>but this is not a very efficient way because:  </p>

<ol>
<li><p>alpha blending in <code>java</code> isn't very efficient at all,<br>
but i think today even the smalles device running <code>java 2D</code> applications<br>
can handle this with ease, so this is not the main problem at all  </p></li>
<li><p>but if you have to <strong>load an extra black tile</strong> and paint it over / under each dimmed tile,<br>
this consumes extra memory and is really slow because you paint two real tiles for each tile you can see afterwards</p></li>
</ol>

<p>But the 'nicer' background way:<br>
if you would <strong>use a black background</strong> image in your game anyway,<br>
you could just <strong>set the alpha of your tiles</strong> to lower values to make them darker,<br>
if the value is 0 (full black) you can even omit that tile and hand over to the next one<br>
so you minimize the painting time.</p>

<p>This would result in the same as the way above with the many black tiles,<br>
and would be less expensive (<code>one big image</code> <strong>vs.</strong> <code>many small images</code>)<br>
like this:</p>

<p>many small black tiles (see image above)  </p>

<p>using backgroud as black and laying tiles with transparency over it<br>
<img src="http://i.stack.imgur.com/O9aMk.png" alt="one big image"><br>
with gimp its hard to do fast, but in program code, you can easily make a gradient from 100% tile alpha to 0% tile alpha so they fade out from middle to outer  </p>

<p>but if you have a background in your game that is <strong>not black</strong><br>
then this ins't really helpful, because it would result in many black tiles<br>
<code>paintet behind each tile</code>, the same thing i have mentioned already.</p>

<p>in all this examples you will get a <code>hard edge</code> light, with only <strong>one light level per tile</strong>  </p>

<hr>

<p>But if i have a look at your image,<br>
i can imagine more specific problems and better ways to slove them: </p>

<ul>
<li>I think you want to create lighting around your character and maybe torches / whatever  </li>
</ul>

<p>Therefore i have a way for you, that isn't hard to implement and also high configurable!<br>
You can even choose between <code>hard light</code> and <code>soft light</code> with only little changes:  </p>

<p>you just draw all tiles as normal with full opacity, and lay <strong>one big image</strong> over it<br>
(a <strong>mask</strong>) with a gradient from alpha <code>(full light)</code> to black <code>(no light at all)</code> as a circle.<br>
so you could get <code>dynamic soft light</code> and wouldn't have to do much!</p>

<p><img src="http://i.stack.imgur.com/sITTM.png" alt="image soft light mask">
<img src="http://i.stack.imgur.com/4VRD8.png" alt="image soft light"></p>

<p>if you want the <code>hard light</code> there too, just change the image as follows and position it  at your tile grid (so that one tile is exactly behind the mask tile,<br>
and the middle tile lays over the light source for example):  </p>

<p>new mask would look like (white is alpha):</p>

<p><img src="http://i.stack.imgur.com/FnUhj.png" alt="image mask hard light"></p>

<p>and the result:</p>

<p><img src="http://i.stack.imgur.com/1kz0c.png" alt="image mask hard light result"></p>

<p>with this method you could even achieve complex light forms as a circle easy<br>
(try to build a cirle out of tiles at runtime with the black tiles method from above,<br>
might be harder than you think of it now)<br>
and if you <strong>colorify</strong> the alpha a bit, your <strong>light would get a color</strong>!!  </p>

<p>but it has one big disadvantage, it isn't easy to combine one light source with another<br>
because the two masks would cancel themselfes out, that looks ugly:  </p>

<p><img src="http://i.stack.imgur.com/RW4Fb.png" alt="image cancelling two masks"></p>

<hr>

<p>so you could finally head over to the most complex way i can imagine for tiles out of my mind now:<br>
we <strong>invert the mask</strong>!<br>
that means that on every point the mask consists of full alpha,<br>
the tiles behind are drawn fully black<br>
and everywhere with full white, the tiles are drawn completely.  </p>

<p>you can imagine what would happen if you apply a mask<br>
consisting of <code>white with 50% alpha</code>?<br>
the tiles would drawn the same way as a black background with <strong>tile (50% alpha)</strong> drawn over it<br>
here i used 2 masks, combined them and applied them to the map:</p>

<p>mask 1:  </p>

<p><img src="http://i.stack.imgur.com/ZNfuP.png" alt="mask 1"></p>

<p>mask 2:  </p>

<p><img src="http://i.stack.imgur.com/uacJs.png" alt="mask 2"></p>

<p>result image (add two masks and apply them to the image):  </p>

<p><img src="http://i.stack.imgur.com/giTfS.png" alt="result image"></p>

<p>roughly the same as the mask thing above but there is an advantage:<br>
you can have many light sources (<code>circles from white to alpha as a mask</code>)<br>
even with <strong>different sizes / shapes / color / etc.</strong> and just combine them to one image<br>
(lay one over the next) and you will get a final mask you can apply to your tiles.<br>
so you just have one circle or whatever mask for every light source</p>

<p>i think you render the tiles in a <code>BufferedImage</code> first, if you so,<br>
i can provide a little code example here how you can apply such a alpha mask<br>
that i've shown to in the last method on a <code>BufferedImage</code>:  </p>

<pre><code>public void applyGrayscaleMaskToAlpha(BufferedImage image, BufferedImage mask)
{
    int width = image.getWidth();
    int height = image.getHeight();

    int[] imagePixels = image.getRGB(0, 0, width, height, null, 0, width);
    int[] maskPixels = mask.getRGB(0, 0, width, height, null, 0, width);

    for (int i = 0; i &lt; imagePixels.length; i++)
    {
        int color = imagePixels[i] &amp; 0x00ffffff; // Mask preexisting alpha

        // get alpha from color int
        // be careful, an alpha mask works the other way round, so we have to substrat this from 255
        int alpha = (maskPixels[i] &gt;&gt; 24) &amp; 0xff;
        imagePixels[i] = color | alpha;
    }

    image.setRGB(0, 0, width, height, imagePixels, 0, width);
}
</code></pre>

<p>if you now create a mask for a torch maybe and one fpr the player,<br>
you can combine those to buffered images (or more then 2) this way:  </p>

<pre><code>public BufferedImage combineMasks(BufferedImage[] images)
{
    // create the new image, canvas size is the max. of all image sizes
    int w, h;

    for (BufferedImage img : images)
    {
        w = img.getWidth() &gt; w ? img.getWidth() : w;
        h = img.getHeight() &gt; h ? img.getHeight() : h;
    }

    BufferedImage combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);

    // paint all images, preserving the alpha channels
    Graphics g = combined.getGraphics();

    for (BufferedImage img : images)
        g.drawImage(img, 0, 0, null);

    return combined;
}
</code></pre>

<p>for sure it's possible that there are some minor mistakes in my code,<br>
because i've written it down from my mind, so please don't get mad with me<br>
im sure you can figure it out yourself :)  </p>

<p>your only challenge now is to create the right mask on the fly when drawing,<br>
but im sure you will get it soon, <strong><code>i'm wishing you all the best!</code></strong><br>
i hope i could help you a bit further to your goal!  </p>
