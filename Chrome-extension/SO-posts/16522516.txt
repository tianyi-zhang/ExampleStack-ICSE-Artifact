<p>Actually format date and time matters in sql.</p>

<p>First, 
You have to think about the format (usually format we are showing to user) of date you are getting from date picker :</p>

<p>Constants ::</p>

<pre><code>public static final String DATE_FORMAT = "MM/dd/yyyy";
public static final String SQL_DATETIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
public static final String SQL_DATE_FORMAT = "yyyy-MM-dd";

SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT, Locale.US);
SimpleDateFormat rdf = new SimpleDateFormat(SQL_DATE_FORMAT,
                Locale.US);
SimpleDateFormat tdf = new SimpleDateFormat(SQL_DATETIME_FORMAT,
                Locale.US);
</code></pre>

<p>Datepicker ::</p>

<pre><code>public static class DatePickerFragment extends DialogFragment implements
        DatePickerDialog.OnDateSetListener {

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {

        final Calendar c = Calendar.getInstance();
        int year = c.get(Calendar.YEAR);
        int month = c.get(Calendar.MONTH);
        int day = c.get(Calendar.DAY_OF_MONTH);

        Bundle data = this.getArguments();
        if (data.getBoolean("isSelected")) {
            year = data.getInt("year") + 1900;
            month = data.getInt("month");
            day = data.getInt("day");
        }

        return new DatePickerDialog(getActivity(), this, year, month, day);
    }

    public void onDateSet(DatePicker view, int year, int month, int day) {
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT, Locale.US);
        @SuppressWarnings("deprecation")
        String formatedDate = sdf.format(new Date(year - 1900, month, day));
        ((BaseActivity) getActivity()).mValuePickListener.onPickedValue(
                formatedDate, DIALOG_DATE_PICKER);
    }
}
</code></pre>

<p>Now, convert this format into mysql accepted format for storing date and time :</p>

<pre><code>Date selectedDate = new Date();
if (!date.getText().toString().trim().equalsIgnoreCase("")) {
  selectedDate =    sdf.parse(date.getText().toString());
}
String sqlDate = rdf.format(selectedDate);
</code></pre>

<p>PS :: You can also use timestamp (in long) for storing time in database</p>
