<p>Assuming you're talking about <a href="https://github.com/MikeOrtiz/TouchImageView/blob/master/src/com/example/touch/TouchImageView.java" rel="nofollow">this TouchImageView</a>, you could add a method that wraps the logic inside</p>

<pre><code>public boolean onScale(ScaleGestureDetector detector);
</code></pre>

<p>in a method called <code>setScaleFactor(float scaleFactor, float focusX, floatY);</code></p>

<p>That way, <code>onScale</code> method would look like.-</p>

<pre><code>@Override
public boolean onScale(ScaleGestureDetector detector) { 
    float mScaleFactor = detector.getScaleFactor();
    setScaleFactor(mScaleFactor, detector.getFocusX(), detector.getFocusY());

    return true;
}
</code></pre>

<p>And you could call</p>

<pre><code>setScaleFactor(1.0f, 0.5f, 0.5f);
</code></pre>

<p>to 'reset' the scale.</p>

<p><strong>EDIT</strong></p>

<p>Assuming you're working with the <code>TouchImageView</code> implementation given on the link above, <code>setScaleFactor</code> would look like this.-</p>

<pre><code>public void setScaleFactor(float mScaleFactor, float focusX, float focusY) {
    float origScale = saveScale;
    saveScale *= mScaleFactor;
    if (saveScale &gt; maxScale) {
        saveScale = maxScale;
        mScaleFactor = maxScale / origScale;
    } else if (saveScale &lt; minScale) {
         saveScale = minScale;
         mScaleFactor = minScale / origScale;
    }

    if (origWidth * saveScale &lt;= viewWidth || origHeight * saveScale &lt;= viewHeight) {
        matrix.postScale(mScaleFactor, mScaleFactor, viewWidth / 2, viewHeight / 2);
    } else {
        matrix.postScale(mScaleFactor, mScaleFactor, focusX, focusY);
    }
    fixTrans();
}
</code></pre>
