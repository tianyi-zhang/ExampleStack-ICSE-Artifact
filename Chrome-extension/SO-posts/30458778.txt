<p>Let's look at your first compare method :</p>

<pre><code>    public int compare(FileItem o1, FileItem o2) {

        int result = 0;
        if (o1 != null &amp;&amp; o2 != null) {

            String n1 = o1.getFileName();
            String n2 = o2.getFileName();

            if (n1 != null &amp;&amp; n2 != null)
                result = n1.compareTo(n2);
        }

        return result;
    }
</code></pre>

<p>Suppose you are comparing two FileItems (let's call them o1 and o2), one with a file name and the other without (i.e. null file name). Your method will return 0. </p>

<p>Now if you compare o2 with another FileItem (o3) for which the file name is not null, you return 0 again.</p>

<p>But if you compare o1 to o3, since both of them have non null file name, the comparison returns -1 or 1 (assuming the file names are different).</p>

<p>Therefore your comparison is inconsistent since it's not transitive. </p>

<p>If one element lacks a property required for the comparison and the other doesn't, you shouldn't return 0. You should decide whether to return 1 or -1 (depending whether, for example, the FileItems with null names should be ordered before or after the FileItems with non null names).</p>

<p>For example :</p>

<pre><code>public int compare(FileItem o1, FileItem o2) 
{
    if (o1 == null) {
        if (o2 == null) {
            return 0;
        } else {
            return 1; // this will put null in the end
        }
    } else if (o2 == null) {
        return -1;
    }
    String n1 = o1.getFileName();
    String n2 = o2.getFileName();
    if (n1 == null) {
        if (n2 == null) {
            return 0;
        } else {
            return 1; // this will put null names after non null names 
        }
    } else if (n2 == null) {
        return -1;
    }
    return n1.compareTo(n2);
}
</code></pre>
