<pre><code>import java.util.ArrayList;

import android.app.Activity;
import android.content.ContentProviderOperation;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.widget.Toast;

public class AddContacts extends Activity
{
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) 
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
    /*    try
        {
            ContentResolver cr = this.getContentResolver();
            ContentValues cv = new ContentValues();
            cv.put(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME, "New Name");
            cv.put(ContactsContract.CommonDataKinds.Phone.NUMBER, "1234567890");
            cv.put(ContactsContract.CommonDataKinds.Phone.TYPE, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE);
            cr.insert(ContactsContract.RawContacts.CONTENT_URI, cv);

            Toast.makeText(this, "Contact added", Toast.LENGTH_LONG).show();
        }
        catch(Exception e)
        {
            TextView tv = new TextView(this);
            tv.setText(e.toString());
            setContentView(tv);
        }
*/        
        String DisplayName = "XYZ";
        String MobileNumber = "123456";
        String HomeNumber = "1111";
        String WorkNumber = "2222";
        String emailID = "email@nomail.com";
        String company = "bad";
        String jobTitle = "abcd";


                           ArrayList&lt;ContentProviderOperation&gt; ops = new ArrayList&lt;ContentProviderOperation&gt;();
                           ops.add(ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
                                   .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
                                   .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null)
                                   .build());

                           //------------------------------------------------------ Names
                           if(DisplayName != null)
                           {
                               ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                                       .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                                       .withValue(ContactsContract.Data.MIMETYPE,
                                               ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                                       .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, DisplayName).build());
                           }                       
                           //------------------------------------------------------ Mobile Number
                           if(MobileNumber != null)
                           {
                               ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                                       .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                                       .withValue(ContactsContract.Data.MIMETYPE,
                                               ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                                       .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, MobileNumber)
                                       .withValue(ContactsContract.CommonDataKinds.Phone.TYPE, 
                                               ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE)
                                       .build());
                           }

                           //------------------------------------------------------ Home Numbers
                           if(HomeNumber != null)
                           {
                               ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                                       .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                                       .withValue(ContactsContract.Data.MIMETYPE,
                                               ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                                       .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, HomeNumber)
                                       .withValue(ContactsContract.CommonDataKinds.Phone.TYPE, 
                                               ContactsContract.CommonDataKinds.Phone.TYPE_HOME)
                                       .build());
                           }

                           //------------------------------------------------------ Work Numbers
                           if(WorkNumber != null)
                           {
                               ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                                       .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                                       .withValue(ContactsContract.Data.MIMETYPE,
                                               ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                                       .withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, WorkNumber)
                                       .withValue(ContactsContract.CommonDataKinds.Phone.TYPE, 
                                               ContactsContract.CommonDataKinds.Phone.TYPE_WORK)
                                       .build());
                           }

                           //------------------------------------------------------ Email
                           if(emailID != null)
                           {
                                ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                                           .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                                           .withValue(ContactsContract.Data.MIMETYPE,
                                                   ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE)
                                           .withValue(ContactsContract.CommonDataKinds.Email.DATA, emailID)
                                           .withValue(ContactsContract.CommonDataKinds.Email.TYPE, ContactsContract.CommonDataKinds.Email.TYPE_WORK)
                                           .build());
                           }

                           //------------------------------------------------------ Organization
                           if(!company.equals("") &amp;&amp; !jobTitle.equals(""))
                           {
                               ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                                       .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                                       .withValue(ContactsContract.Data.MIMETYPE,
                                               ContactsContract.CommonDataKinds.Organization.CONTENT_ITEM_TYPE)
                                       .withValue(ContactsContract.CommonDataKinds.Organization.COMPANY, company)
                                       .withValue(ContactsContract.CommonDataKinds.Organization.TYPE, ContactsContract.CommonDataKinds.Organization.TYPE_WORK)
                                       .withValue(ContactsContract.CommonDataKinds.Organization.TITLE, jobTitle)
                                       .withValue(ContactsContract.CommonDataKinds.Organization.TYPE, ContactsContract.CommonDataKinds.Organization.TYPE_WORK)
                                       .build());
                           }

                           // Asking the Contact provider to create a new contact                  
                           try 
                           {
                               getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);
                           } 
                           catch (Exception e) 
                           {               
                               e.printStackTrace();
                               Toast.makeText(getApplicationContext(), "Exception: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                           }



    }
}
</code></pre>
