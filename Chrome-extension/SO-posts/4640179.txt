<p>What you want is called a <strong><a href="http://en.wikipedia.org/wiki/Power_set">Powerset</a></strong>. Here is a simple implementation of it:</p>

<pre><code>public static Set&lt;Set&lt;Integer&gt;&gt; powerSet(Set&lt;Integer&gt; originalSet) {
        Set&lt;Set&lt;Integer&gt;&gt; sets = new HashSet&lt;Set&lt;Integer&gt;&gt;();
        if (originalSet.isEmpty()) {
            sets.add(new HashSet&lt;Integer&gt;());
            return sets;
        }
        List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(originalSet);
        Integer head = list.get(0);
        Set&lt;Integer&gt; rest = new HashSet&lt;Integer&gt;(list.subList(1, list.size()));
        for (Set&lt;Integer&gt; set : powerSet(rest)) {
            Set&lt;Integer&gt; newSet = new HashSet&lt;Integer&gt;();
            newSet.add(head);
            newSet.addAll(set);
            sets.add(newSet);
            sets.add(set);
        }
        return sets;
    }
</code></pre>

<p>I will give you an example to explain how the algorithm works for the powerset of <code>{1, 2, 3}</code>:</p>

<ul>
<li>Remove <code>{1}</code>, and execute powerset for <code>{2, 3}</code>;
<ul>
<li>Remove <code>{2}</code>, and execute powerset for <code>{3}</code>;
<ul>
<li>Remove <code>{3}</code>, and execute powerset for <code>{}</code>;
<ul>
<li>Powerset of <code>{}</code> is <code>{{}}</code>;</li>
</ul></li>
<li>Powerset of <code>{3}</code> is <code>3</code> combined with <code>{{}}</code> = <code>{ {}, {3} }</code>;</li>
</ul></li>
<li>Powerset of <code>{2, 3}</code> is <code>{2}</code> combined with <code>{ {}, {3} }</code> = <code>{ {}, {3}, {2}, {2, 3} }</code>;</li>
</ul></li>
<li>Powerset of <code>{1, 2, 3}</code> is <code>{1}</code> combined with <code>{ {}, {3}, {2}, {2, 3} }</code> = <code>{ {}, {3}, {2}, {2, 3}, {1}, {3, 1}, {2, 1}, {2, 3, 1} }</code>.</li>
</ul>
