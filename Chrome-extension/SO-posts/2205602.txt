<p>The <a href="http://dev.eclipse.org/viewcvs/index.cgi/org.eclipse.core.resources/old_build_notes.html?view=co" rel="nofollow">release notes of eclipse3.1</a> did mention at the time (June 2005) a change in the heuristics for content type matching.<br>
It was related on <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=90218" rel="nofollow">bug 90218</a>, part of <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=82986" rel="nofollow">bug 82986</a> (enhancements to matching in 3.1), which references <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=86862" rel="nofollow"><strong>bug 86862</strong></a> ("need API for related custom objects lookup")</p>

<p>That API didn't make it, but the <a href="https://bugs.eclipse.org/bugs/attachment.cgi?id=18538" rel="nofollow">code is available</a> for you to reuse.</p>

<pre><code>public Object[] findRelatedObjects(IContentType type, String fileName, IRelatedRegistry registry) {
  List allRelated = new ArrayList();
  // first add any objects directly related to the content type
  Object[] related = registry.getRelatedObjects(type);
  for (int i = 0; i &lt; related.length; i++) {
    allRelated.add(related[i]);
  }
  // backward compatibility requested - add any objects related to the file name
  if (fileName != null) {
    related = registry.getRelatedObjects(fileName);
    for (int i = 0; i &lt; related.length; i++) {
      if (!allRelated.contains(related[i])) {
        // we don't want to return duplicates
        allRelated.add(related[i]);
      }
    }
  }
  // now add any indirectly related objects, walking up the content type hierarchy 
  while ((type = type.getBaseType()) != null) {
    related = registry.getRelatedObjects(type);
    for (int i = 0; i &lt; related.length; i++) {
      if (!allRelated.contains(related[i])) {
        // we don't want to return duplicates          
        allRelated.add(related[i]);
      }
    }
  }
  return allRelated.toArray();
}
</code></pre>
