<pre><code>btn = (Button) findViewById(R.id.button1);
    btn.setOnClickListener(new OnClickListener() {

        @SuppressLint("NewApi")
        @Override
        public void onClick(View v) {
            // TODO Auto-generated method stub
            Intent intent = new Intent(LocationUserActivity.this,
                    DriverListActivity.class);
            intent.putExtra("userlat", lat);
            intent.putExtra("userlon", lon);
            Bundle bndlanimationn = ActivityOptions.makeCustomAnimation(
                    getApplicationContext(), R.anim.animation_one,
                    R.anim.animation_two).toBundle();
            startActivity(intent, bndlanimationn);

        }
    });
    map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map))
            .getMap();
    getLocation();
    /*
     * LocationManager locationManager = (LocationManager)
     * getSystemService(LOCATION_SERVICE);
     * locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,
     * 0, 0, this);
     * 
     * Location location = locationManager
     * .getLastKnownLocation(LocationManager.GPS_PROVIDER);// lat =
     * location.getLatitude(); lon = location.getLongitude();
     */
    LatLng loc = new LatLng(lat, lon);
    map.moveCamera(CameraUpdateFactory.newLatLngZoom(loc, 15));
    map.addMarker(new MarkerOptions().position(loc).title("Your Location"));
    arrayList = new ArrayList&lt;NameValuePair&gt;();
    arrayList.add(new BasicNameValuePair("whichfunction", "getalllocs"));
    //new AllCallAsynch().execute();

}

public Location getLocation() {
    try {
        locationManager = (LocationManager) this
                .getSystemService(LOCATION_SERVICE);

        // getting GPS status
        isGPSEnabled = locationManager
                .isProviderEnabled(LocationManager.GPS_PROVIDER);

        // getting network status
        isNetworkEnabled = locationManager
                .isProviderEnabled(LocationManager.NETWORK_PROVIDER);

        if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {
            // no network provider is enabled
        } else {
            this.canGetLocation = true;
            // First get location from Network Provider
            if (isNetworkEnabled) {
                locationManager.requestLocationUpdates(
                        LocationManager.NETWORK_PROVIDER,
                        MIN_TIME_BW_UPDATES,
                        MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                Log.d("Network", "Network");
                if (locationManager != null) {
                    location = locationManager
                            .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    if (location != null) {
                        lat = location.getLatitude();
                        lon = location.getLongitude();
                    }
                }
            }
            // if GPS Enabled get lat/long using GPS Services
            if (isGPSEnabled) {
                if (location == null) {
                    locationManager.requestLocationUpdates(
                            LocationManager.GPS_PROVIDER,
                            MIN_TIME_BW_UPDATES,
                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.d("GPS Enabled", "GPS Enabled");
                    if (locationManager != null) {
                        location = locationManager
                                .getLastKnownLocation(LocationManager.GPS_PROVIDER);
                        if (location != null) {
                            lat = location.getLatitude();
                            lon = location.getLongitude();
                        }
                    }
                }
            }
        }

    } catch (Exception e) {
        e.printStackTrace();
    }

    return location;
}

@Override
public void onLocationChanged(Location location) {
    // TODO Auto-generated method stub
    lat = location.getLatitude();
    lon = location.getLongitude();

}

@Override
public void onStatusChanged(String provider, int status, Bundle extras) {
    // TODO Auto-generated method stub

}

@Override
public void onProviderEnabled(String provider) {
    // TODO Auto-generated method stub

}

@Override
public void onProviderDisabled(String provider) {
    // TODO Auto-generated method stub

}

private class AllCallAsynch extends AsyncTask&lt;Void, Void, Void&gt; {
    ProgressDialog dialog;
    ArrayList&lt;LatLng&gt; points = new ArrayList&lt;LatLng&gt;();

    @Override
    protected void onPreExecute() {
        // TODO Auto-generated method stub
        super.onPreExecute();
        dialog = new ProgressDialog(LocationUserActivity.this);
        dialog.setMessage("Loading...");
        dialog.show();

    }

    @Override
    protected Void doInBackground(Void... params) {

        // TODO Auto-generated method stub
        JSONParser parser = new JSONParser();
        JSONObject jsonObject = parser.getJSONFromUrl(url, arrayList);
        try {
            jsonArray = jsonObject.getJSONArray("locs");
            for (int i = 0; i &lt; jsonArray.length(); i++) {
                JSONObject object = jsonArray.getJSONObject(i);
                String id = object.getString("id");
                String lat = object.getString("latitude");
                String lon = object.getString("longitude");
                String mail = object.getString("email");
                points.add(new LatLng(Double.parseDouble(lat), Double
                        .parseDouble(lon)));

            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return null;
    }

    @Override
    protected void onPostExecute(Void result) {
        // TODO Auto-generated method stub
        for (int i = 0; i &lt; points.size(); i++) {
            LatLng ln = points.get(i);
            map.addMarker(new MarkerOptions()
                    .position(ln)
                    .title("Driver Location")
                    .icon(BitmapDescriptorFactory
                            .defaultMarker(BitmapDescriptorFactory.HUE_GREEN)));
        }
        /*
         * for (LatLng point : points) { // plot the point to the map
         * map.addMarker(new MarkerOptions() .position(point)
         * .title("Driver Location") .icon(BitmapDescriptorFactory
         * .defaultMarker(BitmapDescriptorFactory.HUE_GREEN))); }
         */
        dialog.dismiss();
    }
}
</code></pre>

<p>}</p>
