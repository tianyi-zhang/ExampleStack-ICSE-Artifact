<p>No, it doesn't force you to disable validation, it forces you to implement validation properly. <em>Do not</em> blindly accept all certificates. And no, your case is not any different, you just need to trust a certificate that Android doesn't trust by default. </p>

<p>You are using HttpClient, so the APIs for setting the trust manager are somewhat different than <code>HttpsURLConnection</code>, but the procedure is the same: </p>

<ol>
<li>Load a keystore file with trusted certificates (your server's self-signed certificates)</li>
<li>Initialize a <code>KeyStore</code> with it. </li>
<li>Create a <code>SocketFactory</code> using the <code>KeyStore</code> from 2. </li>
<li>Set your HTTP client library to use it when creating SSL sockets. </li>
</ol>

<p>This is described in Android's documentation: <a href="http://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html">http://developer.android.com/reference/org/apache/http/conn/ssl/SSLSocketFactory.html</a></p>

<p>A more detailed article on the subject, shows how to create the trust store file: <a href="http://blog.crazybob.org/2010/02/android-trusting-ssl-certificates.html">http://blog.crazybob.org/2010/02/android-trusting-ssl-certificates.html</a></p>

<p>Some background information and example code: <a href="http://nelenkov.blogspot.com/2011/12/using-custom-certificate-trust-store-on.html">http://nelenkov.blogspot.com/2011/12/using-custom-certificate-trust-store-on.html</a></p>

<p>This is the code you need to initialize HttpClient: </p>

<pre><code>KeyStore localTrustStore = KeyStore.getInstance("BKS");
InputStream in = getResources().openRawResource(R.raw.mytruststore);
localTrustStore.load(in, TRUSTSTORE_PASSWORD.toCharArray());

SchemeRegistry schemeRegistry = new SchemeRegistry();
schemeRegistry.register(new Scheme("http", PlainSocketFactory
                .getSocketFactory(), 80));
SSLSocketFactory sslSocketFactory = new SSLSocketFactory(localTrustStore);
schemeRegistry.register(new Scheme("https", sslSocketFactory, 443));
HttpParams params = new BasicHttpParams();
ClientConnectionManager cm = 
    new ThreadSafeClientConnManager(params, schemeRegistry);

HttpClient client = new DefaultHttpClient(cm, params); 
</code></pre>

<p>At this point, you have no excuses for trusting all certificates. If you do, it all on you :)</p>
