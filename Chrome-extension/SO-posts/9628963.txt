<p>Here is what found for now:</p>

<h2>Oracle JDK 1.6/1.7, OpenJDK 6/7</h2>

<pre><code>static int indexOf(char[] source, int sourceOffset, int sourceCount,
                   char[] target, int targetOffset, int targetCount,
                   int fromIndex) {
if (fromIndex &gt;= sourceCount) {
        return (targetCount == 0 ? sourceCount : -1);
}
    if (fromIndex &lt; 0) {
        fromIndex = 0;
    }
if (targetCount == 0) {
    return fromIndex;
}

    char first  = target[targetOffset];
    int max = sourceOffset + (sourceCount - targetCount);

    for (int i = sourceOffset + fromIndex; i &lt;= max; i++) {
        /* Look for first character. */
        if (source[i] != first) {
            while (++i &lt;= max &amp;&amp; source[i] != first);
        }

        /* Found first character, now look at the rest of v2 */
        if (i &lt;= max) {
            int j = i + 1;
            int end = j + targetCount - 1;
            for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j] ==
                     target[k]; j++, k++);

            if (j == end) {
                /* Found whole string. */
                return i - sourceOffset;
            }
        }
    }
    return -1;
}
</code></pre>

<h2>IBM JDK 5.0</h2>

<pre><code>public int indexOf(String subString, int start) {
    if (start &lt; 0) start = 0;
    int subCount = subString.count;
    if (subCount &gt; 0) {
        if (subCount + start &gt; count) return -1;
        char[] target = subString.value;
        int subOffset = subString.offset;
        char firstChar = target[subOffset];
        int end = subOffset + subCount;
        while (true) {
            int i = indexOf(firstChar, start);
            if (i == -1 || subCount + i &gt; count) return -1; // handles subCount &gt; count || start &gt;= count
            int o1 = offset + i, o2 = subOffset;
            while (++o2 &lt; end &amp;&amp; value[++o1] == target[o2]);
            if (o2 == end) return i;
            start = i + 1;
        }
    } else return start &lt; count ? start : count;
}
</code></pre>

<h2>Sabre SDK</h2>

<pre><code>  public int indexOf(String str, int fromIndex)
  {
    if (fromIndex &lt; 0)
      fromIndex = 0;
    int limit = count - str.count;
    for ( ; fromIndex &lt;= limit; fromIndex++)
      if (regionMatches(fromIndex, str, 0, str.count))
        return fromIndex;
    return -1;
  }
</code></pre>

<p>Feel free to update this post.</p>
