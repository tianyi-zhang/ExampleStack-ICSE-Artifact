<p>First see how double (or float but I refer only to double below) is <a href="http://en.wikipedia.org/wiki/IEEE_754-1985" rel="nofollow">constructed by IEEE-754 rules</a>:</p>

<p>Then convert double to bits with <code>Double.doubleToLongBits</code>. 
Count the fraction using this method <code>1 + bit_0 * 2^(-1) + bit_1 * 2^(-2) ...</code>.
Multiply the result with exponent (<code>2^(exponent)</code> to be precise) and with a sign.</p>

<p>Here is the code:</p>

<pre><code>double number =  -0.15625;
// Code below doesn't work for 0 and NaN - just check before

long bits = Double.doubleToLongBits(number);

long sign = bits &gt;&gt;&gt; 63;
long exponent = ((bits &gt;&gt;&gt; 52) ^ (sign &lt;&lt; 11)) - 1023;
long fraction = bits &lt;&lt; 12; // bits are "reversed" but that's not a problem

long a = 1L;
long b = 1L;

for (int i = 63; i &gt;= 12; i--) {
    a = a * 2 + ((fraction &gt;&gt;&gt; i) &amp; 1);
    b *= 2;
}

if (exponent &gt; 0)
    a *= 1 &lt;&lt; exponent;
else
    b *= 1 &lt;&lt; -exponent;

if (sign == 1)
    a *= -1;

// Here you have to simplify the fraction

System.out.println(a + "/" + b);
</code></pre>

<p>But be careful - with big exponents you may run into numbers that won't fit into your variables. In fact you may consider storing exponent along the fraction and only multiply it if exponent is small enough. If it's not and you have to display the fraction to the user you may use the scientific notation (that requires solving equation <code>2^n = x * 10^m</code> where m is your decimal exponent and x is a number you have to multiply the fraction with. But that's a matter for another question...).</p>
