<p>You might not be able to sort a HashMap, but you can certainly do something that provides the same effect. I was able to sort my HashMap &lt;String, Integer&gt; by descending value of the Integer by using the excellent code posted at the <a href="http://javarevisited.blogspot.ca/2012/12/how-to-sort-hashmap-java-by-key-and-value.html" rel="nofollow">Javarevisited</a> blog. The same principle would apply to a HashMap &lt;String, String&gt; object:</p>

<pre><code>/*
 * Java method to sort Map in Java by value e.g. HashMap or Hashtable
 * throw NullPointerException if Map contains null values
 * It also sort values even if they are duplicates
 */
public static &lt;K extends Comparable,V extends Comparable&gt; Map&lt;K,V&gt; sortByValues(Map&lt;K,V&gt; map){
    List&lt;Map.Entry&lt;K,V&gt;&gt; entries = new LinkedList&lt;Map.Entry&lt;K,V&gt;&gt;(map.entrySet());

    Collections.sort(entries, new Comparator&lt;Map.Entry&lt;K,V&gt;&gt;() {

        @Override
        public int compare(Entry&lt;K, V&gt; o1, Entry&lt;K, V&gt; o2) {
            return o1.getValue().compareTo(o2.getValue());
            // to compare alphabetically case insensitive return this instead
            // o1.getValue().toString().compareToIgnoreCase(o2.getValue().toString()); 
        }
    });

    //LinkedHashMap will keep the keys in the order they are inserted
    //which is currently sorted on natural ordering
    Map&lt;K,V&gt; sortedMap = new LinkedHashMap&lt;K,V&gt;();

    for(Map.Entry&lt;K,V&gt; entry: entries){
        sortedMap.put(entry.getKey(), entry.getValue());
    }

    return sortedMap;
}
</code></pre>

<p>To call this method, I use:</p>

<pre><code>Map&lt;String, Integer&gt; sorted = sortByValues(myOriginalHashMapObject);
</code></pre>

<p>Read more: <a href="http://javarevisited.blogspot.com/2012/12/how-to-sort-hashmap-java-by-key-and-value.html#ixzz2akXStsGj" rel="nofollow">http://javarevisited.blogspot.com/2012/12/how-to-sort-hashmap-java-by-key-and-value.html#ixzz2akXStsGj</a></p>
