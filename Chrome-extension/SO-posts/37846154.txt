<p>Unfortunately, it is not directly possible to search for an element based on a certain property, using the built-in functions.</p>

<p>There are at least three options how this could be solved:</p>

<ul>
<li>Creating a "template" with the desired property, and search for this</li>
<li>Extract the property values into an array, and search in this array</li>
<li>Create an own, property-based binary search</li>
</ul>

<p>The first one may not be applicable in all cases, and looks questionable in some ways. </p>

<p>The second one is rather easy and could be a viable option. But assuming that you are doing a <em>binary</em> search because the collection is <em>large</em>, this may impose some overhead in terms of memory and performance.</p>

<p>The third option is probably the most elegant and versatile one. Fortunately, the <code>binarySearch</code> itself is not so complex - only a few lines of code - so it's easy to craft an own one that receives some "key extracting <code>Function</code>".</p>

<p>I have sketched these approaches in the following example:</p>

<pre><code>import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.function.Function;

class Animal implements Comparable&lt;Animal&gt;
{
    private final int weight;

    Animal(int weight)
    {
        this.weight = weight;
    }

    public int getWeight()
    {
        return weight;
    }

    @Override
    public int compareTo(Animal that)
    {
        return Integer.compare(this.weight, that.weight);
    }
}

public class CollectionBinarySearch
{
    public static void main(String[] args)
    {
        List&lt;Animal&gt; animals = new ArrayList&lt;Animal&gt;();
        animals.add(new Animal(10));
        animals.add(new Animal(40));
        animals.add(new Animal(20));
        animals.add(new Animal(90));
        animals.add(new Animal(290));
        animals.add(new Animal(130));

        Collections.sort(animals);

        System.out.println(searchWithInstance(animals, 90));
        System.out.println(searchWithInstance(animals, 50));

        System.out.println(searchWithArray(animals, 90));
        System.out.println(searchWithArray(animals, 50));

        System.out.println(searchWithFunction(animals, Animal::getWeight, 90));
        System.out.println(searchWithFunction(animals, Animal::getWeight, 50));

    }

    public static int searchWithInstance(
        final List&lt;? extends Animal&gt; list, final int weight) {
        return Collections.binarySearch(list, new Animal(weight));
    }

    public static int searchWithArray(
        final List&lt;? extends Animal&gt; list, final int weight) {
        int[] array = list.stream().mapToInt(Animal::getWeight).toArray();
        return Arrays.binarySearch(array, weight);
    }        

    // Adapted from Collections#binarySearch
    private static &lt;T, K extends Comparable&lt;? super K&gt;&gt; int searchWithFunction(
        List&lt;? extends T&gt; list, Function&lt;? super T, K&gt; keyExtractor, K key) {
        int low = 0;
        int high = list.size()-1;
        while (low &lt;= high) {
            int mid = (low + high) &gt;&gt;&gt; 1;
            T midVal = list.get(mid);
            int cmp = keyExtractor.apply(midVal).compareTo(key);
            if (cmp &lt; 0)
                low = mid + 1;
            else if (cmp &gt; 0)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found
    }

}
</code></pre>
