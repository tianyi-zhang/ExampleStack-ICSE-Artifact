<p>I had this same problem and came up with a different solution. This one also works when duplicates are involved:</p>

<pre class="lang-java prettyprint-override"><code>public static boolean equalsWithoutOrder(List&lt;?&gt; fst, List&lt;?&gt; snd){
  if(fst != null &amp;&amp; snd != null){
    if(fst.size() == snd.size()){
      // create copied lists so the original list is not modified
      List&lt;?&gt; cfst = new ArrayList&lt;Object&gt;(fst);
      List&lt;?&gt; csnd = new ArrayList&lt;Object&gt;(snd);

      Iterator&lt;?&gt; ifst = cfst.iterator();
      boolean foundEqualObject;
      while( ifst.hasNext() ){
        Iterator&lt;?&gt; isnd = csnd.iterator();
        foundEqualObject = false;
        while( isnd.hasNext() ){
          if( ifst.next().equals(isnd.next()) ){
            ifst.remove();
            isnd.remove();
            foundEqualObject = true;
            break;
          }
        }

        if( !foundEqualObject ){
          // fail early
          break;
        }
      }
      if(cfst.isEmpty()){ //both temporary lists have the same size
        return true;
      }
    }
  }else if( fst == null &amp;&amp; snd == null ){
    return true;
  }
  return false;
}
</code></pre>

<p>Advantages compared to some other solutions:</p>

<ul>
<li>less than O(NÂ²) complexity (although I have not tested it's real performance comparing to solutions in other answers here);</li>
<li>exits early;</li>
<li>checks for null;</li>
<li>works even when duplicates are involved: if you have an array <code>[1,2,3,3]</code> and another array <code>[1,2,2,3]</code> most solutions here tell you they are the same when not considering the order. This solution avoids this by removing equal elements from the temporary lists;</li>
<li>uses semantic equality (<code>equals</code>) and not reference equality (<code>==</code>);</li>
<li>does not sort itens, so they don't need to be sortable (by <code>implement Comparable</code>) for this solution to work.</li>
</ul>
