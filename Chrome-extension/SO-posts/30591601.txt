<p>This is a discussion about the same problem: <a href="https://community.oracle.com/message/10692405" rel="nofollow">Word wrapping behavior in JTextPane since Java 7</a>. The solution proposed by user <a href="https://community.oracle.com/people/StanislavL?customTheme=otn" rel="nofollow">StanislavL</a> (who also appears to be very active on Stack Overflow: <a href="http://stackoverflow.com/users/301607/stanislavl">StanislavL</a>) to support word wrapping works for me using Java 8. It uses a custom <code>WrapEditorKit</code> as the editor kit for the <code>JTextPane</code> (and the <code>WrapEditorKit</code> class in turn uses the <code>WrapColumnFactory</code> and <code>WrapLabelView</code> classes).</p>

<p>Combining this with the <a href="http://www.java2s.com/Code/Java/Swing-JFC/NonWrappingWrapTextPane.htm" rel="nofollow">NonWrappingTextPane example</a> (from the book Core Swing: Advanced Programming by Kim Topley) makes it possible to switch line wrapping off:</p>

<pre><code>import java.awt.*;
import javax.swing.*;

public class WrapTestApp extends JFrame {
    public static void main(final String[] arguments) {
        new WrapTestApp();
    }

    public WrapTestApp() {
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setBounds(800, 400, 200, 200);
        getContentPane().setLayout(new BorderLayout());
        final CustomTextPane textPane = new CustomTextPane(true);
        final JScrollPane scrollPane = new JScrollPane(textPane);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        getContentPane().add(scrollPane, BorderLayout.CENTER);
        textPane.setText("ExampleOfTheWrapLongWordWithoutSpaces");
        setVisible(true);
    }
}
</code></pre>

<p>The <code>CustomTextPane</code> class:</p>

<pre><code>import javax.swing.*;
import javax.swing.text.*;

public class CustomTextPane extends JTextPane {
    private boolean lineWrap;

    public CustomTextPane(final boolean lineWrap) {
        this.lineWrap = lineWrap;

        if (lineWrap)
            setEditorKit(new WrapEditorKit());
    }

    @Override
    public boolean getScrollableTracksViewportWidth() {
        if (lineWrap)
            return super.getScrollableTracksViewportWidth();
        else
            return getParent() == null
                  || getUI().getPreferredSize(this).width &lt;= getParent().getSize().width;
    }

    private class WrapEditorKit extends StyledEditorKit {
        private final ViewFactory defaultFactory = new WrapColumnFactory();

        @Override
        public ViewFactory getViewFactory() {
            return defaultFactory;
        }
    }

    private class WrapColumnFactory implements ViewFactory {
        @Override
        public View create(final Element element) {
            final String kind = element.getName();
            if (kind != null) {
                switch (kind) {
                    case AbstractDocument.ContentElementName:
                        return new WrapLabelView(element);
                    case AbstractDocument.ParagraphElementName:
                        return new ParagraphView(element);
                    case AbstractDocument.SectionElementName:
                        return new BoxView(element, View.Y_AXIS);
                    case StyleConstants.ComponentElementName:
                        return new ComponentView(element);
                    case StyleConstants.IconElementName:
                        return new IconView(element);
                }
            }

            // Default to text display.
            return new LabelView(element);
        }
    }

    private class WrapLabelView extends LabelView {
        public WrapLabelView(final Element element) {
            super(element);
        }

        @Override
        public float getMinimumSpan(final int axis) {
            switch (axis) {
                case View.X_AXIS:
                    return 0;
                case View.Y_AXIS:
                    return super.getMinimumSpan(axis);
                default:
                    throw new IllegalArgumentException("Invalid axis: " + axis);
            }
        }
    }
}
</code></pre>
