<p>Keep the graph creation synchronous and defer object creation until subscribed to with Rx's defer. Downstream injections can be notified via a Subject, upon the object's creation.</p>

<pre><code>@Module public static class AppModule{

    @Provides @Singleton
    public Observable&lt;A&gt; provideA(){
        return Observable.defer(
                () -&gt; Observable.just(new A()) 
        );
    }
}
</code></pre>

<hr>

<pre><code>public class MainActivity extends AppCompatActivity{

    @Inject Observable&lt;A&gt; aObservable;
    A a;
    AppComponent appComponent;

    @Override
    protected void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ButterKnife.bind(this);

        if(appComponent == null){ 
            appComponent = ((App) getApplication())
                .getAppComponent(); 
        }
        appComponent.inject(this);

        aObservable.subscribeOn(Schedulers.io())
                   .observeOn(AndroidSchedulers.mainThread())
                   .subscribe(new Action1&lt;A&gt;(){
                       @Override public void call(final A aa){
                           a = aa;
                           Log.d("MainActivity", "a = aa");
                       }
                   });
    }
}
</code></pre>

<p>Caveats: must manually check for object !null, or rely on the Subject acting as an eventbus, which would pass down the boolean status of the object that downstream injected objects must wait for. </p>
