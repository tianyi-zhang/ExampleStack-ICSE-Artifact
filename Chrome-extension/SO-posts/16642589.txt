<p>You can use a custom adapter extending from <code>ArrayAdapter</code> to which you can pass the <code>ArrayList&lt;LogInfo&gt;</code> .</p>

<p>You can then ovverride the <code>getView(..)</code> method of the Adapter to set the fields you want in the row of the <code>Listview</code> .</p>

<p><strong>UPDATE</strong></p>

<p>From this example at <a href="http://www.vogella.com/articles/AndroidListView/article.html#adapterown_custom" rel="nofollow">Android Custom Adapters</a></p>

<pre><code>import java.util.List;

import android.app.Activity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.TextView;

public class InteractiveArrayAdapter extends ArrayAdapter&lt;LogInfo&gt; {

  private final List&lt;LogInfo&gt; list;
  private final Activity context;

  public InteractiveArrayAdapter(Activity context, List&lt;LogInfo&gt; list) {
    super(context, R.layout.rowbuttonlayout, list);
    this.context = context;
    this.list = list;
  }

  static class ViewHolder {
    protected TextView text1, text2;
  }

  @Override
  public View getView(int position, View convertView, ViewGroup parent) {
    View view = null;
    if (convertView == null) {
      LayoutInflater inflator = context.getLayoutInflater();
      view = inflator.inflate(R.layout.rowbuttonlayout, null);
      final ViewHolder viewHolder = new ViewHolder();
      viewHolder.text1 = (TextView) view.findViewById(R.id.label1);
      viewHolder.text2 = (TextView) view.findViewById(R.id.label2);

      view.setTag(viewHolder);

    } else {
      view = convertView;

    }
    ViewHolder holder = (ViewHolder) view.getTag();
    holder.text1.setText(list.get(position).getName1());
    holder.text2.setText(list.get(position).getName2());
    return view;
  }
} 
</code></pre>
