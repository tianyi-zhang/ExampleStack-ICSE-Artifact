<p>Expansion files removes the restriction of uploading more than 50mb apk size. This files you have to attach when uploading apk.</p>

<p>There are naming convention you have to follow while creating Expansion files</p>

<p><code>[main|patch].&lt;expansion-version&gt;.&lt;package-name&gt;.obb</code></p>

<p>note: </p>

<ol>
<li><code>main</code>- are those files without this your application will not going to run</li>
<li><code>patch</code>- are those files which are additional, without this your application can run</li>
<li><code>expansion-version</code>- version that you are giving to your apk, so that Expansion files of different version will not conflict</li>
<li><code>package-name</code>-This is your unique package name</li>
</ol>

<p><code>.obb</code> we are not appending, it will implicitly appended by Google while uploading</p>

<p>suppose you have all the content in your current directory so just select all the content and make it a zip named <code>main.2.com.xyz.abc.zip</code> and attach it with while uploading apk</p>

<p><img src="http://i.stack.imgur.com/YJgkY.png" alt="enter image description here"></p>

<p>This all uploading part, now downloading part</p>

<p>First of all you need to download <em>Google extra package</em> by clicking on SDK-Manager</p>

<p><img src="http://i.stack.imgur.com/2D4yE.png" alt="enter image description here"></p>

<p>Now create new project from existing source and import <strong>market_licensing</strong>, <strong>play_apk_expansion</strong> from the path <em>sdk-path/extras/google</em></p>

<p>Remember: Free app doesnt require Licensing but Expansion concept required, you just need not to bother by giving reference of market_licensing to your project it will implicitly manage.</p>

<p><code>play_apk_expansion</code> contains three projects <code>downloader_library</code>, <code>zip_file</code>, <code>downloader_sample</code>.</p>

<p>downloader_library itself having the reference of Market_licensing.</p>

<p>Now you just need to concentrate on <code>downloader_sample</code> first change the packagename(for testing) to your packagename(packagename same as uploaded apk)</p>

<p>Very Important
In <code>SampleDownloaderActivity</code> navigate to...</p>

<pre><code>private static final XAPKFile[] xAPKS = {
            new XAPKFile(
                    true, // true signifies a main file
                    2, // the version of the APK that the file was uploaded
                       // against
                    xxxxxxxxxxxL // the length of the zipfile in bytes right click on you expansion file and get the size in bytes, size must be same as zip size
            ),

    };
</code></pre>

<p>Now This activity will download the Expansion file and will store it in <code>sdcard/Android/obb/[main|patch].&lt;expansion-version&gt;.&lt;package-name&gt;.obb</code> ignore obb, just unzip this file anywhere you want (<code>sdcard/Android/data</code> recommended because it removes when your application get uninstalled).</p>

<p>There are latest device which download Expansion files directly from Play store and it get stored in <code>sdcard/Android/obb/</code> so you have to be very careful to check all the cases</p>

<ol>
<li>Obb already downloaded</li>
<li>Available memory</li>
<li>downloaded but not unzipped </li>
<li>Memory to select(see Memory Cases)</li>
</ol>

<p><strong>Memory Cases:</strong>
if you take any new device or for ex. micromax funbook, then its having three memory </p>

<ul>
<li>/data/data/ (phone internal memory) <em>getFilesDirectory()</em></li>
<li>/mnt/sdcard/ (phone's internal sdcard) <em>Environment.getExternalStorageDirectory()</em></li>
<li>/mnt/extsd/ (External sdcard) <em>/mnt/extsd</em></li>
</ul>

<p>Hope this will help you and will meet your requirements.</p>

<p>And one more thing use this below <code>ZipHelper</code> to unzipped the content.</p>

<p><strong>ZipHelper.java</strong></p>

<pre><code>public class ZipHelper
{
    boolean zipError=false;

    public boolean isZipError() {
        return zipError;
    }

    public void setZipError(boolean zipError) {
        this.zipError = zipError;
    }

    public void unzip(String archive, File outputDir)
    {
        try {
            Log.d("control","ZipHelper.unzip() - File: " + archive);
            ZipFile zipfile = new ZipFile(archive);
            for (Enumeration e = zipfile.entries(); e.hasMoreElements(); ) {
                ZipEntry entry = (ZipEntry) e.nextElement();
                unzipEntry(zipfile, entry, outputDir);

            }
        }
        catch (Exception e) {
            Log.d("control","ZipHelper.unzip() - Error extracting file " + archive+": "+ e);
            setZipError(true);
        }
    }

    private void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException
    {
        if (entry.isDirectory()) {
            createDirectory(new File(outputDir, entry.getName()));
            return;
        }

        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()){
            createDirectory(outputFile.getParentFile());
        }

        Log.d("control","ZipHelper.unzipEntry() - Extracting: " + entry);
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));

        try {
            IOUtils.copy(inputStream, outputStream);
        }
        catch (Exception e) {
            Log.d("control","ZipHelper.unzipEntry() - Error: " + e);
            setZipError(true);
        }
        finally {
            outputStream.close();
            inputStream.close();
        }
    }

    private void createDirectory(File dir)
    {
        Log.d("control","ZipHelper.createDir() - Creating directory: "+dir.getName());
        if (!dir.exists()){
            if(!dir.mkdirs()) throw new RuntimeException("Can't create directory "+dir);
        }
        else Log.d("control","ZipHelper.createDir() - Exists directory: "+dir.getName());
    }
}
</code></pre>
