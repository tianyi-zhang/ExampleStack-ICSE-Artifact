<p>All the magic happens inside org.springframework.beans.propertyeditors.CustomCollectionEditor.
It's responsible for creating a property of a certain type (List in your case) from context-supplied object (Set in your example):</p>

<pre><code>public void setValue(Object value) {
    if (value == null &amp;&amp; this.nullAsEmptyCollection) {
        super.setValue(createCollection(this.collectionType, 0));
    }
    else if (value == null || (this.collectionType.isInstance(value) &amp;&amp; !alwaysCreateNewCollection())) {
        // Use the source value as-is, as it matches the target type.
        super.setValue(value);
    }
    else if (value instanceof Collection) {
        // Convert Collection elements.
        Collection source = (Collection) value;
        Collection target = createCollection(this.collectionType, source.size());
        for (Object elem : source) {
            target.add(convertElement(elem));
        }
        super.setValue(target);
    }
    else if (value.getClass().isArray()) {
        // Convert array elements to Collection elements.
        int length = Array.getLength(value);
        Collection target = createCollection(this.collectionType, length);
        for (int i = 0; i &lt; length; i++) {
            target.add(convertElement(Array.get(value, i)));
        }
        super.setValue(target);
    }
    else {
        // A plain value: convert it to a Collection with a single element.
        Collection target = createCollection(this.collectionType, 1);
        target.add(convertElement(value));
        super.setValue(target);
    }
}


protected Collection createCollection(Class collectionType, int initialCapacity) {
    if (!collectionType.isInterface()) {
        try {
            return (Collection) collectionType.newInstance();
        }
        catch (Exception ex) {
            throw new IllegalArgumentException(
                    "Could not instantiate collection class [" + collectionType.getName() + "]: " + ex.getMessage());
        }
    }
    else if (List.class.equals(collectionType)) {
        return new ArrayList(initialCapacity);
    }
    else if (SortedSet.class.equals(collectionType)) {
        return new TreeSet();
    }
    else {
        return new LinkedHashSet(initialCapacity);
    }
}
</code></pre>

<p>So, as the first step a Set is created from your context definition and after that it's transformed to the List by PropertyEditor implementation. Check out other PropertyEditors from the same package, some of them perform similar implicit conversions, e.g. Map &lt;-> Properties and so on.</p>
