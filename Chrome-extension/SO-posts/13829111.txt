<p>Matt's approach above is fine, but please be aware that you will run into problems if you use it to differentiate between dates of the format <code>y/M/d</code> and <code>d/M/y</code>. For instance, a formatter initialised with <code>y/M/d</code> will accept a date like <code>01/01/2009</code> and give you back a date which is clearly not what you wanted. I fixed the issue as follows, but I have limited time and I'm not happy with the solution for 2 main reasons:</p>

<ol>
<li>It violates one of Josh Bloch's quidelines, specifically 'don't use exceptions to handle program flow'.</li>
<li>I can see the <code>getDateFormat()</code> method becoming a bit of a nightmare if you needed it to handle lots of other date formats.</li>
</ol>

<p>If I had to make something that could handle lots and lots of different date formats and needed to be highly performant, then I think I would use the approach of creating an enum which linked each different date regex to its format. Then use <code>MyEnum.values()</code> to loop through the enum and test with <code>if(myEnum.getPattern().matches(date))</code> rather than catching a dateformatexception.</p>

<p>Anway, that being said, the following can handle dates of the formats <code>'y/M/d' 'y-M-d' 'y M d' 'd/M/y' 'd-M-y' 'd M y'</code> and all other variations of those which include time formats as well:</p>

<pre class="lang-java prettyprint-override"><code>import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DateUtil {
    private static final String[] timeFormats = {"HH:mm:ss","HH:mm"};
    private static final String[] dateSeparators = {"/","-"," "};

    private static final String DMY_FORMAT = "dd{sep}MM{sep}yyyy";
    private static final String YMD_FORMAT = "yyyy{sep}MM{sep}dd";

    private static final String ymd_template = "\\d{4}{sep}\\d{2}{sep}\\d{2}.*";
    private static final String dmy_template = "\\d{2}{sep}\\d{2}{sep}\\d{4}.*";

    public static Date stringToDate(String input){
    Date date = null;
    String dateFormat = getDateFormat(input);
    if(dateFormat == null){
        throw new IllegalArgumentException("Date is not in an accepted format " + input);
    }

    for(String sep : dateSeparators){
        String actualDateFormat = patternForSeparator(dateFormat, sep);
        //try first with the time
        for(String time : timeFormats){
        date = tryParse(input,actualDateFormat + " " + time);
        if(date != null){
            return date;
        }
        }
        //didn't work, try without the time formats
        date = tryParse(input,actualDateFormat);
        if(date != null){
        return date;
        }
    }

    return date;
    }

    private static String getDateFormat(String date){
    for(String sep : dateSeparators){
        String ymdPattern = patternForSeparator(ymd_template, sep);
        String dmyPattern = patternForSeparator(dmy_template, sep);
        if(date.matches(ymdPattern)){
        return YMD_FORMAT;
        }
        if(date.matches(dmyPattern)){
        return DMY_FORMAT;
        }
    }
    return null;
    }

    private static String patternForSeparator(String template, String sep){
    return template.replace("{sep}", sep);
    }

    private static Date tryParse(String input, String pattern){
    try{
        return new SimpleDateFormat(pattern).parse(input);
    }
    catch (ParseException e) {}
    return null;
    }


}
</code></pre>
