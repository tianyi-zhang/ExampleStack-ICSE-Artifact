<p>If you really want to use androids simple list layout, <a href="https://code.google.com/p/pdn-slatedroid/source/browse/trunk/eclair/frameworks/base/core/res/res/layout/simple_dropdown_item_1line.xml?r=44" rel="nofollow">we see that they declare their textview's identifier as such</a>:</p>

<pre><code>&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android" 
    android:id="@android:id/text1"
    style="?android:attr/dropDownItemStyle"
    android:textAppearance="?android:attr/textAppearanceLargeInverse"
    android:singleLine="true"
    android:layout_width="fill_parent"
    android:layout_height="?android:attr/listPreferredItemHeight"
    android:ellipsize="marquee" /&gt;
</code></pre>

<p>So just make your custom adapter, inflate their layout &amp; find that text view's id.  Something like the following:</p>

<pre><code>    public final class CustomAdapter extends ArrayAdapter&lt;String&gt; {  

    private Context context;
    ViewHolder holder; 
    private ArrayList&lt;String&gt; messages;


    public CustomAdapter(Context context, ArrayList&lt;String&gt; data) {

        this.context = context;
        this.messages = data;
        Log.d("ChatAdapter", "called constructor");

    }

    public int getCount() {
        return messages.size();
    }


    public View getView(int position, View convertView, ViewGroup viewGroup) {

        if (convertView == null) {
            LayoutInflater inflater = (LayoutInflater) context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.simple_dropdown_item_1line, null);

            holder = new ViewHolder();
            holder.message = (TextView) convertView
                    .findViewById(R.id.text1);

            convertView.setTag(holder);

        } else {
            holder = (ViewHolder) convertView.getTag();

        }

        holder.message.setText(data.get(position));
        holder.message.setTextColor(Color.BLUE);

        // don't do this, remember the face variable once just showing explicitly for u
        Typeface face=Typeface.createFromAsset(getAssets(), "fonts/HandmadeTypewriter.ttf"); 

        holder.message.setTypeface(face); 
        return convertView;
    }

    public static class ViewHolder {
        public TextView message;
    }
}
</code></pre>

<p>Edit: The following is how you would use the custom array adapter in your activity.</p>

<pre><code>// I'm not sure if your sp or lv1 wants the adapter, but
// whatever you require your list view's data to be just 
// set the custom adapter to it
CustomAdapter&lt;String&gt; myAdapter = new ArrayAdapter&lt;String&gt;(this, s1);
lv1=(ListView) findViewById(R.id.listView1)
lv1.setAdapter(myAdapter);
</code></pre>
