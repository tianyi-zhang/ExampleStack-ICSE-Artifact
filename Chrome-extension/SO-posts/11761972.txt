<p>Found a workaround myself, so posting it here in case anybody will need this.
This code worked for me:</p>

<pre><code>public static void clickOnUpActionBarButton(Activity activity) {
        ActionMenuItem logoNavItem = new ActionMenuItem(activity, 0, android.R.id.home, 0, 0, "");
        ActionBarSherlockCompat absc = (ActionBarSherlockCompat) UiTestUtils.invokePrivateMethodWithoutParameters(
                SherlockFragmentActivity.class, "getSherlock", activity);
        absc.onMenuItemSelected(Window.FEATURE_OPTIONS_PANEL, logoNavItem);
    }
</code></pre>

<p>First you need to obtain ActionBarSherlockCompat object by calling <code>getSherlock()</code> on SherlockFragmentActivity. This method is protected, so I used Reflection API to call it:</p>

<pre><code>public static Object invokePrivateMethodWithoutParameters(Class&lt;?&gt; clazz, String methodName, Object receiver) {
        Method method = null;
        try {
            method = clazz.getDeclaredMethod(methodName, (Class&lt;?&gt;[]) null);
        } catch (NoSuchMethodException e) {
            Log.e(TAG, e.getClass().getName() + ": " + methodName);
        }

        if (method != null) {
            method.setAccessible(true);

            try {
                return method.invoke(receiver, (Object[]) null);
            } catch (IllegalArgumentException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (InvocationTargetException e) {
                e.printStackTrace();
            }
        }

        return null;
    }
</code></pre>

<p>You need to pass <code>solo.getCurrentActivity()</code> to my <code>clickOnUpActionBarButton(Activity activity)</code> method and Up button will be pressed.</p>
