<p>You need to implement a <code>GcmListenerService</code>, below is an example:</p>

<pre><code>/**
 * Service used for receiving GCM messages. When a message is received this service will log it.
 */
public class GcmService extends GcmListenerService {
  private final int PN_ID = 993;

  Booking mBooking;

  private static final String TYPE = "type";
  private static final String TITLE = "title";
  private static final String MESSAGE = "body";

  private NotificationManager mNotificationManager;

  public GcmService() {

  }

  @Override
  public void onMessageReceived(String from, final Bundle data) {

    String type = data.getString(TYPE, "");
    final String title = data.getString(TITLE, "");
    final String message = data.getString(MESSAGE, "");

    if (title.length() &gt; 0 || message.length() &gt; 0) {
      sendNotification(PN_ID, title, message);
    }
  }

  @Override
  public void onDeletedMessages() {
    sendNotification(PN_ID, "Deleted messages on server", "");
  }

  @Override
  public void onMessageSent(String msgId) {
    sendNotification(PN_ID, "Upstream message sent. Id=" + msgId, "");
  }

  @Override
  public void onSendError(String msgId, String error) {
    sendNotification(PN_ID, "", "Upstream message send error. Id=" + msgId + ", error" + error);
  }

  // Post a notification indicating whether a doodle was found.
  private void sendNotification(int notificationId, String title, String msg) {
    mNotificationManager = (NotificationManager)
        this.getSystemService(Context.NOTIFICATION_SERVICE);


    PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
        new Intent(this, MainActivity.class), 0);


    NotificationCompat.Builder mBuilder =
        new NotificationCompat.Builder(this)
            .setSmallIcon(R.mipmap.ic_launcher)
            .setContentTitle(title)
            .setStyle(new NotificationCompat.BigTextStyle().bigText(msg))
            .setContentText(msg)
            .setAutoCancel(true);


    mBuilder.setContentIntent(contentIntent);
    mNotificationManager.notify(notificationId, mBuilder.build());
  }


}
</code></pre>

<p>Register it in your manifest inside <code>&lt;application&gt;</code> like any other <code>Service</code></p>

<pre><code>    &lt;service
        android:name=".services.GcmService"
        android:exported="false"&gt;
        &lt;intent-filter&gt;
            &lt;action android:name="com.google.android.c2dm.intent.RECEIVE"/&gt;
        &lt;/intent-filter&gt;
    &lt;/service&gt;
</code></pre>

<p>You will need at least these permissions, I suspect you may even need <code>WAKE_LOCK</code>.</p>

<pre><code>&lt;!-- PUSH NOTIFICATIONS --&gt;
&lt;uses-permission android:name="com.google.android.c2dm.permission.RECEIVE"/&gt;

&lt;permission
    android:name="au.com.myapp.permission.C2D_MESSAGE"
    android:protectionLevel="signature"/&gt;

&lt;uses-permission android:name="au.com.myapp.permission.C2D_MESSAGE"/&gt;
</code></pre>

<p>In this setup, your payload that you send to the GCM service will look something like this:</p>

<pre><code>{       
  "registration_ids":[],
  "data": {
    "title" : "Hello",
    "message" : "World",
  } 
}
</code></pre>

<p>Where <code>registration_ids</code> are the devices you want to send the message to, and the <code>data</code> is what will be delivered to you in the <code>Bundle</code>.</p>
