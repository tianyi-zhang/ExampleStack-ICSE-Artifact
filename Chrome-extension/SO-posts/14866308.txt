<p>Android password handling is detailed in the sources at <a href="https://android.googlesource.com/platform/frameworks/base/+/HEAD/core/java/com/android/internal/widget/LockPatternUtils.java" rel="nofollow">LockPatternUtils.java</a>, near line 820:</p>

<pre><code>public byte[] passwordToHash(String password) {
    if (password == null) {
        return null;
    }
    String algo = null;
    byte[] hashed = null;
    try {
        byte[] saltedPassword = (password + getSalt()).getBytes();
        byte[] sha1 = MessageDigest.getInstance(algo = "SHA-1").digest(saltedPassword);
        byte[] md5 = MessageDigest.getInstance(algo = "MD5").digest(saltedPassword);
        hashed = (toHex(sha1) + toHex(md5)).getBytes();
    } catch (NoSuchAlgorithmException e) {
        Log.w(TAG, "Failed to encode string because of missing algorithm: " + algo);
    }
    return hashed;
}
</code></pre>

<p>It looks like the general idea is to force a bad you to guess a correct password constrained by both MD5 and SHA1. That means a bad guy must get the intersection (not union) the MD5 and SHA-1 hashes.</p>

<p>Unfortunately, the MD5 component allows for password recovery. Perhaps a better strategy would have been folding MD5 into SHA-1 (to remove naked access to MD5).</p>

<p>By the way, there is a bug report for that (TM): <a href="http://code.google.com/p/android/issues/detail?id=37213" rel="nofollow">Lock Pattern/Password uses MD5 Hash (LockPatternUtils.java)</a>.</p>
