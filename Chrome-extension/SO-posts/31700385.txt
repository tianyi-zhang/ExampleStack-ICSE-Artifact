<p>The example you follow is pretty unlucky. The default behavior of <code>FloatingActionButton</code> within <code>CoordinatorLayout</code> is to move up when you display <code>SnackBar</code>. Since this code overrides the <code>Behavior</code> you lose this feature because the methods never call their super class implementations. Clearly the author have not thought about this. However, you can modify the <code>ScrollingFABBehavior</code> to extend the original <code>Behavior</code> and thus support <code>SnackBar</code>:</p>

<pre><code>public class ScrollingFABBehavior extends FloatingActionButton.Behavior {
    private int toolbarHeight;

    public ScrollingFABBehavior(Context context, AttributeSet attrs) {
        super();
        this.toolbarHeight = Utils.getToolbarHeight(context);
    }

    @Override
    public boolean layoutDependsOn(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        return super.layoutDependsOn(parent, fab, dependency) || (dependency instanceof AppBarLayout);
    }

    @Override
    public boolean onDependentViewChanged(CoordinatorLayout parent, FloatingActionButton fab, View dependency) {
        boolean returnValue = super.onDependentViewChanged(parent, fab, dependency);
        if (dependency instanceof AppBarLayout) {
            CoordinatorLayout.LayoutParams lp = (CoordinatorLayout.LayoutParams) fab.getLayoutParams();
            int fabBottomMargin = lp.bottomMargin;
            int distanceToScroll = fab.getHeight() + fabBottomMargin;
            float ratio = (float)dependency.getY()/(float)toolbarHeight;
            fab.setTranslationY(-distanceToScroll * ratio);
        }
        return returnValue;
    }
}    
</code></pre>

<p><em>This is actually the class from the example's <a href="https://github.com/mzgreen/HideOnScrollExample" rel="nofollow">github repository</a>, I have found it just after I coded the same myself and wanted to test it. They only forgot to update the blog post :-/</em></p>
