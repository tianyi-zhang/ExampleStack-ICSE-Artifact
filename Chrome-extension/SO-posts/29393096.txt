<p>The service method in the HttpServlet class check which method is in the head request and redirect to a specified method like when its a get request the doGet method will be called, its used when your servlet will answer with diferrent purpose for diferent methods, like in a REST service, when you have a GET request, you'll return an information, but when you have a PUT request, you'll update an information, so the servlet provide this method for you. </p>

<p>Plus it guarantee that you servlet won't answer to the wrong request, using the service method like you did, i can call your servlet even with a strange request like "request method TEST" and the servlet will responde, and keep your code cleaner.</p>

<p>See the original service code:</p>

<pre><code>protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String method = req.getMethod();
        long errMsg;
        if(method.equals("GET")) {
            errMsg = this.getLastModified(req);
            if(errMsg == -1L) {
                this.doGet(req, resp);
            } else {
                long ifModifiedSince = req.getDateHeader("If-Modified-Since");
                if(ifModifiedSince &lt; errMsg) {
                    this.maybeSetLastModified(resp, errMsg);
                    this.doGet(req, resp);
                } else {
                    resp.setStatus(304);
                }
            }
        } else if(method.equals("HEAD")) {
            errMsg = this.getLastModified(req);
            this.maybeSetLastModified(resp, errMsg);
            this.doHead(req, resp);
        } else if(method.equals("POST")) {
            this.doPost(req, resp);
        } else if(method.equals("PUT")) {
            this.doPut(req, resp);
        } else if(method.equals("DELETE")) {
            this.doDelete(req, resp);
        } else if(method.equals("OPTIONS")) {
            this.doOptions(req, resp);
        } else if(method.equals("TRACE")) {
            this.doTrace(req, resp);
        } else {
            String errMsg1 = lStrings.getString("http.method_not_implemented");
            Object[] errArgs = new Object[]{method};
            errMsg1 = MessageFormat.format(errMsg1, errArgs);
            resp.sendError(501, errMsg1);
        }

    }
</code></pre>

<p>It reacts diferrent based on what request method is used.</p>

<p>If you do a custom http request, you can set the method you want, instead of GET or PUT or DELETE you could send TEST and your service would throw a "Method not implementation" exception, but if you override the service method it simple will answer, your servlet code will be executed anyway.</p>
