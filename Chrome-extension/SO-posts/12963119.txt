<p>Load the js file, get an array of the town names, and put them in an <a href="http://developer.android.com/reference/android/widget/ArrayAdapter.html" rel="nofollow">ArrayAdapter</a>. Then pass the adapter to your spinner:</p>

<pre><code>spinner.setAdapter(adapter);
</code></pre>

<p>Do this once for each of your two spinners.</p>

<p>More on spinners: <a href="http://developer.android.com/guide/topics/ui/controls/spinner.html" rel="nofollow">http://developer.android.com/guide/topics/ui/controls/spinner.html</a></p>

<p><strong>Update</strong></p>

<p>To load the js file (I assume it contains a JSON array), you can put it in <code>resources/raw</code> and do this:</p>

<pre><code>// open the input stream
InputStream is = context.getResources().openRawResource(R.raw.dist);

// read into a buffer
// NOTE: This is ugly, and there may be a better way, but it works.
Writer writer = new StringWriter(is.available());
char[] buffer = new char[1024];
Reader reader = new BufferedReader(new InputStreamReader(is, "UTF-8"));
try {
    int n;
    while ((n = reader.read(buffer)) != -1) {
        writer.write(buffer, 0, n);
    }
} finally {
    reader.close();
}
String jsonString = writer.toString();

// load into a JSONArray
// if your file contains a single object, use JSONObject instead
JSONArray json = new JSONArray(jsonString);
</code></pre>

<p>If your json file is really big, there is a way to parse a stream into JSON without reading the whole thing first, but it's more complicated.  I recommend <a href="http://jackson.codehaus.org/" rel="nofollow">Jackson</a> for that, and really for all your JSON needs in general. <a href="http://code.google.com/p/google-gson/" rel="nofollow">Gson</a> is another option.</p>
