<p>Here's some code to help you.       </p>

<pre><code>String url= 
"http://maps.googleapis.com/maps/api/directions/json?origin=" 
+ origin.latitude + "," + origin.longitude +"&amp;destination=" 
+ destination.latitude + "," + destination.longitude + "&amp;sensor=false";
</code></pre>

<p>To fetch the data with androidhttpclient, do something like this:</p>

<pre><code>HttpResponse response;
HttpGet request;
AndroidHttpClient client = AndroidHttpClient.newInstance("somename");

request = new HttpGet(url);
response = client.execute(request);

InputStream source = response.getEntity().getContent();
String returnValue = buildStringIOutils(source);

return returnValue;
</code></pre>

<p>where buildStringIOUtils is:</p>

<pre><code>private String buildStringIOutils(InputStream is) {
    try {
        return IOUtils.toString(is, "UTF-8");
    } catch (IOException e) {
        e.printStackTrace();
        return null;
    }
}
</code></pre>

<p>You can then extract the actual polyline from the JSON-response with something like this:</p>

<pre><code>JSONObject result = new JSONObject(returnValue);
JSONArray routes = result.getJSONArray("routes");

                    long distanceForSegment = routes.getJSONObject(0).getJSONArray("legs").getJSONObject(0).getJSONObject("distance").getInt("value");

                    JSONArray steps = routes.getJSONObject(0).getJSONArray("legs")
                            .getJSONObject(0).getJSONArray("steps");

                    List&lt;LatLng&gt; lines = new ArrayList&lt;LatLng&gt;();

                    for(int i=0; i &lt; steps.length(); i++) {
                        String polyline = steps.getJSONObject(i).getJSONObject("polyline").getString("points");

                        for(LatLng p : decodePolyline(polyline)) {
                            lines.add(p);
                        }
                    }
</code></pre>

<p>where the method decodePolyline is this:</p>

<pre><code>    /** POLYLINE DECODER - http://jeffreysambells.com/2010/05/27/decoding-polylines-from-google-maps-direction-api-with-java **/
    private List&lt;LatLng&gt; decodePolyline(String encoded) {

        List&lt;LatLng&gt; poly = new ArrayList&lt;LatLng&gt;();

        int index = 0, len = encoded.length();
        int lat = 0, lng = 0;

        while (index &lt; len) {
            int b, shift = 0, result = 0;
            do {
                b = encoded.charAt(index++) - 63;
                result |= (b &amp; 0x1f) &lt;&lt; shift;
                shift += 5;
            } while (b &gt;= 0x20);
            int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
            lat += dlat;

            shift = 0;
            result = 0;
            do {
                b = encoded.charAt(index++) - 63;
                result |= (b &amp; 0x1f) &lt;&lt; shift;
                shift += 5;
            } while (b &gt;= 0x20);
            int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
            lng += dlng;

            LatLng p = new LatLng((double) lat / 1E5, (double) lng / 1E5);
            poly.add(p);
        }

        return poly;
    }
</code></pre>

<p>You can then add the polyline to the map with this:</p>

<pre><code>Polyline polylineToAdd = mMap.addPolyline(new PolylineOptions().addAll(lines).width(3).color(Color.RED));
</code></pre>

<p>To change mode, add this to the url (See <a href="https://developers.google.com/maps/documentation/directions/">https://developers.google.com/maps/documentation/directions/</a>):
&amp;mode=YOUR_MODE</p>

<p>driving (default) indicates standard driving directions using the road network.</p>

<p>walking requests walking directions via pedestrian paths &amp; sidewalks (where available).</p>

<p>bicycling requests bicycling directions via bicycle paths &amp; preferred streets (where available).</p>

<p>transit requests directions via public transit routes (where available).</p>

<p>Edit:
About the "I would also like to get traffic information such as busy routes, congestion, etc." I have not looked into this, but my code should get you started pretty good.</p>

<p>Edit2:
Found this in the google directions api:
"For Driving Directions: Maps for Business customers can specify the departure_time to receive trip duration considering current traffic conditions. The departure_time must be set to within a few minutes of the current time."</p>
