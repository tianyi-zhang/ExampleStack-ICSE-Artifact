<p>This is a method that I have used quite a bit in my apps and have had work out quite well for me:</p>

<pre><code>static private int screenW = 0, screenH = 0;

@SuppressWarnings("deprecation") static public boolean onScreen(View view) {
    int coordinates[] = { -1, -1 };
    view.getLOcationOnScreen(coordinates);
    if (coordinates[0] + view.getWidth() &lt; 0) return false;
    if (coordinates[1] + view.getHeight() &lt; 0) return false;

    if (screenW == 0 || screenH == 0) {
        if (MyApplication.getSharedContext() == null) return false;
        Display display = ((WindowManager)MyApplication.getSharedContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
        try {
            Point screenSize = new Point();
            display.getSize(screenSize); // Only available on API 13+
            screenW = screenSize.x;
            screenH = screenSize.y;
        } catch (NoSuchMethodError e) { // The backup methods will only be used if the device is running pre-13, so it's fine that they were deprecated in API 13, thus the suppress warnings annotation at the start of the method.
            screenW = display.getWidth();
            screenH = display.getHeight();
        }
    }

    if (coordinates[0] &gt; screenW) return false;
    if (coordinates[1] &gt; screenH) return false;

    return true;
}
</code></pre>

<p>To use it, just pass in any view or subclass of view (IE, just about anything that draws on screen in Android.) It'll return <code>true</code> if it's on screen or <code>false</code> if it's not... pretty intuitive, I think.</p>

<p>If you're not using the above method as a static, then you can probably get a context some other way, but in order to get the Application context from a static method, you need to do these two things:</p>

<p>1 - Add the following attribute to your <code>application</code> tag in your manifest:</p>

<pre><code>android:name="com.package.MyApplication"
</code></pre>

<p>2 - Add in a class that extends Application, like so:</p>

<pre><code>public class MyApplication extends Application {
    // MyApplication exists solely to provide a context accessible from static methods.
    private static Context context;

    @Override public void onCreate() {
        super.onCreate();
        MyApplication.context = getApplicationContext();
    }

    public static Context getSharedContext() {
        return MyApplication.context;
    }
}
</code></pre>
