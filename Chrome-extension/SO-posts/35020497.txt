<p>I don't what do you mean in real. but I feel you want your listView items have child that after click on an item you open and close it. let me if I think wrong but to do this you can use expandableListView. here is an example of adapter for it:</p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter {

private Context context;
private LayoutInflater inflater;

private List&lt;String&gt; _listDataHeader; // header titles
// child data in format of header title, child title
private HashMap&lt;String, List&lt;String&gt;&gt; _listDataChild;

public ExpandableListAdapter2(Context context, List&lt;String&gt; listDataHeader,
                              HashMap&lt;String, List&lt;String&gt;&gt; listChildData) {
    this.context = context;
    this._listDataHeader = listDataHeader;
    this._listDataChild = listChildData;
}

@Override
public Object getChild(int groupPosition, int childPosititon) {
    return this._listDataChild.get(this._listDataHeader.get(groupPosition))
            .get(childPosititon);
}

@Override
public long getChildId(int groupPosition, int childPosition) {
    return childPosition;
}

@Override
public View getChildView(int groupPosition, final int childPosition,
                         boolean isLastChild, View convertView, ViewGroup parent) {
    ViewHolder holder;
    final String childText = (String) getChild(groupPosition, childPosition);
    if (inflater == null)
        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (convertView == null) {
        convertView = inflater.inflate(R.layout.expandable_list_item, null);
        holder = new ViewHolder();
        holder.title = (TextView) convertView.findViewById(R.id.lblListItem);
        convertView.setTag(holder);
    } else
        holder = (ViewHolder) convertView.getTag();
    holder.title.setText(childText);

    return convertView;
}

@Override
public int getChildrenCount(int groupPosition) {
    return this._listDataChild.get(this._listDataHeader.get(groupPosition)).size();
}

@Override
public Object getGroup(int groupPosition) {
    return this._listDataHeader.get(groupPosition);
}

@Override
public int getGroupCount() {
    return this._listDataHeader.size();
}

@Override
public long getGroupId(int groupPosition) {
    return groupPosition;
}

@Override
public View getGroupView(int groupPosition, boolean isExpanded,
                         View convertView, ViewGroup parent) {
    String headerTitle = (String) getGroup(groupPosition);
    ViewHolder holder;
    if (inflater == null)
        inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    if (convertView == null) {
        convertView = inflater.inflate(R.layout.expandable_list_group, null);
        holder = new ViewHolder();
        holder.title = (TextView) convertView.findViewById(R.id.lblListHeader);
        convertView.setTag(holder);
    } else
        holder = (ViewHolder) convertView.getTag();
    holder.title.setText(headerTitle);

    return convertView;
}

@Override
public boolean hasStableIds() {
    return false;
}

@Override
public boolean isChildSelectable(int groupPosition, int childPosition) {
    return true;
}

private class ViewHolder {
    public TextView title;
}
}
</code></pre>

<p>anyway if you want to save a position of listView you can save data in adapeter and load it again in getView method. for example you want to save state of some checkable item you can use an array of boolean:</p>

<pre><code>    private boolean[] itemTF;
    @Override
public View getView(final int position, View convertView, ViewGroup parent) {
    View v = LayoutInflater.from(context).inflate(R.layout.score_list_item, null, false);
    TextView textView15 = (TextView) v.findViewById(R.id.textView15);
    CheckBox checkBox = (CheckBox) v.findViewById(R.id.checkBox2);
    if (itemTF[position])
        checkBox.setChecked(true);
    else checkBox.setChecked(false);

    checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
        @Override
        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
            itemTF[position] = isChecked;
        }
    });
    return v;
}
</code></pre>
