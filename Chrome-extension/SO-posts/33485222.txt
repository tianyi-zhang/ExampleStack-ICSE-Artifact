<p>I have implemented a new <a href="https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/DrawerItems/OverflowMenuDrawerItem.java" rel="nofollow">OverflowMenuDrawerItem</a> which is now part of the sample application which showcases a custom <code>DrawerItem</code> with a <code>Overflow</code> menu. It uses a <code>PopupMenu</code> as already suggested by @Rachit Mishra and fills it with a <code>R.menu.*</code> xml. </p>

<p>You could also use this and update the <code>DrawerItem</code>s text after an element was selected within the overflow menu. </p>

<p>Or to get exactly your use case, just use a normal <code>PrimaryDrawerItem</code> and show the <code>PopupMenu</code> as done <a href="https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/DrawerItems/OverflowMenuDrawerItem.java#L80" rel="nofollow">here</a>. If the user then selects an item in the overflow menu just update the <code>DrawerItem</code> with the new selected text.</p>

<hr>

<p>The <a href="https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/DrawerItems/OverflowMenuDrawerItem.java" rel="nofollow">OverflowMenuDrawerItem</a></p>

<pre><code>public class OverflowMenuDrawerItem extends BasePrimaryDrawerItem&lt;OverflowMenuDrawerItem&gt; {
    private int mMenu;

    public OverflowMenuDrawerItem withMenu(int menu) {
        this.mMenu = menu;
        return this;
    }

    public int getMenu() {
        return mMenu;
    }

    private PopupMenu.OnMenuItemClickListener mOnMenuItemClickListener;

    public OverflowMenuDrawerItem withOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener onMenuItemClickListener) {
        this.mOnMenuItemClickListener = onMenuItemClickListener;
        return this;
    }

    public PopupMenu.OnMenuItemClickListener getOnMenuItemClickListener() {
        return mOnMenuItemClickListener;
    }

    private PopupMenu.OnDismissListener mOnDismissListener;


    public OverflowMenuDrawerItem withOnDismissListener(PopupMenu.OnDismissListener onDismissListener) {
        this.mOnDismissListener = onDismissListener;
        return this;
    }

    public PopupMenu.OnDismissListener getOnDismissListener() {
        return mOnDismissListener;
    }

    @Override
    public String getType() {
        return "PRIMARY_OVERFLOW_MENU_ITEM";
    }

    @Override
    @LayoutRes
    public int getLayoutRes() {
        return R.layout.material_drawer_item_overflow_menu_primary;
    }

    @Override
    public void bindView(RecyclerView.ViewHolder holder) {
        Context ctx = holder.itemView.getContext();

        //get our viewHolder
        ViewHolder viewHolder = (ViewHolder) holder;

        //bind the basic view parts
        bindViewHelper((BaseViewHolder) holder);

        //handle menu click
        viewHolder.menu.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                PopupMenu popup = new PopupMenu(view.getContext(), view);
                MenuInflater inflater = popup.getMenuInflater();
                inflater.inflate(mMenu, popup.getMenu());

                popup.setOnMenuItemClickListener(mOnMenuItemClickListener);
                popup.setOnDismissListener(mOnDismissListener);

                popup.show();
            }
        });

        //handle image
        viewHolder.menu.setImageDrawable(new IconicsDrawable(ctx, GoogleMaterial.Icon.gmd_more_vert).sizeDp(12).color(getIconColor(ctx)));

        //call the onPostBindView method to trigger post bind view actions (like the listener to modify the item if required)
        onPostBindView(this, holder.itemView);
    }

    @Override
    public ViewHolderFactory getFactory() {
        return new ItemFactory();
    }

    public static class ItemFactory implements ViewHolderFactory&lt;ViewHolder&gt; {
        public ViewHolder factory(View v) {
            return new ViewHolder(v);
        }
    }

    private static class ViewHolder extends BaseViewHolder {
        //protected ImageButton ibOverflow;
        private ImageButton menu;

        public ViewHolder(View view) {
            super(view);
            this.menu = (ImageButton) view.findViewById(R.id.material_drawer_menu_overflow);
        }
    }
}
</code></pre>

<p>And the <a href="https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/res/layout/material_drawer_item_overflow_menu_primary.xml" rel="nofollow">layout</a> used for this <a href="https://github.com/mikepenz/MaterialDrawer/blob/develop/app/src/main/java/com/mikepenz/materialdrawer/app/DrawerItems/OverflowMenuDrawerItem.java" rel="nofollow">OverflowDrawerItem</a></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="@dimen/material_drawer_item_primary"
    android:orientation="horizontal"
    android:paddingEnd="@dimen/material_drawer_vertical_padding"
    android:paddingLeft="@dimen/material_drawer_vertical_padding"
    android:paddingRight="@dimen/material_drawer_vertical_padding"
    android:paddingStart="@dimen/material_drawer_vertical_padding"&gt;

    &lt;ImageView
        android:id="@+id/material_drawer_icon"
        android:layout_width="@dimen/material_drawer_item_primary_icon"
        android:layout_height="@dimen/material_drawer_item_primary"
        android:layout_gravity="center_vertical"
        android:paddingBottom="@dimen/material_drawer_item_primary_icon_padding"
        android:paddingEnd="@dimen/material_drawer_item_primary_icon_padding_right"
        android:paddingLeft="0dp"
        android:paddingRight="@dimen/material_drawer_item_primary_icon_padding_right"
        android:paddingStart="0dp"
        android:paddingTop="@dimen/material_drawer_item_primary_icon_padding" /&gt;

    &lt;LinearLayout
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_weight="1"
        android:gravity="center_vertical|start"
        android:orientation="vertical"&gt;

        &lt;TextView
            android:id="@+id/material_drawer_name"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:fontFamily="sans-serif-medium"
            android:gravity="center_vertical|start"
            android:lines="1"
            android:singleLine="true"
            android:textDirection="anyRtl"
            android:textSize="@dimen/material_drawer_item_primary_text"
            tools:text="Some drawer text" /&gt;

        &lt;TextView
            android:id="@+id/material_drawer_description"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:fontFamily="sans-serif"
            android:gravity="center_vertical|start"
            android:lines="1"
            android:singleLine="true"
            android:textDirection="anyRtl"
            android:textSize="@dimen/material_drawer_item_primary_description"
            tools:text="Some drawer text" /&gt;
    &lt;/LinearLayout&gt;

    &lt;ImageButton
        android:id="@+id/material_drawer_menu_overflow"
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:background="@android:color/transparent"
        android:gravity="center"
        android:paddingEnd="0dp"
        android:paddingLeft="@dimen/material_drawer_vertical_padding"
        android:paddingRight="0dp"
        android:paddingStart="@dimen/material_drawer_vertical_padding"
        android:scaleType="fitCenter" /&gt;
&lt;/LinearLayout&gt;
</code></pre>
