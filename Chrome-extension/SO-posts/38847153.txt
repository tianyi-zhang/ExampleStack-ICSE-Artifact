<p>It's a bit of a hack but I think you need something like this :</p>

<pre><code>@Test
public void test1() {

try {
    String resource = "file:c:\\tmp\\Test\u0023.txt";

    PathMatchingResourcePatternResolver pathResolver = new TestPathMatchingResourcePatternResolver();
    Resource[] resolveResources;
    resolveResources = pathResolver.getResources(resource);
    if (resolveResources.length == 0) {
        throw new IllegalStateException("File does not exist: " + resource);
    } else {
        for (Resource resource2 : resolveResources) {
            if (!resource2.exists()) { // true
                throw new IllegalStateException("File does not exist: " + resource2);
            }
        }
    }
} catch (Exception e) {
    e.printStackTrace();
    fail();
}
</code></pre>

<p>}</p>

<p>Then you need to add modify the PathMatchingResourcePatternResolver </p>

<pre><code>public class TestPathMatchingResourcePatternResolver extends PathMatchingResourcePatternResolver {

    public TestPathMatchingResourcePatternResolver() {
        super(new TestDefaultResourceLoader());
    }
}
</code></pre>

<p>Then you need to modify the DefaultResourceLoader </p>

<pre><code>public class TestDefaultResourceLoader extends DefaultResourceLoader {
    @Override
    public Resource getResource(String location) {
        Assert.notNull(location, "Location must not be null");
        if (location.startsWith("/")) {
            return getResourceByPath(location);
        } else if (location.startsWith(CLASSPATH_URL_PREFIX)) {
            return new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader());
        } else {
            try {
                // Try to parse the location as a URL...
                URL url = new URL(location);
                return new TestUrlResource(url);
            } catch (MalformedURLException ex) {
                // No URL -&gt; resolve as resource path.
                return getResourceByPath(location);
            }
        }
    }
}
</code></pre>

<p>Then you need to modify the UrlResource </p>

<pre><code>public class TestUrlResource extends UrlResource {

    public TestUrlResource(URL url) {
        super(url);
    }

    @Override
    public boolean exists() {
        return true;
    }

    @Override
    public File getFile() throws IOException {
        return new File(getURL().toString().replace("file:", ""));
    }
}
</code></pre>
