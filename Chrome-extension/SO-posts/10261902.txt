<p>I tested that rss feed with the parser I use and It parsed like below.
Seems it is parsable but As I wrote in comments, because of both CDATA is used and also escaped, there are texts like "A&amp;T" but you can replace them after you parse xml.</p>

<pre><code>D/*** TITLE      : A&amp;T To Play Four Against Longwood
D/*** DESCRIPTION: A&amp;amp;T baseball takes a break from conference play this weekend.
D/*** TITLE      : Wilkerson Named MEAC Rookie of the Week
D/*** DESCRIPTION: Wilkerson was 6-for-14 for the week of April 9-15.
D/*** TITLE      : Lights, Camera, Action
D/*** DESCRIPTION: A&amp;amp;T baseball set to play nationally televised game on ESPNU.
D/*** TITLE      : Resilient Aggies Fall To USC Upstate
D/*** DESCRIPTION: Luke Tendler extends his hitting streak to 10 games.
D/*** TITLE      : NCCU Defeats A&amp;T In Key Conference Matchup
D/*** DESCRIPTION: Kelvin Freeman leads the Aggies with three hits.
</code></pre>

<p>I am sharing most part of rss feed parser I used for you to compare what is different from yours.</p>

<p><strong>XmlPullFeedParser.java</strong></p>

<pre><code>package com.nesim.test.rssparser;

import java.util.ArrayList;
import java.util.List;

import org.xmlpull.v1.XmlPullParser;

import android.util.Log;
import android.util.Xml;

public class XmlPullFeedParser extends BaseFeedParser {

  public XmlPullFeedParser(String feedUrl) {
    super(feedUrl);
  }

  public List&lt;Message&gt; parse() {
    List&lt;Message&gt; messages = null;
    XmlPullParser parser = Xml.newPullParser();
    try {
      // auto-detect the encoding from the stream
      parser.setInput(this.getInputStream(), null);
      int eventType = parser.getEventType();
      Message currentMessage = null;
      boolean done = false;
      while (eventType != XmlPullParser.END_DOCUMENT &amp;&amp; !done){
        String name = null;
        switch (eventType){
          case XmlPullParser.START_DOCUMENT:
            messages = new ArrayList&lt;Message&gt;();
            break;
          case XmlPullParser.START_TAG:
            name = parser.getName();
            if (name.equalsIgnoreCase(ITEM)){
              currentMessage = new Message();
            } else if (currentMessage != null){
              if (name.equalsIgnoreCase(LINK)){
                currentMessage.setLink(parser.nextText());
              } else if (name.equalsIgnoreCase(DESCRIPTION)){
                currentMessage.setDescription(parser.nextText());
              } else if (name.equalsIgnoreCase(PUB_DATE)){
                currentMessage.setDate(parser.nextText());
              } else if (name.equalsIgnoreCase(TITLE)){
                currentMessage.setTitle(parser.nextText());
              } else if (name.equalsIgnoreCase(DATES)){
                currentMessage.setDates(parser.nextText());
              } 
            }
            break;
          case XmlPullParser.END_TAG:
            name = parser.getName();
            if (name.equalsIgnoreCase(ITEM) &amp;&amp; currentMessage != null){
              messages.add(currentMessage);
            } else if (name.equalsIgnoreCase(CHANNEL)){
              done = true;
            }
            break;
        }
        eventType = parser.next();
      }
    } catch (Exception e) {
      Log.e("AndroidNews::PullFeedParser", e.getMessage(), e);
      throw new RuntimeException(e);
    }
    return messages;
  }
}
</code></pre>

<p><strong>BaseFeedParser.java</strong></p>

<pre><code>package com.nesim.test.rssparser;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;

public abstract class BaseFeedParser implements FeedParser {

  // names of the XML tags
  static final String CHANNEL = "channel";
  static final String PUB_DATE = "pubDate";
  static final  String DESCRIPTION = "description";
  static final  String LINK = "link";
  static final  String TITLE = "title";
  static final  String ITEM = "item";
  static final  String DATES = "dates";
  private final URL feedUrl;

  protected BaseFeedParser(String feedUrl){
    try {
      this.feedUrl = new URL(feedUrl);
    } catch (MalformedURLException e) {
      throw new RuntimeException(e);
    }
  }

  protected InputStream getInputStream() {
    try {
      return feedUrl.openConnection().getInputStream();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
}
</code></pre>

<p><strong>FeedParser.java</strong></p>

<pre><code>package com.nesim.test.rssparser;

import java.util.List;

public interface FeedParser {
  List&lt;Message&gt; parse();
}
</code></pre>
