<p>To clarify, your problem isn't about "dynamic class loading in Java", it's about <strong>dynamic class enumeration</strong> -- you know how to load classes, you just don't know what classes you want.</p>

<p>A quick Google came up with this page: <a href="http://forums.sun.com/thread.jspa?threadID=341935&amp;start=0&amp;tstart=0" rel="nofollow">http://forums.sun.com/thread.jspa?threadID=341935&amp;start=0&amp;tstart=0</a></p>

<p>Taken from that page, here's some sample code that ought to work:</p>

<pre><code>public static Class[] getClasses(String pckgname)
        throws ClassNotFoundException {
    ArrayList&lt;Class&gt; classes = new ArrayList&lt;Class&gt;();
    // Get a File object for the package
    File directory = null;
    try {
        ClassLoader cld = Thread.currentThread().getContextClassLoader();
        if (cld == null) {
            throw new ClassNotFoundException("Can't get class loader.");
        }
        String path = '/' + pckgname.replace('.', '/');
        URL resource = cld.getResource(path);
        if (resource == null) {
            throw new ClassNotFoundException("No resource for " + path);
        }
        directory = new File(resource.getFile());
    } catch (NullPointerException x) {
        throw new ClassNotFoundException(pckgname + " (" + directory
                + ") does not appear to be a valid package");
    }
    if (directory.exists()) {
        // Get the list of the files contained in the package
        String[] files = directory.list();
        for (int i = 0; i &lt; files.length; i++) {
            // we are only interested in .class files
            if (files[i].endsWith(".class")) {
                // removes the .class extension
                classes.add(Class.forName(pckgname + '.'
                        + files[i].substring(0, files[i].length() - 6)));
            }
        }
    } else {
        throw new ClassNotFoundException(pckgname
                + " does not appear to be a valid package");
    }
    Class[] classesA = new Class[classes.size()];
    classes.toArray(classesA);
    return classesA;
}
</code></pre>
