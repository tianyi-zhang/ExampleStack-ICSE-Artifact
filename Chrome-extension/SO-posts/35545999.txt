<p><strong>try this custom Class</strong></p>

<pre><code>public class MultiSelectionSpinner extends Spinner implements
    OnMultiChoiceClickListener {
String[] _items = null;
boolean[] mSelection = null;
boolean[] mSelectionAtStart = null;
String _itemsAtStart = null;

ArrayAdapter&lt;String&gt; simple_adapter;

public MultiSelectionSpinner(Context context) {
    super(context);

    simple_adapter = new ArrayAdapter&lt;&gt;(context,
            android.R.layout.simple_spinner_item);
    super.setAdapter(simple_adapter);
}

public MultiSelectionSpinner(Context context, AttributeSet attrs) {
    super(context, attrs);

    simple_adapter = new ArrayAdapter&lt;&gt;(context,
            android.R.layout.simple_spinner_item);
    super.setAdapter(simple_adapter);
}

public void onClick(DialogInterface dialog, int which, boolean isChecked) {
    if (mSelection != null &amp;&amp; which &lt; mSelection.length) {
        mSelection[which] = isChecked;
        simple_adapter.clear();
        simple_adapter.add(buildSelectedItemString());
    } else {
        throw new IllegalArgumentException(
                "Argument 'which' is out of bounds.");
    }
}

@Override
public boolean performClick() {
    AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
    builder.setMultiChoiceItems(_items, mSelection, this);
    _itemsAtStart = getSelectedItemsAsString();
    builder.setPositiveButton("Submit", new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            System.arraycopy(mSelection, 0, mSelectionAtStart, 0, mSelection.length);
        }
    });
    builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
        @Override
        public void onClick(DialogInterface dialog, int which) {
            simple_adapter.clear();
            simple_adapter.add(_itemsAtStart);
            System.arraycopy(mSelectionAtStart, 0, mSelection, 0, mSelectionAtStart.length);
        }
    });
    builder.show();
    return true;
}

@Override
public void setAdapter(SpinnerAdapter adapter) {
    throw new RuntimeException(
            "setAdapter is not supported by MultiSelectSpinner.");
}

public void setItems(String[] items) {
    _items = items;
    mSelection = new boolean[_items.length];
    mSelectionAtStart = new boolean[_items.length];
    simple_adapter.clear();
    simple_adapter.add(_items[0]);
    Arrays.fill(mSelection, false);
    mSelection[0] = true;
    mSelectionAtStart[0] = true;
}

public void setItems(List&lt;String&gt; items) {
    _items = items.toArray(new String[items.size()]);
    mSelection = new boolean[_items.length];
    mSelectionAtStart  = new boolean[_items.length];
    simple_adapter.clear();
    simple_adapter.add(_items[0]);
    Arrays.fill(mSelection, false);
    mSelection[0] = true;
}

public void setSelection(String[] selection) {
    for (int i = 0; i &lt; mSelection.length; i++) {
            mSelection[i] = false;
            mSelectionAtStart[i] = false;
    }
    for (String cell : selection) {
        for (int j = 0; j &lt; _items.length; ++j) {
            if (_items[j].equals(cell)) {
                mSelection[j] = true;
                mSelectionAtStart[j] = true;
            }
        }
    }
    simple_adapter.clear();
    simple_adapter.add(buildSelectedItemString());
}

public void setSelection(List&lt;String&gt; selection) {
    for (int i = 0; i &lt; mSelection.length; i++) {
        mSelection[i] = false;
        mSelectionAtStart[i] = false;
    }
    for (String sel : selection) {
        for (int j = 0; j &lt; _items.length; ++j) {
            if (_items[j].equals(sel)) {
                mSelection[j] = true;
                mSelectionAtStart[j] = true;
            }
        }
    }
    simple_adapter.clear();
    simple_adapter.add(buildSelectedItemString());
}

public void setSelection(int index) {
    for (int i = 0; i &lt; mSelection.length; i++) {
        mSelection[i] = false;
        mSelectionAtStart[i] = false;
    }
    if (index &gt;= 0 &amp;&amp; index &lt; mSelection.length) {
        mSelection[index] = true;
        mSelectionAtStart[index] = true;
    } else {
        throw new IllegalArgumentException("Index " + index
                + " is out of bounds.");
    }
    simple_adapter.clear();
    simple_adapter.add(buildSelectedItemString());
}

public void setSelection(int[] selectedIndices) {
    for (int i = 0; i &lt; mSelection.length; i++) {
        mSelection[i] = false;
        mSelectionAtStart[i] = false;
    }
    for (int index : selectedIndices) {
        if (index &gt;= 0 &amp;&amp; index &lt; mSelection.length) {
            mSelection[index] = true;
            mSelectionAtStart[index] = true;
        } else {
            throw new IllegalArgumentException("Index " + index
                    + " is out of bounds.");
        }
    }
    simple_adapter.clear();
    simple_adapter.add(buildSelectedItemString());
}

public List&lt;String&gt; getSelectedStrings() {
    List&lt;String&gt; selection = new LinkedList&lt;&gt;();
    for (int i = 0; i &lt; _items.length; ++i) {
        if (mSelection[i]) {
            selection.add(_items[i]);
        }
    }
    return selection;
}

public List&lt;Integer&gt; getSelectedIndices() {
    List&lt;Integer&gt; selection = new LinkedList&lt;&gt;();
    for (int i = 0; i &lt; _items.length; ++i) {
        if (mSelection[i]) {
            selection.add(i);
        }
    }
    return selection;
}

private String buildSelectedItemString() {
    StringBuilder sb = new StringBuilder();
    boolean foundOne = false;

    for (int i = 0; i &lt; _items.length; ++i) {
        if (mSelection[i]) {
            if (foundOne) {
                sb.append(", ");
            }
            foundOne = true;

            sb.append(_items[i]);
        }
    }
    return sb.toString();
}

public String getSelectedItemsAsString() {
    StringBuilder sb = new StringBuilder();
    boolean foundOne = false;

    for (int i = 0; i &lt; _items.length; ++i) {
        if (mSelection[i]) {
            if (foundOne) {
                sb.append(", ");
            }
            foundOne = true;
            sb.append(_items[i]);
        }
    }
    return sb.toString();
}}
</code></pre>

<p><strong>In your Activity Use below Code</strong></p>

<pre><code>   private MultiSelectionSpinner multiSelectionSpinner;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    String[] array = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"};
    multiSelectionSpinner = (MultiSelectionSpinner) findViewById(R.id.mySpinner);
    multiSelectionSpinner.setItems(array);
    multiSelectionSpinner.setSelection(new int[]{2, 6});
}
</code></pre>

<p><strong>And Main things that you have to use multispinner in your xml of layout file instead of simple spinner</strong></p>
