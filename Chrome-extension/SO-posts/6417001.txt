<p>This method allows the incoming array to be treated as either an array of <code>Map.Entry</code>, <strong>or</strong> a 2D array where each row is a key/value pair. This proves to be a problem because <strong>depending on what you find in the array</strong>, you would need to choose <strong>different</strong> generic type values for the Map you return.</p>

<p><strong>One solution</strong> is to cheat a little and use Java's generic type inference that applies to assignments. If you add generic type arguments <code>K</code> and <code>V</code> to <code>toMap</code> but don't use them in the rest of the method signature, they will be <strong>decided by assignment</strong>. You can see this in action in methods like <a href="http://download.oracle.com/javase/6/docs/api/java/util/Collections.html#emptyList%28%29" rel="nofollow"><code>Collections#emptyList()</code></a>. </p>

<p>Your <code>toMap</code> method would then be implemented like:</p>

<pre><code>public static &lt;K, V&gt; Map&lt;K, V&gt; toMap(Object[] array) {
    if (array == null) {
        return null;
    }

    final Map&lt;K, V&gt; map = new HashMap&lt;K, V&gt;((int) (array.length * 1.5));
    for (int i = 0; i &lt; array.length; i++) {
        Object object = array[i];
        if (object instanceof Map.Entry) {
            Map.Entry&lt;K, V&gt; entry = (Map.Entry&lt;K, V&gt;) object;
            map.put(entry.getKey(), entry.getValue());
        } else if (object instanceof Object[]) {
            Object[] entry = (Object[]) object;
            if (entry.length &lt; 2) {
                throw new IllegalArgumentException("Array element " + i 
                      + ", '" + object + "', has a length less than 2");
            }
            map.put((K) entry[0], (V) entry[1]);
        } else {
            throw new IllegalArgumentException("Array element " + i + ", '" 
                   + object + "', is neither of type Map.Entry nor an Array");
        }
    }
    return map;
}
</code></pre>

<p>And you would invoke this method like:</p>

<pre><code>Map&lt;String, Integer&gt; myTypedMap = toMap(myArrayOfObjects);
</code></pre>

<p>This will remove the warnings that you see when you call <code>toMap</code>, but you'll notice that the <code>toMap</code> method itself is full of 'Unchecked cast' warnings because you're <strong>subverting generic type safety for convenience</strong>. If you pass in an array of <code>Map.Entry</code> values containing incorrectly typed keys or values, or you pass in a 2D Object array with incorrectly typed values, you will expose yourself to potential <code>ClassCastException</code> problems when you interact with the Map and use the keys and values it contains.</p>

<p><strong>Another solution</strong> would be to reduce the scope of this method to only support cases where the array values are instances of <code>Map.Entry</code>. Your method could then be simplified and have a truly type-safe signature like:</p>

<pre><code>public static &lt;K, V&gt; Map&lt;K, V&gt; toMap(Map.Entry&lt;K, V&gt;[] array)
</code></pre>

<p>I doubt this will prove to be a useful method though.</p>

<p>I think the short answer is to live with the warnings because you are doing something that is genuinely not type-safe. If you want a convenient way to turn an array into a Map, you may want to rethink the implementation completely and design a helper method whose semantics enforce type safety, e.g.</p>

<pre><code>public static &lt;K, V&gt; Map&lt;K, V&gt; toMap(K[] keys, V[] values)
</code></pre>

<p>Without knowing your use-case though, I don't know if this method would help you.</p>
