<p>Convert the input stream to string</p>

<pre><code>    public static String convertStreamToString(InputStream is) throws IOException {
       if (is != null) {
        Writer writer = new StringWriter();
        char[] buffer = new char[1024];
        try {
            Reader reader = new BufferedReader(new InputStreamReader(is,"UTF-8"));
            int n;
            while ((n = reader.read(buffer)) != -1) {
                writer.write(buffer, 0, n);
            }
        } catch (Exception e) {
            Log.getStackTraceString(e);
        } finally {
            is.close();
        }
        return writer.toString();
    } else {
        return "";
    }
}
</code></pre>

<p>Stream to object using pojo class for eg:</p>

<pre><code>public class PageInfo { 
private String pageName;
private String pageContent;


public String getPageName() {
    return pageName;
}

public void setPageName(String pageName) {
    this.pageName = pageName;
}

public String getColorCode() {
    return colorCode;
}

public void setColorCode(String colorCode) {
    this.colorCode = colorCode;
}
</code></pre>

<p>}</p>

<p>Mapper Class to Convert String to Object</p>

<pre><code> public Vector&lt;PageInfo&gt; getPageInfo(Cursor cursor) {
    Vector&lt;PageInfo&gt; pageInfo = new Vector&lt;PageInfo&gt;();
    // Column Index
    int pageContent;


    if (cursor != null) {

        if (cursor.moveToFirst()) {
            do {
                PageInfo info  = new PageInfo();

                pageContent = cursor.getColumnIndex(TablePageInfo.PAGE_CONTENT);
                colorCode = cursor.getColumnIndex(TablePageInfo.COLOR_CODE);
                bookMark = cursor.getColumnIndex(TablePageInfo.BOOK_MARK);

                info.setPageContent(cursor.getString(pageContent));


                pageInfo.add(info);

            } while (cursor.moveToNext());
        }

    }
    if (cursor != null &amp;&amp; !cursor.isClosed()) {
        cursor.close();
    }
    return pageInfo;
}
</code></pre>

<p>Add GSON Jar then write the below code it will get any object and will return a perfect JSON </p>

<pre><code>package common;

import com.google.gson.Gson;

import com.google.gson.GsonBuilder;

//Generics is used so any class type can be passed
public class GsonSerializer&lt;T&gt; {

public T Deserialize(String json, Class classOfT) {

Gson gn = new GsonBuilder().create();

return (T) gn.fromJson(json, classOfT);

}

public String Serialize(T object) {

Gson gn = new GsonBuilder().create();

return gn.toJson(object);

}

}
</code></pre>

<p>For more detail you can refer my blog </p>

<p><a href="http://lifeasanandroiddeveloper.blogspot.kr/2011/11/how-to-serialize-and-desearilize-json.html" rel="nofollow">http://lifeasanandroiddeveloper.blogspot.kr/2011/11/how-to-serialize-and-desearilize-json.html</a></p>
