<p>I don't know from where you get this code. If you have written this by yourself, then my suggestion is start reading basics of Java and Swing now.
This code has a lot of problems, I have modified some, now it has no compilation error.
But please don't follow this kind of codes.</p>

<p>The modified code with no compilation error:</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.sound.midi.MidiEvent;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Track;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JPanel;

 public class BeatBox {

JPanel mainPanel;
ArrayList&lt;JCheckBox&gt; checkboxList;
Sequencer sequencer;
Sequence sequence;
Track track;
JFrame theFrame;

String[] instrumentNames={ "Bass Drum","Closed Hi-Hat","Open Hi Hat","Acoustic   Snare","Crash Cymbol","Hand Clap","High Tom","Hi Bongo","Maracas","Whistle","Low Conga","Cowbell","Vivraslap","Low-mid Tom","High Agogo", "Open Hi Conga"};

int[] instruments={35,42,46,38,49,50,60,70,72,64,56,58,47,67,63};

public static void main(String[] args){
    new BeatBox().buildGUI();
}
public void buildGUI(){
    theFrame=new JFrame ("Cyber BeatBox");
    theFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    BorderLayout layout =new BorderLayout();
    JPanel background = new JPanel();
    theFrame.setContentPane(background);
     background.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));//problem

    checkboxList=new ArrayList&lt;JCheckBox&gt;();
    Box buttonBox=new Box(BoxLayout.Y_AXIS);

    JButton start=new JButton("Start");
    start.addActionListener(new MyStartListener());;
    buttonBox.add(start);

    JButton stop=new JButton("Stop");
    stop.addActionListener(new MyStopListener());;
    buttonBox.add(stop);

    JButton upTempo=new JButton("Tempo Up");
    start.addActionListener(new MyUpTempoListener());;
    buttonBox.add(upTempo);

    JButton downTempo=new JButton("Tempo Down");
    start.addActionListener(new MyDownTempoListener());
    buttonBox.add(downTempo);

    Box nameBox=new Box(BoxLayout.Y_AXIS);
    for (int i=0;i&lt;16;i++){
        nameBox.add(new Label(instrumentNames[i]));

    }

    background.add(BorderLayout.EAST,buttonBox);//problem
    background.add(BorderLayout.WEST,nameBox);//problem

    //theFrame.getContentPane().add(background);//problem

    GridLayout grid=new GridLayout(16,16);
    grid.setVgap(1);
    grid.setHgap(2);
    mainPanel=new JPanel();
   // mainPanel.add(BorderLayout.CENTER,mainPanel);

    for (int i=0;i&lt;256;i++){
        JCheckBox c=new JCheckBox();
        c.setSelected(false);
        checkboxList.add(c);
        mainPanel.add(c);
    }
    setUpMidi();

    theFrame.setBounds(50,50,300,300);
    theFrame.pack();
    theFrame.setVisible(true);


}

public void setUpMidi(){
    try{
        sequencer=MidiSystem.getSequencer();
        sequencer.open();
        sequence=new Sequence(Sequence.PPQ,4);
        track=sequence.createTrack();sequencer.setTempoInBPM(120);



    }catch(Exception e){e.printStackTrace();}
}
public void buildTrackAndStart(){
    int[] trackList=null;

    sequence.deleteTrack(track);
    track=sequence.createTrack();

    for(int i=0;i&lt;16;i++){
        trackList=new int[16];

        int key=instruments[i];

        for(int j=0;j&lt;16;j++){
            JCheckBox jc=(JCheckBox) checkboxList.get(j+(16*i));
            if(jc.isSelected()){
                trackList[j]=key;

            }else {
                trackList[j]=0;
            }
        }

        makeTracks(trackList);
        track.add(makeEvent(176,1,127,0,16));

    }
    track.add(makeEvent(192,9,1,0,15));
    try{
        sequencer.setSequence(sequence);
        sequencer.setLoopCount(sequencer.LOOP_CONTINUOUSLY);
        sequencer.start();
        sequencer.setTempoInBPM(120);
    }catch(Exception e){e.printStackTrace();}
}

public class MyStartListener implements ActionListener{
    public void actionPerformed(ActionEvent a){
        buildTrackAndStart();
    }

}
public class MyStopListener implements ActionListener{
    public void actionPerformed(ActionEvent a){
        sequencer.stop();
    }
}

public class MyUpTempoListener implements ActionListener{
    public void actionPerformed(ActionEvent a){
        float tempoFactor=sequencer.getTempoFactor();
        sequencer.setTempoFactor((float)(tempoFactor*1.03));
    }
}
public class MyDownTempoListener implements ActionListener{
    public void actionPerformed(ActionEvent a){
        float tempoFactor=sequencer.getTempoFactor();
        sequencer.setTempoFactor((float)(tempoFactor*.97));
    }
}



public void makeTracks(int[] list){

    for(int i=0;i&lt;16;i++){
        int key=list[i];

        if(key!=0){
            track.add(makeEvent(144,9,key,100,i));
            track.add(makeEvent(128,9,key,100,i+1));

        }
    }
}
  public MidiEvent makeEvent(int comd,int chan,int one,int two,int tick){
    MidiEvent event=null;
    try{
        ShortMessage a=new ShortMessage();
        a.setMessage(comd,chan,one,two);
        event=new MidiEvent(a,tick);
    }catch(Exception e){e.printStackTrace();}
    return event;
  }
}
</code></pre>

<p><img src="http://i.stack.imgur.com/hxMkN.png" alt="enter image description here"></p>
