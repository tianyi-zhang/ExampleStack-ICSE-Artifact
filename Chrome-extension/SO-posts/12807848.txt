<p><a href="http://stackoverflow.com/questions/25552/using-java-to-get-os-level-system-information">This sample by William Brendel may be of some use.</a></p>

<p>EDIT: I originally provided this sample (linking to William Brendel's answer on another topic). The creator of that topic (Steve M) wanted to create a multi-platform Java application. Specifically, the user was trying to find a means by which to assess the running machine's resources (disk space, CPU and memory usage).</p>

<p>This is an inline transcript of the answer given in that topic. However, it has been pointed out on this topic that it is not the ideal solution, despite my answer being marked as accepted.</p>

<pre><code>public class Main {
  public static void main(String[] args) {
  /* Total number of processors or cores available to the JVM */
  System.out.println("Available processors (cores): " + 
  Runtime.getRuntime().availableProcessors());

  /* Total amount of free memory available to the JVM */
  System.out.println("Free memory (bytes): " + 
  Runtime.getRuntime().freeMemory());

  /* This will return Long.MAX_VALUE if there is no preset limit */
  long maxMemory = Runtime.getRuntime().maxMemory();
  /* Maximum amount of memory the JVM will attempt to use */
  System.out.println("Maximum memory (bytes): " + 
  (maxMemory == Long.MAX_VALUE ? "no limit" : maxMemory));

  /* Total memory currently in use by the JVM */
  System.out.println("Total memory (bytes): " + 
  Runtime.getRuntime().totalMemory());

  /* Get a list of all filesystem roots on this system */
  File[] roots = File.listRoots();

  /* For each filesystem root, print some info */
  for (File root : roots) {
    System.out.println("File system root: " + root.getAbsolutePath());
    System.out.println("Total space (bytes): " + root.getTotalSpace());
    System.out.println("Free space (bytes): " + root.getFreeSpace());
    System.out.println("Usable space (bytes): " + root.getUsableSpace());
  }
 }
}
</code></pre>

<p>User Christian Fries points out that it is wrong to assume that <code>Runtime.getRuntime().freeMemory()</code> gives you the amount of memory which may be allocated until an out-of-memory error occurs. </p>

<p>From the <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#freeMemory--">documentation</a>, the signature return of <code>Runtime.getRuntime().freeMemory()</code> is as such:</p>

<p><strong><em>Returns:</strong> an approximation to the total amount of memory currently available for future allocated objects, measured in bytes.</em></p>

<p>However, user Christian Fries claims this function may be misinterpreted. He claims that the approximate amount of memory which may be allocated until an out-of-memory error occurs (the free memory) is likely to be given by:</p>

<pre><code>long presumableFreeMemory = Runtime.getRuntime().maxMemory() - allocatedMemory;
</code></pre>

<p>With <code>allocatedMemory</code> being given by:</p>

<pre><code>long allocatedMemory = 
  (Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory());
</code></pre>

<p>The key here is a discrepancy between the concept of free memory. One thing is the memory that the operating system provides the Java Virtual Machine. Another is the total amount of bytes comprising the chunks of blocks of memory actually being used by the Java Virtual Machine itself. </p>

<p>Considering that memory given to Java applications is managed in blocks by the Java Virtual Machine, the amount of <em>free memory</em> available to the Java Virtual Machine may not exactly match the memory available for a Java application.</p>

<p>Specifically, Christian Fries denotes the usage of the <code>-mx</code> or <code>-Xmx</code> flags to set the maximum amount of memory available to the Java Virtual Machine. He notes the following function differences:</p>

<pre><code>/* Returns the maximum amount of memory available to 
   the Java Virtual Machine set by the '-mx' or '-Xmx' flags. */
Runtime.getRuntime().maxMemory();

/* Returns the total memory allocated from the system 
   (which can at most reach the maximum memory value 
   returned by the previous function). */
Runtime.getRuntime().totalMemory();

/* Returns the free memory *within* the total memory 
   returned by the previous function. */
Runtime.getRuntime().freeMemory();
</code></pre>

<p>Christian concludes his answer by stating that <code>Runtime.getRuntime().freeMemory()</code> in fact returns what may be called presumable free memory; even if a future memory allocation does not exceed the value returned by that function, if the Java Virtual Machine has not yet received the actual chunk of memory assigned by the host system, a <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/OutOfMemoryError.html"><code>java.lang.OutOfMemoryError</code></a> may still be produced.</p>

<p>In the end, the proper method to use will have a varying degree of dependence on the specifics of your application.</p>

<p>I provide another link which may be useful. It is a question made by user Richard Dormand and answered by stones333 <a href="http://stackoverflow.com/questions/4667483/how-is-the-default-java-heap-size-determined">about determining the default Java heap size used.</a></p>
