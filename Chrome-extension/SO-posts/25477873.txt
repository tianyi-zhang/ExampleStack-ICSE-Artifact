<pre><code>public class Main {

    public static void main(String[] args) {

        String[] arrList1 = { "apple", "strawberry", "banana", "watermelon" };
        Integer[] arrList2 = { 60, 90, 77, 160 };

        String[] arrList3 = { "strawberry", "watermelon", "apple", "banana" };
        Integer[] arrList4 = { 45, 40, 10, 11 };

        HashMap&lt;String, Integer&gt; result = new HashMap&lt;&gt;();

        for (int i = 0; i &lt; arrList1.length; i++) {
            for (int j = 0; j &lt; arrList3.length; j++) {
                if (arrList1[i].contains(arrList3[j])) {
                    result.put(arrList1[i], arrList2[i] + arrList4[j]);
                }
            }
        }

        LinkedHashMap sorted = sortHashMap(result);
        Set&lt;String&gt; keys = sorted.keySet();
        for(String k:keys){
            System.out.println(k+" -- "+sorted.get(k));
        }
        System.out.println("End");

    }

    public static LinkedHashMap sortHashMap(HashMap passedMap) {
        List mapKeys = new ArrayList(passedMap.keySet());
        List mapValues = new ArrayList(passedMap.values());
        Collections.sort(mapValues);
        Collections.sort(mapKeys);

        LinkedHashMap sortedMap = new LinkedHashMap();

        Iterator valueIt = mapValues.iterator();
        while (valueIt.hasNext()) {
            Object val = valueIt.next();
            Iterator keyIt = mapKeys.iterator();

            while (keyIt.hasNext()) {
                Object key = keyIt.next();
                String comp1 = passedMap.get(key).toString();
                String comp2 = val.toString();

                if (comp1.equals(comp2)) {
                    passedMap.remove(key);
                    mapKeys.remove(key);
                    sortedMap.put((String) key, (Integer) val);
                    break;
                }

            }

        }
        return sortedMap;
    }

}
</code></pre>

<p>That is it, of course is doesn't have the best programming practices. I recommend using generics on it.</p>
