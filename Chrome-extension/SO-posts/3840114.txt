<p>I had the very same problem today. I ended up using parts of <a href="http://stackoverflow.com/questions/1492428/javadom-how-do-i-set-the-base-namespace-of-an-already-created-document/1492867#1492867">@ivan_ivanovich_ivanoff answer</a> but removed the recursion and fixed some bugs.</p>

<p><strong>Very important:</strong> if old namespace is <code>null</code> you must add two translations, one from <code>null</code> to your new <code>namespaceURI</code> and another from <code>""</code> to your new <code>namespaceURI</code>. This happens because the first call to <code>renameNode</code> will change existing nodes that have a <code>null</code> <code>namespaceURI</code> to <code>xmlns=""</code>.</p>

<p>Example of usage:</p>

<pre><code>Document xmlDoc = ...;

new XmlNamespaceTranslator()
    .addTranslation(null, "new_ns")
    .addTranslation("", "new_ns")
    .translateNamespaces(xmlDoc);

// xmlDoc will have nodes with namespace null or "" changed to "new_ns"
</code></pre>

<p>Full source code follows:</p>

<pre><code>public  class XmlNamespaceTranslator {

    private Map&lt;Key&lt;String&gt;, Value&lt;String&gt;&gt; translations = new HashMap&lt;Key&lt;String&gt;, Value&lt;String&gt;&gt;();

    public XmlNamespaceTranslator addTranslation(String fromNamespaceURI, String toNamespaceURI) {
        Key&lt;String&gt; key = new Key&lt;String&gt;(fromNamespaceURI);
        Value&lt;String&gt; value = new Value&lt;String&gt;(toNamespaceURI);

        this.translations.put(key, value);

        return this;
    }

    public void translateNamespaces(Document xmlDoc) {
        Stack&lt;Node&gt; nodes = new Stack&lt;Node&gt;();
        nodes.push(xmlDoc.getDocumentElement());

        while (!nodes.isEmpty()) {
            Node node = nodes.pop();
            switch (node.getNodeType()) {
            case Node.ATTRIBUTE_NODE:
            case Node.ELEMENT_NODE:
                Value&lt;String&gt; value = this.translations.get(new Key&lt;String&gt;(node.getNamespaceURI()));
                if (value != null) {
                    // the reassignment to node is very important. as per javadoc renameNode will
                    // try to modify node (first parameter) in place. If that is not possible it
                    // will replace that node for a new created one and return it to the caller.
                    // if we did not reassign node we will get no childs in the loop below.
                    node = xmlDoc.renameNode(node, value.getValue(), node.getNodeName());
                }
                break;
            }

            // for attributes of this node
            NamedNodeMap attributes = node.getAttributes();
            if (!(attributes == null || attributes.getLength() == 0)) {
                for (int i = 0, count = attributes.getLength(); i &lt; count; ++i) {
                    Node attribute = attributes.item(i);
                    if (attribute != null) {
                        nodes.push(attribute);
                    }
                }
            }

            // for child nodes of this node
            NodeList childNodes = node.getChildNodes();
            if (!(childNodes == null || childNodes.getLength() == 0)) {
                for (int i = 0, count = childNodes.getLength(); i &lt; count; ++i) {
                    Node childNode = childNodes.item(i);
                    if (childNode != null) {
                        nodes.push(childNode);
                    }
                }
            }
        }
    }

    // these will allow null values to be stored on a map so that we can distinguish
    // from values being on the map or not. map implementation returns null if the there
    // is no map element with a given key. If the value is null there is no way to
    // distinguish from value not being on the map or value being null. these classes
    // remove ambiguity.
    private static class Holder&lt;T&gt; {

        protected final T value;

        public Holder(T value) {
            this.value = value;
        }

        public T getValue() {
            return value;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((value == null) ? 0 : value.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            Holder&lt;?&gt; other = (Holder&lt;?&gt;) obj;
            if (value == null) {
                if (other.value != null)
                    return false;
            } else if (!value.equals(other.value))
                return false;
            return true;
        }

    }

    private static class Key&lt;T&gt; extends Holder&lt;T&gt; {

        public Key(T value) {
            super(value);
        }

    }

    private static class Value&lt;T&gt; extends Holder&lt;T&gt; {

        public Value(T value) {
            super(value);
        }

    }
}
</code></pre>
