<p>Answer:
<br>
1. You MUST load the HTML into string:</p>

<pre><code>private String readHtml(String remoteUrl) {
    String out = "";
    BufferedReader in = null;
    try {
        URL url = new URL(remoteUrl);
        in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            out += str;
        }
    } catch (MalformedURLException e) { 
    } catch (IOException e) { 
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    return out;
}
</code></pre>

<p><br>
2. Load WebView with base URL:</p>

<pre><code>String html = readHtml("http://mydomain.com/my.html");
mWebView.loadDataWithBaseURL("file:///android_asset/", html, "text/html", "utf-8", "");
</code></pre>

<p>In this particular case you should have all .js files you want to use on the page to reside somewhere under "assets" folder of project. For example:</p>

<pre><code>/MyProject/assets/jquery.min.js
</code></pre>

<p><br>
3. In your remote html page you have to load .js and .css files that reside in your application like: </p>

<pre><code>&lt;script src="file:///android_asset/jquery.min.js" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>

<p>the same applies to all other local resources like images, etc. their path has to start with </p>

<pre><code>file:///android_asset/
</code></pre>

<p>A WebView would first load the raw HTML you have provided as string, then pick .js, .css and other local resourses and then would load remote content.</p>
