<p>hi please do like this</p>

<pre><code>   public void loadFont() {
            font = FontFactory.createStroke(activity.getFontManager(), activity.getTextureManager(), 256, 256, Typeface.create(Typeface.createFromAsset(activity.getAssets(), "fonts/CUSTOMFONTNAME.ttf"), Typeface.BOLD), 50,
                    true, Color.TRANSPARENT_ABGR_PACKED_INT, 2, Color.BLACK_ABGR_PACKED_INT);
            font.load();}
</code></pre>

<p>if there is any text view than</p>

<pre><code>TextView text = (TextView) findViewById(R.id.custom_font);
    Typeface font = Typeface.createFromAsset(getAssets(), "yourfont.ttf");
    text.setTypeface(font);
</code></pre>

<p>beside this visit my blog <a href="http://upadhyayjiteshandroid.blogspot.in/2012/12/android-customfont.html" rel="nofollow">http://upadhyayjiteshandroid.blogspot.in/2012/12/android-customfont.html</a> and do it in this way</p>

<p>Programaticaaly you can do as follows, You can create subclass for each TextView, Button, etc. and apply custom font in the constructor: </p>

<pre><code>public class BrandTextView extends TextView {

      public BrandTextView(Context context, AttributeSet attrs, int defStyle) {
          super(context, attrs, defStyle);
      }
     public BrandTextView(Context context, AttributeSet attrs) {
          super(context, attrs);
      }
     public BrandTextView(Context context) {
          super(context);
     }
     public void setTypeface(Typeface tf, int style) {
           if (style == Typeface.BOLD) {
                super.setTypeface(Typeface.createFromAsset(getContext().getAssets(), "fonts/YourCustomFont_Bold.ttf"));
            } else {
               super.setTypeface(Typeface.createFromAsset(getContext().getAssets(), "fonts/YourCustomFont.ttf"));
            }
      }
 }
</code></pre>

<p>Then just use that custom views instead of standard ones (i.e. BrandTextView instead of TextView).</p>

<pre><code>&lt;com.your.package.BrandTextView
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:text="View with custom font"/&gt;
&lt;com.your.package.BrandTextView
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:textStyle="bold"
         android:text="View with custom font and bold typeface"/&gt;
</code></pre>

<p>use these all in yours main.xml and you can use them</p>

<p>another possible way can be as follows as well</p>

<pre><code>FontHelper.applyFont(context, findViewById(R.id.activity_root), "fonts/YourCustomFont.ttf");

where applyFont method acn be written as follows

public static void applyFont(final Context context, final View root, final String fontName) {
        try {
            if (root instanceof ViewGroup) {
                ViewGroup viewGroup = (ViewGroup) root;
                for (int i = 0; i &lt; viewGroup.getChildCount(); i++)
                    applyFont(context, viewGroup.getChildAt(i), fontName);
            } else if (root instanceof TextView)
                ((TextView) root).setTypeface(Typeface.createFromAsset(context.getAssets(), fontName));
        } catch (Exception e) {
            Log.e(TAG, String.format("Error occured when trying to apply %s font for %s view", fontName, root));
            e.printStackTrace();
        }
    }
</code></pre>

<p>please visit for more better understanding <a href="http://vision-apps.blogspot.in/2012/02/android-better-way-to-apply-custom-font.html" rel="nofollow">http://vision-apps.blogspot.in/2012/02/android-better-way-to-apply-custom-font.html</a></p>
