<p>you can use my code for getting something with Gson</p>

<pre><code>public void executeHttpGet() throws Exception {

    BufferedReader in = null;
    try {
        HttpClient client = new DefaultHttpClient();
        HttpGet request = new HttpGet();
        request.setURI(new URI(
                "http://cardsplatform.appspot.com/cardeckplatform_details"));
        HttpResponse response = client.execute(request);
        in = new BufferedReader(new InputStreamReader(response.getEntity()
                .getContent()));
        StringBuffer sb = new StringBuffer("");
        String line = "";
        String NL = System.getProperty("line.separator");
        while ((line = in.readLine()) != null) {
            sb.append(line + NL);
        }
        in.close();
        String json = sb.toString();
        System.out.println(json);
        Gson gson = new Gson();
        Type collectionType = new TypeToken&lt;MyClass&gt;() {
        }.getType();
        MyClass myclass= gson.fromJson(json, collectionType);
        GameEnvironment.get().getHandler().post(new Runnable() {

            @Override
            public void run() {
                addElementsToTableLayout();                 
            }
        });
    } finally {
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
</code></pre>

<p>now if you wish to make it with async task all you shoud do is put it on the
onBackground method</p>

<p>for example </p>

<pre><code>private class DownloadFile extends
        AsyncTask&lt;PluginDetails, Integer, MyBoolean&gt; {
    MyBoolean downloaded;
    ProgressDialog mProgressDialog;
    boolean canceled=false;
    public DownloadFile(MyBoolean downloaded) {
        this.downloaded=downloaded;
    }
    @Override
    protected MyBoolean doInBackground(PluginDetails... pluginDetail) {
        try {

            URL url = new URL("http://cardsplatform.appspot.com"
                    );
            URLConnection connection = url.openConnection();
            connection.connect();
            // this will be useful so that you can show a typical 0-100%
            // progress bar
            long fileLength = getSize();

            // download the file
            InputStream input = new BufferedInputStream(
                    connection.getInputStream());
            FileOutputStream output = StaticFunctions
                    .getPluginOutputStream(pluginDetail[0].getFilename());

            byte data[] = new byte[4096];
            long total = 0;
            int count;
            while ((count = input.read(data)) != -1 &amp;&amp; !canceled) {
                total += count;
                System.out.println((int) (total * 100 / fileLength));
                // publishing the progress....
                publishProgress((int) (total * 100 / fileLength));
                output.write(data, 0, count);
            }
            output.flush();
            output.close();
            input.close();
            if(!canceled)
                downloaded.setFlag(true);
            else{//case its was canceled

            }
        } catch (Exception e) {
            cannotMakeConnection();
            e.printStackTrace();
        }
        return null;
    }
enter code here
</code></pre>
