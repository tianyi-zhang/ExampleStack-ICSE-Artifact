<p>You can generate a stack trace and use the informations in the <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html">StackTraceElements</a>.</p>

<p>For example an utility class can return you the calling class name :</p>

<pre><code>public class KDebug {
    public static String getCallerClassName() { 
        StackTraceElement[] stElements = Thread.currentThread().getStackTrace();
        for (int i=1; i&lt;stElements.length; i++) {
            StackTraceElement ste = stElements[i];
            if (!ste.getClassName().equals(KDebug.class.getName()) &amp;&amp; ste.getClassName().indexOf("java.lang.Thread")!=0) {
                return ste.getClassName();
            }
        }
        return null;
     }
}
</code></pre>

<p>If you call <code>KDebug.getCallerClassName()</code> from <code>bar()</code>, you'll get <code>"foo"</code>.</p>

<p>Now supposing you want to know the class of the method calling <code>bar</code> (which is more interesting and maybe what you really wanted). You could use this method :</p>

<pre><code>public static String getCallerCallerClassName() { 
    StackTraceElement[] stElements = Thread.currentThread().getStackTrace();
    String callerClassName = null;
    for (int i=1; i&lt;stElements.length; i++) {
        StackTraceElement ste = stElements[i];
        if (!ste.getClassName().equals(KDebug.class.getName())&amp;&amp; ste.getClassName().indexOf("java.lang.Thread")!=0) {
            if (callerClassName==null) {
                callerClassName = ste.getClassName();
            } else if (!callerClassName.equals(ste.getClassName())) {
                return ste.getClassName();
            }
        }
    }
    return null;
 }
</code></pre>

<p>Is that for debugging ? If not, there may be a better solution to your problem.</p>
