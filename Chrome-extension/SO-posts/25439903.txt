<p>I already tried this one, Here the OpenCV is able to detect eyes and tries to put the object at the points of the detected location.</p>

<p>But this it's not enough I also want to detect the neck and wrist...</p>

<pre><code>import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.highgui.VideoCapture;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

class My_Panel extends JPanel {
private static final long serialVersionUID = 1L;
private BufferedImage image;
private CascadeClassifier face_cascade;
private Point center;
private JLabel label;

public My_Panel() {
    super();


    Image scalledItemImage = null;
    try {
        scalledItemImage = ImageIO.read(new File("5.png"));
        scalledItemImage= scalledItemImage.getScaledInstance(100,100,Image.SCALE_FAST);
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    label = new JLabel(new ImageIcon(scalledItemImage ));
    add(label);
    face_cascade = new CascadeClassifier(
            "haarcascade_mcs_eyepair_big.xml");
    if (face_cascade.empty()) {
        System.out.println("--(!)Error loading A\n");
        return;
    } else {
        System.out.println("Face classifier loooaaaaaded up");
    }
}

private BufferedImage getimage() {

    return image;
}

public void setimage(BufferedImage newimage) {
    image = newimage;
    return;
}

public BufferedImage matToBufferedImage(Mat matrix) {
    int cols = matrix.cols();
    int rows = matrix.rows();
    int elemSize = (int) matrix.elemSize();
    byte[] data = new byte[cols * rows * elemSize];
    int type;
    matrix.get(0, 0, data);
    switch (matrix.channels()) {
    case 1:
        type = BufferedImage.TYPE_BYTE_GRAY;
        break;
    case 3:
        type = BufferedImage.TYPE_3BYTE_BGR;
        // bgr to rgb
        byte b;
        for (int i = 0; i &lt; data.length; i = i + 3) {
            b = data[i];
            data[i] = data[i + 2];
            data[i + 2] = b;
        }
        break;
    default:
        return null;
    }
    BufferedImage image2 = new BufferedImage(cols, rows, type);
    image2.getRaster().setDataElements(0, 0, cols, rows, data);
    return image2;
}

public void paintComponent(Graphics g) {
    BufferedImage temp = getimage();
    g.drawImage(temp, 10, 10, temp.getWidth(), temp.getHeight(), this);
}

public Mat detect(Mat inputframe) {
    Mat mRgba = new Mat();
    Mat mGrey = new Mat();
    MatOfRect faces = new MatOfRect();
    inputframe.copyTo(mRgba);
    inputframe.copyTo(mGrey);
    Imgproc.cvtColor(mRgba, mGrey, Imgproc.COLOR_BGR2GRAY);
    Imgproc.equalizeHist(mGrey, mGrey);
    face_cascade.detectMultiScale(mGrey, faces);
    System.out.println(String.format("Detected %s faces",
            faces.toArray().length));
    for (Rect rect : faces.toArray()) {
        center = new Point(rect.x + rect.width * 0.5, rect.y + rect.height
                * 0.5);
        // Core.ellipse(mRgba, center, new Size(rect.width * 0.5,
        // rect.height * 0.5), 0, 0, 360, new Scalar(255, 0, 255), 4,
        // 8, 0);
        // Core.rectangle(mRgba, center, new Point(rect.width * 0.5,
        // rect.height * 0.5), new Scalar(25, 0, 25),2);
        label.setLocation((int) center.x, (int) center.y);

        setVisible(true);
        repaint();
    }
    return mRgba;
}
}

public class MyWindow {
public static void main(String arg[]) {
    // Load the native library.
    BufferedImage temp;
    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    String window_name = "Capture - Face detection";
    JFrame frame = new JFrame(window_name);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(400, 400);
    My_Panel my_panel = new My_Panel();
    frame.setContentPane(my_panel);
    frame.setVisible(true);

    Mat webcam_image = new Mat();
    VideoCapture capture = new VideoCapture(0);
    if (capture.isOpened()) {
        while (true) {
            capture.read(webcam_image);

            if (!webcam_image.empty()) {
                frame.setSize(webcam_image.width() + 40,
                        webcam_image.height() + 60);
                webcam_image = my_panel.detect(webcam_image);
                temp = my_panel.matToBufferedImage(webcam_image);
                my_panel.setimage(temp);
                my_panel.repaint();
            } else {
                System.out.println(" --(!) No captured frame -- Break!");
                break;
            }
        }
    }
    return;
}
}
</code></pre>
