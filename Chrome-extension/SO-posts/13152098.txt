<p>use this function instead of BitmapFactory.decodeFile(photoURL,options);</p>

<pre><code>public Bitmap getBitmaplarge(String url,int size) 
{
    File f=fileCache.getFile(url);

    //from SD cache
    Bitmap b = decodeFilelarge(f, size);
    if(b!=null)
        return b;

    //from web
    try 
    {
        Bitmap bitmap=null;
        URL imageUrl = new URL(url);
        HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();
        conn.setConnectTimeout(30000);
        conn.setReadTimeout(30000);
        conn.setInstanceFollowRedirects(true);
        InputStream is=conn.getInputStream();
        OutputStream os = new FileOutputStream(f);
        Utils2.CopyStream(is, os);
        os.close();
        bitmap = decodeFilelarge(f, 800);
        return bitmap;
    } catch (Exception ex)
    {
       ex.printStackTrace();
       return null;
    }
}

//decodes image and scales it to reduce memory consumption
private Bitmap decodeFilelarge(File f,int size)
{
    try
    {
        //decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(new FileInputStream(f),null,o);

        //Find the correct scale value. It should be the power of 2.
        final int REQUIRED_SIZE=size;
        int width_tmp=o.outWidth, height_tmp=o.outHeight;
        int scale=1;
        while(true)
        {
            if(width_tmp/2&lt;REQUIRED_SIZE || height_tmp/2&lt;REQUIRED_SIZE)
                break;
            width_tmp/=2;
            height_tmp/=2;
            scale*=2;
        }

        //decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize=scale;
        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
    } 
    catch (FileNotFoundException e) {}
    return null;
}
</code></pre>

<p>remove your oprion variable. this fun will automatically adjust that..</p>

<p>package com.lazyloading;</p>

<p>import java.io.File;
   import android.content.Context;</p>

<p>public class FileCache 
   {</p>

<pre><code>private File cacheDir;

public FileCache(Context context)
{
    //Find the dir to save cached images
    if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))

        cacheDir=new File(android.os.Environment.getExternalStorageDirectory(),"SingpostCache");
    else

        cacheDir=context.getCacheDir();

    if(!cacheDir.exists())
        cacheDir.mkdirs();
}

public File getFile(String url)
{
    //I identify images by hashcode. Not a perfect solution, good for the demo.
    String filename=String.valueOf(url.hashCode());
    //Another possible solution (thanks to grantland)
    //String filename = URLEncoder.encode(url);
    File f = new File(cacheDir, filename);
    return f;

}

public void clear()
{
    File[] files=cacheDir.listFiles();
    if(files==null)
        return;
    for(File f:files)
        f.delete();
}

}
</code></pre>

<p>make object of filecache class as FileCache fileCache=new FileCache(context);</p>

<p>and copystream fun</p>

<pre><code>public static void CopyStream(InputStream is, OutputStream os)
{
    final int buffer_size=1024;
    try
    {
        byte[] bytes=new byte[buffer_size];
        for(;;)
        {
          int count=is.read(bytes, 0, buffer_size);
          if(count==-1)
              break;
          os.write(bytes, 0, count);
        }
    }
    catch(Exception ex){}
}
</code></pre>
