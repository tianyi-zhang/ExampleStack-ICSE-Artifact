<p>There are a couple of commonly quoted solutions to this problem. Unfortunately neither of these are entirely satisfactory:</p>

<ul>
<li><strong>Install the <a href="http://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html" rel="nofollow">unlimited strength policy files</a>.</strong> While this is probably the right solution for your development workstation, it quickly becomes a major hassle (if not a roadblock) to have non-technical users install the files on every computer. There is <strong>no way</strong> to distribute the files with your program; they must be installed in the JRE directory (which may even be read-only due to permissions).</li>
<li><strong>Skip the JCE API</strong> and use another cryptography library such as <a href="http://www.bouncycastle.org/" rel="nofollow">Bouncy Castle</a>. This approach requires an extra 1MB library, which may be a significant burden depending on the application. It also feels silly to duplicate functionality included in the standard libraries. Obviously, the API is also completely different from the usual JCE interface. (BC does implement a JCE provider, but that doesn't help because the key strength restrictions are applied <em>before</em> handing over to the implementation.) This solution also won't let you use 256-bit TLS (SSL) cipher suites, because the standard TLS libraries call the JCE internally to determine any restrictions.</li>
</ul>

<p><strong>But then there's reflection.</strong> Is there anything you can't do using reflection?</p>

<pre class="lang-java prettyprint-override"><code>private static void removeCryptographyRestrictions() {
    if (!isRestrictedCryptography()) {
        logger.fine("Cryptography restrictions removal not needed");
        return;
    }
    try {
        /*
         * Do the following, but with reflection to bypass access checks:
         *
         * JceSecurity.isRestricted = false;
         * JceSecurity.defaultPolicy.perms.clear();
         * JceSecurity.defaultPolicy.add(CryptoAllPermission.INSTANCE);
         */
        final Class&lt;?&gt; jceSecurity = Class.forName("javax.crypto.JceSecurity");
        final Class&lt;?&gt; cryptoPermissions = Class.forName("javax.crypto.CryptoPermissions");
        final Class&lt;?&gt; cryptoAllPermission = Class.forName("javax.crypto.CryptoAllPermission");

        final Field isRestrictedField = jceSecurity.getDeclaredField("isRestricted");
        isRestrictedField.setAccessible(true);
        final Field modifiersField = Field.class.getDeclaredField("modifiers");
        modifiersField.setAccessible(true);
        modifiersField.setInt(isRestrictedField, isRestrictedField.getModifiers() &amp; ~Modifier.FINAL);
        isRestrictedField.set(null, false);

        final Field defaultPolicyField = jceSecurity.getDeclaredField("defaultPolicy");
        defaultPolicyField.setAccessible(true);
        final PermissionCollection defaultPolicy = (PermissionCollection) defaultPolicyField.get(null);

        final Field perms = cryptoPermissions.getDeclaredField("perms");
        perms.setAccessible(true);
        ((Map&lt;?, ?&gt;) perms.get(defaultPolicy)).clear();

        final Field instance = cryptoAllPermission.getDeclaredField("INSTANCE");
        instance.setAccessible(true);
        defaultPolicy.add((Permission) instance.get(null));

        logger.fine("Successfully removed cryptography restrictions");
    } catch (final Exception e) {
        logger.log(Level.WARNING, "Failed to remove cryptography restrictions", e);
    }
}

private static boolean isRestrictedCryptography() {
    // This simply matches the Oracle JRE, but not OpenJDK.
    return "Java(TM) SE Runtime Environment".equals(System.getProperty("java.runtime.name"));
}
</code></pre>

<p>Simply call <code>removeCryptographyRestrictions()</code> from a static initializer or such before performing any cryptographic operations.</p>

<p>The <code>JceSecurity.isRestricted = false</code> part is all that is needed to use 256-bit ciphers directly; however, without the two other operations, <code>Cipher.getMaxAllowedKeyLength()</code> will still keep reporting 128, and 256-bit TLS cipher suites won't work.</p>

<p>This code works on Oracle JRE 7 and 8, and automatically skips the process on OpenJDK where it's not needed. Being an ugly hack after all, it likely doesn't work on other vendors' VMs.</p>

<p>It also doesn't work on Oracle JRE 6, because the private JCE classes are obfuscated there. The obfuscation does not change from version to version though, so it is technically possible to support JRE 6 too.</p>
