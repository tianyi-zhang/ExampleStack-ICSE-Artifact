<h2>Update</h2>

<p>If you're interested in Java 8 streams. Try this one-liner:</p>

<pre><code>public static void main(String[] args) throws Exception {
    System.out.println(find1_3(new int[]{1, 2, 3, 4}));
    System.out.println(find1_3(new int[]{1, 2, 4}));
    System.out.println(find1_3(new int[]{2, 3, 4}));
}

public static boolean find1_3(int[] nums) {
    return Arrays.stream(nums).filter(n -&gt; n == 1 || n == 3).distinct().count() == 2;
}
</code></pre>

<p>It filters out all numbers except 1 and 3, then <code>distinct()</code> the result of the filter.  If you have a count of 2 then 1 &amp; 3 are in the array, otherwise false.</p>

<p>Results:</p>

<pre><code>true
false
false
</code></pre>

<h2>Old Answer</h2>

<p>Don't want to copy @Cruentus_Nex answer (+1 to you) so here's a variation without using flags</p>

<pre><code>public static void main(String[] args) throws Exception {
    System.out.println(find1_3(new int[] {1, 2, 3, 4}));
    System.out.println(find1_3(new int[] {1, 2, 4}));
    System.out.println(find1_3(new int[] {2, 3, 4}));
}

public static boolean find1_3(int[] num) {
    for (int i = 0; i &lt; num.length; i++) {
        if (num[i] == 1 || num[i] == 3) {
            // Found first match
            int first = num[i];
            // Search for the next 
            for (int j = i + 1; j &lt; num.length; j++) {
                if (num[j] != first &amp;&amp; (num[j] == 1 || num[j] == 3)) {
                    // Found second match
                    return true;
                }
            }
            // Didn't find second match
            return false;
        }
    }
    // Didn't find first match
    return false;
}
</code></pre>

<p>Results:</p>

<pre><code>true
false
false
</code></pre>
