<p>This is a variant of the classic problem of getting <a href="http://www.geocities.com/oosterwal/computer/combinations.html" rel="nofollow">all permutations of a string</a>. </p>

<p>The induction your professor wants you to make is that this problem lends itself well to a solution that uses <strong>recursion</strong>.</p>

<p>The basic algorithm for the permutations of string <code>s</code> is as follows:</p>

<ol>
<li>Select the first item in <code>s</code>.</li>
<li>Get all permutations of the other items in <code>s</code> (except the item selected).</li>
<li>Prepend selected item to each permutation from step 2.</li>
<li>Repeat for the next character of <code>s</code>.</li>
</ol>

<p>Here's an efficient solution using the <a href="http://functionaljava.org/" rel="nofollow">Functional Java</a> library.</p>

<p>Import these...</p>

<pre><code>import fj.F;
import fj.P2;
import fj.P1;
import fj.data.Stream;
import static fj.data.Stream.nil;
import static fj.data.Stream.cons;
import static fj.data.Stream.range;
import static fj.data.Enumerator.charEnumerator;
import static fj.data.Show.streamShow;
import static fj.data.Show.charShow;
import static fj.P2.map2_;
</code></pre>

<p>A recursive function to find permutations:</p>

<pre><code>public Stream&lt;Stream&lt;Character&gt;&gt; permutations(final Stream&lt;Character&gt; s) {
  return selections(s).bind(
    new F&lt;P2&lt;Character, Stream&lt;Character&gt;&gt;, Stream&lt;Stream&lt;Character&gt;&gt;&gt;() {
      public Stream&lt;Stream&lt;Character&gt;&gt;()
        f(final P2&lt;Character, Stream&lt;Character&gt;&gt; ys) {
          return permutations(ys._2()).bind(cons(ys._1()));
        }
      });
}
</code></pre>

<p>A recursive function to select each element in turn:</p>

<pre><code>public Stream&lt;P2&lt;Character, Stream&lt;Character&gt;&gt;&gt;
selections(final Stream&lt;Character&gt; s) {
  if (xs.isEmpty())
    return nil();
  else {
    final char x = xs.head();
    final Stream&lt;Character&gt; xs = s.tail()._1();
    return cons(P.p(x, xs),
      new P1&lt;Stream&lt;P2&lt;Character, Stream&lt;Character&gt;&gt;&gt;&gt;() {
        public Stream&lt;P2&lt;Character, Stream&lt;Character&gt;&gt;&gt; _1() { 
          return selections(xs).map(map2_().f(cons(x))));
        }
      });
  }
}
</code></pre>

<p>and then, to get all permutations of characters '0' through '9':</p>

<pre><code>Show&lt;Stream&lt;Character&gt;&gt; s = streamShow(charShow);
for (Stream&lt;Character&gt; ps : permutations(range(charEnumerator, '0', '9'))) {
  System.out.println(s.showS(ps));
}
</code></pre>

<p><strong>EDIT</strong>: This is actually a great use case for <a href="http://planetmath.org/encyclopedia/Comonad.html" rel="nofollow">comonads</a>. Using the latest trunk head of Functional Java, you can do this with the Zipper comonad, like so:</p>

<pre><code>public static Stream&lt;Stream&lt;Character&gt;&gt; perms(Stream&lt;Character&gt; s) {
  Stream&lt;Stream&lt;Character&gt;&gt; r = single(Stream.&lt;Character&gt;nil());
  for (final Zipper&lt;Character&gt; z : fromStream(s))
    r = join(z.cobind(
      new F&lt;Zipper&lt;Character&gt;, Stream&lt;Stream&lt;Character&gt;&gt;&gt;() {
        public Stream&lt;Stream&lt;Character&gt;&gt; f(final Zipper&lt;Character&gt; zp) {
          return perms(zp.lefts().reverse().append(zp.rights())).map(compose(
            Stream.&lt;Character&gt;cons().f(zp.focus()),
              P.&lt;Stream&lt;Character&gt;&gt;p1()));
        }
      }).toStream());
  return r;
}
</code></pre>
