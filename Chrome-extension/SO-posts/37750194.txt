<p>If I understood you right, you got a class that serves as a generic type and want to know how to use the Comparator interface with that. Here is my try:</p>

<pre><code>class ClassWithFields {

    int fieldA;
    double fieldB;
    String fieldC;

    public ClassWithFields(int fieldA, double fieldB, String fieldC) {
        this.fieldA = fieldA;
        this.fieldB = fieldB;
        this.fieldC = fieldC;
    }

    @Override
    public String toString() {
        return "["+fieldA+","+fieldB+","+fieldC+"]";
    }

}

public class GenericComparator&lt;T extends ClassWithFields&gt; implements Comparator&lt;T&gt; {

    @Override
    public int compare(T o1, T o2) {
        if (o1.fieldA &lt; o2.fieldA)
            return -1;
        else if (o1.fieldA &gt; o2.fieldA)
            return +1;
        else if (o1.fieldB &lt; o2.fieldB)
            return -1;
        else if (o1.fieldB &gt; o2.fieldB)
            return +1;
        else
            return o1.fieldC.compareTo(o2.fieldC);
    }

    public static void main(String[] args) {
        ClassWithFields[] cwfArray = new ClassWithFields[3];
        cwfArray[0] = new ClassWithFields(2, 1.5, "Test");
        cwfArray[1] = new ClassWithFields(1, 3.5, "Test");
        cwfArray[2] = new ClassWithFields(2, 1.5, "Tast");
        Arrays.sort(cwfArray, new GenericComparator&lt;ClassWithFields&gt;());
        System.out.println(Arrays.toString(cwfArray));
    }

}
</code></pre>

<p>When you run the main method, the first array item will be put at the back of the array because 1 &lt; 2 and 'a' &lt; 'e' (also 3.5 &lt; 1.5 but we don't go there because we have an order in which the fields are compared)
Does that answer the question?</p>

<p><strong>EDIT:</strong> This should do it now.</p>

<pre><code>public class GenericComparator&lt;T extends ClassWithFields&gt; implements Comparator&lt;T&gt; {

    private String fieldIdentifier;

    public GenericComparator(String fieldIdentifier)
    {
        this.fieldIdentifier = fieldIdentifier;
    }

    @Override
    public int compare(T o1, T o2) {
        if (fieldIdentifier.equals("fieldA")) {
            if (o1.fieldA &lt; o2.fieldA)
                return -1;
            else if (o1.fieldA &gt; o2.fieldA)
                return +1;
            return 0;
        }
        else if (fieldIdentifier.equals("fieldB")) {
            if (o1.fieldB &lt; o2.fieldB)
                return -1;
            else if (o1.fieldB &gt; o2.fieldB)
                return +1;
            return 0;
        }
        else
            return o1.fieldC.compareTo(o2.fieldC);
    }

    public static &lt;S extends ClassWithFields&gt; void isort(ArrayList&lt;S&gt; array, String type) {
        Comparator&lt;S&gt; comp = new GenericComparator&lt;S&gt;(type);
        // TODO employ search algorithm
        S help = null;
        for (int i = 0; i &lt; array.size(); i++) {
            for (int j = 0; j &lt; array.size(); j++) {
                if (comp.compare(array.get(i), array.get(j)) &gt; 0) {
                    help = array.get(i);
                    array.set(i, array.get(j));
                    array.set(j, help);
                }
            }
        }
    }

    public static void main(String[] args) {
        ClassWithFields[] cwfArray = new ClassWithFields[3];
        cwfArray[0] = new ClassWithFields(2, 1.5, "Test");
        cwfArray[1] = new ClassWithFields(1, 3.5, "Test");
        cwfArray[2] = new ClassWithFields(2, 1.5, "Tast");
        ArrayList&lt;ClassWithFields&gt; cwfList = new ArrayList&lt;ClassWithFields&gt;();
        Collections.addAll(cwfList, cwfArray);
        isort(cwfList, "fieldA");
        System.out.println(Arrays.toString(cwfList.toArray()));
    }

}
</code></pre>
