<p>Your code supposes that you pass the port you want to use as an argument so :</p>

<ul>
<li><p>Either you run your application with the line Patryk Roszczynia?a posted</p></li>
<li><p>If you don't want to use it, just delete the lines :</p>

<pre><code>String serverName = args[0]; 
int port = Integer.parseInt(args[0]);
</code></pre>

<p>and replace them by hardcoded values like :</p>

<pre><code>String serverName = "MyServerName";
int port = 3000;
</code></pre></li>
</ul>

<p><strong>Update :</strong></p>

<p>I just tested your code, in fact, the serverName is the address you use to connect to the server, so replace it by <code>"localhost"</code> if you are running both client and server on the same machine.</p>

<p><strong>Tested code :</strong></p>

<p>Here is the updated code I tested and it should work perfectly if you run both on the same machine.</p>

<p>Client :</p>

<pre><code>import java.io.*;
import java.net.*;
public class GreetingClient
{
    private static String serverName;
   public static void main(String [] args)
   {
      String sName = "localhost";
      int port = 9000;
      try
      {
         System.out.println("Connecting to " + sName
                             + " on port " + port);
         Socket client = new Socket(sName, port);
         System.out.println("Just connected to "
                      + client.getRemoteSocketAddress());
         OutputStream outToServer = client.getOutputStream();
         DataOutputStream out =
                       new DataOutputStream(outToServer);

         out.writeUTF("Hello from "
                      + client.getLocalSocketAddress());
         InputStream inFromServer = client.getInputStream();
         DataInputStream in =
                        new DataInputStream(inFromServer);
         System.out.println("Server says " + in.readUTF());
         client.close();
      }catch(IOException e)
      {
      }
   }
}
</code></pre>

<p>Server :</p>

<pre><code>import java.net.*;
import java.io.*;

public class GreetingServer extends Thread
{
    private static int port;
   private ServerSocket serverSocket;

   public GreetingServer(int port) throws IOException
   {
      serverSocket = new ServerSocket(port);
      serverSocket.setSoTimeout(20000);
   }

   public void run()
   {
      while(true)
      {
         try
         {
            System.out.println("Waiting for client on port " +
            serverSocket.getLocalPort() + "...");
            Socket server = serverSocket.accept();
            System.out.println("Just connected to "
                  + server.getRemoteSocketAddress());
            DataInputStream in =
                  new DataInputStream(server.getInputStream());
            System.out.println(in.readUTF());
            DataOutputStream out =
                 new DataOutputStream(server.getOutputStream());
            out.writeUTF("Thank you for connecting to "
              + server.getLocalSocketAddress() + "\nGoodbye!");
            server.close();
         }catch(SocketTimeoutException s)
         {
            System.out.println("Socket timed out!");
            break;
         }catch(IOException e)
         {
            e.printStackTrace();
            break;
         }
      }
   }
   public static void main(String [] args)
   {
      port=9000;
      try
      {
         Thread t = new GreetingServer(port);
         t.start();
      }catch(IOException e)
      {
         e.printStackTrace();
      }
   }
}
</code></pre>
