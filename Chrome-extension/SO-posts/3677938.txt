<p>The problem is that <code>ResourceCursorTreeAdapter</code> <strong>only creates the correct layouts on creation</strong> of a view. So if a group gets collapsed or expanded the <code>newGroupView()</code> is <strong>not called again</strong> and therefore the different group layouts passed into the constructor are not used as expected.</p>

<p>Same problem exists with the child layouts when using different ones for normal and last child. It happens there without even changing the data! After re-expanding a group the first one had the footer layout and vice-versa. Totally random and not based on position in the list.</p>

<p>As Aleksander O showed in his example, one can fix this by always call <code>newGroupView()</code> in the <code>getGroupView</code> method (and the <code>getChildView</code> respectively if different layouts are used for that).</p>

<p>To avoid always create new views, I tried a different approach that works for my case:</p>

<ul>
<li>Add different ids to the root element of the layouts used for group/child views</li>
<li><p>Store those view-ids as int members of my Adapter:</p>

<pre><code>// Get the view ids for comparison
View view = newGroupView(mContext, null, false, null);
mCollapsedGroupLayoutViewId = view.getId();
view = newGroupView(mContext, null, true, null);
mExpandedGroupLayoutViewId = view.getId();

view = newChildView(mContext, null, false, null);
mChildLayoutViewId = view.getId();
view = newChildView(mContext, null, true, null);
mLastChildLayoutViewId = view.getId();
</code></pre></li>
<li><p>Implementation of getGroupView (and analog with getChildView):</p>

<pre><code>public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
        Cursor cursor = getGroup(groupPosition);
        if (cursor == null) {
            throw new IllegalStateException("this should only be called when the cursor is valid");
        }

        View v;
        if (convertView == null 
          || (isExpanded &amp;&amp; convertView.getId() == mCollapsedGroupLayoutViewId) 
          || (!isExpanded &amp;&amp; convertView.getId() == mExpandedGroupLayoutViewId)) {
            v = newGroupView(mContext, cursor, isExpanded, parent);
        }
        else {
            v = convertView;
        }
        bindGroupView(v, mContext, cursor, isExpanded);
        return v;
}
</code></pre></li>
</ul>
