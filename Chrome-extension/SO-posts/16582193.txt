<p>First , create a class which will store your content :</p>

<pre><code>public class BlogEntry { //I suppose you will call that a BlogEntry ?
    public int id;
    public String name;
    public String question;
    public String blog;
    public ArrayList&lt;Comment&gt; comments = new ArrayList&lt;Comment&gt;();
}
</code></pre>

<p>And the class to store your comments :</p>

<pre><code>public class Comment {
    public int id;
    public int questionId;
    public String name;
    public String comment;
    public String blog;

}
</code></pre>

<p>Then create 2 tables with your SQLBlog class which will match the data described in those two classes.</p>

<p>You should now create a method like :</p>

<pre><code>public ArrayList&lt;BlogEntry&gt; getAllEntries() {

    Cursor c = db.rawQuery("SELECT * FROM blogentries", null);
    int iRow = c.getColumnIndex(KEY_ROWID);
    int iName = c.getColumnIndex(KEY_NAME);
    int iBlog = c.getColumnIndex(KEY_BLOG);
    int iQuestion = c.getColumnIndex("question");

    //table comment
    int row = c.getColumnIndex("id");
    int name = c.getColumnIndex("name");
    int blog = c.getColumnIndex("blog");
    int iComment = c.getColumnIndex("comment");

    ArrayList&lt;BlogEntry&gt; entries = new ArrayList&lt;BlogEntry&gt;();
    for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
        BlogEntry b = new BlogEntry();
        b.id = c.getInt(iRow);
        b.name = c.getString(iName);
        b.blog = c.getString(iBlog);
        b.question = c.getString(iQuestion);
        Cursor c2 = db.rawQuery("SELECT * FROM comments WHERE questionId=? ORDER BY id ASC", new String[]{String.valueOf(b.id)});

        for (c.moveToFirst(); !c.isAfterLast(); c.moveToNext()) {
            Comment com = new Comment();
            com.questionId = b.id;
            com.id = c.getInt(row);
            com.name = c.getString(name);
            com.blog = c.getString(blog);
            com.comment = c.getString(iComment);
            b.comments.add(com);
        }
        entries.add(b);
    }
    return entries;
}
</code></pre>

<p>You should have something you can work with now, next step is to create an activity with a listview and an adapter to map the datas.</p>

<p>In my example i will use a ExpandableListView who looks like : <img src="http://i.stack.imgur.com/5fesH.jpg" alt="ExpandableListView"></p>

<p>Here is the ListViewLayout.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
android:orientation="horizontal" android:baselineAligned="false"&gt;
    &lt;ExpandableListView android:id="@+id/myExpandableListView "
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;
    &lt;/ExpandableListView&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Your activity : </p>

<pre><code>public class myActivity extends Activity {
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.layout);
    ExpandableListView list = (ExpandableListView) findViewById(R.id.myExpandableListView);
    ArrayList&lt;BlogEntry&gt; entries = new SQLBlog().getAllEntries();
    list.setAdapter(new MyExpandableListAdapter(entries));
}
</code></pre>

<p>We need to create an item layout : (call it itemlayout.xml)</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal" android:baselineAligned="false"&gt;
 &lt;TextView
        android:id="@+id/myTextViewThatWillHoldTheQuestion"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Your MyExpandableListAdapter :</p>

<pre><code>public class MyExpandableListAdapter extends BaseExpandableListAdapter {
    ArrayList&lt;BlogEntry&gt; entries;
    LayoutInflater inflater;
    public MyExpandableListAdapter(ArrayList&lt;BlogEntry&gt; entries, Context ctx) {
        this.entries = entries;
        inflater = LayoutInflater.from(ctx);
    }

    @Override
    public Object getChild(int groupPosition, int childPosition) {
        return entries.get(groupPosition).comments.get(childPosition);
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return entries.get(groupPosition).comments.get(childPosition).id;
    }

    @Override
    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) {
        commentHolder holder;
        if (convertView == null) {
            convertView = inflater.inflate(R.id.itemlayout, null); //we use the same for comment and blogentry but you shouldn't coz you want the display to change
            holder.myTextViewThatHoldComment = (TextView)convertView.findViewById(R.id.myTextViewThatWillHoldTheQuestion);
            convertView.setTag(holder);
        } else {
            holder = (commentHolder) convertView.getTag();
        }
        Comment item = (Comment)getChild(groupPosition,childPosition);
        holder.myTextViewThatHoldComment.setText(item.comment);
        return convertView;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        return entries.get(groupPosition).comments.size();
    }

    @Override
    public Object getGroup(int groupPosition) {
        return entries.get(groupPosition);
    }

    @Override
    public int getGroupCount() {
        return entries.size();
    }

    @Override
    public long getGroupId(int groupPosition) {
        return entries.get(groupPosition).id;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
        BlogEntryHolder holder;
        if (convertView == null) {
            convertView = inflater.inflate(R.id.itemlayout, null); //we use the same for comment and blogentry but you shouldn't coz you want the display to change
            holder.myTextViewThatHoldQuestion = (TextView)convertView.findViewById(R.id.myTextViewThatWillHoldTheQuestion);
            convertView.setTag(holder);
        } else {
            holder = (BlogEntryHolder) convertView.getTag();
        }
        BlogEntry item = (BlogEntry)getGroup(groupPosition);
        holder.myTextViewThatHoldComment.setText(item.question);
        return convertView;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return false;
    }

    private  class BlogEntryHolder{
        TextView myTextViewThatHoldQuestion;
    }
    private  class commentHolder{
        TextView myTextViewThatHoldComment;
    }

}
</code></pre>

<p>You should have something like you asked :)</p>
