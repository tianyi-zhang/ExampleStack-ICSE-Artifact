<p>What you can do here is just sort your HashMap and pick the first or last keys to get max or min values.</p>

<pre><code>public LinkedHashMap&lt;Integer,Integer&gt; sortHashMapByValues(HashMap&lt;Integer,Integer&gt; passedMap) {
   List&lt;Integer&gt; mapKeys = new ArrayList&lt;Integer&gt;(passedMap.keySet());
   List&lt;Integer&gt; mapValues = new ArrayList&lt;Integer&gt;(passedMap.values());
   Collections.sort(mapValues);
   Collections.sort(mapKeys);

   LinkedHashMap&lt;Integer,Integer&gt; sortedMap = 
       new LinkedHashMap&lt;Integer,Integer&gt;();

   Iterator valueIt = mapValues.iterator();
   while (valueIt.hasNext()) {
       Object val = valueIt.next();
    Iterator keyIt = mapKeys.iterator();

    while (keyIt.hasNext()) {
        int key = (Integer)keyIt.next();
        int comp1 = (Integer)passedMap.get(key);
        int comp2 = (Integer)val;

        if (comp1 == comp2){
            passedMap.remove(key);
            mapKeys.remove(key);
            sortedMap.put(key,(Integer) val);
            break;
        }

    }

}
return sortedMap;
}
</code></pre>

<p>Remember -Their may be more then one keys with same value.</p>
