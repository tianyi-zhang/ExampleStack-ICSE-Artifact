<p>TreeSet is backed by an implementation of NavigableMap called TreeMap.  The code ultimately called when computing lower() on TreeSet is lowerEntry() on TreeMap.</p>

<pre><code>/**
 * Returns the entry for the greatest key less than the specified key; if
 * no such entry exists (i.e., the least key in the Tree is greater than
 * the specified key), returns {@code null}.
 */
final Entry&lt;K,V&gt; getLowerEntry(K key) {
    Entry&lt;K,V&gt; p = root;
    while (p != null) {
        int cmp = compare(key, p.key);
        if (cmp &gt; 0) {
            if (p.right != null)
                p = p.right;
            else
                return p;
        } else {
            if (p.left != null) {
                p = p.left;
            } else {
                Entry&lt;K,V&gt; parent = p.parent;
                Entry&lt;K,V&gt; ch = p;
                while (parent != null &amp;&amp; ch == parent.left) {
                    ch = parent;
                    parent = parent.parent;
                }
                return parent;
            }
        }
    }
    return null;
}
</code></pre>

<p>Looking at this code, it looks like with each iteration of the while loop, every branch either returns or traverse one level of the tree.  Since Tree Map should have <code>log(n)</code> levels, the entire method has <code>O(log(n))</code> complexity.</p>
