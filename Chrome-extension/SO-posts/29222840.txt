<p>That code is specific to reading from files.  You will need to setup an AsyncTask and pull the data in a background thread.</p>

<p>This page explains the issues and provides good examples.</p>

<p><a href="http://developer.android.com/training/basics/network-ops/connecting.html" rel="nofollow">http://developer.android.com/training/basics/network-ops/connecting.html</a></p>

<p><strong>Update 1:</strong></p>

<p>Here is code from a project that pulls the data and parses it and populates a java object:</p>

<pre><code>import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.URL;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.StatusLine;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import com.google.gson.Gson;

public class RestServices
{

   public static String getServerAddress()
   {
      return "http://192.168.96.179:8090/";
   }

   public static String getRestURI()
   {
      return "api/";
   }

   public static &lt;T&gt; T getExternalData(Class&lt;T&gt; clazz, String uri) throws IOException
   {
      String responseString = "";
      try
      {
         HttpClient httpclient = new DefaultHttpClient();
         String address = getServerAddress() +  getRestURI() + uri;
         HttpResponse response = httpclient.execute(new HttpGet(address));
         StatusLine statusLine = response.getStatusLine();
         if(statusLine.getStatusCode() == HttpStatus.SC_OK){
             ByteArrayOutputStream out = new ByteArrayOutputStream();
             response.getEntity().writeTo(out);
             out.close();
             responseString = out.toString();
         } else{
             response.getEntity().getContent().close();
             throw new IOException(statusLine.getReasonPhrase());
         }
      }
      catch (ClientProtocolException e)
      {

      }

      Gson gson = new Gson();
      T object = gson.fromJson(responseString, clazz);
      return object;
   }


}
</code></pre>

<p>And how I call it:</p>

<pre><code>class SiteConfigTask extends AsyncTask&lt;Void, SiteConfig, SiteConfig&gt;
   {

      @Override
      protected SiteConfig doInBackground(Void... none) 
      {
         SiteConfig sc = null;
         try
         {
            sc = RestServices.getExternalData(SiteConfig.class, "siteconfig");
         } catch (IOException e)
         {
            Log.e(TAG,"Failed to fetch siteconfig", e);
         }
          return sc;
      }

      @Override
      protected void onPostExecute(SiteConfig result) 
      {
         super.onPostExecute(result);

         if ( result == null )
         {
            EventBus.getDefault().post(new ConfigurationFetchErrorEvent());
         }
         else
         {
            // Adds an additional empty stream if there are
            // and odd number of streams, the new stream will be disabled.
            if ( result.getStreamList().size() % 2 != 0)
            {
               Stream s = new Stream();
               s.setEnabled(false);
               result.getStreamList().add(s);
            }

            updateSiteConfig(result);
         }
      }
  }
</code></pre>
