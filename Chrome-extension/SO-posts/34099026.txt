<p>You need to create a CameraPreview class in the same folder as your MainActivity.</p>

<p>Here's the code for my preview, you'll have to add some code to your MainActivity as well and maybe edit my code to work with your project.</p>

<pre><code>public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {

private static final String TAG = CameraPreview.class.getSimpleName();

private SurfaceHolder mSurfaceHolder;
private Camera mCamera;
private Context mContext;
private List mSupportedPreviewSizes;
private Camera.Size mPreviewSize;

public CameraPreview(Context context) {
    super(context);
}

public CameraPreview(Context context, AttributeSet attrs) {
    super(context, attrs);
}

public void setCameraPreview(Context context, Camera camera) {
    mContext = context;
    mCamera = camera;

    if(mCamera != null) {
        mSupportedPreviewSizes = mCamera.getParameters().getSupportedPreviewSizes();
    }

    requestLayout();
    mSurfaceHolder = getHolder();
    mSurfaceHolder.addCallback(this);
    mSurfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
    mSurfaceHolder.setKeepScreenOn(true);
}

public void surfaceCreated(SurfaceHolder surfaceHolder) {
    try {
        mCamera.setPreviewDisplay(surfaceHolder);
        mCamera.startPreview();
    } catch (IOException e) {
        Log.d("DG_DEBUG", "Error setting camera preview: " + e.getMessage());
    }
}

public void surfaceChanged(SurfaceHolder surfaceHolder, int format, int w, int h) {
    if (mSurfaceHolder.getSurface() == null) {
        return;
    }

    try {
        mCamera.stopPreview();
    } catch (Exception e) {
        e.printStackTrace();
        // ignore: tried to stop a non-existent preview
    }

    try {

        Camera.Parameters cameraParameters = mCamera.getParameters();
        List&lt;String&gt; focusModes = cameraParameters.getSupportedFocusModes();

        if (focusModes.contains(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) {
            cameraParameters.setFocusMode(Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);
        }

        List&lt;Camera.Size&gt; previewSizes = cameraParameters.getSupportedPreviewSizes();
//            List&lt;Camera.Size&gt; pictureSizes = cameraParameters.getSupportedPictureSizes();
        Camera.Size optimalPreviewSize = getOptimalSize(previewSizes, getResources().getDisplayMetrics().widthPixels, getResources().getDisplayMetrics().heightPixels);
//            Camera.Size optimalPictureSize = getOptimalSize(pictureSizes, getResources().getDisplayMetrics().heightPixels, getResources().getDisplayMetrics().widthPixels);
        cameraParameters.setPreviewSize(optimalPreviewSize.width, optimalPreviewSize.height);
//            cameraParameters.setPictureSize(optimalPictureSize.width, optimalPictureSize.height);

        mCamera.setParameters(cameraParameters);

        mCamera.setPreviewDisplay(mSurfaceHolder);
        mCamera.startPreview();
    } catch (Exception e) {
        e.printStackTrace();
        Log.d(TAG, "Error setting camera preview" + e.getMessage());
        mCamera.release();
        mCamera = null;
    }
}

private Camera.Size getOptimalSize(List&lt;Camera.Size&gt; sizes, int h, int w) {
    final double ASPECT_TOLERANCE = 0.05;
    double targetRatio = (double) w/h;

    if (sizes == null) {
        return null;
    }

    Camera.Size optimalSize = null;

     double minDiff = Double.MAX_VALUE;

    int targetHeight = h;

    for (Camera.Size size : sizes) {
        double ratio = (double) size.width / size.height;
        if (Math.abs(ratio - targetRatio) &gt; ASPECT_TOLERANCE) continue;
        if (Math.abs(size.height - targetHeight) &lt; minDiff) {
            optimalSize = size;
            minDiff = Math.abs(size.height - targetHeight);
        }
    }

    if (optimalSize == null) {
        minDiff = Double.MAX_VALUE;
        for (Camera.Size size : sizes) {
            if (Math.abs(size.height - targetHeight) &lt; minDiff) {
                optimalSize = size;
                minDiff = Math.abs(size.height - targetHeight);
            }
        }
    }

    return optimalSize;
}

public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
    if (mCamera != null) {
        // stop preview before making changes
        try {
            mCamera.stopPreview();
        } catch (Exception e) {
            e.printStackTrace();
            // ignore: tried to stop a non-existent preview
        }
    }
}
</code></pre>

<p>}</p>
