<p>You've got the ViewHolder concept a little bit wrong here.</p>

<p>You should only use one ViewHolder for every item in the list and your ViewHolder should contain one field for every child view that you may want to update in the future.</p>

<p>Like this:</p>

<pre><code>public class ViewHolder {
  public TextView txt1;
  public TextView txt2;
  public TextView txt3;
}
</code></pre>

<p>So your getView should look more like this:</p>

<pre><code>public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder viewHolder = null;

    if (convertView == null) {
        convertView = LayoutInflater.from(context_1).inflate(
                R.layout.custom_row_community, null);
        viewHolder = new ViewHolder();

        viewHolder.txt1 = (TextView) convertView
                .findViewById(R.id.t1);
        viewHolder.txt2 = (TextView) convertView
                .findViewById(R.id.t2);
        viewHolder.txt3 = (TextView) convertView
                .findViewById(R.id.t3);


        /**
         * At very first time when the List View row Item control's
         * instance is created it will be store in the convertView as a
         * ViewHolder Class object for the reusability purpose
         **/
        convertView.setTag(viewHolder);

    } else {
        /**
         * Once the instance of the row item's control it will use from
         * already created controls which are stored in convertView as a
         * ViewHolder Instance
         * */
        viewHolder = (ViewHolder) convertView.getTag();
    }

    viewHolder.txt1.setText(post.get(position).articolo);
    viewHolder.txt2.setText(post.get(position).nome);
    viewHolder.txt3.setText(post.get(position).data);




    return convertView; }
</code></pre>

<p>You can read more about this pattern which often used in android here:
<a href="http://developer.android.com/training/improving-layouts/smooth-scrolling.html" rel="nofollow">http://developer.android.com/training/improving-layouts/smooth-scrolling.html</a></p>

<p>Good luck!</p>
