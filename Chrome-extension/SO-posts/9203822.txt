<p>You can an adapt your existing search algorithm just by having a sharper definition of matching. You can tell that the highlighted 5 in the sequence 1,3,<b>5</b>,5,5,9 is the first one because the number before it (3) is smaller than 5. So if mid lands on array element equal to the the key you only treat it as a match if a[mid-1] is less than key, other equal array elements are treated like greater than elements. Now you algorithm becomes (after including Jon Skeet's suggestion to return negatives for insertion points):</p>

<pre><code>public static int binarySearch(int[] a, int key) {
    int low=0,high=a.length-1;
    while (low&lt;=high) {
        int mid=(low+high) &gt;&gt;&gt; 1;
        int midVal=a[mid];
        if (midVal &lt; key) 
            low=mid+1;
        else if (mid&gt;0 &amp;&amp; a[mid-1]&gt;=key) //we already know midval&gt;=key here
            high=mid-1;
        else if (midVal==key) //found the 1st key 
             return mid;
        else
            return ~mid;      //found insertion point
    }
    return ~(a.length);       //insertion point after everything
}
</code></pre>

<p>It uses more comparisons but went faster than Stev314's version in my benchmarks probably because of cache effects. </p>
