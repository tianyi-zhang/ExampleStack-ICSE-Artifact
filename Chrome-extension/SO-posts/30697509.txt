<p>Following is a generic <code>compare()</code> function for arrays in Java. You can modify for your needs in case you have a different interpretation for what makes one array "greater than" another in non-straightforward scenarios (different lengths, nulls, etc.). It can also be changed easily to work on primitives, such as <code>byte</code>, <code>int</code>, etc.</p>

<pre><code>public static &lt;T extends Comparable&lt;T&gt;&gt; int compare(T[] a, T[] b)
{
    if (a == b)
        return 0;

    // arbitrary: two null arrays are considered 'equal'
    if (a == null &amp;&amp; b == null)
        return 0;

    // arbitrary: non-null array is considered 'greater than' null array
    if (a == null)
        return -1; // "a &lt; b"
    else if (b == null)
        return 1; // "a &gt; b"

    // now the item-by-item comparison - the loop runs as long as items in both arrays are equal
    for (int i = 0;; i++)
    {
        // shorter array whose items are all equal to the first items of a longer array is considered 'less than'
        boolean pastA = (i == a.length);
        boolean pastB = (i == b.length);
        if (pastA &amp;&amp; !pastB)
            return -1; // "a &lt; b"
        else if (!pastA &amp;&amp; pastB)
            return 1; // "a &gt; b"
        else if (pastA &amp;&amp; pastB)
            return 0; // "a = b", same length, all items equal

        T ai = a[i];
        T bi = b[i];
        if (ai == null &amp;&amp; bi == null)
            continue; // again, two null items are assumed 'equal'

        // arbitrary: non-null item is considered 'greater than' null item
        if (ai == null)
            return -1; // "a &lt; b"
        else if (bi == null)
            return 1; // "a &gt; b"

        int comp = ai.compareTo(bi);
        if (comp != 0)
            return comp;
    }
}
</code></pre>
