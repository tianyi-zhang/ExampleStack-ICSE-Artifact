<p>Basically for each ZipEntry you have to check if it isDirectory() and parse that also.
Checkout this link:
<a href="http://www.javaworld.com/javaworld/javatips/jw-javatip49.html" rel="nofollow">http://www.javaworld.com/javaworld/javatips/jw-javatip49.html</a></p>

<p>LE:</p>

<p>Here is a complete example that extracts the files from the jar, and if you specify a specific path it will extract only that folder:</p>

<pre><code>public void doUnzip(String inputZip, String destinationDirectory, String specificPath)
        throws IOException {
    int BUFFER = 2048;
    File sourceZipFile = new File(inputZip);
    File unzipDestinationDirectory = new File(destinationDirectory);
    unzipDestinationDirectory.mkdir();

    ZipFile zipFile;
    // Open Zip file for reading
    zipFile = new ZipFile(sourceZipFile, ZipFile.OPEN_READ);

    // Create an enumeration of the entries in the zip file
    Enumeration&lt;?&gt; zipFileEntries = zipFile.entries();

    // Process each entry
    while (zipFileEntries.hasMoreElements()) {
        // grab a zip file entry
        ZipEntry entry = (ZipEntry) zipFileEntries.nextElement();

        if(specificPath != null){
            if(entry.getName().startsWith(specificPath) == false)
                continue;
        }

        File destFile = new File(unzipDestinationDirectory, entry.getName());

        // create the parent directory structure if needed
        destFile.getParentFile().mkdirs();

        try {
            // extract file if not a directory
            if (!entry.isDirectory()) {
                BufferedInputStream is = new BufferedInputStream(
                        zipFile.getInputStream(entry));
                // establish buffer for writing file
                byte data[] = new byte[BUFFER];

                // write the current file to disk
                FileOutputStream fos = new FileOutputStream(destFile);
                BufferedOutputStream dest = new BufferedOutputStream(fos,
                        BUFFER);

                // read and write until last byte is encountered
                for (int bytesRead; (bytesRead = is.read(data, 0, BUFFER)) != -1;) {
                    dest.write(data, 0, bytesRead);
                }
                dest.flush();
                dest.close();
                is.close();
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
    zipFile.close();
}

public static void main(String[] args) {
    Unzip unzip = new Unzip();
    try {
        unzip.doUnzip("test.jar", "output", "x/y/z");
    } catch (IOException e) {
        e.printStackTrace();
    }
}
</code></pre>
