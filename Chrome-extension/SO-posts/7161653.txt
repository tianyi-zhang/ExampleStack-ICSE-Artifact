<p>using 1 char array could work a bit better</p>

<pre><code>int length = s.length();
char[] oldChars = new char[length];
s.getChars(0, length, oldChars, 0);
int newLen = 0;
for (int j = 0; j &lt; length; j++) {
    char ch = oldChars[j];
    if (ch &gt;= ' ') {
        oldChars[newLen] = ch;
        newLen++;
    }
}
s = new String(oldChars, 0, newLen);
</code></pre>

<p>and I avoided repeated calls to <code>s.length();</code></p>

<p>another micro-optimization that might work is</p>

<pre><code>int length = s.length();
char[] oldChars = new char[length+1];
s.getChars(0, length, oldChars, 0);
oldChars[length]='\0';//avoiding explicit bound check in while
int newLen=-1;
while(oldChars[++newLen]&gt;=' ');//find first non-printable,
                       // if there are none it ends on the null char I appended
for (int  j = newLen; j &lt; length; j++) {
    char ch = oldChars[j];
    if (ch &gt;= ' ') {
        oldChars[newLen] = ch;//the while avoids repeated overwriting here when newLen==j
        newLen++;
    }
}
s = new String(oldChars, 0, newLen);
</code></pre>
