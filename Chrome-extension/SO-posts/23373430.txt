<p>On first launch of your application, you can programmatically check if your device is a tablet or phone. If it is a phone, you can programmatically add a shortcut to the home screen, and specify the Intent the launcher should use, in order to go to the correct Activity.</p>

<p>First, in your Manifest, you will have only one launcher, but you will have an Activity with no intent filters that will be opened from the programmatically-created shortcut.</p>

<p>Next, in your launcher Activity's onCreate, check if the you have already created the shortcut. From what I have read, the best way to do this is using a boolean value in <code>SharedPreferences</code>:</p>

<pre><code>SharedPreferences prefs = getSharedPreferences(getPackageName(), MODE_PRIVATE);
if (!prefs.getBoolean("shortcut", false)) {
    if (!isTablet(this)) {
        createShortcut();
    }
    prefs.edit().putBoolean("shortcut", true).commit();
}
else {
    //if the shortcut has already been made, see if that is what was used to open this app
    if (getIntent() != null) {
        if (getIntent().getBooleanExtra("shortcut", false)) {
            //the shortcut was used, so open the other Activity:
            Intent shortcut = new Intent(this, OtherActivity.class);
            startActivity(shortcut);
        }
    }
}
</code></pre>

<p>Next, you need to define what you call a tablet. This is based on the density-independent pixels of the screen. For example, to call devices with 7-inch screens tablets, this number is 600. For larger devices - such as a 10-inch screen, this number is 720. Store this number in a variable:</p>

<pre><code>private static final int TABLET_DP = 600;
</code></pre>

<p>Then add the methods used above:</p>

<pre><code>public static boolean isTablet(Context context) {
    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);\
    Display display = wm.getDefaultDisplay();
    DisplayMetrics outMetrics = new DisplayMetrics();
    display.getMetrics(outMetrics);
    float density  = context.getResources().getDisplayMetrics().density;
    float dpWidth  = outMetrics.widthPixels / density;
    return dpWidth &gt;= TABLET_DP;
}

private void createShortcut() {

    //this is the intent that will be used when the shortcut is clicked.
    Intent shortcutIntent = new Intent(Intent.ACTION_MAIN);
    shortcutIntent.setClassName(this, this.getClass().getName());
    shortcutIntent.putExtra("shortcut", true);

    //this is the intent used to create the shortcut.
    Intent intent = new Intent();
    intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);
    intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, getString(R.string.app_name));//or however you want the shortcut to be labeled.
    Parcelable iconResource = Intent.ShortcutIconResource.fromContext(
            this,  R.drawable.ic_launcher);//or whatever you want the icon to be
    intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, iconResource);
    intent.setAction("com.android.launcher.action.INSTALL_SHORTCUT");

    //tell Android to create the shortcut
    context.sendBroadcast(intent);
}
</code></pre>

<p>Finally, be sure you have the correct permissions to install shortcuts:</p>

<pre><code>&lt;uses-permission android:name="com.android.launcher.permission.INSTALL_SHORTCUT"&gt;&lt;/uses-permission&gt;
</code></pre>
