<p>What you could do is that</p>

<ol>
<li><p>detect the swipe and set a flag then</p>

<pre><code>public interface TouchDelegate {
   public void gestureHandler(String msg, float downX, float downY);

   public boolean notASwipe(View v, MotionEvent event);
}

public class SwipeDetector implements View.OnTouchListener {

   private TouchDelegate mView;
   static final int MIN_DISTANCE = 50;
   private float downX, downY, upX, upY;
   public SwipeDetector(TouchDelegate view) {
      this.mView = view;
   }

   public void onRightToLeftSwipe() {
      mView.gestureHandler("R2L", downX, downY);
   }

   public void onLeftToRightSwipe() {
      mView.gestureHandler("L2R", downX, downY);
   }

   public void onTopToBottomSwipe() {
      mView.gestureHandler("T2B", downX, downY);
   }

   public void onBottomToTopSwipe() {
      mView.gestureHandler("B2T", downX, downY);
   }

   public boolean onTouch(View v, MotionEvent event) {
   switch (event.getAction()) {
   case MotionEvent.ACTION_DOWN: {
       downX = event.getX();
       downY = event.getY();
       return true;
   }
   case MotionEvent.ACTION_UP: {
       upX = event.getX();
       upY = event.getY();

       float deltaX = downX - upX;
       float deltaY = downY - upY;

       // swipe horizontal?
       if (Math.abs(deltaX) &gt; MIN_DISTANCE) {
           // left or right
           if (deltaX &lt; 0) {
               this.onLeftToRightSwipe();
               return true;
           }
           if (deltaX &gt; 0) {
               this.onRightToLeftSwipe();
               return true;
           }
       } else {
           // swipe vertical?
           if (Math.abs(deltaY) &gt; MIN_DISTANCE) {
               // top or down
               if (deltaY &lt; 0) {
                   this.onTopToBottomSwipe();
                   return true;
               }
               if (deltaY &gt; 0) {
                   this.onBottomToTopSwipe();
                   return true;
               }
           } else {
               Log.d(getClass().getSimpleName(),
                       "SwipeDetector: onTouch: Swipe was only x: " + Math.abs(deltaX)
                            + " long, need at least " + MIN_DISTANCE);
            Log.d(getClass().getSimpleName(),
                    "SwipeDetector: onTouch: Swipe was only y: "
                            + Math.abs(deltaY)
                            + " long, need at least " + MIN_DISTANCE);
            return mView.notASwipe(v, event); // We don't consume the
                                                // event
        }
    }
    return true;
}
}
return false;
}
}
</code></pre></li>
<li><p>override the shouldOverrideUrlLoading to disable all the links on the webview. Here is the code to disable all the links on the webview:</p>

<pre><code>public class MyWebViewClient extends WebViewClient {
 public boolean shuldOverrideKeyEvent (WebView view, KeyEvent event) {
    if(swipe)              
       return true;
     return false;
 }
 public boolean shouldOverrideUrlLoading (WebView view, String url) {
   if (!swipe) {
        view.loadUrl(url);
   }
   return true;
 }
}
</code></pre></li>
</ol>
