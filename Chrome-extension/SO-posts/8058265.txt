<p>I'm not sure if it is correct to classify this as a bug, but every time you use Typeface.createFromAsset if creates a new font asset and does not release it. See <a href="http://code.google.com/p/android/issues/detail?id=9904">this</a>.</p>

<p>What you can do is load the typefaces when you load your app and reference them statically. I put my typefaces in Application.</p>

<pre><code>public class YourApp extends android.app.Application {
    public void onCreate() {
        super.onCreate();

        // typeface caching
        initializeTypefaces();
    }

    public static class Fonts {
        public static Typeface THEOREM;
    }

    private void initializeTypefaces(){
        Fonts.THEOREM   = Typeface.createFromAsset(getAssets(), "fonts/theorem.otf");
    }
}
</code></pre>

<p>And then I do this in my adapter:</p>

<pre><code>textView.setTypeface(YourApp.Fonts.THEOREM);
</code></pre>

<p>You can go <a href="http://trace.adityalesmana.com/2010/08/declare-global-variable-in-android-via-android-app-application/">here</a> to see how to use Application in Android.</p>

<p>Lastly, it looks like your still creating your ViewHolder every time instead of only when convertView is null. I would review this video to get the whole picture.  <a href="http://www.google.com/events/io/2010/sessions/world-of-listview-android.html">http://www.google.com/events/io/2010/sessions/world-of-listview-android.html</a></p>

<p>Here is an example of how I use the ViewHolder method:</p>

<pre><code>@Override
public View getView(int pos, View convertView, ViewGroup parent) {
    ViewHolder holder;

    if(convertView == null || convertView.getTag() == null){
        convertView = inflater.inflate(R.layout.list_item, parent, false);
        holder = new ViewHolder();

        holder.text1  = (TextView)convertView.findViewById(R.id.list_item_text1);
        holder.text2  = (TextView)convertView.findViewById(R.id.list_item_text2);
        holder.text1.setTypeface(YourApp.Fonts.THEOREM); // only happens once when recycling!

        convertView.setTag(holder);
    }else{
        holder = (ViewHolder) convertView.getTag();
    }

    holder.text1.setText("someText");
    holder.text2.setText("someText");
    return convertView;
}
</code></pre>
