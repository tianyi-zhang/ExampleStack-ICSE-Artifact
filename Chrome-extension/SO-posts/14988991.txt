<p>I finally found a suitable solution:</p>

<ul>
<li><a href="http://developer.android.com/guide/topics/renderscript/compute.html">RenderScript</a> allows implementing heavy computations which are scaled transparently to all cores available on the executing device. I've come to the conclusion, that with respect to a reasonable balance of performance and implementation complexity, this is a better approach than JNI or shaders.</li>
<li>Since API Level 17, there is the <a href="http://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlur.html">ScriptIntrinsicBlur</a> class available from the API. This is exactly what I've been looking for, namely a high level, hardware-accelerated Gaussian blur implementation.</li>
<li><a href="http://developer.android.com/reference/android/support/v8/renderscript/ScriptIntrinsicBlur.html">ScriptIntrinsicBlur</a> is now a part of the android support library (v8) which supports Froyo and above (API>8). The android developer blog post on the <a href="http://android-developers.blogspot.in/2013/09/renderscript-in-android-support-library.html">support RenderScript library</a> has some basic tips on how to use it. </li>
</ul>

<p>However, the documentation on the <code>ScriptIntrinsicBlur</code> class is very rare and I've spent some more time on figuring out the correct invocation arguments. For bluring an ordinary <code>ARGB_8888</code>-typed bitmap named <code>photo</code>, here they are:</p>

<pre><code>final RenderScript rs = RenderScript.create( myAndroidContext );
final Allocation input = Allocation.createFromBitmap( rs, photo, Allocation.MipmapControl.MIPMAP_NONE, Allocation.USAGE_SCRIPT );
final Allocation output = Allocation.createTyped( rs, input.getType() );
final ScriptIntrinsicBlur script = ScriptIntrinsicBlur.create( rs, Element.U8_4( rs ) );
script.setRadius( myBlurRadius /* e.g. 3.f */ );
script.setInput( input );
script.forEach( output );
output.copyTo( photo );
</code></pre>
