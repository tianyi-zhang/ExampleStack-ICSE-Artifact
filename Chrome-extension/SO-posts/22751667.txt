<p><code>FrameLayout</code> will not work with <code>weightSum</code> it is by design meant to fill up your layout. Try using a <code>LinearLayout</code> or <code>RelativeLayout</code> instead.</p>

<p>Secondly, when it comes to swapping all your content, you have a few options.</p>

<p><strong>Option 1</strong>
Use one <code>FrameLayout</code>, for your 2 panel layout create a <code>Fragment</code> that contains 2 Fragments. Yes, you can have <code>Fragment</code>s within <code>Fragment</code>s.</p>

<p>In this scenario, your <code>Activity</code>'s layout will look more like the implementation that Google recommends and it is your fragments layout that will contain the 2 panel layout.</p>

<p><strong>Option 2</strong>
You can swap out one of the <code>LinearLayout</code>s for your fragment and hide the other <code>LinearLayout</code>. There is no reason you can only swap a <code>FrameLayout</code> for a fragment, you should be able to swap out a <code>LinearLayout</code> for a <code>Fragment</code> as well.</p>

<p><strong>Option 3</strong>
The <code>DrawerLayout</code> implementation is just a recommendation. You can move the layout for your drawer into a fragment and use a different <code>Activity</code> for your different layouts. To be clear, instead of a <code>ListView</code> for your drawer, you will have a fragment. In this scenario, put all the code to add the toggle controls in a helper class so you can easily reuse it, your drawer view will be in a fragment and hence it will be easier to include in multiple activities.</p>

<p>I've included an example of how to do this, because you need to wrap your navigation drawer fragment in a frame layout and give the frame layout the <code>layout_gravity</code> property otherwise the fragment will fill up the whole screen and not close.</p>

<p><code>activity_main.xml</code></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:id="@+id/drawer_layout"
android:layout_width="match_parent"
android:layout_height="match_parent" &gt;

&lt;!-- The main content view --&gt;

&lt;FrameLayout
    android:id="@+id/content_frame"
    android:layout_width="match_parent"
    android:layout_height="match_parent" /&gt;
&lt;!-- The navigation drawer --&gt;

&lt;FrameLayout
    android:id="@+id/nav_drawer_container"
    android:layout_gravity="start"
    android:layout_width="240dp"
    android:layout_height="match_parent" &gt;

    &lt;fragment
        android:id="@+id/nav_drawer"
        android:layout_width="240dp"
        android:layout_height="match_parent"
        class="com.alimuzaffar.myapp.fragment.NavigationMenuFragment" /&gt;
&lt;/FrameLayout&gt;

&lt;/android.support.v4.widget.DrawerLayout&gt;
</code></pre>

<p>The code for the toggle helper can be something like the <code>setupNavigationDrawer()</code> method below. Just call this code from the <code>onCreate()</code> of any activity you want to have the navigation drawer.</p>

<pre><code>public static void setupNavigationDrawer() {
    mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
    if (mDrawerLayout != null) {
        // ActionBarDrawerToggle ties together the the proper interactions
        // between the sliding drawer and the action bar app icon
        mDrawerToggle = new ActionBarDrawerToggle(this, /* host Activity */
        mDrawerLayout, /* DrawerLayout object */
        R.drawable.ic_drawer, /* nav drawer image to replace 'Up' caret */
        R.string.drawer_open, /* "open drawer" description for accessibility */
        R.string.drawer_close /* "close drawer" description for accessibility */
        ) {

            @Override
            public void onDrawerClosed(View view) {
                getSupportActionBar().setTitle(mTitle);
                supportInvalidateOptionsMenu(); // creates call
                                                                // to
                                                                // onPrepareOptionsMenu()
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                getSupportActionBar().setTitle("");
                supportInvalidateOptionsMenu(); // creates call
                                                                // to
                                                                // onPrepareOptionsMenu()
            }
        };

        // set a custom shadow that overlays the main content when the drawer opens
        mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
        mDrawerLayout.setDrawerListener(mDrawerToggle);
    }

}
</code></pre>
