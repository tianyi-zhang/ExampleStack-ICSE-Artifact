<pre><code> import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;

  import org.json.JSONArray;
  import org.json.JSONException;
  import org.json.JSONObject;

  import android.util.Log;

 import com.google.android.gms.maps.model.LatLng;
 public class DirectionsJSONParser {

public List&lt;List&lt;List&lt;HashMap&lt;String,String&gt;&gt;&gt;&gt; parse(JSONObject jObject){

    List&lt;List&lt;HashMap&lt;String, String&gt;&gt;&gt; routes = new ArrayList&lt;List&lt;HashMap&lt;String,String&gt;&gt;&gt;() ;
    List&lt;List&lt;List&lt;HashMap&lt;String,String&gt;&gt;&gt;&gt; routes1 = new ArrayList&lt;List&lt;List&lt;HashMap&lt;String,String&gt;&gt;&gt;&gt;() ;
    JSONArray jRoutes = null;
    JSONArray jLegs = null;
    JSONArray jSteps = null;

    try {

        jRoutes = jObject.getJSONArray("routes");

        /** Traversing all routes */
        for(int i=0;i&lt;jRoutes.length();i++){
            jLegs = ( (JSONObject)jRoutes.get(i)).getJSONArray("legs");
            List path = new ArrayList&lt;HashMap&lt;String, String&gt;&gt;();
            List path1 = new ArrayList&lt;ArrayList&lt;HashMap&lt;String,String&gt;&gt;&gt;();

        // Log.d("legs",jLegs.toString());
            /** Traversing all legs */
            for(int j=0;j&lt;jLegs.length();j++){
             HashMap&lt;String, String&gt; hm1 = new HashMap&lt;String, String&gt;();
                jSteps = ( (JSONObject)jLegs.get(j)).getJSONArray("steps");
               // Log.d("steps",jSteps.toString());
                /** Traversing all steps */
                for(int k=0;k&lt;jSteps.length();k++){

                    String polyline = "";
                    polyline = (String)((JSONObject)((JSONObject)jSteps.get(k)).get("polyline")).get("points");
                    List&lt;LatLng&gt; list = decodePoly(polyline);
                  //  Log.d("polyline",polyline.toString());
                    /** Traversing all points */

                    for(int l=0;l&lt;list.size();l++){
                         HashMap&lt;String, String&gt;    hm = new HashMap&lt;String, String&gt;();
                        hm.put("lat", Double.toString(((LatLng)list.get(l)).latitude) );
                        hm.put("lng", Double.toString(((LatLng)list.get(l)).longitude) );

                        path.add(hm);
                      //  Log.d("lat", Double.toString(((LatLng)list.get(l)).latitude));
                      //  Log.d("lng", Double.toString(((LatLng)list.get(l)).longitude));
                    }

                }

                path1.add(path);

        }
            routes1.add(path1);
    }

} catch (JSONException e) {
    e.printStackTrace();
}catch (Exception e){
}

return routes1;
}
/**
* Method to decode polyline points
* Courtesy : http://jeffreysambells.com/2010/05/27/decoding-polylines-from-google-maps-direction-api-with-java
* */
private List&lt;LatLng&gt; decodePoly(String encoded) {

    List&lt;LatLng&gt; poly = new ArrayList&lt;LatLng&gt;();
    int index = 0, len = encoded.length();
    int lat = 0, lng = 0;

    while (index &lt; len) {
        int b, shift = 0, result = 0;
        do {
            b = encoded.charAt(index++) - 63;
            result |= (b &amp; 0x1f) &lt;&lt; shift;
            shift += 5;
        } while (b &gt;= 0x20);
        int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lat += dlat;

        shift = 0;
        result = 0;
        do {
            b = encoded.charAt(index++) - 63;
            result |= (b &amp; 0x1f) &lt;&lt; shift;
            shift += 5;
        } while (b &gt;= 0x20);
        int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lng += dlng;

        LatLng p = new LatLng((((double) lat / 1E5)),
            (((double) lng / 1E5)));
        poly.add(p);
    }

    return poly;
}
}
</code></pre>
