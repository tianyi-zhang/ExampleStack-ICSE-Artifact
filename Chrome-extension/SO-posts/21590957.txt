<p>Turns out, dynamically adding a <code>TextView</code> isn't the answer. I ended up creating a <code>FrameLayout</code> for the <code>ViewGroup</code> to use.</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" &gt;

&lt;uk.co.senab.photoview.PhotoView
    android:id="@+id/uilpv_pv"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent" /&gt;

&lt;TextView
    android:id="@+id/uilpv_tv"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
    android:layout_gravity="top|center_horizontal"
    android:background="#A0449def"
    android:gravity="center"
    android:padding="10dp"
    android:textColor="@android:color/white"
    android:textSize="18sp" /&gt;

&lt;/FrameLayout&gt;
</code></pre>

<p>As you can see in the XML, I'm using <code>ChrisBanes' PhotoView</code> instead of an <code>ImageView</code>, so then in <code>instantiateItem()</code> call the <code>PhotoView</code> like so:</p>

<pre><code>        @Override
    public Object instantiateItem(ViewGroup view, int position) {
        View imageLayout = inflater
                .inflate(R.layout.uil_pager_item, view, false);
        PhotoView pHview = (PhotoView) imageLayout
                .findViewById(R.id.uilpv_pv);
        mAttacher = new PhotoViewAttacher(pHview);

        imageLoader.displayImage(images[position], pHview, options,
                new SimpleImageLoadingListener() {
                    @Override
                    public void onLoadingStarted(String imageUri, View view) {
                        // spinner.setVisibility(View.VISIBLE);
                    }

                    @Override
                    public void onLoadingFailed(String imageUri, View view,
                            FailReason failReason) {
                        String message = null;
                        switch (failReason.getType()) {
                        case IO_ERROR:
                            message = "Input/Output error";
                            break;
                        case DECODING_ERROR:
                            message = "Image can't be decoded";
                            break;
                        case NETWORK_DENIED:
                            message = "Downloads are denied";
                            break;
                        case OUT_OF_MEMORY:
                            message = "Out Of Memory error";
                            break;
                        case UNKNOWN:
                            message = "Unknown error";
                            break;
                        }
                        Toast.makeText(UILPager.this, message,
                                Toast.LENGTH_SHORT).show();

                        // spinner.setVisibility(View.GONE);
                    }

                    @Override
                    public void onLoadingComplete(String imageUri,
                            View view, Bitmap loadedImage) {
                        // spinner.setVisibility(View.GONE);
                    }
                });

        TextView txt = (TextView) imageLayout.findViewById(R.id.uilpv_tv);
        txt.setText(imTitlesStr[position]);

        ((ViewPager) view).addView(imageLayout, 0);
        return imageLayout;
    }
</code></pre>

<p>And for my project, this solution works exactly the way it's supposed to.</p>
