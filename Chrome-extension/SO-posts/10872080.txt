<p>Basically, you take a <code>BufferedImage</code>, use <a href="http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/image/BufferedImage.html#getRGB%28int,%20int,%20int,%20int,%20int%5B%5D,%20int,%20int%29" rel="nofollow">getRBG()</a> to get the RGB of each pixel, take that data and put it into a <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/nio/ByteBuffer.html" rel="nofollow">ByteBuffer</a> (the data type used to input image data to OpenGL), set some texture data, and create the <code>GL_TEXTURE_2D</code>.  </p>

<p>This code by <a href="http://stackoverflow.com/users/3214889">Krythic</a> does it:</p>

<pre><code>import java.awt.image.BufferedImage;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.imageio.ImageIO;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL12;

import static org.lwjgl.opengl.GL11.*;

public class TextureLoader {
    private static final int BYTES_PER_PIXEL = 4;//3 for RGB, 4 for RGBA
       public static int loadTexture(BufferedImage image){

          int[] pixels = new int[image.getWidth() * image.getHeight()];
            image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());

            ByteBuffer buffer = BufferUtils.createByteBuffer(image.getWidth() * image.getHeight() * BYTES_PER_PIXEL); //4 for RGBA, 3 for RGB

            for(int y = 0; y &lt; image.getHeight(); y++){
                for(int x = 0; x &lt; image.getWidth(); x++){
                    int pixel = pixels[y * image.getWidth() + x];
                    buffer.put((byte) ((pixel &gt;&gt; 16) &amp; 0xFF));     // Red component
                    buffer.put((byte) ((pixel &gt;&gt; 8) &amp; 0xFF));      // Green component
                    buffer.put((byte) (pixel &amp; 0xFF));               // Blue component
                    buffer.put((byte) ((pixel &gt;&gt; 24) &amp; 0xFF));    // Alpha component. Only for RGBA
                }
            }

            buffer.flip(); //FOR THE LOVE OF GOD DO NOT FORGET THIS

            // You now have a ByteBuffer filled with the color data of each pixel.
            // Now just create a texture ID and bind it. Then you can load it using 
            // whatever OpenGL method you want, for example:

          int textureID = glGenTextures(); //Generate texture ID
            glBindTexture(GL_TEXTURE_2D, textureID); //Bind texture ID

            //Setup wrap mode
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL12.GL_CLAMP_TO_EDGE);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL12.GL_CLAMP_TO_EDGE);

            //Setup texture scaling filtering
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
            glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

            //Send texel data to OpenGL
            glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, image.getWidth(), image.getHeight(), 0, GL_RGBA, GL_UNSIGNED_BYTE, buffer);

            //Return the texture ID so we can bind it later again
          return textureID;
       }

       public static BufferedImage loadImage(String loc)
       {
            try {
               return ImageIO.read(MainClass.class.getResource(loc));
            } catch (IOException e) {
                //Error Handling Here
            }
           return null;
       }
}
</code></pre>

<p>To use this code, do something like this:</p>

<pre><code>BufferedImage image = TextureLoader.loadImage("/res/test.png");//The path is inside the jar file
int textureID = TextureLoader.loadTexture(image);
</code></pre>

<p>You can either save the textureID as a <code>final</code> variable(if the texture never changes), or unload the texture after each render using <code>GL11.glDeleteTextures(textureID);</code></p>

<p>To do text, just create a <code>BufferedImage</code> manually, and use <a href="http://docs.oracle.com/javase/6/docs/api/java/awt/image/BufferedImage.html#createGraphics%28%29" rel="nofollow">createGraphics()</a> to get a <a href="http://docs.oracle.com/javase/1.4.2/docs/api/java/awt/Graphics2D.html" rel="nofollow">graphics2D()</a> instance for the image.  Then, use <code>drawString()</code> to draw onto the <code>BufferedImage</code>, load it into the <code>TextureLoader</code>, render it onscreen, and unload the texture using the method above.</p>
