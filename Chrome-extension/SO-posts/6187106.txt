<p>If you just compress and decompress byte arrays - without storing them in a <code>ZipEntry</code> - you must save the size yourself, as the byte array to which you compress the data is not necessarily used to its full extent.</p>

<p>You can see this clearly from the example in <code>Deflater</code>'s <a href="http://download.oracle.com/javase/6/docs/api/java/util/zip/Deflater.html" rel="nofollow">javadoc</a>:</p>

<pre><code>try {
     // Encode a String into bytes
     String inputString = "blahblahblah??";
     byte[] input = inputString.getBytes("UTF-8");

     // Compress the bytes
     byte[] output = new byte[100];
     Deflater compresser = new Deflater();
     compresser.setInput(input);
     compresser.finish();
     int compressedDataLength = compresser.deflate(output);

     // Decompress the bytes
     Inflater decompresser = new Inflater();
     decompresser.setInput(output, 0, compressedDataLength);
     byte[] result = new byte[100];
     int resultLength = decompresser.inflate(result);
     decompresser.end();

     // Decode the bytes into a String
     String outputString = new String(result, 0, resultLength, "UTF-8");
 } catch(java.io.UnsupportedEncodingException ex) {
     // handle
 } catch (java.util.zip.DataFormatException ex) {
     // handle
 }
</code></pre>

<p>The code must maintain the compressed data's lenght as the output array is of length 100, no matter the actual length of the data it stores.</p>
