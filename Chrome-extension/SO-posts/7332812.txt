<p>What I have done in the past is write a parser for ByteBuffer (to avoid byte to char encoding conversion) to double and visa-versa. If you can avoid creating any objects it can be much faster.  This approach works for memory mapped files avoiding some copy costs as well.</p>

<p>The core code looks like the following. It doesn't handle exponents, but you can add that.</p>

<pre><code>@Override
public double read() throws BufferUnderflowException {
  long value = 0;
  int exp = 0;
  boolean negative = false;
  int decimalPlaces = Integer.MIN_VALUE;
  while (true) {
    byte ch = buffer.get();
    if (ch &gt;= '0' &amp;&amp; ch &lt;= '9') {
      while (value &gt;= MAX_VALUE_DIVIDE_10) {
        value &gt;&gt;&gt;= 1;
        exp++;
      }
      value = value * 10 + (ch - '0');
      decimalPlaces++;
    } else if (ch == '-') {
      negative = true;
    } else if (ch == '.') {
      decimalPlaces = 0;
    } else {
      break;
    }
  }

  return asDouble(value, exp, negative, decimalPlaces);
}
</code></pre>

<p><a href="http://code.google.com/p/core-java-performance-examples/source/browse/trunk/src/main/java/com/google/code/java/core/parser/ByteBufferTextDoubleReader.java" rel="nofollow">The full code</a></p>

<p>It stops as soon as it gets any byte it doesn't expect e.g. a <code>,</code> or <code>\n</code></p>
