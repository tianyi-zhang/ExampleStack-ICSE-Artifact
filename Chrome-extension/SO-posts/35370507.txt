<p>The way is to write the picture taken to a file and get the path to said file and passing the path to the next activity and intializing a bitmap using said path to file and setting the image view...ill post a code soon</p>

<p>mean while look into <a href="http://www.androidhive.info/2013/09/android-working-with-camera-api/" rel="nofollow">here</a> while i post a snippet
EDIT: SNIPPET
this code sets up camera to take a picture and save to a file.</p>

<pre><code>private void onCameraSelected() {
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        fileUri = getOutputMediaFileUri();
        intent.putExtra(MediaStore.EXTRA_OUTPUT, fileUri);
        startActivityForResult(intent, PICTURE_CAMERA);
    }

    private Uri getOutputMediaFileUri() {
        return Uri.fromFile(getOutputMediaFile());
    }

    private File getOutputMediaFile() {

        // External sdcard location
        File mediaStorageDir = new File(
                Environment
                        .getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
                IMAGE_DIRECTORY_NAME);

        // Create the storage directory if it does not exist
        if (!mediaStorageDir.exists()) {
            if (!mediaStorageDir.mkdirs()) {
                Log.d(IMAGE_DIRECTORY_NAME, "Oops! Failed create "
                        + IMAGE_DIRECTORY_NAME + " directory");
                return null;
            }
        }

        // Create a media file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",
                Locale.getDefault()).format(new Date());
        File mediaFile;
        mediaFile = new File(mediaStorageDir.getPath() + File.separator
                + "IMG_" + timeStamp + ".jpg");

        return mediaFile;
    }
</code></pre>

<p>on the onActivityResult detect resultcode/request code for camera and consume it like so</p>

<pre><code>private void loadImageFromCamera(Intent data) {
        try {
            BitmapFactory.Options options = new BitmapFactory.Options();
            // downsizing image as it throws OutOfMemory Exception for larger images
//            options.inSampleSize = 8;
            Bitmap bitmap = BitmapFactory.decodeFile(fileUri.getPath(), options);
            setLoadedImage(bitmap);// set bitmap to imageview here.
        } catch (NullPointerException e) {
            e.printStackTrace();
        } catch (IOException e) {
            Logger.logError("File not found :" + fileUri.getPath());
            e.printStackTrace();
        }
    }
</code></pre>

<p>Basically youre playing with the variable <code>String filePath = fileUri.getPath();</code> // just declare Uri fileUri in activity level or something.</p>
