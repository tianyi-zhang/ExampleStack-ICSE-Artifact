<p><code>\n</code> is a <code>linux/unix</code> line ending while <code>\r\n</code> is <code>windows</code> line ending.</p>

<p>if there is such a file that has both line ending it should be reformatted.</p>

<p>My suggestion would be if you ever come across such file, just reformat it to either use <code>\n</code> or <code>\r\n</code> (depending on your OS not that it matter nowadays). it makes your life easier so the life of the next person that is going to use it next.</p>

<p>Alternatively (please don't use this :/)  you can override <code>BufferReader.readLine(Boolean b)</code> to this:</p>

<pre><code>String readLine(boolean ignoreLF) throws IOException {
     StringBuffer s = null;
     int startChar;

     synchronized (lock) {
         ensureOpen();
         boolean omitLF = ignoreLF || skipLF;

     bufferLoop:
         for (;;) {

             if (nextChar &gt;= nChars)
                 fill();
             if (nextChar &gt;= nChars) { /* EOF */
                 if (s != null &amp;&amp; s.length() &gt; 0){
                   if(skipLF=='\r'){
                     return s.toString() + "\r\n";
                   }else{
                     return s.toString() + "\n";
                   }
                 }
                 else
                     return null;
             }
             boolean eol = false;
             char c = 0;
             int i;

             /* Skip a leftover '\n', if necessary */
             if (omitLF &amp;&amp; (cb[nextChar] == '\n'))
                 nextChar++;
             skipLF = false;
             omitLF = false;

         charLoop:
             for (i = nextChar; i &lt; nChars; i++) {
                 c = cb[i];
                 if ((c == '\n') || (c == '\r')) {
                     eol = true;
                     break charLoop;
                 }
             }

             startChar = nextChar;
             nextChar = i;

             if (eol) {
                 String str;
                 if (s == null) {
                     str = new String(cb, startChar, i - startChar);
                 } else {
                     s.append(cb, startChar, i - startChar);
                     str = s.toString();
                 }
                 nextChar++;
                 if (c == '\r') {
                     skipLF = true;
                 }
                 if(skipLF=='\r'){
                   return str + "\r\n";
                 }else{
                   return str + "\n";
                 }
             }

             if (s == null)
                 s = new StringBuffer(defaultExpectedLineLength);
             s.append(cb, startChar, i - startChar);
         }
     }
 }
</code></pre>

<p>SOURCE CODE edited from:</p>

<p><a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/io/BufferedReader.java#BufferedReader.readLine%28boolean%29" rel="nofollow">http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/io/BufferedReader.java#BufferedReader.readLine%28boolean%29</a></p>
