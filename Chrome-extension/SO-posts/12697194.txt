<p>My Mono skills are limited so I don't know if I fully understood your adapter, anyway I've adapted some old code and made an adapter that expands a single item when click, also it will move the <code>ListView</code> in <code>onResume</code> to a desired position:</p>

<pre><code>private static class CustomAdapter extends BaseAdapter {

        // the data
        private ArrayList&lt;String&gt; mData;

        // an int pointing to a position that has an expanded layout,
        // for simplicity I assume that you expand only one item(otherwise use
        // an array or list)
        private int mExpandedPosition = -1; // -1 meaning no expanded item
        private LayoutInflater mInflater;

        public CustomAdapter(Context context, ArrayList&lt;String&gt; items) {
            mInflater = LayoutInflater.from(context);
            mData = items;
        }

        public void setExpandedPosition(int position) {
            // if the position equals mExpandedPosition then we have a click on
            // the same row so simply toggle the row to be gone again
            if (position == mExpandedPosition) {
                mExpandedPosition = -1;
            } else {
                // else change position of the row that was expanded
                mExpandedPosition = position;
            }
            // notify the adapter
            notifyDataSetChanged();
        }

        @Override
        public int getCount() {
            return mData.size();
        }

        @Override
        public String getItem(int position) {
            return mData.get(position);
        }

        @Override
        public long getItemId(int position) {
            return position;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if (convertView == null) {
                convertView = mInflater.inflate(R.layout.ad_expandedelement,
                        parent, false);
            }
            ((TextView) convertView.findViewById(R.id.textView1))
                    .setText(getItem(position));
            // see if there is an expanded position and if we are at that
            // position
            if (mExpandedPosition != -1 &amp;&amp; mExpandedPosition == position) {
                // if yes simply expand the layout
                convertView.findViewById(R.id.button1).setVisibility(
                        View.VISIBLE);
            } else {
                // this is required, we must revert any possible changes
                // otherwise the recycling mechanism will hurt us
                convertView.findViewById(R.id.button1).setVisibility(View.GONE);
            }
            return convertView;
        }

    }
</code></pre>

<p>The <code>onListItemClick</code> will simply be:</p>

<pre><code>@Override
protected void onListItemClick(ListView l, View v, int position, long id) {
    // set the expanded(or collapsed if it's a click on the same row that
    // was previously expanded) row in the adapter
    ((CustomAdapter) getListView().getAdapter())
            .setExpandedPosition(position);
}
</code></pre>

<p>and in <code>onResume</code> will have:</p>

<pre><code>@Override
protected void onResume() {
    super.onResume();
    // set the position to the desired element
    ((CustomAdapter) getListView().getAdapter()).setExpandedPosition(15);
    // set the selection to that element so we can actually see it
    // this isn't required but has the advantage that it will move the
    // ListView to the desired
    // position if not visible
    getListView().setSelection(15);
}
</code></pre>

<p>The <code>R.layout.ad_expandedelement</code> is a simple vertical <code>LinearLayout</code> with a <code>TextView</code> and an initially hidden(visibility set to gone) <code>Button</code>. For this <code>Button</code> I change the visibility to simulate expanding/collapsing a row in the <code>ListView</code>. You should be able to understand my code, if you want I can post on github the full sample.</p>
