<p>finally I found solution to my problem. I used solution from this site:</p>

<p><a href="http://blog.gorges.us/wp-content/uploads/TwoDScrollView.java" rel="nofollow">Link1</a></p>

<p>well I saw that solution before, but unfortunately I didn't realize that this solution is good for me. I knew that I need onMeasure method for Canvas to show it in xml, but withouth of solution from mentioned site it didn't work. Now it works. Here is my xml, and SampleView solution.</p>

<p><b>XML code:</b></p>

<pre><code>    &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/app_layout" android:orientation="horizontal"
    android:layout_width="fill_parent" android:layout_height="fill_parent"&gt;
    &lt;!-- SCENE --&gt;
    &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:id="@+id/scene_layout" 
        android:drawingCacheQuality="low"
        android:orientation="horizontal" android:layout_width="fill_parent"
        android:layout_height="fill_parent"&gt;
        &lt;com.testiranje.Kristijan.TwoDScrollView
            android:id="@+id/scene_scroller" android:drawingCacheQuality="low"
            android:scrollbars="horizontal"

            android:layout_width="fill_parent" android:layout_height="fill_parent"&gt;
            &lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
                android:id="@+id/scene_container" 
                android:drawingCacheQuality="low"
                android:background="@drawable/map"
                android:layout_width="fill_parent" android:layout_height="fill_parent"&gt;

                &lt;com.testiranje.Kristijan.SampleView
                    android:layout_height="fill_parent"
                    android:layout_width="fill_parent"&gt;

                    &lt;/com.testiranje.Kristijan.SampleView&gt;

                &lt;!--  &lt;ImageView xmlns:android="http://schemas.android.com/apk/res/android"
                    android:id="@+id/scene_background" android:drawingCacheQuality="low"
                    android:background="@drawable/map"
                    android:layout_width="fill_parent" android:layout_height="fill_parent" /&gt; --&gt;
            &lt;/RelativeLayout&gt;
        &lt;/com.testiranje.Kristijan.TwoDScrollView&gt;
    &lt;/RelativeLayout&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p><b>This is my SampleView solution:</b></p>

<pre><code> public class SampleView extends View {
    private Paint   mPaint = new Paint();
    private float[] mPts;

    private static final float SIZE = 1000;
    private static final int SEGS = 50;
    private static final int X = 0;
    private static final int Y = 1;

    private void buildPoints() {
        final int ptCount = (SEGS + 1) * 2;
        mPts = new float[ptCount * 2];

        float value = 0;
        final float delta = SIZE / SEGS;
        for (int i = 0; i &lt;= SEGS; i++) {
            mPts[i*4 + X] = SIZE - value;
            mPts[i*4 + Y] = 0;
            mPts[i*4 + X + 2] = 0;
            mPts[i*4 + Y + 2] = value;
            value += delta;
        }
    }

    public SampleView(Context context){
        super(context);
        //initSampleView();
        buildPoints();

    }

   //This constructor is very important because withouth of this 
   //you can't insert this view in xml
   public SampleView(Context context, AttributeSet attrs) {
        super(context, attrs);
        //initSampleView();
        buildPoints();
    }

    /*private final void initSampleView() {
        mPaint = new Paint();
        mPaint.setAntiAlias(true);
        setPadding(3, 3, 3, 3);
    }*/

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        setMeasuredDimension(measureWidth(widthMeasureSpec),
                measureHeight(heightMeasureSpec));
    }

    /**
     * Determines the width of this view
     * @param measureSpec A measureSpec packed into an int
     * @return The width of the view, honoring constraints from measureSpec
     */
    private int measureWidth(int measureSpec) {
        int result = 0;
        //This is because of background image in relativeLayout, which is 1000*1000px
        measureSpec = 1001;
        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);

        if (specMode == MeasureSpec.UNSPECIFIED) {
            // We were told how big to be
            result = specSize;
        }

        return result;
    }

    /**
     * Determines the height of this view
     * @param measureSpec A measureSpec packed into an int
     * @return The height of the view, honoring constraints from measureSpec
     */
   private int measureHeight(int measureSpec) {
        int result = 0;
        //This is because of background image in relativeLayout, which is 1000*1000px 
        measureSpec = 1001;
        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize = MeasureSpec.getSize(measureSpec);


        if (specMode == MeasureSpec.UNSPECIFIED) {
            // Here we say how Heigh to be
            result = specSize;
        } 
        return result;
    }

    @Override 
    protected void onDraw(Canvas canvas) {
        Paint paint = mPaint;

        canvas.translate(10, 10);

        paint.setColor(Color.RED);
        paint.setStrokeWidth(0);
        canvas.drawLines(mPts, paint);


        paint.setColor(Color.BLUE);
        paint.setStrokeWidth(3);
        canvas.drawPoints(mPts, paint);

    }
}
</code></pre>

<p>Now I got this image, when I run my app:</p>

<p><a href="http://i.stack.imgur.com/lWhvT.png" rel="nofollow">http://i.stack.imgur.com/lWhvT.png</a></p>

<p>If anyone have questions about this feel free to ask me :).</p>
