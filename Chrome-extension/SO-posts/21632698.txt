<p>The sample code in the documentation seems to be mistaken. It seems like all you need is a (multipart) parameter named 'source' with the image data encoded.</p>

<p>Below is the code from the Facebook Android SDK used to convert the Bundle values into request parameters: </p>

<pre><code>public void writeObject(String key, Object value) throws IOException {
    if (isSupportedParameterType(value)) {
        writeString(key, parameterToString(value));
    } else if (value instanceof Bitmap) {
        writeBitmap(key, (Bitmap) value);
    } else if (value instanceof byte[]) {
        writeBytes(key, (byte[]) value);
    } else if (value instanceof ParcelFileDescriptor) {
        writeFile(key, (ParcelFileDescriptor) value, null);
    } else if (value instanceof ParcelFileDescriptorWithMimeType) {
        writeFile(key, (ParcelFileDescriptorWithMimeType) value);
    } else {
        throw new IllegalArgumentException("value is not a supported type: String, Bitmap, byte[]");
    }
}

public void writeBitmap(String key, Bitmap bitmap) throws IOException {
    writeContentDisposition(key, key, "image/png");
    // Note: quality parameter is ignored for PNG
    bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
    writeLine("");
    writeRecordBoundary();
    logger.appendKeyValue("    " + key, "&lt;Image&gt;");
}
</code></pre>

<p>In particular, for any Bitmaps in the Bundle, they serialize and create the appropriate multipart header for it. You can try to add your image to the Bundle as a Bitmap. Your <code>getImageFormData</code> method could then be something like:</p>

<pre><code>public Bitmap getImageFormData(File image) {
    return BitmapFactory.decodeFile(image.getPath());
}
</code></pre>

<p>You can also try supplying a <code>ParcelFileDescriptor</code>, which gets serialized in a similar fashion:</p>

<pre><code>public ParcelFileDescriptor getImageFormData(File image) {
    try {
        return ParcelFileDescriptor.open(image, ParcelFileDescriptor.MODE_READ_ONLY);
    } catch (FileNotFoundException e) {
        return null;
    }
}
</code></pre>

<p>This method may also be of interest (allows you to use url parameter instead of source):</p>

<pre><code>/**
 * Creates a new Request configured to upload an image to create a staging resource. Staging resources
 * allow you to post binary data such as images, in preparation for a post of an Open Graph object or action
 * which references the image. The URI returned when uploading a staging resource may be passed as the image
 * property for an Open Graph object or action.
 *
 * @param session
 *            the Session to use, or null; if non-null, the session must be in an opened state
 * @param image
 *            the image to upload
 * @param callback
 *            a callback that will be called when the request is completed to handle success or error conditions
 * @return a Request that is ready to execute
 */
public static Request newUploadStagingResourceWithImageRequest(Session session,
        Bitmap image, Callback callback) {
    Bundle parameters = new Bundle(1);
    parameters.putParcelable(STAGING_PARAM, image);

    return new Request(session, MY_STAGING_RESOURCES, parameters, HttpMethod.POST, callback);
}
</code></pre>
