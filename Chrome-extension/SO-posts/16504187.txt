<p>In general, most Computers have a single instruction to compare integers, longs etc
and will take at most a couple of instruction cycles. Strings are normally compared by a utility function/method (there may be the odd exception to this rule).</p>

<p>in Java for example a String is basically represented as</p>

<pre><code>     /** The value is used for character storage. */
     private final char value[];

     /** The offset is the first index of the storage that is used. */
     private final int offset;

     /** The count is the number of characters in the String. */
     private final int count;
</code></pre>

<p>And the equals method is</p>

<pre><code>if (this == anObject) {
    return true;
}
if (anObject instanceof String) {
    String anotherString = (String)anObject;
    int n = count;
    if (n == anotherString.count) {
        char v1[] = value;
        char v2[] = anotherString.value;
        int i = offset;
        int j = anotherString.offset;
        while (n-- != 0) {
            if (v1[i++] != v2[j++])
                return false;
        }
        return true;
    }
}
return false;
</code></pre>

<p>The equals Method does both <strong>this == anObject</strong> and <strong>n == anotherString.count</strong>, both essentially integer compares, even before it starts comparing characters. It is going take a lot longer than a single instruction that a integer compare takes</p>

<hr>

<p>The <strong>C string compare</strong> is <strong>simpler / faster</strong> than the Java equivalent but it will contain some sort of loop and multiple instructions for each pass through the loop.</p>

<p>This will take longer than the one instruction that a Integer Compare requires</p>
