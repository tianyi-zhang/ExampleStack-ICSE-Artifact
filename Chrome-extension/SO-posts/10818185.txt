<p>The code sample above doesn't make use of the full potential of recursion mainly do to the global <code>solved</code> variable. I didn't made a solution from scratch but rather tried to fixed what you presented so that you can see the differences. Please comment if you have any doubts.
Without debugging but with a little logging and some nice comments stated above i came up with:</p>

<pre><code>package sudoku;

public class Solver {
    static int[][] board; //teh board
    static boolean solved; //if the sudoku is solved

    public static void main(String[] args) throws Exception {

        //establish temporary board for now
        final int[][] TUE24JAN =
            {
                {0, 0, 9, 0, 0, 0, 8, 0, 0},
                {0, 1, 0, 0, 2, 0, 0, 3, 0},
                {0, 0, 0, 7, 0, 8, 0, 0, 0},

                {2, 0, 0, 0, 8, 0, 0, 0, 7},
                {0, 3, 0, 1, 0, 2, 0, 4, 0},
                {4, 0, 0, 0, 7, 0, 0, 0, 5},

                {0, 0, 0, 6, 0, 3, 0, 0, 0},
                {0, 8, 0, 0, 9, 0, 0, 7, 0},
                {0, 0, 6, 0, 0, 0, 9, 0, 0},
            };

        final int[][] WED25JAN =
            {
                {2, 5, 0, 0, 0, 0, 4, 0, 0},
                {0, 0, 3, 1, 0, 0, 7, 0, 0},
                {0, 0, 0, 0, 8, 4, 0, 6, 0},
                {4, 0, 0, 0, 0, 0, 0, 8, 0},
                {7, 0, 0, 0, 1, 0, 0, 0, 4},
                {0, 3, 0, 0, 0, 0, 0, 0, 9},
                {0, 9, 0, 6, 5, 0, 0, 0, 0},
                {0, 0, 1, 0, 0, 9, 2, 0, 0},
                {0, 0, 2, 0, 0, 0, 0, 4, 3},
            };

        board = TUE24JAN;
        solved = false;
        printBoard();

        solve(0, 0);
        System.out.println("\n");
        printBoard();
    } // end method main

    public static void solve(int x, int y) throws Exception {

        //printBoard();
        System.out.println(x + " : " + y);

        //catches the end of the line
        if (y &gt; 8) {
            y = 0;
            x++;
        }

        //catches the end of the board
        if ((x &gt; 8) || solved) {
            solved = true;
            return;
        }

        //put a number in the cell
        for (int i = 1; i &lt; 10; i++) {

            if ((board[x][y] == 0)) { // cell to be filled

                if (!inRow(x, i) &amp;&amp; !inCol(y, i) &amp;&amp; !inBox(x, y, i)) { // can use number

                    board[x][y] = i;

                    solve(x, y + 1);

                    if (solved) {
                        return;
                    }

                    board[x][y] = 0;

                }
            }
            else {
                solve(x, y + 1);

                return;

            }
        } // end for
    } // end method solve

    //returns if the value is in the specified row
    public static boolean inRow(int x, int val) {

        for (int i = 0; i &lt; 9; i++) {

            if (board[x][i] == val) {
                return true;
            }
        }

        return false;
    }

    //returns whether the value is in the specified column
    public static boolean inCol(int y, int val) {

        for (int i = 0; i &lt; 9; i++) {

            if (board[i][y] == val) {
                return true;
            }
        }

        return false;
    }

    //returns whether the value fits based
    public static boolean inBox(int x, int y, int val) {
        int row = (x / 3) * 3;
        int col = (y / 3) * 3;

        for (int r = 0; r &lt; 3; r++) {

            for (int c = 0; c &lt; 3; c++) {

                if (board[row + r][col + c] == val) {
                    return true;
                }
            }
        }

        return false;
    }

    public static void printBoard() {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i &lt; 9; i++) {

            if ((i % 3) == 0) {
                sb.append("----------------------\n");
            }

            for (int j = 0; j &lt; 9; j++) {

                if ((j % 3) == 0) {
                    sb.append("|");
                }

                if ((board[i][j] &lt; 10) &amp;&amp; (board[i][j] &gt; 0)) {
                    sb.append(board[i][j] + " ");
                }
                else {
                    sb.append("- ");
                }
            }

            sb.append("|\n");
        }

        sb.append("----------------------\n");
        System.out.println(sb.toString());

        /*try {
            Thread.sleep(100);
        }
        catch (InterruptedException e) {

            // TODO Auto-generated catch block
            e.printStackTrace();
        }*/
    } // end method printBoard
} // end class Solver
</code></pre>
