<p>There are some major issues with the code, in addition to fixes needed for the DFS algorithm:</p>

<ul>
<li>You Start and end are wrong: it should be decreased by 1 (because the
indices are 0 based)</li>
<li><strike>Your adjanecy matrix is wrong (it is of size <code>10X9</code> - it should be a squared matrix)</strike>(edit fixed it)</li>
<li>Your solution should only print elements that are in the path. One way to do it would be to return a <code>List&lt;&gt;</code> (rather than <code>void</code> - that populates all the nodes in the current path. If you reached the destination, create the list, otherwise - return <code>null</code>. Attach elements only when the recursive call returns something that is not <code>null</code>. Code attached</li>
</ul>

<p>Also note, it prints the nodes in the correct order (and not reversed order)</p>

<pre><code>public static void main(String [] args){
    int[][] adj = {
            {0, 0, 0, 1, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 1, 0, 0, 0}, 
            {1, 0, 0, 0, 1, 0, 1, 0, 0}, 
            {0, 0, 0, 1, 0, 1, 0, 0, 0}, 
            {0, 0, 1, 0, 1, 0, 0, 0, 1}, 
            {0, 0, 0, 1, 0, 0, 0, 0, 0}, 
            {0, 0, 0, 0, 0, 0, 0, 0, 0}, 
            { 0, 0, 0, 0, 0, 1, 0, 0, 0} 
    };
    boolean[] visited = new boolean[adj.length];
    int n = adj.length;    
    int m = 1-1; //starting position
    int o = 3-1; //ending position
    System.out.println(DFS(adj, visited, n, m, o));
}

public static List&lt;Integer&gt; DFS(int[][] adj, boolean[] visited, int n, int i, int o){
    visited[i]= true;
    if (i == o) return new LinkedList&lt;Integer&gt;(Arrays.asList(i+1));
    for (int j = 0; j&lt;n;j++){
        if(!(visited[j]) &amp;&amp; adj[i][j]==1){
            List&lt;Integer&gt; res = DFS(adj, visited, n, j, o);
            if (res != null) { 
                res.add(0, i+1);
                return res;
            }
        }
    }
    return null; //no path
}
</code></pre>

<p>Will result (as expected) with:</p>

<pre><code>[1, 4, 5, 6, 3]
</code></pre>

<hr>

<p>As a side note, though this solution is <em>complete</em> (will always find a solution if such exists), it is not <em>optimal</em> - it might return a longer solution than the shortest one.</p>

<p>If you want to find the shortest path from source to target, consider switching to a <a href="https://en.wikipedia.org/wiki/Breadth-first_search" rel="nofollow">BFS</a></p>
