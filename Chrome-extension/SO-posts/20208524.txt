<p>I guess what you are trying to do is converting infix expression to post fix. Some time back I had written the following code: </p>

<pre><code>    public class InfixToPostfix {
   private Stack stack;
   private String input;
   private String output = "";
   public InfixToPostfix(String in) {
      input = in;
      int stackSize = input.length();
      stack = new Stack(stackSize);
   }
   public String translate() {
      for (int j = 0; j &lt; input.length(); j++) {
         char ch = input.charAt(j);
         switch (ch) {
            case '+': 
            case '-':
            hastOperator(ch, 1); 
            break; 
            case '*': 
            case '/':
            hastOperator(ch, 2); 
            break; 
            case '(': 
            stack.push(ch);
            break;
            case ')': 
            hasSuperior(ch); 
            break;
            default: 
            output = output + ch; 
            break;
         }
      }
      while (!stack.isEmpty()) {
         output = output + stack.pop();
      }
      System.out.println(output);
      return output; 
   }
   public void hastOperator(char op, int precedence) {
      while (!stack.isEmpty()) {
         char opTop = stack.pop();
         if (opTop == '(') {
            stack.push(opTop);
            break;
         }
         else {
            int prec2;
            if (opTop == '+' || opTop == '-')
            prec2 = 1;
            else
            prec2 = 2;
            if (prec2 &lt; precedence) { 
               stack.push(opTop);
               break;
            }
            else
            output = output + opTop;
         }
      }
      stack.push(op);
   }
   public void hasSuperior(char ch){ 
      while (!stack.isEmpty()) {
         char chx = stack.pop();
         if (chx == '(') 
         break; 
         else
         output = output + chx; 
      }
   }
   public static void main(String[] args) 
   throws IOException {
      String input = "67 + 12 - 45";
      String output;
      InfixToPostfix theTrans = new InfixToPostfix(input);
      output = theTrans.translate(); 
      System.out.println("Postfix is " + output + '\n');
   }
   class Stack {
      private int maxSize;
      private char[] stackArray;
      private int top;
      public Stack(int max) {
         maxSize = max;
         stackArray = new char[maxSize];
         top = -1;
      }
      public void push(char j) {
         stackArray[++top] = j;
      }
      public char pop() {
         return stackArray[top--];
      }
      public char peek() {
         return stackArray[top];
      }
      public boolean isEmpty() {
         return (top == -1);
     }
    }
    }
</code></pre>

<p>You may need to modify this program to read from an array, but that is very trivial.</p>
