<p>For the record, since Spring 3.2, this got even worse because the <code>AnnotationMethodHandlerExceptionResolver</code> has been replaced by the <code>ResponseStatusExceptionResolver</code> and it does:</p>

<pre><code>protected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,
  HttpServletResponse response, Object handler, Exception ex) throws Exception {

  int statusCode = responseStatus.value().value();
  String reason = responseStatus.reason();
  if (this.messageSource != null) {
    reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());
  }
  if (!StringUtils.hasLength(reason)) {
    response.sendError(statusCode);
  }
  else {
    response.sendError(statusCode, reason);
  }
  return new ModelAndView();
}
</code></pre>

<p>This is worth a bug report. Moreover, the <code>@ResponseStatus</code> is documented with <a href="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/bind/annotation/ResponseStatus.java?source=cc#L45" rel="nofollow"><code>setStatus</code></a> and is ill-designed. It should have been called <code>@ResponseError</code>.</p>

<p>I have created two issues for this finally: <a href="https://jira.springsource.org/browse/SPR-11192" rel="nofollow">SPR-11192</a> and <a href="https://jira.springsource.org/browse/SPR-11193" rel="nofollow">SPR-11193</a>.</p>

<p>Almost a year has passed and my two issues are still open. I do not consider Spring WebMVC as a first-class REST framework which it isn't imho, Web<strong>MVC</strong> is for humas and not machines :-(</p>
