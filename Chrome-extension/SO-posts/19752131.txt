<p>The writeObject of ConcurrentHashMap locks each segment before serializing, so you do not need to worry about the data integrity. Note: there might be a gap across segments(updates on a non locked segment while Object is getting serialized). If you want full lock during writeObject then use Collections.synchronizedMap().</p>

<p>Refer method ConcurrentHashMap.writeObject():</p>

<pre><code>private void writeObject(java.io.ObjectOutputStream s) throws IOException {
        // force all segments for serialization compatibility
        for (int k = 0; k &lt; segments.length; ++k)
            ensureSegment(k);
        s.defaultWriteObject();

        final Segment&lt;K,V&gt;[] segments = this.segments;
        for (int k = 0; k &lt; segments.length; ++k) {
            Segment&lt;K,V&gt; seg = segmentAt(segments, k);
            seg.lock();
            try {
                HashEntry&lt;K,V&gt;[] tab = seg.table;
                for (int i = 0; i &lt; tab.length; ++i) {
                    HashEntry&lt;K,V&gt; e;
                    for (e = entryAt(tab, i); e != null; e = e.next) {
                        s.writeObject(e.key);
                        s.writeObject(e.value);
                    }
                }
            } finally {
                seg.unlock();
            }
        }
        s.writeObject(null);
        s.writeObject(null);
    }
</code></pre>
