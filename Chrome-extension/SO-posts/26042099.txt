<p>I have already had the same issue, and I solved it by creating a new class that checks for <code>null</code> before actually launching the <code>Intent</code>.</p>

<p>All you have to do is to replace all <code>URLSpan</code> spans, before setting the <code>TextView</code>'s text (which means you cannot use <code>setAutoLinkMask()</code>).</p>

<p>This has to be done, because <code>URLSpan</code>'s <code>onClick()</code> method does not perform any kind of <code>null</code> checks.</p>

<p>How to preceed:</p>

<pre><code>TextView txt = ...
txt.setLinksClickable(true);
txt.setText(SafeURLSpan.parseSafeHtml(&lt;&lt;YOUR STRING GOES HERE&gt;&gt;));
txt.setMovementMethod(LinkMovementMethod.getInstance());
</code></pre>

<p>Kinds of strings that could be used in <code>&lt;&lt;YOUR STRING GOES HERE&gt;&gt;</code>:</p>

<pre><code>"Click here: &lt;a href=\"http://google.com\"&gt;My links&lt;/a&gt;"
"Mail me: &lt;a href=\"mailto:john@doe.com\"&gt;My email&lt;/a&gt;"
... and so on...
</code></pre>

<p>Here is the source for <code>SafeURLSPan</code> class (I use it in my app <a href="https://github.com/carlosrafaelgn/FPlayAndroid" rel="nofollow">FPlay</a>, and it has been tested on Android 10+):</p>

<pre><code>import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.provider.Browser;
import android.text.Html;
import android.text.Spannable;
import android.text.style.URLSpan;
import android.view.View;

public final class SafeURLSpan extends URLSpan {
    public SafeURLSpan(String url) {
        super(url);
    }

    @Override
    public void onClick(View widget) {
        try {
            final Uri uri = Uri.parse(getURL());
            final Context context = widget.getContext();
            final Intent intent = new Intent(Intent.ACTION_VIEW, uri);
            if (context != null &amp;&amp; intent != null) {
                intent.putExtra(Browser.EXTRA_APPLICATION_ID, context.getPackageName());
                context.startActivity(intent);
            }
        } catch (Throwable ex) {
        }
    }

    public static CharSequence parseSafeHtml(CharSequence html) {
        return replaceURLSpans(Html.fromHtml(html.toString()));
    }

    public static CharSequence replaceURLSpans(CharSequence text) {
        if (text instanceof Spannable) {
            final Spannable s = (Spannable)text;
            final URLSpan[] spans = s.getSpans(0, s.length(), URLSpan.class);
            if (spans != null &amp;&amp; spans.length &gt; 0) {
                for (int i = spans.length - 1; i &gt;= 0; i--) {
                    final URLSpan span = spans[i];
                    final int start = s.getSpanStart(span);
                    final int end = s.getSpanEnd(span);
                    final int flags = s.getSpanFlags(span);
                    s.removeSpan(span);
                    s.setSpan(new SafeURLSpan(span.getURL()), start, end, flags);
                }
            }
        }
        return text;
    }
}
</code></pre>
