<p>Here are 2 solutions:</p>

<p><strong>1)</strong> Using <code>Calendar</code> - it is more simple, but it is not so efficient - <strong>135 ms</strong></p>

<pre><code>import java.util.Calendar;

public class P19 {

    public static void main(String[] args) {
        int result = 0;
        for ( int year = 1901 ; year &lt;= 2000 ; year++ ) {
            for ( int month = Calendar.JANUARY ; month &lt;= Calendar.DECEMBER ; month++ ) {
                Calendar c = getCalendar(year, month, 1);
                if ( c.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY ) {
                    result++;
                }
            }
        }
        System.out.println(result);
    }

    private static Calendar getCalendar(int year, int month, int day) {
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, year);
        c.set(Calendar.MONTH, month);
        c.set(Calendar.DAY_OF_MONTH, day);      // or Calendar.DATE
        return c;
    }

}
</code></pre>

<p>Notice that:</p>

<ul>
<li><code>DAY_OF_MONTH</code> and <code>DATE</code> are equivalent. </li>
<li>I used <code>Calendar.JANUARY</code> because the first month is <code>0</code>, not <code>1</code>, even if the first day/date is <code>1</code>.</li>
</ul>

<p><strong>2)</strong> Using my <strong>own</strong> <code>Date</code> <strong>class</strong> - it takes only <strong>1.65 ms</strong>:</p>

<pre><code>public class P19 {

    public static void main(String[] args) {
        // 1 Jan 1900 - Monday
        // 1900 is not leap =&gt; it has 365 days
        // 365 % 7 = 1 =&gt; 1 Jan 1901 - Tuesday =&gt; 6 Jan 1901 - Sunday

        int yearStart = 1901, yearEnd = 2000;
        int monthStart = 1, monthEnd = 12;
        int dayStart = 6, dayEnd = 31;
        Date dateStart = new Date(yearStart, monthStart, dayStart);
        Date dateStop = new Date(yearEnd, monthEnd, dayEnd);

        int result = 0;
        while (Date.compareDates(dateStart, dateStop) &lt; 0) {
            if (dateStart.day == 1) {
                result++;
            }
            dateStart.addDays(7);
        }
        System.out.println(result);
    }

}

class Date {
    int year;
    int month;
    int day;

    Date(int year, int month, int day) {
        this.year = year;
        this.month = month;
        this.day = day;
    }

    public void addDays(int days) {
        int numberOfDaysForMonth = getTotalMonthDays(month, year);
        day += days;
        if (day &gt;= numberOfDaysForMonth) {
            day -= numberOfDaysForMonth;
            month++;
            if (month &gt; 12) {
                month = 1;
                year++;
            }
        }

    }

    public static int compareDates(Date d1, Date d2) {
        if (d1.year == d2.year &amp;&amp; d1.month == d2.month &amp;&amp; d1.day == d2.day) {
            return 0;
        }
        if (d1.year &lt; d2.year) {
            return -1;
        }
        if (d1.year == d2.year &amp;&amp; d1.month &lt; d2.month) {
            return -1;
        }
        if (d1.year == d2.year &amp;&amp; d1.month == d2.month &amp;&amp; d1.day &lt; d2.day) {
            return -1;
        }
        return 1;
    }

    private int getTotalMonthDays(int m, int y) {
        if (m == 2 &amp;&amp; isLeapYear(y)) {
            return 29;
        }
        if (m == 2) {
            return 28;
        }
        if (m == 4 || m == 6 || m == 9 || m == 11) {
            return 30;
        }
        return 31;
    }

    private boolean isLeapYear(int y) {
        if (y % 4 == 0 &amp;&amp; (y % 100 != 0 || y % 400 == 0)) {
            return true;
        }
        return false;
    }

}
</code></pre>

<p>This implementation iterates only through Sundays ( <code>addDays(7)</code> ). </p>

<p>Some possible improvements: </p>

<ul>
<li>increase the step (E.g.: for <code>1</code>, we can add <code>28</code> instead of <code>7</code> without skipping any day)</li>
<li>change the compare method to return a <code>boolean</code> and to simplify its body</li>
</ul>
