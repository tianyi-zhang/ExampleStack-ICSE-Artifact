<p>My idea here is to use token-based authentication , which can be verifiable with HTTP header. I have implemented the mutual client authentication using jersey 2.x APIs.</p>

<p>*The certificate is in PEM format and is converted into Base64 encoding before the client uses it.
Here is the Jersey Rest Client example using <strong>mutual certificate based authentication</strong>.<br>
NOTE: CA certs. should be configured at server keystore
TEST.java</p>

<pre><code>package your.package.here;

import org.glassfish.jersey.client.ClientConfig;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Paths;

public class TEST {
    public static final String codes = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    public static String base64encodedCert;
    public static ClientBuilder clientBuilder;
    public static ClientConfig config;
    public static Client client;
    public static String res;

    public static void main(String[] args) {
        String urls = "http://YourDomain/URL/here/path";
        try {
            File certFile = new File("keystores/directory/Your_Cert_File.base64");
            if (!certFile.exists()) {
                FileWriter fileWriter = new FileWriter(certFile);
                fileWriter.write(base64Encode(new String(Files.readAllBytes(Paths.get("keystores/directory/Your_Cert_File.pem"))).getBytes()));
                fileWriter.close();
            }
            base64encodedCert = new String(Files.readAllBytes(Paths.get("keystores/directory/Your_Cert_File.base64")));
            clientBuilder = ClientBuilder.newBuilder();
            config = new ClientConfig();
            client = clientBuilder.withConfig(config).build();
            WebTarget target = client.target(urls);
            Response response = target.request().header("MY-CUSTOM-TOKEN", base64encodedCert).accept(MediaType.APPLICATION_XML).get();
            res = response.readEntity(String.class);
            response.close();
            System.out.println("res = " + res);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static String base64Encode(byte[] in) {
        StringBuilder out = new StringBuilder((in.length * 4) / 3);
        int b;
        for (int i = 0; i &lt; in.length; i += 3) {
            b = (in[i] &amp; 0xFC) &gt;&gt; 2;
            out.append(codes.charAt(b));
            b = (in[i] &amp; 0x03) &lt;&lt; 4;
            if (i + 1 &lt; in.length) {
                b |= (in[i + 1] &amp; 0xF0) &gt;&gt; 4;
                out.append(codes.charAt(b));
                b = (in[i + 1] &amp; 0x0F) &lt;&lt; 2;
                if (i + 2 &lt; in.length) {
                    b |= (in[i + 2] &amp; 0xC0) &gt;&gt; 6;
                    out.append(codes.charAt(b));
                    b = in[i + 2] &amp; 0x3F;
                    out.append(codes.charAt(b));
                } else {
                    out.append(codes.charAt(b));
                    out.append('=');
                }
            } else {
                out.append(codes.charAt(b));
                out.append("==");
            }
        }
        return out.toString();
    }

}
</code></pre>
