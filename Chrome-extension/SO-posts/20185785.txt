<p>You should never have a structure like : </p>

<pre><code>catch(Exception ex ) {
     //ignore (or log only)
}
</code></pre>

<p>Exception are there to tell you something went wrong. What you do is called (in french) "eating/hiding exceptions". You are loosing this very important information that something went abnormally.</p>

<p>You should <em>always</em> either throw the exception you catch to your caller, or process it locally. At the very least, and this is a poor practice, you should log it. But doing nothing is just very wrong. </p>

<p>Here, put the whole try catch in a method for instance :</p>

<pre><code>private void createFileTosend() throws IOException {
    InputStream inputStream = null;
    FileOutputStream outputStream = null;
    try {
        File toSend = getFile();
        inputStream = new FileInputStream(toSend);


        outputStream = openFileOutput("Competition.xls",
                Context.MODE_WORLD_READABLE | Context.MODE_APPEND);
        byte[] buffer = new byte[1024];
        int length = 0;
        while ((length = inputStream.read(buffer)) &gt; 0){
             outputStream.write(buffer, 0, length);
         }
    } finally {

        try {
            if( inputStream != null ) {
                inputStream.close();
            }
        } catch (IOException ioe) {
           Log.e( ioe );
        }
        try {
            if( outputStream != null ) {
                outputStream.close();
            }
        } catch (IOException ioe) {
           Log.e( ioe );
        }
    }
}
</code></pre>

<p>And now, when you call <code>createFileToSend</code>, do that in a try/catch structure and toast a message, or something if you catch an exception.</p>
