<p>Yes there is! In order to trigger a ripple programatically you have to set the state of the <code>RippleDrawable</code> with <code>setState()</code>. Calling <code>setVisible()</code> does <strong>NOT</strong> work!</p>

<hr>

<h1>The Solution</h1>

<p>To show the ripple you have to set the state to pressed and enabled at the same time:</p>

<pre><code>rippleDrawable.setState(new int[] { android.R.attr.state_pressed, android.R.attr.state_enabled });
</code></pre>

<p>The ripple will be shown as long as those states are set. When you want to hide the ripple again set the state to an empty <code>int[]</code>:</p>

<pre><code>rippleDrawable.setState(new int[] {  });
</code></pre>

<p>You can set the point from which the ripple emanates by calling <code>setHotspot()</code>. </p>

<hr>

<h1>How it works</h1>

<p>I have debugged a lot and studied the source code of <code>RippleDrawable</code> up and down until I realised that the ripple is actually triggered in <code>onStateChange()</code>. Calling <code>setVisible()</code> has no effect and never causes any ripple to actually appear.  </p>

<p>The relevant part of the source code of <code>RippleDrawable</code> is this:</p>

<pre><code>@Override
protected boolean onStateChange(int[] stateSet) {
    final boolean changed = super.onStateChange(stateSet);

    boolean enabled = false;
    boolean pressed = false;
    boolean focused = false;

    for (int state : stateSet) {
        if (state == R.attr.state_enabled) {
            enabled = true;
        }
        if (state == R.attr.state_focused) {
            focused = true;
        }
        if (state == R.attr.state_pressed) {
            pressed = true;
        }
    }

    setRippleActive(enabled &amp;&amp; pressed);
    setBackgroundActive(focused || (enabled &amp;&amp; pressed));

    return changed;
}
</code></pre>

<p>As you can see if both the enabled and pressed attribute are set then both the ripple and background will be activated and the ripple will be displayed. 
Additionally as long as you set the focused state the background will be activated as well. With this you can trigger the ripple and have the background change color independently.</p>

<p>If you are interested you can view the entire source code of <code>RippleDrawable</code> <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.0.1_r1/android/graphics/drawable/RippleDrawable.java#RippleDrawable.onStateChange%28int%5B%5D%29"><strong>here</strong></a>.</p>
