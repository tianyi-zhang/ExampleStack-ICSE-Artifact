<p>use this method in your <code>Activity</code> &amp; when you got the bitmap in <code>onActivityResult</code> you can call this method</p>

<pre><code>public Bitmap changeOrientation(Uri imageUri, String imagePath, Bitmap source) {
        // TODO Auto-generated constructor stub
        int rotate = 0;
        int orientation = 0;
        try {
            getContentResolver().notifyChange(imageUri, null);
            File imageFile = new File(imagePath);
            ExifInterface exif = new ExifInterface(imageFile.getAbsolutePath());
            orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                    ExifInterface.ORIENTATION_NORMAL);

            switch (orientation) {
            case ExifInterface.ORIENTATION_ROTATE_270:
                rotate = 270;
                break;
            case ExifInterface.ORIENTATION_ROTATE_180:
                rotate = 180;
                break;
            case ExifInterface.ORIENTATION_ROTATE_90:
                rotate = 90;
                break;
            }
            // Log.v(Common.TAG, "Exif orientation: " + orientation);
        } catch (Exception e) {
            e.printStackTrace();
        }

        /****** Image rotation ****/
        Matrix matrix = new Matrix();
        matrix.postRotate(orientation);
        Bitmap cropped = Bitmap.createBitmap(source, x, y, width, height, matrix,
                true);
        return cropped;
        /*
         * 
         * 
         * Bitmap android.graphics.Bitmap.createBitmap(Bitmap source, int x, int
         * y, int width, int height, Matrix m, boolean filter) public static
         * Bitmap createBitmap (Bitmap source, int x, int y, int width, int
         * height, Matrix m, boolean filter) Added in API level 1 Returns an
         * immutable bitmap from subset of the source bitmap, transformed by the
         * optional matrix. The new bitmap may be the same object as source, or
         * a copy may have been made. It is initialized with the same density as
         * the original bitmap. If the source bitmap is immutable and the
         * requested subset is the same as the source bitmap itself, then the
         * source bitmap is returned and no new bitmap is created.
         * 
         * Parameters source The bitmap we are subsetting x The x coordinate of
         * the first pixel in source y The y coordinate of the first pixel in
         * source width The number of pixels in each row height The number of
         * rows m Optional matrix to be applied to the pixels filter true if the
         * source should be filtered. Only applies if the matrix contains more
         * than just translation.
         * 
         * Returns A bitmap that represents the specified subset of source
         * Throws IllegalArgumentException if the x, y, width, height values are
         * outside of the dimensions of the source bitmap, or width is &lt;= 0, or
         * height is &lt;= 0
         */
    }
</code></pre>
