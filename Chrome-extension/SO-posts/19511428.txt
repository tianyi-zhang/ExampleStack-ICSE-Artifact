<p>You may call the following methods depending on the <code>CompoundButton.OnCheckedChangeListener</code> of your <code>Checkbox</code>. As in the input parameter, provide the reference to the <code>View</code> that you would like to collapse/expand with a smooth transition.</p>

<pre><code>/**
 * Allows a view to be collapsed and Gone with a smooth animation
 * @param v view to be collapsed and gone
 */
public static void collapseView(final View v) {
    final int initialHeight = v.getMeasuredHeight();

    final Animation a = new Animation(){
        @Override
        protected void applyTransformation(float interpolatedTime, Transformation t) {
            if(interpolatedTime == 1){
                v.setVisibility(View.GONE);
            }else{
                v.getLayoutParams().height = initialHeight - (int)(initialHeight * interpolatedTime);
                v.requestLayout();
            }
        }

        @Override
        public boolean willChangeBounds() {
            return true;
        }
    };

    a.setDuration(500);
    v.startAnimation(a);
}


/**
 * Allows a collapsed and Gone view to be expanded and Visible
 * @param v view to be expanded and Visible
 */
public static void expandView(final View v) {
    v.measure(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT);
    final int targtetHeight = v.getMeasuredHeight();

    v.getLayoutParams().height = 0;
    v.setVisibility(View.VISIBLE);
    Animation a = new Animation(){
        @Override
        protected void applyTransformation(float interpolatedTime, Transformation t) {
            v.getLayoutParams().height = interpolatedTime == 1
                    ? LayoutParams.WRAP_CONTENT
                    : (int)(targtetHeight * interpolatedTime);
            v.requestLayout();
        }

        @Override
        public boolean willChangeBounds() {
            return true;
        }
    };

    a.setDuration(500);
    v.startAnimation(a);
}
</code></pre>
