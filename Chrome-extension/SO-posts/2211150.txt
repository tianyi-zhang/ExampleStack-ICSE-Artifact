<p>Really, you shouldn't ever ever catch Error, but here's how you can find initializer problems wherever they might occur.</p>

<p>Here's an agent that will make all ExceptionInInitializerErrors print the stack trace when they are created:</p>

<pre><code>
import java.lang.instrument.*;
import javassist.*;
import java.io.*;
import java.security.*;

public class InitializerLoggingAgent implements ClassFileTransformer {
  public static void premain(String agentArgs, Instrumentation inst) {
    inst.addTransformer(new InitializerLoggingAgent(), true);
  }

  private final ClassPool pool = new ClassPool(true);

  public byte[] transform(ClassLoader loader, String className, Class classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer)  {
    try {
      if (className.equals("java/lang/ExceptionInInitializerError")) {
        CtClass klass = pool.makeClass(new ByteArrayInputStream(classfileBuffer));
        CtConstructor[] ctors = klass.getConstructors();
        for (int i = 0; i &lt; ctors.length; i++) {
          ctors[i].insertAfter("this.printStackTrace();");
        }
        return klass.toBytecode();
      } else {
        return null;
      }
    } catch (Throwable t) {
      return null;
    }
  }
}
</code></pre>

<p>It uses javassist to modify the classes. Compile and put it in a jar file with javassist classes and the following MANIFEST.MF</p>

<pre><code>Manifest-Version: 1.0
Premain-Class: InitializerLoggingAgent
</code></pre>

<p>Run your app with <code>java -javaagent:agentjar.jar MainClass</code> and every ExceptionInInitializerError will be printed even if it is caught.</p>
