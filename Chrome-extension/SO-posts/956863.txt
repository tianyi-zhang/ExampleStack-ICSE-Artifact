<p>Here's how I handle this with Spring. Might be of some help. My method is a copy of Spring's shallowCopyFieldState but allows the use of a field filter. Ignores statics and finals.</p>

<p>My method</p>

<pre><code>public static void shallowCopyFieldState(final Object src, final Object dest, final FieldFilter filter)
  throws IllegalArgumentException {
 if (src == null) {
  throw new IllegalArgumentException("Source for field copy cannot be null");
 }
 if (dest == null) {
  throw new IllegalArgumentException("Destination for field copy cannot be null");
 }
 if (!src.getClass().isAssignableFrom(dest.getClass())) {
  throw new IllegalArgumentException("Destination class [" + dest.getClass().getName()
    + "] must be same or subclass as source class [" + src.getClass().getName() + "]");
 }
 org.springframework.util.ReflectionUtils.doWithFields(src.getClass(),
   new org.springframework.util.ReflectionUtils.FieldCallback() {
    public void doWith(final Field field) throws IllegalArgumentException, IllegalAccessException {
     org.springframework.util.ReflectionUtils.makeAccessible(field);
     final Object srcValue = field.get(src);
     field.set(dest, srcValue);
    }
   }, filter);
}
</code></pre>

<p>Spring's doWithFields:</p>

<pre><code>/**
 * Invoke the given callback on all fields in the target class,
 * going up the class hierarchy to get all declared fields.
 * @param targetClass the target class to analyze
 * @param fc the callback to invoke for each field
 * @param ff the filter that determines the fields to apply the callback to
 */
public static void doWithFields(Class targetClass, FieldCallback fc, FieldFilter ff)
  throws IllegalArgumentException {

 // Keep backing up the inheritance hierarchy.
 do {
  // Copy each field declared on this class unless it's static or file.
  Field[] fields = targetClass.getDeclaredFields();
  for (int i = 0; i &lt; fields.length; i++) {
   // Skip static and final fields.
   if (ff != null &amp;&amp; !ff.matches(fields[i])) {
    continue;
   }
   try {
    fc.doWith(fields[i]);
   }
   catch (IllegalAccessException ex) {
    throw new IllegalStateException(
      "Shouldn't be illegal to access field '" + fields[i].getName() + "': " + ex);
   }
  }
  targetClass = targetClass.getSuperclass();
 }
 while (targetClass != null &amp;&amp; targetClass != Object.class);
}
</code></pre>
