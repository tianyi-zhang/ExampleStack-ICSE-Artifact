<p>the ideology of filtering in adapters works by replacing the original data list int he adapter with the filtered list. The <code>performFiltering</code> method will tell you what elements in the data list match your filter. But not this list makes the primary data list for your adapter instead of the original data list. So you shoudl keep 2 lists in your adapter. </p>

<ul>
<li>The original unfiltered list. for reference</li>
<li>The second list which feeds data to the adapter. <code>getView</code> and <code>getItems</code> etc. methods should use this list.</li>
</ul>

<p>When you do <code>performFiltering</code> use the original unfiltered list to extract matching data elements and save in the second list. That way you will never go wrong. </p>

<p>Sample Example adapter for reference</p>

<pre><code>public class CompanyQuotesResultAdapter extends BaseAdapter{

    //original data populated from DB or web service.
    private ArrayList&lt;MyDataVO&gt; originalData;

    //the data list which the adapter uses for its work
    private ArrayList&lt;MyDataVO&gt; data;
    private LayoutInflater inflater = null;
    private Fragment parentFragment;
    private Filter dataFilter;
    private int quoteGreenColor = -1;

    public CompanyQuotesResultAdapter(Fragment parentFragment){
        //set values here
    }

    public ArrayList&lt;MyDataVO&gt; getData() {
        return new ArrayList&lt;MyDataVO&gt;(this.data);
    }

    public ArrayList&lt;MyDataVO&gt; getOriginalData() {
        return new ArrayList&lt;MyDataVO&gt;(this.originalData);
    }

    public void addDataVOsWithoutNotification(List&lt;MyDataVO&gt; dataVOs){
        this.data.addAll(dataVOs);
        this.originalData.addAll(dataVOs);
    }

    public void setData(List&lt;MyDataVO&gt; data) {
        this.data = new ArrayList&lt;MyDataVO&gt;(data);
        this.originalData = new ArrayList&lt;MyDataVO&gt;(data);
        this.notifyDataSetChanged();
    }

    public boolean isEmpty() {
        return this.data.isEmpty();
    }

    public void clearAll(){
        this.originalData.clear();
        this.data.clear();
        this.notifyDataSetChanged();
    }

    public void clearAllWithoutNotification(){
        this.data.clear();
        this.originalData.clear();
    }

    @Override
    public int getCount() {
        return data.size();
    }

    @Override
    public Object getItem(int position) {
        return data.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    public Filter getFilter(){
        return dataFilter;
    }

    //Filtering class
    private class ArrayFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence prefix) {
            FilterResults results = new FilterResults();

            if (prefix == null || prefix.length() == 0) {
                ArrayList&lt;MyDataVO&gt; list = new ArrayList&lt;MyDataVO&gt;(originalData);
                results.values = list;
                results.count = list.size();
            } else {
                String prefixString = prefix.toString().toLowerCase(Locale.ENGLISH);

                ArrayList&lt;MyDataVO&gt; values = new ArrayList&lt;MyDataVO&gt;(originalData);

                final int count = values.size();
                final ArrayList&lt;MyDataVO&gt; newValues = new ArrayList&lt;MyDataVO&gt;();

                for (int i = 0; i &lt; count; i++) {
                    final MyDataVO resultRowVO = values.get(i);
                    final String valueText = resultRowVO.getCompanyName().toLowerCase(Locale.ENGLISH);

                    // First match against the whole, non-splitted value
                    if (valueText.contains(prefixString)) {
                        newValues.add(resultRowVO);
                    }else{
                        final String codeValueText = resultRowVO.getCompanyCode().toLowerCase(Locale.ENGLISH);
                        if (codeValueText.contains(prefixString)) {
                            newValues.add(resultRowVO);
                        }
                    }
                }
                results.values = newValues;
                results.count = newValues.size();
            }
            return results;
        }

        protected void publishResults(CharSequence constraint, FilterResults results) {
            data = (ArrayList&lt;MyDataVO&gt;) results.values;
            if (results.count &gt; 0) {
                notifyDataSetChanged();
            } else {
                notifyDataSetInvalidated();
            }
        }
    }
</code></pre>
