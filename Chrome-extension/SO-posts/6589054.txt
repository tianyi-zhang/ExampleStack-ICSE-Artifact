<p>The easiest way is to use an xml layout for your items, and use the adapter to inflate that item, and then change it's contents :</p>

<pre><code>    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        if (convertView == null){
            // Create new view
            LayoutInflater inflater = LayoutInflater.from(context);
            convertView = inflater.inflate(R.layout.item, parent, false);
        }

        // Set information
        TextView titleView = (TextView)convertView.findViewById(R.id.title);
        titleView.setText(data.get(position).title);

        TextView otherView = (TextView)convertView.findViewById(R.id.other);
        titleView.setText(data.get(position).other);

        return convertView;
    }
</code></pre>

<p>When convertView is null, you create a new one, and then in every case you reuse that view. The xml layout could be something like this :</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical" android:layout_width="fill_parent"
    android:layout_height="wrap_content"&gt;

    &lt;TextView android:id="@+id/title" android:layout_width="fill_parent"
        android:layout_height="match_parent" /&gt;

    &lt;TextView android:id="@+id/other" android:layout_width="fill_parent"
        android:layout_height="match_parent" /&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>This can be further optimized by keeping a reference on the inflater, and using the view's tag system to keep track of inner views, but that's a bit off topic... If you want to learn more about it, I recommend the Google IO conference <a href="http://www.google.com/events/io/2010/sessions/world-of-listview-android.html" rel="nofollow">World of ListView</a></p>
