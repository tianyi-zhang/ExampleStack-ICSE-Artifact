<p>Above solution is for local files only.
I added support for Network files:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/309495/windows-shortcut-lnk-parser-in-java">Windows shortcut (.lnk) parser in Java?</a></li>
<li><a href="http://code.google.com/p/8bits/downloads/detail?name=The_Windows_Shortcut_File_Format.pdf">http://code.google.com/p/8bits/downloads/detail?name=The_Windows_Shortcut_File_Format.pdf</a></li>
<li><p><a href="http://www.javafaq.nu/java-example-code-468.html">http://www.javafaq.nu/java-example-code-468.html</a></p>

<pre><code>public class LnkParser {

public LnkParser(File f) throws IOException {
    parse(f);
}

private boolean isDirectory;
private boolean isLocal;

public boolean isDirectory() {
    return isDirectory;
}

private String real_file;

public String getRealFilename() {
    return real_file;
}

private void parse(File f) throws IOException {
    // read the entire file into a byte buffer
    FileInputStream fin = new FileInputStream(f);
    ByteArrayOutputStream bout = new ByteArrayOutputStream();
    byte[] buff = new byte[256];
    while (true) {
        int n = fin.read(buff);
        if (n == -1) {
            break;
        }
        bout.write(buff, 0, n);
    }
    fin.close();
    byte[] link = bout.toByteArray();

    parseLink(link);
}

private void parseLink(byte[] link) {
    // get the flags byte
    byte flags = link[0x14];

    // get the file attributes byte
    final int file_atts_offset = 0x18;
    byte file_atts = link[file_atts_offset];
    byte is_dir_mask = (byte)0x10;
    if ((file_atts &amp; is_dir_mask) &gt; 0) {
        isDirectory = true;
    } else {
        isDirectory = false;
    }

    // if the shell settings are present, skip them
    final int shell_offset = 0x4c;
    final byte has_shell_mask = (byte)0x01;
    int shell_len = 0;
    if ((flags &amp; has_shell_mask) &gt; 0) {
        // the plus 2 accounts for the length marker itself
        shell_len = bytes2short(link, shell_offset) + 2;
    }

    // get to the file settings
    int file_start = 0x4c + shell_len;

    final int file_location_info_flag_offset_offset = 0x08;
    int file_location_info_flag = link[file_start + file_location_info_flag_offset_offset];
    isLocal = (file_location_info_flag &amp; 2) == 0;
    // get the local volume and local system values
    //final int localVolumeTable_offset_offset = 0x0C;
    final int basename_offset_offset = 0x10;
    final int networkVolumeTable_offset_offset = 0x14;
    final int finalname_offset_offset = 0x18;
    int finalname_offset = link[file_start + finalname_offset_offset] + file_start;
    String finalname = getNullDelimitedString(link, finalname_offset);
    if (isLocal) {
        int basename_offset = link[file_start + basename_offset_offset] + file_start;
        String basename = getNullDelimitedString(link, basename_offset);
        real_file = basename + finalname;
    } else {
        int networkVolumeTable_offset = link[file_start + networkVolumeTable_offset_offset] + file_start;
        int shareName_offset_offset = 0x08;
        int shareName_offset = link[networkVolumeTable_offset + shareName_offset_offset]
                + networkVolumeTable_offset;
        String shareName = getNullDelimitedString(link, shareName_offset);
        real_file = shareName + "\\" + finalname;
    }
}

private static String getNullDelimitedString(byte[] bytes, int off) {
    int len = 0;
    // count bytes until the null character (0)
    while (true) {
        if (bytes[off + len] == 0) {
            break;
        }
        len++;
    }
    return new String(bytes, off, len);
}

/*
 * convert two bytes into a short note, this is little endian because it's
 * for an Intel only OS.
 */
private static int bytes2short(byte[] bytes, int off) {
    return ((bytes[off + 1] &amp; 0xff) &lt;&lt; 8) | (bytes[off] &amp; 0xff);
}

/**
 * Returns the value of the instance variable 'isLocal'.
 *
 * @return Returns the isLocal.
 */
public boolean isLocal() {
    return isLocal;
}
}
</code></pre></li>
</ul>
