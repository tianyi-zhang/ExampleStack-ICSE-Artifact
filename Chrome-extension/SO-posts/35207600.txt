<p>In case <strong>ArrayList:remove(int index)</strong>- if(index is last element's position) it avoids without <code>System.arraycopy()</code> and takes not time for this.</p>

<p>arraycopy time increases if(index decreases), by the way elements of list also decreases!</p>

<p>the best effective remove way is- removing its elements in descending order:
<code>while(list.size()&gt;0)list.remove(list.size()-1);</code>//takes O(1)
<code>while(list.size()&gt;0)list.remove(0);</code>//takes O(factorial(n))</p>

<pre><code>//region prepare data
ArrayList&lt;Integer&gt; ints = new ArrayList&lt;Integer&gt;();
ArrayList&lt;Integer&gt; toRemove = new ArrayList&lt;Integer&gt;();
Random rdm = new Random();
long millis;
for (int i = 0; i &lt; 100000; i++) {
    Integer integer = rdm.nextInt();
    ints.add(integer);
}
ArrayList&lt;Integer&gt; intsForIndex = new ArrayList&lt;Integer&gt;(ints);
ArrayList&lt;Integer&gt; intsDescIndex = new ArrayList&lt;Integer&gt;(ints);
ArrayList&lt;Integer&gt; intsIterator = new ArrayList&lt;Integer&gt;(ints);
//endregion

// region for index
millis = System.currentTimeMillis();
for (int i = 0; i &lt; intsForIndex.size(); i++) 
   if (intsForIndex.get(i) % 2 == 0) intsForIndex.remove(i--);
System.out.println(System.currentTimeMillis() - millis);
// endregion

// region for index desc
millis = System.currentTimeMillis();
for (int i = intsDescIndex.size() - 1; i &gt;= 0; i--) 
   if (intsDescIndex.get(i) % 2 == 0) intsDescIndex.remove(i);
System.out.println(System.currentTimeMillis() - millis);
//endregion

// region iterator
millis = System.currentTimeMillis();
for (Iterator&lt;Integer&gt; iterator = intsIterator.iterator(); iterator.hasNext(); )
    if (iterator.next() % 2 == 0) iterator.remove();
System.out.println(System.currentTimeMillis() - millis);
//endregion
</code></pre>

<ul>
<li>for index loop: 1090 msec</li>
<li>for desc index: <strong>519</strong> msec---the best</li>
<li>for iterator: 1043 msec</li>
</ul>
