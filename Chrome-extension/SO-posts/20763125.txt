<p>Should be pretty simple at that point...</p>

<p>Edit:</p>

<pre><code>public class FakeAdapter extends ArrayAdapter&lt;Model&gt; {

        public class Model {
            String my_string;
            int resource_id;
        }

        private Activity activity;

    /* ArrayList to hold the original values before filtering. */
    private ArrayList&lt;Model&gt; original_list;

    /* Current Data Filter */
    private Filter filter;

    public RelationshipsAdapter(Activity activity, int resource,
            ArrayList&lt;Model&gt; objects) {
        super(activity, resource, objects);
        this.activity = activity;
        this.original_list = objects;
    }

    /**
     * Viewholder pattern to minimize findViewById calls.
     */
    private static class ViewHolder {
        TextView name;
        ImageView image;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        Model currentmodel = getItem(position);

        View rowView = null;
        if(convertView == null){
            rowView = activity.getLayoutInflater().inflate(R.layout.my_item, parent, false);

            final ViewHolder holder = new ViewHolder();
            holder.name = (TextView) rowView.findViewById(R.id.item_text);
            holder.image = (ImageView) rowView.findViewById(R.id.item_image);
            rowView.setTag(holder);
        } else {
            rowView = convertView;
        }

        ViewHolder holder = (ViewHolder) rowView.getTag();
        holder.name.setText(currentmodel.my_string);
        holder.friendship.setImageResource(currentmodel.resource_id);

        return rowView;
    };

    /**
     * Returns a filter to the calling activity to filter the underlying data set by name.
     */
    @Override
    public Filter getFilter(){
        if(filter == null){
            filter = new ModelFilter();
        }
        return filter;
    }

    /** Custom Filter implementation used to filter names alphabetically on a provided prefix. */
    private class ModelFilter extends Filter {

        @Override
        protected FilterResults performFiltering(CharSequence search) {
            FilterResults filter_results = new FilterResults();
            String prefix = search.toString();

            /* If the search is empty, display the original dataset. */
            if(UserInputValidation.checkText(prefix).equals(StatusCode.NULL_INPUT)){
                filter_results.values = original_list;
                filter_results.count = original_list.size();
            } else {
                                //make a copy of the original items and use that array list
                final ArrayList&lt;RelationshipModel&gt; results = new ArrayList&lt;RelationshipModel&gt;(original_list);
                final ArrayList&lt;RelationshipModel&gt; results_holder = new ArrayList&lt;RelationshipModel&gt;();

                int count = results.size();
                for(int i = 0; i &lt; count; i++){
                    final RelationshipModel model = results.get(i);
                    final String name = (model.first_name + " " + model.last_name).toLowerCase(Locale.US);
                    if(name.contains(prefix))
                        results_holder.add(model);
                }
            filter_results.values = results_holder;
            filter_results.count = results_holder.size(); 
            }
            return filter_results;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint,
                FilterResults results) {
            clear();
            addAll((ArrayList&lt;RelationshipModel&gt;) results.values);
        }

    }

}
</code></pre>
