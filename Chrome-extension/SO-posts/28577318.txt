<p>Following is an example taken from <a href="http://docs.oracle.com/javase/tutorial/networking/sockets/readingWriting.html" rel="nofollow">java doc</a>:</p>

<p>Server Program:</p>

<pre><code>/** EchoServer.java - Echoes the input from client, this needs to be
 *  executed from microcontroller
 */
import java.net.*;
import java.io.*;

public class EchoServer {
    public static void main(String[] args) throws IOException {        
        if (args.length != 1) {
            System.err.println("Usage: java EchoServer &lt;port number&gt;");
            System.exit(1);
        }        
        int portNumber = Integer.parseInt(args[0]);

        try {
            ServerSocket serverSocket =
                new ServerSocket(Integer.parseInt(args[0]));
            Socket clientSocket = serverSocket.accept();    
            PrintWriter out =
                new PrintWriter(clientSocket.getOutputStream(), true);    
            BufferedReader in = new BufferedReader(
                new InputStreamReader(clientSocket.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                System.out.println("Received: "+inputLine);
                System.out.println("Echoing: "+inputLine);
                out.println(inputLine);
            }
        } catch (IOException e) {
            System.out.println("Exception caught when trying to listen on port "
                + portNumber + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }   
}
</code></pre>

<p>Execute the EchoServer.java in microcontroller like the following:</p>

<pre><code>javac EchoServer.java
java EchoServer 5541
</code></pre>

<p>Client Program:</p>

<pre><code>/** EchoClient.java - Sends strings to server 
  * and displays the echoed string from server
  */
import java.io.*;
import java.net.*;    
public class EchoClient {
    public static void main(String[] args) throws IOException {           
        if (args.length != 2) {
            System.err.println(
                "Usage: java EchoClient &lt;host name&gt; &lt;port number&gt;");
            System.exit(1);
        }    
        String hostName = args[0];
        int portNumber = Integer.parseInt(args[1]);    
        try {
            Socket echoSocket = new Socket(hostName, portNumber);
            PrintWriter out = new PrintWriter(echoSocket.getOutputStream(), true);
            BufferedReader in =
             new BufferedReader(new InputStreamReader(echoSocket.getInputStream()));
            BufferedReader stdIn =new BufferedReader(
                    new InputStreamReader(System.in));
            String userInput;
            while ((userInput = stdIn.readLine()) != null) {
                out.println(userInput);
                System.out.println("echo: " + in.readLine());
            }
        } catch (UnknownHostException e) {
            System.err.println("Don't know about host " + hostName);
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to " +  hostName);
            System.exit(1);
        } 
    }
}
</code></pre>

<p>Execute the EchoClient.java in PC like the following:</p>

<pre><code>javac EchoClient.java
java EchoClient 110.21.56.74 5541
</code></pre>

<p>Here, 110.21.56.74 should be replaced with the IP address of microcontroller.</p>

<p>Program should be terminated from EchoClient by pressing <code>Ctrl+C</code></p>

<hr>

<h1>Server Program in C</h1>

<p>Its been a long while since i worked on C socket programming. The following program from this <a href="http://www.binarytides.com/server-client-example-c-sockets-linux/" rel="nofollow">link</a> worked as expected.</p>

<pre><code>#include&lt;stdio.h&gt;
#include&lt;string.h&gt;    //strlen
#include&lt;sys/socket.h&gt;
#include&lt;arpa/inet.h&gt; //inet_addr
#include&lt;unistd.h&gt;    //write

int main(int argc , char *argv[])
{
    int socket_desc , client_sock , c , read_size;
    struct sockaddr_in server , client;
    char client_message[2000];

    //Create socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0); 
    if (socket_desc == -1) 
    {   
        printf("Could not create socket");
    }   
    puts("Socket created");

    //Prepare the sockaddr_in structure
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons( 8888 );

    //Bind
    if( bind(socket_desc,(struct sockaddr *)&amp;server , sizeof(server)) &lt; 0)
    {   
        //print the error message
        perror("bind failed. Error");
        return 1;
    }   
    puts("bind done");
    //Listen
    listen(socket_desc , 3); 

    //Accept and incoming connection
    puts("Waiting for incoming connections...");
    c = sizeof(struct sockaddr_in);

    //accept connection from an incoming client
    client_sock = accept(socket_desc, (struct sockaddr *)&amp;client, (socklen_t*)&amp;c);
    if (client_sock &lt; 0)
    {
        perror("accept failed");
        return 1;
    }
    puts("Connection accepted");

    //Receive a message from client
    while( (read_size = recv(client_sock , client_message , 2000 , 0)) &gt; 0 )
    {
        printf("Received : %s\n",client_message);
        printf("Echoing  : %s\n",client_message);
        //Send the message back to client
        write(client_sock , client_message , strlen(client_message));
    }

    if(read_size == 0)
    {
        puts("Client disconnected");
        fflush(stdout);
    }
    else if(read_size == -1)
    {
        perror("recv failed");
    }

    return 0;
}
</code></pre>

<p>Note this C server program uses 8888 as port number.</p>
