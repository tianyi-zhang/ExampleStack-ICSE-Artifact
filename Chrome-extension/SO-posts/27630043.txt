<p>As you found, the context has been wrapped.</p>

<p>If you drill down, you will find in the constructor:-</p>

<pre><code>    Dialog(Context context, int theme, boolean createContextThemeWrapper) {
    if (createContextThemeWrapper) {
        if (theme == 0) {
            TypedValue outValue = new TypedValue();
            context.getTheme().resolveAttribute(com.android.internal.R.attr.dialogTheme,
                    outValue, true);
            theme = outValue.resourceId;
        }
        mContext = new ContextThemeWrapper(context, theme);
    } else {
        mContext = context;
    }

    mWindowManager = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
    Window w = PolicyManager.makeNewWindow(mContext);
    mWindow = w;
    w.setCallback(this);
    w.setOnWindowDismissedCallback(this);
    w.setWindowManager(mWindowManager, null, null);
    w.setGravity(Gravity.CENTER);
    mListenersHandler = new ListenersHandler(this);
}
</code></pre>

<p>which wraps the context when there's no theme currently set.</p>

<p>While you <em>can</em> cast it as you are doing, I am not sure how reliable it will be - you can put instanceof checks around it, but it may be that you need to look at the whole thing from a fresh angle.</p>

<p>Usually, the best way to get the activity from a fragment is by using getActivity() and casting that instead. Better again is to attach a listener onAttach() approach:</p>

<pre><code>Override
public void onAttach(Activity activity) {
    super.onAttach(activity);
    try {
        listener = (Listener) activity;
    } catch (ClassCastException e) {
        throw new ClassCastException(TAG
                + " must implement Listener");
    }
}

@Override
public void onDetach() {
    listener = null;
    super.onDetach();
}
</code></pre>
