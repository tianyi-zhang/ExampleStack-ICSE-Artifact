<p>You can use the <code>addTextChangedListener</code> method on your editext to get its content as it's updated by the user. See the doc <a href="http://developer.android.com/reference/android/widget/TextView.html#addTextChangedListener%28android.text.TextWatcher%29" rel="nofollow">here</a></p>

<p>Sample code to update a textView with an editText input : </p>

<p>Layout file:</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context=".MainActivity" &gt;

&lt;TextView
    android:id="@+id/textView"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_centerHorizontal="true"
    android:layout_centerVertical="true"
    android:text="@string/hello_world" /&gt;

&lt;EditText
    android:id="@+id/editText1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_alignParentLeft="true"
    android:ems="10" &gt;

    &lt;requestFocus /&gt;
&lt;/EditText&gt;
</code></pre>

<p></p>

<p>Activity:</p>

<pre><code>public class MainActivity extends Activity {

private TextView textView;
private EditText editText;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

     editText= (EditText)findViewById(R.id.editText1);
     textView= (TextView) findViewById(R.id.textView);
    editText.addTextChangedListener(new TextWatcher() {

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            textView.setText(s); //use the charsequence s which is the current user input

        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count,
                int after) {
            // TODO Auto-generated method stub

        }

        @Override
        public void afterTextChanged(Editable s) {
            // TODO Auto-generated method stub

        }
    });
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.activity_main, menu);
    return true;
}
</code></pre>

<p>}</p>

<p><strong>EDIT</strong>
Your table is in another activity?? And you want to update a table that is not even inflated when you use your editText listener?? I think you should explain more and post all your code here.</p>

<p><strong>EDIT</strong> You are using two activities in the same screen which is frankly  quite rare. You can now instead use Fragments which behave like activities and have them to live in the same screen . You can them communicate between them pretty easily in many ways, using getActivity method.</p>
