<p>Use PhiLho;s solution in <a href="http://stackoverflow.com/questions/665406/how-to-make-a-color-transparent-in-a-bufferedimage-and-save-as-png">How to make a color transparent in a BufferedImage and save as PNG</a></p>

<pre><code>  private Image TransformColorToTransparency(BufferedImage image, Color c1, Color c2)
  {
    // Primitive test, just an example
    final int r1 = c1.getRed();
    final int g1 = c1.getGreen();
    final int b1 = c1.getBlue();
    final int r2 = c2.getRed();
    final int g2 = c2.getGreen();
    final int b2 = c2.getBlue();
    ImageFilter filter = new RGBImageFilter()
    {
      public final int filterRGB(int x, int y, int rgb)
      {
        int r = (rgb &amp; 0xFF0000) &gt;&gt; 16;
        int g = (rgb &amp; 0xFF00) &gt;&gt; 8;
        int b = rgb &amp; 0xFF;
        if (r &gt;= r1 &amp;&amp; r &lt;= r2 &amp;&amp;
            g &gt;= g1 &amp;&amp; g &lt;= g2 &amp;&amp;
            b &gt;= b1 &amp;&amp; b &lt;= b2)
        {
          // Set fully transparent but keep color
          return rgb &amp; 0xFFFFFF;
        }
        return rgb;
      }
    };

    ImageProducer ip = new FilteredImageSource(image.getSource(), filter);
      return Toolkit.getDefaultToolkit().createImage(ip);
  }
</code></pre>

<p>Or, <a href="http://marxsoftware.blogspot.com/2011/04/making-white-image-backgrounds.html" rel="nofollow">http://marxsoftware.blogspot.com/2011/04/making-white-image-backgrounds.html</a></p>

<pre><code>   public static Image makeColorTransparent(final BufferedImage im, final Color color)  
   {  
      final ImageFilter filter = new RGBImageFilter()  
      {  
         // the color we are looking for (white)... Alpha bits are set to opaque  
         public int markerRGB = color.getRGB() | 0xFFFFFFFF;  

         public final int filterRGB(final int x, final int y, final int rgb)  
         {  
            if ((rgb | 0xFF000000) == markerRGB)  
            {  
               // Mark the alpha bits as zero - transparent  
               return 0x00FFFFFF &amp; rgb;  
            }  
            else  
            {  
               // nothing to do  
               return rgb;  
            }  
         }  
      };  

      final ImageProducer ip = new FilteredImageSource(im.getSource(), filter);  
      return Toolkit.getDefaultToolkit().createImage(ip);  
   }  
}
</code></pre>

<p>Obviously, the difference between your problem and the second solution is here:</p>

<pre><code>public int markerRGB = color.getRGB() | 0xFF000000;   
</code></pre>

<p>where instead of white color, you are looking for black color to set as a transparency color.</p>

<p>MIT's solution <a href="http://web.mit.edu/javalib/www/examples/if/start.html" rel="nofollow">http://web.mit.edu/javalib/www/examples/if/start.html</a></p>

<pre><code>class TransparentFilter extends RGBImageFilter {

    final static int aShift=24;
    final static int rShift=16;
    final static int gShift=8;
    final static int bShift=0;
    final static int aMask=0xff&lt;&lt;aShift;
    final static int rMask=0xff&lt;&lt;rShift;
    final static int gMask=0xff&lt;&lt;gShift;
    final static int bMask=0xff&lt;&lt;bShift;
    final static int rgbMask=rMask|gMask|bMask;

    // this fudge value is used in place of the harder (but proper) task of
    // performing statistical analysis of the saturation values (and
    // possibly distances) of highly-saturated pixels contained in the image
    float saturationFudge;

    TransparentFilter(float saturationFudge) {
        this.saturationFudge=saturationFudge;
        canFilterIndexColorModel=true;
    }

    public int filterRGB(int x, int y, int argb) {
        // separate the three colour channels (ignore incoming alpha)
        int r=(argb&amp;rMask) &gt;&gt;&gt; TransparentFilter.rShift;
        int g=(argb&amp;gMask) &gt;&gt;&gt; TransparentFilter.gShift;
        int b=(argb&amp;bMask) &gt;&gt;&gt; TransparentFilter.bShift;
        // convert to hsb so that we can use saturation to
        // establish the alpha (transparency) value of the pixel
        float[] hsb=Color.RGBtoHSB(r,g,b,null);
        float fa=255f*hsb[1]/this.saturationFudge;
        int a=Math.max(0,Math.min(255,Math.round(fa)))&lt;&lt;TransparentFilter.aShift;
        return a|(argb&amp;TransparentFilter.rgbMask);
    }

}
</code></pre>

<p>Still, if all solutions don't work properly on test systems, we can suspect other possible culprits which we don't have enough information based on your original post:</p>

<ol>
<li>OS version 32/64-bit?</li>
<li>JRE/JDK version 32/64-bit?</li>
<li>GPU: hardware and driver?</li>
<li>Display: 256-bit/16-bit/24-bit?</li>
</ol>

<p>Also, we don't know what you have observed between those systems since no screenshots are provided. </p>

<p>The worst is you have to start using an image with transparent mask already set to solve you issue rather than relying on coding its transparency bit (unless if you are trying to create a Java based photo-editing application which needs a transparency filter).</p>

<p>Possible unsolved related issues ??:</p>

<ol>
<li><a href="http://stackoverflow.com/questions/5931619/java-swing-transparency-drawing-issues">Java Swing transparency drawing issues</a></li>
</ol>
