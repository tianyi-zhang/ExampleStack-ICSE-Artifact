<p>I read this article by <a href="http://ceki.blogspot.com/2009/06/biased-locking-in-java-se-60.html" rel="nofollow">Ceki</a> and was interested how biased semaphore acquisition could be (since I felt the "biased locking" behavior would make sense in semaphores as well..). On my hardware with 2 processors and a Sun JVM 1.6, it actually results in pretty uniform lease.   </p>

<p>Anyways, I also tried to "bias" the leasing of semaphore with the strategy I wrote in my other answer. Turns out a simple extra <code>yield</code> statement alone results in significant bias. Your problem is more complicated, but perhaps you can do similar tests with your idea and see what you get :)</p>

<p><strong>NOTE</strong> The code below is based upon Ceki's code <a href="http://ceki.blogspot.com/2009/06/biased-locking-in-java-se-60.html" rel="nofollow">here</a></p>

<p>Code:</p>

<pre><code>import java.util.concurrent.*;

public class BiasedSemaphore implements Runnable {
    static ThreadLocal&lt;Boolean&gt; favored = new ThreadLocal&lt;Boolean&gt;(){
        private boolean gaveOut = false;
        public synchronized Boolean initialValue(){
            if(!gaveOut){
                System.out.println("Favored " + Thread.currentThread().getName());
                gaveOut = true;
                return true;
            }
            return false;
        }
    };

    static int THREAD_COUNT = Runtime.getRuntime().availableProcessors();
    static Semaphore SEM = new Semaphore(1);
    static Runnable[] RUNNABLE_ARRAY = new Runnable[THREAD_COUNT];
    static Thread[] THREAD_ARRAY = new Thread[THREAD_COUNT];

    private int counter = 0;

    public static void main(String args[]) throws InterruptedException {
        printEnvironmentInfo();
        execute();
        printResults();
    }

    public static void printEnvironmentInfo() {
        System.out.println("java.runtime.version = "
                + System.getProperty("java.runtime.version"));
        System.out.println("java.vendor          = "
                + System.getProperty("java.vendor"));
        System.out.println("java.version         = "
                + System.getProperty("java.version"));
        System.out.println("os.name              = "
                + System.getProperty("os.name"));
        System.out.println("os.version           = "
                + System.getProperty("os.version"));
    }

    public static void execute() throws InterruptedException {
        for (int i = 0; i &lt; THREAD_COUNT; i++) {
            RUNNABLE_ARRAY[i] = new BiasedSemaphore();
            THREAD_ARRAY[i] = new Thread(RUNNABLE_ARRAY[i]);
            System.out.println("Runnable at "+i + " operated with "+THREAD_ARRAY[i]);
        }

        for (Thread t : THREAD_ARRAY) {
            t.start();
        }
        // let the threads run for a while
        Thread.sleep(10000);

        for (int i = 0; i&lt; THREAD_COUNT; i++) {
            THREAD_ARRAY[i].interrupt();
        }

        for (Thread t : THREAD_ARRAY) {
            t.join();
        }
    }

    public static void printResults() {
        System.out.println("Ran with " + THREAD_COUNT + " threads");
        for (int i = 0; i &lt; RUNNABLE_ARRAY.length; i++) {
            System.out.println("runnable[" + i + "]: " + RUNNABLE_ARRAY[i]);
        }
    }


    public void run() {
        while (!Thread.currentThread().isInterrupted()) {
            if (favored.get()) {
                stuff();
            } else {
                Thread.yield();
//                try {
//                    Thread.sleep(1);
//                } catch (InterruptedException e) {
//                    Thread.currentThread().interrupt();
//                }
                stuff();
            }
        }
    }

    private void stuff() {
        if (SEM.tryAcquire()) {
            //favored.set(true);
            counter++;
            try {
                Thread.sleep(10);
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
            SEM.release();
        } else {
            //favored.set(false);
        }
    }

    public String toString() {
        return "counter=" + counter;
    }
}
</code></pre>

<p>Results:</p>

<pre><code>java.runtime.version = 1.6.0_21-b07
java.vendor          = Sun Microsystems Inc.
java.version         = 1.6.0_21
os.name              = Windows Vista
os.version           = 6.0
Runnable at 0 operated with Thread[Thread-0,5,main]
Runnable at 1 operated with Thread[Thread-1,5,main]
Favored Thread-0
Ran with 2 threads
runnable[0]: counter=503
runnable[1]: counter=425
</code></pre>

<p>Tried with 30 seconds instead of 10:</p>

<pre><code>java.runtime.version = 1.6.0_21-b07
java.vendor          = Sun Microsystems Inc.
java.version         = 1.6.0_21
os.name              = Windows Vista
os.version           = 6.0
Runnable at 0 operated with Thread[Thread-0,5,main]
Runnable at 1 operated with Thread[Thread-1,5,main]
Favored Thread-1
Ran with 2 threads
runnable[0]: counter=1274
runnable[1]: counter=1496
</code></pre>

<p><strong>P.S.:</strong> Looks like "hanging out" was a very bad idea. When I tried calling <code>SEM.tryAcquire(1,TimeUnit.MILLISECONDS);</code> for favored threads and <code>SEM.tryAcquire()</code> for non-favored threads, non-favored threads got the permit almost 5 times more than the favored thread!</p>

<p>Also, I'd like to add that these results are only measured under 1 particular situation, so it's not clear how these measures behave in other situations.    </p>
