<p>Try this:</p>

<pre><code>import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Log;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.CoreProtocolPNames;
import org.apache.http.params.HttpParams;
import org.apache.http.util.EntityUtils;
import org.apache.http.entity.mime.MultipartEntity;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.ProtocolException;
import java.net.URL;


public class HTTPconector {
    private DefaultHttpClient mHttpClient;
    Context context;

    //Contrutor para que metodos possam ser usados fora de uma activity
    public HTTPconector(Context context) {
        this.context = context;
    }


    public HTTPconector() {
        HttpParams params = new BasicHttpParams();
        params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
        mHttpClient = new DefaultHttpClient(params);
    }


    public void ClientPost(String txtUrl, File file){
        try {

            HttpPost httppost = new HttpPost(txtUrl);

            MultipartEntity multipartEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
            multipartEntity.addPart("Image", new FileBody(file));
            httppost.setEntity(multipartEntity);

            mHttpClient.execute(httppost, new PhotoUploadResponseHandler());

        } catch (Exception e) {
            Log.e(HTTPconector.class.getName(), e.getLocalizedMessage(), e);
        }
    }



    //Verifica se a rede esta disponível
    public boolean isNetworkAvailable() {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = cm.getActiveNetworkInfo();
        // if no network is available networkInfo will be null
        // otherwise check if we are connected
        if (networkInfo != null &amp;&amp; networkInfo.isConnected()) {
            return true;
        }
        return false;
    }


    public String Get(String txtUrl){
        try {
            URL url = new URL(txtUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setReadTimeout(10000);
            con.setConnectTimeout(15000);
            con.setRequestMethod("GET");
            con.setDoInput(true);
            con.connect();

            return readStream(con.getInputStream());

        }  catch (ProtocolException e) {
            e.printStackTrace();
            return "ERRO: "+e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            return "ERRO: "+e.getMessage();
        }
    }


    public String Post(String txtUrl){
        File image;

        try {
            URL url = new URL(txtUrl);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("POST");
            con.setDoInput(true);
            con.setDoOutput(true);
            con.connect();

            //con.getOutputStream().write( ("name=" + "aa").getBytes());

            return readStream(con.getInputStream());
        } catch (ProtocolException e) {
            e.printStackTrace();
            return "ERRO: "+e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            return "ERRO: "+e.getMessage();
        }
    }


    //Usado para fazer conexão com a internet
    public String conectar(String u){
        String resultServer = "";
        try {
            URL url = new URL(u);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            resultServer = readStream(con.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            resultServer = "ERRO: "+ e.getMessage();
        }

        Log.i("HTTPMANAGER: ", resultServer);
        return resultServer;
    }

    //Lê o resultado da conexão
    private String readStream(InputStream in) {
        String serverResult = "";
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(in));
            String line = "";
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }

            serverResult = reader.toString();
        }   catch (IOException e) {
            e.printStackTrace();
            serverResult = "ERRO: "+ e.getMessage();
        } finally {
            if (reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    serverResult = "ERRO: "+ e.getMessage();
                }
            }
        }
        return  serverResult;
    }


    private class PhotoUploadResponseHandler implements ResponseHandler&lt;Object&gt; {

        @Override
        public Object handleResponse(HttpResponse response)throws ClientProtocolException, IOException {

            HttpEntity r_entity = response.getEntity();
            String responseString = EntityUtils.toString(r_entity);
            Log.d("UPLOAD", responseString);

            return null;
        }

    }
}
</code></pre>
