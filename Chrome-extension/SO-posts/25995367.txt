<p>you can use this code </p>

<pre><code>package com.example.videostreamer;

import java.io.IOException;
import android.content.Context;
import android.hardware.Camera;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {

private Camera mCamera;
private SurfaceHolder mHolder;
Context mContext;
private static final String TAG = "Camera Preview";
public CameraPreview(Context context, Camera camera) {
    super(context);
    mCamera = camera;
    mContext = context;
    mHolder = getHolder();
    mHolder.addCallback(this);
    //deprecated setting required in prior to android 3.0
    mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
}
@Override
public void surfaceChanged(SurfaceHolder holder, int format, int width,
        int height) {
    // if your preview can change or rotate, take care of this events here
    // make sure stop preview before resizing or reformatting.

    // stop preview before change
    try {
        mCamera.stopPreview();
    } catch (Exception e) {
        Log.i(TAG,"Error in Surface Changed :"+e.getMessage());
    }
    // set preview size and make any resize, rotate or
    // reformatting changes here

    // Now that the size is known, set up the camera parameters and begin
    // the preview.



    // start preview with new settings
    try{
        mCamera.startPreview();
    }catch (Exception e) {
        Log.d(TAG, "Error in Surface Changed"+e.getMessage());
    }
}
@Override
public void surfaceCreated(SurfaceHolder holder) {
    try {
        mCamera.setPreviewDisplay(holder);
    } catch (IOException e) {
        Log.i(TAG,"Error in Surface Created :" + e.getMessage());
    }

}
@Override
public void surfaceDestroyed(SurfaceHolder holder) {
    // TODO Auto-generated method stub

}

}
</code></pre>

<p>This code work fine for camera application.</p>

<p>after picture taken called release camera &amp; removeallview from preview </p>

<pre><code>    private PictureCallback mPicture = new PictureCallback() {

    @Override
    public void onPictureTaken(byte[] data, Camera camera) {

        File pictureFile = getOutputMediaFile(MEDIA_TYPE_IMAGE);
        if (pictureFile == null){
            Log.d(TAG, "Error creating media file, check storage permissions: ");
            return;
        }

        try {
            FileOutputStream fos = new FileOutputStream(pictureFile);
            fos.write(data);
            fos.close();

            /* set image preview in imageview */
            previewImage = (ImageView)findViewById(R.id.imageViewPrieview);
            previewImage.setImageURI(Uri.fromFile(pictureFile));

            /* release camera &amp; removeallview from preview */
            relaese();
        } catch (FileNotFoundException e) {
            Log.d(TAG, "File not found: " + e.getMessage());
        } catch (IOException e) {
            Log.d(TAG, "Error accessing file: " + e.getMessage());
        }
    }
};

  private void relaese(){
    mCamera.release();
    preview.removeAllViews();
   /* then call again take preview */
    take_priview();
  }
  private void take_priview(){
    // Create an instance of Camera
    mCamera = getCameraInstance();

    // Create our Preview view and set it as the content of our activity.
    mPreview = new CameraPreview(this, mCamera);
    preview = (FrameLayout) findViewById(R.id.CapturePreview);
    preview.addView(mPreview);

  }
</code></pre>
