<p>I found a solution..</p>

<p>In my Transform object I needed to scale the image (keeping aspect ratio) to 1024 x 768 max.</p>

<p>Transform object was never called unless I call <code>.resize(width, height)</code> to resample down the image.</p>

<p>For keeping aspect ratio and using resize I call <code>.centerInside()</code>. This way image will be scaled resample to fit width, height).</p>

<p>The value that I give to .resize(width, height) is <code>Math.ceil(Math.sqrt(1024 * 768))</code>. 
This way I'm sure to have an image higher enough for my custom Transform object, and also avoid Out Of Memory exception</p>

<p><strong>Update: Full example</strong></p>

<p>Following this example you will get a image that fits inside MAX_WIDTH and MAX_HEIGHT bounds (keeping aspect ratio)</p>

<pre><code>private static final int MAX_WIDTH = 1024;
private static final int MAX_HEIGHT = 768;

int size = (int) Math.ceil(Math.sqrt(MAX_WIDTH * MAX_HEIGHT));

// Loads given image
Picasso.with(imageView.getContext())
    .load(imagePath)
    .transform(new BitmapTransform(MAX_WIDTH, MAX_HEIGHT))
    .skipMemoryCache()
    .resize(size, size)
    .centerInside()
    .into(imageView);
</code></pre>

<p>And this is my custom BitmapTransform class:</p>

<pre><code>import android.graphics.Bitmap;
import com.squareup.picasso.Transformation;

/**
 * Transformate the loaded image to avoid OutOfMemoryException
 */
public class BitmapTransform implements Transformation {

    int maxWidth;
    int maxHeight;

    public BitmapTransform(int maxWidth, int maxHeight) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
    }

    @Override
    public Bitmap transform(Bitmap source) {
        int targetWidth, targetHeight;
        double aspectRatio;

        if (source.getWidth() &gt; source.getHeight()) {
            targetWidth = maxWidth;
            aspectRatio = (double) source.getHeight() / (double) source.getWidth();
            targetHeight = (int) (targetWidth * aspectRatio);
        } else {
            targetHeight = maxHeight;
            aspectRatio = (double) source.getWidth() / (double) source.getHeight();
            targetWidth = (int) (targetHeight * aspectRatio);
        }

        Bitmap result = Bitmap.createScaledBitmap(source, targetWidth, targetHeight, false);
        if (result != source) {
            source.recycle();
        }
        return result;
    }

    @Override
    public String key() {
        return maxWidth + "x" + maxHeight;
    }

};
</code></pre>
