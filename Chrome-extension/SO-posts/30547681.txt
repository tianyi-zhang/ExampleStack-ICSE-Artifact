<p>It seems reasonable to create an object just for ISBN &amp; pallet number, but keep the quantity separately as you consider them equal if ISBN &amp; pallet number are equal. So the object might look like this:</p>

<pre><code>public class PackingListRow {
    private final String isbn;
    private final int palletNumber;

    public PackingListRow(String isbn, int palletNumber) {
        this.isbn = isbn;
        this.palletNumber = palletNumber;
    }

    @Override
    public int hashCode() {
        return palletNumber * 31 + ((isbn == null) ? 0 : isbn.hashCode());
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PackingListRow other = (PackingListRow) obj;
        if (isbn == null) {
            if (other.isbn != null)
                return false;
        } else if (!isbn.equals(other.isbn))
            return false;
        if (palletNumber != other.palletNumber)
            return false;
        return true;
    }

    @Override
    public String toString() {
        return isbn+":"+palletNumber;
    }
}
</code></pre>

<p>After that you can store the results in the <code>Map</code> object and add items via method like this:</p>

<pre><code>public static void addItem(Map&lt;PackingListRow, Integer&gt; items, PackingListRow row, 
                           int quantity) {
    Integer oldQuantity = items.get(row);
    items.put(row, oldQuantity == null ? quantity : quantity+oldQuantity);
}
</code></pre>

<p>Or much simpler if you are using Java 8:</p>

<pre><code>public static void addItem(Map&lt;PackingListRow, Integer&gt; items, PackingListRow row, 
                           int quantity) {
    items.merge(row, quantity, Integer::sum);
}
</code></pre>

<p>Testing on your sample data:</p>

<pre><code>public static void main(String[] args) {
    Map&lt;PackingListRow, Integer&gt; items = new HashMap&lt;PackingListRow, Integer&gt;();
    addItem(items, new PackingListRow("1234", 1), 10);
    addItem(items, new PackingListRow("1234", 2), 5);
    addItem(items, new PackingListRow("1234", 1), 15);
    System.out.println(items);
}
</code></pre>

<p>The output is:</p>

<pre><code>{1234:1=25, 1234:2=5}
</code></pre>
