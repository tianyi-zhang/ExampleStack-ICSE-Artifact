<p>After 3 days trying to play Youtube videos inside a WebView using different solutions found along 10 Google search pages, some solutions work but not on every device or os version, I decided to think my own way.</p>

<p>For me, the solution of playing the video directly on the WebView generates many artifacts even on the last Android device : Nexus 4
So, I had to find a way to catch the click on the Youtube iframe in order to launch the Youtube application directly like iOS do perfectly without any developer efforts.</p>

<pre><code>public class MyWebViewClient extends WebViewClient {

    public Activity mActivity;

    public MyWebViewClient(Activity activity) {
        super();
        mActivity = activity;
    }

    @Override
    public boolean shouldOverrideUrlLoading(WebView view, String url) {
        Uri uri = Uri.parse(url);
        if (uri.getHost().contains("youtube.com")) {
            IntentUtils.viewYoutube(mActivity, url);
            return true;
        }

        return false;
    }

    public static void viewYoutube(Context context, String url) {
        IntentUtils.viewWithPackageName(context, url, "com.google.android.youtube");
    }

    public static void viewWithPackageName(Context context, String url, String packageName) {
        try {
            Intent viewIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
            if (isAppInstalled(context, packageName)) {
                viewIntent.setPackage(packageName);
            }
            context.startActivity(viewIntent);
        } catch (Exception e) {
            Intent viewIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
            context.startActivity(viewIntent);
        }
    }

    public static boolean isAppInstalled(Context context, String packageName) {
        PackageManager packageManager = context.getPackageManager();
        try {
            packageManager.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);
            return true;
        } catch (NameNotFoundException e) {
        }
        return false;
    }

    @Override
    public void onPageFinished(final WebView view, String url) {
        String javascript = "javascript:" +
            "var iframes = document.getElementsByTagName('iframe');" +
            "for (var i = 0, l = iframes.length; i &lt; l; i++) {" +
            "   var iframe = iframes[i]," +
            "   a = document.createElement('a');" +
            "   a.setAttribute('href', iframe.src);" +
            "   d = document.createElement('div');" +
            "   d.style.width = iframe.offsetWidth + 'px';" +
            "   d.style.height = iframe.offsetHeight + 'px';" +
            "   d.style.top = iframe.offsetTop + 'px';" +
            "   d.style.left = iframe.offsetLeft + 'px';" +
            "   d.style.position = 'absolute';" +
            "   d.style.opacity = '0';" +
            "   d.style.filter = 'alpha(opacity=0)';" +
            "   d.style.background = 'black';" +
            "   a.appendChild(d);" +
            "   iframe.offsetParent.appendChild(a);" +
            "}";
        view.loadUrl(javascript);

        super.onPageFinished(view, url);
    }
}
</code></pre>

<p>By the way I have to say that I'm a little bit upset of the few efforts made to provide an acceptable WebView to developers.</p>

<p>Even if I understand the wish to avoid Android applications only based on HTML, it's always the best/quickest way to display rich content on a details page.
For example, in my case, I manage an RSS based application which allows my customers to change the content themselves.</p>

<p>Also, looking at the time we have to spend for linking the UI with network data and saved data comparing to Windows Phone development where every data is directly linking to an UI component.</p>
