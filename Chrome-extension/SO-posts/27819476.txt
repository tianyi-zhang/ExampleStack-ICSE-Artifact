<p>hello i heaved use this adapter for expandable list view 
use this:</p>

<pre><code>public class ExpandableListAdapter extends BaseExpandableListAdapter {

    private Context _context;
    private List&lt;String&gt; _listDataHeader; // header titles
    // child data in format of header title, child title
    private HashMap&lt;String, List&lt;String&gt;&gt; _listDataChild;
    private List&lt;Home_property&gt; data;
    int[] images_tag;

    public ExpandableListAdapter(Context context, List&lt;Home_property&gt; category,
            int[] image) {
        this._context = context;
        images_tag = image;
        data = category;

    }

    @Override
    public Object getChild(int groupPosition, int childPosititon) {
        return this._listDataChild.get(this._listDataHeader.get(groupPosition))
                .get(childPosititon);
    }

    @Override
    public long getChildId(int groupPosition, int childPosition) {
        return childPosition;
    }

    @Override
    public View getChildView(int groupPosition, final int childPosition,
            boolean isLastChild, View convertView, ViewGroup parent) {

        if (convertView == null) {
            LayoutInflater infalInflater = (LayoutInflater) this._context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.list_item, null);
        }
        TextView txtListChild = (TextView) convertView
                .findViewById(R.id.lblListItem);
        txtListChild.setTypeface(Fontfamily.getFont(_context));
        txtListChild
                .setText(data.get(groupPosition).subcats.get(childPosition).subcatnam);
        return convertView;
    }

    @Override
    public int getChildrenCount(int groupPosition) {
        return data.get(groupPosition).subcats.size();

    }

    @Override
    public Object getGroup(int groupPosition) {
        return this._listDataHeader.get(groupPosition);
    }

    @Override
    public int getGroupCount() {
        return data.size();
    }

    @Override
    public long getGroupId(int groupPosition) {
        return groupPosition;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded,
            View convertView, ViewGroup parent) {
        if (convertView == null) {
            LayoutInflater infalInflater = (LayoutInflater) this._context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.list_group, null);
        }
        TextView lblListHeader = (TextView) convertView
                .findViewById(R.id.lblListHeader);
        ImageView header = (ImageView) convertView.findViewById(R.id.header);
        lblListHeader.setTypeface(Fontfamily.getFont(_context));
        try {
            lblListHeader.setText(data.get(groupPosition).catnam);
        } catch (IndexOutOfBoundsException e) {

        }   

        header.setBackgroundResource(images_tag[groupPosition]);
        return convertView;
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition) {
        return true;
    }
}
</code></pre>
