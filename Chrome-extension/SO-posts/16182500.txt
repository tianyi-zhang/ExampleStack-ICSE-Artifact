<pre><code>message.setSpan(span, start, end, flags);
</code></pre>

<p>You need <strong>remove origin span</strong> before set new span.
Please see below<br/>
<a href="http://stackoverflow.com/questions/9164190/the-onclick-of-clickablespan-is-not-working-for-urlspan">The onClick() of ClickableSpan is not working for URLSpan?</a></p>

<p>EDIT<BR/>
You can capture <strong>any span click event</strong> by <code>extends LinkMovementMethod</code></p>

<pre><code>import android.text.Layout;
import android.text.Spannable;
import android.text.method.LinkMovementMethod;
import android.text.method.MovementMethod;
import android.text.style.ImageSpan;
import android.view.MotionEvent;
import android.widget.TextView;

public class LinkMovementMethodExt extends LinkMovementMethod {
    private static LinkMovementMethod sInstance;
    private Handler handler = null;
    private  Class spanClass = null;
    public static MovementMethod getInstance(Handler _handler,Class _spanClass) {
        if (sInstance == null){
            sInstance = new LinkMovementMethodExt();
                    ((LinkMovementMethodExt)sInstance).handler = _handler;
                    ((LinkMovementMethodExt)sInstance).spanClass = _spanClass;
                    }
        return sInstance;
    }
     @Override
        public boolean onTouchEvent(TextView widget, Spannable buffer,
                                    MotionEvent event) {
            int action = event.getAction();

            if (action == MotionEvent.ACTION_UP ||
                action == MotionEvent.ACTION_DOWN) {
                int x = (int) event.getX();
                int y = (int) event.getY();

                x -= widget.getTotalPaddingLeft();
                y -= widget.getTotalPaddingTop();

                x += widget.getScrollX();
                y += widget.getScrollY();

                Layout layout = widget.getLayout();
                int line = layout.getLineForVertical(y);
                int off = layout.getOffsetForHorizontal(line, x);
                /**
             * get you interest span, here get ImageSpan that you click
             */
                Object [] spans = buffer.getSpans(off, off, spanClass);
            if (spans.length != 0) {
                if (action == MotionEvent.ACTION_UP) {
                    Message message = handler.obtainMessage();
                            message.obj = spans;
                            message.what = 100;
                            message.sendToTarget();
                    return true;
                } 
            }
            }

            return super.onTouchEvent(widget, buffer, event);
        }

}
</code></pre>

<p><strong>textView.setMovementMethod(LinkMovementMethodExt.getInstance());</strong></p>

<hr>

<p><strong>Edit for "android developer"</strong><br/>
It is better way to add <strong>Handler</strong> property for <strong>LinkMovementMethodExt</strong> class.<br/>
You can capture all Spanned which are delivered as Message object.<br/><br>
Snip code in onTouchEvent method:<br/></p>

<pre><code>Message message = Handler.obtainMessage();
message.obj = buffer.getSpans(off, off, Spanned.class);//get all spanned
message.what = 111;//which value ,it is up to you
message.sendToTarget(); //send message to you target handler
</code></pre>

<p>You can handler expected spanned in you handler class. May be it is flexible way to handle .<br/> 
Hope to help you.</p>

<hr>

<p><img src="http://i.stack.imgur.com/QDnqv.png" alt="enter image description here"></p>

<p><br/>
Above textview text is <code>&lt;a href='/a'&gt;aaaa&lt;/a&gt;123456&lt;a href='/b'&gt;bbbb&lt;/b&gt;7890</code><br/>
I understand you requirement : <br/>Click 'aaaa',you want get it<code>s href value '/a', click 'bbbb',get it</code>s href '/b'; Do not trigger default action which is opened in web browser.
<br/>
If my understand is right, you can do like this:<br/></p>

<ul>
<li>Set LinkMovementMethod for textview, etc:<code>textview.setMovementMethod(LinkMovementMethodExt.getInstance(handler, URLSpan.class));</code></li>
<li>Get interest span, here is URLSpan.<br/>
In you handler <strong>handleMessage</strong> method, you can do like this:<br/></li>
</ul>

<blockquote>
<pre><code>private Handler handler = new Handler() {
      public void handleMessage(Message msg) {
          int what = msg.what;
          if (what == 100) {
              Object[] spans = (Object[])msg.obj;
              for (Object span : spans) {
                  if (span instanceof URLSpan) {
                      System.out.println(((URLSpan) span).getURL());
                  }
              }
          }
      };
  };
</code></pre>
</blockquote>

<hr>

<p><a href="https://github.com/boiledwater/spanned" rel="nofollow" title="Download demo code">Download demo code</a>
<br/></p>

<ul>
<li><strong>MainActivity</strong> has <strong>color</strong> property which you can assign which color value as you like.</li>
</ul>

<p>How to do?</p>

<ul>
<li><p>Step1, get current click span.</p></li>
<li><p>Step2, set BackgroundColorSpan for current click span</p></li>
</ul>
