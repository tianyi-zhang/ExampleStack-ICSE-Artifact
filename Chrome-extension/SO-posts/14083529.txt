<p>I used your code to write my own opengl application which shows a colored triangle in front of a background with a random color. I recognized an issue with setting color buffers. Therefore, instead of using color buffers, I used the following line of code in my triangle draw function to set the color of the triangle. You might do the same, because it prevents the triangle from being drawn.</p>

<pre><code>gl.glColor4f(0.3f, 0.3f, 0.3f, 1.0f);
</code></pre>

<p>I also wrote my own vertex and index arrays as I don't understand your vertex, color and index arrays.</p>

<pre><code>private float[] vertices = { 0.0f, 0.5f, 0.0f,
                            -0.5f, -0.5f, 0.0f,
                            0.5f, -0.5f, -1.0f };
private byte[] indices = { 0, 1, 2 };
</code></pre>

<p>The following code samples show my full code.</p>

<p><strong>TriangleObject.java</strong></p>

<pre><code>public class TriangleObject {

private FloatBuffer vertexBuffer;
private ByteBuffer indexBuffer;

private float[] vertices = { 0.0f, 0.5f, 0.0f,
                            -0.5f, -0.5f, 0.0f,
                            0.5f, -0.5f, -1.0f };

private byte[] indices = { 0, 1, 2 };

public TriangleObject() {

    ByteBuffer byteBuf = ByteBuffer.allocateDirect(vertices.length * 4);
    byteBuf.order(ByteOrder.nativeOrder());
    vertexBuffer = byteBuf.asFloatBuffer();
    vertexBuffer.put(vertices);
    vertexBuffer.position(0);

    indexBuffer = ByteBuffer.allocateDirect(indices.length);
    indexBuffer.put(indices);
    indexBuffer.position(0);

}

public void draw(GL10 gl) {
    gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
    gl.glFrontFace(GL10.GL_CCW);
    gl.glColor4f(0.3f, 0.3f, 0.3f, 1.0f);
    gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
    gl.glDrawElements(GL10.GL_TRIANGLES, indices.length, GL10.GL_UNSIGNED_BYTE, indexBuffer);
    gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);
}   
}
</code></pre>

<p><strong>TriangleRenderer.java</strong></p>

<pre><code>public class TriangleRenderer implements Renderer {

TriangleObject t;

public TriangleRenderer() {
    t = new TriangleObject();
}

@Override
public void onSurfaceCreated(GL10 gl, EGLConfig config) {
    gl.glDisable(GL10.GL_DITHER);
    Random r = new Random();
    gl.glClearColor(r.nextFloat(), r.nextFloat(), r.nextFloat(), r.nextFloat());
    gl.glClearDepthf(1.0f);
    gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
}

@Override
public void onDrawFrame(GL10 gl) {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
    gl.glLoadIdentity();
    t.draw(gl);
}

@Override
public void onSurfaceChanged(GL10 gl, int width, int height) {
    gl.glViewport(0, 0, width, height);
    gl.glMatrixMode(GL10.GL_PROJECTION);
    gl.glLoadIdentity();
}
}
</code></pre>

<p><strong>TriangleActivity.java</strong></p>

<pre><code>public class TriangleActivity extends Activity {

private GLSurfaceView glSurface;
private TriangleRenderer glRenderer;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    glSurface = new GLSurfaceView(this);
    glRenderer = new TriangleRenderer();
    glSurface.setRenderer(glRenderer);
    setContentView(glSurface);
    glSurface.requestFocus();
    glSurface.setFocusableInTouchMode(true);
}

@Override
protected void onPause() {
    super.onPause();
    glSurface.onPause();
}

@Override
protected void onResume() {
    super.onResume();
    glSurface.onResume();
}
}
</code></pre>

<p><strong>Edit:</strong></p>

<p>I continued to figure out why the color buffer is not working. Each vertex needs a color consisting of four float values (rgba). Therefore, I added the following color array.</p>

<pre><code>private float[] colors = { 0.0f, 1.0f, 0.0f, 1.0f,
        1.0f, 0.0f, 0.0f, 1.0f,
        0.0f, 1.0f, 0.0f, 1.0f,
        0.0f, 0.0f, 1.0f, 1.0f,
        0.1f, 0.0f, 0.0f, 1.0f,
        0.1f, 0.0f, 0.0f, 1.0f,
        0.1f, 0.0f, 0.0f, 1.0f,
        0.1f, 0.0f, 0.0f, 1.0f,
        0.1f, 0.0f, 0.0f, 1.0f};
</code></pre>

<p>With </p>

<pre><code>byteBuf = ByteBuffer.allocateDirect(colors.length * 4);
byteBuf.order(ByteOrder.nativeOrder());
colorBuffer = byteBuf.asFloatBuffer();
colorBuffer.put(colors);
colorBuffer.position(0);
</code></pre>

<p>and </p>

<pre><code>...
gl.glEnableClientState(GL10.GL_COLOR_ARRAY);
...
gl.glColorPointer(4, GL10.GL_FLOAT, 0, colorBuffer);
...
gl.glDisableClientState(GL10.GL_COLOR_ARRAY);
</code></pre>

<p>the whole thing with the color buffers is working.</p>
