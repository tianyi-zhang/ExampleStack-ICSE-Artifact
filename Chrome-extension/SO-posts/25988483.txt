<p>Hashbased collections depends on the <code>hashcode()</code> and <code>equals()</code> methods to correctly identify duplicates. If you modify these to fit exactly one usecase you are probably likely to have all sorts of side-effects in other use cases.</p>

<p>To say it more explicitly. If you change the methods of your VO to use only a subset of the data, you are likely to encounter unforeseen problems some where else where you might store VOs in hashbased collections.</p>

<p>You should keep <code>hashcode()</code> and <code>equals()</code> consistent with data equality, i.e. using all attributes for tests, as suggested in many sources (Source generators in eclipse, @EqualsAndHashcode annotations from Lombok, 'Effective Java' by Joshua Bloch, etc.).</p>

<p>In your explicit case you could create a specific wrapper to calculate your hashcodes and equality based on the subset.</p>

<p>As an example:</p>

<pre><code>public void doit(List&lt;VO&gt; vos) {
    Set&lt;VOWrapper&gt; dups = new HashSet&lt;&gt;();
    for (VO vo : vos) {
        if (dups.contains(new VOWrapper(vo))) {
            System.out.println("Found a duplicate");
        } else {
            dups.add(new VOWrapper(vo));
            // Process vo
        }
    }
}
</code></pre>

<p>Based on this VO</p>

<pre><code>@Data // Lombok generates getters/setters/equals/hashcode (using all fields)
public class VO {
    private String countrycode;
    private String country;
    private int month;
    private int year;
    private double price;
}
</code></pre>

<p>And this wrapper</p>

<pre><code>public class VOWrapper {
private final VO vo;

public VOWrapper(VO vo) { this.vo = vo; }

// Equals method with only 3 fields used
@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    VO other = ((VOWrapper) obj).vo;
    if (vo.getCountry() == null) {
        if (other.getCountry() != null)
            return false;
    } else if (!vo.getCountry().equals(other.getCountry()))
        return false;
    if (vo.getCountrycode() == null) {
        if (other.getCountrycode() != null)
            return false;
    } else if (!vo.getCountrycode().equals(other.getCountrycode()))
        return false;
    if (Double.doubleToLongBits(vo.getPrice()) != Double.doubleToLongBits(other.getPrice()))
        return false;
    return true;
}

//Hashcode method with only 3 fields used
@Override
public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((vo.getCountry() == null) ? 0 : vo.getCountry().hashCode());
    result = prime * result + ((vo.getCountrycode() == null) ? 0 : vo.getCountrycode().hashCode());
    long temp;
    temp = Double.doubleToLongBits(vo.getPrice());
    result = prime * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));
    return result;
}
}
</code></pre>
