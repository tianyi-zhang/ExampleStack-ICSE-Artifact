<p>Below is the code after a lot of editing now it is working, posters are displayed </p>

<p>finally.</p>

<pre><code>public class PhotoGrid extends Fragment {

String[] movieId, movieTitle, movieReleaseDate, movieVoteAverage,   movieOverview, moviePosterPath;
static String[] string1;
GridView gridView;

public PhotoGrid() {

}

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    // Add this line in order for this fragment to handle menu events.
    setHasOptionsMenu(true);
}

@Override
public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
    inflater.inflate(R.menu.menu, menu);
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    // Handle action bar item clicks here. The action bar will
    // automatically handle clicks on the Home/Up button, so long
    // as you specify a parent activity in AndroidManifest.xml.
    int id = item.getItemId();
    if (id == R.id.action_refresh) {
        FetchMoviesPosters fetchMoviesPosters = new FetchMoviesPosters();
        fetchMoviesPosters.execute("popularity.desc");
        return true;
    }
    return super.onOptionsItemSelected(item);
}

@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {


    View rootView = inflater.inflate(R.layout.fragment_photo_grid, container,   false);
    gridView = (GridView) rootView.findViewById(R.id.grid_view);
 //        gridView.setAdapter(imageAdapter);


    return rootView;
}


public class ImageAdapter extends BaseAdapter {

    private Context mContext;

    private String[] mThumbIds;

    public ImageAdapter(Context c, String[] str2) {

        mContext = c;
        mThumbIds = str2;
    }

    @Override
    public int getCount() {
        if (mThumbIds != null) {
            return mThumbIds.length;
        } else {
            return 0;
        }
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        ImageView imageView;
        if (convertView == null) {
            // if it's not recycled, initialize some attributes
            imageView = new ImageView(mContext);
            imageView.setLayoutParams(new GridView.LayoutParams(500, 500));
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
            imageView.setPadding(4, 4, 4, 4);
        } else {
            imageView = (ImageView) convertView;
        }

        Picasso.with(mContext).load(mThumbIds[position]).into(imageView);

        //imageView.setImageResource(Integer.parseInt(mThumbIds[position]));
        return imageView;
    }
}

    public class FetchMoviesPosters extends AsyncTask&lt;String, Void, String[]&gt; {
        private final String LOG_TAG = FetchMoviesPosters.class.getSimpleName();


        private String[] MoviesJasonPrase(String moviesPosterStr) throws JSONException {


            JSONObject moviesJson = new JSONObject(moviesPosterStr);
            JSONArray resultsArray = moviesJson.getJSONArray("results");
            movieId = new String[resultsArray.length()];
            movieTitle = new String[resultsArray.length()];
            movieReleaseDate = new String[resultsArray.length()];
            movieVoteAverage = new String[resultsArray.length()];
            movieOverview = new String[resultsArray.length()];
            moviePosterPath = new String[resultsArray.length()];


            for (int i = 0; i &lt; resultsArray.length(); i++) {

                JSONObject movie = resultsArray.getJSONObject(i);
                movieId[i] = movie.getString("id");
                movieTitle[i] = movie.getString("original_title");
                movieReleaseDate[i] = movie.getString("release_date");
                movieVoteAverage[i] = movie.getString("vote_average");
                movieOverview[i] = movie.getString("overview");
                moviePosterPath[i] = movie.getString("poster_path");



   //                    String resultStrs = moviesPosterStr + movieId ;

            }


            return moviePosterPath;

        }

        @Override
        protected String[] doInBackground(String... params) {

            if (params.length == 0) {
                return null;
            }


            HttpURLConnection urlConnection = null;
            BufferedReader reader = null;

            // Will contain the raw JSON response as a string.
            String moviePostersJsonStr = null;


            try {

                final String FORECAST_BASE_URL =
                        "https://api.themoviedb.org/3/discover/movie?";
                final String SORT_OPTI = "sort_by";
                final String APPID_PARAM = "api_key";

                Uri builtUri = Uri.parse(FORECAST_BASE_URL).buildUpon()
                        .appendQueryParameter(SORT_OPTI, params[0])
                        .appendQueryParameter(APPID_PARAM, BuildConfig.THE_MOVIE_DB)
                        .build();

                URL url = new URL(builtUri.toString());

                Log.v(LOG_TAG, "Built URI " + builtUri.toString());
                // Create the request to OpenWeatherMap, and open the connection
                urlConnection = (HttpURLConnection) url.openConnection();
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();

                // Read the input stream into a String
                InputStream inputStream = urlConnection.getInputStream();
                StringBuilder buffer = new StringBuilder();
                if (inputStream == null) {
                    // Nothing to do.
                    return null;
                }
                reader = new BufferedReader(new InputStreamReader(inputStream));

                String line;
                while ((line = reader.readLine()) != null) {
                    // Since it's JSON, adding a newline isn't necessary (it won't affect parsing)
                    // But it does make debugging a *lot* easier if you print out the completed
                    // buffer for debugging.
                    buffer.append(line).append("\n");
                }

                if (buffer.length() == 0) {
                    // Stream was empty.  No point in parsing.
                    return null;
                }
                moviePostersJsonStr = buffer.toString();
                Log.v(LOG_TAG, "Data:" + moviePostersJsonStr);
            } catch (IOException e) {
                Log.e("PhotoGrid", "Error ", e);
                // If the code didn't successfully get the weather data, there's no point in attemping
                // to parse it.
                return null;
            } finally {
                if (urlConnection != null) {
                    urlConnection.disconnect();
                }
                if (reader != null) {
                    try {
                        reader.close();
                    } catch (final IOException e) {
                        Log.e("PhotoGrid", "Error closing stream", e);
                    }
                }

            }
            try {
                return MoviesJasonPrase(moviePostersJsonStr);
            } catch (JSONException e) {
                Log.e(LOG_TAG, e.getMessage(), e);
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(String[] Strings) {
            if (Strings != null) {

                string1 = new String[Strings.length];
                for (int i = 0; i &lt; Strings.length; i++) {
                    String[] getImage = Strings[i].split("-");
                    string1[i] = "http://image.tmdb.org/t/p/w185/" + getImage[0];
                }
                ImageAdapter imageAdapter = new ImageAdapter(getActivity(), string1);
                gridView.setAdapter(imageAdapter);

            }
        }
    }
}
</code></pre>
