<pre><code>// Import io so we can use file objects
import java.io.*;

public class searchfile {
public static void main(String args[]) {
    try {
        // Open the file c:\test.txt as a buffered reader
        BufferedReader bf = new BufferedReader(new FileReader("C:/Users/Sean/Desktop/Java/MyText.txt"));

        // Start a line count and declare a string to hold our current line.
        int linecount = 0;
            String line;

        // Let the user know what we are searching for
        // i.e. just printing to the console, not actually searching.
        System.out.println("Searching for " + args[0] + " in file...");

        // Loop through each line, stashing the line into our line variable.
        while (( line = bf.readLine()) != null)
        {
                // Count lines. We read a line this variable (linecount) increments by one
                linecount++; 
                // the indexOf function returns the index (i.e. the place of) the parameter, in this case args[0]. If it doesn't find the parameter, it returns -1, an impossible value, so we know it wasn't found.
                // Here is the actual searching done, till...
                int indexfound = line.indexOf(args[0]);

                // If greater than -1, means we found the word
                if (indexfound &gt; -1) {
                     System.out.println("Word was found at position " + indexfound +" on line " + linecount);
                }
                // ...here.
        }

        // Close the file after done searching
        bf.close();
    }
    catch (IOException e) {
        System.out.println("IO Error Occurred: " + e.toString());
    }
}

}
</code></pre>

<p>I said in comments where the searching is done. I think you can copy most of that and do that again for args[1].</p>

<p>For more arguments (not sure if it's the best/fastest solution):</p>

<pre><code>// Import io so we can use file objects
import java.io.*;

public class searchfile {
public static void main(String args[]) {
    try {
        // Open the file c:\test.txt as a buffered reader
        BufferedReader bf = new BufferedReader(new FileReader("C:/Users/Sean/Desktop/Java/MyText.txt"));

        // Start a line count and declare a string to hold our current line.
        int linecount = 0;
            String line;

        // Let the user know what we are searching for
        // i.e. just printing to the console, not actually searching.
        System.out.println("Searching for " + args[0] + " in file...");

        // Loop through each line, stashing the line into our line variable.
        while (( line = bf.readLine()) != null)
        {
                // Count lines. We read a line this variable (linecount) increments by one
                linecount++; 
                // the indexOf function returns the index (i.e. the place of) the parameter, in this case args[0]. If it doesn't find the parameter, it returns -1, an impossible value, so we know it wasn't found.
                // Here is the actual searching done, till...
                for(int index = 0; true; index++) {
                try {
                int indexfound = line.indexOf(args[index]);

                // If greater than -1, means we found the word
                if (indexfound &gt; -1) {
                     System.out.println("Word was found at position " + indexfound +" on line " + linecount);
                }
                }
                catch(ArrayIndexOutOfBoundsException ex) {
                    break;
                }
                // ...here.
                }
        }

        // Close the file after done searching
        bf.close();
    }
    catch (IOException e) {
        System.out.println("IO Error Occurred: " + e.toString());
    }
}

}
</code></pre>

<p>I'm not sure if this works, probably not, but I wrote this just out of my head (not tested).</p>
