<p>use setter and getter </p>

<p>SampleNewWizard.java</p>

<pre><code> .............
 public InputStream openContentStream() {
    String contents =
        "This is the initial file contents for *.ej file that should be word-sorted in the Preview page of the multi-page editor";
    if(page.getContent()!=null) {
        return new ByteArrayInputStream(page.getContent().getBytes());
    }
    return new ByteArrayInputStream(contents.getBytes());
}
  ............
</code></pre>

<p>SampleNewWizardPage.java</p>

<pre><code>package amma.wizards;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.internal.ui.wizards.NewWizardMessages;
import org.eclipse.jdt.internal.ui.wizards.dialogfields.SelectionButtonDialogFieldGroup;
import org.eclipse.jface.dialogs.IDialogSettings;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.wizard.WizardPage;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.dialogs.ContainerSelectionDialog;



@SuppressWarnings("restriction")
public class SampleNewWizardPage extends WizardPage {
private Text containerText;

private Text fileText;

private ISelection selection;
private SelectionButtonDialogFieldGroup fMethodStubsButtons;
IType type;
StringBuffer buf= new StringBuffer();

private String content;
public String getContent() {
    return content;
}

public void setContent(String content) {
    this.content = content;
}

/**
 * Constructor for SampleNewWizardPage.
 * 
 * @param pageName
 */
public SampleNewWizardPage(ISelection selection) {
    super("wizardPage");
    setTitle("Multi-page Editor File");
    setDescription("This wizard creates a new file with *.ej extension that can be opened by a multi-page editor.");
    this.selection = selection;
    String[] buttonNames3= new String[] {"type","channel","inherited"   };
    fMethodStubsButtons= new SelectionButtonDialogFieldGroup(SWT.CHECK, buttonNames3, 1);
    fMethodStubsButtons.setLabelText(NewWizardMessages.NewClassWizardPage_methods_label);
}

/**
 * @see IDialogPage#createControl(Composite)
 */
public void createControl(Composite parent) {
    Composite container = new Composite(parent, SWT.NULL);
    GridLayout layout = new GridLayout();
    container.setLayout(layout);
    layout.numColumns = 3;
    layout.verticalSpacing = 9;
    Label label = new Label(container, SWT.NULL);
    label.setText("&amp;Container:");

    containerText = new Text(container, SWT.BORDER | SWT.SINGLE);
    GridData gd = new GridData(GridData.FILL_HORIZONTAL);
    containerText.setLayoutData(gd);
    containerText.addModifyListener(new ModifyListener() {
        public void modifyText(ModifyEvent e) {
            dialogChanged();
        }
    });


    Button button = new Button(container, SWT.PUSH);
    button.setText("Browse...");
    button.addSelectionListener(new SelectionAdapter() {
        public void widgetSelected(SelectionEvent e) {
            handleBrowse();
        }
    });
    label = new Label(container, SWT.NULL);
    label.setText("&amp;File name:"); 
    fileText = new Text(container, SWT.BORDER | SWT.SINGLE);

    gd = new GridData(GridData.FILL_HORIZONTAL);


    fileText.setLayoutData(gd);
    fileText.addModifyListener(new ModifyListener() {
        public void modifyText(ModifyEvent e) {
            dialogChanged();
        }
    });
    Label separator = new Label (container, SWT.SEPARATOR | SWT.HORIZONTAL);
    label = new Label(container, SWT.NULL);
    label.setText("&amp;Select:"); 
     final Button mrButton = new Button(container, SWT.RADIO);
     mrButton.setText("Channel");
     final Button mrsButton = new Button(container, SWT.RADIO);
     mrsButton.setText("Type");

     mrButton.addListener (SWT.Selection, new Listener () {
            public void handleEvent (Event event) {

                final String lineDelim= "\n";
                if(mrButton.getSelection() == true)
                {
                    System.out.println("channel");
                    //String contents = "hai";
                    //SampleNewWizard.openContentStream(contents);
                    int dotLoc = getFileName().lastIndexOf('.');
                    String Name = getFileName().substring(0,dotLoc);
                    buf.append("channel "+Name);
                    buf.append("()");
                    buf.append(lineDelim);
                    buf.append("{");
                    buf.append(lineDelim);
                    buf.append("}");
                    buf.toString();
                    setContent(buf.toString()); 
                //  try {
                        //type.createMethod(buf.toString(), null, false, null);
                    //} catch (JavaModelException e) {
                        // TODO Auto-generated catch block
                        //e.printStackTrace();
                    //}
                    }
               IDialogSettings dialogSettings= getDialogSettings();
                if (dialogSettings != null) {
                    IDialogSettings section= dialogSettings.getSection(getFileName());
                    if (section == null) {
                    section= dialogSettings.addNewSection(getFileName());
            }
              }
            }
     });

     mrsButton.addListener (SWT.Selection, new Listener () {
            public void handleEvent (Event event) {
                final String lineDelim= "\n";
                if(mrsButton.getSelection() == true)
                {
                    System.out.println("type");
                    int dotLoc = getFileName().lastIndexOf('.');
                    String Name = getFileName().substring(0,dotLoc);
                    buf.append("Type "+Name);
                    buf.append("()");
                    buf.append(lineDelim);
                    buf.append("{");
                    buf.append(lineDelim);
                    buf.append("}");
                    buf.toString();
                    setContent(buf.toString()); 
                }
            }
        });

    initialize();
    dialogChanged();
    setControl(container);
}








/**
 * Tests if the current workbench selection is a suitable container to use.
 */

private void initialize() {
    if (selection != null &amp;&amp; selection.isEmpty() == false
            &amp;&amp; selection instanceof IStructuredSelection) {
        IStructuredSelection ssel = (IStructuredSelection) selection;
        if (ssel.size() &gt; 1)
            return;
        Object obj = ssel.getFirstElement();
        if (obj instanceof IResource) {
            IContainer container;
            if (obj instanceof IContainer)
                container = (IContainer) obj;
            else
                container = ((IResource) obj).getParent();
            containerText.setText(container.getFullPath().toString());
        }
    }
    fileText.setText("");
}

/**
 * Uses the standard container selection dialog to choose the new value for
 * the container field.
 */

private void handleBrowse() {
    ContainerSelectionDialog dialog = new ContainerSelectionDialog(
            getShell(), ResourcesPlugin.getWorkspace().getRoot(), false,
            "Select new file container");
    if (dialog.open() == ContainerSelectionDialog.OK) {
        Object[] result = dialog.getResult();
        if (result.length == 1) {
            containerText.setText(((Path) result[0]).toString());
        }
    }
}

/**
 * Ensures that both text fields are set.
 */

private void dialogChanged() {
    IResource container = ResourcesPlugin.getWorkspace().getRoot()
            .findMember(new Path(getContainerName()));
    String fileName = getFileName();

    if (getContainerName().length() == 0) {
        updateStatus("File container must be specified");
        return;
    }
    if (container == null
            || (container.getType() &amp; (IResource.PROJECT | IResource.FOLDER)) == 0) {
        updateStatus("File container must exist");
        return;
    }
    if (!container.isAccessible()) {
        updateStatus("Project must be writable");
        return;
    }
    if (fileName.length() == 0) {
        updateStatus("File name must be specified");
        return;
    }
    if (fileName.replace('\\', '/').indexOf('/', 1) &gt; 0) {
        updateStatus("File name must be valid");
        return;
    }
    int dotLoc = fileName.lastIndexOf('.');
    if (dotLoc != -1) {
        String ext = fileName.substring(dotLoc + 1);
        if (ext.equalsIgnoreCase("ej") == false) {
            updateStatus("File extension must be \"ej\"");
            return;
        }
    }
    updateStatus(null);
}

private void updateStatus(String message) {
    setErrorMessage(message);
    setPageComplete(message == null);
}

public String getContainerName() {
    return containerText.getText();
}

public String getFileName() {
    return fileText.getText();
}

} 
</code></pre>
