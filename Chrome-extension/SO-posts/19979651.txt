<p>The most straightforward way to do this is to simply have the <code>enum</code> itself implement <code>Comparator</code>:</p>

<pre><code>public enum SortBy implements Comparator&lt;Item&gt; {
    CATEGORY {
        @Override
        public final int compare(final Item o1, final Item o2) {
            return compareStrings(o1.getCategory(), o2.getCategory());
        }
    },
    ENGLISH {
        @Override
        public final int compare(final Item o1, final Item o2) {
            return compareStrings(o1.getEnglish(), o2.getEnglish());
        }
    },
    NORWEGIAN {
        @Override
        public final int compare(final Item o1, final Item o2) {
            return compareStrings(o1.getNorwegian(), o2.getNorwegian());
        }
    };

    private static int compareStrings(final String s1, final String s2) {
        if (s1 == null) {
            return s2 == null ? 0 : -1;
        }
        if (s2 == null) {
            return 1;
        }
        return s1.compareTo(s2);
    }
}
</code></pre>

<p>There's no need to further associate each enum member with a comparator because the enum members <strong>are</strong> the comparators.  The usage is then nice and concise:</p>

<pre><code>Collections.sort(items, SortBy.CATEGORY);
</code></pre>

<hr>

<p><strong>Addendum</strong></p>

<p>In the comments below, you asked about common, <code>null</code>-safe comparisons.  I'm not sure what third-party libraries might provide them, but you can implement them yourself easily enough.  Here's two from one of our internal libraries:</p>

<pre><code>static &lt;T extends Comparable&lt;? super T&gt;&gt; int compare(final T o1, final T o2) {
    if (o1 == null) {
        return o2 == null ? 0 : -1;
    }
    if (o2 == null) {
        return 1;
    }
    return o1.compareTo(o2);
}

@SuppressWarnings("unchecked")
static int compare(final Object a, final Object b) {
    if (a == b) {
        return 0;
    }

    if (a == null) {
        return -1;
    }

    if (b == null) {
        return 1;
    }

    final Class&lt;?&gt; aClass = a.getClass();
    final Class&lt;?&gt; bClass = b.getClass();

    if (Comparable.class.isInstance(a) &amp;&amp; aClass.isAssignableFrom(bClass)) {
        return ((Comparable&lt;Object&gt;)a).compareTo(b);
    }

    if (Comparable.class.isInstance(b) &amp;&amp; bClass.isAssignableFrom(aClass)) {
        return ((Comparable&lt;Object&gt;)b).compareTo(a);
    }

    throw new IllegalArgumentException("Values must be comparable.");
}
</code></pre>
