<p>Take A Look This Class.</p>

<p>It's Simple and Useful.</p>

<p>Original Author is Arno den Hond, Google it.</p>

<p>I redesign this Class.</p>

<pre><code>import android.content.Context; 
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Align;
import android.view.View;

/**
 * GraphView creates a scaled line or bar graph with x and y axis labels. 
 * @author Arno den Hond
 * @redesign Reinhard &amp; kimkmkm
 *
 */
public class GraphView extends View {

public static boolean BAR = true;
public static boolean LINE = false;

private Paint paint;
private float[] values;
private String[] horlabels;
private String[] verlabels;
private String title;
private boolean type;

/**
 *  Generate Graph
 *  Variable Array for GraphView
 *  verlabel : Background Height Values
 *  horlabel : Background Width Values
 *  values : Max Values of Foreground Active Graph
 *  
 *  basic draw rule
 *  if Array is not null
 *  Draw Background width, height &amp; active Graph all time
 *  or Array is null
 *  Draw Background width, height
 *  active Graph fixed 0
 *    
 */
public GraphView(Context context, float[] values, String title, String[] horlabels, String[] verlabels, boolean type) {
    super(context);
    if (values == null)
        values = new float[0];
    else
        this.values = values;
    if (title == null)
        title = "";
    else
        this.title = title;
    if (horlabels == null)
        this.horlabels = new String[0];
    else
        this.horlabels = horlabels;
    if (verlabels == null)
        this.verlabels = new String[0];
    else
        this.verlabels = verlabels;
    this.type = type;
    paint = new Paint();
}
/**
 *  Graph for Background
 *  &amp;
 *  Value for Background
 */
@Override
protected void onDraw(Canvas canvas) {
    float border = 20;
    float horstart = border * 2;
    float height = getHeight();
    float width = getWidth() - 1;
    float max = 700;
    float min = 0;
    float diff = max - min;
    float graphheight = height - (2 * border);
    float graphwidth = width - (2 * border);

    paint.setTextAlign(Align.LEFT); 
    /** vers : BackGround Height Values length*/
    int vers = verlabels.length - 1; 
    for (int i = 0; i &lt; verlabels.length; i++) {

        paint.setColor(Color.LTGRAY);
        // Width Line of background

        float y = ((graphheight / vers) * i) + border;
        // float y : ((getHeight / Height values length) * Height values length ) + 20

        canvas.drawLine(horstart, y, width, y, paint);
        // drawLine ( 40, y, getWidth()-1, y, paint)

        paint.setColor(Color.WHITE);
        // Left Height of background

        canvas.drawText(verlabels[i], 0, y, paint);
    }

    /** hors : BackGround width Values length*/
    int hors = horlabels.length - 1;
    for (int i = 0; i &lt; horlabels.length; i++) {
        // Height Line of background
        paint.setColor(Color.DKGRAY); 
        float x = ((graphwidth / hors) * i) + horstart;
        canvas.drawLine(x, height - border, x, border, paint);
        paint.setTextAlign(Align.CENTER);
        if (i==horlabels.length-1)
            paint.setTextAlign(Align.RIGHT);
        if (i==0)
            paint.setTextAlign(Align.LEFT);
         // Value of Width
        paint.setColor(Color.WHITE); 
        canvas.drawText(horlabels[i], x, height - 4, paint);
    }

    paint.setTextAlign(Align.CENTER);
    canvas.drawText(title, (graphwidth / 2) + horstart, border - 4, paint);

    /**
     * Yellow Line Graph
     * continue Repaint....
     * 
     */
    if (max != min) {
        paint.setColor(Color.YELLOW);
        if (type == BAR) {
            float datalength = values.length;
            float colwidth = (width - (10 * border)) / datalength;
            for (int i = 0; i &lt; values.length; i++) {
                float val = values[i] - min;

                float rat = val / diff;
                //diff : max - min

                float h = graphheight * rat;
                canvas.drawRect((i * colwidth) + horstart, (border - h) + graphheight, ((i * colwidth) + horstart) + (colwidth - 1), height - (border - 1), paint);
            }
        } else {
            float datalength = values.length;
            float colwidth = (width - (2 * border)) / datalength;
            float halfcol = colwidth / 2;
            float lasth = 0;
            for (int i = 0; i &lt; values.length; i++) {
                float val = values[i] - min;
                float rat = val / diff;
                float h = graphheight * rat;
                if (i &gt; 0)
                    canvas.drawLine(((i - 1) * colwidth) + (horstart + 1) + halfcol, (border - lasth) + graphheight, (i * colwidth) + (horstart + 1) + halfcol, (border - h) + graphheight, paint);
                lasth = h;
            }
        }
    }
}
</code></pre>
