<p>Implement your adapter Filterable:</p>

<pre><code>public class vJournalAdapter extends ArrayAdapter&lt;JournalModel&gt; implements Filterable{
private ArrayList&lt;JournalModel&gt; items;
private Context mContext;
....
</code></pre>

<p>then create your Filter class:</p>

<pre><code>private class JournalFilter extends Filter{

    @Override
    protected FilterResults performFiltering(CharSequence constraint) {
        FilterResults result = new FilterResults();
        List&lt;JournalModel&gt; allJournals = getAllJournals();
        if(constraint == null || constraint.length() == 0){

            result.values = allJournals;
            result.count = allJournals.size();
        }else{
            ArrayList&lt;JournalModel&gt; filteredList = new ArrayList&lt;JournalModel&gt;();
            for(JournalModel j: allJournals){
                if(j.source.title.contains(constraint))
                    filteredList.add(j);
            }
            result.values = filteredList;
            result.count = filteredList.size();
        }

        return result;
    }
    @SuppressWarnings("unchecked")
    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        if (results.count == 0) {
            notifyDataSetInvalidated();
        } else {
            items = (ArrayList&lt;JournalModel&gt;) results.values;
            notifyDataSetChanged();
        }
    }

}
</code></pre>

<p>this way, your adapter is Filterable, you can pass filter item to adapter's filter and do the   work.
I hope this will be helpful.</p>
