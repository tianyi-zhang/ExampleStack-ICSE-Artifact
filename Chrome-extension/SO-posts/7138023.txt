<p>it's Sunday, wheather detoriating, so couldn't resist to show the SwingX version. It's the same logic as @camickr 2nd, thanks :-)</p>

<p>Advantages:</p>

<ul>
<li>code can focus on <em>logic</em> as the value retrieving handles sorting/filtering/column moves automagically </li>
<li>knows about default ui alternate striping colors (and updates on switching the LAF)</li>
<li>Highlighter support is built-in, no need to subclass the table nor care about renderer misbehaviour</li>
<li>easy to add additional highlighters (yelling sell, sell, sell :-) </li>
</ul>

<p>The code snipped:</p>

<pre><code>JXTable table = new JXTable(data, columnNames);
HighlightPredicate predicate =  new HighlightPredicate() {

    @Override
    public boolean isHighlighted(Component renderer,
            ComponentAdapter adapter) {
        if (adapter.row == 0) return false;
        return isOddValue(adapter);
    }

    private boolean isOddValue(ComponentAdapter adapter) {
        Object previous = adapter.getFilteredValueAt(0, 7);
        boolean odd = false;
        for (int i = 1; i &lt;= adapter.row; i++) {
            Object current = adapter.getFilteredValueAt(i, 7);
            if (!previous.equals(current)) {
                odd = !odd;
            }
            previous = current;
        }
        return odd;
    }

};
table.addHighlighter(new UIColorHighlighter(predicate));
</code></pre>
