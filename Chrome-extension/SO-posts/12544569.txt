<p>Thanks for all your help. I will try the solution for extending the asyncTask class by Alex, sounds like a clean solution.</p>

<p>I managed to do what I was trying to by using an interface in the class with the AsyncTask and adding an event listener on the main class.
So my class that gets the content now looks like this:</p>

<pre><code>package com.example.test;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;

import android.os.AsyncTask;

public class URLContent {
public void getContent(String URL){
    new getAsyncContent().execute(URL);
}

public interface OnContentDownloadedListener{
    public abstract void onContentDownloaded(String content);
}
private OnContentDownloadedListener contentDownloadedListener = null;
public void setOnContentDownloadedListener(OnContentDownloadedListener content){
    contentDownloadedListener = content;
}

private class getAsyncContent extends AsyncTask&lt;String, Integer, String&gt;
{
    @Override
    protected void onPostExecute(String result) {
        contentDownloadedListener.onContentDownloaded(result);
    }

    @Override
    protected String doInBackground(String... urls) {
        try{
            return URLResponse(urls[0]);
        } catch (Exception e){
            return e.getMessage();
        }
    }
}

private String IStoString(InputStream stream) throws IOException, UnsupportedEncodingException {
    try {
        return new java.util.Scanner(stream, "UTF-8").useDelimiter("\\A").next();
    } catch (java.util.NoSuchElementException e) {
        return "";
    }
}

private String URLResponse(String URLToget) throws IOException {
    InputStream is = null;

    try {
        URL url = new URL(URLToget);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setReadTimeout(10000 /* milliseconds */);
        conn.setConnectTimeout(15000 /* milliseconds */);
        conn.setRequestMethod("GET");
        conn.setDoInput(true);
        conn.connect();
        is = conn.getInputStream();
        // Convert the InputStream into a string
        String contentAsString = IStoString(is);
        return contentAsString;
    } finally {
        if (is != null) {
            is.close();
        } 
    }
}
}
</code></pre>

<p>And then in my main class I just have an event listener that handles the update of the UI</p>

<pre><code>urlContent.setOnContentDownloadedListener(new URLContent.OnContentDownloadedListener(){
            public void onContentDownloaded(String content){
//update UI or do something with the data
}
</code></pre>
