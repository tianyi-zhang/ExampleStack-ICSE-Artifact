<p>Please try to get current location lat lng using this GPSTracker.java</p>



<pre class="lang-js prettyprint-override"><code>import android.app.Activity;
import android.app.AlertDialog;
import android.app.Service;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Address;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.provider.Settings;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;
import java.io.IOException;
import java.util.List;
import java.util.Locale;

public class GPSTracker extends Service implements LocationListener {

    private final Context mContext;
    boolean isGPSEnabled = false;// flag for GPS status
    boolean isNetworkEnabled = false;// flag for network status
    boolean canGetLocation = false;// flag for GPS status
    Location location; // location
    double latitude; // latitude
    double longitude; // longitude

    /* How many GeoCoder should return our GPSTracker */
    int geocoderMaxResults = 1;

    /* The minimum distance to change Updates in meters */
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters

    /* The minimum time between updates in milliseconds */
    private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute

    /* Declaring a Location Manager */
    protected LocationManager locationManager;

    public GPSTracker(Context context) {
        this.mContext = context;
        getLocation();
    }

    public Location getLocation() {
        try {
            locationManager = (LocationManager) mContext.getSystemService(LOCATION_SERVICE);

            /* getting GPS status */
            isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

            /* getting network status */
            isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

            if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {
                /* no network provider is enabled */
                //gpsEnableAlertDialog();
            } else {
                this.canGetLocation = true;
                /* First get location from Network Provider */
                if (isNetworkEnabled) {
                    locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME_BW_UPDATES,MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.d("Network", "Network");
                    if (locationManager != null) {
                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                        if (location != null) {
                            latitude = location.getLatitude();
                            longitude = location.getLongitude();
                        }
                    }
                }
                /* if GPS Enabled get LAT,LNG using GPS Services */
                if (isGPSEnabled) {
                    if (location == null) {
                        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MIN_TIME_BW_UPDATES,MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                        Log.d("GPS Enabled", "GPS Enabled");
                        if (locationManager != null) {
                            location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                            if (location != null) {
                                latitude = location.getLatitude();
                                longitude = location.getLongitude();
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return location;
    }

    /**
     * Stop using GPS listener Calling this function will stop using GPS in your
     * application
     * */
    public void stopUsingGPS() {
        if (locationManager != null) {
            locationManager.removeUpdates(GPSTracker.this);
        }
    }

    /**
     * Function to get latitude
     * */
    public double getLatitude() {
        if (location != null) {
            latitude = location.getLatitude();
        }

        return latitude;
    }

    /**
     * Function to get longitude
     * */
    public double getLongitude() {
        if (location != null) {
            longitude = location.getLongitude();
        }

        return longitude;
    }

    /**
     * Function to check GPS/WiFi enabled
     * 
     * @return boolean
     * */
    public boolean canGetLocation() {
        return this.canGetLocation;
    }

    /**
     * Function to show settings alert dialog On pressing Settings button will
     * launch Settings Options
     * */
    public void showSettingsAlert() {
        AlertDialog.Builder alertDialog = new AlertDialog.Builder(mContext);

        /* Setting Dialog Title */
        //alertDialog.setTitle("GPS is settings");

        /* Setting Dialog Message */
        alertDialog.setMessage("GPS is disabled in your device. Enable it?");

        /* On pressing Settings button */
        alertDialog.setPositiveButton("Enable GPS", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                mContext.startActivity(intent);
            }
        });

        /* on pressing cancel button */
        alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });

        /* Showing Alert Message */
        alertDialog.show();
    }


    /*
     * Close project which is open 
     * this sialog is used to disable all menu item
     */
    private void gpsEnableAlertDialog() {

        View view = LayoutInflater.from(mContext).inflate(R.layout.dialog_close_project, null);

        final NiftyDialogBuilder dialogBuilder = NiftyDialogBuilder.getInstance(mContext);
        dialogBuilder.isCancelableOnTouchOutside(true).withDuration(700).withEffect(Effectstype.Shake).setCustomView(view,mContext).show();

        TextView edt_searchitem_item = (TextView) view.findViewById(R.id.edt_searchitem_item);
        edt_searchitem_item.setText("GPS is disabled in your device. Enable it?");
        /*
         * Close project and disable all menu item
         */
        Button btn_closePrj_yes = (Button) view.findViewById(R.id.btn_closePrj_yes);
        btn_closePrj_yes.setText("Enable GPS");
        btn_closePrj_yes.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0) {
                dialogBuilder.cancel();
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                mContext.startActivity(intent);
                ((Activity)mContext).overridePendingTransition(R.anim.right_to_left_layout,R.anim.left_to_right_layout);
            }
        });


        /*
         * return same as previouse state
         */
        Button btn_close_prj_no = (Button) view.findViewById(R.id.btn_close_prj_no);
        btn_close_prj_no.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View arg0) {
                dialogBuilder.cancel();
            }
        });
    }

    @Override
    public void onLocationChanged(Location location) {
    }

    @Override
    public void onProviderDisabled(String provider) {
    }

    @Override
    public void onProviderEnabled(String provider) {
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {
    }

    @Override
    public IBinder onBind(Intent arg0) {
        return null;
    }

    /* Extra(Below method not use in application) */

    /**
     * Get list of address by latitude and longitude
     * 
     * @return null or List&lt;Address&gt;
     */
    public List&lt;Address&gt; getGeocoderAddress(Context context) {
        if (location != null) {

            Geocoder geocoder = new Geocoder(context, Locale.ENGLISH);

            try {
                /**
                 * Geocoder.getFromLocation - Returns an array of Addresses that
                 * are known to describe the area immediately surrounding the
                 * given latitude and longitude.
                 */
                List&lt;Address&gt; addresses = geocoder.getFromLocation(latitude, longitude, this.geocoderMaxResults);

                return addresses;
            } catch (IOException e) {
                Toast.makeText(context, "Internet connection not available", Toast.LENGTH_SHORT).show();
                Log.e("Error Msg:", "Impossible to connect to Geocoder", e);
            }
        }

        return null;
    }

    /**
     * Try to get AddressLine
     * 
     * @return null or addressLine
     */
    public String getAddressLine(Context context) {
        List&lt;Address&gt; addresses = getGeocoderAddress(context);

        if (addresses != null &amp;&amp; addresses.size() &gt; 0) {
            Address address = addresses.get(0);
            String addressLine = address.getAddressLine(0);

            return addressLine;
        } else {
            return null;
        }
    }

    /**
     * Try to get Locality
     * 
     * @return null or locality
     */
    public String getLocality(Context context) {
        List&lt;Address&gt; addresses = getGeocoderAddress(context);

        if (addresses != null &amp;&amp; addresses.size() &gt; 0) {
            Address address = addresses.get(0);
            String locality = address.getLocality();

            return locality;
        } else {
            return null;
        }
    }

    /**
     * Try to get Postal Code
     * 
     * @return null or postalCode
     */
    public String getPostalCode(Context context) {
        List&lt;Address&gt; addresses = getGeocoderAddress(context);

        if (addresses != null &amp;&amp; addresses.size() &gt; 0) {
            Address address = addresses.get(0);
            String postalCode = address.getPostalCode();

            return postalCode;
        } else {
            return null;
        }
    }

    /**
     * Try to get CountryName
     * 
     * @return null or postalCode
     */
    public String getCountryName(Context context) {
        List&lt;Address&gt; addresses = getGeocoderAddress(context);
        if (addresses != null &amp;&amp; addresses.size() &gt; 0) {
            Address address = addresses.get(0);
            String countryName = address.getCountryName();

            return countryName;
        } else {
            return null;
        }
    }
}
</code></pre>
