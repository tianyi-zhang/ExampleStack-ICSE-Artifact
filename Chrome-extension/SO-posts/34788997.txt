<p>Here is how I used it with custom layout</p>

<pre><code>AutoCompleteTextView tv_location = (AutoCompleteTextView) view.findViewById(R.id.tv_location);
    tv_location.setAdapter(new GooglePlacesAutocompleteAdapter(getActivity(), R.layout.list_item));
</code></pre>

<p>And this is the Adapter class</p>

<pre><code>class GooglePlacesAutocompleteAdapter extends ArrayAdapter implements Filterable {
    private ArrayList resultList;

    public GooglePlacesAutocompleteAdapter(Context context, int textViewResourceId) {
        super(context, textViewResourceId);
    }

    @Override
    public int getCount() {
        return resultList.size();
    }

    @Override
    public String getItem(int index) {
        String selectedtext = resultList.get(index).toString();
        bloodRequestBean.setAddress(selectedtext);
        return resultList.get(index).toString();
    }

    @Override
    public Filter getFilter() {
        Filter filter;
        filter = new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults filterResults = new FilterResults();
                if (constraint != null) {
                    // Retrieve the autocomplete results.
                    resultList = autocomplete(constraint.toString());

                    // Assign the data to the FilterResults
                    filterResults.values = resultList;
                    filterResults.count = resultList.size();
                }
                return filterResults;
            }

            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                if (results != null &amp;&amp; results.count &gt; 0) {
                    notifyDataSetChanged();
                } else {
                    notifyDataSetInvalidated();
                }
            }
        };
        return filter;
    }
}
</code></pre>

<p>And this the autocomplete method</p>

<pre><code>public ArrayList autocomplete(String input) {
    ArrayList results = new ArrayList&lt;&gt;();
    AppSharedPreference appSharedPreference;
    HttpURLConnection conn = null;
    StringBuilder jsonResults = new StringBuilder();
    appSharedPreference = AppSharedPreference.getsharedprefInstance(getActivity());
    try {

        StringBuilder sb = new StringBuilder(PLACES_API_BASE + TYPE_AUTOCOMPLETE + OUT_JSON);
        sb.append("?key=" + API_KEY);
        sb.append("&amp;location=" + appSharedPreference.getLatitude() + "," + appSharedPreference.getLongitude());
        sb.append("&amp;radius=50000");
        sb.append("&amp;components=country:in");
        // sb.append("&amp;types=hospital");
        sb.append("&amp;input=" + URLEncoder.encode(input, "utf8"));

        URL url = new URL(sb.toString());
        conn = (HttpURLConnection) url.openConnection();
        InputStreamReader in = new InputStreamReader(conn.getInputStream());

        // Load the results into a StringBuilder
        int read;
        char[] buff = new char[1024];
        while ((read = in.read(buff)) != -1) {
            jsonResults.append(buff, 0, read);
        }
    } catch (MalformedURLException e) {
        // Log.e(LOG_TAG, "Error processing Places API URL", e);
        return results;
    } catch (IOException e) {
        // Log.e(LOG_TAG, "Error connecting to Places API", e);
        return results;
    } finally {
        if (conn != null) {
            conn.disconnect();
        }
    }

    try {
        // Create a JSON object hierarchy from the results
        JSONObject jsonObj = new JSONObject(jsonResults.toString());
        JSONArray predsJsonArray = jsonObj.getJSONArray("predictions");

        // Extract the Place descriptions from the results
        results = new ArrayList(predsJsonArray.length());
        for (int i = 0; i &lt; predsJsonArray.length(); i++) {
            String name = predsJsonArray.getJSONObject(i).getString("description");

            //  String place_id=predsJsonArray.getJSONObject(i).getString("place_id");
            if (name.contains("hospitals") || name.contains("hospital") || name.contains("Hospitals") || name.contains("Hospital") || name.contains("Clinic") || name.contains("clinic")
                    || name.contains("Clinics") || name.contains("clinics") || name.contains("Medical") || name.contains("Medicals") || name.contains("medical") || name.contains("medicals") || name.contains("Blood Bank")
                    || name.contains("Maternity") || name.contains("maternity") || name.contains("Nursing") || name.contains("nursing"))
                results.add(predsJsonArray.getJSONObject(i).getString("description"));

        }
    } catch (JSONException e) {
        // Log.e(LOG_TAG, "Cannot process JSON results", e);
    }

    return results;
}
</code></pre>

<p>And this is the custom xml (though it only have single row)</p>

<pre><code>    &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:padding="10dp"
    android:id="@+id/tv_hospital" /&gt;
</code></pre>
