<p>I need to fulfil a similar requirements before where we need to format the number in thousands and also support fractions.</p>

<p>My approach is to register a <code>TextWatcher</code> format text every time input changed, and provide a public method to get numeric value by stripping separators, which is quite tricky. My solution also caters for locale-specific separator by utilizing <a href="http://developer.android.com/reference/java/text/DecimalFormatSymbols.html" rel="nofollow"><code>DecimalFormatSymbols</code></a> class.</p>

<pre><code>private final char GROUPING_SEPARATOR = DecimalFormatSymbols.getInstance().getGroupingSeparator();
private final char DECIMAL_SEPARATOR = DecimalFormatSymbols.getInstance().getDecimalSeparator();

...

/**
 * Return numeric value repesented by the text field
 * @return  numeric value or {@link Double.NaN} if not a number
 */
public double getNumericValue() {
    String original = getText().toString().replaceAll(mNumberFilterRegex, "");
    if (hasCustomDecimalSeparator) {
    // swap custom decimal separator with locale one to allow parsing
        original = StringUtils.replace(original,
                String.valueOf(mDecimalSeparator), String.valueOf(DECIMAL_SEPARATOR));
    }

    try {
        return NumberFormat.getInstance().parse(original).doubleValue();
    } catch (ParseException e) {
        return Double.NaN;
    }
}

/**
 * Add grouping separators to string
 * @param original  original string, may already contains incorrect grouping separators
 * @return  string with correct grouping separators
 */
private String format(final String original) {
    final String[] parts = original.split("\\" + mDecimalSeparator, -1);
    String number = parts[0] // since we split with limit -1 there will always be at least 1 part
            .replaceAll(mNumberFilterRegex, "")
            .replaceFirst(LEADING_ZERO_FILTER_REGEX, "");

    // only add grouping separators for non custom decimal separator
    if (!hasCustomDecimalSeparator) {
        // add grouping separators, need to reverse back and forth since Java regex does not support
        // right to left matching
        number = StringUtils.reverse(
                StringUtils.reverse(number).replaceAll("(.{3})", "$1" + GROUPING_SEPARATOR));
        // remove leading grouping separator if any
        number = StringUtils.removeStart(number, String.valueOf(GROUPING_SEPARATOR));
    }

    // add fraction part if any
    if (parts.length &gt; 1) {
        number += mDecimalSeparator + parts[1];
    }

    return number;
}
</code></pre>

<p>It's quite tedious to elaborate here so I'll only give a link for your own reading:
<a href="https://gist.github.com/hidroh/77ca470bbb8b5b556901" rel="nofollow">https://gist.github.com/hidroh/77ca470bbb8b5b556901</a></p>
