<p>You could create a reusable String[]  <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html" rel="nofollow">Comparator</a> you could specify which indexes to compare the arrays on:</p>

<pre><code>public class StringArrayComparator implements Comparator&lt;String[]&gt; {
  //we store the index to compare the arrays by in this instance variable
  private final int stringIndexToCompare;

  //constructor accepting the value for the index to check
  public StringArrayComparator(int whichString) {
    stringIndexToCompare=whichString;
  }

  @Override
  public int compare(String[] o1, String[] o2) {
    //checking if any of the arrays is null
    if(o1==null)      { return o2==null?0:1; } //if o1 is null, o2 determines the resuult
    else if(o2==null) { return -1; } //this only gets evaluated if o1 is not null

    //get the strings, by checking if the arrays are long enough
    String first = o1.length&gt;stringIndexToCompare?o1[stringIndexToCompare]:null;
    String second= o2.length&gt;stringIndexToCompare?o2[stringIndexToCompare]:null;

    //null checking the strings themselves -- basically same as above
    if(first==null)          { return second==null?0:1; }
    else if(second==null)    { return -1; }

    //if both non-null, compare them.
    return first.compareTo(second);
  }
}  
</code></pre>

<p>To be used on your list:</p>

<pre><code>Collections.sort(myList,new StringArrayComparator(3));
</code></pre>

<p>Note: the 3 specifies the index of the array to be compared.</p>

<p>You didn't specify the expected output of how the printed string should look, but just to print the list, you could use this oneliner:</p>

<pre><code>  System.out.println(Arrays.deepToString(a.toArray()));
</code></pre>

<p><strong>EDIT</strong></p>

<blockquote>
  <p>I would like to see something like Log.d("line number",column[0]+","+column<a href="http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html" rel="nofollow">1</a>+","+column[2]+...);</p>
</blockquote>

<p>Hey, that looks almost OK... Basically you only have to put it into a loop: this prints it line by line:</p>

<pre><code>int lineNo=0;
for(String[] line :myList) {
    StringBuilder sb = new StringBuilder();
    sb.append(++i); //line number, incrementing too

    //iterating through the elements of the array
    for(int col=0;col&lt;line.lenght;col++) {
        sb.append(",");
        if(line[col]!=null) {  //check for null....
            sb.append(line[col]);
        }
    }
    Log.d(sb.toString()); //append the value from the builder to the log.
}
</code></pre>

<p>To get it in one big string:</p>

<pre><code>int lineNo=0;
StringBuilder sb = new StringBuilder(); //create it here
for(String[] line :myList) {
    sb.append(++i); //line number, incrementing too

    //iterating through the elements of the array
    for(int col=0;col&lt;line.lenght;col++) {
        sb.append(",");
        if(line[col]!=null) {  //check for null....
            sb.append(line[col]);
        }
    }
    sb.append("\n"); //append line break
}
Log.d(sb.toString()); //append the value from the builder to the log.
</code></pre>

<p>Or, maybe it would be nicer (though slower) to use String.format() for this purpose,a s that offers better formatting:</p>

<pre><code> //assembly format string
 //if no line number was needed: String format = "";

 String format = "%d"; //line number, %d means integer
 for(int i=0;i&lt;7;i++) {
    format+=",%20s"; //%20s means left aligned, 20 wide string
 }
 format += "\n"; //line break;

 int lineNumber=0;
 for(String[] line:myArray) {
     //if you didn't need the line number, it would be so easy here
     //String.format(format,line); //one line, but this doesn't have the line number yet...

     //with line numbers:
     int iamLazyNow = 0;
     String formatted = String.format(format,++lineNumber, 
          line[iamLazyNow++], line[iamLazyNow++],
          line[iamLazyNow++], line[iamLazyNow++],
          line[iamLazyNow++], line[iamLazyNow++],
          line[iamLazyNow++]); //practically one line, but ugly

     //you can append formatted to a StringBuilder, or print it here...
 }
</code></pre>
