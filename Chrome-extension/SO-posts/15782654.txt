<p>If you want record the voice with clear clarity You should use the audio recorder...</p>

<p><strong>The audio recorder implementation as follows..</strong></p>

<pre><code>     public static int datacount=1;
     private static final int RECORDER_BPP = 16;
      private static final String AUDIO_RECORDER_FILE_EXT_WAV = ".wav";
      private static final String AUDIO_RECORDER_FOLDER = "/'/'";
      private static final String AUDIO_RECORDER_TEMP_FILE = "record_temp.raw";
      private static final int RECORDER_SAMPLERATE = 44100;
      private static final int RECORDER_CHANNELS = AudioFormat.CHANNEL_IN_STEREO;
      private static final int RECORDER_AUDIO_ENCODING = AudioFormat.ENCODING_PCM_16BIT;

      private AudioRecord recorder = null;
      private int bufferSize = 0;
      private Thread recordingThread = null;
      private boolean isRecording = false;
      int numCrossing,p;

      public int frequency;





      public static File myfile;

      private Context mcontext;



      public static String final_sound_path=null;

      Handler handler;



      public static  String filename;


      public Taukyrecorder(Context cntxt) {
        // TODO Auto-generated constructor stub
          mcontext=cntxt;
          handler=new Handler();

          wave=new Taukywave(mcontext);






            bufferSize = AudioRecord.getMinBufferSize(RECORDER_SAMPLERATE,RECORDER_CHANNELS,RECORDER_AUDIO_ENCODING);

            recorder = new AudioRecord(MediaRecorder.AudioSource.MIC,
                    RECORDER_SAMPLERATE, RECORDER_CHANNELS,RECORDER_AUDIO_ENCODING, bufferSize);



            recorder.setRecordPositionUpdateListener(new OnRecordPositionUpdateListener() {

                @Override
                public void onPeriodicNotification(AudioRecord recorder) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void onMarkerReached(AudioRecord recorder) {
                    // TODO Auto-generated method stub

                }
            }, handler);



    }






    //Get the file for saving sound into the folder
      public File GetFileTOwriteSound()
        {
            File tempPicFile=null;
            String ext_storage_state=Environment.getExternalStorageState();
            File mediaStorage=new File(Environment.getExternalStorageDirectory()+"/TAUKY/SOUNDS");
            if(ext_storage_state.equalsIgnoreCase(Environment.MEDIA_MOUNTED))
            {
                if(!mediaStorage.exists())
                {
                    mediaStorage.mkdirs();
                }else
                {
                    //do nothing
                }

                String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss")
                .format(new Date());
                tempPicFile = new File(mediaStorage.getPath() + File.separator
                        + "SOUND_" + timeStamp + ".wav");

            myfile=tempPicFile;

            }
            else
            {

                Toast.makeText(mcontext, "NO SDCARD MOUNTED", 1).show();

            }
            return tempPicFile;
        }







      public String getTempFilename(){
        String filepath = Environment.getExternalStorageDirectory().getPath();
        File file = new File(filepath,AUDIO_RECORDER_FOLDER);

        if(!file.exists()){
          file.mkdirs();
        }

        File tempFile = new File(filepath,AUDIO_RECORDER_TEMP_FILE);

        if(tempFile.exists())
          tempFile.delete();

        return (file.getAbsolutePath() + "/" + AUDIO_RECORDER_TEMP_FILE);
      }

      public void startRecording(){


        recorder.startRecording();

        isRecording = true;



        recordingThread = new Thread(new Runnable() {

          @Override
          public void run() {
            writedataToFile();
          }
        },"AudioRecorder Thread");

        recordingThread.start();
      }

      private void writedataToFile(){
        final byte data[] = new byte[bufferSize];


        filename = getTempFilename();
        FileOutputStream os = null;



        try {
          os = new FileOutputStream(filename);
        } catch (FileNotFoundException e) {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }







        if(null != os){
          while(isRecording){
            read = recorder.read(data, 0, bufferSize);


            wave.Updatewave(data);


//          new Thread(new Runnable() {
//              
//              @Override
//              public void run() {
//                  // TODO Auto-generated method stub
//                  
//                  for (int i = 0; i &lt; read; i++) {
//                      
//                      sum +=data [i] * data [i];
//                  }
//                  if (read&gt; 0) {
//                      final double amplitude = sum / read;
//                      //pb.setProgress((int) Math.sqrt(amplitude));
//                      
//                      wave.Updatewave(amplitude);
//                  }
//              
//                      
//                  
//              }
//          }).start();

            Log.i("recorder", "Recording");


            if(AudioRecord.ERROR_INVALID_OPERATION != read){
              try {
                os.write(data);




                //
              } catch (IOException e) {
                e.printStackTrace();
              }



              numCrossing=0; //initialize your number of zero crossings to 0
              for (p=0;p&lt;bufferSize/4;p+=4) {
                     if (data[p]&gt;0 &amp;&amp; data[p+1]&lt;=0) numCrossing++;
                      if (data[p]&lt;0 &amp;&amp; data[p+1]&gt;=0) numCrossing++;
                      if (data[p+1]&gt;0 &amp;&amp; data[p+2]&lt;=0) numCrossing++;
                      if (data[p+1]&lt;0 &amp;&amp; data[p+2]&gt;=0) numCrossing++;
                      if (data[p+2]&gt;0 &amp;&amp; data[p+3]&lt;=0) numCrossing++;
                      if (data[p+2]&lt;0 &amp;&amp; data[p+3]&gt;=0) numCrossing++;
                      if (data[p+3]&gt;0 &amp;&amp; data[p+4]&lt;=0) numCrossing++;
                      if (data[p+3]&lt;0 &amp;&amp; data[p+4]&gt;=0) numCrossing++;
                      }//for p

                for (p=(bufferSize/4)*4;p&lt;bufferSize-1;p++) {
                      if (data[p]&gt;0 &amp;&amp; data[p+1]&lt;=0) numCrossing++;
                      if (data[p]&lt;0 &amp;&amp; data[p+1]&gt;=0) numCrossing++;
                      }



      frequency=(8000/bufferSize)*(numCrossing/2);  // Set the audio Frequency to half the number of zero crossings, times the number of samples our buffersize is per second.



      handler.post(new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
             //view.setText("Frequency is"+frequency);

        }
    });

            }
          }

          try {
            os.close();
          } catch (IOException e) {
            e.printStackTrace();
          }
        }
      }

      public void stopRecording(){
          String getfilename=GetFileTOwriteSound().getAbsolutePath();
          final_sound_path=getfilename;
        if(null != recorder){
          isRecording = false;

          recorder.stop();
          recorder.release();

          recorder = null;
          recordingThread = null;
        }

        copyWaveFile(getTempFilename(),getfilename);
        deleteTempFile();
      }

      private void deleteTempFile() {
        File file = new File(getTempFilename());

        file.delete();
      }

      private void copyWaveFile(String inFilename,String outFilename){
        FileInputStream in = null;
        FileOutputStream out = null;
        long totalAudioLen = 0;
        long totalDataLen = totalAudioLen + 36;
        long longSampleRate = RECORDER_SAMPLERATE;
        int channels = 2;
        long byteRate = RECORDER_BPP * RECORDER_SAMPLERATE * channels/8;

        byte[] data = new byte[bufferSize];

        try {
          in = new FileInputStream(inFilename);
          out = new FileOutputStream(outFilename);
          totalAudioLen = in.getChannel().size();
          totalDataLen = totalAudioLen + 36;

          ///AppLog.logString("File size: " + totalDataLen);

          WriteWaveFileHeader(out, totalAudioLen, totalDataLen,
              longSampleRate, channels, byteRate);

          while(in.read(data) != -1){
            out.write(data);
          }

          in.close();
          out.close();
        } catch (FileNotFoundException e) {
          e.printStackTrace();
        } catch (IOException e) {
          e.printStackTrace();
        }
      }

      private void WriteWaveFileHeader(
          FileOutputStream out, long totalAudioLen,
          long totalDataLen, long longSampleRate, int channels,
          long byteRate) throws IOException {

        byte[] header = new byte[44];

        header[0] = 'R';  // RIFF/WAVE header
        header[1] = 'I';
        header[2] = 'F';
        header[3] = 'F';
        header[4] = (byte) (totalDataLen &amp; 0xff);
        header[5] = (byte) ((totalDataLen &gt;&gt; 8) &amp; 0xff);
        header[6] = (byte) ((totalDataLen &gt;&gt; 16) &amp; 0xff);
        header[7] = (byte) ((totalDataLen &gt;&gt; 24) &amp; 0xff);
        header[8] = 'W';
        header[9] = 'A';
        header[10] = 'V';
        header[11] = 'E';
        header[12] = 'f';  // 'fmt ' chunk
        header[13] = 'm';
        header[14] = 't';
        header[15] = ' ';
        header[16] = 16;  // 4 bytes: size of 'fmt ' chunk
        header[17] = 0;
        header[18] = 0;
        header[19] = 0;
        header[20] = 1;  // format = 1
        header[21] = 0;
        header[22] = (byte) channels;
        header[23] = 0;
        header[24] = (byte) (longSampleRate &amp; 0xff);
        header[25] = (byte) ((longSampleRate &gt;&gt; 8) &amp; 0xff);
        header[26] = (byte) ((longSampleRate &gt;&gt; 16) &amp; 0xff);
        header[27] = (byte) ((longSampleRate &gt;&gt; 24) &amp; 0xff);
        header[28] = (byte) (byteRate &amp; 0xff);
        header[29] = (byte) ((byteRate &gt;&gt; 8) &amp; 0xff);
        header[30] = (byte) ((byteRate &gt;&gt; 16) &amp; 0xff);
        header[31] = (byte) ((byteRate &gt;&gt; 24) &amp; 0xff);
        header[32] = (byte) (2 * 16 / 8);  // block align
        header[33] = 0;
        header[34] = RECORDER_BPP;  // bits per sample
        header[35] = 0;
        header[36] = 'd';
        header[37] = 'a';
        header[38] = 't';
        header[39] = 'a';
        header[40] = (byte) (totalAudioLen &amp; 0xff);
        header[41] = (byte) ((totalAudioLen &gt;&gt; 8) &amp; 0xff);
        header[42] = (byte) ((totalAudioLen &gt;&gt; 16) &amp; 0xff);
        header[43] = (byte) ((totalAudioLen &gt;&gt; 24) &amp; 0xff);

        out.write(header, 0, 44);
      }




}
</code></pre>
