<p>From the javadocs for <a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/JTable.html#setAutoCreateRowSorter%28boolean%29" rel="nofollow"><code>JTable</code></a>; the <code>setAutoCreateRowSorter</code> creates instances of <a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/table/TableRowSorter.html" rel="nofollow"><code>TableRowSorter</code></a> and from it's javadoc sorting works as follows</p>

<ol>
<li>If a <code>Comparator</code> has been specified for the column by the <code>setComparator</code> method, use it. </li>
<li>If the column class as returned by <code>getColumnClass</code> is <code>String</code>, use the <code>Comparator</code> returned by <code>Collator.getInstance()</code>. </li>
<li>If the column class implements <code>Comparable</code>, use a <code>Comparator</code> that invokes the <code>compareTo</code> method. </li>
<li>If a <code>TableStringConverter</code> has been specified, use it to convert the values to <code>String</code>s and then use the <code>Comparator</code> returned by <code>Collator.getInstance()</code>. </li>
<li>Otherwise use the <code>Comparator</code> returned by <code>Collator.getInstance()</code> on the results from calling <code>toString</code> on the objects. </li>
</ol>

<p>So if you want to change the default (5 in this case) you need to either</p>

<ol>
<li>Set a <code>Comparator</code>,</li>
<li>Implemenet <code>Comparable&lt;SomeCommonInterface&gt;</code> in your data objects or</li>
<li>Set a <code>TableStringConverter</code> to implement custom <code>toString</code> functionality</li>
</ol>

<p>Alternatively you could skip all that and implement a custom <a href="http://docs.oracle.com/javase/6/docs/api/javax/swing/RowSorter.html" rel="nofollow"><code>RowSorter</code></a> with your own custom sorting logic.</p>

<p><strong>EDIT</strong></p>

<p>From the OP's comments there is a mixed array of <code>Integer</code> and <code>String</code>.</p>

<p>There is no obvious way to compare a <code>Integer</code> to a <code>String</code> so you would need to decide on a rule, I will assume that rule is "number before string".</p>

<p>Now, either wrap all your data in a class that implements <code>Comparable</code> on <code>Object</code> and do your work there or implement a <code>Comparator&lt;Object&gt;</code>, set it on the table. In the compare method you would need to use <code>instaceof</code> to work out what you're comparing and compare them. The method would need to look something like:</p>

<pre><code>class MyClass implements Comparator&lt;Object&gt; {

    public int compare(Object o1, Object o2) {
        if (o1 == null &amp;&amp; o2 == null) {
            return 0;
        }
        if (o1 == null) {
            return 1;
        }
        if (o2 == null) {
            return -1;
        }
        if (o1 instanceof Integer &amp;&amp; o2 instanceof String) {
            return 1;
        }
        if (o1 instanceof String &amp;&amp; o2 instanceof Integer) {
            return -1;
        }
        if (o1 instanceof Integer &amp;&amp; o2 instanceof Integer) {
            return ((Integer) o1).compareTo((Integer) o2);
        }
        return o1.toString().compareTo(o2.toString());
    }
}
</code></pre>
