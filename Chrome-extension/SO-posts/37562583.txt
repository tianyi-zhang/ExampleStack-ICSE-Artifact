<p>As far as I know this problem doesn't occur on Nexus 5. I had to deal with it on a Nexus 5X and I lost some time trying(<a href="https://code.google.com/p/android/issues/detail?id=191210" rel="nofollow">Click here to see why</a>). As a big note, I can't guarantee that it's the best solution, but it fixed all the problems I had. To solve it I did something like this:</p>

<p>I created a class <code>CameraPreview extends SurfaceView</code> only to encapsulate all the preview initialisation in one place. Here is the constructor for that class:</p>

<pre><code> public CameraPreview(Context context, int screenRotation, Camera camera) {
    super(context);
    mCamera = camera;
    mScreenRotation = screenRotation;
    mHolder = getHolder();
    mHolder.addCallback(this);
    setFocusable(true);
    setFocusableInTouchMode(true);
}
</code></pre>

<p>To create the preview I used this: <code>mPreview = new CameraPreview(getContext(), screenRotation, mCamera);</code>, where <code>screenRotation</code> is <code>int screenRotation = getActivity().getWindowManager().getDefaultDisplay().getRotation();</code> 
When the <code>surfaceCreated</code> callback is called:</p>

<pre><code> public void surfaceCreated(SurfaceHolder holder) {
    try {
        mCamera.setPreviewDisplay(holder);
        setCameraDisplayOrientation(mScreenRotation, 0, mCamera);
</code></pre>

<p>Here,<code>0</code> comes from the cameraId (it might be different if you're using the front facing camera). And here is all the magic:</p>

<pre><code>public void setCameraDisplayOrientation(int screenRotation, int cameraId, Camera camera) {
    int rotation = getRotationAngle(screenRotation, cameraId);
    camera.setDisplayOrientation(rotation);
}

public static int getRotationAngle(int screenRotation, int cameraId) {
    Camera.CameraInfo info = new Camera.CameraInfo();
    android.hardware.Camera.getCameraInfo(cameraId, info);
    int degrees = 0;
    switch (screenRotation) {
        case Surface.ROTATION_0: degrees = 0; break;
        case Surface.ROTATION_90: degrees = 90; break;
        case Surface.ROTATION_180: degrees = 180; break;
        case Surface.ROTATION_270: degrees = 270; break;
    }

    int result;
    if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
        result = (info.orientation + degrees) % 360;
        result = (360 - result) % 360;  // compensate the mirror
    } else {  // back-facing
        result = (info.orientation - degrees + 360) % 360;
    }
    return result;
}
</code></pre>

<p>I hope that this will fix the problem, but before starting to write it, make sure that you read the link I provided to see why the problem takes place. Hope this will fix it for you too.</p>
