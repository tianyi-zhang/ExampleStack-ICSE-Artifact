<p>You might need to use the accelerometer to get a precise angle. the following was taken from Vogella:    </p>

<pre><code>public class SensorTestActivity extends Activity implements SensorEventListener {
  private SensorManager sensorManager;
  private boolean color = false;
  private View view;
  private long lastUpdate;


/** Called when the activity is first created. */

  @Override
  public void onCreate(Bundle savedInstanceState) {
    requestWindowFeature(Window.FEATURE_NO_TITLE);
    getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
        WindowManager.LayoutParams.FLAG_FULLSCREEN);

    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);
    view = findViewById(R.id.textView);
    view.setBackgroundColor(Color.GREEN);

    sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
    lastUpdate = System.currentTimeMillis();
  }

  @Override
  public void onSensorChanged(SensorEvent event) {
    if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
      getAccelerometer(event);
    }

  }

  private void getAccelerometer(SensorEvent event) {
    float[] values = event.values;
    // Movement
    float x = values[0];
    float y = values[1];
    float z = values[2];

    float accelationSquareRoot = (x * x + y * y + z * z)
        / (SensorManager.GRAVITY_EARTH * SensorManager.GRAVITY_EARTH);
    long actualTime = System.currentTimeMillis();
    if (accelationSquareRoot &gt;= 2) //
    {
      if (actualTime - lastUpdate &lt; 200) {
        return;
      }
      lastUpdate = actualTime;
      Toast.makeText(this, "Device was shuffed", Toast.LENGTH_SHORT)
          .show();
      if (color) {
        view.setBackgroundColor(Color.GREEN);

      } else {
        view.setBackgroundColor(Color.RED);
      }
      color = !color;
    }
  }

  @Override
  public void onAccuracyChanged(Sensor sensor, int accuracy) {

  }

  @Override
  protected void onResume() {
    super.onResume();
    // register this class as a listener for the orientation and
    // accelerometer sensors
    sensorManager.registerListener(this,
        sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER),
        SensorManager.SENSOR_DELAY_NORMAL);
  }

  @Override
  protected void onPause() {
    // unregister listener
    super.onPause();
    sensorManager.unregisterListener(this);
  }
} 
</code></pre>

<p>As for what angle to take, this might help:</p>

<blockquote>
  <p><strong>Azimuth</strong> (degrees of rotation around the z axis). This is the angle
  between magnetic north and the device's y axis. For example, if the
  device's y axis is aligned with magnetic north this value is 0, and if
  the device's y axis is pointing south this value is 180. Likewise,
  when the y axis is pointing east this value is 90 and when it is
  pointing west this value is 270.</p>
  
  <p><strong>Pitch</strong> (degrees of rotation around the x axis). This value is positive when the positive z axis rotates toward the positive y axis,
  and it is negative when the positive z axis rotates toward the
  negative y axis. The range of values is 180 degrees to -180 degrees.</p>
  
  <p><strong>Roll</strong> (degrees of rotation around the y axis). This value is positive when the positive z axis rotates toward the positive x axis,
  and it is negative when the positive z axis rotates toward the
  negative x axis. The range of values is 90 degrees to -90 degrees.</p>
</blockquote>

<p>Reference: <br />
<a href="http://www.vogella.com/tutorials/AndroidSensor/article.html" rel="nofollow">http://www.vogella.com/tutorials/AndroidSensor/article.html</a> <br />
<a href="http://developer.android.com/guide/topics/sensors/sensors_position.html" rel="nofollow">http://developer.android.com/guide/topics/sensors/sensors_position.html</a></p>
