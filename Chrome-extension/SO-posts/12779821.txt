<p>You have to first extract the urls from json in a array  and then use below code to load image as bitmap dynamically  using Async Task.</p>

<pre><code>Bitmap bm[]=new Bitmap[3];
ImageAdapter img;
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        bm[0]=null;
        bm[1]=null;
        bm[2]=null;


 InputStream is= getDataFromServer();
      String asd=getResponseFromStream(is);
      try {
        JSONObject jsn=new JSONObject(asd);
        JSONArray jd=jsn.getJSONArray("data");
        for(int i=0;i&lt;jd.length();i++)
        {
            JSONObject j_object=jd.getJSONObject(i);
            String url=j_object.getString("url");
            urls.add(url);
        }
    } catch (JSONException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }


       img=new ImageAdapter(this);
        GridView gridView = (GridView) findViewById(R.id.grid_view);        
        gridView.setAdapter(img);
        new  ImageDownloader().execute();
        gridView.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView&lt;?&gt; parent, View v,
                    int position, long id) {

                Intent i = new Intent(getApplicationContext(), FullImageActivity.class);
                i.putExtra("id", position);
                startActivity(i);
            }
        });

    }
    ProgressDialog prg;
    private class ImageDownloader extends AsyncTask&lt;Integer, Integer, String&gt;
    {
        @Override
        public void onPreExecute()
        {
            prg=ProgressDialog.show(LazyLoadActivity.this, null, 
                    "Loading...");
        }

        protected void onPostExecute(String result)
        {
            prg.hide();




        }
          protected void onProgressUpdate(Integer... progress) {
              img.notifyDataSetChanged();
             }
        protected String doInBackground(Integer... a)
        {
            for(int i=0;i&lt;3;i++)
            {
                bm[i]=downloadBitmap(urls[i]);
                this.publishProgress(i);
            }
            return "";
        }
    }
    public Integer[] mThumbIds = {
            R.drawable.ic_launcher, R.drawable.ic_launcher,
            R.drawable.ic_launcher
    };

    public class ImageAdapter extends BaseAdapter {
        private Context mContext;

        // Keep all Images in array

        // Constructor
        public ImageAdapter(Context c){
            mContext = c;
        }

        public int getCount() {
            return mThumbIds.length;
        }

        public Object getItem(int position) {
            return mThumbIds[position];
        }

        public long getItemId(int position) {
            return 0;
        }

        public View getView(int position, View convertView, ViewGroup parent) {         
            ImageView imageView = new ImageView(mContext);
            if(bm[position]==null)
            imageView.setImageResource(mThumbIds[position]);
            else
                imageView.setImageBitmap(bm[position]);
            imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
            imageView.setLayoutParams(new GridView.LayoutParams(70, 70));
            return imageView;
        }

        }
Bitmap downloadBitmap(String url) {

        final HttpClient client = new DefaultHttpClient();
        final HttpGet getRequest = new HttpGet(url);

        try {
            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) { 
                Log.w("ImageDownloader", "Error " + statusCode + " while retrieving bitmap from " + url); 
                return null;
            }

            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    inputStream = entity.getContent(); 
                    Bitmap bitmap = BitmapFactory.decodeStream(inputStream);
                    return bitmap;
                } finally {
                    if (inputStream != null) {
                        inputStream.close();  
                    }
                    entity.consumeContent();
                }
            }
        } catch (Exception e) {
            // Could provide a more explicit error message for IOException or IllegalStateException
            getRequest.abort();
            Log.e("ImageDownloader", "Error while retrieving bitmap from " + url);
        } finally {
            if (client != null) {
                //client.
            }
        }
        return null;
    }
</code></pre>
