<p>Im implementing swype in this way:</p>

<pre><code>public class MainActivity : Activity, GestureDetector.IOnGestureListener
{
private GestureDetector _gestureDetector;

public bool OnDown(MotionEvent e)
    {
        return false;
    }
    public bool OnFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)
    {
        bool result = false;
        int SWIPE_THRESHOLD = 80;
        int SWIPE_VELOCITY_THRESHOLD = 80;
        try
        {
            float diffY = e2.GetY() - e1.GetY();
            float diffX = e2.GetX() - e1.GetX();
            if (Math.Abs(diffX) &gt; Math.Abs(diffY))
            {
                if (Math.Abs(diffX) &gt; SWIPE_THRESHOLD &amp;&amp; Math.Abs(velocityX) &gt; SWIPE_VELOCITY_THRESHOLD)
                {
                    if (diffX &gt; 0)
                    {
                        //code for swipe right here

                    }
                    else
                    {
                        //code for swipe Left here

                    }
                }
            }
        }
        catch (Exception exception)
        {
            //exception.printStackTrace();
        }
        return result;
    }
    public void OnLongPress(MotionEvent e) {}
    public bool OnScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)
    {
        return false;
    }
    public void OnShowPress(MotionEvent e) {}
    public bool OnSingleTapUp(MotionEvent e)
    {
        return false;
    }
public override bool OnTouchEvent(MotionEvent e)
    {
        _gestureDetector.OnTouchEvent(e);
        return false;
    }

    protected override void OnCreate (Bundle bundle)
    {
        base.OnCreate (bundle);

        SetContentView (Resource.Layout.Main);
        _gestureDetector = new GestureDetector(this);

    }
}
</code></pre>

<p>For <code>ViewPager</code> you can overlap Pages with something like this <code>PageTransformation</code>:</p>

<pre><code>using System;

using Android.Views;
using Android.Support.V4.View;

namespace SomeName
{
public class SinkAndSlideTransformer : Java.Lang.Object, ViewPager.IPageTransformer
{
public void TransformPage(View view, float position)
{
if (position &lt; -1 || position &gt; 1) 
{
view.Alpha = 0; // The view is offscreen.
} 
else
{
view.Alpha = 1;

if (position &lt; 0) 
{
// 'Sink' the view if it's to the left.
// Scale the view.
view.ScaleX = 1 - Math.Abs (position);
view.ScaleY = 1 - Math.Abs (position);

// Set the translationX to keep the view in the middle.
view.TranslationX = view.Width * Math.Abs (position);
} 
}
}
}
}
</code></pre>

<p>Which will give this effect:<br>
 <a href="http://i.stack.imgur.com/bmH8K.gif" rel="nofollow"><img src="http://i.stack.imgur.com/bmH8K.gif" alt="enter image description here"></a>  </p>

<p>With this <code>Adapter</code>:</p>

<pre><code>using System;
using System.Collections.Generic;

using Android.App;
using Android.Content;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Android.OS;
using Android.Support.V4.View;

using Square.Picasso;

namespace StaffPro
{
public class SlideshowPagerAdapter : PagerAdapter
{
    List&lt;Uri&gt; _items = new List&lt;Uri&gt;();
    private readonly Activity _context;

    public SlideshowPagerAdapter (Activity context, List&lt;Uri&gt; items) : base()
    {
        _items = items;
        _context = context;
    }
    public override int Count 
    {
        get { return _items.Count; }
    }
    public override bool IsViewFromObject(View view, Java.Lang.Object _object) 
    {
        return view == ((RelativeLayout) _object);
    }
    public override Java.Lang.Object InstantiateItem(ViewGroup container, int position)
    {
        var view = LayoutInflater.From (container.Context).Inflate (Resource.Layout.SlideshowViewPager, container, false);
        ImageView imageView = view.FindViewById&lt;ImageView&gt; (Resource.Id.slideshowImageView);
        Picasso.With(_context).Load(_items [position].ToString()).Into(imageView);
        container.AddView(view);

        return view;
    }
    public override void DestroyItem(ViewGroup container, int position, Java.Lang.Object _object)
    {
        container.RemoveView((View)_object);
    }
}
}
</code></pre>

<p>And to call the viewpages and the adapter with something like this:</p>

<pre><code>var viewPagerAdapter = new SlideshowPagerAdapter(Activity, some_Uri_images);
        slideshowViewPager.Adapter = viewPagerAdapter;
        slideshowViewPager.SetPageTransformer (true, new SinkAndSlideTransformer ());
</code></pre>

<p>More Transformations you can find <a href="http://martynnw.blogspot.gr/2014/10/xamarin-android-viewpager.html" rel="nofollow">here.</a></p>

<p>Also keep in mind that the <code>ViewPager</code> has a method called <code>setPageMargin()</code>. This method can receive a negative value which will make the fragments/views to overlap each other.<br>
You can also use <code>view.Rotation</code> inside your Transformation code to implement the photo randomly dropped and overlapped effect you want.<br>
If you need to retain many images loaded and displayed check also <code>ViewPager.OffscreenPageLimit</code> it will override the default cache limit of storing pages for the next and previous item, be careful about high memory usage however.</p>
