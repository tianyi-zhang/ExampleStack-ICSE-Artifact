<p>To give you an idea of how you could convert a resultset into JSON, I added this class here. You use it like: jsonArr = ResultSetConverter.convert(result,"");</p>

<p>This is a very general class that can handle all sql data types, so pick what you need.</p>

<p><div class="snippet" data-lang="js" data-hide="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONException;

import java.sql.SQLException;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.TimeZone;

public class ResultSetConverter {
  public static final Calendar tzUTC = Calendar.getInstance(TimeZone.getTimeZone("UTC"));    

  public static JSONArray convert( ResultSet rs, String freitextlabel )
    throws SQLException, JSONException
  {
    JSONArray json = new JSONArray();
    ResultSetMetaData rsmd = rs.getMetaData();
   
    while(rs.next()) {
      int numColumns = rsmd.getColumnCount();
      JSONObject obj = new JSONObject();

      for (int i=1; i&lt;numColumns+1; i++) {
        String column_name = rsmd.getColumnName(i);

        if(rsmd.getColumnType(i)==java.sql.Types.ARRAY){
         obj.put(column_name, rs.getArray(column_name));
        }
        else if(rsmd.getColumnType(i)==java.sql.Types.BIGINT){
         obj.put(column_name, rs.getInt(column_name));
        }
        else if(rsmd.getColumnType(i)==java.sql.Types.BOOLEAN){
         obj.put(column_name, rs.getBoolean(column_name));
        }
        else if(rsmd.getColumnType(i)==java.sql.Types.BLOB){
            obj.put(column_name, rs.getBlob(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.DOUBLE){
            obj.put(column_name, rs.getDouble(column_name)); 
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.FLOAT){
            obj.put(column_name, rs.getFloat(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.INTEGER){
            obj.put(column_name, rs.getInt(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.NVARCHAR){
            obj.put(column_name, rs.getNString(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.VARCHAR){
            if (freitextlabel.length()&gt;0 &amp;&amp; column_name.equalsIgnoreCase("freitext"))
             obj.put(freitextlabel, rs.getString(column_name));
            else
             obj.put(column_name, rs.getString(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.TINYINT){
            obj.put(column_name, rs.getInt(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.SMALLINT){
            obj.put(column_name, rs.getInt(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.DATE){
            obj.put(column_name.concat("_js"), rs.getDate(column_name));
           }
           else if(rsmd.getColumnType(i)==java.sql.Types.TIMESTAMP){
           //obj.put(column_name.concat("_js"), rs.getTimestamp(column_name,tzUTC));  
            Timestamp ts = rs.getTimestamp(column_name,tzUTC);
           // obj.put (column_name, ts !=null ? new Date(ts.getTime)  : null); 
            obj.put(column_name.concat("_js"), ts != null ? new Date(ts.getTime()) : null);
           }
           else{
            obj.put(column_name, rs.getObject(column_name));
           }
         }

         json.put(obj);
       }

       return json;
     }
   }</code></pre>
</div>
</div>
</p>
