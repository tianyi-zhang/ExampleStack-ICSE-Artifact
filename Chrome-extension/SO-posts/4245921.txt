<p>why not simply wrap both streams at the very beginning of your method:</p>

<pre><code>i1 = new BufferedInputStream(i1);
i2 = new BufferedInputStream(i2);
</code></pre>

<p>Alternatively, you could simply try reading both streams into a buffer:</p>

<pre><code>public static boolean equals(InputStream i1, InputStream i2, int buf) throws IOException {
    try {
        // do the compare
        while (true) {
            byte[] b1 = new byte[buf];
            byte[] b2 = new byte[buf];

            int length = i1.read(b1);
            if (length == -1) {
                return i2.read(b2, 0, 1) == -1;
            }

            try {
                StreamUtils.readFully(i2, b2, 0, length);
            } catch (EOFException e) {
                // i2 is shorter than i1
                return false;
            }

            if (!ArrayUtils.equals(b1, b2, 0, length)) {
                return false;
            }
        }
    } finally {
        // simply close streams and ignore (log) exceptions
        StreamUtils.close(i1, i2);
    }
}

// StreamUtils.readFully(..) 
public static void readFully(InputStream in, byte[] b, int off, int len) throws EOFException, IOException {
    while (len &gt; 0) {
        int read = in.read(b, off, len);
        if (read == -1) {
            throw new EOFException();
        }
        off += read;
        len -= read;
    }
}

// ArrayUtils.equals(..)
public static boolean equals(byte[] a, byte[] a2, int off, int len) {
    if (off &lt; 0 || len &lt; 0 || len &gt; a.length - off || len &gt; a2.length - off) {
        throw new IndexOutOfBoundsException();
    } else if (len == 0) {
        return true;
    }

    if (a == a2) {
        return true;
    }
    if (a == null || a2 == null) {
        return false;
    }

    for (int i = off; i &lt; off + len; i++) {
        if (a[i] != a2[i]) {
            return false;
        }
    }

    return true;
}
</code></pre>

<p>EDIT: I've fixed my implementation now. That's how it looks like without DataInputStream or NIO. Code is <a href="https://github.com/molindo/molindo-utils" rel="nofollow">available at GitHub</a> or from <a href="https://oss.sonatype.org/content/repositories/snapshots/" rel="nofollow">Sonatype's OSS Snapshot Repository</a> Maven:</p>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;at.molindo&lt;/groupId&gt;
  &lt;artifactId&gt;molindo-utils&lt;/artifactId&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
