<p>While I do like regular expressions in general, for this kind of state-dependent tokenization I believe a simple parser (which in this case is much simpler than that word might make it sound) is probably a cleaner solution, in particular with regards to maintainability, e.g.:</p>

<pre><code>String input = "foo,bar,c;qual=\"baz,blurb\",d;junk=\"quux,syzygy\"";
List&lt;String&gt; result = new ArrayList&lt;String&gt;();
int start = 0;
boolean inQuotes = false;
for (int current = 0; current &lt; input.length(); current++) {
    if (input.charAt(current) == '\"') inQuotes = !inQuotes; // toggle state
    boolean atLastChar = (current == input.length() - 1);
    if(atLastChar) result.add(input.substring(start));
    else if (input.charAt(current) == ',' &amp;&amp; !inQuotes) {
        result.add(input.substring(start, current));
        start = current + 1;
    }
}
</code></pre>

<p>If you don't care about preserving the commas inside the quotes you could simplify this approach (no handling of start index, no <em>last character</em> special case) by replacing your commas in quotes by something else and then split at commas:</p>

<pre><code>String input = "foo,bar,c;qual=\"baz,blurb\",d;junk=\"quux,syzygy\"";
StringBuilder builder = new StringBuilder(input);
boolean inQuotes = false;
for (int currentIndex = 0; currentIndex &lt; builder.length(); currentIndex++) {
    char currentChar = builder.charAt(currentIndex);
    if (currentChar == '\"') inQuotes = !inQuotes; // toggle state
    if (currentChar == ',' &amp;&amp; inQuotes) {
        builder.setCharAt(currentIndex, ';'); // or '?', and replace later
    }
}
List&lt;String&gt; result = Arrays.asList(builder.toString().split(","));
</code></pre>
