<p>DecimalFormat can be used and I use it after I have multiplied the similarity by 100.The code is below and hope it will help you.</p>

<pre><code>import java.awt.Graphics;
import java.text.DecimalFormat;

import javax.swing.JFrame;

public class LevenshteinDistance {

    String hasilPersen;

    public String getHasilPersen() {
        return hasilPersen;
    }

    public void setHasilPersen(String hasilPersen) {
        this.hasilPersen = hasilPersen;
    }

    public LevenshteinDistance() {

    }

    public double similarity(String s1, String s2) {
        if (s1.length() &lt; s2.length()) { // s1 should always be bigger
            String swap = s1;
            s1 = s2;
            s2 = swap;
        }
        int bigLen = s1.length();
        if (bigLen == 0) {
            return 1.0; /* both strings are zero length */
        }

        return (bigLen - computeEditDistance(s1, s2))
                / (double) bigLen;
    }

    public int computeEditDistance(String s1, String s2) {
        s1 = s1.toLowerCase();
        s2 = s2.toLowerCase();

        int[] costs = new int[s2.length() + 1];
        for (int i = 0; i &lt;= s1.length(); i++) {
            int lastValue = i;
            for (int j = 0; j &lt;= s2.length(); j++) {
                if (i == 0) {
                    costs[j] = j;
                } else {
                    if (j &gt; 0) {
                        int newValue = costs[j - 1];
                        if (s1.charAt(i - 1) != s2.charAt(j - 1)) {
                            newValue = Math.min(Math.min(newValue, lastValue),
                                    costs[j]) + 1;
                        }
                        costs[j - 1] = lastValue;
                        lastValue = newValue;
                    }
                }
            }
            if (i &gt; 0) {
                costs[s2.length()] = lastValue;
            }
        }
        return costs[s2.length()];
    }

    public String printDistance(String s1, String s2) {

        double result = similarity(s1, s2);
        double times100 = result * 100;
        DecimalFormat decimalFormat = new DecimalFormat("0.00");
        Double formattedResult = Double.parseDouble(decimalFormat.format(times100));

        System.out.println("[Edit Distance]       " + s1 + " and " + s2 + " "
                + formattedResult + "%");
        return formattedResult + " % ";
    }

    public static void main(String[] args) {

        LevenshteinDistance lv = new LevenshteinDistance();

        lv.printDistance("841644761164234287878797", "841644487611642341");

    }
}
</code></pre>
