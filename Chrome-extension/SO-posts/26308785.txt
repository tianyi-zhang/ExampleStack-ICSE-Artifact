<p>USe this:</p>

<pre><code>System.out.println(findRecursiveD(s, c) + 1);
</code></pre>

<p>You need to add one, because the 5th position in the string is position 4.  The first position int eh string is numbered 0.   4 is the correct answer if you want the number of the position.  But if you want to count starting with 1, then you need to add one.</p>

<p>Also, you need to terminate searching when start == end.  You will run into bad problems is start+1 is greater than end, so you should test for, and avoid this situation.  When start == end, then after to verify that the character at position mid (== start == end) is not c, then check for this condition and return something special, like -1, or throw an exception.</p>

<pre><code>public static int binarySearch(char[] a, char c, int start, int end) {

  int mid = (start + end) / 2;
  if(a[mid] == c) {
      //now search for the 'last' character of that value
      while (mid+1&lt;a.length &amp;&amp; a[mid+1]==c) {
          mid++;
      }
      return mid;
  }
  else if (start==end) {
      //if no character of that value found
      return -1;
  }
  else if (a[mid] &lt; c) {
      return binarySearch(a, c, mid+1, end);
  }
  else {
      return binarySearch(a, c, start, mid);
  }
}
</code></pre>

<p>And remove the statement that adds a character into the string being searched.  I don't see why that overhead of adding in a value helps, and it seems like a bad coding practice to learn anyway to modify the search data before you search it.  </p>
