<p>Let's walk through the code:</p>

<p>In <code>javax.swing.AbstractButton</code> there is a method called <code>addActionListener</code> where the code is:</p>

<pre><code>public void addActionListener(ActionListener l) {
  listenerList.add(ActionListener.class, l);
}
</code></pre>

<p><code>listenerList</code> is defined in <code>javax.swing.JComponent</code> as:</p>

<pre><code>protected EventListenerList listenerList = new EventListenerList();
</code></pre>

<p>When an event occurs <code>fireActionPerformed</code> in javax.swing.AbstractButton is called. The code looks like:</p>

<pre><code>protected void fireActionPerformed(ActionEvent event) {
  // Guaranteed to return a non-null array
  Object[] listeners = listenerList.getListenerList();
  ActionEvent e = null;
  // Process the listeners last to first, notifying
  // those that are interested in this event
  for (int i = listeners.length-2; i&gt;=0; i-=2) {
    if (listeners[i]==ActionListener.class) {
      // Lazily create the event:
      if (e == null) {
        String actionCommand = event.getActionCommand();
        if(actionCommand == null) {
          actionCommand = getActionCommand();
        }
        e = new ActionEvent(AbstractButton.this,
            ActionEvent.ACTION_PERFORMED,
            actionCommand,
            event.getWhen(),
            event.getModifiers());
      }
      ((ActionListener)listeners[i+1]).actionPerformed(e);
    }
  }
}
</code></pre>

<p>The most important part is the last line that says:</p>

<pre><code>((ActionListener)listeners[i+1]).actionPerformed(e);
</code></pre>

<p>This is the line of code that calls your <code>actionPerformed()</code> method</p>
