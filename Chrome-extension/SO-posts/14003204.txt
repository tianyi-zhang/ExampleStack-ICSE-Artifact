<p><strong>UPDATE:</strong></p>

<p>Here is an example custom adapter that loads a custom layout and as long as you use this one in all of the list, they will behave the same way and will look the same, and to make it work you just need to define what you want to display and what type of object are you using.</p>

<p>CUSTOM ADAPTER: </p>

<pre><code>public class YourAdapter extends ArrayAdapter&lt;String&gt; {
    private final Context context;
    private List&lt;Object&gt; YourObjects;

    public YourAdapter(Context context, List&lt;Object&gt; YourObjects, List&lt;String&gt; headings) {
        super(context, R.layout.list_view_stories, headings);
        this.context = context;
        this.YourObjects = null != YourObjects ? YourObjects : new ArrayList&lt;Object&gt;();
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        /*Setup the things need it to inflate each row*/
        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        View rowView = inflater.inflate(R.layout.list_view_stories, parent, false);

        /*Retrieves the views for the heading and title from the layout*/
        TextView heading = (TextView) rowView.findViewById(R.id.title);
        TextView summary = (TextView) rowView.findViewById(R.id.summary);

        heading.setText(YourObjects.get(position).getHeading());
        summary.setText(YourObjects.get(position).getSummary());

        /*Returns the row with the content placed*/
        return rowView;

    }

} 
</code></pre>

<p>CUSTOM LAYOUT:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="20dip"
    android:background="@color/ligth_blue" &gt;

    &lt;TextView
        android:id="@+id/title"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="@string/heading"
        android:textColor="@color/black"
        android:textAppearance="?android:attr/textAppearanceLarge" /&gt;

    &lt;TextView
        android:id="@+id/summary"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:text="@string/summary"
        android:textColor="@color/white"
        android:textAppearance="?android:attr/textAppearanceSmall" /&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Change the color in the layout properties.</p>

<pre><code>android:textColor="@color/black"
</code></pre>

<p>and then you create a resource in your values folder, here is an example of some colors i use.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;

    &lt;color name="black"&gt;#000000&lt;/color&gt;
    &lt;color name="white"&gt;#ffffff&lt;/color&gt;
    &lt;color name="gray"&gt;#909090&lt;/color&gt;
    &lt;color name="ligth_blue"&gt;#2E9AFE&lt;/color&gt;

&lt;/resources&gt;
</code></pre>
