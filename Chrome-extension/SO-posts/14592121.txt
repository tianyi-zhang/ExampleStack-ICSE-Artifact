<p>I know this is an old topic but came across this issue today and we have been developing for quite some time so was not ready to go through all statics in our Content Provider Contract and change them, also because our content provider and DB are generated by the <a href="http://robotoworks.com/mechanoid-plugin/mechanoid-db/">Mechanoid Plugin for Eclipse</a> (Yes, I am also the author! :))</p>

<p>The solution I came up with was to add a static initializer to our generated contract that uses reflection to look up a class and use a static CONTENT_AUTHORITY field on that if it exists, if not fall back to a default:</p>

<pre><code>public class QuxContract  {
    public static final String CONTENT_AUTHORITY = initAuthority();

    private static String initAuthority() {
        String authority = "com.example.app.data.qux";

        try {

            ClassLoader loader = QuxContract.class.getClassLoader();

            Class&lt;?&gt; clz = loader.loadClass("com.example.app.data.QuxContentProviderAuthority");
            Field declaredField = clz.getDeclaredField("CONTENT_AUTHORITY");

            authority = declaredField.get(null).toString();
        } catch (ClassNotFoundException e) {} 
        catch (NoSuchFieldException e) {} 
        catch (IllegalArgumentException e) {
        } catch (IllegalAccessException e) {
        }

        return authority;
    }

    private static final Uri BASE_CONTENT_URI = Uri.parse("content://" + CONTENT_AUTHORITY);
// ...
</code></pre>

<p>Now in each project that links to the library project can provide their own authority:</p>

<pre><code>package com.example.app.data;

public class QuxContentProviderAuthority {
    public static final String CONTENT_AUTHORITY = "com.example.app.data.baz";
}
</code></pre>

<p>Also, do not forget to change the authority in your manifest also</p>
