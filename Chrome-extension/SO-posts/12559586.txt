<p>This is a synchronous loading.(Personally I would not use this cause if there are so many Image to be loaded, the apps is a bit laggy)..</p>

<pre><code>URL url = new URL(//your URL);
Bitmap bmp = BitmapFactory.decodeStream(url.openConnection().getInputStream());
imageView.setImageBitmap(bmp);//your imageview
</code></pre>

<p>If I were you I would study Async or the lazy adapter..</p>

<p><strong>EDIT</strong>
I forgot where I got these code (well thank you for a wonderful code author)</p>

<p>Here it is</p>

<pre><code>  public Bitmap getBitmap(String bitmapUrl) {
      try {
        URL url = new URL(bitmapUrl);
        return BitmapFactory.decodeStream(url.openConnection().getInputStream()); 
      }
      catch(Exception ex) {return null;}
    }

    public enum BitmapManager {
    INSTANCE;

    private final Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; cache;
    private final ExecutorService pool;
    private Map&lt;ImageView, String&gt; imageViews = Collections
            .synchronizedMap(new WeakHashMap&lt;ImageView, String&gt;());
    private Bitmap placeholder;

    BitmapManager() {
        cache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();
        pool = Executors.newFixedThreadPool(5);
    }

    public void setPlaceholder(Bitmap bmp) {
        placeholder = bmp;
    }

    public Bitmap getBitmapFromCache(String url) {
        if (cache.containsKey(url)) {
            return cache.get(url).get();
        }

        return null;
    }

    public void queueJob(final String url, final ImageView imageView,
            final int width, final int height) {
        /* Create handler in UI thread. */
        final Handler handler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                String tag = imageViews.get(imageView);
                if (tag != null &amp;&amp; tag.equals(url)) {
                    if (msg.obj != null) {
                        imageView.setImageBitmap((Bitmap) msg.obj);
                    } else {
                        imageView.setImageBitmap(placeholder);
                        Log.d(null, "fail " + url);
                    }
                }
            }
        };

        pool.submit(new Runnable() {

            public void run() {
                final Bitmap bmp = downloadBitmap(url, width, height);
                Message message = Message.obtain();
                message.obj = bmp;
                Log.d(null, "Item downloaded: " + url);

                handler.sendMessage(message);
            }
        });
    }

    public void loadBitmap(final String url, final ImageView imageView,
            final int width, final int height) {
        imageViews.put(imageView, url);
        Bitmap bitmap = getBitmapFromCache(url);


        // check in UI thread, so no concurrency issues
        if (bitmap != null) {
            Log.i("inh","Item loaded from cache: " + url);
            imageView.setImageBitmap(bitmap);
        } else {
            imageView.setImageBitmap(placeholder);
            queueJob(url, imageView, width, height);
        }
    }

    private Bitmap downloadBitmap(String url, int width, int height) {
        try {
            Bitmap bitmap = BitmapFactory.decodeStream((InputStream) new URL(
                    url).getContent());

            bitmap = Bitmap.createScaledBitmap(bitmap, width, height, true);
            Log.i("nandi2 ako", ""+bitmap);
            cache.put(url, new SoftReference&lt;Bitmap&gt;(bitmap));
            return bitmap;
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return null;
    }
</code></pre>

<p>}</p>

<p>Now to call it</p>

<pre><code>String fbAvatarUrl = "//Your URL";

    BitmapManager.INSTANCE.loadBitmap(fbAvatarUrl, //Your ImageView, 60,60);
            //60 60 is my desired height and width 
</code></pre>
