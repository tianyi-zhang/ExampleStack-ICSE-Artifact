<p>I solved this problem by </p>

<pre><code>private void downloadImagesToSdCard(String downloadUrl,String imageName)
{
    try{
        URL url = new URL(downloadUrl); //you can write here any link

        File myDir =  new File("/sdcard"+"/"+Constants.imageFolder);
        //Something like ("/sdcard/file.mp3")


        if(!myDir.exists()){
            myDir.mkdir();
            Log.v("", "inside mkdir");

        }

        Random generator = new Random();
        int n = 10000;
        n = generator.nextInt(n);
        String fname = imageName;
        File file = new File (myDir, fname);
        if (file.exists ()) file.delete (); 

             /* Open a connection to that URL. */
            URLConnection ucon = url.openConnection();
            InputStream inputStream = null;
           HttpURLConnection httpConn = (HttpURLConnection)ucon;
          httpConn.setRequestMethod("GET");
          httpConn.connect();

          if (httpConn.getResponseCode() == HttpURLConnection.HTTP_OK) {
           inputStream = httpConn.getInputStream();
          }

            /*
             * Define InputStreams to read from the URLConnection.
             */
           // InputStream is = ucon.getInputStream();
            /*
             * Read bytes to the Buffer until there is nothing more to read(-1).
             */

            FileOutputStream fos = new FileOutputStream(file);
            int size = 1024*1024;
            byte[] buf = new byte[size];
            int byteRead;
            while (((byteRead = inputStream.read(buf)) != -1)) {
                fos.write(buf, 0, byteRead);
                bytesDownloaded += byteRead;
            }
            /* Convert the Bytes read to a String. */

            fos.close();

    }catch(IOException io)
    {
        networkException = true;
        continueRestore = false;
    }
    catch(Exception e)
    {   
        continueRestore = false;
        e.printStackTrace();
    }
}
</code></pre>

<p>Thanks for reply......</p>
