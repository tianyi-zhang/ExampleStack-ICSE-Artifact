<p>Try using java.net.URLEncoder.encode(valueToEncode, "UTF-8");</p>

<p>It's been a while since I've looked at the details, but I believe you have to call encode() on the individual parts of the string before you concatenate them.  </p>

<p>The utility method below has been working well for me:</p>

<pre><code>    /**
     * Given a {@link Map} of keys and values, this method will return a string
     * that represents the key-value pairs in
     * 'application/x-www-form-urlencoded' MIME format.
     * 
     * @param keysAndValues
     *            the keys and values
     * @return the data in 'application/x-www-form-urlencoded' MIME format
     */
    private String wwwFormUrlEncode(Map&lt;String, String&gt; keysAndValues) {
        try {
            StringBuilder sb = new StringBuilder();
            boolean isFirstEntry = true;
            for (Map.Entry&lt;String, String&gt; argument : keysAndValues.entrySet()) {
                if (isFirstEntry) {
                    isFirstEntry = false;
                } else {
                    sb.append("&amp;");
                }
                sb.append(URLEncoder.encode(argument.getKey(), "UTF-8"));
                sb.append("=");
                sb.append(URLEncoder.encode(argument.getValue(), "UTF-8"));
            }
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            //it is unlikely that the system does not support UTF-8 encoding, 
            //so we will not bother polluting the method's interface with a checked exception
            throw new RuntimeException(e); 
        }
    }
</code></pre>
