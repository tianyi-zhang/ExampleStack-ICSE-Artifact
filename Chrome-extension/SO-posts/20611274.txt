<p>You could use a regular expression to parse the full file (Java 7):</p>

<pre><code>import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Test {

    public static &lt;K, V extends Comparable&lt;? super V&gt;&gt; Map&lt;K, V&gt;
    sortByValueDescending( Map&lt;K, V&gt; map )
    {
        List&lt;Map.Entry&lt;K, V&gt;&gt; list =
                new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;( map.entrySet() );
        Collections.sort( list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;()
        {
            public int compare( Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2 )
            {
                return (o2.getValue()).compareTo( o1.getValue() );
            }
        } );

        Map&lt;K, V&gt; result = new LinkedHashMap&lt;K, V&gt;();
        for (Map.Entry&lt;K, V&gt; entry : list)
        {
            result.put( entry.getKey(), entry.getValue() );
        }
        return result;
    }

    static String readFile(String path, Charset encoding)
            throws IOException
    {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return encoding.decode(ByteBuffer.wrap(encoded)).toString();
    }

    public static void main(String[] args) throws IOException
    {
        //String sourceString = readFile(args[1], Charset.defaultCharset());
        String sourceString = "Dec. 14, 2013, 2:31 a.m.     Tip from rs\n" +
                "25  24986\n" +
                "Dec. 14, 2013, 2:27 a.m.     Tip from ro\n" +
                "100 24961\n" +
                "Dec. 14, 2013, 2:27 a.m.     Tip from rs\n" +
                "15  24861\n" +
                "Dec. 14, 2013, 2:25 a.m.     Tip from da\n" +
                "3   24846";

        Pattern re = Pattern.compile("^[\\w]{3}\\.\\s\\d{1,2},\\s\\d{4},\\s\\d{1,2}:\\d{2}\\s[ap]\\.m\\.\\s+Tip\\sfrom\\s(\\w+)\\s*^(\\d+)\\s+\\d+\\s*"
                ,Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);

        Map&lt;String,Integer&gt; tips = new HashMap&lt;String, Integer&gt;();

        Matcher m = re.matcher(sourceString);
        while (m.find()){
            String server = m.group(1);
            Integer tip = Integer.parseInt(m.group(2));

            Integer serverTips = tips.get(server);
            if(serverTips == null) serverTips = 0;
            serverTips +=  tip;

            tips.put(server, serverTips);
        }

        Map&lt;String,Integer&gt; sortedTips = sortByValueDescending(tips);
        for(Map.Entry&lt;String,Integer&gt; entry : sortedTips.entrySet())
        {
            System.out.println(entry.getKey()+"="+ entry.getValue());
        }
    }
}
</code></pre>

<p>Output:</p>

<pre><code>ro=100
rs=40
da=3
</code></pre>

<p>You can replace <code>args[1]</code> with the path to your file and change the encoding if you do not use the default encoding.</p>
