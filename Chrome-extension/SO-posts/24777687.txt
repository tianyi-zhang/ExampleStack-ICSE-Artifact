<h2>Better solution for Java 7 and newer</h2>

<p>I stumbled upon this question and realized that some of the answers are pretty old and outdated. Nowadays, JList is generic and thus there are better solutions.</p>

<p>My solution of the generic JCheckBoxList:</p>

<pre><code>import java.awt.Component;

import javax.swing.*;
import javax.swing.border.*;

import java.awt.event.*;

@SuppressWarnings("serial")
public class JCheckBoxList extends JList&lt;JCheckBox&gt; {
  protected static Border noFocusBorder = new EmptyBorder(1, 1, 1, 1);

  public JCheckBoxList() {
    setCellRenderer(new CellRenderer());
    addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent e) {
        int index = locationToIndex(e.getPoint());
        if (index != -1) {
          JCheckBox checkbox = (JCheckBox) getModel().getElementAt(index);
          checkbox.setSelected(!checkbox.isSelected());
          repaint();
        }
      }
    });
    setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  }

  public JCheckBoxList(ListModel&lt;JCheckBox&gt; model){
    this();
    setModel(model);
  }

  protected class CellRenderer implements ListCellRenderer&lt;JCheckBox&gt; {
    public Component getListCellRendererComponent(
        JList&lt;? extends JCheckBox&gt; list, JCheckBox value, int index,
        boolean isSelected, boolean cellHasFocus) {
      JCheckBox checkbox = value;

      //Drawing checkbox, change the appearance here
      checkbox.setBackground(isSelected ? getSelectionBackground()
          : getBackground());
      checkbox.setForeground(isSelected ? getSelectionForeground()
          : getForeground());
      checkbox.setEnabled(isEnabled());
      checkbox.setFont(getFont());
      checkbox.setFocusPainted(false);
      checkbox.setBorderPainted(true);
      checkbox.setBorder(isSelected ? UIManager
          .getBorder("List.focusCellHighlightBorder") : noFocusBorder);
      return checkbox;
    }
  }
}
</code></pre>

<p>For dynamically adding JCheckBox lists you need to create your own ListModel or add the DefaultListModel.</p>

<pre><code>DefaultListModel&lt;JCheckBox&gt; model = new DefaultListModel&lt;JCheckBox&gt;();
JCheckBoxList checkBoxList = new JCheckBoxList(model);
</code></pre>

<p>The <a href="http://docs.oracle.com/javase/7/docs/api/javax/swing/DefaultListModel.html" rel="nofollow">DefaultListModel</a> are generic and thus you can use methods specified by JAVA 7 API <a href="http://docs.oracle.com/javase/7/docs/api/javax/swing/DefaultListModel.html" rel="nofollow">here</a> like this:</p>

<pre><code>model.addElement(new JCheckBox("Checkbox1"));
model.addElement(new JCheckBox("Checkbox2"));
model.addElement(new JCheckBox("Checkbox3"));
</code></pre>
