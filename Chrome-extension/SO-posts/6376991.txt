<p>The package <code>java.awt.datatransfer</code> seems to be a solution, <a href="http://www.jguru.com/faq/view.jsp?EID=39779" rel="nofollow">according to this article</a>. Here is <a href="http://www.javapractices.com/topic/TopicAction.do?Id=82" rel="nofollow">another article</a>.</p>

<p>From the latter page, the needed imports:</p>

<pre><code>import java.awt.datatransfer.*;
import java.awt.Toolkit;
</code></pre>

<p>And the method code is below. The solution is to create a listener and add it to the button. The listener should simply get the contents of the clipboard and insert it to whatever component you wish.</p>

<pre><code>public void setClipboardContents( String aString ){
  StringSelection stringSelection = new StringSelection( aString );
  Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
  clipboard.setContents( stringSelection, this );
}

public String getClipboardContents() {
  String result = "";
  Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
  //odd: the Object param of getContents is not currently used
  Transferable contents = clipboard.getContents(null);
  boolean hasTransferableText =
    (contents != null) &amp;&amp;
    contents.isDataFlavorSupported(DataFlavor.stringFlavor)
  ;
  if ( hasTransferableText ) {
    try {
      result = (String)contents.getTransferData(DataFlavor.stringFlavor);
    }
    catch (UnsupportedFlavorException ex){
      //highly unlikely since we are using a standard DataFlavor
      System.out.println(ex);
      ex.printStackTrace();
    }
    catch (IOException ex) {
      System.out.println(ex);
      ex.printStackTrace();
    }
  }
  return result;
}
</code></pre>
