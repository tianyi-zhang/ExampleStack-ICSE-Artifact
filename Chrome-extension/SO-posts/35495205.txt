<p>Ok. I fixed this. It was too expensive to migrate whole project to gson, so I borrowed some code from never JSONObject version and made a static copy method.</p>

<p>This is a static method:</p>

<pre><code>public class JSONCopy extends JSONObject {

    public static JSONObject hashMap2JSONObject(Map copyFrom) throws JSONException {
        JSONObject newJson = new JSONObject();
        Map&lt;?, ?&gt; contentsTyped = (Map&lt;?, ?&gt;) copyFrom;
        for (Map.Entry&lt;?, ?&gt; entry : contentsTyped.entrySet()) {
            String key = (String) entry.getKey();
            if (key == null) {
                throw new NullPointerException("key == null");
            }
            newJson.put(key, wrap(entry.getValue()));
        }

        return newJson;
    }

    public static Object getJSONArray(Object o) throws JSONException {
        JSONArray newValue = new JSONArray();
        if (!o.getClass().isArray()) {
            throw new JSONException("Not a primitive array: " + o.getClass());
        }
        final int length = Array.getLength(o);
        for (int i = 0; i &lt; length; ++i) {
            newValue.put(wrap(Array.get(o, i)));
        }

        return newValue;
    }

    public static Object wrap(Object o) {
        if (o == null) {
            return NULL;
        }
        if (o instanceof JSONArray || o instanceof JSONObject) {
            return o;
        }
        if (o.equals(NULL)) {
            return o;
        }
        try {
            if (o instanceof Collection) {
                return new JSONArray((Collection) o);
            } else if (o.getClass().isArray()) {
                return getJSONArray(o);
            }
            if (o instanceof Map) {
                return hashMap2JSONObject((Map) o);
            }
            if (o instanceof Boolean ||
                    o instanceof Byte ||
                    o instanceof Character ||
                    o instanceof Double ||
                    o instanceof Float ||
                    o instanceof Integer ||
                    o instanceof Long ||
                    o instanceof Short ||
                    o instanceof String) {
                return o;
            }
            if (o.getClass().getPackage().getName().startsWith("java.")) {
                return o.toString();
            }
        } catch (Exception ignored) {
        }
        return null;
    }
}
</code></pre>

<p>This is a test:</p>

<pre><code>    public static void testCopy() {
        HashMap&lt;String, Object&gt; hash1 = new HashMap&lt;String, Object&gt;() {{
            put("key1", "value1");
            put("key2", 2000);
        }};

        HashMap&lt;String, Object&gt; hash2 = new HashMap&lt;String, Object&gt;() {{
            put("key31", "value31");
            put("key32", 3200);
        }};

        HashMap&lt;String, Object&gt; hash3 = new HashMap&lt;String, Object&gt;() {{
            put("key41", "value41");
            put("key42", 4200);
            put("key43", true);
        }};

        HashMap&lt;String, Object&gt; hash4 = new HashMap&lt;String, Object&gt;() {{
            put("key51", "value51");
            put("key52", 5200);
            put("key53", true);
        }};

        hash3.put("hashKey4", hash4);
        hash2.put("hashKey3", hash3);
        hash1.put("hashKey2", hash2);

        try {
            JSONObject json = hashMap2JSONObject(hash1);
            String jsonString = json.toString();
            Log.d("testCopy()", jsonString);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
</code></pre>

<p>This is result (tested on 4.0, 4.1, 4.2, 5.1):</p>

<pre><code>D/testCopy(): {"hashKey2":{"key31":"value31","key32":3200,
"hashKey3":{"key42":4200,"key41":"value41","key43":true,
"hashKey4":{"key51":"value51","key53":true,"key52":5200}}},
"key2":2000,"key1":"value1"}
</code></pre>
