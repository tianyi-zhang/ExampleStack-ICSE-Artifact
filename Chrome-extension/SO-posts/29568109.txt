<pre><code>public void setupLogo(){
  Bitmap bmp = createBitmap();
  //YOU CAN CHANGE THIS TO A BUTTON, AND SET IMAGE FOR THE BUTTON
  ImageView imageView = (ImageView) R.id.imageViewFromLayout;
  imageView.setImageBitmap(bmp);
}

public Bitmap createBitmap(){

 BitmapFactory.Options options2 = new BitmapFactory.Options();                      
 options2.inJustDecodeBounds = true;
 //YOU CAN CHANGE THIS TO DECODE RESOURCE
 BitmapFactory.decodeFile(Main.this.getExternalFilesDir(filepath) +"/companylogo.png",options2);
 options2.inSampleSize = calculateInSampleSize();//=32
 options2.inJustDecodeBounds = false;
 //YOU CAN CHANGE THIS TO DECODE RESOURCE
 return BitmapFactory.decodeFile(Main.this.getExternalFilesDir(filepath) +"/companylogo.png",options2);
}

public int calculateInSampleSize() {

 DisplayMetrics displayMetrics = Main.this.getResources().getDisplayMetrics();
 int reqWidth = displayMetrics.widthPixels;
 //WILL OUTPUT THE IMAGE AT 100x100 PIXELS                      
 final int height = 100;
 final int width = 100;

 double devCal2 =  (height*1000)/width;
 int reqHeight = (int) ((devCal2/1000)*reqWidth); 

 int inSampleSize = 1;

 if (height &gt; reqHeight || width &gt; reqWidth) {

  final int halfHeight = height / 2;
  final int halfWidth = width / 2;

  // Calculate the largest inSampleSize value that is a power of 2 and keeps both
  // height and width larger than the requested height and width.
  while ((halfHeight / inSampleSize) &gt; reqHeight &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
   inSampleSize *= 2;
  }
 }
 return inSampleSize;
}
</code></pre>

<p>Call setupLogo(); to setup the bmp and then assign it to the ImageView or button</p>
