<pre><code>if (gps_enabled)
    {
     locMan.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,
            locatioListnerGps);
     locMan.removeUpdates( locationListenerNetwork);
    }
    if(network_enabled){
     locMan.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0,
             locationListenerNetwork);
     locMan.removeUpdates( locatioListnerGps);
 }
</code></pre>

<p>Check your code first. Why are you removing updates here?</p>

<p>To start a service on BOOT please add in manifest:</p>

<pre><code>&lt;uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" /&gt;
</code></pre>

<p><a href="http://stackoverflow.com/questions/5051687/broadcastreceiver-not-receiving-boot-completed">BroadcastReceiver not receiving BOOT_COMPLETED</a>
Chk this link for more info</p>

<p>Try this code and let me know :
Service code for location update :</p>

<pre><code>public class GPSTracker extends Service implements LocationListener {
private  Context mContext;
private final String TAG = "GPSTracker";

// flag for GPS status
boolean isGPSEnabled = false;

// flag for network status
boolean isNetworkEnabled = false;

// flag for GPS status
boolean canGetLocation = false;

Location location; // location
double latitude; // latitude
double longitude; // longitude

// The minimum distance to change Updates in meters
private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES = 10; // 10 meters

// The minimum time between updates in milliseconds
private static final long MIN_TIME_BW_UPDATES = 1000 * 60 * 1; // 1 minute

// Declaring a Location Manager
protected LocationManager locationManager;
Intent intent = new Intent(MainActivity.LOCATION_CHANGE);

@Override
public int onStartCommand(Intent intent, int flags, int startId) {
    Log.d(TAG,"onStartCommand");
    Log.d(TAG, "flag " + flags + "startId" + startId);
    this.mContext = this;
    getLocation();
    return super.onStartCommand(intent, flags, startId);
}

public Location getLocation() {
    try {
        locationManager = (LocationManager) mContext
                .getSystemService(LOCATION_SERVICE);

        // getting GPS status
        isGPSEnabled = locationManager
                .isProviderEnabled(LocationManager.GPS_PROVIDER);

        // getting network status
        isNetworkEnabled = locationManager
                .isProviderEnabled(LocationManager.NETWORK_PROVIDER);
        Log.d(TAG,"getlocation gpsEnabled " + isGPSEnabled + "networkenabled"
                + isNetworkEnabled);

        if (!isGPSEnabled &amp;&amp; !isNetworkEnabled) {
            // no network provider is enabled
        } else {
            this.canGetLocation = true;
            // First get location from Network Provider
            if (isNetworkEnabled) {

                locationManager.requestLocationUpdates(
                        LocationManager.NETWORK_PROVIDER,
                        MIN_TIME_BW_UPDATES,
                        MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                Log.d("Network", "Network");
                if (locationManager != null) {
                    location = locationManager
                            .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    if (location != null) {
                        latitude = location.getLatitude();
                        longitude = location.getLongitude();
                        Log.d(TAG,"LAtitude :" +latitude +"Lngitude:"+longitude);
                        onLocationChanged(location);

                    }
                }
            }
            // if GPS Enabled get lat/long using GPS Services
            else if (isGPSEnabled) {
                if (location == null) {
                    locationManager.requestLocationUpdates(
                            LocationManager.GPS_PROVIDER,
                            MIN_TIME_BW_UPDATES,
                            MIN_DISTANCE_CHANGE_FOR_UPDATES, this);
                    Log.d("GPS Enabled", "GPS Enabled");
                    if (locationManager != null) {
                        location = locationManager
                                .getLastKnownLocation(LocationManager.GPS_PROVIDER);
                        if (location != null) {
                            latitude = location.getLatitude();
                            longitude = location.getLongitude();
                            onLocationChanged(location);
                        }
                    }
                }
            }
        }

    } catch (Exception e) {
        e.printStackTrace();
    }

    return location;
}

/**
 * Stop using GPS listener
 * Calling this function will stop using GPS in your app
 */
public void stopUsingGPS() {
    if (locationManager != null) {
        locationManager.removeUpdates(GPSTracker.this);
    }
}
@Override
public void onDestroy() {
    Log.d(TAG,"onDestroy Called");
    stopUsingGPS();
    super.onDestroy();
}
@Override
public void onLocationChanged(Location newLocation) {
    Log.d(TAG,"onLocationChanged new Latitude: " + newLocation.getLatitude() +
            "  \nLongitude :" + newLocation.getLongitude());
    intent.putExtra("latitude", newLocation.getLatitude());
    intent.putExtra("longitude", newLocation.getLongitude());
    sendBroadcast(intent);
}

@Override
public void onProviderDisabled(String provider) {
}

@Override
public void onProviderEnabled(String provider) {
}

@Override
public void onStatusChanged(String provider, int status, Bundle extras) {
}

@Override
public IBinder onBind(Intent arg0) {
    // TODO Auto-generated method stub
    return null;
}
</code></pre>
