<p>I think that the problem is in the <code>onTouchEvent</code> implementation of your <code>VerticalSeekBar</code> because you are processing every <code>MotionEvent.ACTION_MOVE</code> received.</p>

<p>From <a href="http://developer.android.com/intl/es/training/gestures/movement.html" rel="nofollow">the documentation</a>:</p>

<blockquote>
  <p>A new onTouchEvent() is triggered with an ACTION_MOVE event whenever the current touch contact position, pressure, or size changes. As described in Detecting Common Gestures, all of these events are recorded in the MotionEvent parameter of onTouchEvent().</p>
  
  <p>Because finger-based touch isn't always the most precise form of interaction, detecting touch events is often based more on movement than on simple contact. To help apps distinguish between movement-based gestures (such as a swipe) and non-movement gestures (such as a single tap), Android includes the notion of "touch slop." Touch slop refers to the distance in pixels a user's touch can wander before the gesture is interpreted as a movement-based gesture. For more discussion of this topic, see Managing Touch Events in a ViewGroup.</p>
</blockquote>

<p>That is, you think that your fingers are <em>completely still</em> but your seek bars are receiving <code>ACTION_MOVE</code> events.</p>

<p>In your case, the "touch slop" approximation is now a good idea because the calculated touch slop is huge for your purposes, as <a href="http://developer.android.com/intl/es/training/gestures/viewgroup.html#vc" rel="nofollow">touch slop is defined as</a>:</p>

<blockquote>
  <p>"Touch slop" refers to the distance in pixels a user's touch can wander before the gesture is interpreted as scrolling. Touch slop is typically used to prevent accidental scrolling when the user is performing some other touch operation, such as touching on-screen elements.</p>
</blockquote>

<p>To solve your problem you can calculate the distance between the last managed position and the current one to trigger your <code>onProgressChanged</code>:</p>

<pre><code>private static final float MOVE_PRECISION = 5; // You may want to tune this parameter
private float lastY;

// ...

@Override
public boolean onTouchEvent(MotionEvent event) {
    if (!isEnabled()) {
        return false;
    }

    switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            lastY = event.getY();

            if (myListener != null)
                myListener.onStartTrackingTouch(this);
            break;
        case MotionEvent.ACTION_MOVE:
            if (calculateDistanceY(event) &gt; MOVE_PRECISION) {
                setProgress(getMax() - (int) (getMax() * event.getY() / getHeight()));
                onSizeChanged(getWidth(), getHeight(), 0, 0);
                myListener.onProgressChanged(this, getMax() - (int) (getMax() * event.getY() / getHeight()), true);

                lastY = event.getY();
            }
            break;
        case MotionEvent.ACTION_UP:
            myListener.onStopTrackingTouch(this);
            break;

        case MotionEvent.ACTION_CANCEL:
            break;
    }
    return true;
}

private float calculateDistanceY (MotionEvent event) {
    return Math.abs(event.getY() - lastY);
}
</code></pre>
