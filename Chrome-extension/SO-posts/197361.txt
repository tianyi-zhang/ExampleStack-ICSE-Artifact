<p>Like Obediah Stane said, it's necessary to create your own <code>format</code> method. But I would change a few things:</p>

<ul>
<li><p>Create a subclass directly derived from <code>Formatter</code>, not from <code>SimpleFormatter</code>. The <code>SimpleFormatter</code> has nothing to add anymore.</p></li>
<li><p>Be careful with creating a new <code>Date</code> object! You should make sure to represent the date of the <code>LogRecord</code>. When creating a new <code>Date</code> with the default constructor, it will represent the date and time the <code>Formatter</code> processes the <code>LogRecord</code>, not the date that the <code>LogRecord</code> was created.</p></li>
</ul>

<p>The following class can be <a href="http://java.sun.com/javase/6/docs/api/java/util/logging/Handler.html#setFormatter(java.util.logging.Formatter)">used as formatter</a> in a <code>Handler</code>, which in turn can be <a href="http://java.sun.com/javase/6/docs/api/java/util/logging/Logger.html#addHandler(java.util.logging.Handler)">added</a> to the <code>Logger</code>. Note that it ignores all class and method information available in the <code>LogRecord</code>.</p>

<pre><code>import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Date;
import java.util.logging.Formatter;
import java.util.logging.LogRecord;

public final class LogFormatter extends Formatter {

    private static final String LINE_SEPARATOR = System.getProperty("line.separator");

    @Override
    public String format(LogRecord record) {
        StringBuilder sb = new StringBuilder();

        sb.append(new Date(record.getMillis()))
            .append(" ")
            .append(record.getLevel().getLocalizedName())
            .append(": ")
            .append(formatMessage(record))
            .append(LINE_SEPARATOR);

        if (record.getThrown() != null) {
            try {
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                record.getThrown().printStackTrace(pw);
                pw.close();
                sb.append(sw.toString());
            } catch (Exception ex) {
                // ignore
            }
        }

        return sb.toString();
    }
}
</code></pre>
