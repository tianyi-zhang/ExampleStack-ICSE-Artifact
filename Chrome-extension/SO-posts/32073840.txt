<p><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#toString()" rel="nofollow"><code>toString()</code></a> method not throws an exception because it has to override a signature of <code>public void toString()</code> method of <code>java.lang.Object</code>. In <code>org.json.JSONObject</code> generic <code>toString()</code> method actually fails silently since the source code is:</p>

<pre><code>/**
 * Make a JSON text of this JSONObject. For compactness, no whitespace is
 * added. If this would not result in a syntactically correct JSON text,
 * then null will be returned instead.
 * &lt;p&gt;
 * Warning: This method assumes that the data structure is acyclical.
 *
 * @return a printable, displayable, portable, transmittable representation
 *         of the object, beginning with &lt;code&gt;{&lt;/code&gt;&amp;nbsp;&lt;small&gt;(left
 *         brace)&lt;/small&gt; and ending with &lt;code&gt;}&lt;/code&gt;&amp;nbsp;&lt;small&gt;(right
 *         brace)&lt;/small&gt;.
 */
public String toString() {
    try {
        return this.toString(0);
    } catch (Exception e) {
        return null;
    }
}
</code></pre>

<p>This method relies on <code>toString(int)</code> method, and in case that it throws the exception, it catch it and returns null.</p>

<p>According to the <code>toString(int)</code> description, the exception is thrown when <code>org.json.JSONObject</code> has an invalid number inside one of its elements; but looking at code could be possible that this exception is thrown for other reasons. </p>

<p>When you use <code>toString(int)</code> the stack trace finally calls <code>write()</code>  method to parse the object itself, the exception could be thrown for some of transformations from json objects to string:</p>

<pre><code>static final Writer writeValue(Writer writer, Object value,
            int indentFactor, int indent) throws JSONException, IOException {
        if (value == null || value.equals(null)) {
            writer.write("null");
        } else if (value instanceof JSONObject) {
            ((JSONObject) value).write(writer, indentFactor, indent);
        } else if (value instanceof JSONArray) {
            ((JSONArray) value).write(writer, indentFactor, indent);
        } else if (value instanceof Map) {
            new JSONObject((Map&lt;String, Object&gt;) value).write(writer, indentFactor, indent);
        } else if (value instanceof Collection) {
            new JSONArray((Collection&lt;Object&gt;) value).write(writer, indentFactor,
                    indent);
        } else if (value.getClass().isArray()) {
            new JSONArray(value).write(writer, indentFactor, indent);
        } else if (value instanceof Number) {
            writer.write(numberToString((Number) value));
        } else if (value instanceof Boolean) {
            writer.write(value.toString());
        } else if (value instanceof JSONString) {
            Object o;
            try {
                o = ((JSONString) value).toJSONString();
            } catch (Exception e) {
                throw new JSONException(e);
            }
            writer.write(o != null ? o.toString() : quote(value.toString()));
        } else {
            quote(value.toString(), writer);
        }
        return writer;
    }
</code></pre>

<p>However if as you said in your question (and @Carlos Rodriguez comments) all the checks are performed when the object is created, probably <code>toString(int)</code> method never thrown an exception.</p>

<p>Hope it helps,</p>
