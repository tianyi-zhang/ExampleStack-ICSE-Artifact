<p>Use a parent view, like a <code>ScrollView</code> that you know you can add a flexible about of content to. Then use a <code>TextWatcher</code> a/k/a a <a href="http://stackoverflow.com/questions/5482462/edittext-textchangelistener-issue">text change listener</a>. You could then create a new text view which you would add to the <code>ScrollView</code> if text was typed into the <code>EditText</code> field. </p>

<p>For neatness I'd probably create a custom <code>TextView</code> class that housed this text change listener and replication check. Here's example of how you could add a <code>TextView</code> </p>

<pre><code>//instance variable
private LinearLayout containerLayout;
private newTextViewCreated = false;
//initialize your conatinerLayout before you use it
//and create your first edit text field
public void onCreate(Bundle savedInstaceState){
   containerLayout = (LinearLayout)findViewById(R.id.conatinerLinearLayout);
   createEditText();
}

private void createEditText(){
    EditText editText = new editText(this);
    editText.addTextChangedListener(new TextWatcher() {

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            if(count &gt; 0 &amp;&amp; !newTextViewCreated){
                createEditText();
                newTextViewCreated = true;
            }           
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count,
                int after) {
            // TODO Auto-generated method stub              
        }

        @Override
        public void afterTextChanged(Editable s) {
            //TODO Auto-generated method stub  
        }
    });
    containerLayout.addView(editText);
}
</code></pre>

<p>I didn't test this out, I'm writing it now but here's what I'm thinking. Read the description of how a <a href="http://developer.android.com/reference/android/text/TextWatcher.html" rel="nofollow">TextWatcher</a> works so you understand the inner methods. You're going to have to play with the conditionals but what you're doing is listening for a change in the number of characters entered and then making a recursive call to create an additional view when chars are added to each text view. I use a boolean flag to show when a view has been created so we don't add one each time the char is changed. I moved outside the createEditText method based on your comment. If you made your own <code>EditText</code> class you could just add a method that would set/get the status of whether this <code>TextView</code> had spanwed another.  To remove you would just add a delete condition that would remove the view from the linear layout. </p>
