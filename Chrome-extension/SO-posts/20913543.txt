<p>I tried to simulate the use case, to me it purely depends upon the order of constructors  returns by the reflection when multiple constructors getting satisfied. try the below in the beanContext and let us know the order. 
Note** There is no grantee that reflection returns the order as its presents in code. </p>

<pre><code>Constructor&lt;MainClass&gt;[] methods = &lt;yourClass&gt;.class.getConstructors();
    for (int i = 0; i &lt; methods.length; i++) {
        Class&lt;?&gt;[] types = methods[i].getParameterTypes();
        System.out.println("Constructor "+i);
        for (int j = 0; j &lt; types.length; j++) {
            System.out.println("Param Type" + types[j].getName());
        }
    }
</code></pre>

<p>UPDATE: 
    To understand more clearly find the sorting logic found in AutoWireUtils.sortConstructors . this method being called once the spring get all constructors using the below line</p>

<pre><code>candidates = (mbd.isNonPublicAccessAllowed() ?
                        beanClass.getDeclaredConstructors() : beanClass.getConstructors());
</code></pre>

<p>AutoWireUtils.sortConstructors</p>

<pre><code>public static void sortFactoryMethods(Method[] factoryMethods) {
    Arrays.sort(factoryMethods, new Comparator&lt;Method&gt;() {
        @Override
        public int compare(Method fm1, Method fm2) {
            boolean p1 = Modifier.isPublic(fm1.getModifiers());
            boolean p2 = Modifier.isPublic(fm2.getModifiers());
            if (p1 != p2) {
                return (p1 ? -1 : 1);
            }
            int c1pl = fm1.getParameterTypes().length;
            int c2pl = fm2.getParameterTypes().length;
            return (new Integer(c1pl)).compareTo(c2pl) * -1;
        }
    });
}
</code></pre>

<p>So , it is purely based on Sort , in case both constructors has same weight then it is matter of how reflection returns the constructors.</p>
