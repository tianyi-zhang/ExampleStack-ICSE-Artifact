<p>if you want to just to create some instance that implement desired interface - you can simply do something like this:</p>

<pre><code>public &lt;T&gt; T newInstance (Class&lt;T&gt; type) {
    try {
        return type.newInstance();
    } catch (Exception ex) {
        try {
            // Try a private constructor.
            Constructor&lt;T&gt; constructor = type.getDeclaredConstructor();
            constructor.setAccessible(true);
            return constructor.newInstance();
        } catch (SecurityException ignored) {
        } catch (NoSuchMethodException ignored) {
            if (type.isMemberClass() &amp;&amp; !Modifier.isStatic(type.getModifiers()))
                throw new SerializationException("Class cannot be created (non-static member class): " + type.getName(), ex);
            else
                throw new SerializationException("Class cannot be created (missing no-arg constructor): " + type.getName(), ex);
        } catch (Exception privateConstructorException) {
            ex = privateConstructorException;
        }
        throw new SerializationException("Error constructing instance of class: " + type.getName(), ex);
    }
}
</code></pre>

<p>If you need to create a fully dynamic implementation of inteface then you need to use <strong>Proxy</strong> class <a href="http://www.javaworld.com/javaworld/jw-11-2000/jw-1110-proxy.html" rel="nofollow">http://www.javaworld.com/javaworld/jw-11-2000/jw-1110-proxy.html</a></p>

<p>Is this something you are looking for?</p>
