<p>In the activity `</p>

<pre><code>     String base_url = "http://maps.googleapis.com/";

    Gson gson = new GsonBuilder()
            .setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
            .create();

    RestAdapter restAdapter = new RestAdapter.Builder()
            .setEndpoint(base_url)
            .setLogLevel(RestAdapter.LogLevel.FULL)
            .build();

    MyApiRequestInterface reqinterface = restAdapter.create(MyApiRequestInterface.class);

    reqinterface.getJson(fromPosition.latitude + "," + fromPosition.longitude, toPosition.latitude + "," + toPosition.longitude, new Callback&lt;DirectionResults&gt;() {


        @Override
        public void success(DirectionResults directionResults, Response response) {
            Log.i("zacharia", "inside on success" +directionResults.getRoutes().size());
            ArrayList&lt;LatLng&gt; routelist = new ArrayList&lt;LatLng&gt;();
            if(directionResults.getRoutes().size()&gt;0){
                ArrayList&lt;LatLng&gt; decodelist;
                Route routeA = directionResults.getRoutes().get(0);
                Log.i("zacharia", "Legs length : "+routeA.getLegs().size());
                if(routeA.getLegs().size()&gt;0){
                    List&lt;Steps&gt; steps= routeA.getLegs().get(0).getSteps();
                    Log.i("zacharia","Steps size :"+steps.size());
                    Steps step;
                    Location location;
                    String polyline;
                    for(int i=0 ; i&lt;steps.size();i++){
                        step = steps.get(i);
                        location =step.getStart_location();
                        routelist.add(new LatLng(location.getLat(), location.getLng()));
                        Log.i("zacharia", "Start Location :" + location.getLat() + ", " + location.getLng());
                        polyline = step.getPolyline().getPoints();
                        decodelist = RouteDecode.decodePoly(polyline);
                        routelist.addAll(decodelist);
                        location =step.getEnd_location();
                        routelist.add(new LatLng(location.getLat() ,location.getLng()));
                        Log.i("zacharia","End Location :"+location.getLat() +", "+location.getLng());
                    }
                }
            }
            Log.i("zacharia","routelist size : "+routelist.size());
            if(routelist.size()&gt;0){
                PolylineOptions rectLine = new PolylineOptions().width(10).color(
                        Color.RED);

                for (int i = 0; i &lt; routelist.size(); i++) {
                    rectLine.add(routelist.get(i));
                }
                // Adding route on the map
                mMap.addPolyline(rectLine);
                markerOptions.position(toPosition);
                markerOptions.draggable(true);
                mMap.addMarker(markerOptions);
            }
        }

        @Override
        public void failure(RetrofitError retrofitError) {
            System.out.println("Failure, retrofitError" + retrofitError);
        }
    });`
</code></pre>

<p>Create retrofit interface </p>

<pre><code>public interface MyApiRequestInterface {

@GET("/maps/api/directions/json")
public void getJson(@Query("origin") String origin,@Query("destination") String destination, Callback&lt;DirectionResults&gt; callback);}
</code></pre>

<p>Create Model classes</p>

<pre><code>public class DirectionResults {
@SerializedName("routes")
private List&lt;Route&gt; routes;

public List&lt;Route&gt; getRoutes() {
    return routes;
}}
 public class Route {
@SerializedName("overview_polyline")
private OverviewPolyLine overviewPolyLine;

private List&lt;Legs&gt; legs;

public OverviewPolyLine getOverviewPolyLine() {
    return overviewPolyLine;
}

public List&lt;Legs&gt; getLegs() {
    return legs;
}
}

public class Legs {
private List&lt;Steps&gt; steps;

public List&lt;Steps&gt; getSteps() {
    return steps;
}
}

public class Steps {
private Location start_location;
private Location end_location;
private OverviewPolyLine polyline;

public Location getStart_location() {
    return start_location;
}

public Location getEnd_location() {
    return end_location;
}

public OverviewPolyLine getPolyline() {
    return polyline;
}
}

public class OverviewPolyLine {

@SerializedName("points")
public String points;

public String getPoints() {
    return points;
}
}

public class Location {
private double lat;
private double lng;

public double getLat() {
    return lat;
}

public double getLng() {
    return lng;
}
}
</code></pre>

<p>Create the Polyline Decode method</p>

<pre><code>public class RouteDecode {

public static ArrayList&lt;LatLng&gt; decodePoly(String encoded) {
    ArrayList&lt;LatLng&gt; poly = new ArrayList&lt;LatLng&gt;();
    int index = 0, len = encoded.length();
    int lat = 0, lng = 0;
    while (index &lt; len) {
        int b, shift = 0, result = 0;
        do {
            b = encoded.charAt(index++) - 63;
            result |= (b &amp; 0x1f) &lt;&lt; shift;
            shift += 5;
        } while (b &gt;= 0x20);
        int dlat = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lat += dlat;
        shift = 0;
        result = 0;
        do {
            b = encoded.charAt(index++) - 63;
            result |= (b &amp; 0x1f) &lt;&lt; shift;
            shift += 5;
        } while (b &gt;= 0x20);
        int dlng = ((result &amp; 1) != 0 ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lng += dlng;

        LatLng position = new LatLng((double) lat / 1E5, (double) lng / 1E5);
        poly.add(position);
    }
    return poly;
}
}
</code></pre>
