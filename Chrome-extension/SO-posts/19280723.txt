<p>All branches must return something, just add a <code>return null;</code> at the end:</p>

<pre><code>static String returnMacAddress(){             // 1.
    InetAddress ip;
    try{                                      // 2.
        ip = InetAddress.getLocalHost();      // 3. (until return stmt)

        NetworkInterface network = NetworkInterface.getByInetAddress(ip);
        byte[] mac = network.getHardwareAddress();

        System.out.print("Current MAC address: ");

        StringBuilder stringBuilder = new StringBuilder();
        for(int i = 0; i &lt; mac.length; i++){
            stringBuilder.append(String.format("%02X%s", mac[i], (i &lt; mac.length - 1) ? "-" : ""));
        }
        return stringBuilder.toString();       // 4.
    }catch(UnknownHostException e){            // 5.
        e.printStackTrace();                   // 6.
    } catch(SocketException e){
        e.printStackTrace();
    }
    return null;                               // 7.
}
</code></pre>

<p>This is <strong>syntactically</strong> correct - but you have to think about what this means <strong>semantically</strong>, and if that is the desired operation:</p>

<ul>
<li>exceptions - do you really just want to print them on System.err?
<ul>
<li>do you want to print them at all, if you just need the address if it is valid?</li>
</ul></li>
<li>would you rather have a String returned representing the condition that it was not successful ot obtain the MAC address?</li>
</ul>

<p><strong>EDIT</strong>
How the control flows in this case - as OP asked if the <code>return null</code> at the end would negate the previous value, in a successful execution:</p>

<ul>
<li>enter method - new stack frame (1. in code)
<ul>
<li>enter try block (2. in code)
<ul>
<li>process instructions in try (3. in code)</li>
<li>return statement: stop execution of block, the value is returned to the previous stack frame (4. in code)</li>
<li>(not a case now, but if there was a <code>finally</code> block, that would be executed now, and that could even overwrite the returned value...)</li>
</ul></li>
</ul></li>
<li>execution of the method that called continues with returned value</li>
</ul>

<p>In unsuccessful case, (UnknownHostException for example):</p>

<ul>
<li>enter method - new stack frame (1. in code)
<ul>
<li>enter try block (2. in code)
<ul>
<li>process instructions in try (3. in code)</li>
<li>exception thrown </li>
</ul></li>
<li>enter catch block (5. in code)
<ul>
<li>process catch block (log exception, 6. in code)</li>
<li>(not a case now, but if there was a <code>finally</code> block, that would be executed now, and that could even overwrite the returned value...)</li>
</ul></li>
<li>return null statement: stop execution of block, the <code>null</code> value is returned to the previous stack frame (7. in code)</li>
</ul></li>
<li>execution of the method that called continues with returned value</li>
</ul>

<p>As you see, in successful case, the <code>return null;</code> statement, even though it is after the "real return", doesn't influence the returned value. Whenever a return is reached, the eecution of the current block is stopped. (and if there is one in the actual context, the appropriate finally block will get the control).</p>

<p>The <code>finally</code> block is tricky though: read up on that, it will be useful knowledge.</p>
