<p>I think you can use Comparator to implement your sort solution base on the attribute. I've added some code and use Factory pattern like below:</p>

<pre><code>public class JavaProject {
    public static void main(String[] args) {

        Scanner scn = new Scanner(System.in);

        String continueAdd = "y";
        List&lt;Student&gt; studentList = new ArrayList&lt;&gt;();

//      [0] - Santos | Jamie | BSIT | 4th Year
//      [1] - Andres | Martin | BSOA | 2nd Year
//      [2] - Castro | Juan | BSCS | 1st Year
        // hard code to test
        Student st1 = new Student();
        st1.setFirstName("Jamie");
        st1.setLastName("Santos");
        st1.setCourse("BSIT");
        st1.setYear("4th Year");
        studentList.add(st1);

        st1 = new Student();
        st1.setFirstName("Martin");
        st1.setLastName("Andres");
        st1.setCourse("BSOA");
        st1.setYear("2nd Year");
        studentList.add(st1);

        st1 = new Student();
        st1.setFirstName("Juan");
        st1.setLastName("Castro");
        st1.setCourse("BSCS");
        st1.setYear("1st Year");
        studentList.add(st1);

        System.out.println("Add More (y/n): ");
        continueAdd = scn.nextLine();

        Student student;
        while ("y".equalsIgnoreCase(continueAdd)) {
            student = new Student();
            System.out.println("Enter your Last Name:");
            student.lastName = scn.nextLine();
            System.out.println("Enter your First Name:");
            student.firstName = scn.nextLine();
            System.out.println("Enter your Course:");
            student.course = scn.nextLine();
            System.out.println("Enter your Year:");
            student.year = scn.nextLine();

            studentList.add(student);

            System.out.println("Add More (y/n): ");
            continueAdd = scn.nextLine();
        }

        System.out.println("Select sort attribute.");
        System.out.println("Press 1 to sort by Firstname");
        System.out.println("Press 2 to sort by Lastname");
        System.out.println("Press 3 to sort by Year");
        System.out.println("Press 4 to sort by Course");

        int select = scn.nextInt();

        StudentSortFactory factory = new StudentSortFactory();
        Comparator&lt;Student&gt; comparator = factory.getSortComparator(select);
        Collections.sort(studentList, comparator);
        for (Student student2 : studentList) {
            System.out.println(student2);
        }
    }

}

//Factory 
class StudentSortFactory {
    public Comparator getSortComparator(int position) {
        Comparator result = null;
        switch (position) {

        case 1:
            result = new SortByFirstName();
            break;
        case 2:
            result = new SortByLastName();
            break;
        case 3:
            result = new SortByYear();
            break;

        default:
            result = new SortByCourse();
            break;
        }
        return result;
    }
}

//SortByFirstName
class SortByFirstName implements Comparator {

    @Override
    public int compare(Object o1, Object o2) {
        Student st1 = (Student) o1;
        Student st2 = (Student) o2;
        return st1.getFirstName().compareTo(st2.getFirstName());
    }

}

//SortByLastName
class SortByLastName implements Comparator {

    @Override
    public int compare(Object o1, Object o2) {
        Student st1 = (Student) o1;
        Student st2 = (Student) o2;
        return st1.getLastName().compareTo(st2.getLastName());
    }

}

//SortByCourse
class SortByCourse implements Comparator {

    @Override
    public int compare(Object o1, Object o2) {
        Student st1 = (Student) o1;
        Student st2 = (Student) o2;
        return st1.getCourse().compareTo(st2.getCourse());
    }

}

//SortByYear
class SortByYear implements Comparator {

    @Override
    public int compare(Object o1, Object o2) {
        Student st1 = (Student) o1;
        Student st2 = (Student) o2;
        return st1.getYear().compareTo(st2.getYear());
    }

}

//Student
class Student {

    String firstName;
    String lastName;
    String course;
    String year;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getCourse() {
        return course;
    }

    public void setCourse(String course) {
        this.course = course;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    @Override
    public String toString() {
        return lastName + " | " + firstName + " | " + course + " | " + year;

    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((course == null) ? 0 : course.hashCode());
        result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
        result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
        result = prime * result + ((year == null) ? 0 : year.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Student other = (Student) obj;
        if (course == null) {
            if (other.course != null)
                return false;
        } else if (!course.equals(other.course))
            return false;
        if (firstName == null) {
            if (other.firstName != null)
                return false;
        } else if (!firstName.equals(other.firstName))
            return false;
        if (lastName == null) {
            if (other.lastName != null)
                return false;
        } else if (!lastName.equals(other.lastName))
            return false;
        if (year == null) {
            if (other.year != null)
                return false;
        } else if (!year.equals(other.year))
            return false;
        return true;
    }

}
</code></pre>

<p>Hope this help!</p>
