<p><code>putStringSet</code> and <code>getStringSet</code> are only available in API 11.</p>

<p>Alternatively you could serialize your arrays using JSON like so:</p>

<pre><code>public static void setStringArrayPref(Context context, String key, ArrayList&lt;String&gt; values) {
    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
    SharedPreferences.Editor editor = prefs.edit();
    JSONArray a = new JSONArray();
    for (int i = 0; i &lt; values.size(); i++) {
        a.put(values.get(i));
    }
    if (!values.isEmpty()) {
        editor.putString(key, a.toString());
    } else {
        editor.putString(key, null);
    }
    editor.commit();
}

public static ArrayList&lt;String&gt; getStringArrayPref(Context context, String key) {
    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
    String json = prefs.getString(key, null);
    ArrayList&lt;String&gt; urls = new ArrayList&lt;String&gt;();
    if (json != null) {
        try {
            JSONArray a = new JSONArray(json);
            for (int i = 0; i &lt; a.length(); i++) {
                String url = a.optString(i);
                urls.add(url);
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
    return urls;
}
</code></pre>

<p>Set and retreive your URLs like so:</p>

<pre><code>// store preference
ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;(Arrays.asList(urls));
setStringArrayPref(this, "urls", list);

// retrieve preference
list = getStringArrayPref(this, "urls");
urls = (String[]) list.toArray();
</code></pre>
