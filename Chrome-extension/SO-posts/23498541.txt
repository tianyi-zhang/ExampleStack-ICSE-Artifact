<p>** Update ** - Sorry, misread from remote machine, automatically jumped to the remote share conclusion... You can however share the C drive on each of the machines and only give a special account access to the share.  Otherwise, the other post has the various suggestions you need to accomlish this. </p>

<p>You can use the java.io.File like your doing and define the path.  I don't know if there's any limitations (I'm running this from a Windows host), but it works. </p>

<pre><code>import java.io.File;

public class RemoteShareSpace {
   public static void main(String[] args) {

  try{
     // Works either way...

     //File f = new File("\\\\myServer\\ShareDir1\\ShareDir2\\ShareDir3");
     File f = new File("//myServer/ShareDir1/ShareDir2/ShareDir3");

     long totalSpace  = f.getTotalSpace();
     long usableSpace = f.getUsableSpace(); // unallocated / free disk space in bytes.
     long freeSpace   = f.getFreeSpace();   // unallocated / free disk space in bytes.

     boolean pathExists = f.exists();

     // if path exists
     if(pathExists)
     {

         System.out.println(" === Partition Detail ===");
         System.out.println("Total Space: " + totalSpace);
         System.out.println("Total size : " + totalSpace + " bytes");
         System.out.println("Space free : " + freeSpace + " bytes");

         System.out.println(" === mega bytes ===");
         System.out.println("Total size : " + totalSpace /1024 /1024 + " mb");
         System.out.println("Space free : " + freeSpace /1024 /1024 + " mb");
     }
  }catch(Exception e){
     e.printStackTrace();
 }
}
}
</code></pre>

<p>Output: </p>

<blockquote>
  <p>C:\Source>java RemoteShareSpace
  <br> === Partition Detail ===
  <br>Total Space: 64315076608
  <br>Total size : 64315076608 bytes
  <br>Space free : 22259978240 bytes
  <br> === mega bytes ===
  <br>Total size : 61335 mb
  <br>Space free : 21228 mb</p>
</blockquote>
