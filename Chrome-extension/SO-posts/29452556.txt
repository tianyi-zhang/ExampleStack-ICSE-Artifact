<p>Here's how you could write a custom deserializer for this:</p>

<pre><code>class ChatMessageDezerializer implements JsonDeserializer&lt;ChatMessage&gt; {
    @Override
    public ChatMessage deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        ChatMessage message = new ChatMessage();
        JsonObject obj = json.getAsJsonObject();
        message.translate = obj.get("translate").getAsString();
        JsonArray array = obj.getAsJsonArray("with");
        message.with.add(context.deserialize(array.get(0), With.class));
        message.with.add(array.get(1).getAsString());
        return message;
    }
}
</code></pre>

<p>and register it in your Gson parser:</p>

<pre><code>Gson gson = new GsonBuilder().registerTypeAdapter(ChatMessage.class, new ChatMessageDezerializer()).create();
</code></pre>

<p>Note that <code>with</code> is now a <code>List&lt;Object&gt;</code> since the most specific common type to the elements in the array are Object. Also I just done the problematic part, the rest can be handled easily. Running this you end up with</p>

<pre><code>[With@b1a58a3, hi]
</code></pre>

<p>as the resulting list. This assume you have a minimum control over the structure you get back (or at least you know in which format it would be). It should give you a good starting point from there.</p>
