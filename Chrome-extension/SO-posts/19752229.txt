<p>1 - edit Manifest file add to activity</p>

<pre><code>android:hardwareAccelerated="true"
</code></pre>

<p>2- Cache and draw icons to ImageView oneByOne we need 4 classes witch is :</p>

<p>Utils.class</p>

<pre><code>public class Utils {
    public static void CopyStream(InputStream is, OutputStream os)
    {
        final int buffer_size=1024;
        try
        {
            byte[] bytes=new byte[buffer_size];
            for(;;)
            {
              int count=is.read(bytes, 0, buffer_size);
              if(count==-1)
                  break;
              os.write(bytes, 0, count);
            }
        }
        catch(Exception ex){}
    }
}
</code></pre>

<p>MemoryCache.class</p>

<pre><code>public class MemoryCache {

    private static final String TAG = "MemoryCache";
    private Map&lt;String, Bitmap&gt; cache=Collections.synchronizedMap(
            new LinkedHashMap&lt;String, Bitmap&gt;(10,1.5f,true));//Last argument true for LRU ordering
    private long size=0;//current allocated size
    private long limit=1000000;//max memory in bytes

    public MemoryCache(){
        //use 25% of available heap size
        setLimit(Runtime.getRuntime().maxMemory()/4);
    }

    public void setLimit(long new_limit){
        limit=new_limit;
        Log.i(TAG, "MemoryCache will use up to "+limit/1024./1024.+"MB");
    }

    public Bitmap get(String id){
        try{
            if(!cache.containsKey(id))
                return null;
            return cache.get(id);
        }catch(NullPointerException ex){
            ex.printStackTrace();
            return null;
        }
    }

    public void put(String id, Bitmap bitmap){
        try{
            if(cache.containsKey(id))
                size-=getSizeInBytes(cache.get(id));
            cache.put(id, bitmap);
            size+=getSizeInBytes(bitmap);
            checkSize();
        }catch(Throwable th){
            th.printStackTrace();
        }
    }

    private void checkSize() {
        Log.i(TAG, "cache size="+size+" length="+cache.size());
        if(size&gt;limit){
            Iterator&lt;Entry&lt;String, Bitmap&gt;&gt; iter=cache.entrySet().iterator(); 
            while(iter.hasNext()){
                Entry&lt;String, Bitmap&gt; entry=iter.next();
                size-=getSizeInBytes(entry.getValue());
                iter.remove();
                if(size&lt;=limit)
                    break;
            }
            Log.i(TAG, "Clean cache. New size "+cache.size());
        }
    }

    public void clear() {
        try{
            cache.clear();
            size=0;
        }catch(NullPointerException ex){
            ex.printStackTrace();
        }
    }

    long getSizeInBytes(Bitmap bitmap) {
        if(bitmap==null)
            return 0;
        return bitmap.getRowBytes() * bitmap.getHeight();
    }
}
</code></pre>

<p>FileCache.class</p>

<pre><code>public class FileCache {

    private File cacheDir;
    String cacheFile  = "cachefolder"; 

    public FileCache(Context context, String subfolder ){
        //Find the dir to save cached images
        if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))
            cacheDir=new File(android.os.Environment.getExternalStorageDirectory(),cacheFile+"/"+subfolder);
        else
            cacheDir=context.getCacheDir();
        if(!cacheDir.exists())
            cacheDir.mkdirs();
    }

    public FileCache(Context context){
        //Find the dir to save cached images
        if (android.os.Environment.getExternalStorageState().equals(android.os.Environment.MEDIA_MOUNTED))
            cacheDir=new File(android.os.Environment.getExternalStorageDirectory(),cacheFile);
        else
            cacheDir=context.getCacheDir();
        if(!cacheDir.exists())
            cacheDir.mkdirs();
    }
    public File getFile(String url){
        //I identify images by hashcode. Not a perfect solution, good for the demo.
        String filename = String.valueOf(url.hashCode());
        //Another possible solution (thanks to grantland)
        //String filename = URLEncoder.encode(url);
        File f = new File(cacheDir, filename);
        return f;
    }
    public void clear(){
        File[] files=cacheDir.listFiles();
        if(files==null)
            return;
        for(File f:files)
            f.delete();
    }

}
</code></pre>

<p>ImageLoader.class :</p>

<pre><code>public class ImageLoader {

    public static int REQUIRED_SIZE=100;
    public MemoryCache memoryCache = new MemoryCache();
    FileCache fileCache;
    private Map&lt;ImageView, String&gt; imageViews=Collections.synchronizedMap(new WeakHashMap&lt;ImageView, String&gt;());
    ExecutorService executorService; 
    int stub_id = R.drawable.drawing_image; 


    public ImageLoader(Context context){
        fileCache=new FileCache(context);
        executorService=Executors.newFixedThreadPool(5);
    }

    public void DisplayImage(String url, ImageView imageView)
    {

        imageViews.put( imageView, url );

        Bitmap bitmap = memoryCache.get(url);

        if( bitmap != null )
        {
            imageView.setImageBitmap(bitmap);
        }
        else
        {
            queuePhoto(url, imageView);
            imageView.setImageResource(stub_id);
        }
    }

    /*   private Bitmap bitmap_to_circel( Bitmap bitmap)
    {

        return bitmap;
        Bitmap circleBitmap = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);

        BitmapShader shader = new BitmapShader (bitmap,  TileMode.CLAMP, TileMode.CLAMP);
        Paint paint = new Paint();
              paint.setShader(shader); 
              paint.setAntiAlias(true);
              paint.setFilterBitmap(true);
              paint.setDither(true);      

       Canvas c = new Canvas(circleBitmap);
       c.drawCircle(bitmap.getWidth()/2, bitmap.getHeight()/2, bitmap.getWidth()/2, paint);

       return circleBitmap;
    }*/

    private void queuePhoto(String url, ImageView imageView)
    {
        PhotoToLoad p = new PhotoToLoad(url, imageView);
        executorService.submit(new PhotosLoader(p));
    }

    private Bitmap getBitmap(String url) 
    {
        File f=fileCache.getFile(url);

        //from SD cache
        Bitmap b = decodeFile(f);
        if(b!=null)
            return b;

        //from web
        try {
            Bitmap bitmap=null;
            URL imageUrl = new URL(url);
            HttpURLConnection conn = (HttpURLConnection)imageUrl.openConnection();
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(30000);
            conn.setInstanceFollowRedirects(true);
            InputStream is=conn.getInputStream();
            OutputStream os = new FileOutputStream(f);
            Utils.CopyStream(is, os);
            os.close();
            bitmap = decodeFile(f);


            return bitmap;  

        } catch (Throwable ex){
           ex.printStackTrace();
           if(ex instanceof OutOfMemoryError)
               memoryCache.clear();
           return null;
        }
    }

    //decodes image and scales it to reduce memory consumption
    private Bitmap decodeFile(File f){
        try {
            //decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(new FileInputStream(f),null,o);

            //Find the correct scale value. It should be the power of 2.
            int width_tmp=o.outWidth, height_tmp=o.outHeight;
            int scale=1;
            while(true){
                if(width_tmp/2&lt;REQUIRED_SIZE || height_tmp/2&lt;REQUIRED_SIZE)
                    break;
                width_tmp/=2;
                height_tmp/=2;
                scale*=2;
            }

            //decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize=scale;
            return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
        } catch (FileNotFoundException e) {}
        return null;
    }

    //Task for the queue
    private class PhotoToLoad
    {
        public String url;
        public ImageView imageView;
        public PhotoToLoad(String u, ImageView i){
            url=u; 
            imageView=i;
        }
    }

    class PhotosLoader implements Runnable {
        PhotoToLoad photoToLoad;
        PhotosLoader(PhotoToLoad photoToLoad){
            this.photoToLoad=photoToLoad;
        }

        @Override
        public void run() {
            if(imageViewReused(photoToLoad))
                return;
            Bitmap bmp=getBitmap(photoToLoad.url);

            memoryCache.put(photoToLoad.url, bmp);

            if(imageViewReused(photoToLoad))
                return;
            BitmapDisplayer bd=new BitmapDisplayer(bmp, photoToLoad);
            Activity a=(Activity)photoToLoad.imageView.getContext();
            a.runOnUiThread(bd);
        }
    }

    boolean imageViewReused(PhotoToLoad photoToLoad){
        String tag=imageViews.get(photoToLoad.imageView);
        if(tag==null || !tag.equals(photoToLoad.url))
            return true;
        return false;
    }

    //Used to display bitmap in the UI thread
    class BitmapDisplayer implements Runnable
    {
        Bitmap bitmap;
        PhotoToLoad photoToLoad;
        public BitmapDisplayer(Bitmap b, PhotoToLoad p){bitmap=b;photoToLoad=p;}
        public void run()
        {
            if(imageViewReused(photoToLoad))
                return;
            if(bitmap!=null)
                photoToLoad.imageView.setImageBitmap(bitmap);
            else
                photoToLoad.imageView.setImageResource(stub_id);
        }
    }

    public void clearCache() {
        memoryCache.clear();
        fileCache.clear();
    }

}
</code></pre>

<p>3 - Add ImageLoader to your ApplicationAdapter and Start display images </p>

<pre><code>public class ApplicationAdapter extends ArrayAdapter&lt;ApplicationInfo&gt; {
    private List&lt;ApplicationInfo&gt; appsList = null;
    private Context context;
    private PackageManager packageManager;
    Holder holder;
//added imageloader here &lt;&lt;------------------
    ImageLoader imgLoader; 

    public ApplicationAdapter(Context context, int textViewResourceId,
            List&lt;ApplicationInfo&gt; appsList) {
        super(context, textViewResourceId, appsList);
        this.context = context;
        this.appsList = appsList;
        packageManager = context.getPackageManager();
//Register image loader class &lt;&lt;---------------------
imgLoader      = new ImageLoader(context);
    }


    @Override
    public View getView(int position, View convertView, ViewGroup parent){
        View view = convertView;
        final Holder holder;
        if (null == view) {
            LayoutInflater layoutInflater = (LayoutInflater) context
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            view = layoutInflater.inflate(R.layout.snippet_list_row, null);
            holder = new Holder();
            holder.appName = (TextView) view.findViewById(R.id.app_name);
            holder.packageName = (TextView) view.findViewById(R.id.app_paackage);
            holder.iconview = (ImageView) view.findViewById(R.id.app_icon);


            view.setTag(holder);
        }
        else
        {
            holder = (Holder)view.getTag();
        }




        final ApplicationInfo data = appsList.get(position);
        if (null != data) {

            holder.appName.setText(data.loadLabel(packageManager));
            holder.packageName.setText(data.packageName);

//now load icon provide Url and ImageView only and keep the rest to the class
//provide fill link url to the icon the class will download it , cache it , display it
//next time when scroll again to this position the icon will be displayed from cache file 
imgLoader.DisplayImage(data.icon_link_url_with_http, holder.iconview);




        }







        return view;
    }

    static class Holder
    {
        TextView appName, packageName;
        ImageView iconview;
    }



}
</code></pre>

<p>now your list view will scroll quickly even if its has 1k ImageView</p>
