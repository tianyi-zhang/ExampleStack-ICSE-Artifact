<p>Actually I did it in this way(EditText was on Toolbar, but it can be where ever you want):</p>

<pre><code>            inputSearch = (EditText) findViewById(R.id.inputSearch);
            inputSearch.addTextChangedListener(new TextWatcher() {

                @Override
                public void onTextChanged(CharSequence cs, int arg1, int arg2, int arg3) {
                    // When user changed the Text
                    adapter.getFilter().filter(cs.toString());
                }

                @Override
                public void beforeTextChanged(CharSequence arg0, int arg1, int arg2,
                                              int arg3) {
                    // TODO Auto-generated method stub

                }

                @Override
                public void afterTextChanged(Editable arg0) {
                    // TODO Auto-generated method stub
                }
            });
</code></pre>

<p>Edit:</p>

<p>To filter custom Base adapter you have to put this in class with your adapter:</p>

<pre><code>    List&lt;Fanfic&gt; fanfics;
    private List&lt;Fanfic&gt;filteredData = null;
    private ItemFilter mFilter = new ItemFilter();
</code></pre>

<p>You need 2 Lists - 1st with all data, 2nd with filtered data</p>

<p>In all methods you have to use filteredData(in constructor, getCount, getItem, getItemId), not filtered data you just have fill in constructor.</p>

<p>Here is ItemFilter class:</p>

<pre><code>private class ItemFilter extends Filter {
        @Override
        protected FilterResults performFiltering(CharSequence constraint) {

            String filterString = constraint.toString().toLowerCase();

            FilterResults results = new FilterResults();

            final List&lt;Fanfic&gt; list = fanfics;

            int count = list.size();
            final ArrayList&lt;Fanfic&gt; nlist = new ArrayList&lt;Fanfic&gt;(count);

            String filterableString ;

            for (int i = 0; i &lt; count; i++) {
                filterableString = list.get(i).getName();
                if (filterableString.toLowerCase().startsWith(filterString)) {
                    nlist.add(list.get(i));
                }
            }

            results.values = nlist;
            results.count = nlist.size();

            return results;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected void publishResults(CharSequence constraint, FilterResults results) {
            filteredData = (ArrayList&lt;Fanfic&gt;) results.values;
            notifyDataSetChanged();
        }

    }
</code></pre>

<p>And add this method to your adapter:</p>

<pre><code>public Filter getFilter() {
    return mFilter;
}
</code></pre>

<p>and last thing, you have to implement Filterable.</p>
