<p>Just zip the indices with the list. This has been a common idiom since some decades ago in ML et al. I argue this approach is cleaner than the one by arshajii, since it also eliminates the stray <code>i++</code>. Also, most Java users are unfamiliar with plain blocks around a case (then again, they might be just as surprised by seeing <code>zip</code>). My code would be shorter if you used a library that contains <code>zip</code>. or it was in the standard library like it should be. I attached an implementation to the bottom of your class.</p>

<pre><code>import java.util.concurrent.*;
import java.util.*;
enum E {A,B,C,D,E}
class A {
    static void s() {
        try {
            Thread.sleep(1000);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
    static Semaphore s = new Semaphore(2); // 2 cores
    public static void main(String[] _){
        LinkedList&lt;E&gt; es = new LinkedList&lt;E&gt;();
        es.push(E.A);
        es.push(E.D);
        es.push(E.B);
        es.push(E.C);
        es.push(E.E);
        es.push(E.C);
        es.push(E.C);
        es.push(E.E);
        es.push(E.A);
        es.push(E.A);
        f(es);
    }
    static void f(List&lt;E&gt; es) {
        for (final Pair&lt;Integer,E&gt; p : zip(naturals, es)) {
            s.acquireUninterruptibly();
            switch(p.y) {
            case A:
                new Thread() {
                    public void run() {
                        System.out.println("A" + p.x); s(); s.release();
                    }
                }.start();
                break;
            case B:
                new Thread() {
                    public void run() {
                        System.out.println("B" + p.x); s(); s.release();
                    }
                }.start();
                break;
            case C:
                new Thread() {
                    public void run() {
                        System.out.println("C"); s(); s.release();
                    }
                }.start();
                break;
            case D:
                new Thread() {
                    public void run() {
                        System.out.println("D"); s(); s.release();
                    }
                }.start();
                break;
            case E:
                new Thread() {
                    public void run() {
                        System.out.println("E"); s(); s.release();
                    }
                }.start();
                break;
            default:
                break;
            }
        }
    }

    // an infinite iterable over all natural numbers
    static Iterable&lt;Integer&gt; naturals = new Iterable&lt;Integer&gt;() {
        public Iterator&lt;Integer&gt; iterator() {
            return new Iterator&lt;Integer&gt;() {
                private int i = 0;
                public void remove() {
                    throw new UnsupportedOperationException();
                }
                public Integer next() {
                    return i++;
                }
                public boolean hasNext() {
                    return true;
                }
            };
        }
    };

    // combine two iterators
    static &lt;X,Y&gt; Iterable&lt;Pair&lt;X,Y&gt;&gt; zip(final Iterable&lt;X&gt; i1,
                                         final Iterable&lt;Y&gt; i2) {
        return new Iterable&lt;Pair&lt;X,Y&gt;&gt;() {
            public Iterator&lt;Pair&lt;X,Y&gt;&gt; iterator() {
                return new Iterator&lt;Pair&lt;X,Y&gt;&gt;() {
                    private final Iterator&lt;X&gt; ix = i1.iterator();
                    private final Iterator&lt;Y&gt; iy = i2.iterator();
                    public void remove() {
                        ix.remove();
                        iy.remove();
                    }
                    public Pair&lt;X,Y&gt; next() {
                        Pair&lt;X,Y&gt; p = new Pair&lt;X,Y&gt;();
                        p.x = ix.next();
                        p.y = iy.next();
                        return p;
                    }
                    public boolean hasNext() {
                        return ix.hasNext() &amp;&amp; iy.hasNext();
                    }
                };
            }
        };
    }
}

class Pair&lt;X,Y&gt; {
    X x;
    Y y;
}
</code></pre>

<hr>

<pre><code>javac A.java &amp;&amp; java A
A0
A1
E
C
C
E
C
B7
D
A9
</code></pre>
