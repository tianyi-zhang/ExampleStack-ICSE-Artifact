<p>You can get processor, RAM and other hardware related information as we normally get in Linux.
From terminal we can issue these command in a normal Linux system. You <strong>don't</strong> need to have a <strong>rooted device</strong> for this.</p>

<pre><code>$ cat /proc/cpuinfo 
</code></pre>

<p>Similarly you can issue these commands in android code and get the result.</p>

<pre><code>public void getCpuInfo() {
    try {
        Process proc = Runtime.getRuntime().exec("cat /proc/cpuinfo");
        InputStream is = proc.getInputStream();
        TextView tv = (TextView)findViewById(R.id.tvcmd);
        tv.setText(getStringFromInputStream(is));
    } 
    catch (IOException e) {
        Log.e(TAG, "------ getCpuInfo " + e.getMessage());
    }
}

public void getMemoryInfo() {
    try {
        Process proc = Runtime.getRuntime().exec("cat /proc/meminfo");
        InputStream is = proc.getInputStream();
        TextView tv = (TextView)findViewById(R.id.tvcmd);
        tv.setText(getStringFromInputStream(is));
    } 
    catch (IOException e) {
        Log.e(TAG, "------ getMemoryInfo " + e.getMessage());
    }
}

private static String getStringFromInputStream(InputStream is) {
    StringBuilder sb = new StringBuilder();
    BufferedReader br = new BufferedReader(new InputStreamReader(is));
    String line = null;

    try {
        while((line = br.readLine()) != null) {
            sb.append(line);
            sb.append("\n");
        }
    } 
    catch (IOException e) {
        Log.e(TAG, "------ getStringFromInputStream " + e.getMessage());
    }
    finally {
        if(br != null) {
            try {
                br.close();
            } 
            catch (IOException e) {
                Log.e(TAG, "------ getStringFromInputStream " + e.getMessage());
            }
        }
    }       

    return sb.toString();
}
</code></pre>
