<p>I tried the code and it worked for me <a href="http://stackoverflow.com/questions/8970065/cant-access-the-sensors-in-android">after</a> I added</p>

<pre><code>&lt;uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/&gt;
&lt;uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/&gt;
&lt;uses-permission android:name="android.permission.ACCESS_MOCK_LOCATION"/&gt;
</code></pre>

<p>in the manifest. And added </p>

<pre><code>    sensorManager.registerListener(this, gsensor, SensorManager.SENSOR_DELAY_NORMAL);
    sensorManager.registerListener(this, msensor, SensorManager.SENSOR_DELAY_NORMAL);
</code></pre>

<p>to the Compass constructor.</p>

<p>To access the compass value you need a getter method for the azimuth variable in the Compass class.</p>

<p>Compass.onCreate:</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);


    Compass compass = new Compass(this);
}
</code></pre>

<p>MainActivity:</p>

<pre><code>package com.example.myfirstapp;

import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.util.Log;

public class Compass implements SensorEventListener{

    private SensorManager sensorManager;
    private Sensor gsensor;
    private Sensor msensor;
    private float[] mGravity = new float[3];
    private float[] mGeomagnetic = new float[3];
    private float azimuth = 0f;
    private float correctAzimuth = 0;
    private String TAG = "Compass";

    public Compass(Context context)
    {
        sensorManager = (SensorManager) context
                    .getSystemService(Context.SENSOR_SERVICE);
        gsensor = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        msensor = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);

        sensorManager.registerListener(this, gsensor, SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(this, msensor, SensorManager.SENSOR_DELAY_NORMAL);
    }

    @Override
    public void onSensorChanged(SensorEvent event) 
    {
        final float alpha = 0.97f;

        synchronized (this) 
        {
            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) 
            {

                mGravity[0] = alpha * mGravity[0] + (1 - alpha)
                    * event.values[0];
                mGravity[1] = alpha * mGravity[1] + (1 - alpha)
                    * event.values[1];
                mGravity[2] = alpha * mGravity[2] + (1 - alpha)
                    * event.values[2];

                // mGravity = event.values;
                // Log.e(TAG, Float.toString(mGravity[0]));
            }

            if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD) 
            {
                // mGeomagnetic = event.values;

                mGeomagnetic[0] = alpha * mGeomagnetic[0] + (1 - alpha)
                    * event.values[0];
                mGeomagnetic[1] = alpha * mGeomagnetic[1] + (1 - alpha)
                    * event.values[1];
                mGeomagnetic[2] = alpha * mGeomagnetic[2] + (1 - alpha)
                    * event.values[2];
                // Log.e(TAG, Float.toString(event.values[0]));

            }

            float R[] = new float[9];
            float I[] = new float[9];
            boolean success = SensorManager.
                    getRotationMatrix(R, I, mGravity, mGeomagnetic);
            if (success) 
            {
                float orientation[] = new float[3];
                SensorManager.getOrientation(R, orientation);
                // Log.d(TAG, "azimuth (rad): " + azimuth);
                azimuth = (float) Math.toDegrees(orientation[0]); // orientation
                azimuth = (azimuth + 360) % 360;

                Log.d(TAG, "azimuth (deg): " + azimuth);
            }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {

    }

}
</code></pre>
