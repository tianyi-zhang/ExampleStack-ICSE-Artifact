<p>I don't know how much this method is feasible, but still it may be useful.</p>

<ul>
<li><p>You need to release a new version of your app.</p></li>
<li><p>Whenever an app registered with GCM launches it looks for a registration id and calls for <code>getRegistrationId()</code> function. We store that in shared prefs inside our app data. </p></li>
</ul>

<p><strong>Here's some code from the official docs</strong> : </p>

<pre><code>private String getRegistrationId(Context context)
{
    final SharedPreferences prefs = getGCMPreferences(context);
    String registrationId = prefs.getString(PROPERTY_REG_ID, "");

    if (registrationId.isEmpty())
    {
        Log.i(TAG, "Registration not found.");
        return "";
    }

    int registeredVersion = prefs.getInt(PROPERTY_APP_VERSION, Integer.MIN_VALUE);
    int currentVersion = getAppVersion(context);

    if (registeredVersion != currentVersion)
    {
        Log.i(TAG, "App version changed.");

        return "";
    }

    return registrationId;
}
</code></pre>

<ul>
<li><p>We use a specific key to store the registeration id in shared prefs (here it is <strong>PROPERTY_REG_ID</strong> which is already defined as <code>public static final String PROPERTY_REG_ID = "registration_id";</code>). Each time our app launches our it checks for the presence of this key.</p></li>
<li><p>So what i was suggesting was is to change this shared prefs key for the registration id.</p></li>
</ul>

<p>This definitely would not be found in the shared prefs and would ask for a re-registration from the GCM and would call the <code>registerInBackground()</code> function. </p>

<pre><code>private void registerInBackground()
{
    new AsyncTask()
    {
        @Override
        protected String doInBackground(Void... params)
        {
            String msg = "";

            try
            {
                if (gcm == null)
                {
                    gcm = GoogleCloudMessaging.getInstance(context);
                }

                regid = gcm.register(SENDER_ID);
                msg = "Device registered, registration ID=" + regid;

                sendRegistrationIdToBackend();

                storeRegistrationId(context, regid);
            }
            catch (IOException ex)
            {
                msg = "Error :" + ex.getMessage();
            }

            return msg;
        }

        @Override
        protected void onPostExecute(String msg)
        {
            mDisplay.append(msg + "\n");
        }
    }.execute(null, null, null);
}
</code></pre>

<p>After the registration you need to use the new shared prefs key to store the new registration id.</p>

<p><strong>The drawback of this whole thing is that you can get the registration id of only those who would update the app.</strong></p>
