<p>If you want to search for <em>not</em> exact matches, I would try to make an <code>ArrayList</code> of <code>MyAppRecord</code> where </p>

<pre><code>public class MyAppRecord {
    private String record;
    private int deviance;
}
</code></pre>

<p>and get for each record the deviance of the String you want to find with:</p>

<pre><code>public static int getLevenshteinDistance (String s, String t) {
    if (s == null || t == null) {
      throw new IllegalArgumentException("Strings must not be null");
    }    
    int n = s.length(); // length of s
    int m = t.length(); // length of t

    if (n == 0) {
      return m;
    } else if (m == 0) {
      return n;
    }

    int p[] = new int[n+1]; //'previous' cost array, horizontally
    int d[] = new int[n+1]; // cost array, horizontally
    int _d[]; //placeholder to assist in swapping p and d

    // indexes into strings s and t
    int i; // iterates through s
    int j; // iterates through t

    char t_j; // jth character of t

    int cost; // cost

    for (i = 0; i&lt;=n; i++) {
       p[i] = i;
    }

    for (j = 1; j&lt;=m; j++) {
       t_j = t.charAt(j-1);
       d[0] = j;

       for (i=1; i&lt;=n; i++) {
          cost = s.charAt(i-1)==t_j ? 0 : 1;
          // minimum of cell to the left+1, to the top+1, diagonally left and up +cost                         
          d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);  
       }

       // copy current distance counts to 'previous row' distance counts
       _d = p;
       p = d;
       d = _d;
    }

    // our last action in the above loop was to switch d and p, so p now
    // actually has the most recent cost counts
    return p[n];
  }
}
</code></pre>

<p>save it to your <code>MyAppRecord</code>-object and finally sort your <code>ArrayList</code> by the <code>deviance</code> of its <code>MyAppRecord</code>-objects.</p>

<p>Note that this could take some time, depending on your set of records. And NOTE that there is no way of telling wether dogA or dogB is on a certain position in your list by searching for dog.</p>

<p>Read up on the Levensthein distance to get a feeling on how it works. You may get the idea of sorting out strings that are possibly to long/short to get a distance that is okay for a threshold you may have.</p>

<p>It is also possible to copy "good enough" results to a different <code>ArrayList</code>.</p>
