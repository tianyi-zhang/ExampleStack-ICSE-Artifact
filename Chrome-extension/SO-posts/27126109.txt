<p>If I'm right you have to create a certificate, sign it and include it in your app. Or change the server configuration (<a href="https://developer.android.com/training/articles/security-ssl.html">further information here</a>). </p>

<p>Otherwise you can <strong>trust every handshake</strong> within your app. This is not the best approach, but really useful during implementation.</p>

<p>Include this class in your project</p>

<pre><code>public class SSLCertificateHandler {

protected static final String TAG = "NukeSSLCerts";

/**
 * Enables https connections
 */
public static void nuke() {
    try {
        TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
            public X509Certificate[] getAcceptedIssuers() {
                X509Certificate[] myTrustedAnchors = new X509Certificate[0];
                return myTrustedAnchors;
            }

            @Override
            public void checkClientTrusted(X509Certificate[] certs, String authType) {
            }

            @Override
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
            }
        } };

        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, trustAllCerts, new SecureRandom());
        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
        HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier() {
            @Override
            public boolean verify(String arg0, SSLSession arg1) {
                return true;
            }
        });
    } catch (Exception e) {
    }
}

}
</code></pre>

<p>Extend your <code>Application</code>, and call the 'nuke' function in your <code>onCreate</code> </p>

<pre><code>public class YOURApplication extends Application {

@Override
public void onCreate() {
    super.onCreate();

    //...

    // trust all SSL -&gt; HTTPS connection
    SSLCertificateHandler.nuke();
}
</code></pre>

<p>I found this code in SO, but can't find the link at the moment....</p>
