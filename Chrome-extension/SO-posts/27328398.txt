<p>You are mixing Jersey 1.x with Jersey 2.x, which should <em>not</em> be done. Your filter class is based on Jersey 1.x. Your <code>ResourceConfig</code> is Jersey 2.x. I know this because Jersey 1.x <code>ResourceConfig</code> doesn't have the <code>register()</code> method. With Jersey 1.x, this is howwe would register your above filter</p>

<pre><code>resourceConfig.getContainerResponseFilters().add(new CORSFilter());
</code></pre>

<p>And that would be enough. But Jersey 2.x does not have this way of adding filters. We need to <code>register</code> everything.</p>

<p>That being said, if you are using Jersey 2.x, I highly suggest getting rid of all your Jersey 1.x dependencies. After doing so, the first thing you will notice is that your filter class will no longer compile. Here's how the refactored 2.x filter should look like:</p>

<pre><code>import java.io.IOException;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerResponseContext;
import javax.ws.rs.container.ContainerResponseFilter;

@Provider
public class CORSFilter implements ContainerResponseFilter {

    @Override
    public void filter(ContainerRequestContext request,
            ContainerResponseContext response) throws IOException {
        response.getHeaders().add("Access-Control-Allow-Origin", "*");
        response.getHeaders().add("Access-Control-Allow-Headers",
                "origin, content-type, accept, authorization");
        response.getHeaders().add("Access-Control-Allow-Credentials", "true");
        response.getHeaders().add("Access-Control-Allow-Methods",
                "GET, POST, PUT, DELETE, OPTIONS, HEAD");
    }
}
</code></pre>

<p>Using the above filter should work. </p>
