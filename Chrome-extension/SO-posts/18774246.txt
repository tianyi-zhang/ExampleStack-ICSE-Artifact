<p>I made it. Solution:</p>

<p>Java code:</p>

<pre><code>public class MessageEncrypt {

        public String encryptString(String message, String seckey) throws Exception{
            byte[] encData = encrypt(message, seckey);

            return Base64.encodeToString(encData, Base64.DEFAULT);
        }

        public String decryptString(String message, String seckey) throws Exception{
            byte[] encData= Base64.decode(message, Base64.DEFAULT);

            return decrypt(encData, seckey);
        }

        private byte[] encrypt(String message, String seckey) throws Exception {
            final MessageDigest md = MessageDigest.getInstance("md5");
            final byte[] digestOfPassword = md.digest(seckey.getBytes("utf-8"));
            final byte[] keyBytes = acopyof(digestOfPassword, 24);
            for (int j = 0, k = 16; j &lt; 8;) {
                keyBytes[k++] = keyBytes[j++];
            }

            final SecretKey key = new SecretKeySpec(keyBytes, "DESede");
            final IvParameterSpec iv = new IvParameterSpec(new byte[8]);
            final Cipher cipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, key, iv);

            final byte[] plainTextBytes = message.getBytes("utf-8");
            final byte[] cipherText = cipher.doFinal(plainTextBytes);

            return cipherText;
        }

        private String decrypt(byte[] message, String seckey) throws Exception {
            final MessageDigest md = MessageDigest.getInstance("md5");
            final byte[] digestOfPassword = md.digest(seckey.getBytes("utf-8"));
            final byte[] keyBytes = acopyof(digestOfPassword, 24);
            for (int j = 0, k = 16; j &lt; 8;) {
                keyBytes[k++] = keyBytes[j++];
            }

            final SecretKey key = new SecretKeySpec(keyBytes, "DESede");
            final IvParameterSpec iv = new IvParameterSpec(new byte[8]);
            final Cipher decipher = Cipher.getInstance("DESede/CBC/PKCS5Padding");
            decipher.init(Cipher.DECRYPT_MODE, key, iv);

            final byte[] plainText = decipher.doFinal(message);

            return new String(plainText, "UTF-8");
        }

        public byte[] acopyof(byte[] orig, int newlength){
            byte[] copya = new byte[newlength];
            for(int i=0;i&lt; orig.length;i++){
                copya[i]=orig[i];
            }
            for(int i=orig.length;i&lt;newlength;i++){
                copya[i]=0x0;
            }
            return copya;
        }
    }
</code></pre>

<p>Objective C code:</p>

<pre><code>+(NSString*)doCipher:(NSString*)message key:(NSString*)key operation:(CCOperation)encryptOrDecrypt {

    const void *messageData;
    size_t messageBufferSize;

    if (encryptOrDecrypt == kCCDecrypt){
        NSData *messageEncryptData= [NSData dataFromBase64String:message];
        messageBufferSize= [messageEncryptData length];
        messageData= [messageEncryptData bytes];
    }
    else{
        messageBufferSize= message.length;
        messageData = [[[message dataUsingEncoding: NSUTF8StringEncoding]mutableCopy] bytes];
    }

    CCCryptorStatus ccStatus;
    uint8_t *bufferPtr = NULL;
    size_t bufferPtrSize = 0;
    size_t movedBytes = 0;

    bufferPtrSize = (messageBufferSize + kCCBlockSize3DES) &amp; ~(kCCBlockSize3DES - 1);
    bufferPtr = malloc( bufferPtrSize * sizeof(uint8_t));
    memset((void *)bufferPtr, 0x0, bufferPtrSize);

    uint8_t iv[kCCBlockSize3DES];
    memset((void *) iv, 0x0, (size_t) sizeof(iv));

    NSMutableData *keyData = [[key dataUsingEncoding:NSUTF8StringEncoding]mutableCopy];
    NSData *keyEncodedMD5 = [NSData MD5Digest:keyData];

    NSMutableData *keyDataAux = [NSMutableData dataWithData:keyEncodedMD5];
    NSRange rangeToModify = NSMakeRange([keyEncodedMD5 length], kCCKeySize3DES - [keyEncodedMD5 length]);
    [keyDataAux setLength: kCCKeySize3DES];
    [keyDataAux replaceBytesInRange:rangeToModify withBytes:[keyEncodedMD5 bytes]];

    ccStatus = CCCrypt(encryptOrDecrypt, // CCoperation op
                       kCCAlgorithm3DES, // CCAlgorithm alg
                       kCCOptionPKCS7Padding, // CCOptions
                       [keyDataAux bytes], // const void *key
                       kCCKeySize3DES, // 3DES key size length 24 bytes
                       iv,  //const void *iv,
                       messageData, // const void *dataIn
                       messageBufferSize, // size_t dataInLength
                       (void *)bufferPtr, // void *dataOut
                       bufferPtrSize, // size_t dataOutAvailable
                       &amp;movedBytes); // size_t *dataOutMoved

    if (ccStatus == kCCParamError) return @"PARAM ERROR";
    else if (ccStatus == kCCBufferTooSmall) return @"BUFFER TOO SMALL";
    else if (ccStatus == kCCMemoryFailure) return @"MEMORY FAILURE";
    else if (ccStatus == kCCAlignmentError) return @"ALIGNMENT";
    else if (ccStatus == kCCDecodeError) return @"DECODE ERROR";
    else if (ccStatus == kCCUnimplemented) return @"UNIMPLEMENTED";

    NSString *result;
    if (encryptOrDecrypt == kCCDecrypt){
        result = [[NSString alloc] initWithData:[NSData dataWithBytes:(const void *)bufferPtr length:(NSUInteger)movedBytes] encoding:NSUTF8StringEncoding] ;
    }
    else{
        NSData *myData = [NSData dataWithBytes:(const void *)bufferPtr length:(NSUInteger)movedBytes];
        result= [myData base64EncodedString];
    }

    return result;
}
</code></pre>
