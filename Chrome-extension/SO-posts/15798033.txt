<p>Making all the methods on a class individually synchronized doesn't make an aggregation ( calling them in a group ) of those methods thread safe. By wrapping the <code>Iterator</code> in a synchronized block you are protecting that particular instance of the iterator from having its individual method called interspersed with other calls by multiple threads.</p>

<p>If I call <code>.add()</code> once it is safe, if I need to call <code>.add()</code> multiple times to complete a logical statement, there is no guarantee that someone else hasn't added something else or removed something else between my <code>.add()</code> calls unless I block everything else from calling <code>.add()</code> ( or any other method ) by <code>synchronizing</code> on the variable that represents the collection.</p>

<p>The <code>Iterator</code> makes mutiple calls to the individual methods on the collection, they all have to be wrapped in a single <code>synchronized</code> block to make them execute as a single <code>transaction</code> of sorts. Examine the source code of the implemenation of  <code>Iterator</code> you will see what I mean. Here is the source code for <code>List</code> it makes multiple individual calls to the underlying implementation, so they all need to be executed in uninterrupted order by the same thread to be deterministic.</p>



<pre><code>  @Override
    public Iterator&lt;A&gt; iterator() {
        if (tail == null)
            return emptyIterator();
    return new Iterator&lt;A&gt;() {
        List&lt;A&gt; elems = List.this;
        public boolean hasNext() {
        return elems.tail != null;
        }
        public A next() {
                if (elems.tail == null)
                    throw new NoSuchElementException();
        A result = elems.head;
        elems = elems.tail;
        return result;
        }
        public void remove() {
        throw new UnsupportedOperationException();
        }
    };
    }
</code></pre>

<p>The <a href="http://javasourcecode.org/html/open-source/jdk/jdk-6u23/java/util/AbstractList.java.html" rel="nofollow">source</a> for <code>AbstractList.iterator()</code> shows even more complicated logic that makes multiple calls.</p>

<p>A better wrapper is wrapping them in <code>Immutable</code> collections, then you guarantee that nothing else can alter the underlying collection between calls.</p>
