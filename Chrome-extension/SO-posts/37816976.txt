<p><strong>Important update:</strong></p>

<p>Google has implemented this in the Android Support Library 24.2.0  (released in August 2016). The <a href="https://developer.android.com/topic/libraries/support-library/revisions.html#24-2-0-api-updates" rel="nofollow">release notes</a> say this:</p>

<blockquote>
  <p><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnFlingListener.html" rel="nofollow">RecyclerView.OnFlingListener</a> has been added to support custom
  behavior in response to flings. The <a href="https://developer.android.com/reference/android/support/v7/widget/SnapHelper.html" rel="nofollow">SnapHelper</a> class provides an
  implementation specifically for snapping child views, and the
  <a href="https://developer.android.com/reference/android/support/v7/widget/LinearSnapHelper.html" rel="nofollow">LinearSnapHelper</a> class extends this implementation to provide
  center-aligned snapping behavior similar to <a href="https://developer.android.com/reference/android/support/v4/view/ViewPager.html" rel="nofollow">ViewPager</a>.</p>
</blockquote>

<p>Note that I haven't tried to use <code>LinearSnapHelper</code> yet. I still use my solution, which works fine.</p>

<p><strong>Original answer:</strong></p>

<p>After <em>many</em> hours of trying 3 different solutions found here in SO I've finally built a solution that mimics very closely the behavior found in a <code>ViewPager</code>.</p>

<p>The solution is based on the @eDizzle <a href="http://stackoverflow.com/a/29171652/4034572">solution</a>, which I believe I've improved enough to say that it works almost like a <code>ViewPager</code>.</p>

<p>This is how it looks like:</p>

<p><img src="http://i.makeagif.com/media/6-24-2016/VXYX4v.gif" alt=""></p>

<p><strong>Important: my <code>RecyclerView</code> items width is exactly the same as the screen. I haven't tried with other sizes. Also I use it with an horizontal <code>LinearLayoutManager</code>. I think that you will need to adapt the code if you want vertical scroll.</strong></p>

<p>Here you have the code:</p>

<pre><code>public class SnappyRecyclerView extends RecyclerView {

    // Use it with a horizontal LinearLayoutManager
    // Based on http://stackoverflow.com/a/29171652/4034572

    public SnappyRecyclerView(Context context) {
        super(context);
    }

    public SnappyRecyclerView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public SnappyRecyclerView(Context context, @Nullable AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    public boolean fling(int velocityX, int velocityY) {

        LinearLayoutManager linearLayoutManager = (LinearLayoutManager) getLayoutManager();

        int screenWidth = Resources.getSystem().getDisplayMetrics().widthPixels;

        // views on the screen
        int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();
        View lastView = linearLayoutManager.findViewByPosition(lastVisibleItemPosition);
        int firstVisibleItemPosition = linearLayoutManager.findFirstVisibleItemPosition();
        View firstView = linearLayoutManager.findViewByPosition(firstVisibleItemPosition);

        // distance we need to scroll
        int leftMargin = (screenWidth - lastView.getWidth()) / 2;
        int rightMargin = (screenWidth - firstView.getWidth()) / 2 + firstView.getWidth();
        int leftEdge = lastView.getLeft();
        int rightEdge = firstView.getRight();
        int scrollDistanceLeft = leftEdge - leftMargin;
        int scrollDistanceRight = rightMargin - rightEdge;

        if (Math.abs(velocityX) &lt; 1000) {
            // The fling is slow -&gt; stay at the current page if we are less than half through,
            // or go to the next page if more than half through

            if (leftEdge &gt; screenWidth / 2) {
                // go to next page
                smoothScrollBy(-scrollDistanceRight, 0);
            } else if (rightEdge &lt; screenWidth / 2) {
                // go to next page
                smoothScrollBy(scrollDistanceLeft, 0);
            } else {
                // stay at current page
                if (velocityX &gt; 0) {
                    smoothScrollBy(-scrollDistanceRight, 0);
                } else {
                    smoothScrollBy(scrollDistanceLeft, 0);
                }
            }
            return true;

        } else {
            // The fling is fast -&gt; go to next page

            if (velocityX &gt; 0) {
                smoothScrollBy(scrollDistanceLeft, 0);
            } else {
                smoothScrollBy(-scrollDistanceRight, 0);
            }
            return true;

        }

    }

    @Override
    public void onScrollStateChanged(int state) {
        super.onScrollStateChanged(state);

        // If you tap on the phone while the RecyclerView is scrolling it will stop in the middle.
        // This code fixes this. This code is not strictly necessary but it improves the behaviour.

        if (state == SCROLL_STATE_IDLE) {
            LinearLayoutManager linearLayoutManager = (LinearLayoutManager) getLayoutManager();

            int screenWidth = Resources.getSystem().getDisplayMetrics().widthPixels;

            // views on the screen
            int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();
            View lastView = linearLayoutManager.findViewByPosition(lastVisibleItemPosition);
            int firstVisibleItemPosition = linearLayoutManager.findFirstVisibleItemPosition();
            View firstView = linearLayoutManager.findViewByPosition(firstVisibleItemPosition);

            // distance we need to scroll
            int leftMargin = (screenWidth - lastView.getWidth()) / 2;
            int rightMargin = (screenWidth - firstView.getWidth()) / 2 + firstView.getWidth();
            int leftEdge = lastView.getLeft();
            int rightEdge = firstView.getRight();
            int scrollDistanceLeft = leftEdge - leftMargin;
            int scrollDistanceRight = rightMargin - rightEdge;

            if (leftEdge &gt; screenWidth / 2) {
                smoothScrollBy(-scrollDistanceRight, 0);
            } else if (rightEdge &lt; screenWidth / 2) {
                smoothScrollBy(scrollDistanceLeft, 0);
            }
        }
    }

}
</code></pre>

<p>Enjoy!</p>
