<p>That is a compiler warning because you are ignoring the generics and using "raw" types. Ypu need to specify the generics as follows:</p>

<pre><code>private static &lt;K, V extends Comparable&lt;V&gt;&gt; Map&lt;K, V&gt; sortByComparator(Map&lt;K, V&gt; unsortMap) {

    List&lt;Map.Entry&lt;K, V&gt;&gt; list = new LinkedList&lt;Map.Entry&lt;K, V&gt;&gt;(unsortMap.entrySet());

    //sort list based on comparator
    Collections.sort(list, new Comparator&lt;Map.Entry&lt;K, V&gt;&gt;() {
        @Override
         public int compare(Map.Entry&lt;K, V&gt; o1, Map.Entry&lt;K, V&gt; o2) {
           return o1.getValue().compareTo(o2.getValue());
         }
    });

    //put sorted list into map again
    Map&lt;K, V&gt; sortedMap = new LinkedHashMap&lt;K, V&gt;();
    for (Iterator&lt;Map.Entry&lt;K, V&gt;&gt; it = list.iterator(); it.hasNext();) {
         Map.Entry&lt;K, V&gt; entry = it.next();
         sortedMap.put(entry.getKey(), entry.getValue());
    }
    return sortedMap;
}
</code></pre>

<p>What's going on here, is that by specifying the generic types you're telling the compiler what types of objects these collections contain. Because of this I've been able to eliminate all the casts in the comparator and second loop. This makes the method actually type safe and checkable by the compiler.</p>

<p>What the compiler is telling you with the warning is that because you're using raw types and casting it can't check the accuracy of your typing. The other option is to simply suppress this warning using @SuppressWarnings but it's better to actually make the method type safe.</p>
