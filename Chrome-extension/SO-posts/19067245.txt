<p>Came across a similar problem, wasn't also satisfied with the presented solutions and implemented this one myself.</p>

<p>Also available as a Gist on <a href="https://gist.github.com/uklimaschewski/6741769">Github</a>:</p>

<pre><code>/**
 * Unescapes a string that contains standard Java escape sequences.
 * &lt;ul&gt;
 * &lt;li&gt;&lt;strong&gt;&amp;#92;b &amp;#92;f &amp;#92;n &amp;#92;r &amp;#92;t &amp;#92;" &amp;#92;'&lt;/strong&gt; :
 * BS, FF, NL, CR, TAB, double and single quote.&lt;/li&gt;
 * &lt;li&gt;&lt;strong&gt;&amp;#92;X &amp;#92;XX &amp;#92;XXX&lt;/strong&gt; : Octal character
 * specification (0 - 377, 0x00 - 0xFF).&lt;/li&gt;
 * &lt;li&gt;&lt;strong&gt;&amp;#92;uXXXX&lt;/strong&gt; : Hexadecimal based Unicode character.&lt;/li&gt;
 * &lt;/ul&gt;
 * 
 * @param st
 *            A string optionally containing standard java escape sequences.
 * @return The translated string.
 */
public String unescapeJavaString(String st) {

    StringBuilder sb = new StringBuilder(st.length());

    for (int i = 0; i &lt; st.length(); i++) {
        char ch = st.charAt(i);
        if (ch == '\\') {
            char nextChar = (i == st.length() - 1) ? '\\' : st
                    .charAt(i + 1);
            // Octal escape?
            if (nextChar &gt;= '0' &amp;&amp; nextChar &lt;= '7') {
                String code = "" + nextChar;
                i++;
                if ((i &lt; st.length() - 1) &amp;&amp; st.charAt(i + 1) &gt;= '0'
                        &amp;&amp; st.charAt(i + 1) &lt;= '7') {
                    code += st.charAt(i + 1);
                    i++;
                    if ((i &lt; st.length() - 1) &amp;&amp; st.charAt(i + 1) &gt;= '0'
                            &amp;&amp; st.charAt(i + 1) &lt;= '7') {
                        code += st.charAt(i + 1);
                        i++;
                    }
                }
                sb.append((char) Integer.parseInt(code, 8));
                continue;
            }
            switch (nextChar) {
            case '\\':
                ch = '\\';
                break;
            case 'b':
                ch = '\b';
                break;
            case 'f':
                ch = '\f';
                break;
            case 'n':
                ch = '\n';
                break;
            case 'r':
                ch = '\r';
                break;
            case 't':
                ch = '\t';
                break;
            case '\"':
                ch = '\"';
                break;
            case '\'':
                ch = '\'';
                break;
            // Hex Unicode: u????
            case 'u':
                if (i &gt;= st.length() - 5) {
                    ch = 'u';
                    break;
                }
                int code = Integer.parseInt(
                        "" + st.charAt(i + 2) + st.charAt(i + 3)
                                + st.charAt(i + 4) + st.charAt(i + 5), 16);
                sb.append(Character.toChars(code));
                i += 5;
                continue;
            }
            i++;
        }
        sb.append(ch);
    }
    return sb.toString();
}
</code></pre>
