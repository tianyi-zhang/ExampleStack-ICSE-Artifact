<p>Step #1: Create your own subclass of <code>ClickableSpan</code> that does what you want in its <code>onClick()</code> method (e.g., called <code>YourCustomClickableSpan</code>)</p>

<p>Step #2: Run a bulk conversion of all of the <code>URLSpan</code> objects to be <code>YourCustomClickableSpan</code> objects. I have a utility class for this:</p>

<pre><code>public class RichTextUtils {
    public static &lt;A extends CharacterStyle, B extends CharacterStyle&gt; Spannable replaceAll(Spanned original,
    Class&lt;A&gt; sourceType,
    SpanConverter&lt;A, B&gt; converter) {
        SpannableString result=new SpannableString(original);
        A[] spans=result.getSpans(0, result.length(), sourceType);

        for (A span : spans) {
            int start=result.getSpanStart(span);
            int end=result.getSpanEnd(span);
            int flags=result.getSpanFlags(span);

            result.removeSpan(span);
            result.setSpan(converter.convert(span), start, end, flags);
        }

        return(result);
    }

    public interface SpanConverter&lt;A extends CharacterStyle, B extends CharacterStyle&gt; {
        B convert(A span);
    }
}
</code></pre>

<p>You would use it like this:</p>

<pre><code>yourTextView.setText(RichTextUtils.replaceAll((Spanned)yourTextView.getText(),
                                             URLSpan.class,
                                             new URLSpanConverter()));
</code></pre>

<p>with a custom <code>URLSpanConverter</code> like this:</p>

<pre><code>class URLSpanConverter
      implements
      RichTextUtils.SpanConverter&lt;URLSpan, YourCustomClickableSpan&gt; {
    @Override
    public URLSpan convert(URLSpan span) {
      return(new YourCustomClickableSpan(span.getURL()));
    }
  }
</code></pre>

<p>to convert all <code>URLSpan</code> objects to <code>YourCustomClickableSpan</code> objects.</p>
