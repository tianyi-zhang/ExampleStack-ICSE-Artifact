<p>I ended up solving this by extending <code>ViewAnimator</code>, overriding <code>onMeasure</code> and setting the dimensions of the layout to the dimensions of the first child. Here's what I came up with. It's basically a small modification on the <code>FrameLayout.onMeasure</code> method.</p>

<pre><code>/**
 * Overrides the default {@link android.widget.FrameLayout#onMeasure(int, int)}
 * behavior to allow a main child to be defined which determines the size of the
 * layout. By default, the max size of all children is used as the layout size.
 */
public class SizePinnedViewAnimator extends ViewAnimator {
    private final int mainChildIndex;

    @SuppressWarnings("UnusedDeclaration")
    public SizePinnedViewAnimator(final Context context) {
        super(context);
        mainChildIndex = 0;
    }

    @SuppressWarnings("UnusedDeclaration")
    public SizePinnedViewAnimator(final Context context, final AttributeSet attrs) {
        super(context, attrs);

        TypedArray a = context.obtainStyledAttributes(
                attrs,
                R.styleable.SizePinnedViewAnimator);
        mainChildIndex = a.getInt(R.styleable.SizePinnedViewAnimator_mainChild, 0);
        a.recycle();
    }

    /**
     * {@inheritDoc}
     *
     * Copied from {@link android.widget.FrameLayout#onMeasure(int, int)}
     */
    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        final int count = getChildCount();

        View mainChild = getChildAt(mainChildIndex);
        if(mainChild == null) {
            throw new IllegalStateException("No child at index " + mainChildIndex);
        }

        measureChildWithMargins(mainChild, widthMeasureSpec, 0, heightMeasureSpec, 0);

        int maxHeight = mainChild.getMeasuredHeight();
        int maxWidth = mainChild.getMeasuredWidth();

        widthMeasureSpec = MeasureSpec.makeMeasureSpec(maxWidth, MeasureSpec.AT_MOST);
        heightMeasureSpec = MeasureSpec.makeMeasureSpec(maxHeight, MeasureSpec.AT_MOST);

        // Find rightmost and bottommost child
        for (int i = 0; i &lt; count; i++) {
            if(i == mainChildIndex) continue;

            final View child = getChildAt(i);
            if (getConsiderGoneChildrenWhenMeasuring() || child.getVisibility() != GONE) {
                measureChildWithMargins(child, widthMeasureSpec, 0, heightMeasureSpec, 0);
            }
        }

        // Don't have access to the foreground padding numbers, but we're not
        // using a foreground drawable anyway, so ignore it.

        // Account for padding too
        maxWidth += getPaddingLeft() + getPaddingRight();
        maxHeight += getPaddingTop() + getPaddingBottom();

        // Check against our minimum height and width
        maxHeight = Math.max(maxHeight, getSuggestedMinimumHeight());
        maxWidth = Math.max(maxWidth, getSuggestedMinimumWidth());

        setMeasuredDimension(resolveSize(maxWidth, widthMeasureSpec),
                resolveSize(maxHeight, heightMeasureSpec));
    }
}
</code></pre>

<p>And the attribute defined in <code>res/values/attrs.xml</code>:</p>

<pre><code>&lt;declare-styleable name="SizePinnedViewAnimator"&gt;
    &lt;attr name="mainChild" format="integer" /&gt;
&lt;/declare-styleable&gt;
</code></pre>
