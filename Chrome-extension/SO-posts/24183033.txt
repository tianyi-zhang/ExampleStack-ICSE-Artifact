<pre><code>In oncreate you have to create your db. I am sending you my db class.



import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DbAdapter extends SQLiteOpenHelper {

    private static DbAdapter mDbHelper;

    public static final String DATABASE_NAME = "demoDb";


    public static final String TABLE_Coin= "coin_table";
    public static final String TABLE_Inbox= "inbox";
    public static final String TABLE_Feature= "feature";
    public static final String TABLE_Time= "time";
    public static final String TABLE_Deduct_money= "deduct_time";
    public static final String TABLE_Unread_message= "unread_message";



    public static final String COLUMN_Email= "email";
    public static final String COLUMN_Appearence= "appearence";
    public static final String COLUMN_Drivability= "drivability";
    public static final String COLUMN_Fuel= "fuel";
    public static final String COLUMN_Insurance= "insurance";

    public static final String COLUMN_Wow= "wow";
    public static final String COLUMN_CurrentValue= "current_value";
    public static final String COLUMN_coin = "name";
    public static final String COLUMN_seenTime = "seen";
    public static final String COLUMN_number_of_times = "number_of_times";
    public static final String COLUMN_name = "name";

    public static final String COLUMN_type = "type";
    public static final String COLUMN_text = "text";
    public static final String COLUMN_image = "image";
    public static final String COLUMN_created_time = "created_time";

    public static final String COLUMN_unread = "unread";

    // ****************************************

    private static final int DATABASE_VERSION = 1;


    private final String DATABASE_CREATE_BOOKMARK = "CREATE TABLE "
            + TABLE_Coin + "(" + COLUMN_coin
            + " Varchar,"+COLUMN_Email +" Varchar, UNIQUE("
            + COLUMN_Email + ") ON CONFLICT REPLACE)";


    private final String DATABASE_CREATE_BOOKMARK1 = "CREATE TABLE "
            + TABLE_Feature + "(" + COLUMN_Appearence
            + " Integer,"+COLUMN_Email +" Varchar ,"+COLUMN_name +" Varchar ,"+COLUMN_Drivability +" Integer ,"+COLUMN_Wow +" Integer,"+COLUMN_CurrentValue +" Integer,"+COLUMN_Fuel +" Integer,"+COLUMN_Insurance +" Integer, UNIQUE("
            + COLUMN_Email + ") ON CONFLICT REPLACE)";


    private final String DATABASE_CREATE_BOOKMARK2 = "CREATE TABLE "
            + TABLE_Time + "(" + COLUMN_Email +" Varchar ,"+COLUMN_seenTime +" Integer,"+COLUMN_number_of_times +" Integer, UNIQUE("
            + COLUMN_Email + ") ON CONFLICT REPLACE)";



    private final String DATABASE_CREATE_BOOKMARK3 = "CREATE TABLE "
            + TABLE_Deduct_money + "(" + COLUMN_seenTime
            + " Varchar,"+ COLUMN_number_of_times
            + " Integer,"+COLUMN_Email +" Varchar, UNIQUE("
            + COLUMN_Email + ") ON CONFLICT REPLACE)";


    private final String DATABASE_CREATE_BOOKMARK4 = "CREATE TABLE "
            + TABLE_Inbox + "(" + COLUMN_created_time
            + " DATETIME,"+ COLUMN_image
            + " Varchar,"
            + COLUMN_type
            + " Varchar,"+ COLUMN_name
            + " Varchar,"+ COLUMN_text
            + " Varchar,"+COLUMN_Email +" Varchar)";


    private final String DATABASE_CREATE_BOOKMARK5 = "CREATE TABLE "
            + TABLE_Unread_message + "(" + COLUMN_unread
            + " Varchar,"+COLUMN_Email +" Varchar, UNIQUE("
            + COLUMN_Email + ") ON CONFLICT REPLACE)";

    private DbAdapter(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    public static synchronized DbAdapter getInstance(Context context) {
        if (mDbHelper == null) {
            mDbHelper = new DbAdapter(context);
        }

        return mDbHelper;
    }

    /**
     * Tries to insert data into table
     * 
     * @param contentValues
     * @param tablename
     * @throws SQLException
     *             on insert error
     */
    public void insertQuery(ContentValues contentValues, String tablename)
            throws SQLException {

        try {
            final SQLiteDatabase writableDatabase = getWritableDatabase();
            writableDatabase.insert(tablename, null, contentValues);
            // writableDatabase.insertWithOnConflict(tablename, null,
            // contentValues,SQLiteDatabase.CONFLICT_REPLACE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //  public void insertReplaceQuery(ContentValues contentValues, String tablename)
    //          throws SQLException {
    //
    //      try {
    //          final SQLiteDatabase writableDatabase = getWritableDatabase();
    //          writableDatabase.insertOrThrow(tablename, null, contentValues);
    //
    //      } catch (Exception e) {
    //          e.printStackTrace();
    //      }
    //  }
    //
    //  /**
    //   * Update record by ID with contentValues
    //   * 
    //   * @param id
    //   * @param contentValues
    //   * @param tableName
    //   * @param whereclause
    //   * @param whereargs
    //   */
        public void updateQuery(ContentValues contentValues, String tableName,
                String whereclause, String[] whereargs) {

            try {
                final SQLiteDatabase writableDatabase = getWritableDatabase();
                writableDatabase.update(tableName, contentValues, whereclause,
                        whereargs);

            } catch (Exception e) {
                e.printStackTrace();

            }
        }

    public Cursor fetchQuery(String query) {
        final SQLiteDatabase readableDatabase = getReadableDatabase();
        final Cursor cursor = readableDatabase.rawQuery(query, null);
        if (cursor != null) {
            cursor.moveToFirst();
        }
        return cursor;
    }

    public Cursor fetchQuery(String query, String[] selectionArgs) {
        final SQLiteDatabase readableDatabase = getReadableDatabase();
        final Cursor cursor = readableDatabase.rawQuery(query, selectionArgs);

        if (cursor != null) {
            cursor.moveToFirst();
        }
        return cursor;
    }

    public void delete(String table) {
        final SQLiteDatabase writableDatabase = getWritableDatabase();
        writableDatabase.delete(table, null, null);
    }

    public void delete(String table, String whereClause, String[] selectionArgs) {
        final SQLiteDatabase writableDatabase = getWritableDatabase();
        writableDatabase.delete(table, whereClause, selectionArgs);
    }

    @Override
    public void onCreate(SQLiteDatabase db) {

        db.execSQL(DATABASE_CREATE_BOOKMARK);
        db.execSQL(DATABASE_CREATE_BOOKMARK1);
        db.execSQL(DATABASE_CREATE_BOOKMARK2);
        db.execSQL(DATABASE_CREATE_BOOKMARK3);
        db.execSQL(DATABASE_CREATE_BOOKMARK4);
        db.execSQL(DATABASE_CREATE_BOOKMARK5);

    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {

        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Coin);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Feature);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Time);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Deduct_money);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Inbox);
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_Unread_message);

        onCreate(db);

    }
}
</code></pre>
