<p>So this issue occurs with <code>VideoView</code> and with <code>MediaPlayer</code> + <code>SurfaceView</code>.</p>

<p><strong>When the system asks the video for it's width x height it is returning 640x480 when it should be returning 852x480.</strong> </p>

<p>i.e.</p>

<pre><code>@Override
public void onPrepared(MediaPlayer mp) {
    mp.getVideoWidth();
    mp.getVideoHeight();
}
</code></pre>

<p>This is either a bug in the <code>MediaPlayer</code> handling of the video container/codec or an issue with the video file itself.</p>

<p><img src="http://i.stack.imgur.com/a6Qm6.png" alt="GSpot Details"></p>

<p>Either way I have circumvented it by adding what I know the video's width and height is to my code. I have updated the <a href="https://github.com/blundell/VideoRatioProblemPerDevice" rel="nofollow">Git Repo</a> with this fix. <strong>hack alert</strong></p>

<p>Here's a link to the question where I found out the <a href="http://avp.stackexchange.com/questions/5819/how-does-gspot-calculate-recommended-display-size">different size details of my video</a>. </p>

<p>You can apply this fix to the <code>VideoView</code> or directly to <code>MediaPlayer</code> + <code>SurfaceView</code> your choice. Here's the <code>VideoView</code> answer:</p>

<pre><code>public class FitVideoView extends VideoView {

    private final int mVideoWidth = 853;
    private final int mVideoHeight = 480;
    private boolean applyFix = true;

    public FitVideoView(Context context) {
        super(context);
    }

    public FitVideoView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public FitVideoView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        if (applyFix) { // A Toggle so I can see both results
            // This doesn't ask the video for it's size, but uses my hardcoded size
            applyFix(widthMeasureSpec, heightMeasureSpec);
        } else {
            // This asks the video for its size (which gives an incorrect WxH) then does the same code as below
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }
    }

    private void applyFix(int widthMeasureSpec, int heightMeasureSpec) {
        int width = getDefaultSize(mVideoWidth, widthMeasureSpec);
        int height = getDefaultSize(mVideoHeight, heightMeasureSpec);
        if (mVideoWidth &gt; 0 &amp;&amp; mVideoHeight &gt; 0) {
            if (mVideoWidth * height &gt; width * mVideoHeight) {
                Log.d("TAG", "image too tall, correcting");
                height = width * mVideoHeight / mVideoWidth;
            } else if (mVideoWidth * height &lt; width * mVideoHeight) {
                Log.d("TAG", "image too wide, correcting");
                width = height * mVideoWidth / mVideoHeight;
            } else {
                Log.d("TAG", "aspect ratio is correct: " + width + "/" + height + "=" + mVideoWidth + "/" + mVideoHeight);
            }
        }
        Log.d("TAG", "setting size: " + width + 'x' + height);
        setMeasuredDimension(width, height);
    }
}
</code></pre>
