<p>May You solve the problem by loading images Asychronously </p>

<p>Use this code to set the images</p>

<pre><code>AsyncImageLoaderv asyncImageLoaderv=new AsyncImageLoaderv();
Bitmap cachedImage = asyncImageLoaderv.loadDrawable(imgurl, new AsyncImageLoaderv.ImageCallback() 
{
public void imageLoaded(Bitmap imageDrawable, String imageUrl) {
if(String.valueOf(imageDrawable).equals("null")){}
else{
img.setImageBitmap(imageDrawable);
}
}
});
img.setImageBitmap(cachedImage); 
</code></pre>

<p>The  AsyncImageLoaderv Class is Here</p>

<pre><code>import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.ref.SoftReference;
import java.net.URL;
import java.util.HashMap;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Message;
import android.util.Log;

public class AsyncImageLoaderv {
private HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache;

public AsyncImageLoaderv() {
imageCache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();
}

public Bitmap loadDrawable(final String imageUrl, final ImageCallback imageCallback) {

if (imageCache.containsKey(imageUrl)) {
SoftReference&lt;Bitmap&gt; softReference = imageCache.get(imageUrl);
Bitmap drawable = softReference.get();
if (drawable != null) {
return drawable;
}
}

final Handler handler = new Handler() {

@Override
public void handleMessage(Message message) {
imageCallback.imageLoaded((Bitmap) message.obj, imageUrl);
}
};

new Thread() {
@Override
public void run() {
try{
Log.d("ur",imageUrl);
Bitmap drawable = loadImageFromUrl(imageUrl);
imageCache.put(imageUrl, new SoftReference&lt;Bitmap&gt;(drawable));
Message message = handler.obtainMessage(0, drawable);
handler.sendMessage(message);
}catch(Exception e){Log.e("thread stellent",e.toString());}
}
}.start();
return null;
}

public static Bitmap loadImageFromUrl(String url) {
InputStream inputStream;Bitmap b;
try {
inputStream = (InputStream) new URL(url).getContent();
BitmapFactory.Options bpo=new BitmapFactory.Options();
bpo.inSampleSize=2;
//b=BitmapFactory.decodeStream(inputStream, null,bpo );
PatchInputStream patch=new PatchInputStream(inputStream);
b=BitmapFactory.decodeStream(patch);
return  b;
} catch (IOException e) {
throw new RuntimeException(e);
}

//return null;
}

public interface ImageCallback {
public void imageLoaded(Bitmap imageBitmap, String imageUrl);
}
}

class PatchInputStream extends FilterInputStream {
public PatchInputStream(InputStream in) {
super(in);
}

public long skip(long n) throws IOException {
long m = 0L;
while (m &lt; n) {
long _m = in.skip(n-m);
if (_m == 0L) break;
m += _m;
}
return m;
}
}
</code></pre>
