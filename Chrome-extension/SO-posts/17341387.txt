<p>I would make a defaultTableModel class which I would then use to populate the table. The advantage of doing so will also allow you to use the same class to populate all possible future tables as well.
Here is one I have used in the past:</p>

<pre><code>public class DefTableModel {
static DefaultTableModel buildTableModel(ResultSet rs)throws SQLException {

    ResultSetMetaData metaData = rs.getMetaData();
    Vector&lt;String&gt; columnNames = new Vector&lt;String&gt;();
    int columnCount = metaData.getColumnCount();
    for (int column = 1; column &lt;= columnCount; column++) {
        columnNames.add(metaData.getColumnName(column));
    }
    Vector&lt;Vector&lt;Object&gt;&gt; data = new Vector&lt;Vector&lt;Object&gt;&gt;();
    while (rs.next()) {
        Vector&lt;Object&gt; vector = new Vector&lt;Object&gt;();
        for (int columnIndex = 1; columnIndex &lt;= columnCount; columnIndex++) {
            vector.add(rs.getObject(columnIndex));
        }
        data.add(vector);
    }
    DefaultTableModel tableModel = new DefaultTableModel(data, columnNames) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };              
    return  tableModel;
    }
}
</code></pre>

<p>Then just on the method that creates the table, you initialize all needed components:</p>

<pre><code>public void methodNameHere(){
 PreparedStatement searchParameter=null;
 ResultSet rs=null;
 ConnectionClass connServer = new ConnectionClass();
 Connection conn=connServer.databaseConnect();
 try{
   searchParameter=conn.prepareStatement("SELECT * FROM student");
   rs = searchParameter.executeQuery(); 
    if(!rs.isBeforeFirst()){

    rs.close();
    searchParameter.close();  //dont forget to close all if nothing is found
    conn.close();
   }
  else{
     tableName.setModel(DefTableModel.buildTableModel(rs));
  }
 catch (SQLException e){
   //do something if you get an sql exception
 }
 catch (Exception e2){
  //do something incase of any other exception
 }
 finally {
     rs.close();
 searchParameter.close();  //dont forget to close all when done.
 conn.close();
 }
</code></pre>

<p>You can also then set the names of the columns within the table if you need, by altering the SQL sentence "SELECT (nameOfColumn) AS (newNameOfColumn) since this table model that I provided here gets the column names DIRECTLY from the database tables column names. Hope this helps.</p>
