<p>This one is super fast, because:</p>

<ul>
<li>No <code>toString()</code></li>
<li>No <code>BigInteger</code> math (Newton's/Continued fraction)</li>
<li>Not even instantiating a new <code>BigInteger</code></li>
<li>Only uses a fixed number of very fast operations</li>
</ul>

<p>One call takes about 20 microseconds (about 50k calls per second)</p>

<p>But:</p>

<ul>
<li>Only works for <code>BigInteger</code></li>
</ul>

<p>Workaround for <code>BigDecimal</code> (not tested for speed):</p>

<ul>
<li>Shift the decimal point until the value is > 2^53</li>
<li>Use <code>toBigInteger()</code> (uses one <code>div</code> internally)</li>
</ul>

<hr>

<p>This algorithm makes use of the fact that the log can be calculated as the sum of the exponent and the log of the mantissa. eg:</p>

<p>12345 has 5 digits, so the base 10 log is between 4 and 5.
log(12345) = 4 + log(1.2345) = 4.09149... (base 10 log)</p>

<hr>

<p>This function calculates base 2 log because finding the number of occupied bits is trivial.</p>

<pre><code>public double log(BigInteger val)
{
    // Get the minimum number of bits necessary to hold this value.
    int n = val.bitLength();

    // Calculate the double-precision fraction of this number; as if the
    // binary point was left of the most significant '1' bit.
    // (Get the most significant 53 bits and divide by 2^53)
    long mask = 1L &lt;&lt; 52; // mantissa is 53 bits (including hidden bit)
    long mantissa = 0;
    int j = 0;
    for (int i = 1; i &lt; 54; i++)
    {
        j = n - i;
        if (j &lt; 0) break;

        if (val.testBit(j)) mantissa |= mask;
        mask &gt;&gt;&gt;= 1;
    }
    // Round up if next bit is 1.
    if (j &gt; 0 &amp;&amp; val.testBit(j - 1)) mantissa++;

    double f = mantissa / (double)(1L &lt;&lt; 52);

    // Add the logarithm to the number of bits, and subtract 1 because the
    // number of bits is always higher than necessary for a number
    // (ie. log2(val)&lt;n for every val).
    return (n - 1 + Math.log(f) * 1.44269504088896340735992468100189213742664595415298D);
    // Magic number converts from base e to base 2 before adding. For other
    // bases, correct the result, NOT this number!
}
</code></pre>
