<p>I ever had the same confusion with you. According to my understanding, the reason for this switching is very simple - make followed merging step easier. No magic.</p>

<pre><code>    private static void mergeSortWithoutSwitch(Object[] src, Object[] dest, int low, int high, int off) {
    int length = high - low;

    // Insertion sort on smallest arrays
    if (length &lt; INSERTIONSORT_THRESHOLD) {
        for (int i = low; i &lt; high; i++)
            for (int j = i; j &gt; low &amp;&amp; ((Comparable) dest[j - 1]).compareTo(dest[j]) &gt; 0; j--)
                swap(dest, j, j - 1);
        return;
    }

    // Recursively sort halves of dest into src
    int destLow = low;
    int destHigh = high;
    low += off;
    high += off;
    int mid = (low + high) &gt;&gt;&gt; 1;
    mergeSortWithoutSwitch(src, dest, low, mid, off);
    mergeSortWithoutSwitch(src, dest, mid, high, off);

    // If list is already sorted, just copy from src to dest. This is an
    // optimization that results in faster sorts for nearly ordered lists.
    if (((Comparable) dest[mid - 1]).compareTo(dest[mid]) &lt;= 0) {
        return;
    }

    // Merge sorted halves (now in src) into dest
    for (int i = destLow, p = low, q = mid; i &lt; destHigh; i++) {
        if (q &gt;= high || p &lt; mid &amp;&amp; ((Comparable) dest[p]).compareTo(dest[q]) &lt;= 0)
            src[i] = dest[p++];
        else
            src[i] = dest[q++];
    }

    // copy back
    for (int i = destLow; i &lt; destHigh; i++) {
        dest[i] = src[i];
    }

}
</code></pre>

<p>Above is the implementation without switching, from the code, you can see we need one more step in merging - copy back. I think the parameter naming in mergeSort is a little confused, since the src is auxiliary array which is only used in merging step, it will be better to name it with aux (We can even remove it from method signature, and create a local variable when merging). And dest is the result array. </p>
