<p>I've found a solution to my problem. I used <code>openssl s_client -connect my_server.com:443 -CApath /etc/ssl/certs/</code> to check my ssl certificate. It returned the wrong certificate! It turned out that i had two different vHosts set up with different ssl certificates on the same ip. This requires the client to handle this: <a href="http://en.wikipedia.org/wiki/Server_Name_Indication" rel="nofollow">http://en.wikipedia.org/wiki/Server_Name_Indication</a> . </p>

<p>As it turns out Android seems not to handle this, at least when using this code:</p>

<pre><code>String responseString = "";

    HttpClient httpclient = new DefaultHttpClient();
    HttpResponse response;
    try {
        response = httpclient.execute(new HttpGet(uri[0]));
        StatusLine statusLine = response.getStatusLine();
        if(statusLine.getStatusCode() == HttpStatus.SC_OK || statusLine.getStatusCode() == 428){
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            response.getEntity().writeTo(out);
            out.close();
            responseString = out.toString();
        } else{
            //Closes the connection.
            response.getEntity().getContent().close();
            throw new IOException(statusLine.getReasonPhrase());
        }
    } catch (ClientProtocolException e) {
        Log.e("err",e.getMessage());
    } catch (IOException e) {
        Log.e("err",e.getMessage());
    }
    return responseString;
</code></pre>

<p>I removed the second vHost so that in every situation only one certificate is returned from the server. Now the <code>javax.net.ssl.SSLPeerUnverifiedException: No peer certificate</code> exception disappeared.</p>
