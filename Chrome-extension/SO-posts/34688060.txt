<p>You should implement a view holder pattern in your adapter. Here's an example of the <code>Adapter.getView</code> method from one of my apps that implements this pattern:</p>

<pre><code>@Override
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolder viewHolder;

    if (convertView == null) {
        final LayoutInflater inflater = LayoutInflater.from(getContext());
        convertView = inflater.inflate(R.layout.list_item_feeling, parent, false);

        viewHolder = new ViewHolder();
        viewHolder.imageViewFeeling = (ImageView) convertView.findViewById(R.id.imageview_feeling);
        viewHolder.textViewFeeling = (TextView) convertView.findViewById(R.id.textview_feeling);

        convertView.setTag(viewHolder);
    } else {
        viewHolder = (ViewHolder) convertView.getTag();
    }

    final Feeling feeling = getItem(position);

    viewHolder.imageViewFeeling.setImageResource(feeling.getDrawable());
    viewHolder.textViewFeeling.setText(feeling.getLabel());

    return convertView;
}
</code></pre>

<p>The ViewHolder class is simple and just holds references to the views:</p>

<pre><code>private static class ViewHolder {
    ImageView imageViewFeeling;
    TextView textViewFeeling;
}
</code></pre>

<p>The idea is that the <code>inflate</code> and <code>findViewById</code> methods are heavy and if you already have a <code>View</code> there is no need to recreate it.</p>

<p>You might also consider replacing the <code>ListView</code> with a <a href="http://developer.android.com/reference/android/support/v7/widget/RecyclerView.html" rel="nofollow"><code>RecyclerView</code></a> which forces the view holder pattern.</p>
