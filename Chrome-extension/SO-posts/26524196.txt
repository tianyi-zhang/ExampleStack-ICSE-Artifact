<p>I modified Chris Jenkins answer to make it more robust. With this, even if the user edits the middle of the text, the spacing characters are still inserted (and automatically removed on wrong places) correctly.</p>

<p>To make this work correctly, make sure the <code>EditText</code> attributes are set as follows (note the space on <code>digits</code>):</p>

<pre><code>android:digits="01234 56789"
android:inputType="number"
android:maxLength="19"
</code></pre>

<p>Then here is the <code>TextWatcher</code> you need. The anonymous class can also be made static since this is independent of the <code>EditText</code>.</p>

<pre><code>    yourTextView.addTextChangedListener(new TextWatcher() {
        private static final char space = ' ';

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
        }

        @Override
        public void beforeTextChanged(CharSequence s, int start, int count, int after) {
        }

        @Override
        public void afterTextChanged(Editable s) {
            // Remove all spacing char
            int pos = 0;
            while (true) {
                if (pos &gt;= s.length()) break;
                if (space == s.charAt(pos) &amp;&amp; (((pos + 1) % 5) != 0 || pos + 1 == s.length())) {
                    s.delete(pos, pos + 1);
                } else {
                    pos++;
                }
            }

            // Insert char where needed.
            pos = 4;
            while (true) {
                if (pos &gt;= s.length()) break;
                final char c = s.charAt(pos);
                // Only if its a digit where there should be a space we insert a space
                if ("0123456789".indexOf(c) &gt;= 0) {
                    s.insert(pos, "" + space);
                }
                pos += 5;
            }
        }
    });
</code></pre>
