<p>For Controlling Image Size and Image quality by this code</p>

<pre><code>            Uri uri = Uri.fromFile(new File(imagepath));
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(mcontext.getContentResolver()
                    .openInputStream(uri), null, o);

            Bitmap bitmap = BitmapFactory.decodeStream(mcontext
                    .getContentResolver().openInputStream(uri), null,
                    scalingBitmap(o));
            int orientation = 0;
            try {
                ExifInterface ei = new ExifInterface(uri.getPath());

                orientation = ei.getAttributeInt(
                        ExifInterface.TAG_ORIENTATION,
                        ExifInterface.ORIENTATION_NORMAL);

                Log.d("image", "orientation is " + orientation);
                bitmap = rotateImageOrientation(orientation, bitmap);
            } catch (Exception e) {

                e.printStackTrace();
            }
            Log.d("image", "bitmap width " + bitmap.getWidth() + " height "
                    + bitmap.getHeight());
</code></pre>

<p>// to uploading on server </p>

<pre><code>        byte[] data = null;
        HttpClient httpClient = new DefaultHttpClient();
        HttpContext localContext = new BasicHttpContext();
        HttpPost httpPost = new HttpPost(uploadPhotoUrl);

        HttpParams mHttpParams = new BasicHttpParams();
        HttpConnectionParams.setSoTimeout(mHttpParams, 150000);
        httpPost.setParams(mHttpParams);
        MultipartEntity entity = new MultipartEntity(
                HttpMultipartMode.BROWSER_COMPATIBLE); ByteArrayOutputStream bos = new ByteArrayOutputStream();
            bitmap.compress(CompressFormat.PNG, 90, bos);
            data = bos.toByteArray();
            entity.addPart("somefile", new ByteArrayBody(data, "temp.png"));  httpPost.setEntity(entity);
        HttpResponse response = httpClient.execute(httpPost, localContext);
        InputStream instream = response.getEntity().getContent();
</code></pre>

<p>//Create this method for finding scaling factor of Bitmap</p>

<pre><code>    BitmapFactory.Options scalingBitmap(BitmapFactory.Options options) {
    int width_tmp = options.outWidth, height_tmp = options.outHeight;
    Log.d("image", "image width" + width_tmp + "image height" + height_tmp);

    int scale = 1;
    int REQUIRED_SIZE = 200;
    while (true) {
        if (width_tmp / 2 &lt; REQUIRED_SIZE || height_tmp / 2 &lt; REQUIRED_SIZE) {
            break;
        }
        width_tmp /= 2;
        height_tmp /= 2;
        scale *= 2;
    }
    BitmapFactory.Options o2 = new BitmapFactory.Options();
    o2.inSampleSize = scale;
    return o2;
} 
</code></pre>

<p>// Create this method for controlling rotation of Bitmap </p>

<pre><code>       Bitmap rotateImageOrientation(int angle, Bitmap bitmap) {

    Matrix matrix = new Matrix();

    switch (angle) {
    case ExifInterface.ORIENTATION_NORMAL:
        System.out.println("ORIENTATION_NORMAL" + angle);

        return bitmap;
    case ExifInterface.ORIENTATION_FLIP_HORIZONTAL:
        matrix.setScale(-1, 1);
        System.out.println("ORIENTATION_FLIP_HORIZONTAL" + angle);

        break;
    case ExifInterface.ORIENTATION_ROTATE_180:
        matrix.setRotate(180);
        break;
    case ExifInterface.ORIENTATION_FLIP_VERTICAL:
        matrix.setRotate(180);
        matrix.postScale(-1, 1);
        break;
    case ExifInterface.ORIENTATION_TRANSPOSE:
        matrix.setRotate(90);
        matrix.postScale(-1, 1);
        break;
    case ExifInterface.ORIENTATION_ROTATE_90:
        matrix.setRotate(90);
        break;
    case ExifInterface.ORIENTATION_TRANSVERSE:
        matrix.setRotate(-90);
        matrix.postScale(-1, 1);
        break;
    case ExifInterface.ORIENTATION_ROTATE_270:
        matrix.setRotate(-90);
        break;
    default:
        return bitmap;
    }
    bitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(),
            bitmap.getHeight(), matrix, true);

    return bitmap;
}
</code></pre>
