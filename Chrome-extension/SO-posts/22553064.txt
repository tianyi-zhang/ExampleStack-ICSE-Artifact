<p>This can be achieved by implementing a Broadcast Receiver and listening for a TelephonyManager.ACTION_PHONE_STATE_CHANGED action.</p>

<p>Step 1:
Create Broadcast receiver class for incoming call</p>

<pre><code>package com.javaorigin.android.sample;

import java.lang.reflect.Method;

import com.android.internal.telephony.ITelephony;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent
import android.telephony.TelephonyManager;
import android.util.Log;

public class PhoneCallReceiver extends BroadcastReceiver {
 Context context = null;
 private static final String TAG = "Phone call";
 private ITelephony telephonyService;

 @Override
public void onReceive(Context context, Intent intent) {                                         // 2
    String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);                         // 3
    String msg = "Phone state changed to " + state;

    if (TelephonyManager.EXTRA_STATE_RINGING.equals(state)) {                                   // 4
        String incomingNumber = intent.getStringExtra(TelephonyManager.EXTRA_INCOMING_NUMBER);  // 5
        msg += ". Incoming number is " + incomingNumber;

        // TODO This would be a good place to "Do something when the phone rings" ;-)

    }

    Toast.makeText(context, msg, Toast.LENGTH_LONG).show();

}
</code></pre>

<p>}</p>

<p>Step 2:
Create IDL interface for getting core Telephony service 
package name must be com.android.internal.telephony</p>

<p>FileName : ITelephony.aidl
  package com.android.internal.telephony;</p>

<p>interface ITelephony {</p>

<pre><code>boolean endCall();


void answerRingingCall();


void silenceRinger();
</code></pre>

<p>}</p>

<p>Step 3:
AndroidManifest.xml configuration
  
<br>
    </p>

<pre><code>    &lt;receiver  android:name=".PhoneCallReceiver"&gt;
        &lt;intent-filter  android:priority="100" &gt;
            &lt;action android:name="android.intent.action.PHONE_STATE" /&gt;
        &lt;/intent-filter&gt;
    &lt;/receiver&gt;

&lt;/application&gt;
&lt;uses-sdk android:minSdkVersion="5" /&gt;
&lt;uses-permission android:name="android.permission.MODIFY_PHONE_STATE" /&gt;
&lt;uses-permission android:name="android.permission.CALL_PHONE" /&gt;
&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;

&lt;uses-sdk android:minSdkVersion="8" /&gt;
</code></pre>

<p></p>

<p>if contact no is saved in your contact list just try to get the name by using below method.just pass the return value "name" in text to speech then you can hear the name of caller.</p>

<pre><code>public String getContactDisplayNameByNumber(String number) {
    Uri uri = Uri.withAppendedPath(ContactsContract.PhoneLookup.CONTENT_FILTER_URI, Uri.encode(number));
    String name = "Incoming call from";

    ContentResolver contentResolver = c.getContentResolver();
    Cursor contactLookup = contentResolver.query(uri, null, null, null, null);

    try {
        if (contactLookup != null &amp;&amp; contactLookup.getCount() &gt; 0) {
            contactLookup.moveToNext();
            name = contactLookup.getString(contactLookup.getColumnIndex(ContactsContract.Data.DISPLAY_NAME));
            // this.id =
            // contactLookup.getString(contactLookup.getColumnIndex(ContactsContract.Data.CONTACT_ID));
            // String contactId =
            // contactLookup.getString(contactLookup.getColumnIndex(BaseColumns._ID));
        }
    } finally {
        if (contactLookup != null) {
            contactLookup.close();
        }
    }

    return name;
}
</code></pre>
