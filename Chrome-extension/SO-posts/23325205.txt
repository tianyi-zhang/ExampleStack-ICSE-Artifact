<p>Try this..</p>

<p><strong>First Portion</strong></p>

<pre><code>        if(!answerContent.endsWith("?"))
        {
            //we have an answer
            int enteredAnswer = Integer.parseInt(answerContent.substring(2));
            int exScore = getScore();

            if(enteredAnswer==answer) // error: enteredAnswer cannot be resolved to a variable
            {
            //correct
            scoreTxt.setText("Score: "+(exScore+1)); //error: exScore cannot be resolved to a variable
            response.setImageResource(R.drawable.tick);
            response.setVisibility(View.VISIBLE);
            }
        } else
        {
            //incorrect
            scoreTxt.setText("Score: 0");
            response.setImageResource(R.drawable.cross);
            response.setVisibility(View.VISIBLE);
            setHighScore();
        }
</code></pre>

<p><strong>Second Portion</strong></p>

<pre><code>private void setHighScore()
{
    //set high score
    int exScore = getScore();

    if(exScore&gt;0)
    {
        //we have a valid score
        SharedPreferences.Editor scoreEdit = gamePrefs.edit();
        DateFormat dateForm = new SimpleDateFormat("dd MMMM yyyy");
        String dateOutput = dateForm.format(new Date());
        String scores = gamePrefs.getString("highScores", "");

        if(scores.length()&gt;0)
        {
            //we have existing scores
        }
        else
        {
            //no existing scores
            scoreEdit.putString("highScores", ""+dateOutput+" - "+exScore);
            scoreEdit.commit();

            List&lt;Score&gt; scoreStrings = new ArrayList&lt;Score&gt;();
    String[] exScores = scores.split("\\|"); // error: scores cannot be resolved
    for(String eSc : exScores)
    {
        String[] parts = eSc.split(" - ");
        scoreStrings.add(new Score(parts[0], Integer.parseInt(parts[1])));
    }

    Score newScore = new Score(dateOutput, exScore); // error: dateOutput cannot be resolved to a variable
    scoreStrings.add(newScore);
    Collections.sort(scoreStrings);

    StringBuilder scoreBuild = new StringBuilder("");
    for(int s=0; s&lt;scoreStrings.size(); s++)
    {
        if(s&gt;=10) break;//only want ten
        if(s&gt;0) scoreBuild.append("|");//pipe separate the score strings
        scoreBuild.append(scoreStrings.get(s).getScoreText());
    }
    //write to prefs

    scoreEdit.putString("highScores", scoreBuild.toString()); //error: scoreEdit cannot be resolved
    scoreEdit.commit(); //error: scoreEdit cannot be resolved
        }
    }
}
</code></pre>
