<p>For short: use static method is OK.</p>

<p>When we say static methods should be a utility method, we are talking about that a static method should be thread-safe.</p>

<p>Let's see the SecurityContextHelper.getContext() method. It is implemented like this:</p>

<pre><code>private static SecurityContextHolderStrategy strategy;

public static SecurityContext getContext() {
    return strategy.getContext();
}
</code></pre>

<p>Notice that it returns context from a static variable <code>strategy</code>. So the <code>strategy</code> must keep thread-safe.</p>

<p><code>SecurityContextHolderStrategy</code> interface have three implementations:</p>

<p><img src="http://i.stack.imgur.com/bp3oX.png" alt="enter image description here"></p>

<p>two of them are thread local, the other one has a <code>private static SecurityContext contextHolder;</code></p>

<p>Then let's see SecurityContextHolder.initialize() method:</p>

<pre><code>private static void initialize() {
    if ((strategyName == null) || "".equals(strategyName)) {
        // Set default
        strategyName = MODE_THREADLOCAL;
    }

    if (strategyName.equals(MODE_THREADLOCAL)) {
        strategy = new ThreadLocalSecurityContextHolderStrategy();
    } else if (strategyName.equals(MODE_INHERITABLETHREADLOCAL)) {
        strategy = new InheritableThreadLocalSecurityContextHolderStrategy();
    } else if (strategyName.equals(MODE_GLOBAL)) {
        strategy = new GlobalSecurityContextHolderStrategy();
    } else {
        // Try to load a custom strategy
        try {
            Class&lt;?&gt; clazz = Class.forName(strategyName);
            Constructor&lt;?&gt; customStrategy = clazz.getConstructor();
            strategy = (SecurityContextHolderStrategy) customStrategy.newInstance();
        } catch (Exception ex) {
            ReflectionUtils.handleReflectionException(ex);
        }
    }

    initializeCount++;
}
</code></pre>

<p>This shows that MODE_THREADLOCAL is the default strategy. And even GlobalSecurityContextHolderStrategy uses a static context holder too. So you can use them in static method.</p>
