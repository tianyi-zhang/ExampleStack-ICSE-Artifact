<p><code>LinkedHashMap</code> preserves the order of insertion.</p>

<p>Output:</p>

<pre><code>Key : 3 Value : 4
Key : 1 Value : 3
Key : 2 Value : 2
</code></pre>

<p>Code:</p>

<pre><code>import java.util.*;

class SortMapValues {
    public static boolean ASC = true;
    public static boolean DESC = false;

    public static void main(String[] args) {
        // Creating dummy unsorted map
        Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();
        map.put(1, 3);
        map.put(2, 2);
        map.put(3, 4);

        Map&lt;Integer, Integer&gt; sortedMapDesc = sortByComparator(map, DESC);
        printMap(sortedMapDesc);

    }

    private static Map&lt;Integer, Integer&gt; sortByComparator(Map&lt;Integer, Integer&gt; map, final boolean order) {
        List&lt;Entry&lt;Integer, Integer&gt;&gt; list = new LinkedList&lt;Entry&lt;Integer, Integer&gt;&gt;(map.entrySet());

        // Sorting the list based on values
        Collections.sort(list, new Comparator&lt;Entry&lt;Integer, Integer&gt;&gt;() {
            public int compare(Entry&lt;Integer, Integer&gt; o1,
                    Entry&lt;Integer, Integer&gt; o2) {
                if (order) {
                    return o1.getValue().compareTo(o2.getValue());
                }
                else {
                    return o2.getValue().compareTo(o1.getValue());
                }
            }
        });

        // Maintaining insertion order with the help of LinkedList
        Map&lt;Integer, Integer&gt; sortedMap = new LinkedHashMap&lt;Integer, Integer&gt;();
        for (Entry&lt;Integer, Integer&gt; entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        return sortedMap;
    }

    public static void printMap(Map&lt;Integer, Integer&gt; map) {
        for (Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {
            System.out.println("Key : " + entry.getKey() + " Value : "+ entry.getValue());
        }
    }
}
</code></pre>
