<p><strike>If performance is not a priority,</strike> you can use the <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/regex/Matcher.html#appendReplacement%28java.lang.StringBuffer,%20java.lang.String%29" rel="nofollow"><code>appendReplacement</code> method of the <code>Matcher</code> class</a>:</p>

<pre><code>public class StrSubstitutor {
    private Map&lt;String, String&gt; map;
    private static final Pattern p = Pattern.compile("\\$\\{(.+?)\\}");

    public StrSubstitutor(Map&lt;String, String&gt; map) {
        this.map = map;
    }

    public String replace(String str) {
        Matcher m = p.matcher(str);
        StringBuilder sb = new StringBuilder();
        while (m.find()) {
            String var = m.group(1);
            String replacement = map.get(var);
            m.appendReplacement(sb, replacement);
        }
        m.appendTail(sb);
        return sb.toString();
    }
}
</code></pre>

<p>A more performant but uglier version, just for fun :)</p>

<pre><code>    public String replace(String str) {
        StringBuilder sb = new StringBuilder();
        char[] strArray = str.toCharArray();
        int i = 0;
        while (i &lt; strArray.length - 1) {
            if (strArray[i] == '$' &amp;&amp; strArray[i + 1] == '{') {
                i = i + 2;
                int begin = i;
                while (strArray[i] != '}') ++i;
                sb.append(map.get(str.substring(begin, i++)));
            } else {
                sb.append(strArray[i]);
                ++i;
            }
        }
        if (i &lt; strArray.length) sb.append(strArray[i]);
        return sb.toString();
    }
</code></pre>

<p>It's about 2x as fast as the regex version and 3x faster than the apache commons version as per my tests. So the normal regex stuff is actually more optimized than the apache version. Usually not worth it of course. Just for fun though, let me know if you can make it more optimized.</p>
