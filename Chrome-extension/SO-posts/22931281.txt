<pre><code>I have a suggestion.

In android GcmIntentService class onHandleIntent method us log.d to figure out notification is reaching at android end or not. Sometime our code for show notification is not working and we get confused on which side problem is occurring. Previously i have implemented push notification using C# PushSharp and i face same problem. but error was with my GcmIntentService, sendnotification code at android side.

working GCMIntentService class:

/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.app.burnhelp.service;
import java.util.Date;

import android.app.IntentService;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.media.RingtoneManager;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

import com.app.burnhelp.R;
import com.app.burnhelp.R.color;
import com.app.burnhelp.main.activity.LoginActivity;
import com.app.burnhelp.receiver.GcmBroadcastReceiver;
import com.google.android.gms.gcm.GoogleCloudMessaging;
/**
 * This {@code IntentService} does the actual handling of the GCM message.
 * {@code GcmBroadcastReceiver} (a {@code WakefulBroadcastReceiver}) holds a
 * partial wake lock for this service while the service does its work. When the
 * service is finished, it calls {@code completeWakefulIntent()} to release the
 * wake lock.
 */
public class GcmIntentService extends IntentService {
       public static final int NOTIFICATION_ID = 1;
        private NotificationManager mNotificationManager;
        NotificationCompat.Builder builder;
        private String TAG = "GcmIntentService";

        public GcmIntentService() {
            super("GcmIntentService");
        }

        @Override
        protected void onHandleIntent(Intent intent) {
            Bundle extras = intent.getExtras();
            GoogleCloudMessaging gcm = GoogleCloudMessaging.getInstance(this);
            // The getMessageType() intent parameter must be the intent you received
            // in your BroadcastReceiver.
            String messageType = gcm.getMessageType(intent);

            if (!extras.isEmpty()) {  // has effect of unparcelling Bundle
                /*
                 * Filter messages based on message type. Since it is likely that GCM
                 * will be extended in the future with new message types, just ignore
                 * any message types you're not interested in, or that you don't
                 * recognize.
                 */
                if (GoogleCloudMessaging.
                        MESSAGE_TYPE_SEND_ERROR.equals(messageType)) {
                    sendNotification("Send error: " + extras.toString());
                } else if (GoogleCloudMessaging.
                        MESSAGE_TYPE_DELETED.equals(messageType)) {
                    sendNotification("Deleted messages on server: " +
                            extras.toString());
                // If it's a regular GCM message, do some work.
                } else if (GoogleCloudMessaging.
                        MESSAGE_TYPE_MESSAGE.equals(messageType)) {
                     Log.i(TAG, "Working... ");
                     Date cal = new Date();
                     Log.d("Started at","started work on"+cal.getHours()+":"+cal.getMinutes()+":"+cal.getSeconds());

                    Log.i(TAG, "Completed work @ " + SystemClock.elapsedRealtime());
                    cal = new Date();
                    Log.d("End at","End work on"+cal.getHours()+":"+cal.getMinutes()+":"+cal.getSeconds());
                    // Post notification of received message.
                    sendNotification("" + extras.getString("collapse_key"));
                    cal = new Date();
                    Log.d("Done at","Done work on"+cal.getHours()+":"+cal.getMinutes()+":"+cal.getSeconds());

                    Log.i(TAG, "msg: " + extras.getString("msg"));
                    Log.i(TAG, "collapse_key: " + extras.getString("collapse_key"));
                    Log.i(TAG, "Received: " + extras);
                }
            }
            // Release the wake lock provided by the WakefulBroadcastReceiver.
            GcmBroadcastReceiver.completeWakefulIntent(intent);
        }

        // Put the message into a notification and post it.
        // This is just one simple example of what you might choose to do with
        // a GCM message.
        private void sendNotification(String msg) {
            mNotificationManager = (NotificationManager)
                    this.getSystemService(Context.NOTIFICATION_SERVICE);

            PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
                    new Intent(this, LoginActivity.class), 0);

            NotificationCompat.Builder mBuilder =
                    new NotificationCompat.Builder(this)
            .setSmallIcon(R.drawable.bhiogo)
            .setContentTitle("BurnHelp")
            .setStyle(new NotificationCompat.BigTextStyle()
            .bigText(msg))
            .setContentText(msg);           
          //Vibration and sound
            mBuilder.setVibrate(new long[] { 1000, 1000, 1000, 1000, 1000 });
            mBuilder.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));

         //LED
            mBuilder.setLights(color.sky_blue_1, 3000, 3000);
         //   mBuilder.defaults = Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE;
          //  Toast.makeText(getApplicationContext(), "New Message: " + msg, Toast.LENGTH_LONG).show();

            mBuilder.setContentIntent(contentIntent);
            mNotificationManager.notify(NOTIFICATION_ID, mBuilder.build());
        }


}
</code></pre>
