<p>Well this simply means that <code>inFromServer</code> does not receive any line.</p>

<p>Make sure you really send a line, </p>

<blockquote>
  <p>Reads a line of text. A line is considered to be terminated by any one
  of a line feed ('\n'), a carriage return ('\r'), or a carriage return
  followed immediately by a linefeed.</p>
</blockquote>

<p>Have a look at the <code>readLine</code> method :</p>

<pre><code>String readLine(boolean ignoreLF) throws IOException {
    StringBuffer s = null;
    int startChar;

    synchronized (lock) {
        ensureOpen();
        boolean omitLF = ignoreLF || skipLF;

    bufferLoop:
        for (;;) {

            if (nextChar &gt;= nChars)
                fill();
            if (nextChar &gt;= nChars) { /* EOF */
                if (s != null &amp;&amp; s.length() &gt; 0)
                    return s.toString();
                else
                    return null;
            }
            boolean eol = false;
            char c = 0;
            int i;

            /* Skip a leftover '\n', if necessary */
            if (omitLF &amp;&amp; (cb[nextChar] == '\n'))
                nextChar++;
            skipLF = false;
            omitLF = false;

        charLoop:
            for (i = nextChar; i &lt; nChars; i++) {
                c = cb[i];
                if ((c == '\n') || (c == '\r')) {
                    eol = true;
                    break charLoop;
                }
            }

            startChar = nextChar;
            nextChar = i;

            if (eol) {
                String str;
                if (s == null) {
                    str = new String(cb, startChar, i - startChar);
                } else {
                    s.append(cb, startChar, i - startChar);
                    str = s.toString();
                }
                nextChar++;
                if (c == '\r') {
                    skipLF = true;
                }
                return str;
            }

            if (s == null)
                s = new StringBuffer(defaultExpectedLineLength);
            s.append(cb, startChar, i - startChar);
        }
    }
}
</code></pre>

<p>Note that this one receive a boolean, but calling <code>readLine</code> simply call this one with <code>false</code> passed, unless on Linux.</p>

<p>Notice the <code>for(;;)</code> loop, which is an infinite loop.</p>

<p>Try concatening to the "line" sent from the server </p>

<pre><code>System.getProperty("line.separator");
</code></pre>
