<p>For this simple case, the most reasonable thing would be to translate your source image down to the middle, and draw your Bitmap again on a new Canvas.  This type of resize is called a <a href="http://developer.android.com/reference/android/widget/ImageView.ScaleType.html">center crop</a> in Android. The idea of a center crop is to result in the largest image that fills the entire bounds, and does not change the aspect ratio.</p>

<p>You can implement this yourself, along with other types of resizing and scaling.  Basically, you use a <a href="http://developer.android.com/reference/android/graphics/Matrix.html">Matrix</a> to post your changes, like scaling and moving (translating), and then draw your original Bitmap on a <a href="http://developer.android.com/reference/android/graphics/Canvas.html">Canvas</a> that takes the Matrix into account.</p>

<p>Here's a method I adopted from another answer here (can't find the original post to properly give credit):</p>

<pre><code>public static Bitmap scaleCenterCrop(Bitmap source, int newHeight, int newWidth)
{
    int sourceWidth = source.getWidth();
    int sourceHeight = source.getHeight();
    float xScale = (float) newWidth / sourceWidth;
    float yScale = (float) newHeight / sourceHeight;
    float scale = Math.max(xScale, yScale);

    //get the resulting size after scaling
    float scaledWidth = scale * sourceWidth;
    float scaledHeight = scale * sourceHeight;

    //figure out where we should translate to
    float dx = (newWidth - scaledWidth) / 2;
    float dy = (newHeight - scaledHeight) / 2;

    Bitmap dest = Bitmap.createBitmap(newWidth, newHeight, source.getConfig());
    Canvas canvas = new Canvas(dest);
    Matrix matrix = new Matrix();
    matrix.postScale(scale, scale);
    matrix.postTranslate(dx, dy);
    canvas.drawBitmap(source, matrix, null);
    return dest;
}
</code></pre>
