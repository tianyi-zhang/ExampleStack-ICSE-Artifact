<p>i know this question is older, but i think many people have a problem with that. As @CommonsWare stated out you have to provide your own URI like this:</p>

<pre><code>        photoFile = getOutputMediaFile();
        // Continue only if the File was successfully created
        if (photoFile != null) {
            String fileName = photoFile.getAbsolutePath();
            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photoFile));
             startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
        }
</code></pre>

<p>with a file like this:</p>

<pre><code>    public File getOutputMediaFile() {
    // To be safe, you should check that the SDCard is mounted
    // using Environment.getExternalStorageState() before doing this.
    File mediaStorageDir = new File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),
            "Shaufel");
    // This location works best if you want the created images to be shared
    // between applications and persist after your app has been uninstalled.

    // Create the storage directory if it does not exist
    if (!mediaStorageDir.exists()) {
        if (!mediaStorageDir.mkdirs()) {
            // base.saveValidationError("MyCameraApp: failed to create directory");
            return null;
        }
    }

    // Create a media file name
    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
    File mediaFile = new File(mediaStorageDir.getPath() + File.separator + "IMG_" + timeStamp
            + ".jpg");
    return mediaFile;
}
</code></pre>

<p>just safe in your application the fileName (perhaps also onSaveInstanceState()) </p>

<p>in onActivityResult i load the bitmap like this</p>

<pre><code>        public Bitmap decodeSampledBitmapFromResource(Resources res, File file, int reqWidth,
            int reqHeight) throws IOException {
        FileInputStream ino = new FileInputStream(new File(fileName));

        // First decode with inJustDecodeBounds=true to check dimensions
        final BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFileDescriptor(ino.getFD(), null, options);
        ino.close();

        // Calculate inSampleSize
        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

        // Decode bitmap with inSampleSize set
        options.inJustDecodeBounds = false;
        return BitmapFactory.decodeFile(fileName, options);
    }

    public int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {

        this.reqHeight = reqHeight;
        this.reqWidth = reqWidth;
        // Raw height and width of image
        this.height = options.outHeight;
        this.width = options.outWidth;
        int inSampleSize = 1;
        if (height &gt; reqHeight || width &gt; reqWidth) {

            final int halfHeight = height / 2;
            final int halfWidth = width / 2;

            // Calculate the largest inSampleSize value that is a power
            // of 2 and keeps both
            // height and width larger than the requested height and
            // width.
            while ((halfHeight / inSampleSize) &gt; reqHeight
                    || (halfWidth / inSampleSize) &gt; reqWidth) {
                inSampleSize *= 2;
            }
        }

        return inSampleSize;
    }
</code></pre>
