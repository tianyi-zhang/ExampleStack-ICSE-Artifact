<p>One way using the android <code>XmlPullParser</code> (you didn't specify which one you were using) is to pull the attributes into a <code>Map&lt;String, String&gt;</code> when you receive a XmlPullParser.START_TAG, so, assuming a main parse::</p>

<pre><code>private void parseContent(XmlPullParser parser) 
    throws XmlPullParserException,IOException,Exception {
    int eventType;
    while((eventType=parser.next()) != XmlPullParser.END_TAG) {
        if (eventType == XmlPullParser.START_TAG) {
            Log.d(MY_DEBUG_TAG,"Parsing Attributes for ["+parser.getName()+"]");
            Map&lt;String,String&gt; attributes = getAttributes(parser);
        }
        else if(eventType==...);
        else {
            throw new Exception("Invalid tag at content parse");
        }
    }
}

private Map&lt;String,String&gt;  getAttributes(XmlPullParser parser) throws Exception {
    Map&lt;String,String&gt; attrs=null;
    int acount=parser.getAttributeCount();
    if(acount != -1) {
        Log.d(MY_DEBUG_TAG,"Attributes for ["+parser.getName()+"]");
        attrs = new HashMap&lt;String,String&gt;(acount);
        for(int x=0;x&lt;acount;x++) {
            Log.d(MY_DEBUG_TAG,"\t["+parser.getAttributeName(x)+"]=" +
                    "["+parser.getAttributeValue(x)+"]");
            attrs.put(parser.getAttributeName(x), parser.getAttributeValue(x));
        }
    }
    else {
        throw new Exception("Required entity attributes missing");
    }
    return attrs;
}
</code></pre>

<p>The <code>parser.getName()</code> returns the name of the entity associated to the <code>XmlPullParser.START_TAG</code>. </p>

<p>Hope this helps</p>
