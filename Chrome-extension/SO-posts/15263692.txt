<p>you can use inSampleSize to reduce memory occupied.</p>

<p>Here is my code</p>

<pre><code>public static Bitmap decodeAndResizeFile(File f) {
    try {
        // Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(new FileInputStream(f), null, o);

        // The new size we want to scale to
        final int REQUIRED_SIZE = 70;

        // Find the correct scale value. It should be the power of 2.
        int width_tmp = o.outWidth, height_tmp = o.outHeight;
        int scale = 1;
        while (true) {
            if (width_tmp / 2 &lt; REQUIRED_SIZE || height_tmp / 2 &lt; REQUIRED_SIZE)
                break;
            width_tmp /= 2;
            height_tmp /= 2;
            scale *= 2;
        }

        // Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
    } catch (FileNotFoundException e) {
    }
    return null;
}
</code></pre>

<p>Here, it will decode image using <code>inSampleSize</code> and this code will find the best <code>inSampleSize</code> values for you.</p>

<p>It worked Fine for me.</p>

<p>if you don't want to use above code, You can also use <code>bitmap.recycle()</code> and <code>System.gc()</code> to release unused memory.But, above one works fine for me. You can use either of the two.</p>

<pre><code>objbitmap.recycle();
objbitmap = null;
System.gc();
</code></pre>

<p>Hope, this may solve the issue!</p>
