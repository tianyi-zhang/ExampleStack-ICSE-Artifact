<p>I found a better example and wanna share my stuff with you. There is just one problem left, that I dont get it sized.</p>

<pre><code>package view;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CountryComboBox extends JPanel {
    ImageIcon[] images;
    String[] imgStrings = {"de"};

    /*
     * Despite its use of EmptyBorder, this panel makes a fine content
     * pane because the empty border just increases the panel's size
     * and is "painted" on top of the panel's normal background.  In
     * other words, the JPanel fills its entire background if it's
     * opaque (which it is by default); adding a border doesn't change
     * that.
     */
    public CountryComboBox() {
        super(new BorderLayout());

        //Load the images and create an array of indexes.
        images = new ImageIcon[imgStrings.length];
        Integer[] intArray = new Integer[imgStrings.length];
        for (int i = 0; i &lt; imgStrings.length; i++) {
            intArray[i] = new Integer(i);
            images[i] = createImageIcon("/res/" + imgStrings[i] + ".png");
            if (images[i] != null) {
                images[i].setDescription(imgStrings[i]);
            }
        }

        //Create the combo box.
        JComboBox imgList = new JComboBox(intArray);
        ComboBoxRenderer renderer= new ComboBoxRenderer();
        imgList.setRenderer(renderer);
        imgList.setMaximumRowCount(3);

        //Lay out the demo.
        add(imgList, BorderLayout.PAGE_START);
        //setBorder(BorderFactory.createEmptyBorder(20,20,20,20));
    }

    /** Returns an ImageIcon, or null if the path was invalid. */
    protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = CountryComboBox.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
                return null;
        }
    }

    class ComboBoxRenderer extends JLabel
                           implements ListCellRenderer {
        private Font uhOhFont;

        public ComboBoxRenderer() {
            setOpaque(true);
            setHorizontalAlignment(CENTER);
            setVerticalAlignment(CENTER);
        }

        /*
         * This method finds the image and text corresponding
         * to the selected value and returns the label, set up
         * to display the text and image.
         */
        @Override
        public Component getListCellRendererComponent(
                                           JList list,
                                           Object value,
                                           int index,
                                           boolean isSelected,
                                           boolean cellHasFocus) {
            //Get the selected index. (The index param isn't
            //always valid, so just use the value.)
            int selectedIndex = ((Integer)value).intValue();

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            //Set the icon and text.  If icon was null, say so.
            ImageIcon icon = images[selectedIndex];
            String img = imgStrings[selectedIndex];
            setIcon(icon);
            if (icon != null) {
                setText(img);
                setFont(list.getFont());
            } else {
                setUhOhText(img + " (no image available)",
                            list.getFont());
            }

            return this;
        }

        //Set the font and text when no image was found.
        protected void setUhOhText(String uhOhText, Font normalFont) {
            if (uhOhFont == null) { //lazily create this font
                uhOhFont = normalFont.deriveFont(Font.ITALIC);
            }
            setFont(uhOhFont);
            setText(uhOhText);
        }
    }
}
</code></pre>

<p>I call it in a JPanel with absolute layout:</p>

<pre><code>JComponent newContentPane = new CountryComboBox();
newContentPane.setOpaque(true); //content panes must be opaque
newContentPane.setBounds(10, 75, 50, 26);
contentPane.add(newContentPane);
</code></pre>

<p>setBounds isnt working, just to get the right position. I cant size it with this.</p>

<p>Best regards
Acanis</p>
