<p>After diving into the source code, I discovered the <code>FloatingActionButton</code>, when attached to the <code>AppBarLayout</code>, is set to appear only when the space available is <code>&lt;=appBarLayout.getMinimumHeightForVisibleOverlappingContent()</code>, which is 2*minimum height(the <code>Toolbar</code>, in this case), plus the status bar. So in portrait on a phone, 56*2+26 = 138dp. I confirmed this by setting mine to 138dp, which works, and 137dp does not. If you want to get around this, you can either override <code>getMinimumHeightForVisibleOverlappingContent()</code> in <code>AppBarLayout</code>, or the following method in <code>FloatingActionButton</code>:</p>

<pre><code>public boolean onDependentViewChanged(CoordinatorLayout parent, FloatingActionButton child, View dependency) {
        if(dependency instanceof SnackbarLayout) {
            this.updateFabTranslationForSnackbar(parent, child, dependency);
        } else if(dependency instanceof AppBarLayout) {
            AppBarLayout appBarLayout = (AppBarLayout)dependency;
            if(this.mTmpRect == null) {
                this.mTmpRect = new Rect();
            }

            Rect rect = this.mTmpRect;
            ViewGroupUtils.getDescendantRect(parent, dependency, rect);
            if(rect.bottom &lt;= appBarLayout.getMinimumHeightForVisibleOverlappingContent()) {
                if(!this.mIsAnimatingOut &amp;&amp; child.getVisibility() == 0) {
                    this.animateOut(child);
                }
            } else if(child.getVisibility() != 0) {
                this.animateIn(child);
            }
        }
        return false;
    }
</code></pre>

<p>As for the <code>CollapsingToolbarLayout</code> elevation, I haven't found a workaround yet. </p>
