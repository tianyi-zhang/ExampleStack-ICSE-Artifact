<p>I just managed to solve the problem you're experiencing.</p>

<p>First of all i have to say that i'm working on <strong>Android Studio 1.1.0</strong> generated NavigationDrawer project.</p>

<p>This is the method <strong>onCreateView()</strong> of the class <strong>NavigationDrawerFragment</strong></p>

<pre><code>@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState)
{
    mDrawerListView = (ListView) inflater.inflate(
            R.layout.fragment_navigation_drawer, container, false);

    mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
    {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id)
        {
            selectItem(position);
        }
    });

    mDrawerListView.setAdapter(new ArrayAdapter&lt;String&gt;(
            getActionBar().getThemedContext(),
            android.R.layout.simple_list_item_activated_1,
            android.R.id.text1,
            new String[]{
                    getString(R.string.title_section1),
                    getString(R.string.title_section2),
                    getString(R.string.title_section3),
            }));

    mDrawerListView.setItemChecked(mCurrentSelectedPosition, true);

    return mDrawerListView;
}
</code></pre>

<p>When a Item is clicked the</p>

<blockquote>
  <p>mDrawerListView.setOnItemClickListener()</p>
</blockquote>

<p>callback will fire and then the ball pass to</p>

<blockquote>
  <p>selectItem(position)</p>
</blockquote>

<p>method.</p>

<p>The "selectItem()" method hides the NavigationDrawer and, using a callback, it calls a method into the "MainActivity" class -<strong>onNavigationDrawerItemSelected()</strong>-, that start the transition to the selected fragment.</p>

<p>The animation stuttering/lag happens because the code tries to close the NavigationDrawer and to get the UI layout hardcore job done at the same time.</p>

<p>If you want to avoid the lag you have to choose what to do first.</p>

<p>In my own workaround i decided to:</p>

<ol>
<li>Close the NavigationDrawer</li>
<li>Getting the UI (layout) job done</li>
</ol>

<p>This is my own solution:</p>

<pre><code>mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
{
    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id)
    {
        final int pos = position;

        mDrawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener(){
            @Override
            public void onDrawerClosed(View drawerView)
            {
                super.onDrawerClosed(drawerView);
                selectItem(pos);
            }
        });

        mDrawerLayout.closeDrawer(mFragmentContainerView);
    }
});
</code></pre>

<p>Don't be confused by the code.</p>

<p>We moved the <strong>selectItem(pos)</strong> inside a callback that will be fired only then the Drawer is closed and then we force the Drawer to close so the magic may occur.</p>

<p>This solution work for me, hope to know if it works for you as well.</p>
