<p>I suggest not trying to make your own sorting algorithm.  Many smart people have already done that hard work for you.</p>

<p>The "recursive" sort that you were trying to implement (aka bubble sort which Ted has shown you how to truly make recursive) will work, but it is grossly inefficient.  See a comparison of sorting algorithms <a href="http://www.sorting-algorithms.com/" rel="nofollow">here</a>.</p>

<p>Below is a demo of the algorithm you were trying to implement compared to a shell sort, one of the fastest sorting algorithms available.  The implementation I used was taken from <a href="http://algs4.cs.princeton.edu/21elementary/Shell.java.html" rel="nofollow">here</a>.  Run it and you will see that shell sort is on average 7 to 8 times faster than bubble sort.</p>

<pre><code>public class SortingDemo {
    // Methods required for Shell sort
    public static void shellSort(Comparable[] a) {
        int N = a.length;
        int h = 1;
        while (h &lt; N/3) h = 3*h + 1;

        while (h &gt;= 1) {
            for (int i = h; i &lt; N; i++) {
                for (int j = i; j &gt;= h &amp;&amp; less(a[j], a[j-h]); j -= h) {
                    exch(a, j, j-h);
                }
            }
            assert isHsorted(a, h); 
            h /= 3;
        }
        assert isSorted(a);
    }

    private static boolean less(Comparable v, Comparable w) {
        return (v.compareTo(w) &lt; 0);
    }

    private static void exch(Object[] a, int i, int j) {
        Object swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }

    private static boolean isSorted(Comparable[] a) {
        for (int i = 1; i &lt; a.length; i++)
            if (less(a[i], a[i-1])) return false;
        return true;
    }

    private static boolean isHsorted(Comparable[] a, int h) {
        for (int i = h; i &lt; a.length; i++)
            if (less(a[i], a[i-h])) return false;
        return true;
    }

    // Method required for "recursive" sort
    private static void recursiveSort(Integer[] array, int start) {
        if (start &lt; array.length - 1) {
            int maximum = array[start];
            int maximumIndex = start;
            for (int i = start + 1; i &lt; array.length; ++i) {
                if (array[i] &gt; maximum) {
                    maximum = array[i];
                    maximumIndex = i;
                }
            }
            if (maximumIndex != start) {
                int tmp = array[start];
                array[start] = array[maximumIndex];
                array[maximumIndex] = tmp;
            }
            recursiveSort(array, start + 1);
        }
    }

    public static void main(String[] args) {
        int desiredArraySize = 1000;
        int minSizeOfNumberInArray = 0;
        int maxSizeOfNumberInArray = 100;
        Integer[] array = new Integer[desiredArraySize]; // Used Integer instead of int to utilize Comparable interface
        for(int i = 0; i &lt; array.length; i++) {
            int randomInt = (int) Math.random() * (maxSizeOfNumberInArray - minSizeOfNumberInArray);
            array[i] = randomInt;
        }

        long startTime = System.nanoTime();
        recursiveSort(array, 0);
        long endTime = System.nanoTime();
        long recursiveSortTime = endTime - startTime;
        System.out.println(String.format("\"Recursive\" sort completed in %d ns", recursiveSortTime));

        startTime = System.nanoTime();
        shellSort(array);
        endTime = System.nanoTime();
        long shellSortTime = endTime - startTime;
        System.out.println(String.format("Shell sort completed in %d ns", shellSortTime));

        System.out.println(String.format("\"Recursive\" sort took %f times longer", (float)recursiveSortTime / (float)shellSortTime));
    }
}
</code></pre>
