<p>Ok, I think I finally see the best way for this to work. Instead of pulling all of the contact information out before you create your adapter, you should create a custom CursorAdapter that accepts your <code>people</code> cursor and populates a custom view with your <code>cursor_one</code> query that is executed on a background thread. This should take advantage of the natural lazyloading of the ListView and make this work like you want.</p>

<p>If your using at least Android 3.0, you can use Loaders instead of using an AsyncTask.</p>

<p>I found an example of a custom cursor adapter <a href="http://thinkandroid.wordpress.com/2010/01/11/custom-cursoradapters/" rel="nofollow">here</a> which is what I used to make my example. There are probably better ways to implement this in code, but this at least shows you which methods to override and what to put in them.</p>

<pre><code>public class ContactListCursorAdapter extends SimpleCursorAdapter {

    private Context context;

    private int layout;

    public ContactListCursorAdapter (Context context, int layout, Cursor c, String[] from, int[] to) {
        super(context, layout, c, from, to);
        this.context = context;
        this.layout = layout;
    }

    // Used to populate new list items
    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {

        Cursor c = getCursor();

        final LayoutInflater inflater = LayoutInflater.from(context);
        View v = inflater.inflate(layout, parent, false);

        int nameCol = c.getColumnIndex(People.NAME);

        String name = c.getString(nameCol);

        /**
         * Next set the name of the entry.
         */     
        TextView name_text = (TextView) v.findViewById(R.id.name_entry);
        if (name_text != null) {
            name_text.setText(name);
        }

        getDeatils(v,c);

        return v;
    }

    // Used to bind a new item from the adapter to an existing view
    @Override
    public void bindView(View v, Context context, Cursor c) {

        int nameCol = c.getColumnIndex(People.NAME);

        String name = c.getString(nameCol);

        /**
         * Next set the name of the entry.
         */     
        TextView name_text = (TextView) v.findViewById(R.id.name_entry);
        if (name_text != null) {
            name_text.setText(name);
        }

        getDetails(v,c);
    }

    private void populateDetails(View v, Cursor c) {
       // Start your AsyncTask or Loader to get the details.
       // Be sure to populate the view with the results in the
       // appropriate completion callback.
    }
}
</code></pre>
