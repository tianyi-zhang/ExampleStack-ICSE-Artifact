<p>Probably too late to answer but putting here for others. Instead of using </p>

<pre><code> Fragment frags = (Fragment) Class.forName("com.android.example." + "" + questions).newInstance();
</code></pre>

<p>use</p>

<pre><code>Fragment frags = Fragment.instantiate(mContext,"com.android.example." + "" + questions);
</code></pre>

<p>and if you want to pass arguments to the fragment you can use</p>

<pre><code>Fragment frags = Fragment.instantiate(mContext,"com.android.example." + "" + questions,bundle);
</code></pre>

<p>where bundle is the Bundle carrying your data.</p>

<p><strong>Edit:</strong></p>

<p>As to why you should prefer this over other:</p>

<ol>
<li>You can send Bundle args to you fragment</li>
<li>caching using sClassMap</li>
<li>Sanity checks for whether the class initialized is fragment or not</li>
</ol>

<p>Here is the code for instantiate method in fragment</p>

<pre><code>public static Fragment instantiate(Context context, String fname, @Nullable Bundle args) {
        try {
            Class&lt;?&gt; clazz = sClassMap.get(fname);
            if (clazz == null) {
                // Class not found in the cache, see if it's real, and try to add it
                clazz = context.getClassLoader().loadClass(fname);
                if (!Fragment.class.isAssignableFrom(clazz)) {
                    throw new InstantiationException("Trying to instantiate a class " + fname
                            + " that is not a Fragment", new ClassCastException());
                }
                sClassMap.put(fname, clazz);
            }
            Fragment f = (Fragment)clazz.newInstance();
            if (args != null) {
                args.setClassLoader(f.getClass().getClassLoader());
                f.mArguments = args;
            }
            return f;
        } catch (ClassNotFoundException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        } catch (java.lang.InstantiationException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        } catch (IllegalAccessException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        }
    }
</code></pre>

<p>where sClassMap is a HashMap</p>

<pre><code>private static final HashMap&lt;String, Class&lt;?&gt;&gt; sClassMap =
        new HashMap&lt;String, Class&lt;?&gt;&gt;();
</code></pre>

<p>obviously you can implement the same feature in above code. Reason not to do so <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="nofollow">"DRY"</a></p>
