<p>If you make changes to the EventList then those changes will be propagated to the JTable via the table model. (That is, if you add a new object to that list, remove one, or update one, then the changes take place automatically. Hence the "Event" prefix - events to the list are communicated to the model.)</p>

<p>So chances are you'll need to keep a reference to your EventList to ensure its accessible to parts of your code outside of <code>retrieveArtikelTable()</code> in your case.</p>

<p>I feel the screencasts at <a href="http://publicobject.com/glazedlistsdeveloper/">GlazedLists Developer</a> are excellent at covering all the essential topics.</p>

<p><strong>Edit:</strong> just a reminder how you can make the list an instance variable so that it can be accessed in any method, not just the one which constructs the table.</p>

<pre><code>public class Example {
    private EventList&lt;Person&gt; eventList = new BasicEventList&lt;Person&gt;();

    public JTable createTable(...) { ... code to generate the table ...}

    public void manipulateTable() {
        // add to the table (via the eventList)
        eventList.add(new Person("Steve Jobs"));
        // remove first object in the table (and the list)
        eventList.remove(0);
        // update a row
        Person p = eventList.get(0);
        p.setName("A N Other");
        eventList.set(0,p); // overwrite the old object in the list

    }
}
</code></pre>

<p><strong>Edit #2:</strong> I've included a more complete example in order to give an illustration of how you should properly handle selection using the EventSelectionModel, which allows you to know exactly which rows are selected at any given time, even when a filter has been applied.</p>

<p><img src="http://i.stack.imgur.com/qBYoA.png" alt="Screenshot of sample app"></p>

<p>I've copied a file which was partially generated using the Netbeans GUI builder. But the key things to note are: </p>

<ol>
<li><p>Declaration of the <a href="http://publicobject.com/glazedlists/glazedlists-1.8.0/api/ca/odell/glazedlists/swing/EventSelectionModel.html">EventSelectionModel</a> as an instance variable so that it can be accessed elsewhere in the class.</p></li>
<li><p><code>btnDeleteActionPerformed()</code> method. This is what happens when the Delete button is pressed. First I check whether any row is selected. If so, get the selected items (returned as an Eventlist) and simply remove them from the master list.</p></li>
</ol>

<p>Here's the sample code for MyFrame.java</p>

<pre><code>public class MyFrame extends javax.swing.JFrame {

    private EventList&lt;Person&gt; eventList = new BasicEventList&lt;Person&gt;();
    private EventSelectionModel&lt;Person&gt; selectionModel;

    /**
     * Creates new form MyFrame
     */
    public MyFrame() {
        initComponents();
        loadData();
        configureTable();
    }

    private void loadData() {

        eventList.add(new Person("Richard", "Dawkins"));
        eventList.add(new Person("Sam", "Harris"));
        eventList.add(new Person("Christopher", "Hitchens"));
        eventList.add(new Person("Daniel", "Dennett"));

    }

    private void configureTable() {
        String[] headers = new String[]{"Firstname", "Lastname"};
        String[] properties = new String[]{"firstname", "lastname"};


        TextFilterator&lt;Person&gt; personTextFilterator = new TextFilterator&lt;Person&gt;() {

            @Override
            public void getFilterStrings(List list, Person p) {
                list.add(p.getFirstname());
                list.add(p.getLastname());
            }
        };

        MatcherEditor&lt;Person&gt; textMatcherEditor = new TextComponentMatcherEditor&lt;Person&gt;(txtFilter, personTextFilterator);

        FilterList&lt;Person&gt; filterList = new FilterList&lt;Person&gt;(eventList, textMatcherEditor);

        TableFormat tf = GlazedLists.tableFormat(properties, headers);
        EventTableModel&lt;Person&gt; model = new EventTableModel&lt;Person&gt;(filterList, tf);

        selectionModel = new EventSelectionModel&lt;Person&gt;(filterList);
        tblNames.setSelectionModel(selectionModel);

        tblNames.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNames = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GlazedLists test");

        jLabel1.setText("Filter");

        tblNames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblNames);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReload.setText("Reload data");
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(txtFilter))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(btnReload)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(txtFilter, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnDelete)
                    .add(btnReload))
                .addContainerGap())
        );

        pack();
    }// &lt;/editor-fold&gt;                        

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (!selectionModel.isSelectionEmpty()) {
            eventList.removeAll(selectionModel.getSelected());
        }
    }                                         

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {                                          
        eventList.clear();
        loadData();
    }                                         

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MyFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblNames;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration                   
}
</code></pre>

<p>I'm using a Person class in my example, and it's a very simple <a href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJO</a>:</p>

<pre><code>public class Person {

    private String firstname;
    private String lastname;

    public Person() {
    }

    public Person(String firstname, String lastname) {
        this.firstname = firstname;
        this.lastname = lastname;
    }

    public String getFirstname() {
        return firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public String getLastname() {
        return lastname;
    }

    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

}
</code></pre>

<p>Personally I'd recommend keeping your data loading separate from the method which creates your table. I've used the <code>loadData()</code> method which populates the list. If there's a no data to be loaded, or a problem with the file you're loading from then the table is still created but there's nothing in it because the list remains empty.</p>
