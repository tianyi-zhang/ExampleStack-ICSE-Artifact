<p>You already provide the <a href="https://github.com/emilsjolander/StickyListHeaders" rel="nofollow">link</a> to the full documentation of this library. If you need help implementing this you will have to be more specific what you are asking. The position of the headers is not determined by an index or anything like that, the items have to be ordered in the correct way and your <code>getHeaderId()</code> function must be implemented to reflect your sections properly.</p>

<p>This will create a header for undone (id 0) and done (id 1) tasks.</p>

<pre><code>@Override
public long getHeaderId(int position) {
    return tasks[position].done() ? 1 : 0;
}
</code></pre>

<p>Then simply create a <code>getHeaderView()</code> implementation to create header views for your two sections.</p>

<pre><code>@Override 
public View getHeaderView(int position, View convertView, ViewGroup parent) {
    HeaderViewHolder holder;
    if (convertView == null) {
        holder = new HeaderViewHolder();
        convertView = inflater.inflate(R.layout.header, parent, false);
        holder.text = (TextView) convertView.findViewById(R.id.text);
        convertView.setTag(holder);
    } else {
        holder = (HeaderViewHolder) convertView.getTag();
    }
    //set header text as first char in name
    String headerText = tasks[position].done() ? "Done" : "Undone";
    holder.text.setText(headerText);
    return convertView;
}
</code></pre>

<p>This is only a rough code sample, you will have to modify it to match your surrounding code.</p>
