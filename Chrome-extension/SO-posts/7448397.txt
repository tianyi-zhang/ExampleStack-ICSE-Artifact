<p><code>GraphicsDevice[]</code> devices can returns that, but (I never tested) if is there profesional GPU with <code>Multi GPU Cores</code> or chaned <code>GPU in SLI Mode</code>, then this <code>Array</code> is multiplayed, you can testing (this code required simple modifications for Runtime) that with code pieces from <code>SwingX</code> </p>

<pre><code>public static Point getPointForCentering(JInternalFrame window) {
        try {
            //assert window != null;
            Point mousePoint = MouseInfo.getPointerInfo().getLocation();
            GraphicsDevice[] devices = GraphicsEnvironment
                    .getLocalGraphicsEnvironment().getScreenDevices();
            for (GraphicsDevice device : devices) {
                Rectangle bounds = device.getDefaultConfiguration().
                    getBounds();
                    //check to see if the mouse cursor is within these bounds
                if (mousePoint.x &gt;= bounds.x &amp;&amp; mousePoint.y &gt;= bounds.y &amp;&amp;
                    mousePoint.x &lt;= (bounds.x + bounds.width) &amp;&amp; mousePoint.y 
                    &lt;= (bounds.y + bounds.height)) {
                    int screenWidth = bounds.width;//this is it
                    int screenHeight = bounds.height;
                    int width = window.getWidth();
                    int height = window.getHeight();
                    return new Point(((screenWidth - width) / 2) + bounds.x,
                       ((screenHeight - height) / 2) + bounds.y);
                }
            }
        } catch (Exception e) {
            LOG.log(Level.FINE, e.getLocalizedMessage() + 
               " - this can occur do to a Security exception in sandboxed apps");
        }
        return new Point(0, 0);
    }
</code></pre>
