<p>Here is the solution:
You have to create TypeAdapterFactory which will allow you to intercept default TypeAdapter, 
but still leave to you access to default TypeAdapter as a delegate. 
Then you can just try to read value using delegate from default TypeAdapter and process unexpected data as you wish.</p>

<pre><code>      public Gson getGson() {

                return new GsonBuilder()
                            .registerTypeAdapterFactory(new LenientTypeAdapterFactory())
                .create();
            }


        class LenientTypeAdapterFactory implements TypeAdapterFactory {

                public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, TypeToken&lt;T&gt; type) {

                    final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);

                    return new TypeAdapter&lt;T&gt;() {

                        public void write(JsonWriter out, T value) throws IOException {
                            delegate.write(out, value);
                        }

                        public T read(JsonReader in) throws IOException {
                            try { //Here is the magic
//Try to read value using default TypeAdapter
                                return delegate.read(in); 
                            } catch (JsonSyntaxException e) {
//If we can't in case when we expecting to have an object but array is received (or some other unexpected stuff), we just skip this value in reader and return null
                                in.skipValue(); 
                                return null;
                            }
                        }
                    };
                }
    }
</code></pre>
