<p>With an AutoCompeleteTextView its can be useful just to do as what @user936414 said, but it can makes problem if you have biggest app, even more with an multiAutoCompeleteTextView so it s recommended to overide toString methode by creating a "custom" HashMap like that : </p>

<pre><code>public class ContactMap extends HashMap&lt;String, String&gt; {

/*
 * (non-Javadoc)
 * 
 * @see java.util.AbstractMap#toString()
 */
@Override
public String toString() {
    if (isEmpty()) {
        return "{}";
    }

    StringBuilder buffer = new StringBuilder(size() * 28);
    Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry&lt;String, String&gt; entry = it.next();
        Object key = entry.getKey();

        if (key == "Name") {
            Object value = entry.getValue();
            buffer.append(value);
        } else {
            if (key == "Phone")
                buffer.append("&lt;");
            Object value = entry.getValue();
            if (value != this) {
                buffer.append(value);
            } else {
                buffer.append("(this Map)");
            }
            if (key == "Phone")
                buffer.append("&gt;");

        }
    }

    return buffer.toString();
}

}
</code></pre>

<p>and use it like this </p>

<pre><code>                    // Using our custom HashMap
                    ContactMap NamePhoneType = new ContactMap();
</code></pre>
