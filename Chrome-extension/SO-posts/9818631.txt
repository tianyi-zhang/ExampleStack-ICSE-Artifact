<p>try these in an async task. you need to make network stuff in a separate thread anyway</p>

<pre><code>public static String PrepareSendPostData_DetailsActivity(String station_id) {

            //Create a new HttpClient and Post Header
    HttpClient httpclient = new DefaultHttpClient();


    HttpPost httppost = new HttpPost("your url here");

    try {

        List&lt;NameValuePair&gt; nameValuePairs = new ArrayList&lt;NameValuePair&gt;(100);

        nameValuePairs.add(new BasicNameValuePair("param_1", "value_1"));
        nameValuePairs.add(new BasicNameValuePair("param_2", "ok"));
        nameValuePairs.add(new BasicNameValuePair("module", "dbgestion"));
        nameValuePairs.add(new BasicNameValuePair("pdv_id", station_id));
        httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));

        // Execute HTTP Post Request
        HttpResponse response = httpclient.execute(httppost);

        String responseBody = getResponseBody(response);

        if (responseBody != null)
            return responseBody;
        else
            return null;

    } catch (ClientProtocolException e) {
        Log.e("exception here", e.getMessage().toString());
        return null;
    } catch (IOException e) {
        Log.e("exception here 2", e.getMessage().toString());
        return null;
    }

}

public static String getResponseBody(HttpResponse response) {

    String response_text = null;
    HttpEntity entity = null;
    try {
        entity = response.getEntity();
        response_text = _getResponseBody(entity);
    } catch (ParseException e) {
        e.printStackTrace();
    } catch (IOException e) {
        if (entity != null) {
            try {
                entity.consumeContent();
            } catch (IOException e1) {
            }
        }
    }
    return response_text;
}

public static String _getResponseBody(final HttpEntity entity) throws IOException, ParseException {

    if (entity == null) {
        throw new IllegalArgumentException("HTTP entity may not be null");
    }

    InputStream instream = entity.getContent();

    if (instream == null) {
        return "";
    }

    if (entity.getContentLength() &gt; Integer.MAX_VALUE) {
        throw new IllegalArgumentException(

        "HTTP entity too large to be buffered in memory");
    }

    String charset = getContentCharSet(entity);

    if (charset == null) {

        charset = HTTP.DEFAULT_CONTENT_CHARSET;

    }

    Reader reader = new InputStreamReader(instream, charset);

    StringBuilder buffer = new StringBuilder();

    try {

        char[] tmp = new char[1024];

        int l;

        while ((l = reader.read(tmp)) != -1) {

            buffer.append(tmp, 0, l);

        }

    } finally {

        reader.close();

    }

    return buffer.toString();

}

public static String getContentCharSet(final HttpEntity entity) throws ParseException {

    if (entity == null) {
        throw new IllegalArgumentException("HTTP entity may not be null");
    }

    String charset = null;

    if (entity.getContentType() != null) {

        HeaderElement values[] = entity.getContentType().getElements();

        if (values.length &gt; 0) {

            NameValuePair param = values[0].getParameterByName("charset");

            if (param != null) {

                charset = param.getValue();

            }

        }

    }

    return charset;

}
</code></pre>

<p>hope it helps...</p>
