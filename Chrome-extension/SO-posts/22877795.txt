<p>A purely recursive variation of CyberneticTwerkGuruOrc's solution:</p>

<pre><code>public class FourOnes {

    public static boolean solveArrayRecursively(int[][] array) {
        return solveRowsRecursively(array, 0, 0, 0) || solveColumnsRecursively(array, 0, 0, 0);
    }

    public static boolean solveColumnsRecursively(int[][] array, int x, int y, int found) {
        if(found &gt;= 4) {
            // We have 4 consecutive ones
            return true;
        }
        if(x != 0 &amp;&amp; x &gt;= array.length) {
            // next column
            return solveColumnsRecursively(array, 0, y + 1, 0);
        }
        if(x &gt;= array.length || y &gt;= array[x].length) {
            // no more columns
            return false;
        }
        if(array[x][y] == 1) {
            // found another 1
            return solveColumnsRecursively(array, x + 1, y, found + 1);
        } else {
            // reset count to 0 as there is a gap in the sequence
            return solveColumnsRecursively(array, x + 1, y, 0);
        }
    }

    public static boolean solveRowsRecursively(int[][] array, int x, int y, int found) {
        if(found &gt;= 4) {
            // We have 4 consecutive ones
            return true;
        }
        if(x &gt;= array.length ) {
            // no more rows
            return false;
        }
        if(y &gt;= array[x].length) {
            // next row
            return solveRowsRecursively(array, x + 1, 0, 0);
        }
        if(array[x][y] == 1) {
            // found another 1
            return solveRowsRecursively(array, x, y + 1, found + 1);
        } else {
            // reset count to 0 as there is a gap in the sequence
            return solveRowsRecursively(array, x, y + 1, 0);
        }
    }

    public static void main(String[] args) {
        System.out.println(solveArrayRecursively(new int[][] {
                new int[] {1, 1, 0, 0},
                new int[] {0, 0, 0, 0},
                new int[] {0, 0, 0, 0},
                new int[] {0, 0, 1, 1}
        }));
        System.out.println(solveArrayRecursively(new int[][] {
                new int[] {1, 1, 0, 0},
                new int[] {0, 0, 0, 0},
                new int[] {1, 1, 1, 1},
                new int[] {0, 0, 1, 1}
        }));
        System.out.println(solveArrayRecursively(new int[][] {
                new int[] {1, 1, 1, 0},
                new int[] {0, 0, 1, 0},
                new int[] {0, 0, 1, 0},
                new int[] {0, 0, 1, 1}
        }));
        System.out.println(solveArrayRecursively(new int[][] {
                new int[] {1, 1, 1, 1},
                new int[] {1, 1, 1, 1},
                new int[] {1, 1, 1, 1},
                new int[] {1, 1, 1, 1}
        }));
        System.out.println(solveArrayRecursively(new int[0][0]));
    }
}
</code></pre>

<p>Alternate take:</p>

<pre><code>    public static boolean solveArrayRecursively(int[][] array) {
        return solveRecursively(array, 0, 0, 0, 0);
    }

    public static boolean solveRecursively(int[][] array, int x, int y, int foundX, int foundY) {
        if(foundX &gt;= 4 || foundY &gt;= 4) {
            return true;
        }
        if(x &gt;= array.length || y &gt;= array[x].length) {
            return false;
        }
        if(array[x][y] == 1) {
            return solveRecursively(array, x + 1, y, foundX + 1, 1)
                    || solveRecursively(array, x, y + 1, 1, foundY + 1);
        } else {
            return solveRecursively(array, x + 1, y, 0, 0)
                    || solveRecursively(array, x, y + 1, 0, 0);
        }
    }
</code></pre>

<p>Note that while the alternate take will perform better in certain cases it is not a simple [tail recursion](http://en.wikipedia.org/wiki/Tail_call], which can increase the risk of stack overflows for large arrays, while the first solution will create more stack overflows in debugging because tail recursions are most probably not optimized.</p>

<p>Also note that the first solution takes <code>1 + 2*(columns+1)*(rows+1)</code> calls at a maximum recursion-depth of <code>1 + (columns+1)*(rows+1)</code> where as the second takes calls at a maximum depth of <code>1 + columns + rows</code> like this:</p>

<pre>   x=0 x=1 x=2 x=3 x=4
y=0 1   1   1   1   1
y=1 1   2   3   4   4
y=2 1   3   6   10  10
y=3 1   4   10  20  20
y=4 1   4   10  20  </pre>
