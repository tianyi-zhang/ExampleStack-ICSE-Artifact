<p><code>onMeasure()</code> is your opportunity to tell Android how big you want your custom view to be dependent the layout constraints provided by the parent; it is also your custom view's opportunity to learn what those layout constraints are (in case you want to behave differently in a <code>match_parent</code> situation than a <code>wrap_content</code> situation).  These constraints are packaged up into the <code>MeasureSpec</code> values that are passed into the method.  Here is a rough correlation of the mode values:</p>

<ul>
<li><strong>EXACTLY</strong> means the <code>layout_width</code> or <code>layout_height</code> value was set to a specific value.  You should probably make your view this size.  This can also get triggered when <code>match_parent</code> is used, to set the size exactly to the parent view (this is layout dependent in the framework).</li>
<li><strong>AT_MOST</strong> typically  means the <code>layout_width</code> or <code>layout_height</code> value was set to <code>match_parent</code> or <code>wrap_content</code> where a maximum size is needed (this is layout dependent in the framework), and the size of the parent dimension is the value.  You should not be any larger than this size.</li>
<li><strong>UNSPECIFIED</strong> typically means the <code>layout_width</code> or <code>layout_height</code> value was set to <code>wrap_content</code> with no restrictions.  You can be whatever size you would like.  Some layouts also use this callback to figure out your desired size before determine what specs to actually pass you again in a second measure request.</li>
</ul>

<p>The contract that exists with <code>onMeasure()</code> is that <code>setMeasuredDimension()</code> <strong>MUST</strong> be called at the end with the size you would like the view to be.  This method is called by all the framework implementations, including the default implementation found in <code>View</code>, which is why it is safe to call <code>super</code> instead if that fits your use case.</p>

<p>Granted, because the framework does apply a default implementation, it may not be necessary for you to override this method, but you may see clipping in cases where the view space is smaller than your content if you do not, and if you lay out your custom view with <code>wrap_content</code> in both directions, your view may not show up at all because the framework doesn't know how large it is!</p>

<p>Generally, if you are overriding <code>View</code> and not another existing widget, it is probably a good idea to provide an implementation, even if it is as simple as something like this:</p>

<pre><code>@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {

    int desiredWidth = 100;
    int desiredHeight = 100;

    int widthMode = MeasureSpec.getMode(widthMeasureSpec);
    int widthSize = MeasureSpec.getSize(widthMeasureSpec);
    int heightMode = MeasureSpec.getMode(heightMeasureSpec);
    int heightSize = MeasureSpec.getSize(heightMeasureSpec);

    int width;
    int height;

    //Measure Width
    if (widthMode == MeasureSpec.EXACTLY) {
        //Must be this size
        width = widthSize;
    } else if (widthMode == MeasureSpec.AT_MOST) {
        //Can't be bigger than...
        width = Math.min(desiredWidth, widthSize);
    } else {
        //Be whatever you want
        width = desiredWidth;
    }

    //Measure Height
    if (heightMode == MeasureSpec.EXACTLY) {
        //Must be this size
        height = heightSize;
    } else if (heightMode == MeasureSpec.AT_MOST) {
        //Can't be bigger than...
        height = Math.min(desiredHeight, heightSize);
    } else {
        //Be whatever you want
        height = desiredHeight;
    }

    //MUST CALL THIS
    setMeasuredDimension(width, height);
}
</code></pre>

<p>Hope that Helps.</p>
