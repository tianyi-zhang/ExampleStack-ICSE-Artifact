<p>I faced the same problem a few days ago and I implemented a custom preference class extending <code>ListPreference</code> to do this. This is the class I implemented:</p>

<pre><code>public class LogCleanPreference extends ListPreference {
    private int mClickedDialogEntryIndex;

    private Context mContext;

    public LogCleanPreference(Context ctxt) {
        this(ctxt, null);
    }

    public LogCleanPreference(Context ctxt, AttributeSet attrs) {
        super(ctxt, attrs);

        mContext = ctxt;

        setNegativeButtonText(ctxt.getString(R.string.alert_cancel));
    }

    @Override
    protected void onPrepareDialogBuilder(Builder builder) {
        if (getEntries() == null || getEntries() == null) {
            throw new IllegalStateException(
                    "ListPreference requires an entries array and an entryValues array.");
        }

        mClickedDialogEntryIndex = findIndexOfValue(getValue());
        builder.setSingleChoiceItems(getEntries(), mClickedDialogEntryIndex, 
                new DialogInterface.OnClickListener() {
            public void onClick(final DialogInterface dialog, final int which) {
                // In my case I only show the AlertDialog if the user didn't select option number 2
                if(which != 2){
                    // Show AlertDialog
                }
                else{
                    // Save preference and close dialog
                    mClickedDialogEntryIndex = which;

                    LogCleanPreference.this.onClick(dialog, DialogInterface.BUTTON_POSITIVE);
                    dialog.dismiss();
                }
            }
        });

        builder.setPositiveButton(null, null);
    }

    @Override
    protected void onDialogClosed(boolean positiveResult) {

        CharSequence[] mEntryValues = getEntryValues();

        if (positiveResult &amp;&amp; mClickedDialogEntryIndex &gt;= 0 &amp;&amp; mEntryValues != null) {
            String value = mEntryValues[mClickedDialogEntryIndex].toString();
            if (callChangeListener(value)) {
                setValue(value);
            }
        }
    }
}
</code></pre>

<p>This is how I use the preference in my prefs.xml:</p>

<pre><code>&lt;com.timeondriver.tod.settings.LogCleanPreference
        android:defaultValue="0"
        android:dialogTitle="@string/dialog_title_log_clean"
        android:entries="@array/log_clean"
        android:entryValues="@array/log_clean_values"
        android:key="log_clean_preference"
        android:summary="@string/summary_log_clean_preference"
        android:title="@string/title_log_clean_preference" /&gt;
</code></pre>
