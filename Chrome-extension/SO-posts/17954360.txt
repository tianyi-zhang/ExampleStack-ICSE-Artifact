<p>A few things.</p>

<ol>
<li>Jetty 9.0.0.RC0 is an old, not-yet stable, release candidate, consider upgrading to a stable, final release, such as <a href="http://search.maven.org/#artifactdetails%7Corg.eclipse.jetty%7Cjetty-server%7C9.0.4.v20130625%7Cjar">9.0.4.v20130625</a></li>
<li>You need something that will connect that Jax RS class into the servlet api.  Usually done via a Servlet or some sort of initialization with your library of choice. (In you case Jersey)</li>
</ol>

<p>In your example, you have only setup a <code>DefaultServlet</code> to serve static files, nothing has been configured to use your <code>DBCollection</code> object.</p>

<p>For Jersey, you'll need to configure the <code>org.glassfish.jersey.servlet.ServletContainer</code> and setup its servlet-mappings on a context of your choice.</p>

<p><strong>Example:</strong></p>

<pre class="lang-java prettyprint-override"><code>package com.example;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.DefaultServlet;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;

public class Main
{
    public static void main(String[] args)
    {
        Server server = new Server(8080);

        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SESSIONS);
        context.setContextPath("/");
        server.setHandler(context);

        ServletHolder jerseyServlet = context.addServlet(org.glassfish.jersey.servlet.ServletContainer.class, "/webapi/*");
        jerseyServlet.setInitOrder(1);
        jerseyServlet.setInitParameter("jersey.config.server.provider.packages","com.example");

        ServletHolder staticServlet = context.addServlet(DefaultServlet.class,"/*");
        staticServlet.setInitParameter("resourceBase","src/main/webapp");
        staticServlet.setInitParameter("pathInfoOnly","true");

        try
        {
            server.start();
            server.join();
        }
        catch (Throwable t)
        {
            t.printStackTrace(System.err);
        }
    }
}
</code></pre>

<p>This example adds the ServletContainer that jersey provides to the ServletContextHandler that Jetty uses to look up what to do based on the incoming request.  Then it adds the DefaultServlet to handle any requests for content that Jersey does not handle (such as static content)</p>
