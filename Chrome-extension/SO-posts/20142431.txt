<p>Okay, I've found one hack solution <a href="http://www.baptiste-wicht.com/2010/05/tip-add-resources-dynamically-to-a-classloader/" rel="nofollow">there</a>. In short - I've just added my URL to the system classloader dynamically, like this:</p>

<pre><code>public static void addURLToSystemClassLoader(URL url) throws IntrospectionException {
    URLClassLoader systemClassLoader = (URLClassLoader) ClassLoader.getSystemClassLoader();
    Class&lt;URLClassLoader&gt; classLoaderClass = URLClassLoader.class;

    try {
        Method method = classLoaderClass.getDeclaredMethod("addURL", new Class[]{URL.class});
        method.setAccessible(true);
        method.invoke(systemClassLoader, new Object[]{url});
    } catch (Throwable t) {
        t.printStackTrace();
        throw new IntrospectionException("Error when adding url to system ClassLoader ");
    }
}
</code></pre>

<p>And then in my render method</p>

<pre><code>FXMLLoader loader = new FXMLLoader();
loader.setController(TabController.this);

try {
    addURLToSystemClassLoader(new URL("hive://" + pageURL.getHost() + ":" + pageURL.getPort() + "/" + pageURL.getApplicationName() + "/origJar.jar"));
} catch (Exception e) {
    e.printStackTrace();
}
</code></pre>

<p>But it looks like a bad practise.</p>

<p>I think that the original problem is that - JavaFX scripting engine has differect class loader, FXML loader doesn't pass it's own to the script engine. Anyone knows how to set the classloader for the script engine?</p>
