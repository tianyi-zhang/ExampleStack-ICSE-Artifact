<p>You don't really need these methods: <code>initHeaderColor</code> &amp; <code>translateHeaderView</code>. </p>

<p>Define an <code>ArgbEvaluator</code> as a class member:</p>

<pre><code>ArgbEvaluator mArgbEvaluator;

// define start &amp; end colors
int mStartColor, mEndColor;

// initialize start &amp; end colors
</code></pre>

<p>Call ArgbEvaluator's <code>evaluate</code> method with parameters <code>(slideOffset, startColor, endColor)</code>, cast the return value to <code>Integer</code>, and use it to set the background color of <code>fmActionBar</code>:</p>

<pre><code>void updateActionBarbgColor(float slideOffset) {
    if (mArgbEvaluator == null)
        mArgbEvaluator = new ArgbEvaluator();

    int bgColor = (Integer) mArgbEvaluator.evaluate(slideOffset, mStartColor, mEndColor);
    fmActionBar.setBackgroundColor(bgColor);
}
</code></pre>

<p>For reference, <code>ArgbEvaluator#evaluate(...)</code>:</p>

<pre><code>public Object evaluate(float fraction, Object startValue, Object endValue) {
    int startInt = (Integer) startValue;
    int startA = (startInt &gt;&gt; 24) &amp; 0xff;
    int startR = (startInt &gt;&gt; 16) &amp; 0xff;
    int startG = (startInt &gt;&gt; 8) &amp; 0xff;
    int startB = startInt &amp; 0xff;

    int endInt = (Integer) endValue;
    int endA = (endInt &gt;&gt; 24) &amp; 0xff;
    int endR = (endInt &gt;&gt; 16) &amp; 0xff;
    int endG = (endInt &gt;&gt; 8) &amp; 0xff;
    int endB = endInt &amp; 0xff;

    return (int)((startA + (int)(fraction * (endA - startA))) &lt;&lt; 24) |
            (int)((startR + (int)(fraction * (endR - startR))) &lt;&lt; 16) |
            (int)((startG + (int)(fraction * (endG - startG))) &lt;&lt; 8) |
            (int)((startB + (int)(fraction * (endB - startB))));
}
</code></pre>
