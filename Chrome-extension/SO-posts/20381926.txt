<p>I would not use a <code>Timer</code> for the updates, but instead use a <code>Service</code> that starts on an interval set up by the <code>AlarmManager</code>. Like this:</p>

<pre><code>public void setScheduling() {
    Date now = new Date();

    // Set the time to download to 18:00
    Calendar cal = Calendar.getInstance();
    cal.setTime(now);
    cal.set(Calendar.HOUR_OF_DAY, 18);
    cal.set(Calendar.MINUTE, 0);

    AlarmManager mgr = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
    Intent i = new Intent(context, StartDownloadReceiver.class);
    PendingIntent pi = PendingIntent.getBroadcast(context, 0, i, 0);

    mgr.cancel(pi);

    // 1 * 24 * 60 * 60 * 1000 = repeat this every day
    mgr.setRepeating(AlarmManager.RTC, cal.getTimeInMillis(), 1 * 24 * 60 * 60 * 1000, pi);
}
</code></pre>

<p>Handle the pending intent in a <code>BroadcastReceiver</code>:</p>

<pre><code>public class StartDownloadReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {

        SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(context);

        boolean autoDownload = sharedPreferences.getBoolean("auto_download", false);
        if (autoDownload) {
            context.startService(new Intent(context, DownloaderService.class));    
        }

    }

}
</code></pre>

<p>In your download service you would then use an <code>AsyncTask</code> to do the downloading, parsing and updating of the database.</p>

<p>I recently finished an app with somewhat the exact same requirements;</p>

<ol>
<li>every day at 18:00 download an RSS feed</li>
<li>If the download and parsing was successful wipe the database tables and update the data </li>
<li>Send a broadcast to let any <code>Activity</code> that might be open to refresh its <code>ListView</code></li>
</ol>

<p>That's basically it, though the implementation is not exactly like that.</p>

<p>Have a look at it here: <a href="https://github.com/slidese/SGU" rel="nofollow">https://github.com/slidese/SGU</a></p>

<p>Also: I'm using OrmLite when working with SQLite. I find it to be far easier and quicker to work with than dealing with the SQL directly.</p>
