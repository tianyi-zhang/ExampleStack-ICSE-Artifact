<p>Ok lets try again, full code:</p>

<pre><code>    public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    Button downloadBtn = (Button) findViewById(R.id.downloadButton);
    downloadBtn.setOnClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {

            saveToExternal();

        }
    });

    Button loadBtn = (Button) findViewById(R.id.loadButton);
    loadBtn.setOnClickListener(new View.OnClickListener() {

        @Override
        public void onClick(View v) {

            loadExternal();

        }
    });


    //end of onCreate()   
}



public void saveToExternal(){
    String content = loadFromNet();
    save(content, "story.json");
}

public void loadExternal(){
    TextView test = (TextView) findViewById(R.id.textView);
    String res = load("story.json");
    test.setText(res);
}

private String loadFromNet(){
    String result = null;
    try{
        //connects to mySQL
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost("http://10.0.2.2/textures_story_list.php");
        HttpResponse response = client.execute(post);
        //captures the response
        HttpEntity entity = response.getEntity();
        InputStream entityStream = entity.getContent();
        StringBuilder entityStringBuilder = new StringBuilder();
        byte [] buffer = new byte[1024];
        int bytesReadCount;
        while ((bytesReadCount = entityStream.read(buffer)) &gt; 0)  {
            entityStringBuilder.append(new String(buffer, 0, bytesReadCount));
        }
        result = entityStringBuilder.toString();
        //responseInteger = Integer.valueOf(entityString);
    }catch(Exception e) {
        Log.e("log_tag", "Error in http connection "+e.toString());
    }
    return result;
}

private void save(String content, String fileName) {
    FileOutputStream fos = null;
    Writer out = null;
    try {
        File file = new File(getAppRootDir(), fileName);
        fos = new FileOutputStream(file);
        out = new OutputStreamWriter(fos, "UTF-8");

        out.write(content);
        out.flush();
    } catch (Throwable e){
        e.printStackTrace();
    } finally {
        if(fos!=null){
            try {
                fos.close();
            } catch (IOException ignored) {}
        }
        if(out!= null){
            try {
                out.close();
            } catch (IOException ignored) {}
        }
    }
}

private String load(String fileName) {
    String res = null;
    File file = new File(getAppRootDir(), fileName);
    if(!file.exists()){
        Log.e("", "file " +file.getAbsolutePath()+ " not found");
        return null;
    }
    FileInputStream fis = null;
    BufferedReader inputReader = null;
    try {
        fis = new FileInputStream(file);
        inputReader = new BufferedReader(new InputStreamReader(fis, "UTF-8"));
        StringBuilder strBuilder = new StringBuilder();
        String line;
        while ((line = inputReader.readLine()) != null) {
            strBuilder.append(line + "\n");
        }
        res = strBuilder.toString();
    } catch(Throwable e){
        if(fis!=null){
            try {
                fis.close();
            } catch (IOException ignored) {}
        }
        if(inputReader!= null){
            try {
                inputReader.close();
            } catch (IOException ignored) {}
        }
    }
    return res;
}

public File getAppRootDir() {
    File appRootDir;
    boolean externalStorageAvailable;
    boolean externalStorageWriteable;
    String state = Environment.getExternalStorageState();
    if (Environment.MEDIA_MOUNTED.equals(state)) {
        externalStorageAvailable = externalStorageWriteable = true;
    } else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
        externalStorageAvailable = true;
        externalStorageWriteable = false;
    } else {
        externalStorageAvailable = externalStorageWriteable = false;
    }
    if (externalStorageAvailable &amp;&amp; externalStorageWriteable) {
        appRootDir = getExternalFilesDir(null);
    } else {
        appRootDir = getDir("appRootDir", MODE_PRIVATE);
    }
    if (!appRootDir.exists()) {
        appRootDir.mkdir();
    }
    return appRootDir;
}
</code></pre>
