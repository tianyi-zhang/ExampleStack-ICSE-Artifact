<p>Just in case these small changes make a difference, try this:</p>

<pre><code>public static ByteBuffer getAsByteArray(URL url) throws IOException {
    URLConnection connection = url.openConnection();
    // Since you get a URLConnection, use it to get the InputStream
    InputStream in = connection.getInputStream();
    // Now that the InputStream is open, get the content length
    int contentLength = connection.getContentLength();

    // To avoid having to resize the array over and over and over as
    // bytes are written to the array, provide an accurate estimate of
    // the ultimate size of the byte array
    ByteArrayOutputStream tmpOut;
    if (contentLength != -1) {
        tmpOut = new ByteArrayOutputStream(contentLength);
    } else {
        tmpOut = new ByteArrayOutputStream(16384); // Pick some appropriate size
    }

    byte[] buf = new byte[512];
    while (true) {
        int len = in.read(buf);
        if (len == -1) {
            break;
        }
        tmpOut.write(buf, 0, len);
    }
    in.close();
    tmpOut.close(); // No effect, but good to do anyway to keep the metaphor alive

    byte[] array = tmpOut.toByteArray();

    //Lines below used to test if file is corrupt
    //FileOutputStream fos = new FileOutputStream("C:\\abc.pdf");
    //fos.write(array);
    //fos.close();

    return ByteBuffer.wrap(array);
}
</code></pre>

<p>You forgot to close <code>fos</code> which may result in that file being shorter if your application is still running or is abruptly terminated.  Also, I added creating the <code>ByteArrayOutputStream</code> with the appropriate initial size.  (Otherwise Java will have to repeatedly allocate a new array and copy, allocate a new array and copy, which is expensive.)  Replace the value 16384 with a more appropriate value.  16k is probably small for a PDF, but I don't know how but the "average" size is that you expect to download.</p>

<p>Since you use <code>toByteArray()</code> twice (even though one is in diagnostic code), I assigned that to a variable.  Finally, although it shouldn't make any difference, when you are wrapping the <strong>entire</strong> array in a ByteBuffer, you only need to supply the byte array itself.  Supplying the offset <code>0</code> and the length is redundant.</p>

<p>Note that if you are downloading <strong>large</strong> PDF files this way, then ensure that your JVM is running with a large enough heap that you have enough room for several times the largest file size you expect to read.  The method you're using keeps the whole file in memory, which is OK as long as you can afford that memory.  :)</p>
