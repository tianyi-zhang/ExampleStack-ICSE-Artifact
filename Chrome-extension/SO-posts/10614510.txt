<p>Videos in same container formats start with same bytes. The codec used determines the actual video files. </p>

<p>I suggest you read more about container file formats and codecs first if you plan developing video applications.</p>

<p>But you have a different problem. As Andrew Thompson correctly pointed out, you are getting the bytes of the <em>filename string</em>.</p>

<p>The correct approach would be:</p>

<pre><code>private static File fl=new File("D:\video.avi");
byte[] myByteArray = getBytesFromFile(fl);
</code></pre>

<p>Please also bear in mind that terminals usually have fixed buffer size (on Windows, it's several lines), so outputting a big chunk of data will display only last several lines of it.</p>

<p><strong>Edit:</strong> Here's an implementation of getBytesFromFile; a java expert may offer more standard approach.</p>

<pre><code>public static byte[] getBytesFromFile(File file) throws IOException {
        InputStream is = openFile(file.getPath());

        // Get the size of the file
        long length = file.length();

        if (length &gt; Integer.MAX_VALUE) {
            // File is too large
            Assert.assertExp(false);
            logger.warn(file.getPath()+" is too big");
        }

        // Create the byte array to hold the data
        byte[] bytes = new byte[(int)length];

        // debug - init array
        for (int i = 0; i &lt; length; i++){
            bytes[i] = 0x0;
        }

        // Read in the bytes
        int offset = 0;
        int numRead = 0;
        while (offset &lt; bytes.length &amp;&amp; (numRead=is.read(bytes, offset, bytes.length-offset)) &gt;= 0) {
            offset += numRead;
        }

        // Ensure all the bytes have been read in
        if (offset &lt; bytes.length) {
            throw new IOException("Could not completely read file "+file.getName());
        }

        // Close the input stream and return bytes
        is.close();
        return bytes;
    }
</code></pre>
