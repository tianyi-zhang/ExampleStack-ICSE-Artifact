<p>You can detect if a Launcher is Installed using the following code provided in the examples below;</p>

<h3>First One</h3>

<pre><code>boolean isLauncherInstalled  () {
    final String myLauncherPackageName = "LAUNCHER PACKAGE NAME"; // com.sec.android.app.launcher

    final IntentFilter filterCategory = new IntentFilter(Intent.ACTION_MAIN);
    filter.addCategory(Intent.CATEGORY_HOME);

    List&lt;IntentFilter&gt; filters = new ArrayList&lt;IntentFilter&gt;();
    filters.add(filterCategory);

    List&lt;ComponentName&gt; activities = new ArrayList&lt;ComponentName&gt;();
    final PackageManager packageManager = (PackageManager) getPackageManager();

    packageManager.getPreferredActivities(filters, activities, null);

    for (ComponentName activity : activities) {
        if (myLauncherPackageName.equals(activity.getPackageName())) {
            return true; // Is a match so you have a Launcher installed. 
        }
    }
    return false; // No Launcher. 
}
</code></pre>

<h3>Second One</h3>

<pre><code>public boolean isLauncherInstalled() {
    final String myLauncherPackageName = "LAUNCHER PACKAGE NAME"; // com.sec.android.app.launcher

    IntentFilter filterCategory = new IntentFilter(Intent.ACTION_MAIN);
    filterCategory.addCategory(Intent.CATEGORY_HOME);

    List&lt;IntentFilter&gt; filters = new ArrayList&lt;IntentFilter&gt;();
    filters.add(filterCategory);

    List&lt;ComponentName&gt; preferredActivities = new ArrayList&lt;ComponentName&gt;();
    final PackageManager packageManager = (PackageManager) getPackageManager();

    packageManager.getPreferredActivities(filters, preferredActivities, myLauncherPackageName);

    if (preferredActivities != null &amp;&amp; preferredActivities.size()&gt; 0) {
        return true; // Is a match so you have a Launcher installed.
    }
    return false; // No Launcher. 
}
</code></pre>

<p>However your best option wil be to always simulate scrolling, because there are more Launchers that don't trigger <code>OnOffsetsChanged</code>. But when you actually get a call to <code>OnOffsetsChanged</code> just disable simulated scrolling. This way <code>OnOffsetsChanged</code> can function normally if it's available.</p>

<p>The following article will give you an idea of how to approach this; <a href="http://www.studiofuga.com/2013/07/11/touchwiz-and-the-onoffsetchanged-missing-call/" rel="nofollow">Artikel Link</a> </p>
