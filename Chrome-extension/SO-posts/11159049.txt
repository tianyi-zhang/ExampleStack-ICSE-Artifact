<p>You need to cover a lot of ground here UI, Security etc. so I will give you a brief overview on the steps you need to get done. </p>

<p>You need activities or <a href="http://developer.android.com/guide/topics/ui/dialogs.html" rel="nofollow">dialogs</a> for the UI's, getting an initial password and checking  the password both should have </p>

<p>TextView  that uses the password attribute set (hide characters)</p>

<p>Button(s) that allows the user to cancel or select ok with on click listeners attached </p>

<p>To store/get the password then use something similar to this instead of sdcard and a txt file <a href="http://stackoverflow.com/questions/10161062/putting-password-on-an-android-class">Getting a password from shared preferences</a>, you can use the shared preferences editor to store it as well.  This adds a bit of security but not much</p>

<p>In general what you should store is not the password itself, but you should really store a token for added security, here is one class that can do that for you</p>

<pre><code>import java.security.MessageDigest;

public class PasswordToken {

    static public String makeDigest(String password) 
    {
         String hexStr = "";

        try {
            MessageDigest md = MessageDigest.getInstance("SHA1");
            md.reset();
            byte[] buffer = password.getBytes();
            md.update(buffer);
            byte[] digest = md.digest();


            for (int i = 0; i &lt; digest.length; i++) {
                hexStr +=  Integer.toString( ( digest[i] &amp; 0xff ) + 0x100, 16).substring( 1 );

        } 
        } catch(Exception e) // If the algo is not working for some reason on this device
                             // we have to use the strings hash code, which 
                             // could allow duplicates but at least allows tokens
        {
            hexStr = Integer.toHexString(password.hashCode()); 
        }

        return hexStr;
    }

    static public boolean validate(String password, String token) 
    {
         String digestToken = "";
         String simpleToken = "";

         digestToken = makeDigest(password);

         if (0 == digestToken.compareTo(token)) 
             return true; 

         if (0 == simpleToken.compareTo(token))
             return true;

         return false; 
    }
}
</code></pre>

<p>So to store a password when you clicked on your ok button </p>

<pre><code> PasswordTextView.getText();
  String token = PasswordToken.makeDigest(password);
  //... store TOKEN using the shared preferences editor 
</code></pre>

<p>To check a password when your user wanted to login</p>

<pre><code>PasswordTextView.GetText();
  String token = PasswordToken.makeDigest(password);
  //... GET token using the shared preferences 

  if (PasswordToken.validate(token))
     Start your new activity
  else
     tell your user to try again 
</code></pre>

<p>You can use <a href="http://developer.android.com/reference/android/app/Activity.html#startActivity%28android.content.Intent%29" rel="nofollow">startActivity or startActivityForResult</a> to start another activity and look at overiding the Dialog class to do the UI bit. </p>
