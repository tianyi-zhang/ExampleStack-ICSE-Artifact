<p>You can use a pure java library called JCodec ( <a href="http://jcodec.org">http://jcodec.org</a> ). It contains a primitive yet working H.264 ( AVC ) encoder and a fully functioning MP4 ( ISO BMF ) muxer.<br>
Here's a <strong>CORRECTED</strong> code sample that uses low-level API:  </p>

<pre><code>public void imageToMP4(BufferedImage bi) {
    // A transform to convert RGB to YUV colorspace
    RgbToYuv420 transform = new RgbToYuv420(0, 0);

    // A JCodec native picture that would hold source image in YUV colorspace
    Picture toEncode = Picture.create(bi.getWidth(), bi.getHeight(), ColorSpace.YUV420);

    // Perform conversion
    transform.transform(AWTUtil.fromBufferedImage(bi), yuv);

    // Create MP4 muxer
    MP4Muxer muxer = new MP4Muxer(sink, Brand.MP4);

    // Add a video track
    CompressedTrack outTrack = muxer.addTrackForCompressed(TrackType.VIDEO, 25);

    // Create H.264 encoder
    H264Encoder encoder = new H264Encoder(rc);

    // Allocate a buffer that would hold an encoded frame
    ByteBuffer _out = ByteBuffer.allocate(ine.getWidth() * ine.getHeight() * 6);

    // Allocate storage for SPS/PPS, they need to be stored separately in a special place of MP4 file
    List&lt;ByteBuffer&gt; spsList = new ArrayList&lt;ByteBuffer&gt;();
    List&lt;ByteBuffer&gt; ppsList = new ArrayList&lt;ByteBuffer&gt;();

    // Encode image into H.264 frame, the result is stored in '_out' buffer
    ByteBuffer result = encoder.encodeFrame(_out, toEncode);

    // Based on the frame above form correct MP4 packet
    H264Utils.encodeMOVPacket(result, spsList, ppsList);

    // Add packet to video track
    outTrack.addFrame(new MP4Packet(result, 0, 25, 1, 0, true, null, 0, 0));

    // Push saved SPS/PPS to a special storage in MP4
    outTrack.addSampleEntry(H264Utils.createMOVSampleEntry(spsList, ppsList));

    // Write MP4 header and finalize recording
    muxer.writeHeader();

}
</code></pre>

<p>You can download JCodec library from a project web site or via Maven, for this add the below snippet to your pom.xml:</p>

<pre><code>&lt;dependency&gt;
    &lt;groupId&gt;org.jcodec&lt;/groupId&gt;
    &lt;artifactId&gt;jcodec&lt;/artifactId&gt;
    &lt;version&gt;0.1.3&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<p><strong>[UPDATE 1]</strong> Android users can use something like below to convert Android Bitmap object to JCodec native format:  </p>

<pre><code>public static Picture fromBitmap(Bitmap src) {
    Picture dst = Picture.create((int)src.getWidth(), (int)src.getHeight(), RGB);
    fromBitmap(src, dst);
    return dst;
}

public static void fromBitmap(Bitmap src, Picture dst) {
    int[] dstData = dst.getPlaneData(0);
    int[] packed = new int[src.getWidth() * src.getHeight()];

    src.getPixels(packed, 0, src.getWidth(), 0, 0, src.getWidth(), src.getHeight());

    for (int i = 0, srcOff = 0, dstOff = 0; i &lt; src.getHeight(); i++) {
        for (int j = 0; j &lt; src.getWidth(); j++, srcOff++, dstOff += 3) {
            int rgb = packed[srcOff];
            dstData[dstOff]     = (rgb &gt;&gt; 16) &amp; 0xff;
            dstData[dstOff + 1] = (rgb &gt;&gt; 8) &amp; 0xff;
            dstData[dstOff + 2] = rgb &amp; 0xff;
        }
    }
}
</code></pre>
