<p>You have an example on the android demos, List6.java</p>

<p><a href="http://www.linuxtopia.org/online_books/android/devguide/guide/samples/ApiDemos/src/com/example/android/apis/view/List6.html" rel="nofollow">List6.java :Source code</a></p>

<p>Take a look at the link, here I copy part of the code just to make you an idea</p>

<pre><code> public class List6 extends ListActivity 
 {

   @Override
   protected void onListItemClick(ListView l, View v, int position, long id) 
   {    
       ((SpeechListAdapter)getListAdapter()).toggle(position);
   }
   //...
   private class SpeechListAdapter extends BaseAdapter {
     public View getView(int position, View convertView, ViewGroup parent) {
        SpeechView sv;
        if (convertView == null) {
            sv = new SpeechView(mContext, mTitles[position], mDialogue[position], mExpanded[position]);
        } else {
            sv = (SpeechView)convertView;
            sv.setTitle(mTitles[position]);
            sv.setDialogue(mDialogue[position]);
            sv.setExpanded(mExpanded[position]);
        }

        return sv;
     }
    //...

     public void toggle(int position) {
          mExpanded[position] = !mExpanded[position];
          notifyDataSetChanged();
     }
   } 
   //...

 private class SpeechView extends LinearLayout {
    public SpeechView(Context context, String title, String dialogue, boolean expanded) {
        super(context);

        this.setOrientation(VERTICAL);

        // Here we build the child views in code. They could also have
        // been specified in an XML file.

        mTitle = new TextView(context);
        mTitle.setText(title);
        addView(mTitle, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));

        mDialogue = new TextView(context);
        mDialogue.setText(dialogue);
        addView(mDialogue, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));

        mDialogue.setVisibility(expanded ? VISIBLE : GONE);
    }

    /**
     * Convenience method to set the title of a SpeechView
     */
    public void setTitle(String title) {
        mTitle.setText(title);
    }

    /**
     * Convenience method to set the dialogue of a SpeechView
     */
    public void setDialogue(String words) {
        mDialogue.setText(words);
    }

    /**
     * Convenience method to expand or hide the dialogue
     */
    public void setExpanded(boolean expanded) {
        mDialogue.setVisibility(expanded ? VISIBLE : GONE);
    }

    private TextView mTitle;
    private TextView mDialogue;
}
}
</code></pre>

<p>As you see it uses a private class to geneate the textViews <code>SpeechView</code>
On the getView of the adapter shows only the titles declared on <code>private String[] mTitles</code>.</p>

<p>When you click on that title it sets the boolean expanded to true, refreshes the adapter and because the expanded attribute is true shows the text declared on <code>private String[] mDialogue</code></p>

<p>You can run the code if you download the API demos at your SDK Manager.</p>
