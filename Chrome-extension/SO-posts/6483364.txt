<blockquote>
  <p>If there isn't a reminder stored the service must still run at boot-up to discover that. To my knowledge it's impossible to programmatically setup a BOOT_COMPLETED listener for only when it's needed.</p>
</blockquote>

<p>Sure there is. Simply disable the component using <code>PackageManager</code>, enabling it when needed. For example, here is an <code>OnSharedPreferenceChangeListener</code> that enables/disables a boot-time receiver based upon whether the user checks an "alarm" <code>CheckBoxPreference</code>:</p>

<pre><code>SharedPreferences.OnSharedPreferenceChangeListener onChange=
    new SharedPreferences.OnSharedPreferenceChangeListener() {
    public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
        if ("alarm".equals(key)) {
            boolean enabled=prefs.getBoolean(key, false);
            int flag=(enabled ?
                        PackageManager.COMPONENT_ENABLED_STATE_ENABLED :
                        PackageManager.COMPONENT_ENABLED_STATE_DISABLED);
            ComponentName component=new ComponentName(EditPreferences.this,
                                                        OnBootReceiver.class);

            getPackageManager()
                .setComponentEnabledSetting(component, flag,
                                            PackageManager.DONT_KILL_APP);

            if (enabled) {
                OnBootReceiver.setAlarm(EditPreferences.this);
            }
            else {
                OnBootReceiver.cancelAlarm(EditPreferences.this);
            }
        }
        else if ("alarm_time".equals(key)) {
            OnBootReceiver.cancelAlarm(EditPreferences.this);
            OnBootReceiver.setAlarm(EditPreferences.this);
        }
    }
};
</code></pre>

<blockquote>
  <p>Nobody wants their phone to be bogged down with these types of services at boot-up.</p>
</blockquote>

<p>A recent test indicated that there are dozens of <code>BOOT_COMPLETED</code> listeners on a conventional Android device, including a bunch from the OS. I agree that it's good form to disable the component if it is not needed, since that's not too tough to implement. However, I wouldn't worry about it when it is truly needed.</p>
