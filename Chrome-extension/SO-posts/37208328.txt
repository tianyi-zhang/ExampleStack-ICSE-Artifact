<p>The problem I can see is you are not holding response returned from server. You are returning <code>returnedUser</code> but have you checked what this variable contains?</p>

<p>you can see below method or you can use any library to communicate to server.</p>

<p>You can user RetroFit or Volley for this.</p>

<p>See these examples:</p>

<p><a href="http://www.truiton.com/2015/04/android-retrofit-tutorial/" rel="nofollow">http://www.truiton.com/2015/04/android-retrofit-tutorial/</a></p>

<p><a href="http://www.androidhive.info/2014/05/android-working-with-volley-library-1/" rel="nofollow">http://www.androidhive.info/2014/05/android-working-with-volley-library-1/</a></p>

<pre><code>public String executePost(String targetURL, String urlParameters) {
    URL url;
    HttpURLConnection connection = null;
    StringBuffer response = new StringBuffer();
    try {
        // Create connection

        url = new URL(targetURL);
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type",
                "application/x-www-form-urlencoded");

        connection.setRequestProperty("Content-Length",
                "" + Integer.toString(urlParameters.getBytes().length));

        connection.setUseCaches(false);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setConnectTimeout(timeout);
        connection.setReadTimeout(timeout);


        // Send request
        DataOutputStream wr = new DataOutputStream(
                connection.getOutputStream());
        wr.writeBytes(urlParameters);

        wr.flush();
        wr.close();

        // Get Response
        InputStream is = connection.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        String line;

        while ((line = rd.readLine()) != null) {
            response.append(line);
            response.append('\r');
        }
        rd.close();
        //Log.v("JSON ", " " + response.toString());
        return response.toString();

    } catch (SocketTimeoutException ex) {
        ex.printStackTrace();

    } catch (MalformedURLException ex) {
        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
        //  Log.v("JSON ", " " + response.toString());
    } catch (UnknownHostException e) {
        e.printStackTrace();
        //  Log.v("JSON ", " " + response.toString());
    } catch (IOException ex) {

        Logger.getLogger(getClass().getName()).log(Level.SEVERE, null, ex);
    } catch (Exception e) {
        e.printStackTrace();
        //   Log.v("JSON ", " " + response.toString());
    } finally {

        if (connection != null) {
            connection.disconnect();
        }
    }
    return null;
}
</code></pre>
