<p>Fisrt change your POJO classess as below:</p>

<pre><code>public class CategoryParentItemList {

private String subCategoryName;
private int subCategoryID;
ArrayList&lt;CategoryChildListItem&gt; childList=new ArrayList&lt;CategoryChildListItem&gt;();

public CategoryParentItemList(String subCategoryName){
    this.subCategoryName = subCategoryName;
}

public String getSubCategoryName() {
    return subCategoryName;
}

public void setSubCategoryName(String subCategoryName) {
    this.subCategoryName = subCategoryName;
}

}
</code></pre>

<p>and you child item as below:</p>

<pre><code>public class CategoryChildListItem {

private String subItemName;
private String defaultPrice;

public CategoryChildListItem(String subItemName, String defaultPrice) {
    this.subItemName = subItemName;
    this.defaultPrice = defaultPrice;
}

public String getSubItemName() {
    return subItemName;
}

public void setSubItemName(String subItemName) {
    this.subItemName = subItemName;
}

public String getDefaultPrice() {
    return defaultPrice;
}

public void setDefaultPrice(String defaultPrice) {
    this.defaultPrice = defaultPrice;
}

}
</code></pre>

<p>change the fetchResponse method as below:</p>

<pre><code>private ArrayList&lt;CategoryParentItemList&gt; fetchResponse(String result)
    {
        ArrayList&lt;CategoryParentItemList&gt; listParent = new ArrayList&lt;HomeAct.CategoryParentItemList&gt;();
        if (!result.equals(""))
        {
            try
            {
                JSONObject jsono = new JSONObject(result);
                JSONArray jarray = jsono.getJSONArray("SBL");
                CategoryParentItemList parent = null; //new
                CategoryChildListItem child = null; //new
                for (int i = 0; i &lt; jarray.length(); i++)
                {
                    JSONObject object = jarray.getJSONObject(i);

                    //Categories category = new Categories();
                    parent = new CategoryParentItemList(object.getString("SubCategoryName"));
                    parent.subCategoryID = object.getInt("SubCategoryID");
                    parent.subCategoryName = object.getString("SubCategoryName");

                    System.out.println("SCI: " + object.getString("SubCategoryID"));
                    System.out.println("SCN: " + object.getString("SubCategoryName"));

                    //category.setSubCatName(object.getString("SubCategoryName"));

                    JSONArray subItemArray = object.getJSONArray("SubCategoryItemList");

                    if (subItemArray.length() &gt; 0)
                    {
                        parent.childList=new ArrayList&lt;HomeAct.CategoryChildListItem&gt;();
                        for (int j = 0; j &lt; subItemArray.length(); j++)
                        {
                            JSONObject subItemObject = subItemArray.getJSONObject(j);
                            String strItemName = subItemObject.getString("ItemName");
                            String strDefaultPrice = subItemObject.getString("DefaultPrice");

                            child = new CategoryChildListItem(strItemName, strDefaultPrice);
                            parent.childList.add(child);

                            Log.i("strItemName", strItemName);
                            Log.i("strDefaultPrice", strDefaultPrice);
                        }

                    }
                    listParent.add(parent);
                }

                //CategoryItemListAdapter adapter = new CategoryItemListAdapter(this, listParent, listChild);
                //exListCategory.setAdapter(adapter);

            }
            catch (JSONException e)
            {
                e.printStackTrace();
            }
        }
        return listParent;
    }
</code></pre>

<p>change the onPostExecute() </p>

<pre><code>@Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);
        System.out.println("Result: "+result);
        ArrayList&lt;CategoryParentItemList&gt; listParent = fetchResponse(result.replace("\n","").trim());
        CategoryItemListAdapter adapter = new CategoryItemListAdapter(getActivity(), listParent);
            exListCategory.setAdapter(adapter);
    }
</code></pre>

<p>Also change ur adapter as below:</p>

<pre><code>public class CategoryItemListAdapter extends BaseExpandableListAdapter
{

    private Context context;
    private ArrayList&lt;CategoryParentItemList&gt; parentItemLists;

    class ViewHolderGroup
    {
        TextView lblSubCategoryName;
    }

    class ViewHolderChild
    {
        TextView lblItemName;
        TextView lblDefualtPrice;
    }

    public CategoryItemListAdapter(Context context, ArrayList&lt;CategoryParentItemList&gt; listParent)
    {
        this.context = context;
        this.parentItemLists = listParent;
    }

    @Override
    public int getGroupCount()
    {

        return parentItemLists.size();
    }

    @Override
    public int getChildrenCount(int groupPosition)
    {

        return parentItemLists.get(groupPosition).childList.size();
    }

    @Override
    public Object getGroup(int groupPosition)
    {

        return parentItemLists.get(groupPosition);
    }

    @Override
    public Object getChild(int groupPosition, int childPosition)
    {

        return parentItemLists.get(groupPosition).childList.get(childPosition);
    }

    @Override
    public long getGroupId(int groupPosition)
    {

        return groupPosition;
    }

    @Override
    public long getChildId(int groupPosition, int childPosition)
    {

        return childPosition;
    }

    @Override
    public boolean hasStableIds()
    {
        return false;
    }

    @Override
    public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent)
    {
        CategoryParentItemList parentItem = (CategoryParentItemList) getGroup(groupPosition);
        ViewHolderGroup holder = null;
        if (convertView == null)
        {
            LayoutInflater infalInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.group_header, null);
            holder = new ViewHolderGroup();
            holder.lblSubCategoryName = (TextView) convertView.findViewById(R.id.tvSubItemName);
        }
        else
        {
            holder = (ViewHolderGroup) convertView.getTag();
        }

        holder.lblSubCategoryName.setText(parentItem.getSubCategoryName());
        return convertView;
    }

    @Override
    public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent)
    {
        CategoryChildListItem childItem = (CategoryChildListItem) getChild(groupPosition, childPosition);
        ViewHolderChild holder = null;

        if (convertView == null)
        {
            LayoutInflater infalInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = infalInflater.inflate(R.layout.child_row, null);
            holder = new ViewHolderChild();
            holder.lblItemName = (TextView) convertView.findViewById(R.id.tvItemName);
            holder.lblDefualtPrice = (TextView) convertView.findViewById(R.id.tvrRupees);
        }

        else
        {
            holder = (ViewHolderChild) convertView.getTag();
        }

        holder.lblItemName.setText(childItem.getSubItemName());
        holder.lblDefualtPrice.setText(childItem.getDefaultPrice());
        return convertView;
    }

    @Override
    public boolean isChildSelectable(int groupPosition, int childPosition)
    {
        return true;
    }

}
</code></pre>
