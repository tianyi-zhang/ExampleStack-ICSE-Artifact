<p>The ContextImpl.openFileOutput is implemented as following on ICS:</p>

<pre><code>@Override
public FileOutputStream openFileOutput(String name, int mode)
    throws FileNotFoundException {
    final boolean append = (mode&amp;MODE_APPEND) != 0;
    File f = makeFilename(getFilesDir(), name);
    try {
        FileOutputStream fos = new FileOutputStream(f, append);
        setFilePermissionsFromMode(f.getPath(), mode, 0);
        return fos;
    } catch (FileNotFoundException e) {
    }

    File parent = f.getParentFile();
    parent.mkdir();
    FileUtils.setPermissions(
        parent.getPath(),
        FileUtils.S_IRWXU|FileUtils.S_IRWXG|FileUtils.S_IXOTH,
        -1, -1);
    FileOutputStream fos = new FileOutputStream(f, append);
    setFilePermissionsFromMode(f.getPath(), mode, 0);
    return fos;
}
</code></pre>

<p>The function makeFileName will make sure you cannot specify any directory structure here:</p>

<pre><code>private File makeFilename(File base, String name) {
        if (name.indexOf(File.separatorChar) &lt; 0) {
            return new File(base, name);
        }
        throw new IllegalArgumentException(
                "File " + name + " contains a path separator");
    }
</code></pre>

<p>Although this seems not possibly to see the Fnf exception, however, you can see that it is not <strong>thread safe</strong>, so f.getParentFile() might still throw that exception if some other thread is removing the /data/data/com.yourpkg.name/files directory.</p>
