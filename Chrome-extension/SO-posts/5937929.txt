<h2>1) <code>-Djava.util.logging.SimpleFormatter.format</code></h2>

<p>Java 7 supports a property with the <code>java.util.Formatter</code> format string syntax.</p>

<pre><code>-Djava.util.logging.SimpleFormatter.format=... 
</code></pre>

<p>See <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6381464">here</a>.</p>

<p>My favorite is:</p>

<pre><code>-Djava.util.logging.SimpleFormatter.format=%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$-6s %2$s %5$s%6$s%n
</code></pre>

<p>which makes output like:</p>

<pre><code>2014-09-02 16:44:57 SEVERE org.jboss.windup.util.ZipUtil unzip: Failed to load: foo.zip
</code></pre>

<h2>2) Putting it to IDEs</h2>

<p>IDEs typically let you set system properties for a project.
E.g. in NetBeans, instead of adding -D...=... somewhere, add the property in the action dialog, in a form of <code>java.util.logging.SimpleFormatter.format=%1$tY-%1$tm-...</code> - without any quotes. The IDE should figure out.</p>

<h2>3) Putting that to Maven - Surefire</h2>

<p>For your convenience, Here is how to put it to Surefire:</p>

<pre><code>        &lt;!-- Surefire --&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
            &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.17&lt;/version&gt;
            &lt;configuration&gt;
                &lt;systemPropertyVariables&gt;
                    &lt;!-- Set JUL Formatting --&gt;
                    &lt;java.util.logging.SimpleFormatter.format&gt;%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS %4$-6s %2$s %5$s%6$s%n&lt;/java.util.logging.SimpleFormatter.format&gt;
                &lt;/systemPropertyVariables&gt;
            &lt;/configuration&gt;
        &lt;/plugin&gt;
</code></pre>

<h2>4) Hand-made</h2>

<p>I have a library with <a href="http://code.google.com/p/ondrazizka/source/browse/#svn%2Ftrunk%2FDwLib%2Fsrc%2Fmain%2Fjava%2Fcz%2Fdynawest%2Flogging">few <code>java.util.logging</code> related classes</a>. Amongst them, it's <code>SingleLineFormatter</code>.
 Downloadable jar <a href="http://code.google.com/p/ondrazizka/source/browse/maven/cz/dynawest/lib/DwLib/1.01/DwLib-1.01-javadoc.jar">here</a>.</p>

<pre><code>public class SingleLineFormatter extends Formatter {

  Date dat = new Date();
  private final static String format = "{0,date} {0,time}";
  private MessageFormat formatter;
  private Object args[] = new Object[1];

  // Line separator string.  This is the value of the line.separator
  // property at the moment that the SimpleFormatter was created.
  //private String lineSeparator = (String) java.security.AccessController.doPrivileged(
  //        new sun.security.action.GetPropertyAction("line.separator"));
  private String lineSeparator = "\n";

  /**
   * Format the given LogRecord.
   * @param record the log record to be formatted.
   * @return a formatted log record
   */
  public synchronized String format(LogRecord record) {

    StringBuilder sb = new StringBuilder();

    // Minimize memory allocations here.
    dat.setTime(record.getMillis());    
    args[0] = dat;


    // Date and time 
    StringBuffer text = new StringBuffer();
    if (formatter == null) {
      formatter = new MessageFormat(format);
    }
    formatter.format(args, text, null);
    sb.append(text);
    sb.append(" ");


    // Class name 
    if (record.getSourceClassName() != null) {
      sb.append(record.getSourceClassName());
    } else {
      sb.append(record.getLoggerName());
    }

    // Method name 
    if (record.getSourceMethodName() != null) {
      sb.append(" ");
      sb.append(record.getSourceMethodName());
    }
    sb.append(" - "); // lineSeparator



    String message = formatMessage(record);

    // Level
    sb.append(record.getLevel().getLocalizedName());
    sb.append(": ");

    // Indent - the more serious, the more indented.
    //sb.append( String.format("% ""s") );
    int iOffset = (1000 - record.getLevel().intValue()) / 100;
    for( int i = 0; i &lt; iOffset;  i++ ){
      sb.append(" ");
    }


    sb.append(message);
    sb.append(lineSeparator);
    if (record.getThrown() != null) {
      try {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        record.getThrown().printStackTrace(pw);
        pw.close();
        sb.append(sw.toString());
      } catch (Exception ex) {
      }
    }
    return sb.toString();
  }
}
</code></pre>
