<p>An alternative to Daniel Bo's answer is to manually calculate the value:</p>

<pre><code>private int getColumnWidth(Context context, GridView gridView) {
    if (android.os.Build.VERSION.SDK_INT &gt;= 16)
        return gridView.getColumnWidth();

    Resources res = context.getResources();
    int lPad = (int)res.getDimension(R.dimen.left_padding);
    int rPad = (int)res.getDimension(R.dimen.right_padding);
    int hSpace = (int)res.getDimension(R.dimen.horizontal_spacing);
    int cols = gridView.getNumColumns();
    int width = gridView.getWidth();

    return (width - lPad - rPad + hSpace) / cols - hSpace;
}
</code></pre>

<p>Notice that this only works for API higher than 11 (Honeycomb) and assumes you set up the GridView with some values defined as resources. Consider for example that you have a dimens.xml that has:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;
    &lt;dimen name="left_padding"&gt;4dp&lt;/dimen&gt;
    &lt;dimen name="right_padding"&gt;8dp&lt;/dimen&gt;
    &lt;dimen name="horizontal_spacing"&gt;2dp&lt;/dimen&gt;
&lt;/resources&gt;
</code></pre>

<p>And then your layout XML file has:</p>

<pre><code>&lt;GridView
    ...
    android:horizontalSpacing="@dimen/horizontal_spacing"
    android:paddingLeft="@dimen/left_padding"
    android:paddingRight="@dimen/right_padding"
    ...
    /&gt;
</code></pre>

<p>And if you have many similar GridViews, it might be a good idea to put these properties in a custom style.</p>

<p>At least this worked for me without having to use reflection. Note that it would probably be overkill to call this function frequently.</p>

<p>Hope this helps someone.</p>
