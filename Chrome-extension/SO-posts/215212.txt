<p>Probably a bit overkill, but I enjoy this kind of isolated problem. :)</p>

<p>This code uses a temporary Set (for the uniqueness check) but removes elements directly inside the original list. Since element removal inside an ArrayList can induce a huge amount of array copying, the remove(int)-method is avoided.</p>

<pre><code>public static &lt;T&gt; void removeDuplicates(ArrayList&lt;T&gt; list) {
    int size = list.size();
    int out = 0;
    {
        final Set&lt;T&gt; encountered = new HashSet&lt;T&gt;();
        for (int in = 0; in &lt; size; in++) {
            final T t = list.get(in);
            final boolean first = encountered.add(t);
            if (first) {
                list.set(out++, t);
            }
        }
    }
    while (out &lt; size) {
        list.remove(--size);
    }
}
</code></pre>

<p>While we're at it, here's a version for LinkedList (a lot nicer!):</p>

<pre><code>public static &lt;T&gt; void removeDuplicates(LinkedList&lt;T&gt; list) {
    final Set&lt;T&gt; encountered = new HashSet&lt;T&gt;();
    for (Iterator&lt;T&gt; iter = list.iterator(); iter.hasNext(); ) {
        final T t = iter.next();
        final boolean first = encountered.add(t);
        if (!first) {
            iter.remove();
        }
    }
}
</code></pre>

<p>Use the marker interface to present a unified solution for List:</p>

<pre><code>public static &lt;T&gt; void removeDuplicates(List&lt;T&gt; list) {
    if (list instanceof RandomAccess) {
        // use first version here
    } else {
        // use other version here
    }
}
</code></pre>

<p>EDIT: I guess the generics-stuff doesn't really add any value here.. Oh well. :)</p>
