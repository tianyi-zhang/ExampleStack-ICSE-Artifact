<p>You need to use a composite ID instead of a generated ID.</p>

<blockquote>
  <p><a href="https://hibernate.onjira.com/browse/HHH-2801" rel="nofollow">HHH-2801</a></p>
  
  <p>The problem arises when a new association entity with a generated ID
  is added to the collection. The first step, when merging an entity
  containing this collection, is to cascade save the new association
  entity. The cascade must occur before other changes to the collection.
  Because the unique key for this new association entity is the same as
  an entity that is already persisted, a ConstraintViolationException is
  thrown. <strong>This is expected behavior</strong>.</p>
  
  <p>Using a new collection (i.e., one-shot delete), as suggested in the
  previous comment) also results in a constraint violation, since the
  new association entity will be saved on the cascade of the new
  collection.</p>
  
  <p>An example of one of the approaches (using a composite ID instead of a generated ID) is illustrated >in manytomanywithassocclass.tar.gz and is checked into <a href="http://anonsvn.jboss.org/repos/hibernate/core/branches/Branch_3_2/test/org/hibernate/test/manytomanyassociationclass/compositeid/" rel="nofollow">Svn</a>.</p>
</blockquote>

<pre><code>@Entity  
public class AttributeType {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE)
    private Integer id;
    @Column(unique = true, nullable = false)
    private String name;
    @OneToMany(mappedBy = "attributeType", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private List&lt;AttributeValue&gt; values = new ArrayList&lt;AttributeValue&gt;();

    //Getter, Setter...

}

@Entity
@Table (uniqueConstraints = @UniqueConstraint(columnNames = { "value", "attributeType_id" }))
public class AttributeValue{

    @EmbeddedId AttributeValueId id;    

    @MapsId(value= "id")    
    @ManyToOne(optional = false)    
    private AttributeType attributeType;

    private String value2;

    public AttributeValue() {
         this.id = new AttributeValueId(); 
    }

    public AttributeType getAttributeType() {
        return attributeType;
    }
    public void setAttributeType(AttributeType pAttributeType) {
        this.id.setAttributeTypeID(pAttributeType.getId());
        this.attributeType = pAttributeType;
    }
    public String getValue() {
        return id.getAttributeValue();
    }
    public void setValue(String value) {
        this.id.setAttributeValue(value);
    }

    @Embeddable
    public static class AttributeValueId implements Serializable {

        private Integer id;
        private String value;

        public AttributeValueId() {
        }

        public AttributeValueId(Integer pAttributeTypeID, String pAttributeValue) {
            this.id = pAttributeTypeID;
            this.value = pAttributeValue;
        }

        public Integer getAttributeTypeID() {
            return id;
        }

        public void setAttributeTypeID(Integer attributeTypeID) {
            this.id = attributeTypeID;
        }

        public String getAttributeValue() {
            return value;
        }

        public void setAttributeValue(String attributeValue) {
            this.value = attributeValue;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime
                    * result
                    + ((id == null) ? 0 : id
                            .hashCode());
            result = prime
                    * result
                    + ((value == null) ? 0 : value.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            AttributeValueId other = (AttributeValueId) obj;
            if (id == null) {
                if (other.id != null)
                    return false;
            } else if (!id.equals(other.id))
                return false;
            if (value == null) {
                if (other.value != null)
                    return false;
            } else if (!value.equals(other.value))
                return false;
            return true;
        }
    }
}
</code></pre>

<p>See <a href="http://docs.jboss.org/hibernate/core/3.6/reference/en-US/html_single/#mapping-declaration-id" rel="nofollow">5.1.2.1. Composite identifier</a> on how to do it with JPA annotation.<br>
See <a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/components.html" rel="nofollow">Chapter 8. Component Mapping</a><br>
See <a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/components.html#components-compositeid" rel="nofollow">8.4. Components as composite identifiers</a>   </p>
