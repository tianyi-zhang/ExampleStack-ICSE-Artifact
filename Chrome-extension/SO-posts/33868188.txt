<p>I had similar usecase where I had to download bunch of pics from external URL and show them in single activity. As explained by @Aashvi's link the comments, images take up 4*imageheight*imageWidth about of bytes.. So I started loading thumbnails of it. (of maximum height 300 along with maintaining the aspect ratio).
I am pasting here code from my project in which asynctask gets images and makes smaller bitmap of it and sets on imageview  and references used.</p>

<pre><code>   protected Bitmap doInBackground(String... urls) {

     Bitmap mPic = null;
    try {

        mPic = CommonUtils.getThumbnailFromUrl(urldisplay);
    } catch (OutOfMemoryError e) {
        Log.e("Error", e.getMessage());
        e.printStackTrace();
    }

}

protected void onPostExecute(Bitmap result) {
        if (result != null) {
            bmImage.setImageBitmap(result);
        }
 }
</code></pre>

<p>Here is the implementation of getThumbNailFromUrl</p>

<pre><code>public static Bitmap getThumbnailFromUrl(String url) {
    Bitmap bitmap = null;
    InputStream input;
    try {
        input = new java.net.URL(url).openStream();

        if (input != null) {
            BitmapFactory.Options onlyBoundsOptions = new BitmapFactory.Options();
            onlyBoundsOptions.inJustDecodeBounds = true;
            onlyBoundsOptions.inDither = true;//optional
            onlyBoundsOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional
            BitmapFactory.decodeStream(input, null, onlyBoundsOptions);

            input.close();
            if ((onlyBoundsOptions.outWidth == -1) || (onlyBoundsOptions.outHeight == -1))
                return null;

            int originalSize = (onlyBoundsOptions.outHeight &gt; onlyBoundsOptions.outWidth) ? onlyBoundsOptions.outHeight : onlyBoundsOptions.outWidth;

            double ratio = (originalSize &gt; 300) ? (originalSize / 300) : 1.0;

            BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
            bitmapOptions.inSampleSize = getPowerOfTwoForSampleRatio(ratio);
            bitmapOptions.inDither = true;//optional
            bitmapOptions.inPreferredConfig = Bitmap.Config.ARGB_8888;//optional
            input = new java.net.URL(url).openStream();
            bitmap = BitmapFactory.decodeStream(input, null, bitmapOptions);
            assert input != null;
            input.close();
        }

    } catch (IOException e) {
        e.printStackTrace();
    }
    return bitmap;

}
</code></pre>

<p>This code has been taken from following stackoverflow answer. 
<a href="http://stackoverflow.com/questions/3879992/get-bitmap-from-an-uri-android">Get Bitmap from an Uri [android]</a></p>

<p>Hope this helps.</p>
