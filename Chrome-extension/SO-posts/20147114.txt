<p>It of course can be made atomic by using locking, imagine the most primitive case: you have a global lock around your entire function, then everything is single-threaded and therefore thread-safe. I assume that either they meant something else or there was a general misunderstanding.</p>

<p>Your code could even be improved by using the putIfAbsent method of ConcurrentHashMap like this:</p>

<pre><code>public V compute(final A arg) throws InterruptedException {
  Future&lt;V&gt; f = cache.get(arg);
  if (f == null) {
    final Callable&lt;V&gt; eval = new Callable&lt;V&gt;() {
      public V call() throws InterruptedException {
        return c.compute(arg);
      }
    };
    final FutureTask&lt;V&gt; ft = new FutureTask&lt;V&gt;(eval);
    final Future&lt;V&gt; previousF = cache.putIfAbsent(arg, ft);
    if (previousF == null) {
      f = ft;
      ft.run(); 
    } else {
      f = previousF; // someone else will do the compute
    } 
  }
  return f.get();
}
</code></pre>

<p><code>f</code> will at the end either be a previous value that has been added in between or the initial value, at the potential cost of an extra creation of a Callable, but no call to compute is done more than once.</p>
