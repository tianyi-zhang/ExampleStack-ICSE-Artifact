<p>I found this post because I wanted to achieve the same result.  None of the other answers were completely helpful in getting this to work for me.  After some research and trial and error I got mine to work.  So I decided to share my results.</p>

<p>Variables I created for this task:</p>

<pre><code>MenuItem save_btn;
boolean b = false;`
</code></pre>

<p>Then set up the Actionbar Menu:</p>

<pre><code>    @Override
public boolean onCreateOptionsMenu(Menu menu) {
    // Inflate the menu; this adds items to the action bar if it is present.
    getMenuInflater().inflate(R.menu.update_menu_item, menu);
    save_btn = (MenuItem) menu.findItem(R.id.action_save);
    return true;
}

@Override
public boolean onPrepareOptionsMenu(Menu menu){
    save_btn.setEnabled(b);
    super.onPrepareOptionsMenu(menu);       
    return true;
}
</code></pre>

<p>Since the variable <code>boolean b</code> is initialized as false the <code>save_btn</code> is disabled when the activity is created.</p>

<p>Here is the method to toggle the <code>save_btn</code> using @OpenSourceRulzz example:</p>

<pre><code>private void updateSaveButton (CharSequence s){
    String text = null;
    if(s != null){
        text = s.toString();
    }
    if(text != null &amp;&amp; text.trim().length() != 0){
        b = true;
    }
    else{
        b = false;
    }
}
</code></pre>

<p>This method is called through the <code>TextWatcher()</code> function for the <code>EditText</code> box in <code>onCreate()</code> again using @OpenSourceRulzz example</p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    // TODO Auto-generated method stub
    super.onCreate(savedInstanceState);
    setContentView(R.layout.add_project);

    EditText projectName = (EditText) findViewById(R.id.editTextProjectName);   
    projectName.addTextChangedListener(new TextWatcher() {

        @Override
        public void onTextChanged(CharSequence s, int start, int before, int count) {
            updateSaveButton(s);
            invalidateOptionsMenu();
        }           
        @Override
        public void beforeTextChanged(CharSequence s, int start, int count,int after){}
        @Override
        public void afterTextChanged(Editable s) {}
    });
}
</code></pre>

<p>The last piece of the puzzle was adding the <code>invalidateOptionsMenu()</code> method.</p>

<p>The part that I came up with that made mine work was using the <code>boolean b</code> variable to toggle the state of of the <code>save_btn</code>.</p>
