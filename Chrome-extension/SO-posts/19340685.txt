<blockquote>
  <p>To use a synchronized block on a final attribute each time I read or
  modify one of the non-final attribute? Or to use concurrent classes,
  such as a ConcurrentMap?</p>
</blockquote>

<p><strong>Synchronization</strong> is built around an internal entity known as the <strong><em>intrinsic lock</em></strong> or monitor lock. Every object has an intrinsic lock associated with it. By convention, a thread that needs exclusive and consistent access to an object's fields has to acquire the object's intrinsic lock before accessing them, and then release the intrinsic lock when it's done with them.</p>

<p>An implementation of <strong><code>ConcurrentMap</code></strong> i.e., <strong><code>ConcurrentHashMap</code></strong> uses <strong><em>reentrant lock</em></strong> which is mutual exclusive lock, Lock is acquired by <code>lock()</code> method and held by Thread until a call to <code>unlock()</code> method. Though, <code>ReentrantLock</code> provides same visibility and orderings guaranteed as implicit lock, acquired by <strong><code>synchronized keyword</code></strong>, it provides more functionality and differ in certain aspect:</p>

<ol>
<li><code>ReentrantLock</code> can be made fair by specifying <code>fairness property</code> to provides lock to <em>longest waiting thread</em>, in case of contention.</li>
<li>provides convenient <code>tryLock()</code> method to acquires lock, only if its available or not held by any other thread, reducing blocking of thread waiting for lock. <code>tryLock()</code> with timeout can be used to timeout if lock is not available in certain time period.</li>
<li>In case of <strong><code>synchronized keyword</code></strong>, a thread can be blocked waiting for lock, for an indefinite period of time and there was no way to control that. <code>ReentrantLock</code> provides a method called <code>lockInterruptibly()</code>, which can be used to interrupt thread when it is waiting for lock.</li>
</ol>

<p>An example of use <code>reentrant lock</code> can be shown from <code>ConcurrentHashMap</code>'s inner <code>replace(K key, V oldValue, V newValue)</code> function implementaion:</p>

<pre><code>boolean replace(K key, int hash, V oldValue, V newValue) { 
               // called by replace(K key, V oldValue, V newValue)
        lock(); // acquire the lock
        try {
            HashEntry&lt;K,V&gt; e = getFirst(hash);
            while (e != null &amp;&amp; (e.hash != hash || !key.equals(e.key)))
                e = e.next;

            boolean replaced = false;
            if (e != null &amp;&amp; oldValue.equals(e.value)) {
                replaced = true;
                e.value = newValue;
            }
            return replaced;
        } finally {
            unlock(); // unlock 
        }
    }
</code></pre>

<p>There are other functions like <code>put()</code>, <code>writeObject(java.io.ObjectOutputStream)</code>, etc. are also implemented using <strong><em>reentrant synchronization</em></strong> using the <code>ReentrantLock</code>, without which, synchronized code would have to take many additional precautions to avoid having a thread cause itself to block. That is why I think for your case <code>ConcurentMap</code> is preferable. </p>

<p><strong>Reference:</strong></p>

<ol>
<li><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/locksync.html" rel="nofollow">Intrinsic Locks and Synchronization</a></li>
<li><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html" rel="nofollow">ReentrantLock Class</a></li>
<li><a href="http://javarevisited.blogspot.com/2013/03/reentrantlock-example-in-java-synchronized-difference-vs-lock.html" rel="nofollow">Difference between synchronized vs ReentrantLock</a></li>
<li><a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html" rel="nofollow">ConcurrentHashMap</a> </li>
</ol>
