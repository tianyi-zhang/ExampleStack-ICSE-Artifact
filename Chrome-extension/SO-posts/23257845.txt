<p>Start by separating your UI from you data management.  Instead of having <code>SensorDBConnection</code> return a <code>TableModel</code>, have it return the data that would be required to build a data model...</p>

<p>For example...</p>

<pre><code>public class SensorDBConnection extends ... {
    public List&lt;Sensor&gt; loadData() {
        List&lt;Sensor&gt; sensors = new ArrayList&lt;&gt;(25);
        try {
            //...
            while(results.next())
            {
                time = results.getInt(1);
                id = results.getInt(2);
                temp = results.getInt(3);
                hum = results.getInt(4);
                light = results.getInt(5);
                voltage = results.getInt(6);
                model.addRow(new Object[]{time,id,temp,hum,light,voltage});
                Sensor sens = new Sensor(id, temp, hum, light, voltage);
                sensors.add(sens);               
            }
        } finally {
            try {
                results.close();
            } catch (Exception exp) {
            }
            try {
                stmt.close();  
            } catch (Exception exp) {
            }
        }
        return sensors;
    }
}
</code></pre>

<p>Then, in <code>MyUI</code>, you would simply request the sensor data and build your <code>TableModel</code>.  To make your life simpler, create a custom <code>TableModel</code> which knows how to deal with <code>Sensor</code>s...</p>

<pre><code>public class SensorTableModel extends AbstractTableModel {

    protected static final String[] COLUMN_NAMES = {
        "TIME",
        "SENSORID",
        "TEMP",
        "HUM",
        "LIGHT",
        "VOLTAGE"
    };

    private List&lt;Sensor&gt; sensors;

    public SensorTableModel(List&lt;Sensor&gt; sensors) {
        this.sensors = sensors;
    }

    @Override
    public String getColumnName(int column) {
        return COLUMN_NAMES[column];
    }

    @Override
    public int getRowCount() {
        return sensors.size();
    }

    @Override
    public int getColumnCount() {
        return COLUMN_NAMES.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Sensor sensor = sensors.get(rowIndex);
        Object value = null;
        switch (columnIndex) {
            case 0:
                value = sensor.getTime();
                break;
            case 1:
                value = sensor.getID();
                break;
            case 2:
                value = sensor.getTemp();
                break;
            case 3:
                value = sensor.getHum();
                break;
            case 4:
                value = sensor.getLight();
                break;
            case 5:
                value = sensor.getVoltage();
                break;
        }
        return value;
    }
}
</code></pre>

<p>Then simply call the <code>loadData</code> method from <code>SensorDBConnection</code> in your <code>MyUI</code> class and simply create an instance of the <code>TableModel and apply it to the</code>JTable` instance you already have...</p>

<pre><code> public class MyUI extends ... {
     private JTable table;
     private SensorDBConnection sensor;
     //...
     protected void loadTableContents() {
         TableModel model = null;
         try {
            model = new SensorTableModel(sensor.loadData());
         } catch (SQLException exp) {
             // Handle exception
         }
         table.setModel(model);
     }
 }
</code></pre>

<p>For example...</p>
