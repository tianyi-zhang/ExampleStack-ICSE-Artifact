<blockquote>
  <p>I want to hide the menu items and title (similar to how the GMail app
  appears when it's refreshing).</p>
</blockquote>

<p>This can be done by using <code>WindowManager.addView(View, LayoutParams)</code>. Here's an example of displaying a message on top of the <code>ActionBar</code> that should give you a pretty solid idea about how to proceed. </p>

<p><strong>The layout</strong></p>

<pre><code>&lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@android:id/message"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:gravity="center"
    android:textColor="@android:color/white"
    android:textSize="18sp" /&gt;
</code></pre>

<p><strong>Implementation</strong></p>

<pre><code>/** The attribute depicting the size of the {@link ActionBar} */
private static final int[] ACTION_BAR_SIZE = new int[] {
        android.R.attr.actionBarSize
};

/** The notification layout */
private TextView mMessage;

private void showLoadingMessage() {
    // Remove any previous notifications
    removeLoadingMessage();

    // Initialize the layout
    if (mMessage == null) {
        final LayoutInflater inflater = getLayoutInflater();
        mMessage = (TextView) inflater.inflate(R.layout.your_layout, null);
        mMessage.setBackgroundColor(getResources().getColor(android.R.color.holo_blue_dark));
        mMessage.setText("Loading...");
    }

    // Add the View to the Window
    getWindowManager().addView(mMessage, getActionBarLayoutParams());
}

private void removeLoadingMessage() {
    if (mMessage != null &amp;&amp; mMessage.getWindowToken() != null) {
        getWindowManager().removeViewImmediate(mMessage);
        mMessage = null;
    }
}

/**
 * To use, @see {@link WindowManager#addView(View, LayoutParams)}
 * 
 * @return The {@link WindowManager.LayoutParams} to assign to a
 *         {@link View} that can be placed on top of the {@link ActionBar}
 */
private WindowManager.LayoutParams getActionBarLayoutParams() {
    // Retrieve the height of the status bar
    final Rect rect = new Rect();
    getWindow().getDecorView().getWindowVisibleDisplayFrame(rect);
    final int statusBarHeight = rect.top;

    // Retrieve the height of the ActionBar
    final TypedArray actionBarSize = obtainStyledAttributes(ACTION_BAR_SIZE);
    final int actionBarHeight = actionBarSize.getDimensionPixelSize(0, 0);
    actionBarSize.recycle();

    // Create the LayoutParams for the View
    final WindowManager.LayoutParams params = new WindowManager.LayoutParams(
            LayoutParams.MATCH_PARENT, actionBarHeight,
            WindowManager.LayoutParams.TYPE_APPLICATION_PANEL,
            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);
    params.gravity = Gravity.TOP;
    params.x = 0;
    params.y = statusBarHeight;
    return params;
}
</code></pre>

<p><strong>Results</strong></p>

<p><img src="http://i.stack.imgur.com/Mg7YD.png" alt="Example"></p>

<p><strong>Conclusion</strong></p>

<p>This implementation is very similar to Gmail and other apps, minus the pull-to-refresh pattern. </p>

<p>When you call <code>showLoadingMessage</code>, post a <code>Runnable</code> or use a <code>View.OnClickListener</code>. You don't want to call <code>WindowManager.addView</code> too early or you'll throw a <code>WindowManager.BadTokenException</code>. Also, it's important to call <code>removeLoadingMessage</code> in <code>Activity.onDestroy</code>, otherwise you run the risk of leaking the <code>View</code> you add to the <code>Window</code>.</p>
