<p>You can use an <code>Iterator</code> to both obtain the only element as well as verify that the collection only contains one element (thereby avoiding the <code>size()</code> call and the unnecessary list creation):</p>

<pre><code>Iterator&lt;Element&gt; iterator = set.iterator();

if (!iterator.hasNext()) {
    throw new RuntimeException("Collection is empty");
}

Element element = iterator.next();

if (iterator.hasNext()) {
    throw new RuntimeException("Collection contains more than one item");
}

return element;
</code></pre>

<p>You would typically wrap this up in its own method:</p>

<pre><code>public static &lt;E&gt; E getOnlyElement(Iterable&lt;E&gt; iterable) {
    Iterator&lt;E&gt; iterator = iterable.iterator();

    // The code I mentioned above...
}
</code></pre>

<p>Note that this implementation is already part of Google's <a href="http://code.google.com/p/guava-libraries/">Guava libraries</a> (which I <em>highly</em> recommend, even if you don't use it for this particular code). More specifically, the method belongs to the <a href="http://guava-libraries.googlecode.com/svn/tags/release08/javadoc/com/google/common/collect/Iterables.html"><code>Iterables</code> class</a>:</p>

<pre><code>Element element = Iterables.getOnlyElement(set);
</code></pre>

<p>If you're curious about how it is implemented, you can look at the <a href="http://code.google.com/p/guava-libraries/source/browse/trunk/src/com/google/common/collect/Iterators.java"><code>Iterators</code> class source code</a> (the methods in <code>Iterables</code> often call methods in <code>Iterators</code>):</p>

<pre><code>  /**
   * Returns the single element contained in {@code iterator}.
   *
   * @throws NoSuchElementException if the iterator is empty
   * @throws IllegalArgumentException if the iterator contains multiple
   *     elements.  The state of the iterator is unspecified.
   */
  public static &lt;T&gt; T getOnlyElement(Iterator&lt;T&gt; iterator) {
    T first = iterator.next();
    if (!iterator.hasNext()) {
      return first;
    }

    StringBuilder sb = new StringBuilder();
    sb.append("expected one element but was: &lt;" + first);
    for (int i = 0; i &lt; 4 &amp;&amp; iterator.hasNext(); i++) {
      sb.append(", " + iterator.next());
    }
    if (iterator.hasNext()) {
      sb.append(", ...");
    }
    sb.append('&gt;');

    throw new IllegalArgumentException(sb.toString());
  }
</code></pre>
