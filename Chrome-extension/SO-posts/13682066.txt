<p>You can use the below code to get purchase history:</p>

<pre><code>public static ArrayList&lt;VerifiedPurchase&gt; verifyPurchase(String signedData,
            String signature) {
        if (signedData == null) {
            //Log.e(TAG, "data is null");
            return null;
        }
        if (Constans.DEBUG) {
            //Log.i(TAG, "signedData: " + signedData);
        }
        boolean verified = false;
        if (!TextUtils.isEmpty(signature)) {
            /**
             * Compute your public key (that you got from the Android Market
             * publisher site).
             * 
             * Instead of just storing the entire literal string here embedded
             * in the program, construct the key at runtime from pieces or use
             * bit manipulation (for example, XOR with some other string) to
             * hide the actual key. The key itself is not secret information,
             * but we don't want to make it easy for an adversary to replace the
             * public key with one of their own and then fake messages from the
             * server.
             * 
             * Generally, encryption keys / passwords should only be kept in
             * memory long enough to perform the operation they need to perform.
             */
            String base64EncodedPublicKey = "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuKgldGQPL/xV9WKLmY62UVgEm7gsPI/T/nQxRKpYN17m8Sq3gO9nWD17wXew4oNaHmMAmArS7s7eFi3Z+XiyWil1iZvEOdBOdZD502BzujPoBa4Fu9eITPBO9tzBEdvNLXf8amnsRj53TA4bcxB2O6OcXrQIv3t3n5Dg5Nn+rJpoKSNUv7NEzJagG/2NhyjIysAObbvQ5SBQ5NgRtZlvhsTeQJPMLhRAoRcTK/+47VkhrxM3PppeGjoNRryn6d+RhMjs/nydvoQtP2V76UcUu4m+daDnK3PxOnwLt50hNtQhNf3VgixVrSKfHUWp240uEz9MHstjj8BWPH9BFF/TewIDAQAB";
            PublicKey key = Security.generatePublicKey(base64EncodedPublicKey);
            verified = Security.verify(key, signedData, signature);
            if (!verified) {
                //Log.w(TAG, "signature does not match data.");
                return null;
            }
        }

        JSONObject jObject;
        JSONArray jTransactionsArray = null;
        int numTransactions = 0;
        long nonce = 0L;
        try {
            jObject = new JSONObject(signedData);

            // The nonce might be null if the user backed out of the buy page.
            nonce = jObject.optLong("nonce");
            jTransactionsArray = jObject.optJSONArray("orders");
            if (jTransactionsArray != null) {
                numTransactions = jTransactionsArray.length();
            }
        } catch (JSONException e) {
            return null;
        }

        if (!Security.isNonceKnown(nonce)) {
            //Log.w(TAG, "Nonce not found: " + nonce);
            return null;
        }

        ArrayList&lt;VerifiedPurchase&gt; purchases = new ArrayList&lt;VerifiedPurchase&gt;();
        try {
            for (int i = 0; i &lt; numTransactions; i++) {
                JSONObject jElement = jTransactionsArray.getJSONObject(i);
                int response = jElement.getInt("purchaseState");
                PurchaseState purchaseState = PurchaseState.valueOf(response);
                String productId = jElement.getString("productId");
                String packageName = jElement.getString("packageName");
                long purchaseTime = jElement.getLong("purchaseTime");
                String orderId = jElement.optString("orderId", "");
                String notifyId = null;
                if (jElement.has("notificationId")) {
                    notifyId = jElement.getString("notificationId");
                }
                String developerPayload = jElement.optString(
                        "developerPayload", null);

                // If the purchase state is PURCHASED, then we require a
                // verified nonce.
                if (purchaseState == PurchaseState.PURCHASED &amp;&amp; !verified) {
                    continue;
                }
                purchases.add(new VerifiedPurchase(purchaseState, notifyId,
                        productId, orderId, purchaseTime, developerPayload));
            }
        } catch (JSONException e) {
            //Log.e(TAG, "JSON exception: ", e);
            return null;
        }
        removeNonce(nonce);
        return purchases;
    }
</code></pre>

<p>You can call this method from the below method in BillingService class:</p>

<pre><code>private void purchaseStateChanged(int startId, String signedData,
            String signature) {
        ArrayList&lt;Security.VerifiedPurchase&gt; purchases;
        purchases = Security.verifyPurchase(signedData, signature);
        if (purchases == null) {
            return;
        }

        ArrayList&lt;String&gt; notifyList = new ArrayList&lt;String&gt;();
        for (VerifiedPurchase vp : purchases) {
            if (vp.notificationId != null) {
                notifyList.add(vp.notificationId);
            }
            ResponseHandler.purchaseResponse(this, vp.purchaseState,
                    vp.productId, vp.orderId, vp.purchaseTime,
                    vp.developerPayload);
        }
        if (!notifyList.isEmpty()) {
            String[] notifyIds = notifyList.toArray(new String[notifyList
                    .size()]);
            confirmNotifications(startId, notifyIds);
        }
    }
</code></pre>
