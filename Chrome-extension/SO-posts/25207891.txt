<p>You will have to override render method and add handlers to your cell.</p>

<p>I have used the following class:</p>

<pre><code>abstract class CustomCell extends AbstractCell&lt;String&gt;{

    private MyObject object;
    private Set&lt;String&gt; set ;

    @Override
    public Set&lt;String&gt; getConsumedEvents() {
        set = new HashSet&lt;String&gt;();
        set.add("click");
        return set;
    }

    public void setObject(MyObject object) {
        this.object = object;

    }

    @Override
    public void render(com.google.gwt.cell.client.Cell.Context context,
            String value, SafeHtmlBuilder sb) {
        sb.appendHtmlConstant("&lt;div&gt;&lt;label&gt;"+object.getLabel()+"&lt;/label&gt;&lt;a id='idofthislelement'&gt;"+object.getAnchor()+"&lt;/a&gt;&lt;/div&gt;");
    }

    @Override
    public void onBrowserEvent(Context context, Element parent,
            String value, NativeEvent event,
            ValueUpdater&lt;String&gt; valueUpdater) {
        super.onBrowserEvent(context, parent, value, event, valueUpdater);

        if ("click".equals(event.getType())) {
            EventTarget eventTarget = (EventTarget) event.getEventTarget();
            Element targetElement = Element.as(eventTarget);
            if (parent.getFirstChildElement().isOrHasChild(targetElement)&amp;&amp;targetElement.getId().equals("idofthislelement")) {
                doAction(value, valueUpdater,object);
            }
        }
    }

    protected abstract void doAction(String value, ValueUpdater&lt;String&gt; valueUpdater,MyObject object);
</code></pre>

<p>}</p>

<p>Here's the implementation: </p>

<pre><code>private void createTextAnchorCol() {
    final CustomCell&lt;MyObject&gt; cell = new CustomCell&lt;MyObject&gt;() {

        @Override
        protected void doAction(String value,
                ValueUpdater&lt;String&gt; valueUpdater, MyObject object) {
            Window.alert("Clicked");
            //do whatever required
        }
    };
    Column&lt;MyObject, String&gt; abc = new Column&lt;MyObject, String&gt;(cell) {

        @Override
        public String getValue(MyObject object) {
            cell.setObject(object);
            return null;
        }
    };
</code></pre>
