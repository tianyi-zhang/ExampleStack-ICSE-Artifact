<p>You can also modify the EL-resolver to access public fields if a getter is not found. To do this, you first need to create your special ELResolver:</p>

<pre><code>public class PublicFieldSupportingELResolver extends ELResolver {

    @Override
    public Class&lt;?&gt; getCommonPropertyType(ELContext context, Object base) {
        return null;
    }

    @Override
    public Iterator&lt;FeatureDescriptor&gt; getFeatureDescriptors(ELContext context, Object base) {
        return null;
    }

    @Override
    public Class&lt;?&gt; getType(ELContext context, Object base, Object property) {
        return null;
    }

    @Override
    public Object getValue(ELContext context, Object base, Object property) {
        try {
            return context.getELResolver().getValue(
                    context, base, property);
        } catch(RuntimeException ex) {
            if(property instanceof String &amp;&amp; base != null) {
                try {
                    Field field = base.getClass().getDeclaredField((String) property);
                    Object value = field.get(base);
                    context.setPropertyResolved(true);
                    return value;
                } catch (Exception e) {
                    throw new PropertyNotFoundException(e);
                }
            } else {
                throw ex;
            }
        }
    }

    @Override
    public boolean isReadOnly(ELContext context, Object base, Object property) {
        return false;
    }

    @Override
    public void setValue(ELContext context, Object base, Object property, Object value) {
    }
}
</code></pre>

<p>Then you need a class to help you configure it:</p>

<pre><code>public class PublicFieldSupportingELResolverConfigurer implements ServletContextListener {

    public void contextInitialized(ServletContextEvent event) {
        JspFactory.getDefaultFactory()
                .getJspApplicationContext(event.getServletContext())
                .addELResolver(new PublicFieldSupportingELResolver());
    }

    public void contextDestroyed(ServletContextEvent event) {
    }
}
</code></pre>

<p>At last you need to run this configurer-class when the servlet starts up. Do this by adding this class as a servlet listener in your web.xml:</p>

<pre><code>  &lt;listener&gt;
    &lt;listener-class&gt;your.package.PublicFieldSupportingELResolverConfigurer&lt;/listener-class&gt;
  &lt;/listener&gt;
</code></pre>

<p>Now you can refer to public fields in your JSPs.</p>
