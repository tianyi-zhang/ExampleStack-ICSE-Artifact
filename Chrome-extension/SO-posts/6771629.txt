<p>I dont know about drawing the Rectangle but, this is how I moved the image</p>

<p><strong>MainPinchView.java</strong></p>

<pre><code>public class MainPinchView extends Activity {
int menuid = 0;
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    MainPinchImageView obj = new MainPinchImageView(this);
    Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.my);
    obj.setImage(bmp, 100, 100);
    setContentView(obj);
  }
</code></pre>

<p>}</p>

<p><strong>MainPinchImageView.java</strong></p>

<pre><code>   public class MainPinchImageView extends ImageView {

    private static final String TAG = "Touch";
    // These matrices will be used to move and zoom image
    Matrix matrix = new Matrix();
    Matrix savedMatrix = new Matrix();

    int flag = 0;

    // We can be in one of these 3 states
    static final int NONE = 0;
    static final int DRAG = 1;
    static final int ZOOM = 2;
    int mode = NONE;

    // Remember some things for zooming
    PointF start = new PointF();
    PointF mid = new PointF();
    float oldDist = 1f;

    Context context;

    public MainPinchImageView(Context context) {
        super(context);
        super.setClickable(true);
        this.context = context;

        matrix.setTranslate(1f, 1f);
        setImageMatrix(matrix);      // sets the default matrix 
        setScaleType(ScaleType.MATRIX); //Controls how the image should be resized or moved to match the size of this ImageView.

        setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                // Handle touch events here...
                switch (event.getAction() &amp; MotionEvent.ACTION_MASK) {
                case MotionEvent.ACTION_DOWN:
                    savedMatrix.set(matrix); // 
                    start.set(event.getX(), event.getY());
                    Log.d(TAG, "mode=DRAG");
                    mode = DRAG;
                    break;

                case MotionEvent.ACTION_MOVE:

                    if (mode == DRAG) {
                        // ...
                        matrix.set(savedMatrix);
                        matrix.postTranslate(event.getX() - start.x, event.getY()- start.y);
                    } 
                    break;
                }
                setImageMatrix(matrix);
                return true; // indicate event was handled
            }
        });
    }

    public void setImage(Bitmap bm, int displayWidth, int displayHeight) {
        super.setImageBitmap(bm);

        int displayheight = (getResources().getDisplayMetrics().heightPixels)/2;
        int displaywidth = (getResources().getDisplayMetrics().widthPixels)/2;

        int imgw = displayWidth/2;
        int imgh = displayHeight/2;




        // Fit to screen.
        float scale;
        if ((displayHeight / bm.getHeight()) &gt;= (displayWidth / bm.getWidth())) {
            scale = (float) displayWidth / (float) bm.getWidth();
        } else {
            scale = (float) displayHeight / (float) bm.getHeight();
        }

        savedMatrix.set(matrix);
        matrix.set(savedMatrix);
        matrix.postScale(scale, scale, mid.x, mid.y);
        setImageMatrix(matrix);

        savedMatrix.set(matrix);
        matrix.set(savedMatrix);
        matrix.postTranslate(displaywidth - imgw, displayheight - imgh);

        setImageMatrix(matrix);
    }
}
</code></pre>
