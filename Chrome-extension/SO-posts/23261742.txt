<p>Either finish the old activity when the new one is started:</p>

<pre><code> @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

         SharedPreferences prefs = getSharedPreferences(LOC_PREF_FILE, MODE_PRIVATE);
     Boolean startSecond = prefs.getBoolean("StartSecondActivty", false);

         if (startSecond) {
             Intent newpage = new Intent(this, PhonrRegistaion.class);
             startActivity(newpage);
             finish();
        }

        btn1=(Button)findViewById(R.id.button1);
        btn1.setOnClickListener(new OnClickListener() {

                @Override
                public void onClick(View arg0) {
                    // TODO Auto-generated method stub

                    Intent myintent=new Intent(this, nextActvity.class);

                    startActivities(null);
                    finish();

                    SharedPreferences prefs = getSharedPreferences(
                LOC_PREF_FILE, MODE_PRIVATE);
                SharedPreferences.Editor editor = prefs.edit();
                editor.putBoolean("StartSecondActivty", true);
                editor.commit();
                editor.apply();

                }
           });

    }
}
</code></pre>

<p>This is not permanent as such as it will reside in memory until GC.</p>

<p>If you want to permanently kill you activity (and app) try killing your own process:</p>

<pre><code>    // Kill everything you can
    public void killMyProcess() {
        try {
            Process process = Runtime.getRuntime().exec(
                    "/system/bin/kill -9 -1");
            BufferedReader reader = new BufferedReader(new InputStreamReader(
                    process.getInputStream()));
            int read;
            char[] buffer = new char[4096];
            StringBuffer output = new StringBuffer();
            while ((read = reader.read(buffer)) &gt; 0) {
                output.append(buffer, 0, read);
            }
            reader.close();
            process.waitFor();
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
</code></pre>
