<p>if you want your current location then you could use this code..</p>

<p>put this code where you want to retrieve your location</p>

<pre><code>if (gpstracker.canGetLocation()) {
            double lattitude = gpstracker.getLatitude();

            double longitude = gpstracker.getLongitude();

        } else {
            Toast.makeText(getApplicationContext(), "Please turn on Your GPS.",
                    Toast.LENGTH_LONG).show();

        }
</code></pre>

<p>// create a class with the name GPSTracker and add the following code </p>

<pre><code>public class GPSTracker extends Service implements LocationListener {

    private final Context mContext;
    boolean isGPSEnabled=false;
    boolean isNetworkEnabled=false;
    boolean canGetLocation=false;
    Location location;
    double latitude;
    double longitude;
    private static final long MIN_DISTANCE_CHANGE_FOR_UPDATES=10;  //10 meters
    private static final long MIN_TIME_BW_UPDATES=1000*60*1; //1 minute
    private LocationManager locationManager;

    public GPSTracker(Context context)
    {
        this.mContext=context;
        getLocation();
    }

    public Location getLocation()
    {
        locationManager=(LocationManager) mContext.getSystemService(LOCATION_SERVICE);

        isGPSEnabled=locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);

        isNetworkEnabled=locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

        if(!isGPSEnabled &amp;&amp; !isNetworkEnabled)
        {

        }
        else
        {
            this.canGetLocation=true;
            if(isNetworkEnabled)
            {
                locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES,this);
                if(locationManager!=null)
                {
                    location=locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                            if(location!=null)
                            {
                                latitude=location.getLatitude();
                                longitude=location.getLongitude();
                            }
                }
            }
            if(isGPSEnabled)
            {
                if(location==null)
                {
                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,MIN_TIME_BW_UPDATES, MIN_DISTANCE_CHANGE_FOR_UPDATES,this);
                }
                if(locationManager != null)
                {
                    location=locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                    if(location != null)
                    {
                        latitude=location.getLatitude();
                        longitude=location.getLongitude();
                    }
                }
            }
        }
        return location;
    }

    public void stopUsingGPS()
    {
        if(locationManager!=null)
        {
            locationManager.removeUpdates(GPSTracker.this);
        }
    }

    public double getLatitude()
    {
        if(location != null)
        {
            latitude=location.getLatitude();
        }
        return latitude;
    }

    public double getLongitude()
    {
        if(location != null)
        {
            longitude=location.getLongitude();
        }
        return longitude;
    }

    public boolean canGetLocation(){
        return this.canGetLocation;
    }

    public void showSettingAlert()
    {
        AlertDialog.Builder alertDialog=new AlertDialog.Builder(mContext);
        alertDialog.setTitle("GPS Settings");
        alertDialog.setMessage("GPS is not enabled .Do you want to go to settings menu ?");

        alertDialog.setPositiveButton("Settings",new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int which) {
                // TODO Auto-generated method stub
                Intent i=new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                mContext.startActivity(i);
            }
        });
        alertDialog.setNegativeButton("Cancel",new DialogInterface.OnClickListener() {

            public void onClick(DialogInterface dialog, int which) {
                // TODO Auto-generated method stub
                dialog.cancel();
            }
        });
    }
    public void onLocationChanged(Location location) {
        // TODO Auto-generated method stub

    }

    public void onProviderDisabled(String provider) {
        // TODO Auto-generated method stub

    }

    public void onProviderEnabled(String provider) {
        // TODO Auto-generated method stub

    }

    public void onStatusChanged(String provider, int status, Bundle extras) {
        // TODO Auto-generated method stub

    }

    @Override
    public IBinder onBind(Intent intent) {
        // TODO Auto-generated method stub
        return null;
    }



}
</code></pre>

<p>//if there is any other query then please let me know </p>
