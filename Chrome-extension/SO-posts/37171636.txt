<p>First of all add theese two lines to your <code>build.gradle</code>:</p>

<pre><code>compile 'com.google.android.gms:play-services-maps:8.4.0'
compile 'com.google.android.gms:play-services-location:8.4.0'
</code></pre>

<p>Then in your activity you must implement like that :</p>

<pre><code>public class benzinpriser_akt extends AppCompatActivity implements GoogleApiClient.ConnectionCallbacks,
GoogleApiClient.OnConnectionFailedListener,LocationListener, android.location.LocationListener {
private GoogleApiClient mGoogleApiClient;
private LocationRequest mLocationRequest;
private int UPDATE_INTERVAL = 20000; // 20 sec
private int FASTEST_INTERVAL = 10000; // 10 sec
private int DISPLACEMENT = 50; // get location per 50 meter change
protected final String TAG = "Location Service";

@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(yourlayout);
 //build google api client
 buildGoogleApiClient();

   } //oncreate end
    protected synchronized void buildGoogleApiClient() {
    Log.v(TAG, "google client building");
    if (GooglePlayServicesUtil.isGooglePlayServicesAvailable(this) == ConnectionResult.SUCCESS) {

        mGoogleApiClient = new GoogleApiClient.Builder(thisService)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(LocationServices.API).build();
        if (!mGoogleApiClient.isConnected() || !mGoogleApiClient.isConnecting()) {
            mGoogleApiClient.connect();
        }

            startListenLocation();

    } else {
        Log.e(TAG, "unable to connect to google play services.");
    }



}

     public void createLocationRequestWithDialog(final Activity activity){

    mLocationRequest.setPriority(LocationRequest.PRIORITY_BALANCED_POWER_ACCURACY);
    mLocationRequest.setInterval(UPDATE_INTERVAL);
    mLocationRequest.setFastestInterval(FASTEST_INTERVAL);
    LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder()
            .addLocationRequest(mLocationRequest);

    //**************************
    builder.setAlwaysShow(true); //this is the key ingredient
    //**************************
    PendingResult&lt;LocationSettingsResult&gt; result =
            LocationServices.SettingsApi.checkLocationSettings(mGoogleApiClient, builder.build());
    result.setResultCallback(new ResultCallback&lt;LocationSettingsResult&gt;() {
        @Override
        public void onResult(LocationSettingsResult result) {
            final Status status = result.getStatus();
            final LocationSettingsStates state = result.getLocationSettingsStates();
            switch (status.getStatusCode()) {
                case LocationSettingsStatusCodes.SUCCESS:
                    // All location settings are satisfied. The client can initialize location
                    // requests here.
                    break;
                case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:
                    // Location settings are not satisfied. But could be fixed by showing the user
                    // a dialog.
                    try {
                        // Show the dialog by calling startResolutionForResult(),
                        // and check the result in onActivityResult().
                        status.startResolutionForResult(
                                activity, 1000);
                    } catch (IntentSender.SendIntentException e) {
                        // Ignore the error.
                    }
                    break;
                case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
                    // Location settings are not satisfied. However, we have no way to fix the
                    // settings so we won't show the dialog.
                    break;
            }
        }
    });


}

public void checkGpsPermission(Activity activity) {
    if (ContextCompat.checkSelfPermission(activity, Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {
        ActivityCompat.requestPermissions(activity,
                new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                PERMISSION_ACCESS_GPS);

    }
    else
    {
        createLocationRequestWithDialog(activity);
    }


}

    protected void startListenLocation() {
    if (ActivityCompat.checkSelfPermission(thisService, Manifest.permission.ACCESS_FINE_LOCATION)
            != PackageManager.PERMISSION_GRANTED) {
        //no permission , create a notification and want permission
        NotificationManager notificationManager = (NotificationManager)
                getSystemService(NOTIFICATION_SERVICE);
        Notification n  = new Notification.Builder(thisService)
                .setContentTitle(" notification")
                .setContentText("there is no permission about using gps services, please give location permissions")
                .setSmallIcon(R.drawable.logo)
                .setAutoCancel(true)
                .build();
        notificationManager.notify((int)System.currentTimeMillis(), n);
    } else {
        // permission has been granted, continue as usual

    if(mGoogleApiClient.isConnected()) {
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);

    }

    }


}

 @Override
public void onConnected(@Nullable Bundle bundle) {

    if (mGoogleApiClient.isConnected() &amp;&amp; mLastLocation != null) {
        createLocationRequestWithDialog();
        startListenLocation();
    }
}
@Override
public void onConnectionSuspended(int i) {
    mGoogleApiClient.connect();
}
 //TODO add other override methods , onresume, onproviderenabled etc...

}//class end 
</code></pre>

<blockquote>
  <p>Battery drain :</p>
</blockquote>

<pre><code>/*
    Priority                update interval      Battery drain per hour (%)     Accuracy
    HIGH_ACCURACY           5 seconds                   7.25%                   ~10 meters
    BALANCED_POWER          20 seconds                  0.6%                    ~40 meters
    NO_POWER                N/A                         small                   ~1 mile
</code></pre>

<p>*/</p>
