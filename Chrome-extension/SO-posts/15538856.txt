<p>None of the answers here actually answer the question:</p>

<p><em>From a <code>Bitmap</code> of any size displayed by an <code>ImageView</code>, find the <strong>actual dimensions of the displayed image</strong> as opposed to the dimensions of the supplied <code>Bitmap</code>.</em></p>

<p>Namely:</p>

<ul>
<li>Using <code>ImageView.getDrawable().getInstrinsicWidth()</code> and <code>getIntrinsicHeight()</code> will both return the original dimensions.</li>
<li>Getting the <code>Drawable</code> through <code>ImageView.getDrawable()</code> and casting it to a <code>BitmapDrawable</code>, then using <code>BitmapDrawable.getBitmap().getWidth()</code> and <code>getHeight()</code> also returns the original image and its dimensions.</li>
</ul>

<p>The only way to get the <strong>actual</strong> dimensions of the displayed image is by extracting and using the transformation <code>Matrix</code> used to display the image as it is shown. This must be done after the measuring stage and the example here shows it called in an <code>Override</code> of <code>onMeasure()</code> for a custom <code>ImageView</code>:</p>

<pre><code>public class SizeAwareImageView extends ImageView {

    public SizeAwareImageView(Context context) {
        super(context);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        // Get image matrix values and place them in an array
        float[] f = new float[9];
        getImageMatrix().getValues(f);

        // Extract the scale values using the constants (if aspect ratio maintained, scaleX == scaleY)
        final float scaleX = f[Matrix.MSCALE_X];
        final float scaleY = f[Matrix.MSCALE_Y];

        // Get the drawable (could also get the bitmap behind the drawable and getWidth/getHeight)
        final Drawable d = getDrawable();
        final int origW = d.getIntrinsicWidth();
        final int origH = d.getIntrinsicHeight();

        // Calculate the actual dimensions
        final int actW = Math.round(origW * scaleX);
        final int actH = Math.round(origH * scaleY);

        Log.e("DBG", "["+origW+","+origH+"] -&gt; ["+actW+","+actH+"] &amp; scales: x="+scaleX+" y="+scaleY);
    }

}  
</code></pre>

<p><strong>Note:</strong> To get the image transformation <code>Matrix</code> from code in general (like in an <code>Activity</code>), the function is <code>ImageView.getImageMatrix()</code> - e.g. <code>myImageView.getImageMatrix()</code></p>
