<p>I would parse the text BEFORE you add it to the Document. </p>

<p>You would also want to get rid of the if/else statements. Anytime you see a structure like that you know you have a design problem.</p>

<p>Here is the approach I would use:</p>

<pre><code>public void addText(String text)
{
    HashMap&lt;String, AttributeSet&gt; attributes = new HashMap&lt;String, AttributeSet&gt;();
    attributes.put("0", black);
    attributes.put("1", blue);

    String[] lines = text.split("%");

    for (int i = 1; i &lt; lines.length; i++)
    {
        String line = lines[i];
        String key = line.substring(0, 1);
        String theText = line.substring(1);
        AttributeSet attribute = attributes.get(key);

        try
        {
            int len = doc.getLength();
            doc.insertString(len, theText, attribute);
        }
        catch (BadLocationException e)
        {
            e.printStackTrace();
        }
    }
}
</code></pre>

<p>Instead of defining all the colours as constants I would just put the attribute into the map and this would be done as part of initializing the GUI, since you don't want to rebuild the Map every time you invoke the addText() method.</p>

<p>Also, I change my code to search for an "%", since I don't know what that other character is, so you will need to change that back to your special delimiter. Actually, you should define a constant variable to contain the delimiter value.</p>

<p>Finally, you should NOT be using setBounds() with your GUI components. Swing was designed to be used with layout managers.</p>
