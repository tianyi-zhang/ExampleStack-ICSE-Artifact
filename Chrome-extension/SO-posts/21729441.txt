<p>Thanks for the video.<br>
This looks like a 3D-Rotation to me. The animation is probably started in the <code>getView</code> method of the adapter. This means there are three steps to do:  </p>

<ol>
<li>Check for custom <code>ListAdapter</code>, e.g. <a href="http://www.myandroidsolutions.com/2012/07/19/android-listview-with-viewholder-tutorial/" rel="nofollow">here</a>. You will also find a lot of questions/answers on so</li>
<li><a href="http://stackoverflow.com/a/8937149/1798304">Click here</a> to see how to start an animation in <code>getView</code></li>
<li>Check <a href="http://stackoverflow.com/a/7709176/1798304">this answer here</a>. It describes where to find an example for 3D-Animation</li>
</ol>

<p>I haven't checked for 3D-Animation myself, but the <code>ListAdapter</code> and the <code>Animation</code> on it should not be a big problem.  </p>

<hr>

<p><strong>Edit</strong>:<br>
You don't have to load the animation from xml. You may do it like this:</p>

<pre><code>public View getView(int position, View view, ViewGroup viewGroup) {
    // normal handling
    // ...
    // now apply animation
    view.startAnimation(new Rotate3dAnimation(/*params*/));
}
</code></pre>

<hr>

<p><strong>Edit2</strong>:<br>
I have now tested it myself, here are things I changed to make it working:  </p>

<ol>
<li>I forgot to set the duration of an animation, I did set this</li>
<li>The height and width of the view are not set in <code>getView</code>, so removed the parameters <code>centerX</code> and <code>centerY</code> and added <code>View view</code> and gave it the <code>rowView</code>  </li>
<li>The animation is using <code>camera.rotateY</code>, but this needs to be changed to <code>camera.rotateX</code>  </li>
</ol>

<p>This is my updated Rotate3dAnimation:</p>

<pre><code>package de.malaka.player.animation;

import android.view.View;
import android.view.animation.Animation;
import android.view.animation.Transformation;
import android.graphics.Camera;
import android.graphics.Matrix;

/**
 * An animation that rotates the view on the Y axis between two specified angles.
 * This animation also adds a translation on the Z axis (depth) to improve the effect.
 */
public class Rotate3dAnimation extends Animation {
private final float mFromDegrees;
private final float mToDegrees;
private final float mDepthZ;
private final View mView;
private final boolean mReverse;
private Camera mCamera;

/**
 * Creates a new 3D rotation on the Y axis. The rotation is defined by its
 * start angle and its end angle. Both angles are in degrees. The rotation
 * is performed around a center point on the 2D space, definied by a pair
 * of X and Y coordinates, called centerX and centerY. When the animation
 * starts, a translation on the Z axis (depth) is performed. The length
 * of the translation can be specified, as well as whether the translation
 * should be reversed in time.
 *
 * @param fromDegrees the start angle of the 3D rotation
 * @param toDegrees the end angle of the 3D rotation
 * @param centerX the X center of the 3D rotation
 * @param centerY the Y center of the 3D rotation
 * @param reverse true if the translation should be reversed, false otherwise
 */
public Rotate3dAnimation(float fromDegrees, float toDegrees, float depthZ, boolean reverse, View view) {
    mFromDegrees = fromDegrees;
    mToDegrees = toDegrees;
    mDepthZ = depthZ;
    mReverse = reverse;
    mView = view;
}

@Override
public void initialize(int width, int height, int parentWidth, int parentHeight) {
    super.initialize(width, height, parentWidth, parentHeight);
    mCamera = new Camera();
}

@Override
protected void applyTransformation(float interpolatedTime, Transformation t) {
    final float fromDegrees = mFromDegrees;
    float degrees = fromDegrees + ((mToDegrees - fromDegrees) * interpolatedTime);

    final float centerX = mView.getWidth()/2;
    final float centerY = mView.getHeight()/2;
    final Camera camera = mCamera;

    final Matrix matrix = t.getMatrix();

    camera.save();
    if (mReverse) {
        camera.translate(0.0f, 0.0f, mDepthZ * interpolatedTime);
    } else {
        camera.translate(0.0f, 0.0f, mDepthZ * (1.0f - interpolatedTime));
    }
    camera.rotateX(degrees);
    camera.getMatrix(matrix);
    camera.restore();

    matrix.preTranslate(-centerX, -centerY);
    matrix.postTranslate(centerX, centerY);
}
}
</code></pre>

<p>And this is how I use it in the adapter:</p>

<pre><code>Animation anim = new Rotate3dAnimation(90.0f, 0.0f, 100.0f, false, convertView);
anim.setDuration(1000l);
convertView.startAnimation(anim);
</code></pre>

<p>The duration is pretty long right now, but this way you can adjust the values.</p>
