<p>Not sure, but I think I can use less memory and get dependable performance by doing it char-by-char.  I was doing something similar, but in loops in background threads, so I am trying this for now.  I've had some experience with String.split being more expensive then expected.  And I am working on Android and expect GC hiccups to be more of an issue then cpu use.</p>

<pre><code>  public static String toCamelCase(String value) {
    StringBuilder sb = new StringBuilder();

    final char delimChar = '_';
    boolean lower = false;
    for (int charInd = 0; charInd &lt; value.length(); ++charInd) {
      final char valueChar = value.charAt(charInd);
      if (valueChar == delimChar) {
        lower = false;
      } else if (lower) {
        sb.append(Character.toLowerCase(valueChar));
      } else {
        sb.append(Character.toUpperCase(valueChar));
        lower = true;
      }
    }

    return sb.toString();
  }
</code></pre>

<p>A hint that String.split is expensive is that its input is a regex (not a char like String.indexOf) and it returns an array (instead of say an iterator because the loop only uses one things at a time).  Plus cases like "AB_AB_AB_AB_AB_AB..." break the efficiency of any bulk copy, and for long strings use an order of magnitude more memory then the input string.</p>

<p>Whereas looping through chars has no canonical case.  So to me the overhead of an unneeded regex and array seems generally less preferable (then giving up possible bulk copy efficiency).  Interested to hear opinions / corrections, thanks.</p>
