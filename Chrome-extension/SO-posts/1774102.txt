<p><code>java.util.Arrays.sort(myArray);</code></p>

<p>That's how binarySearch is designed to work - it assumes sorting so that it can find faster.</p>

<p>If you just want to find something in a list in O(n) time, don't use BinarySearch, use <a href="http://www.koders.com/java/fid6AD75582FF314916DF534D7CF06C853741726537.aspx" rel="nofollow">indexOf</a>. All other implementations of this algorithm posted on this page are wrong because they fail when the array contains nulls, or when the item is not present.</p>

<pre><code>public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {
    if (array == null) {
        return -1;
    }
    if (startIndex &lt; 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i &lt; array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else {
        for (int i = startIndex; i &lt; array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return -1;
}
</code></pre>
