<p>I like the idea of letting "thin" characters count as half a character. Simple and a good approximation.</p>

<p>The main issue with most ellipsizings however, are (imho) that <strong>they chop of words in the middle</strong>. Here is a solution taking word-boundaries into account (but does not dive into pixel-math and the Swing-API).</p>

<pre><code>private final static String NON_THIN = "[^iIl1\\.,']";

private static int textWidth(String str) {
    return (int) (str.length() - str.replaceAll(NON_THIN, "").length() / 2);
}

public static String ellipsize(String text, int max) {

    if (textWidth(text) &lt;= max)
        return text;

    // Start by chopping off at the word before max
    // This is an over-approximation due to thin-characters...
    int end = text.lastIndexOf(' ', max - 3);

    // Just one long word. Chop it off.
    if (end == -1)
        return text.substring(0, max-3) + "...";

    // Step forward as long as textWidth allows.
    int newEnd = end;
    do {
        end = newEnd;
        newEnd = text.indexOf(' ', end + 1);

        // No more spaces.
        if (newEnd == -1)
            newEnd = text.length();

    } while (textWidth(text.substring(0, newEnd) + "...") &lt; max);

    return text.substring(0, end) + "...";
}
</code></pre>

<p>A test of the algorithm looks like this:</p>

<p><img src="http://i.stack.imgur.com/DSYNr.png" alt="enter image description here"></p>
