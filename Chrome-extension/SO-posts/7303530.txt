<p>It seems very odd to be directing an OutputStream to what appears to be a text field in a GUI of some kind. Are you sure that's what you really want? If you want to capture something being written to a Writer, a <a href="http://download.oracle.com/javase/6/docs/api/java/io/StringWriter.html" rel="nofollow">StringWriter</a> is usually appropriate. You just let the writing happen, then call <a href="http://download.oracle.com/javase/6/docs/api/java/io/StringWriter.html#toString%28%29" rel="nofollow">toString()</a> on it to get the final result. If you really <em>are</em> looking for a way to write stuff to a text field as it's written to a Writer/OutputStream, then check this out:</p>

<pre><code>public static void main(String[] args) throws Exception {
    JFrame frame = new JFrame("I be streamin!");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    JTextField field = new JTextField();
    frame.add(field);
    frame.pack();
    frame.setVisible(true);

    System.out.println("Enter stuff to write to the field");
    char c;
    InputStreamReader in = new InputStreamReader(System.in, "UTF-8");
    while ((c = (char) in.read()) != -1) {
        String currentText = field.getText();
        field.setText(currentText + c);
        Thread.sleep(250);
    }
}
</code></pre>

<p>Note 1: Use the right encoding in place of UTF-8.</p>

<p>Note 2: While I slowed this down with a Thread.sleep(), writing a character at a time to a field is somewhat wasteful in itself because you're constantly creating and throwing away Strings. Doing some small amount of buffering, like using a StringWriter as I mentioned earlier, might be a better approach unless you're after the "live feed" feel of having stuff appear as it's read in.</p>
