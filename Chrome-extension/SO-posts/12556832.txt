<p>I wanted a simple and reusable interface that listens for two finger double taps and behaves like GestureDetector.  So that you could use it like this (all cut &amp; paste runnable code):</p>

<pre><code>public class Example extends Activity {
    SimpleTwoFingerDoubleTapDetector multiTouchListener = new SimpleTwoFingerDoubleTapDetector() {
        @Override
        public void onTwoFingerDoubleTap() {
            // Do what you want here, I used a Toast for demonstration
            Toast.makeText(Example.this, "Two Finger Double Tap", Toast.LENGTH_SHORT).show();
        }
    };

    // Override onCreate() and anything else you want

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if(multiTouchListener.onTouchEvent(event))
            return true;
        return super.onTouchEvent(event);
    }
}
</code></pre>

<p>I created SimpleTwoFingerDoubleTapDetector. (It's a long name, but it is descriptive. You can rename it as anything you want.) Save this new file inside your project or as a library: </p>

<pre><code>public abstract class SimpleTwoFingerDoubleTapDetector {
    private static final int TIMEOUT = ViewConfiguration.getDoubleTapTimeout() + 100;
    private long mFirstDownTime = 0;
    private boolean mSeparateTouches = false;
    private byte mTwoFingerTapCount = 0;

    private void reset(long time) {
        mFirstDownTime = time;
        mSeparateTouches = false;
        mTwoFingerTapCount = 0;
    }

    public boolean onTouchEvent(MotionEvent event) {
        switch(event.getActionMasked()) {
        case MotionEvent.ACTION_DOWN:
            if(mFirstDownTime == 0 || event.getEventTime() - mFirstDownTime &gt; TIMEOUT) 
                reset(event.getDownTime());
            break;
        case MotionEvent.ACTION_POINTER_UP:
            if(event.getPointerCount() == 2)  
                mTwoFingerTapCount++;
            else 
                mFirstDownTime = 0;
            break;
        case MotionEvent.ACTION_UP:
            if(!mSeparateTouches)
                mSeparateTouches = true;
            else if(mTwoFingerTapCount == 2 &amp;&amp; event.getEventTime() - mFirstDownTime &lt; TIMEOUT) {
                onTwoFingerDoubleTap();
                mFirstDownTime = 0;
                return true;
            }
        }               

        return false;
    }

    public abstract void onTwoFingerDoubleTap();
}
</code></pre>

<p>First, a few notes about Android (one-touch) <strong>GestureDetector</strong>:</p>

<ul>
<li>Android's <code>onDoubleTap()</code> event uses a standard timeout value from ViewConfiguration. I refer to the same time.</li>
<li>They measure the elapsed time from the first tap's finger-down event to the second tap's finger-down event, and then broadcast <code>onDoubleTap()</code> and <code>onDoubleTapEvent()</code>.
<ul>
<li><code>onDoubleTap()</code> is fired only when the second tap's finger-down event occurs.</li>
<li><code>onDoubleTapEvent()</code> is fired for every action by the second tap: down, move, and up.</li>
</ul></li>
</ul>

<p>A few notes on <strong>SimpleTwoFingerDoubleTapDetector</strong>:  </p>

<ul>
<li>My timeout is measured from the first finger-down event to the last finger-<em>up</em> event to prevent false double-tap notifications. I added a little extra time to the default ViewConfiguration double tap timeout to account for this.</li>
<li>Android's GestureDetector measures slop (how far apart the two taps are). I didn't see the need for this here, nor did I check the distance between the two fingers on each tap. </li>
<li>I only broadcast one event <code>onTwoFingerDoubleTap()</code>. </li>
</ul>

<hr>

<p><strong>Final note:</strong>
You can <em>easily</em> change this to behave like an OnTouchListener:</p>

<ol>
<li><p>Change SimpleTwoFingerDoubleTapDetector's definition:</p>

<pre><code>public abstract class SimpleTwoFingerDoubleTapListener implements OnTouchListener {
</code></pre></li>
<li><p>Add a new class variable:</p>

<pre><code>private View mFirstView;
</code></pre></li>
<li><p>Change the <code>ACTION_DOWN</code> case:</p>

<pre><code>case MotionEvent.ACTION_DOWN:
    if(mFirstDownTime == -1 || mFirstView != v || hasTimedOut(event.getEventTime())) {
        mFirstView = v;
        reset(event.getDownTime());
    }
    break;
</code></pre></li>
<li><p>Pass <code>mFirstView</code> inside the <code>ACTION_UP</code> case:</p>

<pre><code>onTwoFingerDoubleTap(mFirstView);
</code></pre></li>
<li><p>Last, change the <code>onTwoFingerDoubleTap()</code> method to reflect which View was tapped:</p>

<pre><code>public abstract void onTwoFingerDoubleTap(View v);
</code></pre></li>
</ol>
