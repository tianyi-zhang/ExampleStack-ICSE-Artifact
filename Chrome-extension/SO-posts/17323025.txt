<p>The main issue in your code was caused by a failure to specify an IV value. You must specify an IV value when doing CBC-mode encryption and use that same value when performing the CBC-mode decryption. </p>

<p>Another problem is the mix and match of creating strings from byte arrays and base64-encoding. You also return <code>null</code> from your decrypt method every time. Even if you meant <code>return original.toString();</code>, that's still wrong (because <code>toString()</code> doesn't do what you wish it would on a byte array).</p>

<p>Below is an improved version of your code. It's far from optimal, but it compiles and works. You need to improve this to use a random IV. <strong>Also, if you plan to derive keys from passwords, don't just get the bytes, use a derivation function such as PBKDF2</strong>. You can see an example of using PBKDF2 in the <a href="https://github.com/RNCryptor/JNCryptor/blob/master/src/main/java/org/cryptonode/jncryptor/AES256JNCryptor.java#L152" rel="nofollow">JNCryptor source</a>.</p>

<pre><code>public class EncryptionTest {

  public static void main(String[] args) {
    try {

      String key = "ThisIsASecretKey";
      byte[] ciphertext = encrypt(key, "1234567890123456");
      System.out.println("decrypted value:" + (decrypt(key, ciphertext)));

    } catch (GeneralSecurityException e) {
      e.printStackTrace();
    }
  }

  public static byte[] encrypt(String key, String value)
      throws GeneralSecurityException {

    byte[] raw = key.getBytes(Charset.forName("UTF-8"));
    if (raw.length != 16) {
      throw new IllegalArgumentException("Invalid key size.");
    }

    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec,
        new IvParameterSpec(new byte[16]));
    return cipher.doFinal(value.getBytes(Charset.forName("UTF-8")));
  }

  public static String decrypt(String key, byte[] encrypted)
      throws GeneralSecurityException {

    byte[] raw = key.getBytes(Charset.forName("UTF-8"));
    if (raw.length != 16) {
      throw new IllegalArgumentException("Invalid key size.");
    }
    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");

    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    cipher.init(Cipher.DECRYPT_MODE, skeySpec,
        new IvParameterSpec(new byte[16]));
    byte[] original = cipher.doFinal(encrypted);

    return new String(original, Charset.forName("UTF-8"));
  }
}
</code></pre>
