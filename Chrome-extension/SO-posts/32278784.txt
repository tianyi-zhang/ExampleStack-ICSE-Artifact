<p>The best way is to contact <strong>GCM</strong> is through <strong>services</strong>.</p>

<ol>
<li><p>Creates a <strong>IntentService</strong> to catch the intent released from the 
activity</p>

<blockquote>
  <p>onHandleIntent(Intent intent)</p>
</blockquote></li>
<li><p>Device sends service request GCM and receives the tokenID. </p>

<p>InstanceID instanceID = InstanceID.getInstance(this);
String token = instanceID.getToken(getString(R.string.gcm_defaultSenderId),
                            GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);</p></li>
<li><p>Implement this method to send any registration to your app's servers. </p>

<blockquote>
  <p>sendRegistrationToserver(token)</p>
</blockquote></li>
<li><p>Notify UI that registrationComplete</p>

<p>Intent registrationComplete = new Intent(GcmUtils.REGISTRATION_COMPLETE);
    LocalBroadcastManager.getInstance(this).sendBroadcast(registrationComplete);</p></li>
<li><strong>(Optional)</strong> Subscribe to topic channels
private void subscribeTopics(String token, ArrayList topics_gcm)throws IOException {
        for (String topic : topics_gcm) {
            GcmPubSub pubSub = GcmPubSub.getInstance(this);
            pubSub.subscribe(token, topic, null);
        }
}</li>
</ol>

<p><strong>Full IntentService:</strong></p>

<pre><code>public class RegistrationIntentService extends IntentService {
private static final String TAG = "RegIntentService";

public RegistrationIntentService() {
    super(TAG);
}

@Override
protected void onHandleIntent(Intent intent) {

    ArrayList&lt;String&gt; topics_gcm = intent.getStringArrayListExtra("topics_gcm");
    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);

    try {
        // In the (unlikely) event that multiple refresh operations occur simultaneously,
        // ensure that they are processed sequentially.
        synchronized (TAG) {
            // Initially this call goes out to the network to retrieve the token, subsequent calls
            // are local.
            // [START get_token]
            InstanceID instanceID = InstanceID.getInstance(this);
            String token = instanceID.getToken(getString(R.string.gcm_defaultSenderId),
                    GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
            // [END get_token]
            Log.i(TAG, "GCM Registration Token: " + token);

            // TODO: Implement this method to send any registration to your app's servers.
            //sendRegistrationToServer(token);

            // TODO: Subscribe to topic channels
            //subscribeTopics(token, topics_gcm);

            // You should store a boolean that indicates whether the generated token has been
            // sent to your server. If the boolean is false, send the token to your server,
            // otherwise your server should have already received the token.
            sharedPreferences.edit().putBoolean(GcmUtils.SENT_TOKEN_TO_SERVER, true).apply();
            // [END register_for_gcm]
        }
    } catch (Exception e) {
        Log.d(TAG, "Failed to complete token refresh", e);
        // If an exception happens while fetching the new token or updating our registration data
        // on a third-party server, this ensures that we'll attempt the update at a later time.
        sharedPreferences.edit().putBoolean(GcmUtils.SENT_TOKEN_TO_SERVER, false).apply();
    }
    // Notify UI that registration has completed, so the progress indicator can be hidden.
    Intent registrationComplete = new Intent(GcmUtils.REGISTRATION_COMPLETE);
    LocalBroadcastManager.getInstance(this).sendBroadcast(registrationComplete);
}

/**
 * Persist registration to third-party servers.
 *
 * Modify this method to associate the user's GCM registration token with any server-side account
 * maintained by your application.
 *
 * @param token The new token.
 */
private void sendRegistrationToServer(String token) {
    // Add custom implementation, as needed.
}

/**
 * Subscribe to any GCM topics of interest, as defined by the TOPICS constant.
 *
 * @param token GCM token
 * @throws IOException if unable to reach the GCM PubSub service
 */
// [START subscribe_topics]
private void subscribeTopics(String token, ArrayList&lt;String&gt; topics_gcm) throws IOException {
    for (String topic : topics_gcm) {
        GcmPubSub pubSub = GcmPubSub.getInstance(this);
        pubSub.subscribe(token, topic, null);
    }
}
// [END subscribe_topics]
</code></pre>

<p>}</p>

<ol start="6">
<li>Start IntentService from any context: activity, service....<br>
<code>Intent intent = new Intent(getContext(), egistrationIntentService.class);
intent.putCharSequenceArrayListExtra("topics_gcm", topcics_gcm);
getContext().startService(intent);</code></li>
</ol>
