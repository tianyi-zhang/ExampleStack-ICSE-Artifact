<p>Testing Android Apps, with Robolectric 2.1.1, that use google-play-services_lib (Google Maps) produces AndroidManifest.xml not found RuntimeException.</p>

<p><strong>The short answer is here in bold. The long answer is below it.</strong></p>

<p><strong>Look in your project for a file named project.properties</strong></p>

<p><strong>Create a new file called test-project.properties</strong></p>

<p><strong>Override any or all of the android.library.reference.$</strong></p>

<p><strong>For example in my project.properties it had this library reference:</strong></p>

<pre><code>**android.library.reference.1=../../../ADK/adt-bundle-windows-x86_64-20130522/sdk/extras/google/google_play_services/libproject/google-play-services_lib**
</code></pre>

<p><strong>I overrode it in the test-project.properties file</strong></p>

<p><strong>android.library.reference.1=res</strong></p>

<p><strong>Put the AndroidManifest.xml from the google-play-services_lib into the res(or any folder in the project) folder of the project you are testing</strong></p>

<p>The long answer:  </p>

<p>I was having the same issue and was thinking the problem was the same as described above "google-play-services library manifest instead of the main application manifest"  So I removed all my references to the google-place-services_lib and still received the error.  I downloaded the 2.1.1 Robolectric code from github and started debugging through it. I found that org.robolectric.AndroidManifest class has a method called getLibraryManifests which calls createLibraryManifests and that calls findLibraries. One of the things it does is loads the project.properties file in your project.  In my case my project.properties file at this content:<br>
   android.library.reference.1=../../../ADK/adt-bundle-windows-x86_64-20130522/sdk/extras/google/google_play_services/libproject/google-play-services_lib</p>

<p>This was created when I used the Android Tools for the google play services install per Google's documentation.   If you comment out that line from project.properties file then the error goes away.  A better solution is to leave it and then create your own file called test-project.properties and put in the correct directory for android.library.reference.1 and the AndroidManifest will override the original value.  </p>

<p>Here is the relevant code from AndroidManifest.java</p>

<pre><code>protected List&lt;FsFile&gt; findLibraries() {
FsFile baseDir = getBaseDir();
List&lt;FsFile&gt; libraryBaseDirs = new ArrayList&lt;FsFile&gt;();

Properties properties = getProperties(baseDir.join("project.properties"));
// get the project.properties overrides and apply them (if any)
Properties overrideProperties = getProperties(baseDir.join("test-project.properties"));
if (overrideProperties!=null) properties.putAll(overrideProperties);
if (properties != null) {
int libRef = 1;
String lib;
while ((lib = properties.getProperty("android.library.reference." + libRef)) != null) {
FsFile libraryBaseDir = baseDir.join(lib);
libraryBaseDirs.add(libraryBaseDir);
libRef++;
}
}
return libraryBaseDirs;
}
</code></pre>
