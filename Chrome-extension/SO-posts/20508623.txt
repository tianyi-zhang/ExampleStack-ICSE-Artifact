<p>You dont have to look for that, but ask the system. </p>

<p>Every device has a sort of supported resolutions. You can select the best available size for your requirements:</p>

<p>What to do? </p>

<p><strong>Step 1.</strong></p>

<p>you have to check for the supported sizes. You can do it with</p>

<pre><code>Camera.Parameters p = myCamera.getParameters(); 
List&lt;Size&gt; previewsizes = p.getSupportedPreviewSizes();
List&lt;Size&gt; videosizes = p.getSupportedVideoSizes();
</code></pre>

<p>and then, you can choose one. If you want to automatize this, you can go further, and follow the</p>

<p><strong>Step 2</strong> </p>

<p>write a function to select the best available size, which will receive  the supported sizes, and the desired size. Yo can get  the size  whose ratio is closer to the desired, and if none is good enough, you get the one which height is closed to the desired, or you can get  just the biggest  something like:</p>

<pre><code>public static final int BEST_RATIO=0;
public static final int IMPORTANT_HEIGHT=2;
public static final int IMPORTANT_WIDTH=1;
public static final int BIGGEST=3;

private Size getOptimalPreviewSize(List&lt;Size&gt; sizes, int w, int h, int mode) {
    final double ASPECT_TOLERANCE = 0.2;
    double targetRatio = (double) w / h;
    if (sizes == null)
        return null;

    Size optimalSize = null;
    double minDiff = Double.MAX_VALUE;

    int targetHeight = h;

   if (mode==BEST_RATIO)
   {  for (Size size : sizes) {
        Log.d("Camera", "Checking size " + size.width + "w " + size.height
                + "h");
        double ratio = (double) size.width / size.height;
        if (Math.abs(ratio - targetRatio) &gt; ASPECT_TOLERANCE)
            continue;
        if (Math.abs(size.height - targetHeight) &lt; minDiff) {
            optimalSize = size;
            minDiff = Math.abs(size.height - targetHeight);
        }
    }
   }


   if (mode= IMPORTANT_HEIGHT) { //you can do other for width
        minDiff = Double.MAX_VALUE;
        for (Size size : sizes) {
            if (Math.abs(size.height - targetHeight) &lt; minDiff) {
                optimalSize = size;
                minDiff = Math.abs(size.height - targetHeight);
            }
        }
    }
     if (mode=IMPORTANT_WIDTH) { //you can do other for width
        minDiff = Double.MAX_VALUE;
        for (Size size : sizes) {
            if (Math.abs(size.Width - targetWidth) &lt; minDiff) {
                optimalSize = size;
                minDiff = Math.abs(size.Width - targetWidth);
            }
        }
    }   

  else  { 
       minDiff = 0;
       for (Size size : sizes) {
           if (  size.height * size.width &gt; minDiff ) {
               optimalSize = size;
               minDiff = size.height * size.width ;
           }
       }
   }
  return optimalSize;
}
</code></pre>

<p>And the last step, set the parameters</p>

<p><strong>Step 3</strong></p>

<pre><code>private int desiredwidth=640, desiredheight=360; 

Size optimalPreviewSize = getOptimalPreviewSize(previewsizes, desiredwidth, desiredheight,BIGGEST);         

Size optimalVideoSize = getOptimalPreviewSize(videosizes, desiredwidth, desiredheight,BIGGEST);      

p.setPreviewSize(optimalPreviewSSize.width, optimalPreviewSSize.height);
CamcorderProfile profile = CamcorderProfile.get(cameraid, CamcorderProfile.QUALITY_LOW);
 profile.videoFrameHeight= optimalVideoSize.height;
 profile.videoFrameWidth=optimalVideoSize.with;
 mCamera.unlock();
 mMediaRecorder.setCamera(mCamera);
 mMediaRecorder = new MediaRecorder();
 mMediaRecorder.setVideoSize(optimalVideoSize.width, optimalVideoSize.height);
 myCamera.setParameters(p);
</code></pre>
