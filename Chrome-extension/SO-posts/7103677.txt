<p>If you look at <a href="http://www.docjar.com/html/api/java/util/HashMap.java.html">the source</a> you will see that it does not rely on the default serialization mechanism, but manually writes out all the entries (as an alternating stream of keys and values):</p>

<pre><code>/**
  * Save the state of the &lt;tt&gt;HashMap&lt;/tt&gt; instance to a stream (i.e.,
  * serialize it)
  *
  * @serialData The &lt;i&gt;capacity&lt;/i&gt; of the HashMap (the length of the
  *             bucket array) is emitted (int), followed by the
  *             &lt;i&gt;size&lt;/i&gt; (an int, the number of key-value
  *             mappings), followed by the key (Object) and value (Object)
  *             for each key-value mapping.  The key-value mappings are
  *             emitted in no particular order.
  */
      private void writeObject(java.io.ObjectOutputStream s)
             throws IOException
         {
             Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =
                 (size &gt; 0) ? entrySet0().iterator() : null;

            // Write out the threshold, loadfactor, and any hidden stuff
            s.defaultWriteObject();

            // Write out number of buckets
            s.writeInt(table.length);

            // Write out size (number of Mappings)
            s.writeInt(size);

            // Write out keys and values (alternating)
            if (i != null) {
                while (i.hasNext()) {
                    Map.Entry&lt;K,V&gt; e = i.next();
                    s.writeObject(e.getKey());
                    s.writeObject(e.getValue());
                }
            }
        }
</code></pre>

<p>This is more compact than the array, which can contain many empty entries and link chains and overhead for Map$Entry wrappers.</p>

<p>Note that it still invokes <code>defaultWriteObject</code> for the "easy" fields. In order for that to work, it has to mark everything else as <code>transient</code>.</p>
