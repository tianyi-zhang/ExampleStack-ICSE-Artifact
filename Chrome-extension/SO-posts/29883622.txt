<p>Funny to see a snippet of some code I posted a long time ago in an SO answer :-D <a href="http://stackoverflow.com/questions/19365035/location-servise-gps-force-closed/19366773#19366773">Location servise GPS Force closed</a> </p>

<p>Many things has happened since then and my recommendation these days is to use <a href="https://github.com/mcharmas/Android-ReactiveLocation" rel="nofollow">https://github.com/mcharmas/Android-ReactiveLocation</a> </p>

<p>Mainly because:</p>

<ol>
<li>It uses the Fused location (more battery efficient + better accuracy)</li>
<li>Way less boilerplate code</li>
<li>Additional power of RxJava (no need to dive into details about RxJava for simple usage but it has some awesome features)</li>
<li>I added Activity Recognition to the library (so I like to advertise how awesome I think it is)</li>
</ol>

<p>To get most recent location the only code you need to write is: </p>

<pre><code>ReactiveLocationProvider locationProvider = new ReactiveLocationProvider(context);
locationProvider.getLastKnownLocation()
    .subscribe(new Action1&lt;Location&gt;() {
        @Override
        public void call(Location location) {
            doSthImportantWithObtainedLocation(location);
        }
    });
</code></pre>

<p>To vaguely answer your question, my suspicion is that perhaps you have GPS turned on but not WiFi location (just guessing though).</p>

<p>If you are determined to use the code you posted, then I would suggest adding various Log outputs to debug the situation. Something like:  </p>

<pre><code>public Location getLocation(){
    try{
        locationManager = (LocationManager)getSystemService(LOCATION_SERVICE);
        isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
        isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

        if(!isNetworkEnabled &amp;&amp; !isGPSEnabled){
             Log.e("GPSTracker", "!isNetworkEnabled &amp;&amp; !isGPSEnabled");
             Log.e("GPSTracker", "is network location enabled: " + isNetworkEnabled );
             Log.e("GPSTracker", "is GPS location enabled: " + isGPSEnabled);
        }else{
            this.canGetLocation = true;

            if(isNetworkEnabled){
                locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MinTimeUpdate, MinDistanceChangeUpdate, this);

                if(locationManager != null){
                    location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);

                    if(location != null){
                        latitude = location.getLatitude();
                        longitude = location.getLongitude();
                    }
                }
            }


            if(isGPSEnabled){
                if(location == null){
                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MinTimeUpdate, MinDistanceChangeUpdate, this);

                    if(locationManager != null){
                        location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);

                        if(location != null){
                            latitude = location.getLatitude();
                            longitude = location.getLongitude();
                        }
                    }
                }

            }
        }

    }catch(Exception e){
        Log.e("GPSTracker", "error getting location", e);
        e.printStackTrace();
    }

    return location;
}
</code></pre>

<p>Otherwise pose less restrictive constraints on the canGetLocation boolean (as it is really that variable that is causing you problems)</p>

<p>Changing:</p>

<pre><code>    isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
    isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

    if(!isNetworkEnabled &amp;&amp; !isGPSEnabled){

    }else{
        this.canGetLocation = true;
        ...
</code></pre>

<p>To</p>

<pre><code>    isGPSEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
    isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);

    this.canGetLocation = isNetworkEnabled || isGPSEnabled;

    if(!isNetworkEnabled &amp;&amp; !isGPSEnabled){

    }else{
        ...
</code></pre>
