<p>This page: <a href="http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html">http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html</a> shows how to do this for any polygon.</p>

<p>I have a Java implementation of this, but it is too big to post here in its entirety.  However, you should be able to work it out:</p>

<pre><code>class Boundary {
    private final Point[] points; // Points making up the boundary
    ...


    /**
     * Return true if the given point is contained inside the boundary.
     * See: http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
     * @param test The point to check
     * @return true if the point is inside the boundary, false otherwise
     *
     */
    public boolean contains(Point test) {
      int i;
      int j;
      boolean result = false;
      for (i = 0, j = points.length - 1; i &lt; points.length; j = i++) {
        if ((points[i].y &gt; test.y) != (points[j].y &gt; test.y) &amp;&amp;
            (test.x &lt; (points[j].x - points[i].x) * (test.y - points[i].y) / (points[j].y-points[i].y) + points[i].x)) {
          result = !result;
         }
      }
      return result;
    }
}
</code></pre>

<p>And here is a sketch of the Point class</p>

<pre><code>/**
 * Two dimensional cartesian point.
 */
public class Point {
  public final double x;
  public final double y;
  ...
}
</code></pre>
