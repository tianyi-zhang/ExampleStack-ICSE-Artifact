<p>Start with the <a href="https://rosettacode.org/wiki/Haversine_formula#Java" rel="nofollow">Rosetta code</a> implementation in Java:</p>

<pre><code>public static double haversine(double lat1, double lon1, double lat2, double lon2) {
    double dLat = Math.toRadians(lat2 - lat1);
    double dLon = Math.toRadians(lon2 - lon1);
    lat1 = Math.toRadians(lat1);
    lat2 = Math.toRadians(lat2);

    double a = Math.pow(Math.sin(dLat / 2),2) + Math.pow(Math.sin(dLon / 2),2) * Math.cos(lat1) * Math.cos(lat2);
    double c = 2 * Math.asin(Math.sqrt(a));
    return R * c;
}
</code></pre>

<p>If you know that <code>lon1 == lon2</code>, then an awful lot of this code drops right out, because <code>dLon == 0</code>:</p>

<pre><code>public static double haversine(double lat1, double lat2) {
    double dLat = Math.toRadians(lat2 - lat1);
    return R * dLat;
}
</code></pre>

<p>(which should be familiar as the <code>length = Radius * angle in radians</code> formula)</p>

<p>So, if you know that <code>R = 6372.8</code>, and your desired result is <code>1</code>, then it is easy to come up with a value for <code>dLat</code>:</p>

<pre><code>dLat = 1.0 / 6372.8;
</code></pre>

<p>In other words, simply subtract <code>1.0 / 6372.8</code> from your current latitude (and remember to handle points of latitude less than <code>180 - 1.0 / 6372.8</code> carefully).</p>
