<p>This looks like it works.</p>

<pre><code>List&lt;Person&gt; people = Arrays.asList(
        new Person("One", 21, 100),
        new Person("Two", 21, 75),
        new Person("Three", 42, 100),
        new Person("Four", 42, 120),
        new Person("Five", 9, 100)
);
Map&lt;Integer, Map&lt;Integer, Person&gt;&gt; map = people.stream()
        // Gather all ages into a Map&lt;Age,List&lt;Person&gt;&gt;
        .collect(Collectors.groupingBy(Person::getAge))
        // Walk that transient Map.
        .entrySet().stream()
        .collect(Collectors.toMap(
                // Key is the age.
                Map.Entry::getKey,
                // Value is a Map&lt;income,person&gt;
                e -&gt; e.getValue()
                // Roll each of the same age into a Map&lt;Income,Person&gt;
                .stream().collect(
                        Collectors.toMap(
                                // Key is income.
                                Person::getIncome,
                                // Value is the Person.
                                Function.identity()
                        ))));
</code></pre>

<p>I roll your list into a <code>Map&lt;Age,List&lt;Person&gt;&gt;</code> using a <code>groupingBy</code> and then stream it's entrySet and collect that into the final form.</p>

<p><strong>This will fail if two people of the same age have the same income</strong> because that will violate the inner Map. Use <a href="http://stackoverflow.com/a/37327645/823393">Alexander's suggestion</a> if you are happy with the natural enhancement of generating a <code>Map&lt;Integer, Map&lt;Integer, List&lt;Person&gt;&gt;&gt;</code>.</p>

<p><strong>Added</strong></p>

<p>@Holger has pointed out in a comment that this can be done in a much simpler and more elegant way. Please use this form instead/</p>

<pre><code>Map&lt;Integer, Map&lt;Integer, Person&gt;&gt; map2 = people.stream()
        .collect(
                Collectors.groupingBy(
                        Person::getAge,
                        Collectors.toMap(Person::getIncome, Function.identity())));
</code></pre>

<p>FYI - Here's the Person class I used. Note the <code>equals</code> and <code>hashcode</code> are implemented.</p>

<pre><code>class Person {
    private final String name;
    private final int age;
    private final int income;


    public Person(String name, int age, int income) {
        this.name = name;
        this.age = age;
        this.income = income;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public int getIncome() {
        return income;
    }

    @Override
    public String toString() {
        return "Person{" + "name=" + name + ", age=" + age + ", income=" + income + '}';
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 59 * hash + Objects.hashCode(this.name);
        hash = 59 * hash + this.age;
        hash = 59 * hash + this.income;
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Person other = (Person) obj;
        if (this.age != other.age) {
            return false;
        }
        if (this.income != other.income) {
            return false;
        }
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        return true;
    }
}
</code></pre>
