<p>I would recommend you to use <a href="https://github.com/square/okhttp" rel="nofollow">OkHttp</a> for making all network calls. OkHttp provides <a href="https://github.com/square/okhttp/wiki/Interceptors" rel="nofollow">Interceptors</a> which will serve your exact purpose.</p>

<p>Defining an interceptor:</p>

<pre><code>class LoggingInterceptor implements Interceptor {
  @Override public Response intercept(Interceptor.Chain chain) throws IOException {
    Request request = chain.request();

    long t1 = System.nanoTime();
    logger.info(String.format("Sending request %s on %s%n%s",
        request.url(), chain.connection(), request.headers()));

    HttpUrl url = request.url(); // url of the request.

    Headers reqHeaders = request.headers(); // Here you are able to access headers which are being sent with the request.

    RequestBody body = request.body(); // provides body of request, which you can inspect to see what is being sent.

    Response response = chain.proceed(request);

    long t2 = System.nanoTime();
    logger.info(String.format("Received response for %s in %.1fms%n%s",
        response.request().url(), (t2 - t1) / 1e6d, response.headers()));

    Headers resHeaders = response.headers(); // Headers received in the response.

    return response;
  }
}
</code></pre>

<p>Using it to make network calls:</p>

<pre><code>OkHttpClient client = new OkHttpClient.Builder()
    .addInterceptor(new LoggingInterceptor())
    .build();

Request request = new Request.Builder()
    .url("http://www.publicobject.com/helloworld.txt")
    .header("User-Agent", "OkHttp Example")
    .build();

Response response = client.newCall(request).execute();
response.body().close();
</code></pre>

<p>Explore the <a href="https://github.com/square/okhttp/wiki/Interceptors" rel="nofollow">Interceptors</a> for more customization.</p>
