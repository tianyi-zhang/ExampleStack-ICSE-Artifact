<p>What you have is xml. You need to parse the tag's first. Get the url and then set the downloaded image to <code>ImageView</code>.</p>

<p>To parse use XmlPullParser. Exammple @</p>

<p><a href="http://developer.android.com/training/basics/network-ops/xml.html" rel="nofollow">http://developer.android.com/training/basics/network-ops/xml.html</a></p>

<p>Once you parse </p>

<p><a href="http://stackoverflow.com/questions/2471935/how-to-load-an-imageview-by-url-in-android">How to load an ImageView by URL in Android?</a></p>

<p>Example:</p>

<pre><code> public class MainActivity extends Activity {

    ImageView i;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        i = (ImageView)findViewById(R.id.imageView1);
        new TheTask().execute();

    }

class TheTask extends AsyncTask&lt;Void,Bitmap,Bitmap&gt;
{

    @Override
    protected Bitmap doInBackground(Void... arg0) {
        // TODO Auto-generated method stub
         Bitmap bitmap = null;
        try {
            bitmap = BitmapFactory.decodeStream((InputStream)new URL("http://a3.twimg.com/profile_images/670625317/aam-logo-v3-twitter.png").getContent());
        } catch (MalformedURLException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return bitmap;
    }

    @Override
    protected void onPostExecute(Bitmap result) {
        // TODO Auto-generated method stub
        super.onPostExecute(result);
        i.setImageBitmap(result);

    }

}

}
</code></pre>

<p>Edit:</p>

<pre><code> tv.setImageBitmap(bitmap);
</code></pre>

<p>Cannot update ui from a non ui thread. <code>doInbackground</code> is invoked on the background thread. </p>

<p>Edit2:</p>

<p>Modify the below accordingly</p>

<p>I am parsing xml from assests folder.</p>

<pre><code> InputStream is = MainActivity.this.getResources()
      .getAssets().open("newxml.xml");
</code></pre>

<p>XML to parse with dummy images</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;test&gt;
&lt;Category Type="entertainment"&gt;
&lt;channel_name&gt;sunmusic&lt;/channel_name&gt;
&lt;image_url&gt;http://a3.twimg.com/profile_images/670625317/aam-logo-v3-twitter.png&lt;/image_url&gt;
&lt;/Category&gt;
&lt;Category Type="sports"&gt;
&lt;channel_name&gt;neosports&lt;/channel_name&gt;
&lt;image_url&gt;http://a3.twimg.com/profile_images/740897825/AndroidCast-350_normal.png&lt;/image_url&gt;
&lt;/Category&gt;
&lt;/test&gt;
</code></pre>

<p>Make sure you get the xml from url using asynctask. Download UIL and add the jar to libs folder.</p>

<pre><code>public class MainActivity extends ListActivity {

    ImageView i;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        //setContentView(R.layout.activity_main);
        try
        {
           InputStream is = MainActivity.this.getResources()
      .getAssets().open("newxml.xml");
        ParseXml pxml = new ParseXml();
        ArrayList&lt;Entry&gt; all=pxml.getList(is);
        LazyAdapter adapter = new LazyAdapter(this,all);
        setListAdapter(adapter);
        }catch(Exception e)
        {
            e.printStackTrace();
        }

    }
}
</code></pre>

<p>ParseXml</p>

<pre><code>public class ParseXml {


    private static final String ns = null;
    InputStream is;
    ArrayList&lt;Entry&gt; all;
    public ArrayList&lt;Entry&gt; getList(InputStream is) {
        // TODO Auto-generated constructor stub
        this.is= is;
        try
        {
        XmlPullParser parser = Xml.newPullParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
        parser.setInput(is, null);
        parser.nextTag();
         all=readFeed(parser);
        }catch(Exception e)
        {
            e.printStackTrace();
        }
        return  all;
    }
    private ArrayList&lt;Entry&gt; readFeed(XmlPullParser parser) throws XmlPullParserException, IOException {
        ArrayList&lt;Entry&gt; entries = new ArrayList&lt;Entry&gt;();

        parser.require(XmlPullParser.START_TAG, ns, "test");
        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }
            String name = parser.getName();
            // Starts by looking for the entry tag
            if (name.equals("Category")) {
                entries.add(readEntry(parser));
            } else {
                skip(parser);
            }
        }  
        return entries;
    }
    private Entry readEntry(XmlPullParser parser) throws XmlPullParserException, IOException {
        parser.require(XmlPullParser.START_TAG, ns, "Category");
        String summary = null;
        String link = null;
        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }
            String name = parser.getName();
           if (name.equals("channel_name")) {
                summary = readChannel(parser);
            } else if (name.equals("image_url")) {
                link = readUrl(parser);
            } else {
                skip(parser);
            }
        }
        return new Entry(summary, link);
    }
    private String readChannel(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "channel_name");
        String title = readText(parser);
        parser.require(XmlPullParser.END_TAG, ns, "channel_name");
        Log.i("...........",title);
        return title;
    }
    private String readUrl(XmlPullParser parser) throws IOException, XmlPullParserException {
        parser.require(XmlPullParser.START_TAG, ns, "image_url");
        String title = readText(parser);
        parser.require(XmlPullParser.END_TAG, ns, "image_url");
        Log.i("...........",title);
        return title;
    }
    // For the tags title and summary, extracts their text values.
    private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {
        String result = "";
        if (parser.next() == XmlPullParser.TEXT) {
            result = parser.getText();
            parser.nextTag();
        }
        return result;
    }
    private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {
        if (parser.getEventType() != XmlPullParser.START_TAG) {
            throw new IllegalStateException();
        }
        int depth = 1;
        while (depth != 0) {
            switch (parser.next()) {
            case XmlPullParser.END_TAG:
                depth--;
                break;
            case XmlPullParser.START_TAG:
                depth++;
                break;
            }
        }
     }
}
</code></pre>

<p>LazyAdapter</p>

<pre><code>public class LazyAdapter extends BaseAdapter {

private Activity activity;
private ArrayList&lt;Entry&gt; data;
private LayoutInflater inflater=null;
public ImageLoader imageLoader; 
DisplayImageOptions options;

public LazyAdapter(Activity a, ArrayList&lt;Entry&gt; d) {
    activity = a;
    data=d;
    inflater = (LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    File cacheDir = StorageUtils.getOwnCacheDirectory(a, "MyFolderCache");


 // Get singletone instance of ImageLoader
   imageLoader = ImageLoader.getInstance();
 // Create configuration for ImageLoader (all options are optional)
    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(a)
              // You can pass your own memory cache implementation
             .discCacheExtraOptions(1024, 1024, CompressFormat.PNG, 100)
             .discCache(new UnlimitedDiscCache(cacheDir)) // You can pass your own disc cache implementation
             .discCacheFileNameGenerator(new HashCodeFileNameGenerator())
             .enableLogging()
             .build();
 // Initialize ImageLoader with created configuration. Do it once.
 imageLoader.init(config);
    //imageLoader.init(ImageLoaderConfiguration.createDefault(a));
   // imageLoader=new ImageLoader(activity.getApplicationContext());
    options = new DisplayImageOptions.Builder()
    .showStubImage(R.drawable.ic_launcher)
    .cacheInMemory()
    .cacheOnDisc()
    .displayer(new RoundedBitmapDisplayer(20))
    .build();
}



public int getCount() {
    return data.size();
}

public Object getItem(int position) {
    return position;
}

public long getItemId(int position) {
    return position;
}

public View getView(int position, View convertView, ViewGroup parent) {
    View vi=convertView;
    ViewHolder vh = new ViewHolder();;
    if(convertView==null)
    {

    vi = inflater.inflate(R.layout.row, null);   
    vh.iv=(ImageView)vi.findViewById(R.id.imageView1); 
    vh.pb= (ProgressBar)vi.findViewById(R.id.pb); 
    vh.tv = (TextView) vi.findViewById(R.id.textView1);
    vh.tv1= (TextView) vi.findViewById(R.id.textView2);

    }
    Entry entry = data.get(position);
    vh.tv.setText(entry.channel);
    vh.tv1.setText(""+position);
    display(vh.iv,entry.url , vh.pb);
    //imageLoader.displayImage(data.get(position).toString(), image,options);

    return vi;
}

public void display(ImageView img, String url, final ProgressBar spinner)
{
    imageLoader.displayImage(url, img, options, new ImageLoadingListener() {
        @Override
        public void onLoadingStarted(String imageUri, View view) {
         spinner.setVisibility(View.VISIBLE);
        }
        @Override
        public void onLoadingFailed(String imageUri, View view, FailReason failReason) {
         spinner.setVisibility(View.GONE);


        }
        @Override
        public void onLoadingComplete(String imageUri, View view, Bitmap loadedImage) {
         spinner.setVisibility(View.GONE);
        }
        @Override
        public void onLoadingCancelled(String imageUri, View view) {

        }

});
}
 public static class ViewHolder
 {
  ImageView iv;
  TextView tv,tv1;
  ProgressBar pb;

 }
}
</code></pre>

<p>row.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical" &gt;
&lt;ImageView
    android:id="@+id/imageView1"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:layout_centerHorizontal="true"
    android:layout_centerVertical="true"
    android:src="@drawable/ic_launcher" /&gt;
 &lt;ProgressBar 
    android:id="@+id/pb"
    android:layout_centerInParent="true"
    android:layout_gravity="center"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"/&gt;

 &lt;TextView
     android:id="@+id/textView1"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
     android:layout_above="@+id/textView2"
     android:layout_alignParentLeft="true"
     android:layout_marginBottom="21dp"
     android:layout_marginLeft="31dp"
     android:text="TextView" /&gt;

 &lt;TextView
     android:id="@+id/textView2"
     android:layout_width="wrap_content"
     android:layout_height="wrap_content"
     android:layout_alignLeft="@+id/textView1"
     android:layout_alignParentBottom="true"
     android:text="TextView" /&gt;

  &lt;/RelativeLayout&gt;
</code></pre>

<p>Snap</p>

<p><img src="http://i.stack.imgur.com/NSHtN.png" alt="enter image description here"></p>
