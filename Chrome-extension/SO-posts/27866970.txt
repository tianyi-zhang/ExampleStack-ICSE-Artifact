<p>You would need to ensure that your generic type implemented the <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html" rel="nofollow"><code>Comparable</code></a> interface, and then use the <code>compareTo</code> method instead. Java does not support overloading the <code>&gt;</code> operator (or any operator overloading, for that matter).</p>

<p>As per <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html#compareTo(T)" rel="nofollow">the documents</a>, <code>compareTo</code>:</p>

<blockquote>
  <p>Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. </p>
</blockquote>

<p>An example (that you'll have to map on to your exact code), assuming that <code>key</code> is your item you will store in your node, and <code>checkCell.key</code> is your node</p>

<pre><code>int compareResult = key.compareTo(checkCell.key);
if (key &lt; 0) { // it goes on the left }
else if (key == 0) { // it is the same }
else { // it goes on the right }
</code></pre>

<p>In your <code>compareTo</code> method you need to decide what fields in your class determine it's "ordering". For example, if you have a <code>size</code> and <code>priority</code> field, you might do:</p>

<pre><code>@Override public int compareTo(Type other) {
  final int BEFORE = -1;
  final int EQUAL = 0;
  final int AFTER = 1;

  if (this == other) return EQUAL;

  if (this.size &lt; other.size) return BEFORE;
  else if (this.size &gt; other.size) return AFTER;
  else { // size is equal, so test priority
    if (this.priority &lt; other.priority) return BEFORE;
    else if (this.priority &gt; other.priority) return AFTER;
  }
  return EQUAL;
}
</code></pre>
