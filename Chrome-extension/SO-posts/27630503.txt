<p>Step back a little...</p>

<p>Consider the contract of <code>equals()</code> and <code>hashCode()</code>. Consider the fact that the contract is one way only: if you implement both in a class then the requirement is that if two instances of a class are equal then they must have the same hashcode.</p>

<p><strong>What it does not say is that if two instances have the same hashcode then they must be equal. Yet you assume that in your .equals() implementation!</strong></p>

<p>And yet in your code, there is:</p>

<pre><code>// WRONG!
if (this.hashCode() == o.hashCode()) { return true; }
</code></pre>

<p>Here is an example of a perfectly valid <code>hashCode()</code> method:</p>

<pre><code>public int hashCode()
{
    return 42;
}
</code></pre>

<p>Now, I believe you can see where the problem lies with your .equals() method...</p>

<hr>

<p>Assuming Java 7, here is how you would write both methods; since both account for <code>null</code>, this is easy (on the other hand, you should avoid <code>null</code>s when you can; ultimately, <code>null</code> is nothing but trouble):</p>

<pre><code>@Override
public final int hashCode()
{
    return Objects.hash(phrase, title, introMsg, msg, errorMsg);
}

@Override
public final boolean equals(final Object obj)
{
    if (obj == null)
        return false;
    if (this == obj)
        return true;
    if (getClass() != obj.getClass())
        return false;
    final MyClass other = (MyClass) obj;
    return Objects.equals(phrase, other.phrase)
        &amp;&amp; Objects.equals(title, other.title)
        &amp;&amp; Objects.equals(introMsg, other.introMsg)
        &amp;&amp; Objects.equals(msg, other.msg)
        &amp;&amp; Objects.equals(errorMsg, other.errorMsg);
}
</code></pre>
