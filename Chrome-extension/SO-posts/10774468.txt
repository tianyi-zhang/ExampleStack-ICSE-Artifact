<p>You could do it with <a href="http://www.cs.waikato.ac.nz/ml/weka/" rel="nofollow">Weka</a>.</p>

<p>You would have to implement a <a href="http://weka.sourceforge.net/doc.dev/weka/core/DistanceFunction.html" rel="nofollow">Distance Function</a>, and pass it to the <a href="http://weka.sourceforge.net/doc.dev/weka/clusterers/HierarchicalClusterer.html" rel="nofollow">Hierarchical Clusterer</a> using the <code>setDistanceFunction(DistanceFunction distanceFunction)</code> method.</p>

<p>The other available clusterers in Weka are: Cobweb, EM, FarthestFirst, FilteredClusterer,  MakeDensityBasedClusterer, RandomizableClusterer, RandomizableDensityBasedClusterer, RandomizableSingleClustererEnhancer, SimpleKMeans, SingleClustererEnhancer.</p>

<p>An example distance function, from the <a href="https://svn.scms.waikato.ac.nz/svn/weka/trunk/weka/src/main/java/weka/core/NormalizableDistance.java" rel="nofollow">NormalizableDistance</a> class:</p>

<pre><code>  /** Index in ranges for MIN. */
  public static final int R_MIN = 0;

  /** Index in ranges for MAX. */

  public static final int R_MAX = 1;

  /** Index in ranges for WIDTH. */
  public static final int R_WIDTH = 2;

  /** the instances used internally. */
  protected Instances m_Data = null;

  /** True if normalization is turned off (default false).*/
  protected boolean m_DontNormalize = false;

  /** The range of the attributes. */
  protected double[][] m_Ranges;

  /** The range of attributes to use for calculating the distance. */
  protected Range m_AttributeIndices = new Range("first-last");

  /** The boolean flags, whether an attribute will be used or not. */
  protected boolean[] m_ActiveIndices;

  /** Whether all the necessary preparations have been done. */
  protected boolean m_Validated;


public double distance(Instance first, Instance second, double cutOffValue, PerformanceStats stats) {
    double distance = 0;
    int firstI, secondI;
    int firstNumValues = first.numValues();
    int secondNumValues = second.numValues();
    int numAttributes = m_Data.numAttributes();
    int classIndex = m_Data.classIndex();

    validate();

    for (int p1 = 0, p2 = 0; p1 &lt; firstNumValues || p2 &lt; secondNumValues; ) {
      if (p1 &gt;= firstNumValues)
        firstI = numAttributes;
      else
        firstI = first.index(p1); 

      if (p2 &gt;= secondNumValues)
        secondI = numAttributes;
      else
        secondI = second.index(p2);

      if (firstI == classIndex) {
        p1++; 
        continue;
      }
      if ((firstI &lt; numAttributes) &amp;&amp; !m_ActiveIndices[firstI]) {
        p1++; 
        continue;
      }

      if (secondI == classIndex) {
        p2++; 
        continue;
      }
      if ((secondI &lt; numAttributes) &amp;&amp; !m_ActiveIndices[secondI]) {
        p2++;
        continue;
      }

      double diff;

      if (firstI == secondI) {
        diff = difference(firstI,
                  first.valueSparse(p1),
                  second.valueSparse(p2));
        p1++;
        p2++;
      }
      else if (firstI &gt; secondI) {
        diff = difference(secondI, 
                  0, second.valueSparse(p2));
        p2++;
      }
      else {
        diff = difference(firstI, 
                  first.valueSparse(p1), 0);
        p1++;
      }
      if (stats != null)
        stats.incrCoordCount();

      distance = updateDistance(distance, diff);
      if (distance &gt; cutOffValue)
        return Double.POSITIVE_INFINITY;
    }

    return distance;
  }
</code></pre>

<p>Shows that you can treat separately the various dimensions (that are called attributes in Weka). So you can define a different distance for each dimension/attribute.</p>

<p>About the business rules to avoid clustering together some instances. I think that you can create a distance function that returns <code>Double.positiveInfinity</code> when the business rules are not satisfied.</p>
