<p>you can use Gpuimage for video preview and take picture also, just compile the jni file in gpuimage library with ndk and put the method for YuvtoRgb convert in GPUImageNativeLibrary.java class in GPUImageLibrary for android.</p>

<pre><code>public static void YUVtoRBGA(byte[] yuv, int width, int height, int[] rgb) {



final int frameSize = width * height;
    int r, g, b, y1192, y, i, uvp, u, v;
    for (int j = 0, yp = 0; j &lt; height; j++) {
        uvp = frameSize + (j &gt;&gt; 1) * width;
        u = 0;
        v = 0;
        for (i = 0; i &lt; width; i++, yp++) {
            y = (0xff &amp; ((int) yuv[yp])) - 16;
            if (y &lt; 0)
                y = 0;
            if ((i &amp; 1) == 0) {
                v = (0xff &amp; yuv[uvp++]) - 128;
                u = (0xff &amp; yuv[uvp++]) - 128;
            }

            y1192 = 1192 * y;
            r = (y1192 + 1634 * v);
            g = (y1192 - 833 * v - 400 * u);
            b = (y1192 + 2066 * u);

            // Java's functions are faster then 'IFs'
            r = Math.max(0, Math.min(r, 262143));
            g = Math.max(0, Math.min(g, 262143));
            b = Math.max(0, Math.min(b, 262143));

            rgb[yp] = 0xff000000 | ((r &lt;&lt; 6) &amp; 0xff0000)
                    | ((g &gt;&gt; 2) &amp; 0xff00) | ((b &gt;&gt; 10) &amp; 0xff);
            // rgba, divide 2^10 ( &gt;&gt; 10)
            /*
             * rgb[yp] = 0xff000000 |((r &lt;&lt; 14) &amp; 0xff000000) | ((g &lt;&lt; 6) &amp;
             * 0xff0000) | ((b &gt;&gt; 2) | 0xff00);
             */
        }
    }
}
</code></pre>

<p>replace the method in GPUImageNativeLibrary.java class's public static Native YUVtoRBGA with this, and you have done.</p>
