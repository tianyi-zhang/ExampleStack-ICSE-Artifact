<p>So i have managed to fix this by simply switching from</p>

<pre><code>BitmapFactory.decodeFileDescriptor(descriptor, null, options);
</code></pre>

<p>to:</p>

<pre><code>BitmapFactory.decodeStream(fileInputStream, null, options);
</code></pre>

<p>I don't know why this makes such a big difference but it definitely does, the quality of the image output is perfect, virtually no quality lost, no memory issues.</p>

<p>My full code looks like this:</p>

<p>Decoding:</p>

<pre><code>public static Bitmap decodeSampledBitmap(File file, int reqWidth, int reqHeight) throws FileNotFoundException {

    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    options.inPreferredConfig = Bitmap.Config.RGB_565;

    BitmapFactory.decodeStream(new FileInputStream(file), null, options);

    options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);

    options.inJustDecodeBounds = false;
    return BitmapFactory.decodeStream(new FileInputStream(file), null, options);
}
</code></pre>

<p>Calculating sample size:</p>

<pre><code>public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {

    final int height = options.outHeight;
    final int width = options.outWidth;
    int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {

        final int halfHeight = height / 2;
        final int halfWidth = width / 2;

        while ((halfHeight / inSampleSize) &gt; reqHeight
                &amp;&amp; (halfWidth / inSampleSize) &gt; reqWidth) {
            inSampleSize *= 2;
        }
    }

    return inSampleSize;
}
</code></pre>

<p>Use:</p>

<pre><code>ImageView imageView = (ImageView) findViewById(R.id.photo_taken);
int width = imageView.getMeasuredWidth();
int height = imageView.getMeasuredHeight();

File file = //get your file
Bitmap bitmap = CameraUtils.decodeSampledBitmap(file, height, width);
imageView.setImageBitmap(bitmap);
</code></pre>

<p>Note: i use height as width and vice versa because i later rotate the bitmap 90 degrees.</p>
