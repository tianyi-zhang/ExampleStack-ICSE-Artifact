<p>I spent a lot of time on this problem, but no one will give me exact answer and finally i solved it. First create method and provide Image URI as argument, and this will return bitmap basically here i calculated image size on bases of, we can manage memory as well as image and get exact image in bitmap form.</p>

<p>you can even display 5000Ã—8000 and 12MiB picture without any error code is tested just copy paste in your class and enjoy.</p>

<p><strong>Use</strong></p>

<pre><code>Bitmap mBitmap = getPhoto(MYIMAGEURI);
</code></pre>

<p><strong>Provide URI to method and get Bitmap</strong></p>

<pre><code>Bitmap getPhoto(Uri selectedImage) {
    DisplayMetrics metrics = new DisplayMetrics();
    getWindowManager().getDefaultDisplay().getMetrics(metrics);
    int height = metrics.heightPixels;
    int width = metrics.widthPixels;
    Bitmap photoBitmap = null;
    InputStream inputStream = null;
    try {
        inputStream = getContentResolver().openInputStream(selectedImage);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
    BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();
    bitmapOptions.inJustDecodeBounds = true;
    BitmapFactory.decodeStream(inputStream, null, bitmapOptions);
    int imageWidth = bitmapOptions.outWidth;
    int imageHeight = bitmapOptions.outHeight;

    @SuppressWarnings("unused")
    InputStream is = null;
    try {
        is = getContentResolver().openInputStream(selectedImage);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }
    float scale = 1.0f;

    if (imageWidth &lt; imageHeight) {
        if (imageHeight &gt; width * 1.0f) {
            scale = width * 1.0f / (imageHeight * 1.0f);
        }

    } else {
        if (imageWidth &gt; width * 1.0f) {
            scale = width * 1.0f / (imageWidth * 1.0f);
        }

    }

    photoBitmap = decodeSampledBitmapFromResource(this,
            selectedImage, (int) (imageWidth * scale),
            (int) (imageHeight * scale));
    return photoBitmap;
}
</code></pre>

<p><strong>Decode Bitmap Sample using image size</strong></p>

<pre><code>public static Bitmap decodeSampledBitmapFromResource(Context context,
            Uri uri, int reqWidth, int reqHeight) {

    // First decode with inJustDecodeBounds=true to check dimensions
    final BitmapFactory.Options options = new BitmapFactory.Options();
    options.inJustDecodeBounds = true;
    InputStream is = null;
    try {
        is = context.getContentResolver().openInputStream(uri);
    } catch (FileNotFoundException e1) {
        // TODO Auto-generated catch block
        e1.printStackTrace();
    }
    BitmapFactory.decodeStream(is, null, options);

    // Calculate inSampleSize
    options.inSampleSize = calculateInSampleSize(options, reqWidth,
            reqHeight);

    // Decode editBitmap with inSampleSize set
    options.inJustDecodeBounds = false;
    InputStream inputs = null;
    try {
        inputs = context.getContentResolver().openInputStream(uri);
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    }

    return BitmapFactory.decodeStream(inputs, null, options);
}
</code></pre>

<p><strong>Calculate  Sample Size</strong></p>

<pre><code>public static int calculateInSampleSize(BitmapFactory.Options options,
            int reqWidth, int reqHeight) {
        // Raw height and width of image
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

    if (height &gt; reqHeight || width &gt; reqWidth) {

        // Calculate ratios of height and width to requested height and
        // width
        final int heightRatio = Math.round((float) height
                / (float) reqHeight);
        final int widthRatio = Math.round((float) width / (float) reqWidth);

        // Choose the smallest ratio as inSampleSize value, this will
        // guarantee
        // a final image with both dimensions larger than or equal to the
        // requested height and width.
        inSampleSize = Math.min(heightRatio, widthRatio);
        // inSampleSize = heightRatio &lt; widthRatio ? heightRatio :
        // widthRatio;
    }

    return inSampleSize;
}
</code></pre>

<p>Or may be possible to solved using one line of code in <strong><code>manifiest.xml</code></strong>
is in application tag use this </p>

<pre><code>android:largeHeap="true"
</code></pre>
