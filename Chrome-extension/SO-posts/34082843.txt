<p>This is the way i implemented Autocomplete view with android and handled JSON.</p>

<pre><code>public class DestinationCity extends SherlockActivity implements OnItemClickListener {

    private static final String LOG_TAG = "Google Places Autocomplete";
    private static final String PLACES_API_BASE = "https://maps.googleapis.com/maps/api/place";
    private static final String TYPE_AUTOCOMPLETE = "/autocomplete";
    private static final String OUT_JSON = "/json";

    private static final String API_KEY = "&lt;--Your API Key--&gt;";
    AutoCompleteTextView autoCompView;
    TextView selectDestination;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_destination_city);
        initViewS();

    }
    private void initViewS(){
        mActionBar();

        autoCompView = (AutoCompleteTextView) findViewById(R.id.autoCompleteTextView);

        autoCompView.setAdapter(new GooglePlacesAutocompleteAdapter(this, R.layout.list_item));
        autoCompView.setOnItemClickListener(DestinationCity.this);
        selectDestination = (TextView)findViewById(R.id.selectDestination);
        selectDestination.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if(city.equals("")||city == null) {
                   Toast.makeText(DestinationCity.this,"Please enter destination",Toast.LENGTH_LONG).show();
                }
                else{
                    Intent result = new Intent("RESULT_ACTION");
                    result.putExtra("select_city", city);
                    setResult(Activity.RESULT_OK, result);
                    finish();
                }
            }
        });
    }

    private void mActionBar() {
        ActionBar actionBar = getSupportActionBar();
        actionBar.setDisplayHomeAsUpEnabled(false);
        actionBar.setDisplayShowCustomEnabled(false);
        actionBar.setDisplayShowHomeEnabled(true);
        actionBar.setDisplayUseLogoEnabled(true);
        actionBar.setDisplayShowTitleEnabled(true);

        SpannableString sTitle = new SpannableString("xxyyzz");
        sTitle.setSpan(new CustomTypeFace(getApplicationContext(), CabLibrary.TITLE_FONT, getResources().getDimension(R.dimen.size22)),
                0, sTitle.length(), SpannableString.SPAN_EXCLUSIVE_EXCLUSIVE);
        actionBar.setTitle(sTitle);
        actionBar.setLogo(getResources().getDrawable(R.drawable.logo));
    }
    class GooglePlacesAutocompleteAdapter extends ArrayAdapter implements Filterable {
        private ArrayList&lt;String&gt; resultList;

        public GooglePlacesAutocompleteAdapter(Context context, int textViewResourceId) {
            super(context, textViewResourceId);
        }

        @Override
        public int getCount() {
            return resultList.size();
        }

        @Override
        public String getItem(int index) {
            return resultList.get(index);
        }

        @Override
        public Filter getFilter() {
            Filter filter = new Filter() {
                @Override
                protected FilterResults performFiltering(CharSequence constraint) {
                    FilterResults filterResults = new FilterResults();
                    if (constraint != null) {
                        // Retrieve the autocomplete results.
                        resultList = autocomplete(constraint.toString());


                        // Assign the data to the FilterResults
                        filterResults.values = resultList;
                        filterResults.count = resultList.size();
                    }
                    return filterResults;
                }

                @Override
                protected void publishResults(CharSequence constraint, FilterResults results) {
                    if (results != null &amp;&amp; results.count &gt; 0) {
                        notifyDataSetChanged();
                    } else {
                        notifyDataSetInvalidated();
                    }
                }
            };
            return filter;
        }
    }
    String city = "";

    public void onItemClick(AdapterView adapterView, View view, int position, long id) {
        String str = (String) adapterView.getItemAtPosition(position);
        city = str;

        Toast.makeText(this, str, Toast.LENGTH_SHORT).show();
    }

    public static ArrayList autocomplete(String input) {
        ArrayList resultList = null;

        HttpURLConnection conn = null;
        StringBuilder jsonResults = new StringBuilder();
        try {
            StringBuilder sb = new StringBuilder(PLACES_API_BASE + TYPE_AUTOCOMPLETE + OUT_JSON);
            sb.append("?key=" + API_KEY);
            sb.append("&amp;components=country:in");
            sb.append("&amp;input=" + URLEncoder.encode(input, "utf8"));

            URL url = new URL(sb.toString());
            Log.d("URL",sb.toString());
            conn = (HttpURLConnection) url.openConnection();
            InputStreamReader in = new InputStreamReader(conn.getInputStream());

            // Load the results into a StringBuilder
            int read;
            char[] buff = new char[1024];
            while ((read = in.read(buff)) != -1) {
                jsonResults.append(buff, 0, read);
            }
        } catch (MalformedURLException e) {
            Log.d("Places API URL", e.toString());
            return resultList;
        } catch (IOException e) {
            Log.d("Error to Places API", e.toString());
            return resultList;
        } finally {
            if (conn != null) {
                conn.disconnect();
            }
        }

        try {
            Log.d("JsonResult",jsonResults.toString());
            // Create a JSON object hierarchy from the results
            JSONObject jsonObj = new JSONObject(jsonResults.toString());
            JSONArray predsJsonArray = jsonObj.getJSONArray("predictions");

            // Extract the Place descriptions from the results
            resultList = new ArrayList(predsJsonArray.length());
            for (int i = 0; i &lt; predsJsonArray.length(); i++) {
                System.out.println(predsJsonArray.getJSONObject(i).getString("description"));
                System.out.println("============================================================");
                resultList.add(predsJsonArray.getJSONObject(i).getString("description"));
                Log.d("Description",predsJsonArray.getJSONObject(i).getString("description"));
            }
        } catch (JSONException e) {
            Log.d("Hson Result", e.toString());
        }

        return resultList;
    }

}
</code></pre>

<p>and XML for these two is:</p>

<p>&lt;</p>

<pre><code>?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".DestinationCity"&gt;
    &lt;RelativeLayout
        android:layout_alignParentTop="true"
        android:id="@+id/search_container"
        android:layout_width="fill_parent"
        android:layout_height="50dp"
        android:background="@drawable/grey_button_border"
        android:orientation="horizontal" &gt;

        &lt;AutoCompleteTextView
            android:paddingLeft="10dp"
            android:id="@+id/autoCompleteTextView"
            android:layout_width="fill_parent"
            android:layout_height="fill_parent"
            android:layout_toLeftOf="@+id/search_button"
            android:background="@color/grey"
            android:cursorVisible="true"
            android:gravity="center_vertical|left"
            android:hint="@string/cities_search_hint"
            android:imeOptions="actionDone"
            android:inputType="text"
            android:maxLines="1"
            android:textColor="@color/font_color"
            android:textSize="@dimen/size16"
            android:textStyle="bold" &gt;

            &lt;requestFocus /&gt;
        &lt;/AutoCompleteTextView&gt;
    &lt;/RelativeLayout&gt;
&lt;/RelativeLayout&gt;
</code></pre>
