<p>The answer has already been here. If you don't want to use any library, you can follow these steps:</p>

<ol>
<li>Sort list with data by name</li>
<li>Iterate via list with data, and in place when current's item first letter != first letter of next item, insert "special" kind of object.</li>
<li>Inside your Adapter place special view when item is "special".</li>
</ol>

<p>Explanation:</p>

<p>In <code>onCreateViewHolder</code> method we can check <code>viewType</code> and depending on the value (our "special" kind) inflate a special layout.</p>

<p>For example:</p>

<pre><code>public static final int TITLE = 0;
public static final int ITEM = 1;

@Override
public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
    if (context == null) {
        context = parent.getContext();
    }
    if (viewType == TITLE) {
        view = LayoutInflater.from(context).inflate(R.layout.recycler_adapter_title, parent,false);
        return new TitleElement(view);
    } else if (viewType == ITEM) {
        view = LayoutInflater.from(context).inflate(R.layout.recycler_adapter_item, parent,false);
        return new ItemElement(view);
    }
    return null;
}
</code></pre>

<p>where <code>class ItemElement</code> and <code>class TitleElement</code> can look like ordinary <code>ViewHolder</code> :</p>

<pre><code>public class ItemElement extends RecyclerView.ViewHolder {
//TextView text;

public ItemElement(View view) {
    super(view);
   //text = (TextView) view.findViewById(R.id.text);

}
</code></pre>

<p>So the idea of all of that is interesting. But i am interested if it's effectively, cause we need to sort the data list. And i think this will take the speed down. If any thoughts about it, please write me :)</p>

<p>And also the opened question : is how to hold the "special" layout on the top, while the items are recycling. Maybe combine all of that with <code>CoordinatorLayout</code>.</p>
