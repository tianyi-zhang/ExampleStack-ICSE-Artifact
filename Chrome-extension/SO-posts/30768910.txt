<p>Another simple way is to loop through the string, pick the character that is not used yet and put it to a buffer, continue the loop till the buffer size equals to the string length. I like this back tracking solution better because:</p>

<ol>
<li>Easy to understand</li>
<li>Easy to avoid duplication</li>
<li>The output is sorted</li>
</ol>

<p>Here is the java code:</p>

<pre><code>List&lt;String&gt; permute(String str) {
  if (str == null) {
    return null;
  }

  char[] chars = str.toCharArray();
  boolean[] used = new boolean[chars.length];

  List&lt;String&gt; res = new ArrayList&lt;String&gt;();
  StringBuilder sb = new StringBuilder();

  Arrays.sort(chars);

  helper(chars, used, sb, res);

  return res;
}

void helper(char[] chars, boolean[] used, StringBuilder sb, List&lt;String&gt; res) {
  if (sb.length() == chars.length) {
    res.add(sb.toString());
    return;
  }

  for (int i = 0; i &lt; chars.length; i++) {
    // avoid duplicates
    if (i &gt; 0 &amp;&amp; chars[i] == chars[i - 1] &amp;&amp; !used[i - 1]) {
      continue;
    }

    // pick the character that has not used yet
    if (!used[i]) {
      used[i] = true;
      sb.append(chars[i]);

      helper(chars, used, sb, res);

      // back tracking
      sb.deleteCharAt(sb.length() - 1);
      used[i] = false;
    }
  }
}
</code></pre>

<p>Input str: 1231</p>

<p>Output list: {1123, 1132, 1213, 1231, 1312, 1321, 2113, 2131, 2311, 3112, 3121, 3211}</p>

<p>Noticed that the output is sorted, and there is no duplicate result.</p>
