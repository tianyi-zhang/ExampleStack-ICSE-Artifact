<p>After some further research, I found this method in <code>AbsListView</code>:</p>

<pre><code>private void updateOnScreenCheckedViews() {
    final int firstPos = mFirstPosition;
    final int count = getChildCount();
    final boolean useActivated = getContext().getApplicationInfo().targetSdkVersion
            &gt;= android.os.Build.VERSION_CODES.HONEYCOMB;
    for (int i = 0; i &lt; count; i++) {
        final View child = getChildAt(i);
        final int position = firstPos + i;

        if (child instanceof Checkable) {
            ((Checkable) child).setChecked(mCheckStates.get(position));
        } else if (useActivated) {
            child.setActivated(mCheckStates.get(position));
        }
    }
}
</code></pre>

<p>From what I understand here, the <code>ListView</code> is only able to deal with checkboxes if the direct children of the <code>ListView</code> implement <code>Checkable</code>. To facilitate complex layouts, I have created a <a href="https://github.com/codeguru42/CheckableLinearLayout" rel="nofollow">CheckableLinearLayout</a> component that can be used in this exact situation.</p>
