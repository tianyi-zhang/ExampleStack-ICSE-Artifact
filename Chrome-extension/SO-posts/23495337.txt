<p>If you want to use a bitmap in different areas of your app you do not pass them around. You are on a very limited memory machine keep a bitmap as little time as possible in the heap.</p>

<p>The way you do it, you just save it to a file temporarly and then load it whereever you need it again.</p>

<p><a href="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal" rel="nofollow">Get your cache dir</a></p>

<pre><code>public static String getCacheDir(Context ctx) {
        return Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState()) ||!Environment.isExternalStorageRemovable() ?
                ctx.getExternalCacheDir().getPath() : ctx.getCacheDir().getPath();
    }
</code></pre>

<p>Save the bitmap</p>

<pre><code>public static File saveBitmap(Bitmap bitmap, String filename, String path, boolean recycle) {
        FileOutputStream out=null;
        try {
            File f = new File(path,filename);
            if(!f.exists()) {
                f.createNewFile();
            }
            out = new FileOutputStream(f);
            if(bitmap.compress(Bitmap.CompressFormat.PNG, 90, out)) {
                return f;
            }
        } catch (Exception e) {
            Log.e(TAG, "Could not save bitmap", e);
        } finally {
            try{
                out.close();
            } catch(Throwable ignore) {}
            if(recycle) {
                bitmap.recycle();
            }
        }
        return null;
    }
</code></pre>

<p>Then load it again.</p>

<pre><code>BitmapFactory.Options options = new BitmapFactory.Options();
options.inPreferredConfig = Bitmap.Config.ARGB_8888;
Bitmap bitmap = BitmapFactory.decodeFile(photoPath, options);
selected_photo.setImageBitmap(bitmap);
</code></pre>

<p><a href="http://square.github.io/picasso/" rel="nofollow">You could also look into Picasso</a> which handles async loading for you and also enhances Performance with a disk cache and many more features</p>

<pre><code>Picasso.with(getContext()).load(bitmapFile).into(imageView);
</code></pre>
