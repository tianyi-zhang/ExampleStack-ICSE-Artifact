<p>It is logical that onDraw will be called and timer will be start again. You should start your timer in a service and run it in background thread. Each time you want to access it value you can bind to service. </p>

<p>Check this <a href="http://developer.android.com/reference/android/app/Service.html" rel="nofollow">guideline</a>.</p>

<p>In this code each time you open the app you will see updated value:</p>

<pre><code>public class MainActivity extends Activity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        startService(new Intent(MainActivity.this, MyService.class));
        doBindService();

        ((Button) findViewById(R.id.button1))
                .setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        if (mBoundService != null) {
                            ((TextView) findViewById(R.id.textView1))
                                    .setText(mBoundService.getValue() + "");
                        }
                    }
                });
        ((Button) findViewById(R.id.button2))
                .setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {
                        mBoundService = null;
                        stopService(new Intent(MainActivity.this,
                                MyService.class));
                        doUnbindService();
                    }
                });

    }

    private MyService mBoundService;
    private boolean mIsBound;

    private ServiceConnection mConnection = new ServiceConnection() {
        public void onServiceConnected(ComponentName className, IBinder service) {
            mBoundService = ((MyService.LocalBinder) service).getService();
            ((TextView) findViewById(R.id.textView1)).setText(mBoundService
                    .getValue() + "");

        }

        public void onServiceDisconnected(ComponentName className) {
            mBoundService = null;
        }
    };

    void doBindService() {
        bindService(new Intent(MainActivity.this, MyService.class),
                mConnection, Context.BIND_AUTO_CREATE);
        mIsBound = true;
    }

    void doUnbindService() {
        if (mIsBound) {
            // Detach our existing connection.
            unbindService(mConnection);
            mIsBound = false;
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        doUnbindService();
    }
}
</code></pre>

<p>And a service:</p>

<pre><code>public class MyService extends Service {

    private final IBinder mBinder = new LocalBinder();
    // private TimeCounter timeCounter;
    int x = 0;

    public class LocalBinder extends Binder {
        MyService getService() {
            return MyService.this;
        }
    }

    @Override
    public void onCreate() {
        new Thread(new Runnable() {
            public void run() {
                while (true) {
                    x++;
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();
    }

    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }

    public int getValue() {
        return x;
    }
}
</code></pre>

<p>Maybe you need activity_main.xml:</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="${relativePackage}.${activityClass}" &gt;

    &lt;TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        /&gt;

    &lt;Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:layout_below="@+id/textView1"
        android:text="Show Updated value" /&gt;

    &lt;Button
        android:id="@+id/button2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:layout_below="@+id/button1"
        android:layout_marginTop="28dp"
        android:text="Stop Service" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>
