<p>That particular library has very specific drawing code for the Holo theme Seekbar. You will have to implement your own drawing code to achieve the effect that you are looking for.</p>

<p>The code from the library can help you get started;</p>

<pre><code>/**
     * Draws the widget on the given canvas.
     */
    @Override
    protected synchronized void onDraw(Canvas canvas) {
            super.onDraw(canvas);

            // draw seek bar background line
            final RectF rect = new RectF(padding, 0.5f * (getHeight() - lineHeight), getWidth() - padding, 0.5f * (getHeight() + lineHeight));
            paint.setStyle(Style.FILL);
            paint.setColor(Color.GRAY);
            paint.setAntiAlias(true);
            canvas.drawRect(rect, paint);

            // draw seek bar active range line
            rect.left = normalizedToScreen(normalizedMinValue);
            rect.right = normalizedToScreen(normalizedMaxValue);

            // orange color
            paint.setColor(DEFAULT_COLOR);
            canvas.drawRect(rect, paint);

            // draw minimum thumb
            drawThumb(normalizedToScreen(normalizedMinValue), Thumb.MIN.equals(pressedThumb), canvas);

            // draw maximum thumb
            drawThumb(normalizedToScreen(normalizedMaxValue), Thumb.MAX.equals(pressedThumb), canvas);
    }
</code></pre>

<p>What you see here is the onDraw callback in the RangeSeekBar class. Here the blue and gray lines are drawn, after which the thumbs are drawn over them. You will have to do something similar but with your specific logic, graphics etc.</p>

<p>So either subclass RangeSeekBar and extend the functionality of that library or create your own custom View or ViewGroup, following the hints from the official Android lessons; <a href="http://developer.android.com/training/custom-views/index.html" rel="nofollow">http://developer.android.com/training/custom-views/index.html</a></p>
