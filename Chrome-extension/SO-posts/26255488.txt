<p>Since no one answered I'm here to answer myself. </p>

<p>After some research (a lot actually) I came to the conclusion that <strong>yes it is possible to rotate a vector using a quaternion</strong> but it's better for you that you transform it into a rotation matrix.</p>

<ul>
<li>Rotation matrix - 9 multiplications and 6 additions</li>
<li>Quartenion - 15 multiplications and 15 additions</li>
</ul>

<p>Source: <a href="http://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Performance_comparisons" rel="nofollow">Performance comparisons</a></p>

<p>It's better to use the rotation matrix provided by Android. Also if you are going to use quaternion somehow (<code>Sensor.TYPE_ROTATION_VECTOR</code> + <code>SensorManager.getQuaternionFromVector</code> for example) you can (and should) transform it into a rotation matrix. You can use the method <code>SensorManager.getRotationMatrixFromVector</code> to convert the rotation vector to a matrix. After you get the rotation matrix you just have to multiply it for the projected vector you want. You can use this function for that:</p>

<pre><code> public float[] multiplyByVector(float[][] A, float[] x) {
        int m = A.length;
        int n = A[0].length;
        if (x.length != n) throw new RuntimeException("Illegal matrix dimensions.");
        float[] y = new float[m];
        for (int i = 0; i &lt; m; i++)
            for (int j = 0; j &lt; n; j++)
                y[i] += (A[i][j] * x[j]);
        return y;
  }
</code></pre>

<p>Although I'm still not able to get this running correctly I will mark this as answer.</p>
