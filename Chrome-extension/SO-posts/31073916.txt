<p>In order to have your <code>ListView</code> update, you should update the array you provided to your adapter and call <code>adapter.notifyDataSetCHanged()</code>. The adapter will handle the rest for you. </p>

<p>i.e. You should make <code>forecastArray</code> global (declare it at the top of your class), then in your <code>onPostExecute()</code> you can do the following:</p>



<pre class="lang-java prettyprint-override"><code>             @Override
             protected void onPostExecute(String[] strings) {

               forecastArray = strings;
               mForecastAdapter.notifyDataSetChanged();

             }
</code></pre>



<p>Let me know if this helps, or if you need more info.</p>

<p>EDIT: Here is the code for what I have been trying to explain to you in the comments.</p>



<pre class="lang-java prettyprint-override"><code>public class ForecastFragment extends Fragment {

    private ArrayAdapter&lt;String&gt; mForecastAdapter;
    private List&lt;String&gt; weekForecast=null;
    private Context con;
    ListView listview;
    public ForecastFragment(){

    }



    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView= inflater.inflate(R.layout.fragment_main, container, false);

        //con=getActivity().getApplicationContext();

        listview=(ListView)rootView.findViewById(R.id.listview_forecast);


        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
                String forecast=mForecastAdapter.getItem(position);
                callActivity(forecast);

            }
        });


        return rootView;
    }

    private void callActivity(String forecast) {
        Intent myIntent=new Intent(getActivity(), DetailedForecast.class).putExtra("INFORMATION",forecast);
        startActivity(myIntent);
    }

    public class FetchWeatherTask extends AsyncTask&lt;String,Void,String[]&gt; {

        @Override
        protected String[] doInBackground(String... params) {

            if(params.length==0){
                return null;
            }

            HttpURLConnection urlConnection=null;
            BufferedReader reader=null;

            String forecastJsonStr =null;
            String format="json";
            String units="metric";
            int numDays=7;

            try {

                final String FORECAST_BASE_URL="http://api.openweathermap.org/data/2.5/forecast/daily?";
                final String QUERY_PARAM="q";
                final String FORMAT_PARAM="mode";
                final String UNITS_PARAM="units";
                final String DAYS_PARAM="cnt";

                Uri builtUri= Uri.parse(FORECAST_BASE_URL).buildUpon()
                        .appendQueryParameter(QUERY_PARAM,params[0])
                        .appendQueryParameter(FORMAT_PARAM,format)
                        .appendQueryParameter(UNITS_PARAM,units)
                        .appendQueryParameter(DAYS_PARAM,Integer.toString(numDays))
                        .build();

                Log.i("SANJEEV", builtUri.toString());


                URL url =new URL(builtUri.toString());

                urlConnection=(HttpURLConnection)url.openConnection();
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();

                InputStream inputStream=urlConnection.getInputStream();
                StringBuffer buffer=new StringBuffer();
                if(inputStream==null){
                    return null;
                }

                reader=new BufferedReader(new InputStreamReader(inputStream));

                String line;
                while((line=reader.readLine())!=null){
                    buffer.append(line+"\n");
                }

                if(buffer.length()==0){
                    return  null;
                }

                forecastJsonStr=buffer.toString();

                Log.v("SANJEEV_TAG","JSON"+forecastJsonStr);

            } catch (MalformedURLException ee) {
                ee.printStackTrace();
            }catch (IOException ee){
                Log.e("PlaceholderFragment", "Error ", ee);
            }finally {
                if(urlConnection!=null){
                    urlConnection.disconnect();
                }

                if(reader!=null){
                    try{
                        reader.close();
                    } catch (IOException ee) {
                        Log.e("PlaceholderFragment", "Error closing stream", ee);
                    }
                }
            }

            try{
                return getWeatherDataFromJson(forecastJsonStr,numDays);
            }catch (JSONException e){
                Log.e("SANJEEV",e.getMessage(),e);
                e.printStackTrace();
            }

            return null;
        }

        //CODE FROM UDACITY STARTS
        private String getReadableDateString(long time){

            SimpleDateFormat shortenedDateFormat = new SimpleDateFormat("EEE MMM dd");
            return shortenedDateFormat.format(time);
        }
        //CODE FROM UDACITY ENDS

        private String[] getWeatherDataFromJson(String forecastJsonStr, int numDays) throws JSONException{

            final String OWM_LIST="list";
            final String OWM_WEATHER="weather";
            final String OWM_TEMP="temp";
            final String OWM_MAX="max";
            final String OWM_MIN="min";
            final String OWM_DESCRIPTION="main";

            JSONObject weather=new JSONObject(forecastJsonStr);
            JSONArray days=weather.getJSONArray(OWM_LIST);

            //CODE FROM UDACITY STARTS
            Time dayTime = new Time();
            dayTime.setToNow();
            int julianStartDay = Time.getJulianDay(System.currentTimeMillis(), dayTime.gmtoff);
            //CODE FROM UDACITY ENDS

            String[] resultStrs=new String[numDays];
            for(int i=0;i&lt;days.length();i++){

                String day="";
                String description;
                String highAndLow;

                JSONObject dayForecast=days.getJSONObject(i);


                //CODE FROM UDACITY STARTS
                long dateTime;
                dateTime = dayTime.setJulianDay(julianStartDay+i);
                day = getReadableDateString(dateTime);
                //CODE FROM UDACITY ENDS


                JSONObject weatherObject=dayForecast.getJSONArray(OWM_WEATHER).getJSONObject(0);
                description=weatherObject.getString(OWM_DESCRIPTION);


                JSONObject temp=dayForecast.getJSONObject(OWM_TEMP);
                double high=temp.getDouble(OWM_MAX);
                double low=temp.getDouble(OWM_MIN);
                //highAndLow=formatHighLows(high, low);

                highAndLow=Double.toString(Math.round(high))+"/"+Double.toString(Math.round(low));


                resultStrs[i]=day+" - "+description+" - "+highAndLow;

            }

            for (String s : resultStrs) {
                Log.v("SANJEEV", "Forecast entry: " + s);
            }
            return resultStrs;


        }


        @Override
        protected void onPostExecute(String[] strings) {


            mForecastAdapter=new ArrayAdapter&lt;String&gt;(getActivity(),R.layout.list_item_forecast,R.id.list_item_forecast_textview,strings );

            listview.setAdapter(mForecastAdapter);


        }
    }
}
</code></pre>



<p>I threw this together as quick as I could, so if there are errors I am sorry. But, the parts to focus on are the declarations at the top of the class, some changes I made in <code>onCreateView()</code>, and the <code>onPostExecute()</code>. </p>

<p>Also, I urge you to be a bit less demanding and a bit more appreciative of the free help you are getting. If I weren't in such a good mood I probably would've (justifiably) told you to find help somewhere else after your last couple of comments. </p>
