<p>the flag dose normally work, there are peoples Extensive directions findable with a lot of google-fu for tracking down the exact pid of the exact thread running on your machine and checking to see if the flag is set. But as i am doing the same toutorial you are I have what you really want instead. Code that compiles......
(i have left as many comments in as possible , its a bastard compiltation of many peoples Lwjgl3 getting started toutorials....giving credit back as a great thankyou for them helping me smack OSX straight.....happy bird flapping.....which is by far one of the best totourials out on Lwjgl3.....[C]herno....love the work</p>

<pre><code>package bird;

import static org.lwjgl.glfw.GLFW.*;
import static org.lwjgl.opengl.GL11.*;
import static org.lwjgl.system.MemoryUtil.*;

import org.lwjgl.Version;
import org.lwjgl.glfw.GLFWErrorCallback;
import org.lwjgl.glfw.GLFWKeyCallback;
import org.lwjgl.glfw.GLFWVidMode;
import org.lwjgl.opengl.GL;





public class Main  {


    private static final int WIDTH = 1280;
    private static final int HEIGHT = 720;

    private static GLFWErrorCallback errorCallback;
    private static GLFWKeyCallback   keyCallback;

    private long window;

    private Thread thread;
    private boolean isRunning = false;



   /* public void start() {

        thread = new Thread(this, "Game");
        thread.start();

    }
    */





    public void run() {
        isRunning = true;

        System.out.println("Flappy " + Version.getVersion() + "!");

        try {
            init();
            loop();

            // Destroy window and window callbacks
            glfwDestroyWindow(window);
        } finally {
            // Terminate GLFW and free the GLFWErrorCallback
            glfwTerminate();
        }
    }

    private void init() {



        // Setup an error callback. The default implementation
        // will print the error message in System.err.
        glfwSetErrorCallback(errorCallback = GLFWErrorCallback.createPrint(System.err));

        // Initialize GLFW. Most GLFW functions will not work before doing this.
        if ( glfwInit() != GLFW_TRUE )
            throw new IllegalStateException("Unable to initialize GLFW");

        // Configure our window
        glfwDefaultWindowHints(); // optional, the current window hints are already the default
        glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE); // the window will stay hidden after creation
        glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE); // the window will be resizable



        // Create the window
        window = glfwCreateWindow(WIDTH, HEIGHT, "Flapping the bird!", NULL, NULL);
        if ( window == NULL )
            throw new RuntimeException("Failed to create the GLFW window, GL_ -F-_U-");



        // Get the resolution of the primary monitor
        GLFWVidMode vidmode = glfwGetVideoMode(glfwGetPrimaryMonitor());
        // Center our window
        glfwSetWindowPos(
            window,
            (vidmode.width() - WIDTH) / 2,
            (vidmode.height() - HEIGHT) / 2
        );

        glfwSetKeyCallback(window, new KeyboardInput());

        // Make the OpenGL context current
        glfwMakeContextCurrent(window);
        // Enable v-sync
        glfwSwapInterval(1);

        // Make the window visible
        glfwShowWindow(window);

        GL.createCapabilities();

        glfwInit();


    }


    private void loop() {
        // This line is critical for LWJGL's interoperation with GLFW's
        // OpenGL context, or any context that is managed externally.
        // LWJGL detects the context that is current in the current thread,
        // creates the GLCapabilities instance and makes the OpenGL
        // bindings available for use.

        // Set the clear color




        // Run the rendering loop until the user has attempted to close
        // the window or has pressed the ESCAPE key.
        while ( glfwWindowShouldClose(window) == GLFW_FALSE &amp;&amp; isRunning == true) {

            update();
            render();


        }
    }

    public void update() {
         glfwPollEvents();

         if (KeyboardInput.keys[GLFW_KEY_ESCAPE]) {
             glfwSetWindowShouldClose(window, GLFW_TRUE);
         }
         if (KeyboardInput.keys[GLFW_KEY_SPACE]) {
             System.out.println("Farfenugen");
         }    
    }


    public void render() {
        glfwSwapBuffers(window); 
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
        glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

    }

    public static void main(String[] args) {
        new Main().run();
        }



}
</code></pre>
