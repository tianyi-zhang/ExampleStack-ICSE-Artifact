<p>Here is the final code I prepared (With valuable inputs form Google): </p>

<pre><code>public class Fexplorer extends ListActivity {


String B=null ;
private List&lt;String&gt; item = null;
private List&lt;String&gt; path = null;
private String root;
private TextView myPath;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.explorer_main);
    myPath = (TextView)findViewById(R.id.path);
    Button OK = (Button)findViewById(R.id.button2);
    Button Cancel = (Button)findViewById(R.id.button1);


    OK.setOnClickListener(onOK);
    Cancel.setOnClickListener(onCancel);

    root = Environment.getExternalStorageDirectory().getPath();

    getDir(root);
}

private void getDir(String dirPath)
{
    myPath.setText("Choose Location");
    B = dirPath; 
    Toast.makeText(getApplicationContext(),B, Toast.LENGTH_LONG).show();
    item = new ArrayList&lt;String&gt;();
    path = new ArrayList&lt;String&gt;();
    File f = new File(dirPath);
    File[] files = f.listFiles();

    if(!dirPath.equals(root))
    {
        item.add(root);
        path.add(root);
        item.add("../");
        path.add(f.getParent());    
    }

    for(int i=0; i &lt; files.length; i++)
    {
        File file = files[i];

        if(!file.isHidden() &amp;&amp; file.canRead()){
            path.add(file.getPath());
            if(file.isDirectory()){
                item.add(file.getName() + "/");
            }else{
                item.add(file.getName());
            }
        }   
    }

    ArrayAdapter&lt;String&gt; fileList = new ArrayAdapter&lt;String&gt;(this, R.layout.row, item);
    setListAdapter(fileList);   
}

@Override
protected void onListItemClick(ListView l, View v, int position, long id) {
    // TODO Auto-generated method stub
    File file = new File(path.get(position));

    if (file.isDirectory())
    {
        if(file.canRead()){
            getDir(path.get(position));
        }else{
            new AlertDialog.Builder(this)
                .setIcon(R.drawable.ic_launcher)
                .setTitle("[" + file.getName() + "] folder can't be read!")
                .setPositiveButton("OK", null).show();  
        }   
    }

    /*else {
        new AlertDialog.Builder(this)
                .setIcon(R.drawable.ic_launcher)
                .setTitle("[" + file.getName() + "]")
                .setPositiveButton("OK", null).show();

      } */
}

 private View.OnClickListener onOK=new View.OnClickListener() {
        public void onClick(View v){


        copy();
        Intent About = new Intent(Fexplorer.this,EduBridge.class);
        startActivity(About);

        }
    };

 private View.OnClickListener onCancel=new View.OnClickListener() {
        public void onClick(View v){


            Intent About = new Intent(Fexplorer.this,EduBridge.class);
            startActivity(About);


        }
    };

    public void copy(){
                try {
                        File sourceFile = new File("/sdcard/edu/Brochure.pdf");
                        File destinationFile = new File(B+"/" + sourceFile.getName());
                        String X = (B+"/" + sourceFile.getName());
                        Toast.makeText(getApplicationContext(),X, Toast.LENGTH_LONG).show();
                        Fexplorer copyFileExample = new Fexplorer();
                        copyFileExample .copyFile(sourceFile, destinationFile);
                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

        public void copyFile(File sourceFile, File destinationFile) {
                try {
                        FileInputStream fileInputStream = new FileInputStream(sourceFile);
                        FileOutputStream fileOutputStream = new FileOutputStream(
                                        destinationFile);

                        int bufferSize;
                        byte[] bufffer = new byte[512];
                        while ((bufferSize = fileInputStream.read(bufffer)) &gt; 0) {
                                fileOutputStream.write(bufffer, 0, bufferSize);
                        }

                        fileInputStream.close();
                        fileOutputStream.close();
                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

    }
</code></pre>

<p>In the Styles: </p>

<pre><code>    &lt;style name="MyFloatingWindow" parent="@android:style/Theme.Dialog"&gt;
    &lt;item name="android:windowBackground"&gt;@android:color/transparent&lt;/item&gt;
    &lt;item name="android:background"&gt;@android:color/transparent&lt;/item&gt;
    &lt;item name="android:windowIsFloating"&gt;true&lt;/item&gt;
    &lt;item name="android:windowNoTitle"&gt;true&lt;/item&gt;
</code></pre>

<p>The explorer_main XML file: </p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent" 
android:orientation="vertical"
android:layout_gravity ="center"&gt;

&lt;TextView
    android:id="@+id/path"
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content"
     /&gt;

&lt;ListView
    android:id="@android:id/list"
    android:layout_width="fill_parent"
    android:layout_below="@+id/path"
    android:layout_height="308dp" /&gt;

&lt;TextView
    android:id="@android:id/empty"
    android:layout_below="@android:id/list"
    android:layout_width="fill_parent" 
    android:layout_height="wrap_content" 
    android:text="No Data"
    /&gt;

&lt;Button
    android:id="@+id/button1"
    style="?android:attr/buttonStyleSmall"
    android:layout_width="60dp"
    android:layout_height="wrap_content"
    android:layout_alignParentRight="true"
    android:layout_below="@android:id/empty"

    android:text="@string/DirB" /&gt;

&lt;Button
    android:id="@+id/button2"
    style="?android:attr/buttonStyleSmall"
    android:layout_width="60dp"
    android:layout_height="wrap_content"
    android:layout_alignBaseline="@+id/button1"
    android:layout_alignBottom="@+id/button1"
    android:layout_alignParentLeft="true"

    android:text="@string/DirA" /&gt;
</code></pre>

<p></p>

<p>Finally The row.xml file:</p>

<pre><code>     &lt;?xml version="1.0" encoding="utf-8"?&gt;
     &lt;TextView xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/rowtext"
     android:layout_width="fill_parent"
     android:layout_height="50sp"
     android:textSize="15dp" /&gt;
</code></pre>
