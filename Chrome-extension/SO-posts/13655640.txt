<p>There is a serious problem with using </p>

<pre><code>String[] strArr=line.split(",");
</code></pre>

<p>in order to parse CSV files, and that is because there can be commas within the data values, and in that case you must quote them, and ignore commas between quotes.</p>

<p>There is a very very simple way to parse this:</p>

<pre><code>/**
* returns a row of values as a list
* returns null if you are past the end of the input stream
*/
public static List&lt;String&gt; parseLine(Reader r) throws Exception {
    int ch = r.read();
    while (ch == '\r') {
        //ignore linefeed chars wherever, particularly just before end of file
        ch = r.read();
    }
    if (ch&lt;0) {
        return null;
    }
    Vector&lt;String&gt; store = new Vector&lt;String&gt;();
    StringBuffer curVal = new StringBuffer();
    boolean inquotes = false;
    boolean started = false;
    while (ch&gt;=0) {
        if (inquotes) {
            started=true;
            if (ch == '\"') {
                inquotes = false;
            }
            else {
                curVal.append((char)ch);
            }
        }
        else {
            if (ch == '\"') {
                inquotes = true;
                if (started) {
                    // if this is the second quote in a value, add a quote
                    // this is for the double quote in the middle of a value
                    curVal.append('\"');
                }
            }
            else if (ch == ',') {
                store.add(curVal.toString());
                curVal = new StringBuffer();
                started = false;
            }
            else if (ch == '\r') {
                //ignore LF characters
            }
            else if (ch == '\n') {
                //end of a line, break out
                break;
            }
            else {
                curVal.append((char)ch);
            }
        }
        ch = r.read();
    }
    store.add(curVal.toString());
    return store;
}
</code></pre>

<p>There are many advantages to this approach.  Note that each character is touched EXACTLY once.  There is no reading ahead, pushing back in the buffer, etc.  No searching ahead to the end of the line, and then copying the line before parsing.  This parser works purely from the stream, and creates each string value once.  It works on header lines, and data lines, you just deal with the returned list appropriate to that.  You give it a reader, so the underlying stream has been converted to characters using any encoding you choose.  The stream can come from any source: a file, a HTTP post, an HTTP get, and you parse the stream directly.  This is a static method, so there is no object to create and configure, and when this returns, there is no memory being held.</p>

<p>You can find a full discussion of this code, and why this approach is preferred in my blog post on the subject:  <a href="http://agiletribe.wordpress.com/2012/11/23/the-only-class-you-need-for-csv-files/">The Only Class You Need for CSV Files</a>.</p>
