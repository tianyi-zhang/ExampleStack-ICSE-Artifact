<p>If we go and look at the actual code being run we can see what's going on. In a thread pool the work is done by Worker threads which run this method (<a href="http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/concurrent/ThreadPoolExecutor.java#ThreadPoolExecutor.runWorker%28java.util.concurrent.ThreadPoolExecutor.Worker%29" rel="nofollow">taken from here</a>)</p>

<pre><code>final void runWorker(Worker w) {
    Runnable task = w.firstTask;
    w.firstTask = null;
    boolean completedAbruptly = true;
    try {
        while (task != null || (task = getTask()) != null) {
            w.lock();
            clearInterruptsForTaskRun();
            try {
                beforeExecute(w.thread, task);
                Throwable thrown = null;
                try {
                    task.run();
                } catch (RuntimeException x) {
                    thrown = x; throw x;
                } catch (Error x) {
                    thrown = x; throw x;
                } catch (Throwable x) {
                    thrown = x; throw new Error(x);
                } finally {
                    afterExecute(task, thrown);
                }
            } finally {
                task = null;
                w.completedTasks++;
                w.unlock();
            }
        }
        completedAbruptly = false;
    } finally {
        processWorkerExit(w, completedAbruptly);
    }
}
</code></pre>

<p>As you can see this will carry on running tasks while there are tasks to run. However, if a Worker runs out of tasks it will die and if more tasks are scheduled later a new Worker (thread) will be created.</p>
