<p>Using <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/atomic/AtomicInteger.html" rel="nofollow"><code>AtomicInteger</code></a> does what you want, and it makes explicit the intent to have operations on <code>x</code> be atomic.  After quite a few runs of the following, I got <code>0</code>'s every time:</p>

<pre><code>import java.util.concurrent.atomic.AtomicInteger;

public class DataRace implements Runnable {
    static volatile AtomicInteger x = new AtomicInteger(0);

    public void run() {
        for (int i = 0; i &lt; 10000; i++) {
            x.incrementAndGet();
            x.decrementAndGet();
        }
    }

    public static void main(String[] args) throws Exception {
        Thread[] threads = new Thread[100];

        for (int i = 0; i &lt; threads.length; i++)
            threads[i] = new Thread(new DataRace());
        for (int i = 0; i &lt; threads.length; i++)
            threads[i].start();
        for (int i = 0; i &lt; threads.length; i++)
            threads[i].join();

        System.out.println(x); // x **is now** always 0!
    }
}
</code></pre>
