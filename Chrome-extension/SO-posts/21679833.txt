<p>After finding multiple answers that are 'OK'. I moved towards a better TextWatcher which is designed to work correctly and independently from the <code>TextView</code>.</p>

<p>TextWatcher class is as follows:</p>

<pre><code>/**
 * Formats the watched EditText to a credit card number
 */
public static class FourDigitCardFormatWatcher implements TextWatcher {

    // Change this to what you want... ' ', '-' etc..
    private static final char space = ' ';

    @Override
    public void onTextChanged(CharSequence s, int start, int before, int count) {
    }

    @Override
    public void beforeTextChanged(CharSequence s, int start, int count, int after) {
    }

    @Override
    public void afterTextChanged(Editable s) {
        // Remove spacing char
        if (s.length() &gt; 0 &amp;&amp; (s.length() % 5) == 0) {
            final char c = s.charAt(s.length() - 1);
            if (space == c) {
                s.delete(s.length() - 1, s.length());
            }
        }
        // Insert char where needed.
        if (s.length() &gt; 0 &amp;&amp; (s.length() % 5) == 0) {
            char c = s.charAt(s.length() - 1);
            // Only if its a digit where there should be a space we insert a space
            if (Character.isDigit(c) &amp;&amp; TextUtils.split(s.toString(), String.valueOf(space)).length &lt;= 3) {
                s.insert(s.length() - 1, String.valueOf(space));
            }
        }
    }
}
</code></pre>

<p>Then add it to your TextView as you would any other <code>TextWatcher</code>.</p>

<pre><code>{
  //...
  mEditTextCreditCard.addTextChangedListener(new FourDigitCardFormatWatcher()); 
}
</code></pre>

<p>This will auto delete the space sensibly going back so the user can actually do less keystrokes when editing.</p>

<h2>Caveat</h2>

<p>If you are using <code>inputType="numberDigit"</code> this will disable the '-' and ' ' chars, so I recommend using, <code>inputType="phone"</code>. This enables other chars, but just use a custom inputfilter and problem solved.</p>
