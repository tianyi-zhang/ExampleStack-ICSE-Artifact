<p>To fix the OutOfMemory error, you should do something like this:</p>

<pre><code>BitmapFactory.Options options = new BitmapFactory.Options();
options.inSampleSize = 8;
Bitmap preview_bitmap = BitmapFactory.decodeStream(is, null, options);
</code></pre>

<p>This <code>inSampleSize</code> option reduces memory consumption.</p>

<p>Here's a complete method. First it reads image size without decoding the content itself. Then it finds the best <code>inSampleSize</code> value, it should be a power of 2, and finally the image is decoded.</p>

<pre><code>// Decodes image and scales it to reduce memory consumption
private Bitmap decodeFile(File f) {
    try {
        // Decode image size
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(new FileInputStream(f), null, o);

        // The new size we want to scale to
        final int REQUIRED_SIZE=70;

        // Find the correct scale value. It should be the power of 2.
        int scale = 1;
        while(o.outWidth / scale / 2 &gt;= REQUIRED_SIZE &amp;&amp; 
              o.outHeight / scale / 2 &gt;= REQUIRED_SIZE) {
            scale *= 2;
        }

        // Decode with inSampleSize
        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
    } catch (FileNotFoundException e) {}
    return null;
}
</code></pre>
