<p>Ok, I got it working with sending to the database! :)
Now I'm working with the Get method.. this is what I got - and for now it seems not to be working, possibly due to the fact that the data in database is sent as JSONArray?</p>

<pre><code>public static JSONObject doGet(String url)
{
    JSONObject json = null;

    HttpClient httpclient = new DefaultHttpClient();
    HttpGet httpget = new HttpGet(url); 

    httpget.addHeader("accept", "application/json");
    HttpResponse response;

    try {
        response = httpclient.execute(httpget);
        HttpEntity entity = response.getEntity();    

        if (entity != null) 
        {
            InputStream instream = entity.getContent();
            String result= convertStreamToString(instream);
            json=new JSONObject(result);     
            instream.close();
        }   
    } 

    catch (ClientProtocolException e) 
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
        Log.i("Error: ", e.toString());
    } 
    catch (IOException e) 
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
        Log.i("Error: ", e.toString());
    } 

    catch (JSONException e) 
    {
        // TODO Auto-generated catch block
        e.printStackTrace();
        Log.i("Error: ", e.toString());
    }        

    return json;
}

public static String convertStreamToString(InputStream is) {

    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
    StringBuilder sb = new StringBuilder();

    String line = null;
    try 
    {
        while ((line = reader.readLine()) != null) 
        {
            sb.append(line + "\n");
        }
    } 
    catch (IOException e) 
    {
        e.printStackTrace();
        Log.i("Error: ", e.toString());
    } 
    finally 
    {
        try 
        {
            is.close();
        } 
        catch (IOException e) 
        {
            e.printStackTrace();
        }
    }
    return sb.toString();
} 
</code></pre>
