<p><strong>Correctness of perlin noise</strong><br>
Regarding if your perlin noise is 'correct'; the easiest way to see if your perlin noise <strong>(or technically fractal noise based upon several octaves of perlin noise)</strong> is working is to use the values of your perlin noise to generate a greyscale image, this image should look like some kind of landscape (rolling hills, or mountains depending on the parameters you chose for the persistance (and to a less extent the number of octaves). Some examples of perlin noise is:</p>

<p>Low Persisance:<br>
<img src="http://i.stack.imgur.com/lVrN9.png" alt="Persisance of 0.5"></p>

<p>or </p>

<p>High Persisance:<br>
<img src="http://i.stack.imgur.com/BS18P.png" alt="Persisance of 0.7"></p>

<p>or</p>

<p>High Persisance (zoomed out):<br>
<img src="http://i.stack.imgur.com/gJXmm.png" alt="enter image description here"></p>

<p>These greyscale images are produced by the following code</p>

<pre><code>import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

public class ImageWriter {
    //just convinence methods for debug

    public static void greyWriteImage(double[][] data){
        //this takes and array of doubles between 0 and 1 and generates a grey scale image from them

        BufferedImage image = new BufferedImage(data.length,data[0].length, BufferedImage.TYPE_INT_RGB);

        for (int y = 0; y &lt; data[0].length; y++)
        {
          for (int x = 0; x &lt; data.length; x++)
          {
            if (data[x][y]&gt;1){
                data[x][y]=1;
            }
            if (data[x][y]&lt;0){
                data[x][y]=0;
            }
              Color col=new Color((float)data[x][y],(float)data[x][y],(float)data[x][y]); 
            image.setRGB(x, y, col.getRGB());
          }
        }

        try {
            // retrieve image
            File outputfile = new File("saved.png");
            outputfile.createNewFile();

            ImageIO.write(image, "png", outputfile);
        } catch (IOException e) {
            //o no!
        }
    }


    public static void main(String args[]){
        double[][] data=new double[2][4];
        data[0][0]=0.5;
        data[0][5]=1;
        data[1][0]=0.7;
        data[1][6]=1;

        greyWriteImage(data);
    }
}
</code></pre>

<p>This code assumes each entry will be between 0 and 1, but perlin noise usually produces between -1 and 1, scale according to your implimentation. Assuming your perlin noise will give a value for any x,y then you can run this using the following code</p>

<pre><code>    //generates 100 by 100 data points within the specified range

    double iStart=0;
    double iEnd=500;
    double jStart=0;
    double jEnd=500;

    double[][] result=new double[100][100];

    for(int i=0;i&lt;100;i++){
        for(int j=0;j&lt;100;j++){
            int x=(int)(iStart+i*((iEnd-iStart)/100));
            int y=(int)(jStart+j*((jEnd-jStart)/100));
            result[i][j]=0.5*(1+perlinNoise.getNoise(x,y));
        }
    }

    ImageWriter.greyWriteImage(result);
</code></pre>

<p>My implimentation expects integer x and y. Feel free to modify if this is not the case for you</p>

<p><strong>Mapping to tiles</strong><br>
This is entirely up to you, you need to define certain ranges of the perlin noise value to create certain tiles. Be aware however that perlin noise is biased towards 0. Assuming 2D you could get nice results by taking the landscape analogy semi literally, low values=water, lowish values=sand, medium values=grass, high values =snow.</p>

<p>Also be aware that in some implementations (eg minecraft biomes and caverns) several random values are combined to create an overall result. See <a href="http://programmers.stackexchange.com/questions/202992/randomization-of-biomes/203040#203040">http://programmers.stackexchange.com/questions/202992/randomization-of-biomes/203040#203040</a></p>

<p><strong>Ideas for improvement</strong><br>
If you find that perlin noise generation is too slow then consider simplex noise, it has very similar properties but is more efficient (especially at higher dimentions). Simplex noise is however considerably more complex mathematically.</p>
