<p>try this</p>

<pre><code>package com.kWh360.image.editing;

import java.util.ArrayList;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Path;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;

public class DrawingPanel extends View implements OnTouchListener {

    private Canvas mCanvas;
    private Path mPath;
    private Paint mPaint, mBitmapPaint;
    private ArrayList&lt;PathPoints&gt; paths = new ArrayList&lt;PathPoints&gt;();
    private ArrayList&lt;PathPoints&gt; undonePaths = new ArrayList&lt;PathPoints&gt;();
    private Bitmap mBitmap;
    private int color;
    public int SSL = Color.WHITE;
    private int x, y;
    private int strockWidth = 3;

    private String textToDraw = null;
    public static boolean isTextModeOn = false;

    int mWidth, mHeight;

    public DrawingPanel(Context context, int color, Bitmap bitmap) {
        super(context);
        this.color = color;
        setFocusable(true);
        setFocusableInTouchMode(true);

        this.setOnTouchListener(this);

        mBitmap = bitmap;
        mBitmapPaint = new Paint(Paint.DITHER_FLAG);
        mPaint = new Paint();
        mPaint.setAntiAlias(true);
        mPaint.setDither(true);
        mPaint.setColor(color);
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeJoin(Paint.Join.ROUND);
        mPaint.setStrokeCap(Paint.Cap.ROUND);
        mPaint.setStrokeWidth(strockWidth);
        mPaint.setTextSize(30);

        mPath = new Path();
        //paths.add(new PathPoints(mPath, color,strockWidth, false));
        mCanvas = new Canvas();
    }

    public void colorChanged(int color) {
        this.color = color;
        mPaint.setColor(color);
    }

    public void changeWidthOfStrock(int strockWidth) {
        this.strockWidth = strockWidth;
        mPaint.setStrokeWidth(strockWidth);
    }

    @Override 
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        mWidth = View.MeasureSpec.getSize(widthMeasureSpec);
        mHeight = View.MeasureSpec.getSize(heightMeasureSpec);

        setMeasuredDimension(mWidth, mHeight);
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        if(mBitmap != null) {
            float xscale = (float) w / (float) mBitmap.getWidth();
            float yscale = (float) h / (float) mBitmap.getHeight();
            if (xscale &gt; yscale) // make sure both dimensions fit (use the
                xscale = yscale;

            int newx = mWidth;//= (int) ((int) w * xscale);
            int newy = mHeight;//= (int) ((int) h * xscale); // use the same scale for both dimensions
            System.out.println("Screen width--&gt;"+newx);
            System.out.println("Screen height--&gt;"+newy);
            System.out.println("mBitmap.getWidth()--&gt;"+mBitmap.getWidth());
            System.out.println("mBitmap.getHeight()--&gt;"+mBitmap.getHeight());

            if(mBitmap.getWidth() &lt;= newx) {
                newx = mBitmap.getWidth();
            }

            if(mBitmap.getHeight() &lt;= newy) {
                newy = mBitmap.getHeight(); 
            }

            mBitmap = Bitmap.createScaledBitmap(mBitmap, this.getWidth(),this.getHeight(), true);
            //mBitmap = getResizedBitmap(mBitmap, newx, newy);//Bitmap.createScaledBitmap(mBitmap, 453,311, true);
        } else {
            Bitmap.Config conf = Bitmap.Config.ARGB_8888; // see other conf types
            mBitmap = Bitmap.createBitmap(w, h, conf);
        }
    }


    @Override
    protected void onDraw(Canvas canvas) {
        /*
         * Draw the image into center
         */
        //int cx = (mWidth - mBitmap.getWidth()) &gt;&gt; 1; // same as (...) / 2
        //int cy = (mHeight - mBitmap.getHeight()) &gt;&gt; 1;

        canvas.drawBitmap(mBitmap, 0, 0, mBitmapPaint);
        for (PathPoints p : paths) {
            mPaint.setColor(p.getColor());
            mPaint.setStrokeWidth(p.getStrockWidth());
            if (p.isTextToDraw()) {
                //canvas.drawText(p.textToDraw, p.x, p.y, mPaint);
            } else {
                canvas.drawPath(p.getPath(), mPaint);
            }
        }
        mPaint.setColor(SSL);
        mPaint.setStrokeWidth(strockWidth);
        canvas.drawPath(mPath, mPaint);
    }

    private float mX, mY;
    private static final float TOUCH_TOLERANCE = 0;

    private void touch_start(float x, float y) {
        mPath.reset();
        mPath.moveTo(x, y);
        mX = x;
        mY = y;
    }

    private void touch_move(float x, float y) {
        float dx = Math.abs(x - mX);
        float dy = Math.abs(y - mY);
        if (dx &gt;= TOUCH_TOLERANCE || dy &gt;= TOUCH_TOLERANCE) {
            mPath.quadTo(mX, mY, (x + mX) / 2, (y + mY) / 2);
            mX = x;
            mY = y;
        }
    }

    private void touch_up() {
        mPath.lineTo(mX, mY);
        // commit the path to our offscreen
        mCanvas.drawPath(mPath, mPaint);
        // kill this so we don't double draw
        //mPath = new Path();
        paths.add(new PathPoints(mPath, SSL,strockWidth ,false));
        mPath = new Path();

    }

    private void drawText(int x, int y) {
        //Log.v(TAG, "Here");
        //Log.v(TAG, "X " + x + " Y " + y);
        this.x = x;
        this.y = y;
        paths.add(new PathPoints(color, textToDraw, true, x, y));
        // mCanvas.drawText(textToDraw, x, y, mPaint);
    }

    @Override
    public boolean onTouch(View arg0, MotionEvent event) {
        float x = event.getX();
        float y = event.getY();

        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            if (!isTextModeOn) {
                touch_start(x, y);
                invalidate();
            }
            break;
        case MotionEvent.ACTION_MOVE:
            if (!isTextModeOn) {
                touch_move(x, y);
                invalidate();
            }
            break;
        case MotionEvent.ACTION_UP:
            if (isTextModeOn) {
                drawText((int) x, (int) y);
                invalidate();
            } else {
                touch_up();
                invalidate();
            }
            break;
        }
        return true;
    }

    public void onClickUndo() {
        if (paths.size() &gt; 0) {
            undonePaths.add(paths.remove(paths.size() - 1));
            invalidate();
        } else {

        }
        // toast the user
    }

    public void onClickRedo() {
        if (undonePaths.size() &gt; 0) {
            paths.add(undonePaths.remove(undonePaths.size() - 1));
            invalidate();
        } else {

        }
        // toast the user
    }


    class PathPoints {
        private Path path;
        // private Paint mPaint;
        private int color;
        private int strockW;
        private String textToDraw;
        private boolean isTextToDraw;
        private int x, y;

        public PathPoints(Path path, int color,int strockWidth ,boolean isTextToDraw) {
            this.path = path;
            this.color = color;
            this.strockW = strockWidth;
            this.isTextToDraw = isTextToDraw;
        }

        public PathPoints(int color, String textToDraw, boolean isTextToDraw,int x, int y) {
            this.color = color;
            this.textToDraw = textToDraw;
            this.isTextToDraw = isTextToDraw;
            this.x = x;
            this.y = y;
        }

        public Path getPath() {
            return path;
        }

        public void setPath(Path path) {
            this.path = path;
        }

        /*
         * private Paint getPaint() { mPaint = new Paint();
         * mPaint.setAntiAlias(true); mPaint.setColor(color);
         * mPaint.setStyle(Paint.Style.STROKE);
         * mPaint.setStrokeJoin(Paint.Join.ROUND);
         * mPaint.setStrokeCap(Paint.Cap.ROUND); mPaint.setStrokeWidth(6);
         * return mPaint; }
         */

        public int getColor() {
            return color;
        }

        public void setColor(int color) {
            this.color = color;
        }

        public int getStrockWidth() {
            return strockW;
        }

        public void setStrokWidth(int color) {
            this.strockW = color;
        }

        public String getTextToDraw() {
            return textToDraw;
        }

        public void setTextToDraw(String textToDraw) {
            this.textToDraw = textToDraw;
        }

        public boolean isTextToDraw() {
            return isTextToDraw;
        }

        public void setTextToDraw(boolean isTextToDraw) {
            this.isTextToDraw = isTextToDraw;
        }

        public int getX() {
            return x;
        }

        public void setX(int x) {
            this.x = x;
        }

        public int getY() {
            return y;
        }

        public void setY(int y) {
            this.y = y;
        }

    }


     private Bitmap getResizedBitmap(Bitmap bm, int newWidth, int newHeight) {

         int cx = (mWidth - mBitmap.getWidth()) &gt;&gt; 1; // same as (...) / 2
         int cy = (mHeight - mBitmap.getHeight()) &gt;&gt; 1;

         int width = bm.getWidth();
         int height = bm.getHeight();
         float scaleWidth = ((float) newWidth) / width;
         float scaleHeight = ((float) newHeight) / height;
         // CREATE A MATRIX FOR THE MANIPULATION
         Matrix matrix = new Matrix();
         // RESIZE THE BIT MAP
         matrix.postScale(scaleWidth, scaleHeight);

         // "RECREATE" THE NEW BITMAP
         //Bitmap resizedBitmap = Bitmap.createBitmap(bm, cx, cy, width, height, matrix, false);
         return Bitmap.createBitmap(bm, cx, cy, width, height, matrix, false);
     }


}
</code></pre>

<hr>

<p>Add this drawing view into layout</p>

<pre><code>drawingPanel = new DrawingPanel(getApplicationContext(), Constant.ImageEdit.colors[0], Constant.PhotoBitmapCommon);
rl_imgEdit_image.addView(drawingPanel);
</code></pre>
