<pre><code>public class MyGcmListenerService extends GcmListenerService {

private static final String TAG = "MyGcmListenerService";

@Override
public void onMessageReceived(String from, Bundle data) {
    String message = data.getString("message");

    // showing an alert activity if there is an active activity 

    Intent pushReceivedIntent = new Intent("Push");
    pushReceivedIntent.putExtras(data);

    ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
    List&lt;ActivityManager.RunningTaskInfo&gt; taskInfo = am.getRunningTasks(1);
    ComponentName componentInfo = taskInfo.get(0).topActivity;
    if(componentInfo.getPackageName().equalsIgnoreCase(Constants.APP_PACKAGE)){
        getApplicationContext().sendBroadcast(pushReceivedIntent);
    }
    else{
        // showNotification(data);
    }
}
</code></pre>

<p>and... </p>

<pre><code>private void showNotification(Bundle data) {
    String message = data.getString("message");

    Intent intent = new Intent(this, HomeActivity.class);
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
    PendingIntent pendingIntent = PendingIntent.getActivity(this, 0 /* Request code */, intent,
            PendingIntent.FLAG_ONE_SHOT);
    Uri defaultSoundUri= RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
    NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(this)
            .setSmallIcon(R.drawable.ic_launcher)
            .setContentTitle("")
            .setContentText(message)
            .setAutoCancel(true)
            .setSound(defaultSoundUri)
            .setContentIntent(pendingIntent);

    NotificationManager notificationManager =
            (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

    notificationManager.notify(0 /* ID of notification */, notificationBuilder.build());
}
</code></pre>

<p>This is the Intent Service I use, </p>

<pre><code>public class RegistrationIntentService extends IntentService {

private static final String TAG = "RegIntentService";
private static final String gcm_defaultSenderId = "1234556";

public RegistrationIntentService() {
    super(TAG);
}

@Override
protected void onHandleIntent(Intent intent) {
    SharedPreferences sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);

    try {
        // [START register_for_gcm]
        // Initially this call goes out to the network to retrieve the token, subsequent calls
        // are local.
        // [START get_token]
        InstanceID instanceID = InstanceID.getInstance(this);
        String token = instanceID.getToken(gcm_defaultSenderId,
                GoogleCloudMessaging.INSTANCE_ID_SCOPE, null);
        // [END get_token]


        // TODO: Implement this method to send any registration to your app's servers.
        sendRegistrationToServer(token);

        sharedPreferences.edit().putBoolean("SENT_TOKEN_TO_SERVER", true).apply();
        // [END register_for_gcm]
    } catch (Exception e) {
        Log.d(TAG, "Failed to complete token refresh", e);
        // If an exception happens while fetching the new token or updating our registration data
        // on a third-party server, this ensures that we'll attempt the update at a later time.
        sharedPreferences.edit().putBoolean("SENT_TOKEN_TO_SERVER", false).apply();
    }
    // Notify UI that registration has completed, so the progress indicator can be hidden.
    Intent registrationComplete = new Intent("REGISTRATION_COMPLETE");
    LocalBroadcastManager.getInstance(this).sendBroadcast(registrationComplete);
}

private void sendRegistrationToServer(String token) {
    Log.d("token ", token);
    //TODO: Send This to server
}
</code></pre>

<p>}</p>

<p>Now, In your activities onResume Method, u need to add the receiver.</p>

<pre><code> protected void onResume() {
    super.onResume();

    // receiver to get the Notification ALert
    IntentFilter filter = new IntentFilter();
    filter.addAction("PUSH");

    mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            Intent intent1 = new Intent(this, SomeActivity.class);
            intent1.putExtras(intent.getExtras());
            startActivity(intent1);
        }
    };
    registerReceiver(mReceiver, filter);

    // Push Notification receiver
    LocalBroadcastManager.getInstance(this).registerReceiver(mRegistrationBroadcastReceiver,
            new IntentFilter("REGISTRATION_COMPLETE"));
}
</code></pre>

<p>Also, check the device tokens as well.</p>
