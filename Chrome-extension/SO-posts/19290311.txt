<p>I did it at last. :D
I don't what was the problem but with changing the <code>DatabaseHelper</code> and <code>Database Helper</code>class as below and changing input variable of functions used in this class to string, the problems had been eliminated.</p>

<p>here is the <code>DatabaseHelper</code> class:</p>

<pre><code>public class DatabaseHelper extends SQLiteOpenHelper {

    private final String TAG = "DatabaseHelper";
    private static final String DATABASE_NAME = "database"; 
    private static final int DATABASE_VERSION = 1;

    private static final String COLUMN_ID      = "_id";
    private static final String COLUMN_NAME    = "name";
    private static final String COLUMN_VALUE   = "value";
    private static final String COLUMN_VALUE2  = "value2";

    private static final String TABLE_NAME_1     = "table1db";
    private static final String CREATE_TABLE_1   = "CREATE TABLE " + TABLE_NAME_1 + " (" + 
        COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
        COLUMN_NAME + " INTEGER," +
        COLUMN_VALUE + " INTEGER," +
        COLUMN_VALUE2 + " TEXT" +
        ");";


    private static final String TABLE_NAME_2    = "table2db";
    private static final String CREATE_TABLE_2  = "CREATE TABLE " + TABLE_NAME_2 + " (" + 
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
            COLUMN_NAME + " INTEGER," +
            COLUMN_VALUE + " INTEGER," +
            COLUMN_VALUE2 + " TEXT" +
            ");";


    private static final String TABLE_NAME_3   = "table3db";
    private static final String CREATE_TABLE_3   = "CREATE TABLE " + TABLE_NAME_3 + " (" + 
            COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT," +
            COLUMN_NAME + " INTEGER," +
            COLUMN_VALUE + " INTEGER," +
                COLUMN_VALUE2 + " TEXT" +
            ");";



    @Override
    public void onCreate(SQLiteDatabase db) {

        db.execSQL(CREATE_TABLE_1); Log.i(TAG, "Table 1 created.");
        db.execSQL(CREATE_TABLE_2); Log.i(TAG, "Table 2 created.");
        db.execSQL(CREATE_TABLE_3); Log.i(TAG, "Table 3 created.");

    }

    public DatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        Log.i(TAG, "Object created.");
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        newVersion=oldVersion+1;
        Log.w(TAG, "Upgrading database from version " + oldVersion 
                + " to "
                + newVersion + ", which will destroy all old data");
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_1 + ";");
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_2 + ";");
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME_3 + ";");
        onCreate(db);
    }

    public String getTableName(String tableNumber) {

        return tableNumber;
    }

    public String getRowIdName(String tableNumber) {

        return COLUMN_ID;
    }
}
</code></pre>

<p>and the <code>Database Handler</code> class:</p>

<pre><code>public class DatabaseHandler {

    private final String TAG     = "DatabaseHandler";
    static final  String NAME    = "name";
    static final  String VALUE   = "value";
    static final  String VALUE2  = "value2";
    private DatabaseHelper dbHelper;
    private SQLiteDatabase database;

    public DatabaseHandler(Context context) {
        dbHelper = new DatabaseHelper(context);
        Log.i(TAG, "DatabaseHelper Object created.");
    }

    public void open() throws SQLException {
        database = dbHelper.getWritableDatabase();
    }

    public void close() {
        dbHelper.close();
    }

    public void insertCBox(String tableNumber, CBox checkBox) {
        ContentValues cv = new ContentValues();

        cv.put(NAME,  checkBox.getName());
        cv.put(VALUE, checkBox.getStatus());
        cv.put(VALUE2, checkBox.getText());
        database.insert(dbHelper.getTableName(tableNumber), null, cv);

        Log.i(TAG, "Contact added successfully.");
    }

    public void deleteCheckBox(String tableNumber, int id) {
        database.delete(dbHelper.getTableName(tableNumber), dbHelper.getRowIdName(tableNumber) + "=" + id, null);
    }

    public void updateCheckBox(String tableNumber, int id,int name,int state, String text) {

        ContentValues cv = new ContentValues();
        cv.put(NAME,  name);
        cv.put(VALUE, state);
        cv.put(VALUE2, text);
        database.update(dbHelper.getTableName(tableNumber), cv, dbHelper.getRowIdName(tableNumber) + "=" + id, null);
    }


    public CBox getCBox(String tableNumber, int id){
        Log.i(TAG, "getCBOX started");
        Cursor cursor = database.query(true,dbHelper.getTableName(tableNumber), null, null, null, null, null, null, null);
        Log.i(TAG, "cursor query done");
        cursor.moveToPosition(id-1);
        Log.i(TAG, "cursor is here: "+ cursor.getPosition());
//      cursor.moveToPosition(id--);
        Log.i(TAG, "cursor moved to position successfully "+ (id-1));
        CBox CBox = cursorToContact(cursor);
        Log.i(TAG, "cursor to contact done");
        cursor.close();
        Log.i(TAG, "cursor closed");
        return CBox;
    }


    public void clearTable(String tableNumber) {
        database.delete(dbHelper.getTableName(tableNumber), null, null);
    }


    private CBox cursorToContact(Cursor cursor) {
        CBox checkBox = new CBox();
        Log.i(TAG, "cursor to contact &gt; started");
        checkBox.setId(cursor.getInt(0));
        Log.i(TAG, "cursor to contact &gt; getInt(0) done " + checkBox.getId());
        checkBox.setName(cursor.getInt(1));
        Log.i(TAG, "cursor to contact &gt; getInt(1) done " + checkBox.getName());
        checkBox.setStatus(cursor.getInt(2));
        Log.i(TAG, "cursor to contact &gt; getInt(2) done " + checkBox.getStatus());
        checkBox.setText(cursor.getString(3));
        Log.i(TAG, "cursor to contact &gt; getString(3) done " + checkBox.getText());

        return checkBox;
    }

}
</code></pre>
