<p>Writing your own ClassLoader can be quite confusing, especially for a beginner. I recently needed to load some jars dynamically and found <a href="http://stackoverflow.com/questions/7039467/java-serviceloader-with-multiple-classloaders/7237152#7237152">this answer</a> very helpful. It explains how to use ResourceFinder, a class from Apache xbean or something. It's a single file that you can easily drop into your project.</p>

<p>Most advantageously for your situation, although <a href="http://svn.apache.org/repos/asf/geronimo/xbean/tags/xbean-3.7/xbean-finder/src/main/java/org/apache/xbean/finder/ResourceFinder.java" rel="nofollow">ResourceFinder</a> loads by URL, the <code>readContents</code> function (used to actually load up the jar file) looks like this:</p>

<pre><code>private String readContents(URL resource) throws IOException {
    InputStream in = resource.openStream();
    BufferedInputStream reader = null;
    StringBuilder sb = new StringBuilder();

    try {
        reader = new BufferedInputStream(in);

        int b = reader.read();
        while (b != -1) {
            sb.append((char) b);
            b = reader.read();
        }

        return sb.toString().trim();
    } finally {
        try {
            in.close();
            reader.close();
        } catch (Exception e) {
        }
    }
}
</code></pre>

<p>which could easily be modified to work on any Stream/blob you have.
Some minor changes to the class could, I'm sure, make it do exactly what you want, or at the very least point you in the right direction. Writing ClassLoaders from scratch is no fun.</p>

<p>EDIT:
  Y'know, I've just taken another look, and I'm not so sure that you could get away with only minor changes to ResourceFinder. Still, look it over, see what you can get from it.</p>
