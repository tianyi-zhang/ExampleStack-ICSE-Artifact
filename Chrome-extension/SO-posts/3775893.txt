<p>Pre-Java-7, using a library would have been the best choice.</p>

<p><s>
If you use <a href="http://commons.apache.org/io">Apache Commons IO</a> it's a one-liner:</p>

<pre><code>FileUtils.deleteDirectory(dir);
</code></pre>

<p>See <a href="http://commons.apache.org/proper/commons-io///apidocs/org/apache/commons/io/FileUtils.html#deleteDirectory%28java.io.File%29">FileUtils.deleteDirectory()</a>
</s></p>

<hr>

<p><s>
<a href="http://code.google.com/p/guava-libraries">Guava</a> used to support similar functionality:</p>

<pre><code>Files.deleteRecursively(dir);
</code></pre>

<p></s>
This has been removed from Guava several releases ago.</p>

<hr>

<p>Ever since Java 7, this is the preferred way to do it:</p>

<pre><code>public static void deleteFileOrFolder(final Path path) throws IOException {
  Files.walkFileTree(path, new SimpleFileVisitor&lt;Path&gt;(){
    @Override public FileVisitResult visitFile(final Path file, final BasicFileAttributes attrs)
      throws IOException {
      Files.delete(file);
      return CONTINUE;
    }

    @Override public FileVisitResult visitFileFailed(final Path file, final IOException e) {
      return handleException(e);
    }

    private FileVisitResult handleException(final IOException e) {
      e.printStackTrace(); // replace with more robust error handling
      return TERMINATE;
    }

    @Override public FileVisitResult postVisitDirectory(final Path dir, final IOException e)
      throws IOException {
      if(e!=null)return handleException(e);
      Files.delete(dir);
      return CONTINUE;
    }
  });
};
</code></pre>
