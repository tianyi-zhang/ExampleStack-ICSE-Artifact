<p>Actually what is done in that docs provided code snippet is that they take data from accelerometer(which contains both gravity and linear acceleration) and filter it. So how it basically works, we take raw data and assume that gravity vector is something constant and cannot change very quickly, opposite to linear acceleration, which changes really fast. So let's say if we take 80% of past counted gravity vector and add 20% of raw data we filter fast linear acceleration peaks and get gravity vector. If we remove gravity vector from raw data we get linear acceleration without gravity. Google for exponential filter for more information. Here you can play with it <a href="http://copterpilot.ru/custom-app/exponential/" rel="nofollow">http://copterpilot.ru/custom-app/exponential/</a>.
So you can easily initialize your global gravity array of floats with zeros and wait a little for filtered data. Here is code snippet</p>

<pre><code>public class MainActivity extends AppCompatActivity implements SensorEventListener {
private float[] gravity = new float[3];
private float[] linear_acceleration = new float[3];

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    SensorManager mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
    Sensor mAccelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
    mSensorManager.registerListener(this, mAccelerometer, SensorManager.SENSOR_DELAY_NORMAL);
}

@Override
public void onSensorChanged(SensorEvent event) {
    // alpha is calculated as t / (t + dT)
    // with t, the low-pass filter's time-constant
    // and dT, the event delivery rate

    final float alpha = 0.8f;

    gravity[0] = alpha * gravity[0] + (1 - alpha) * event.values[0];
    gravity[1] = alpha * gravity[1] + (1 - alpha) * event.values[1];
    gravity[2] = alpha * gravity[2] + (1 - alpha) * event.values[2];

    linear_acceleration[0] = event.values[0] - gravity[0];
    linear_acceleration[1] = event.values[1] - gravity[1];
    linear_acceleration[2] = event.values[2] - gravity[2];
}  
}
</code></pre>
