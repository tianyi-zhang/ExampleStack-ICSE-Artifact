<p><strong>Question 1</strong></p>

<p>I don't like JSONP, so in my opinion your better choice is to make your Proejct A server a proxy for your Project B.</p>

<p>For example, if you're using NodeJS and Express to serve Project A requests, you can redirect all <code>/api</code> requests to your Project B as follows:</p>

<pre><code>app.use('/api', function (req, res) {

    req
        .pipe(request('https://projectB.com/' + req.url))
        .pipe(res);
});
</code></pre>

<p>So your NodeJS will handle all request made from the browser except those ones that ends in <code>/api</code>.</p>

<p>Another option is to configure your Project B server to send CORS headers in each request.</p>

<p>For example, if you're using Java, you can create a servlet filter that adds these headers:</p>

<pre><code>@Component
public class SimpleCORSFilter implements Filter {

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletResponse response = (HttpServletResponse) res;
        response.setHeader("Access-Control-Allow-Origin", "*");//Instead of '*' use your own domain!
        response.setHeader("Access-Control-Allow-Methods", "POST, GET, PUT, OPTIONS, DELETE");
        response.setHeader("Access-Control-Max-Age", "3600");
        response.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
        chain.doFilter(req, res);
    }

    public void init(FilterConfig filterConfig) {}

    public void destroy() {}

}
</code></pre>

<p><strong>Question 2</strong>
I think OAuth 2.0 seems to be the best choice in your current situation.</p>

<p>You should not store user password in your Project A application. Instead of storing passwords, your javascript application should store an access token, that will be used to access REST endpoints.</p>

<p>Besides avoiding security risk, by using token base authentication you can prevent a lot of headaches when your users change their passwords.</p>

<p>Furthermore you can use HTML 5 Session storage to store the access token (as well as the refresh token), because this information will be deleted when the user closes the browser and only the tabs loaded from your application domain can access this data.</p>

<p>If you finally choose token based authentication, you can code your own implementation to generate that token, but I think it's much better to use a well-known implementation. Moreover, there are a lot of frameworks that implements OAuth authentication in your server side in many languages: Java, python, Node, etc...</p>

<p>If you're using Java, take a look at some examples <a href="https://github.com/jfcorugedo/spring-oauth2-samples" rel="nofollow">here</a> using Spring OAuth.</p>

<p>The question now is Which authorization flow do you prefer?</p>

<p>OAuth provides a few different authorization flows. Based on the information you've provided, I think the best choice would be <em>Resource owner password-based grant</em>, because your users will trust your javascript application (Project A), so they will be confortable giving their credentials directly to your application.</p>

<p><strong>Note</strong>: If you finally choose OAuth 2, make sure all your requests will get to server using HTTPS, because OAuth 2 doesn't include anything about cipher, because it assume your connections always use SSL.</p>
