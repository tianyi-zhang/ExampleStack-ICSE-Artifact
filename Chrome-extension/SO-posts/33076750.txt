<p>To do that you should use GridView,it would be best option. try the below sample code.
Step-1 add the gridview in your drag.xml</p>

<pre><code>&lt;GridView
        android:id="@+id/grid"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@+id/edt"
        android:numColumns="2"
        android:stretchMode="columnWidth" &gt;
    &lt;/GridView&gt; 
</code></pre>

<p>Step-2 Declare the variables and get the grid view reference.</p>

<pre><code>GridView gridview;
     Integer[] drawableIds = { R.drawable.poster1, R.drawable.poster2, R.drawable.poster3, R.drawable.poster4,
            R.drawable.poster5 };
    String[] colorNames = { "poster one", "poster two", "poster three", "poster four", "poster five" };
</code></pre>

<p>//In OnCreate() method add</p>

<pre><code>gridview = (GridView) findViewById(R.id.grid);
        gridview.setAdapter(new CustomGridAdapter(this, drawableIds, colorNames));
        gridview.setOnItemClickListener(new OnItemClickListener() {
            public void onItemClick(AdapterView&lt;?&gt; parent, View v, int position, long id) {

                Toast.makeText(Main.this, "" + position, Toast.LENGTH_LONG).show();
            }
        });
</code></pre>

<p>Step-3 create a class for grid adapter CustomGridAdapter.class</p>

<pre><code>public class CustomGridAdapter extends BaseAdapter {

    private Context context;
    private Integer[] drawableitems;
    private String[] drawablelabel;

    public CustomGridAdapter(Context context, Integer[] drawableitems, String[] drawablelabel) {

        this.context = context;
        this.drawablelabel = drawablelabel;
        this.drawableitems = drawableitems;

    }

    @Override
    public int getCount() {
        return drawableitems.length;
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    public View getView(int position, View convertView, ViewGroup parent) {

        RecordHolder holder = null;

        if (convertView == null) {

            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            holder = new RecordHolder();
            convertView = inflater.inflate(R.layout.grid_item, null);
            holder.txtTitle = (TextView) convertView.findViewById(R.id.grid_item_label);

            holder.imageItem = (ImageView) convertView.findViewById(R.id.grid_item_image);

            convertView.setTag(holder);

        } else {
            holder = (RecordHolder) convertView.getTag();
        }

        holder.txtTitle.setText(drawablelabel[position]);
        holder.imageItem.setImageResource(drawableitems[position]);
        return convertView;
    }

    static class RecordHolder {
        TextView txtTitle;
        ImageView imageItem;

    }
}
</code></pre>

<p>Add custom view for grid grid_item.xml in layout folder.</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/llback"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:orientation="vertical" &gt;

    &lt;ImageView
        android:id="@+id/grid_item_image"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_gravity="center" &gt;
    &lt;/ImageView&gt;

    &lt;TextView
        android:id="@+id/grid_item_label"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="center_horizontal"
        android:gravity="center_horizontal"
        android:textColor="@android:color/black"
        android:textSize="18sp"
        android:textStyle="bold" &gt;
    &lt;/TextView&gt;

&lt;/LinearLayout&gt;
</code></pre>

<p>Hope it will help you.</p>
