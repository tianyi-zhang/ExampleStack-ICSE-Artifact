<p>that function does not give you the ability to keep the aspect ratio or even something of that what you think. It does just disables the possebilty to resize the screen at the desktop application.  </p>

<p>Please take a look at the libGDX wiki especialy the <a href="http://code.google.com/p/libgdx/wiki/scene2d" rel="nofollow">Scene2D</a> page.
Take a look at the <strong>Viewport</strong> stuff from the Stage. It's explained how you do keep the aspect ratio with the current libGDX. There are tutorials out there who do explain a different way with the help of a virtual resolution and the screen resize method. It's outdate!</p>

<p>from the wiki</p>

<blockquote>
  <p>This example also uses a fixed stage size with "black bars" on either
  side, this time using glViewport. First the stage size of 800x480 is
  scaled to fit the screen size using the Scaling class. The result is
  used to configure glViewport, which changes which part of the screen
  OpenGL will use. Lastly, setViewport is passed the viewport position
  and size. The result is the same as the last example, the stage has
  "black bars" as necessary to keep the aspect ratio, but no drawing can
  occur outside the viewport.</p>
</blockquote>

<pre><code>public void resize (int width, int height) {
        Vector2 size = Scaling.fit.apply(800, 480, width, height);
        int viewportX = (int)(width - size.x) / 2;
        int viewportY = (int)(height - size.y) / 2;
        int viewportWidth = (int)size.x;
        int viewportHeight = (int)size.y;
        Gdx.gl.glViewport(viewportX, viewportY, viewportWidth, viewportHeight);
        stage.setViewport(800, 480, true, viewportX, viewportY, viewportWidth, viewportHeight);
}
</code></pre>

<p>regards</p>
