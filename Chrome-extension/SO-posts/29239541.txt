<p>pressBack solution does not worked for me but I found another:</p>

<pre><code>@Override
protected void tearDown() throws Exception {
    closeAllActivities(getInstrumentation());
    super.tearDown();
}

public static void closeAllActivities(Instrumentation instrumentation) throws Exception {
    final int NUMBER_OF_RETRIES = 100;
    int i = 0;
    while (closeActivity(instrumentation)) {
        if (i++ &gt; NUMBER_OF_RETRIES) {
            throw new AssertionError("Limit of retries excesses");
        }
        Thread.sleep(200);
    }
}

public static &lt;X&gt; X callOnMainSync(Instrumentation instrumentation, final Callable&lt;X&gt; callable) throws Exception {
    final AtomicReference&lt;X&gt; retAtomic = new AtomicReference&lt;&gt;();
    final AtomicReference&lt;Throwable&gt; exceptionAtomic = new AtomicReference&lt;&gt;();
    instrumentation.runOnMainSync(new Runnable() {
        @Override
        public void run() {
            try {
                retAtomic.set(callable.call());
            } catch (Throwable e) {
                exceptionAtomic.set(e);
            }
        }
    });
    final Throwable exception = exceptionAtomic.get();
    if (exception != null) {
        Throwables.propagateIfInstanceOf(exception, Exception.class);
        Throwables.propagate(exception);
    }
    return retAtomic.get();
}

public static Set&lt;Activity&gt; getActivitiesInStages(Stage... stages) {
    final Set&lt;Activity&gt; activities = Sets.newHashSet();
    final ActivityLifecycleMonitor instance = ActivityLifecycleMonitorRegistry.getInstance();
    for (Stage stage : stages) {
        final Collection&lt;Activity&gt; activitiesInStage = instance.getActivitiesInStage(stage);
        if (activitiesInStage != null) {
            activities.addAll(activitiesInStage);
        }
    }
    return activities;
}

private static boolean closeActivity(Instrumentation instrumentation) throws Exception {
    final Boolean activityClosed = callOnMainSync(instrumentation, new Callable&lt;Boolean&gt;() {
        @Override
        public Boolean call() throws Exception {
            final Set&lt;Activity&gt; activities = getActivitiesInStages(Stage.RESUMED,
                    Stage.STARTED, Stage.PAUSED, Stage.STOPPED, Stage.CREATED);
            activities.removeAll(getActivitiesInStages(Stage.DESTROYED));
            if (activities.size() &gt; 0) {
                final Activity activity = activities.iterator().next();
                activity.finish();
                return true;
            } else {
                return false;
            }
        }
    });
    if (activityClosed) {
        instrumentation.waitForIdleSync();
    }
    return activityClosed;
}
</code></pre>
