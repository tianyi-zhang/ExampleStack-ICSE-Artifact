<p>You could extend ListView and override the method onTouchEvent(MotionEvent ev).</p>

<p>Then, you do the logic intercept the event and don't pass it to the ListView if the user is trying to scroll in a part of the scroll you don't want them to.</p>

<p>It's pretty hard to do. Maybe there's another easier way.</p>

<p>Anyway, here is an example:</p>

<pre><code>@Override
public boolean onTouchEvent(MotionEvent ev) {

    final int action = ev.getAction();
    final int x = (int) ev.getX();
    final int y = (int) ev.getY();

    if (action == MotionEvent.ACTION_DOWN &amp;&amp; x &lt; getWidth() / 7 &amp;&amp; (selectableFromTheBeginning || actionMode != null)) {
        selectionMode = true;
        startPosition = pointToPosition(x, y);
    }
    if (!selectionMode){
        return super.onTouchEvent(ev);
    }

    switch (action) {
        case MotionEvent.ACTION_DOWN:
            break;
        case MotionEvent.ACTION_MOVE:
            if (pointToPosition(x, y) != startPosition)
                selectionMode = false;
            break;
        case MotionEvent.ACTION_CANCEL:
        case MotionEvent.ACTION_UP:
        default:
            selectionMode = false;

            int itemPosition = pointToPosition(x, y);
            if (startPosition != ListView.INVALID_POSITION &amp;&amp; isSelectable(itemPosition)){
                setItemChecked(itemPosition, !isItemChecked(itemPosition));
            }

    }

    return true;
}
</code></pre>

<p>With this implementation, I'm doing some logic to let the user select an element of the ListView just clicking in the left part of the item. If you don't find another way, you could try to understand how to implement this method.</p>

<p>But I give you an advice: you shouldn't break the user experience this way. The users will try to scroll your ListView the normal way and they won't understand what you're trying to do. I wouldn't recommend you to do this.</p>
