<p><code>cout</code> is essentially the same as <code>stdout</code> but the difference is that <code>cout</code> is of type <code>ostream</code> (which essentially means that you can enter formatted data using <code>&lt;&lt;</code> or unformatted data with the <code>write</code> method.</p>

<p><code>stdout</code> is attached to a file descriptor (stdout is a <code>FILE*</code>). <code>stdout</code> file descriptor is <code>1</code>. Because it returns a reference to a file descriptor, it can be used in <code>fputs</code> and <code>fprintf</code>.</p>

<p>Java <code>System.out</code> is essentially like <code>stdout</code> (it uses <code>java.io.FileDescriptor</code> with handle <code>1</code>) and passed into <code>FileOutputStream</code> and finally wrapped inside <code>BufferedOutputStream</code>.</p>

<p>This is how <code>java.lang.System</code> is initialized:</p>

<pre><code> /**
     * Initialize the system class.  Called after thread initialization.
     */
    private static void initializeSystemClass() {
    props = new Properties();
    initProperties(props);
    sun.misc.Version.init();

        // Workaround until DownloadManager initialization is revisited.
        // Make JavaLangAccess available early enough for internal
        // Shutdown hooks to be registered
        setJavaLangAccess();

        // Gets and removes system properties that configure the Integer
        // cache used to support the object identity semantics of autoboxing.
        // At this time, the size of the cache may be controlled by the
        // vm option -XX:AutoBoxCacheMax=&lt;size&gt;.
        Integer.getAndRemoveCacheProperties();

    // Load the zip library now in order to keep java.util.zip.ZipFile
    // from trying to use itself to load this library later.
    loadLibrary("zip");

    FileInputStream fdIn = new FileInputStream(FileDescriptor.in);
    FileOutputStream fdOut = new FileOutputStream(FileDescriptor.out);
    FileOutputStream fdErr = new FileOutputStream(FileDescriptor.err);
    setIn0(new BufferedInputStream(fdIn));
    setOut0(new PrintStream(new BufferedOutputStream(fdOut, 128), true));
    setErr0(new PrintStream(new BufferedOutputStream(fdErr, 128), true));

    // Setup Java signal handlers for HUP, TERM, and INT (where available).
        Terminator.setup();

        // Initialize any miscellenous operating system settings that need to be
        // set for the class libraries. Currently this is no-op everywhere except
        // for Windows where the process-wide error mode is set before the java.io
        // classes are used.
        sun.misc.VM.initializeOSEnvironment();

    // Set the maximum amount of direct memory.  This value is controlled
    // by the vm option -XX:MaxDirectMemorySize=&lt;size&gt;.  This method acts
    // as an initializer only if it is called before sun.misc.VM.booted().
    sun.misc.VM.maxDirectMemory();

    // Set a boolean to determine whether ClassLoader.loadClass accepts
    // array syntax.  This value is controlled by the system property
    // "sun.lang.ClassLoader.allowArraySyntax".  This method acts as
    // an initializer only if it is called before sun.misc.VM.booted().
    sun.misc.VM.allowArraySyntax();

    // Subsystems that are invoked during initialization can invoke
    // sun.misc.VM.isBooted() in order to avoid doing things that should
    // wait until the application class loader has been set up.
    sun.misc.VM.booted();

        // The main thread is not added to its thread group in the same
        // way as other threads; we must do it ourselves here.
        Thread current = Thread.currentThread();
        current.getThreadGroup().add(current);
    }
</code></pre>

<p><code>FileDescriptor.out</code> is:</p>

<pre><code>/**
 * A handle to the standard output stream. Usually, this file
 * descriptor is not used directly, but rather via the output stream
 * known as &lt;code&gt;System.out&lt;/code&gt;.
 * @see     java.lang.System#out
 */
public static final FileDescriptor out = standardStream(1);
</code></pre>

<p><strong>Source</strong>:</p>

<ul>
<li><a href="http://www.cplusplus.com/reference/iostream/cout/" rel="nofollow">cout</a></li>
<li><a href="http://www.cplusplus.com/reference/clibrary/cstdio/stdout/" rel="nofollow">stdout</a></li>
<li><a href="http://en.wikipedia.org/wiki/Standard_streams" rel="nofollow">Wikipedia</a> on <code>System.out</code>, <code>cout</code> and <code>stdout</code></li>
</ul>
