<blockquote>
  <p>Always use <code>@Override</code> whenever you are overriding a method of super
  class, if you do, compiler will inform you when you do some wrong in
  implementation.</p>
</blockquote>

<p>The error message <strong>wrong return data type</strong> which compiler says is correct, your <code>sum</code> is of type <code>BigInteger</code> not <code>Integer</code>.</p>

<ul>
<li><code>Integer</code> is a wrapper of the primitive type <code>int</code>. So JVM will perform boxing and unboxing.</li>
<li><code>BigInteger</code> is a reference type, JVM will not perform boxing and unboxing here.</li>
</ul>

<p>Solution:</p>

<pre><code>@Override
public int hashCode() {
    int hash = 3;       
    hash = 53 * hash
            + ((effectiveTime == null) ? 0 : effectiveTime.hashCode());
    hash = 53 * hash + ((id == null) ? 0 : id.hashCode());
    return hash;
}

@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (obj == null)
        return false;
    if (getClass() != obj.getClass())
        return false;
    final ConceptPK other = (ConceptPK) obj;
    if (effectiveTime == null) {
        if (other.effectiveTime != null)
            return false;
    } else if (!effectiveTime.equals(other.effectiveTime))
        return false;
    if (id == null) {
        if (other.id != null)
            return false;
    } else if (!id.equals(other.id))
        return false;
    return true;
}
</code></pre>
