<p>The common way of <strong>calculating the similarity between two strings in a 0%-100% fashion</strong>, as used in many libraries, is to measure how much (in %) you'd have to change the longer string to turn it into the shorter:</p>

<pre><code>/**
 * Calculates the similarity (a number within 0 and 1) between two strings.
 */
public static double similarity(String s1, String s2) {
  String longer = s1, shorter = s2;
  if (s1.length() &lt; s2.length()) { // longer should always have greater length
    longer = s2; shorter = s1;
  }
  int longerLength = longer.length();
  if (longerLength == 0) { return 1.0; /* both strings are zero length */ }
  return (longerLength - editDistance(longer, shorter)) / (double) longerLength;
}
// you can use StringUtils.getLevenshteinDistance() as the editDistance() function
// full copy-paste working code is below
</code></pre>

<p><br></p>

<h3>Computing the <code>editDistance()</code>:</h3>

<p>The <code>editDistance()</code> function above is expected to calculate the <strong>edit distance</strong> between the two strings. There are <a href="http://en.wikipedia.org/wiki/String_metric">several implementations</a> to this step, each may suit a specific scenario better. The most common is the <strong><em><a href="http://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance algorithm</a></em></strong> and we'll use it in our example below (for very large strings, other algorithms are likely to perform better).</p>

<p>Here's two options to calculate the edit distance:</p>

<ul>
<li>You can use <strong><a href="http://commons.apache.org/proper/commons-lang/">Apache Commons Lang</a></strong>'s implementation of Levenshtein distance:
                   <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-3.3.2/org/apache/commons/lang3/StringUtils.html#getLevenshteinDistance(java.lang.CharSequence,%20java.lang.CharSequence)"><code>StringUtils.getLevenshteinDistance(CharSequence s, CharSequence t)</code></a></li>
<li>Implement it in your own. Below you'll find an example implementation.</li>
</ul>

<p><br></p>

<h3>Working example:</h3>

<p><a href="http://ideone.com/oOVWYj"><strong>See online demo here.</strong></a></p>

<pre><code>public class StringSimilarity {

  /**
   * Calculates the similarity (a number within 0 and 1) between two strings.
   */
  public static double similarity(String s1, String s2) {
    String longer = s1, shorter = s2;
    if (s1.length() &lt; s2.length()) { // longer should always have greater length
      longer = s2; shorter = s1;
    }
    int longerLength = longer.length();
    if (longerLength == 0) { return 1.0; /* both strings are zero length */ }
    /* // If you have StringUtils, you can use it to calculate the edit distance:
    return (longerLength - StringUtils.getLevenshteinDistance(longer, shorter)) /
                               (double) longerLength; */
    return (longerLength - editDistance(longer, shorter)) / (double) longerLength;

  }

  // Example implementation of the Levenshtein Edit Distance
  // See http://rosettacode.org/wiki/Levenshtein_distance#Java
  public static int editDistance(String s1, String s2) {
    s1 = s1.toLowerCase();
    s2 = s2.toLowerCase();

    int[] costs = new int[s2.length() + 1];
    for (int i = 0; i &lt;= s1.length(); i++) {
      int lastValue = i;
      for (int j = 0; j &lt;= s2.length(); j++) {
        if (i == 0)
          costs[j] = j;
        else {
          if (j &gt; 0) {
            int newValue = costs[j - 1];
            if (s1.charAt(i - 1) != s2.charAt(j - 1))
              newValue = Math.min(Math.min(newValue, lastValue),
                  costs[j]) + 1;
            costs[j - 1] = lastValue;
            lastValue = newValue;
          }
        }
      }
      if (i &gt; 0)
        costs[s2.length()] = lastValue;
    }
    return costs[s2.length()];
  }

  public static void printSimilarity(String s, String t) {
    System.out.println(String.format(
      "%.3f is the similarity between \"%s\" and \"%s\"", similarity(s, t), s, t));
  }

  public static void main(String[] args) {
    printSimilarity("", "");
    printSimilarity("1234567890", "1");
    printSimilarity("1234567890", "123");
    printSimilarity("1234567890", "1234567");
    printSimilarity("1234567890", "1234567890");
    printSimilarity("1234567890", "1234567980");
    printSimilarity("47/2010", "472010");
    printSimilarity("47/2010", "472011");
    printSimilarity("47/2010", "AB.CDEF");
    printSimilarity("47/2010", "4B.CDEFG");
    printSimilarity("47/2010", "AB.CDEFG");
    printSimilarity("The quick fox jumped", "The fox jumped");
    printSimilarity("The quick fox jumped", "The fox");
    printSimilarity("kitten", "sitting");
  }

}
</code></pre>

<p><strong>Output:</strong></p>

<pre><code>1.000 is the similarity between "" and ""
0.100 is the similarity between "1234567890" and "1"
0.300 is the similarity between "1234567890" and "123"
0.700 is the similarity between "1234567890" and "1234567"
1.000 is the similarity between "1234567890" and "1234567890"
0.800 is the similarity between "1234567890" and "1234567980"
0.857 is the similarity between "47/2010" and "472010"
0.714 is the similarity between "47/2010" and "472011"
0.000 is the similarity between "47/2010" and "AB.CDEF"
0.125 is the similarity between "47/2010" and "4B.CDEFG"
0.000 is the similarity between "47/2010" and "AB.CDEFG"
0.700 is the similarity between "The quick fox jumped" and "The fox jumped"
0.350 is the similarity between "The quick fox jumped" and "The fox"
0.571 is the similarity between "kitten" and "sitting"
</code></pre>
