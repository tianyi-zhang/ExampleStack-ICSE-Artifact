<p>If you are on the latest ADT plugin, there is an option to easily create a preference Activity that supports most older Android versions as well as all the new ones. </p>

<blockquote>
  <p>Right click on your project -> Other -> Android Activity</p>
</blockquote>

<p>Then choose SettingsActivity
<img src="http://i.stack.imgur.com/GLpdp.png" alt="enter image description here"></p>

<p>The Activity created will take take care of working with both high and low API versions since it uses if statements to choose the appropriate method of displaying the preferences.</p>

<hr>

<p><strong>EDIT</strong> <br>
A good point was brought up: Phone-Sized devices, regardless of API version use the old <code>PreferenceActivity</code> methods. </p>

<p>The quickest way to get API 11+ devices to use <code>Fragments</code> is to remove <code>!isXLargeTablet(context);</code> from <code>isSimplePreferences()</code></p>

<pre><code>private static boolean isSimplePreferences(Context context) {
    return ALWAYS_SIMPLE_PREFS
            || Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB;
}
</code></pre>

<p>However, now the user has more navigation to do.<br>
<img src="http://i.stack.imgur.com/b2ofzm.png" alt="Headers as root"></p>

<p>This is because <code>onBuildHeaders()</code> is called.</p>

<p>To get rid of this, we will need to make our own PreferenceFragment that adds each xml resource.</p>

<pre><code>@TargetApi(Build.VERSION_CODES.HONEYCOMB)
    public static class AllPreferencesFragment extends PreferenceFragment{
        @Override
        public void onCreate (Bundle savedInstanceState){
            super.onCreate(savedInstanceState);
            addPreferencesFromResource(R.xml.pref_general);

            // Add 'notifications' preferences, and a corresponding header.
            PreferenceCategory fakeHeader = new PreferenceCategory(getActivity());
            fakeHeader.setTitle(R.string.pref_header_notifications);
            getPreferenceScreen().addPreference(fakeHeader);
            addPreferencesFromResource(R.xml.pref_notification);

            // Add 'data and sync' preferences, and a corresponding header.
            fakeHeader = new PreferenceCategory(getActivity());
            fakeHeader.setTitle(R.string.pref_header_data_sync);
            getPreferenceScreen().addPreference(fakeHeader);
            addPreferencesFromResource(R.xml.pref_data_sync);

            // Bind the summaries of EditText/List/Dialog/Ringtone preferences to
            // their values. When their values change, their summaries are updated
            // to reflect the new value, per the Android Design guidelines.
            bindPreferenceSummaryToValue(findPreference("example_text"));
            bindPreferenceSummaryToValue(findPreference("example_list"));
            bindPreferenceSummaryToValue(findPreference("notifications_new_message_ringtone"));
            bindPreferenceSummaryToValue(findPreference("sync_frequency"));
        }
    }
</code></pre>

<p>If you can determine the screen size from outside the <code>Activity</code> that launches the settings, you can specify a fragment for it to launch via <code>EXTRA_SHOW_FRAGMENT</code></p>

<pre><code>i.putExtra(SettingsActivity.EXTRA_SHOW_FRAGMENT, "com.example.test.SettingsActivity$AllPreferencesFragment");
</code></pre>

<p>Or you can have the <code>SettingsActivity</code> determine whether or not to show this Fragment (assuming you're happy with the <code>isXLargeTablet()</code> method.</p>

<p>Change <code>onBuildHeaders()</code> to:</p>

<pre><code>@Override
@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public void onBuildHeaders(List&lt;Header&gt; target) {
    if (!isSimplePreferences(this) &amp;&amp; isXLargeTablet(this)) {
        loadHeadersFromResource(R.xml.pref_headers, target);
    }
}
</code></pre>

<p>Add this method:</p>

<pre><code>@TargetApi(Build.VERSION_CODES.HONEYCOMB)
private void setupNewApiPhoneSizePreferences() {
    if (!isXLargeTablet(this) &amp;&amp; Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.HONEYCOMB){
            getFragmentManager().beginTransaction().replace(android.R.id.content, new AllPreferencesFragment()).commit();
    }
}
</code></pre>

<p>And in <code>onPostCreate()</code> add the method call.</p>

<pre><code>setupNewApiPhoneSizePreferences();
</code></pre>

<p>This should now use non-deprecated calls from API 11 onwards.</p>
