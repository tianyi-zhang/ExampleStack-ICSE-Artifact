<p>Of what i've seen of @Patrik's solution and @Zac's addition, the code provided still has a big problem :</p>

<p>If <code>min==3</code> then it's impossible to type any number starting with 1 or 2 (ex: 15, 23)<br>
If <code>min&gt;=10</code> then it's impossible to type anything as every number will have to start with 1,2,3...</p>

<p>In my understanding we cannot achieve the min-max limitation of an <code>EditText</code>'s value with simple use of the class <code>InputFilterMinMax</code>, at least not for the min Value, because when user is typing a positive number, the value goes growing and we can easily perform an on-the-fly test to check if it's reached the limit or went outside the range and block entries that do not comply. Testing the min value is a different story as we cannot be sure if the user has finished typing or not and therefore cannot decide if we should block or not.</p>

<p>It's not exactly what OP requested but for validation purposes i've combined in my solution an <code>InputFilter</code> to test max values, with an <code>OnFocusChangeListener</code> to re-test for min value when the <code>EditText</code> loses the focus assuming the user's finished typing and it's something like this :</p>

<pre><code>package test;


import android.text.InputFilter;

import android.text.Spanned;

public class InputFilterMax implements InputFilter {

private int max;

public InputFilterMax(int max) {
    this.max = max;
}

public InputFilterMax(String max) {
    this.max = Integer.parseInt(max);
}

@Override
public CharSequence filter(CharSequence source, int start, int end, Spanned dest, int dstart, int dend) {   
    try {
        String replacement = source.subSequence(start, end).toString(); 

        String newVal = dest.toString().substring(0, dstart) + replacement +dest.toString().substring(dend, dest.toString().length());

        int input = Integer.parseInt(newVal);

        if (input&lt;=max)
            return null;
    } catch (NumberFormatException nfe) { }   
//Maybe notify user that the value is not good      
return "";
}
}
</code></pre>

<p>And <code>OnFocusChangeListenerMin</code> </p>

<pre><code>package test;

import android.text.TextUtils;
import android.view.View;
import android.view.View.OnFocusChangeListener;

public class OnFocusChangeListenerMin implements OnFocusChangeListener {

private int min;

public OnFocusChangeListenerMin(int min) {
    this.min = min;
}

public OnFocusChangeListenerMin(String min) {
    this.min = Integer.parseInt(min);
}


@Override
public void onFocusChange(View v, boolean hasFocus) {
    if(!hasFocus) {
        String val = ((EditText)v).getText().toString();
        if(!TextUtils.isEmpty(val)){
            if(Integer.valueOf(val)&lt;min){
                //Notify user that the value is not good
            }

        }
    }
}
}
</code></pre>

<p>Then in Activity set the <code>InputFilterMax</code> and the<code>OnFocusChangeListenerMin</code> to <code>EditText</code> 
note : You can 2 both min and max in <code>onFocusChangeListener</code>.</p>

<pre><code>mQteEditText.setOnFocusChangeListener( new OnFocusChangeListenerMin('20');
mQteEditText.setFilters(new InputFilter[]{new InputFilterMax(getActivity(),'50')});
</code></pre>
