<p>I tried for a couple of hours to get this working with a bundle to get data to the NavigationDrawerFragment, and was not successful.  I was getting the same errors that you are getting.</p>

<p>However, I realized that since you have a reference to <code>mNavigationDrawerFragment</code>, there is no need to use a bundle to pass data.</p>

<p>I was able to just add a parameter to <code>setUp()</code> and pass an <code>ArrayList</code> that way.</p>

<p>MainActivity.java:</p>

<pre><code>@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mNavigationDrawerFragment = (NavigationDrawerFragment)
                getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
        mTitle = getTitle();

        ArrayList&lt;String&gt; menuItems = new ArrayList&lt;String&gt;();
        menuItems.add("Test");
        menuItems.add("Test2");
        menuItems.add("TestThree");

        // Set up the drawer.
        mNavigationDrawerFragment.setUp(
                R.id.navigation_drawer,
                (DrawerLayout) findViewById(R.id.drawer_layout), menuItems);

    }
</code></pre>

<p>NavigationDrawerFragment.java:</p>

<pre><code> public void setUp(int fragmentId, DrawerLayout drawerLayout, ArrayList&lt;String&gt; array) {
        mFragmentContainerView = getActivity().findViewById(fragmentId);
        mDrawerLayout = drawerLayout;

        Log.i("NavTesting", array.toString());

        // set a custom shadow that overlays the main content when the drawer opens
        mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
        // set up the drawer's list view with items and click listener

        ActionBar actionBar = getActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
        actionBar.setHomeButtonEnabled(true);

       //......
</code></pre>

<p>It successfully logged the array passed in:</p>

<pre><code>04-02 18:11:30.680  17274-17274/com.fragmentarraylist.daniel.myapplication I/NavTesting? [Test, Test2, TestThree]
</code></pre>

<p>Then, if you want to update data in the NavigationDrawer at times other than initialization, you can add a function to update the data.</p>

<p>In NavigationDrawerFragment.java:</p>

<pre><code>public class NavigationDrawerFragment extends Fragment {

    private ArrayList&lt;String&gt; mArray;

    //......

    public void updateArray(ArrayList&lt;String&gt; array){

        Log.i("NavTesting", array.toString());

        mArray = array;

    }

    //......

    private void selectItem(int position) {

        if (mArray != null){
             Log.i("NavTestingSelectItem", mArray.toString());
        }


        mCurrentSelectedPosition = position;
        if (mDrawerListView != null) {
            mDrawerListView.setItemChecked(position, true);
        }
        if (mDrawerLayout != null) {
            mDrawerLayout.closeDrawer(mFragmentContainerView);
        }
        if (mCallbacks != null) {
            mCallbacks.onNavigationDrawerItemSelected(position);
        }
    }
</code></pre>

<p>In MainActivity.java:</p>

<pre><code>public void onSectionAttached(int number) {
        ArrayList&lt;String&gt; menuItems = new ArrayList&lt;String&gt;();
        switch (number) {
            case 1:
                mTitle = getString(R.string.title_section1);
                menuItems.add(mTitle.toString());
                mNavigationDrawerFragment.updateArray(menuItems);
                break;
            case 2:
                mTitle = getString(R.string.title_section2);
                menuItems.add(mTitle.toString());
                mNavigationDrawerFragment.updateArray(menuItems);
                break;
            case 3:
                mTitle = getString(R.string.title_section3);
                menuItems.add(mTitle.toString());
                mNavigationDrawerFragment.updateArray(menuItems);
                break;
        }
    }
</code></pre>

<p>After running and clicking on the different Drawer selections:</p>

<pre><code>04-03 07:31:13.529    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTesting? [Test, Test2, TestThree]
04-03 07:31:13.539    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTesting? [Section 1]
04-03 07:31:18.874    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTestingSelectItem? [Section 1]
04-03 07:31:18.884    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTesting? [Section 2]
04-03 07:31:27.963    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTestingSelectItem? [Section 2]
04-03 07:31:27.973    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTesting? [Section 3]
04-03 07:31:33.829    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTestingSelectItem? [Section 3]
04-03 07:31:33.839    9397-9397/com.fragmentarraylist.daniel.myapplication I/NavTesting? [Section 1]
</code></pre>

<p>Update:  I just tested this and it looks like it works, just move the call to <code>setAdapter()</code> to the <code>setUp()</code> function in order to populate the Navigation Drawer menu with the <code>ArrayList</code>.</p>

<pre><code>public void setUp(int fragmentId, DrawerLayout drawerLayout, ArrayList&lt;String&gt; array) {
    mFragmentContainerView = getActivity().findViewById(fragmentId);
    mDrawerLayout = drawerLayout;

    Log.i("NavTesting", array.toString());


    mDrawerListView.setAdapter(new ArrayAdapter&lt;String&gt;(
            getActionBar().getThemedContext(),
            android.R.layout.simple_list_item_activated_1,
            android.R.id.text1,
            array));
    mDrawerListView.setItemChecked(mCurrentSelectedPosition, true);
</code></pre>

<p>If you want to update the title from the <code>ArrayList</code> as well, you could also do this in the Activity (I just tested this and it works):</p>

<pre><code> public void onSectionAttached(int number) {

        if (menuItems == null){

          menuItems = new ArrayList&lt;String&gt;();
          menuItems.add("Test");
          menuItems.add("Test2");
          menuItems.add("TestThree");
        }

        switch (number) {
            case 1:
                mTitle = menuItems.get(0);
                break;
            case 2:
                mTitle = menuItems.get(1);
                break;
            case 3:
                mTitle = menuItems.get(2);
                break;
        }

    }
</code></pre>

<p>However, I would recommend using values from <code>strings.xml</code>, and passing them into the <code>NavigationDrawer</code>.  Here are my full class files and strings:</p>

<p>MainActivity.java:</p>

<pre><code>public class MainActivity extends ActionBarActivity
        implements NavigationDrawerFragment.NavigationDrawerCallbacks {

    ArrayList&lt;String&gt; menuItems;

    /**
     * Fragment managing the behaviors, interactions and presentation of the navigation drawer.
     */
    private NavigationDrawerFragment mNavigationDrawerFragment;

    /**
     * Used to store the last screen title. For use in {@link #restoreActionBar()}.
     */
    private CharSequence mTitle;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mNavigationDrawerFragment = (NavigationDrawerFragment)
                getSupportFragmentManager().findFragmentById(R.id.navigation_drawer);
        mTitle = getTitle();

        menuItems = new ArrayList&lt;String&gt;();
        menuItems.add(getString(R.string.title_section1));
        menuItems.add(getString(R.string.title_section2));
        menuItems.add(getString(R.string.title_section3));
        //mNavigationDrawerFragment.updateArray(menuItems);

        // Set up the drawer.
        mNavigationDrawerFragment.setUp(
                R.id.navigation_drawer,
                (DrawerLayout) findViewById(R.id.drawer_layout), menuItems);

    }

    @Override
    public void onNavigationDrawerItemSelected(int position) {
        // update the main content by replacing fragments




        FragmentManager fragmentManager = getSupportFragmentManager();
        fragmentManager.beginTransaction()
                .replace(R.id.container, PlaceholderFragment.newInstance(position + 1))
                .commit();
    }

    public void onSectionAttached(int number) {

        /*
        if (menuItems == null){

            menuItems = new ArrayList&lt;String&gt;();
            menuItems.add("Test");
            menuItems.add("Test2");
            menuItems.add("TestThree");
        }

        switch (number) {
            case 1:
                mTitle = menuItems.get(0);
                break;
            case 2:
                mTitle = menuItems.get(1);
                break;
            case 3:
                mTitle = menuItems.get(2);
                break;
        }
        */

        switch (number) {
            case 1:
                mTitle = getString(R.string.title_section1);
                break;
            case 2:
                mTitle = getString(R.string.title_section2);
                break;
            case 3:
                mTitle = getString(R.string.title_section3);
                break;
        }
    }

    public void restoreActionBar() {
        ActionBar actionBar = getSupportActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
        actionBar.setDisplayShowTitleEnabled(true);
        actionBar.setTitle(mTitle);
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        if (!mNavigationDrawerFragment.isDrawerOpen()) {
            // Only show items in the action bar relevant to this screen
            // if the drawer is not showing. Otherwise, let the drawer
            // decide what to show in the action bar.
            getMenuInflater().inflate(R.menu.main, menu);
            restoreActionBar();
            return true;
        }
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_main, container, false);
            return rootView;
        }

        @Override
        public void onAttach(Activity activity) {
            super.onAttach(activity);
            ((MainActivity) activity).onSectionAttached(
                    getArguments().getInt(ARG_SECTION_NUMBER));
        }
    }

}
</code></pre>

<p>NavigationDrawerFragment.java:</p>

<pre><code>public class NavigationDrawerFragment extends Fragment {

    private ArrayList&lt;String&gt; mArray;

    /**
     * Remember the position of the selected item.
     */
    private static final String STATE_SELECTED_POSITION = "selected_navigation_drawer_position";

    /**
     * Per the design guidelines, you should show the drawer on launch until the user manually
     * expands it. This shared preference tracks this.
     */
    private static final String PREF_USER_LEARNED_DRAWER = "navigation_drawer_learned";

    /**
     * A pointer to the current callbacks instance (the Activity).
     */
    private NavigationDrawerCallbacks mCallbacks;

    /**
     * Helper component that ties the action bar to the navigation drawer.
     */
    private ActionBarDrawerToggle mDrawerToggle;

    private DrawerLayout mDrawerLayout;
    private ListView mDrawerListView;
    private View mFragmentContainerView;

    private int mCurrentSelectedPosition = 0;
    private boolean mFromSavedInstanceState;
    private boolean mUserLearnedDrawer;



    public NavigationDrawerFragment() {
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        // Read in the flag indicating whether or not the user has demonstrated awareness of the
        // drawer. See PREF_USER_LEARNED_DRAWER for details.
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getActivity());
        mUserLearnedDrawer = sp.getBoolean(PREF_USER_LEARNED_DRAWER, false);

        if (savedInstanceState != null) {
            mCurrentSelectedPosition = savedInstanceState.getInt(STATE_SELECTED_POSITION);
            mFromSavedInstanceState = true;


        }

        // Select either the default item (0) or the last selected item.
        selectItem(mCurrentSelectedPosition);
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        // Indicate that this fragment would like to influence the set of actions in the action bar.
        setHasOptionsMenu(true);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        mDrawerListView = (ListView) inflater.inflate(
                R.layout.fragment_navigation_drawer, container, false);
        mDrawerListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
                selectItem(position);
            }
        });

        return mDrawerListView;
    }

    public boolean isDrawerOpen() {
        return mDrawerLayout != null &amp;&amp; mDrawerLayout.isDrawerOpen(mFragmentContainerView);
    }

    public void updateArray(ArrayList&lt;String&gt; array){

        Log.i("NavTesting", array.toString());

        mArray = array;

    }

    /**
     * Users of this fragment must call this method to set up the navigation drawer interactions.
     *
     * @param fragmentId   The android:id of this fragment in its activity's layout.
     * @param drawerLayout The DrawerLayout containing this fragment's UI.
     */
    public void setUp(int fragmentId, DrawerLayout drawerLayout, ArrayList&lt;String&gt; array) {
        mFragmentContainerView = getActivity().findViewById(fragmentId);
        mDrawerLayout = drawerLayout;

        Log.i("NavTesting", array.toString());

        mArray = array;


        mDrawerListView.setAdapter(new ArrayAdapter&lt;String&gt;(
                getActionBar().getThemedContext(),
                android.R.layout.simple_list_item_activated_1,
                android.R.id.text1,
                mArray));
        mDrawerListView.setItemChecked(mCurrentSelectedPosition, true);


        // set a custom shadow that overlays the main content when the drawer opens
        mDrawerLayout.setDrawerShadow(R.drawable.drawer_shadow, GravityCompat.START);
        // set up the drawer's list view with items and click listener

        ActionBar actionBar = getActionBar();
        actionBar.setDisplayHomeAsUpEnabled(true);
        actionBar.setHomeButtonEnabled(true);

        // ActionBarDrawerToggle ties together the the proper interactions
        // between the navigation drawer and the action bar app icon.
        mDrawerToggle = new ActionBarDrawerToggle(
                getActivity(),                    /* host Activity */
                mDrawerLayout,                    /* DrawerLayout object */
                R.drawable.ic_drawer,             /* nav drawer image to replace 'Up' caret */
                R.string.navigation_drawer_open,  /* "open drawer" description for accessibility */
                R.string.navigation_drawer_close  /* "close drawer" description for accessibility */
        ) {
            @Override
            public void onDrawerClosed(View drawerView) {
                super.onDrawerClosed(drawerView);
                if (!isAdded()) {
                    return;
                }

                getActivity().supportInvalidateOptionsMenu(); // calls onPrepareOptionsMenu()
            }

            @Override
            public void onDrawerOpened(View drawerView) {
                super.onDrawerOpened(drawerView);



                if (!isAdded()) {
                    return;
                }

                if (!mUserLearnedDrawer) {
                    // The user manually opened the drawer; store this flag to prevent auto-showing
                    // the navigation drawer automatically in the future.
                    mUserLearnedDrawer = true;
                    SharedPreferences sp = PreferenceManager
                            .getDefaultSharedPreferences(getActivity());
                    sp.edit().putBoolean(PREF_USER_LEARNED_DRAWER, true).apply();
                }



                getActivity().supportInvalidateOptionsMenu(); // calls onPrepareOptionsMenu()
            }
        };

        // If the user hasn't 'learned' about the drawer, open it to introduce them to the drawer,
        // per the navigation drawer design guidelines.
        if (!mUserLearnedDrawer &amp;&amp; !mFromSavedInstanceState) {
            mDrawerLayout.openDrawer(mFragmentContainerView);
        }

        // Defer code dependent on restoration of previous instance state.
        mDrawerLayout.post(new Runnable() {
            @Override
            public void run() {
                mDrawerToggle.syncState();
            }
        });

        mDrawerLayout.setDrawerListener(mDrawerToggle);


    }

    private void selectItem(int position) {

        if (mArray != null){
            Log.i("NavTestingSelectItem", mArray.toString());
        }

        mCurrentSelectedPosition = position;
        if (mDrawerListView != null) {
            mDrawerListView.setItemChecked(position, true);
        }
        if (mDrawerLayout != null) {
            mDrawerLayout.closeDrawer(mFragmentContainerView);
        }
        if (mCallbacks != null) {
            mCallbacks.onNavigationDrawerItemSelected(position);
        }
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mCallbacks = (NavigationDrawerCallbacks) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException("Activity must implement NavigationDrawerCallbacks.");
        }


    }

    @Override
    public void onDetach() {
        super.onDetach();
        mCallbacks = null;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // Forward the new configuration the drawer toggle component.
        mDrawerToggle.onConfigurationChanged(newConfig);
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        // If the drawer is open, show the global app actions in the action bar. See also
        // showGlobalContextActionBar, which controls the top-left area of the action bar.
        if (mDrawerLayout != null &amp;&amp; isDrawerOpen()) {
            inflater.inflate(R.menu.global, menu);
            showGlobalContextActionBar();
        }
        super.onCreateOptionsMenu(menu, inflater);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }

        if (item.getItemId() == R.id.action_example) {
            Toast.makeText(getActivity(), "Example action.", Toast.LENGTH_SHORT).show();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    /**
     * Per the navigation drawer design guidelines, updates the action bar to show the global app
     * 'context', rather than just what's in the current screen.
     */
    private void showGlobalContextActionBar() {
        ActionBar actionBar = getActionBar();
        actionBar.setDisplayShowTitleEnabled(true);
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);
        actionBar.setTitle(R.string.app_name);
    }

    private ActionBar getActionBar() {
        return ((ActionBarActivity) getActivity()).getSupportActionBar();
    }

    /**
     * Callbacks interface that all activities using this fragment must implement.
     */
    public static interface NavigationDrawerCallbacks {
        /**
         * Called when an item in the navigation drawer is selected.
         */
        void onNavigationDrawerItemSelected(int position);
    }
}
</code></pre>

<p>strings.xml:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;resources&gt;

    &lt;string name="app_name"&gt;My Application&lt;/string&gt;
    &lt;string name="title_section1"&gt;Test Section 1&lt;/string&gt;
    &lt;string name="title_section2"&gt;Test Section 2&lt;/string&gt;
    &lt;string name="title_section3"&gt;Test Section 3&lt;/string&gt;
    &lt;string name="navigation_drawer_open"&gt;Open navigation drawer&lt;/string&gt;
    &lt;string name="navigation_drawer_close"&gt;Close navigation drawer&lt;/string&gt;
    &lt;string name="action_example"&gt;Example action&lt;/string&gt;
    &lt;string name="action_settings"&gt;Settings&lt;/string&gt;

&lt;/resources&gt;
</code></pre>
