<p>Now answering my own question.
The configuration of the gradle setup, as posted in my question, is already running. In my question, I did not show you that I was using a .fxml file for the layout. So the reason why I did not get it running was because the .fxml layout has not been placed at the right spot to be packaged with the apk file (LogCat showed the error <code>Location Not Found</code> and I had a black screen on my device).</p>

<p>First of all, <strong>here is a working sample for the HelloWorld.java</strong> (see structure and gradle setup etc. in my question):</p>

<pre><code>package helloworld;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

public class HelloWorld extends Application {
    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Hello World!");
        Button btn = new Button();
        btn.setText("Say 'Hello World'");
        btn.setOnAction(new EventHandler&lt;ActionEvent&gt;() {

            @Override
            public void handle(ActionEvent event) {
                System.out.println("Hello World!");
            }
        });

        StackPane root = new StackPane();
        root.getChildren().add(btn);
        primaryStage.setScene(new Scene(root, 300, 250));
        primaryStage.show();
    }
}
</code></pre>

<h2>Run JavaFX on Android using fxml layouts</h2>

<p>If you would like to use <code>.fxml</code> files, you need to change the structure of your project a little bit. All <code>.fxml</code> files, <code>.css</code> files, graphics etc. belong into the <code>resources\assets</code> directory or subdirectory. This ensures that the .fxml files etc. will be packaged in the apk.</p>

<pre><code>HelloWorld
-- src\main
    -- java\helloworld\
        -- HelloWorld.java
        -- MyController.java
    -- resources\assets\
        -- sample_layout.fxml
    -- AndroidManifest.xml
-- assets\
    -- javafx.platform.properties
    -- javafx.properties
-- build.gradle
-- gradle.properties
-- local.properties
</code></pre>

<p>I did not check, if the <code>assets</code> folder which contains the <code>javafx.platform.properties</code> and the <code>javafx.properties</code> (both from the dalvikVM sdk) is still required. If I check the content of the .apk file, the apk contains both files twice. Seems like the dalvikVM library copies these files automatically.</p>

<p>Note: If you need to check the content of your apk, extract the apk file, then extract the classes.dex which is part of the apk (<a href="http://stackoverflow.com/questions/3593420/is-there-a-way-to-get-the-source-code-from-an-apk-file">see this post for more details</a>)</p>

<p><strong>Here is an example using .fxml files:</strong></p>

<p><em>HelloWorld.java</em></p>

<pre><code>package helloworld;

import java.io.IOException;
import java.net.URL;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.layout.AnchorPane;

public class HelloWorld extends Application {

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        try {
            URL fxmlFile = getClass().getResource("/assets/sample_layout.fxml");
            FXMLLoader loader = new FXMLLoader(fxmlFile);
            AnchorPane page = (AnchorPane) loader.load();
            MyController controller = (MyController) loader.getController();
            Scene scene = new Scene(page);
            primaryStage.setScene(scene);
            primaryStage.setTitle("JavaFX Sample");
            primaryStage.show();
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

}
</code></pre>

<p><em>MyController.java</em></p>

<pre><code>package helloworld;

import java.net.URL;
import java.util.ResourceBundle;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;

public class MyController {

    @FXML
    private ResourceBundle resources;
    @FXML
    private URL location;
    @FXML
    private Label label_Counter;
    @FXML
    private Button button_IncrementCounter;
    @FXML
    private Button button_DecrementCounter;

    private static final String OUTPUT_PREFIX = "Counter: ";
    private static int counter = 0;

    @FXML
    void onIncrementButtonPressed(ActionEvent event) {
        label_Counter.setText(OUTPUT_PREFIX + ++counter);
    }

    @FXML
    void onDecrementButtonPressed(ActionEvent event) {
        label_Counter.setText(OUTPUT_PREFIX + --counter);
    }

    @FXML
    void initialize() {
        assert label_Counter != null : "fx:id=\"label_Counter\" was not injected: check your FXML file 'sample_layout.fxml'.";
        assert button_IncrementCounter != null : "fx:id=\"button_IncrementCounter\" was not injected: check your FXML file 'sample_layout.fxml'.";
        assert button_DecrementCounter != null : "fx:id=\"button_DecrementCounter\" was not injected: check your FXML file 'sample_layout.fxml'.";
        label_Counter.setText(OUTPUT_PREFIX + 0);
    }

}
</code></pre>

<p><em>sample_layout.fxml</em></p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;?import javafx.geometry.*?&gt;
&lt;?import javafx.scene.control.*?&gt;
&lt;?import java.lang.*?&gt;
&lt;?import javafx.scene.layout.*?&gt;

&lt;AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8" xmlns:fx="http://javafx.com/fxml/1" fx:controller="helloworld.MyController"&gt;
   &lt;children&gt;
      &lt;VBox layoutX="332.0" layoutY="71.0" prefHeight="400.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0"&gt;
         &lt;children&gt;
            &lt;Label text="Please click on the buttons to increment or decrement the counter:" /&gt;
            &lt;Button fx:id="button_IncrementCounter" mnemonicParsing="false" onAction="#onIncrementButtonPressed" text="Increment Counter"&gt;
               &lt;VBox.margin&gt;
                  &lt;Insets top="10.0" /&gt;
               &lt;/VBox.margin&gt;
               &lt;padding&gt;
                  &lt;Insets bottom="20.0" left="20.0" right="20.0" top="20.0" /&gt;
               &lt;/padding&gt;
            &lt;/Button&gt;
            &lt;Button fx:id="button_DecrementCounter" mnemonicParsing="false" onAction="#onDecrementButtonPressed" text="Decrement Counter"&gt;
               &lt;VBox.margin&gt;
                  &lt;Insets top="10.0" /&gt;
               &lt;/VBox.margin&gt;
               &lt;padding&gt;
                  &lt;Insets bottom="20.0" left="20.0" right="20.0" top="20.0" /&gt;
               &lt;/padding&gt;
            &lt;/Button&gt;
            &lt;Label fx:id="label_Counter" text="&amp;lt;output-placeholder&amp;gt;"&gt;
               &lt;VBox.margin&gt;
                  &lt;Insets top="20.0" /&gt;
               &lt;/VBox.margin&gt;
            &lt;/Label&gt;
         &lt;/children&gt;
         &lt;padding&gt;
            &lt;Insets bottom="20.0" left="20.0" right="20.0" top="20.0" /&gt;
         &lt;/padding&gt;
      &lt;/VBox&gt;
   &lt;/children&gt;
&lt;/AnchorPane&gt;
</code></pre>

<p>Hope that helps everyone else getting started with JavaFX on Android.</p>
