<p>You can extract the data from ur complex JSON by using TypeAdapterFactory.
Here is a simple implementation of the class<br/><br/>
<b>ItemTypeAdapterFactory.java</b></p>

<pre><code>public class ItemTypeAdapterFactory implements TypeAdapterFactory {

    public &lt;T&gt; TypeAdapter&lt;T&gt; create(Gson gson, final TypeToken&lt;T&gt; type) {

        final TypeAdapter&lt;T&gt; delegate = gson.getDelegateAdapter(this, type);
        final TypeAdapter&lt;JsonElement&gt; elementAdapter = gson.getAdapter(JsonElement.class);

        return new TypeAdapter&lt;T&gt;() {

            public void write(JsonWriter out, T value) throws IOException {
                delegate.write(out, value);
            }

            public T read(JsonReader in) throws IOException {

                JsonElement jsonElement = elementAdapter.read(in);
                if (jsonElement.isJsonObject()) {
                    JsonObject jsonObject = jsonElement.getAsJsonObject();
                    if (jsonObject.has("updates") &amp;&amp; jsonObject.get("updates").isJsonObject())
                    {
                        jsonElement = jsonObject.get("updates");
                    }
                }

                return delegate.fromJsonTree(jsonElement);
            }
        }.nullSafe();
    }
}
</code></pre>

<p>Then you need to create a GSON Builder.Here is a sample of it. <br><br></p>

<pre><code>Gson gson = new GsonBuilder()
                .registerTypeAdapterFactory(new ItemTypeAdapterFactory()) // This is the important line ;)
                .create();
</code></pre>

<p>Finally Attach the GSON Builder to the RequestAdapter as: <br></p>

<pre><code>RestAdapter restAdapter = new RestAdapter.Builder()
                .setEndpoint(BASE_URL)
                .setConverter(new GsonConverter(gson))
                .build();
</code></pre>

<p>Now You have to declare the GSON response object and the request parameters:</p>

<pre><code>@FormUrlEncoded
    @POST("/tools/")
    private Void updateUser(@Field("field1") String field1, @Field("field2") String field2,Callback&lt;JSONResponse&gt; fbLogin);
</code></pre>

<p>Here is a <b>JSONResponse.java</b></p>

<pre><code>class JSONResponse {
@SerializedName("update")
ArrayList&lt;SaleEvent&gt; array;
}
</code></pre>

<p>Then declare <b>SaleEvent.java</b></p>

<pre><code>class SaleEvent {
@SerializedName("uid")
int uid;
@SerializedName("shop_name")
String uid;
@SerializedName("version")
int version;
....
} 
</code></pre>

<p>Then strt the request... Hope everything will work fine</p>

<p>This will work out for u</p>
