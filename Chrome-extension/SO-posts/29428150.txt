<p>It's quite late, but I also struggled with this.<br>
So here is how I solved it for my case.<br>
In the <code>HexDumpProxyFrontendHandler</code> class I made the following changes to <code>channelActive()</code>:</p>

<pre><code>@Override
public void channelActive(ChannelHandlerContext ctx) {
    final Channel inboundChannel = ctx.channel();
    // Start the connection attempt.
    Bootstrap b = new Bootstrap();
    b.group(inboundChannel.eventLoop()).channel(ctx.channel().getClass())
            .handler(new HexDumpProxyBackendHandler(inboundChannel))
            .option(ChannelOption.AUTO_READ, false);
    ChannelFuture f = b.connect(remoteHost, remotePort);
    outboundChannel = f.channel();
    outboundChannel.pipeline().addFirst(new StringDecoder());  // this 2 lines
    outboundChannel.pipeline().addFirst(new StringEncoder());
    f.addListener(new ChannelFutureListener() {

        public void operationComplete(ChannelFuture future) {
            if (future.isSuccess()) {
                // connection complete start to read first data
                inboundChannel.read();
            } else {
                // Close the connection if the connection attempt has
                // failed.
                inboundChannel.close();
            }
        }
    });
}
</code></pre>

<p>So after that, in the <code>channelRead</code> callbacks (for HexDumpProxyFrontendHandler and HexDumpProxyBackendHandler), the messages will be <code>String</code></p>
