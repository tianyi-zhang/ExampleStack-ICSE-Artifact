<p>In your MaterialSuggestionAdapter create a method like following</p>

<pre><code>public Product getProduct(int position){
    return new_suggestions.get(position);
}
</code></pre>

<p>then use it to retrieve the product like this</p>

<pre><code>//creating and setting the MaterialSuggestionAdapter
final MaterialSuggestionAdapter adapter = new MaterialSuggestionAdapter(this, acTextView.getText().toString());
acTextView.setAdapter(adapter);

acTextView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView &lt; ? &gt; adapterView, View view, int i, long l) {
        MyViewPagerAdapter(getSupportFragmentManager()));
        String newName = adapterView.getItemAtPosition(i).toString();

        // getting the product. you can access all the details inside the 
        // Product object. Ex: selectedProduct.getQty();

        Product selectedProduct = adapter.getProduct(position);


        if (!newName.equals("")) {
            if (myRecyclerViewAdapter.getItemCount() &gt; 1) {
                myRecyclerViewAdapter.add(1, newName);
            } else {
                myRecyclerViewAdapter.add(0, newName);
            }
        }
    }
});
</code></pre>

<p><strong>UPDATE</strong></p>

<p>Refactor your MaterialSuggestionsAdapter like below. I am posting one of my adapter classes that geocodes locations. You can simply replace it with your logic and model</p>

<pre><code>public class GeoCodeAutoCompleteAdapter extends BaseAdapter implements Filterable {
    private static final int MAX_RESULTS = 5;
    private Context mContext;
    //replace this with your List&lt;Product&gt;
    private List&lt;GeoCodeAutoCompleteResult&gt; mResults = new ArrayList&lt;&gt;();

    public GeoCodeAutoCompleteAdapter(Context context) {
        mContext = context;
    }

    @Override
    public int getCount() {
        return mResults.size();
    }

    @Override
    public GeoCodeAutoCompleteResult getItem(int index) {
        return mResults.get(index);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        if (convertView == null) {
            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.list_item_geo_code_result, parent, false);
        }

        TextView tvResult = ButterKnife.findById(convertView, R.id.tvResult);
        tvResult.setText(getItem(position).getAddress());

        return convertView;
    }


    @Override
    public Filter getFilter() {
        return new Filter() {
            @Override
            protected FilterResults performFiltering(CharSequence constraint) {
                FilterResults filterResults = new FilterResults();
                if (constraint != null) {
                    //replace findLocations method with your search logic
                    List locations = findLocations(mContext, constraint.toString());

                    // Assign the data to the FilterResults
                    filterResults.values = locations;
                    filterResults.count = locations.size();
                }
                return filterResults;
            }

            @SuppressWarnings("unchecked cast")
            @Override
            protected void publishResults(CharSequence constraint, FilterResults results) {
                if (results != null &amp;&amp; results.count &gt; 0) {
                    mResults = (List&lt;GeoCodeAutoCompleteResult&gt;) results.values;
                    notifyDataSetChanged();
                } else {
                    notifyDataSetInvalidated();
                }
            }
        };
    }

    // replace this method with your own search logic, Return the  list of model you want
    private List&lt;GeoCodeAutoCompleteResult&gt; findLocations(Context context, String queryText) {

        List&lt;GeoCodeAutoCompleteResult&gt; searchResults = new ArrayList&lt;&gt;();

        Geocoder geocoder = new Geocoder(context, context.getResources().getConfiguration().locale);
        List&lt;Address&gt; addresses;

        try {
            addresses = geocoder.getFromLocationName(queryText, MAX_RESULTS);

            for (int i = 0; i &lt; addresses.size(); i++) {
                Address address = addresses.get(i);
                if (address.getMaxAddressLineIndex() != -1) {
                    searchResults.add(new GeoCodeAutoCompleteResult(address));
                }
            }


        } catch (IOException e) {
            e.printStackTrace();
        }

        return searchResults;
    }
}
</code></pre>

<p>Setting the adapter and retrieving clicked item</p>

<pre><code> mGeoCodeAutoCompleteAdapter = new GeoCodeAutoCompleteAdapter(getActivity());
 atvPlaceSearch.setAdapter(mGeoCodeAutoCompleteAdapter);
 atvPlaceSearch.setOnItemClickListener(new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        GeoCodeAutoCompleteResult result = mGeoCodeAutoCompleteAdapter.getItem(position);
        //set the text to clicked result
        atvPlaceSearch.setText(result.getShortAddress());
     }
 });
</code></pre>
