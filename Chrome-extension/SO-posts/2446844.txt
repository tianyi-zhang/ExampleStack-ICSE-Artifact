<p>My implementation of toString() f√ºr Hibernate entities is the following:</p>

<pre><code>@Override
public String toString() {
    return String.format("%s(id=%d)", this.getClass().getSimpleName(), this.getId());
}
</code></pre>

<p>Every subclass of my AbstractEntity (above) overrides that method if necessary:</p>

<pre><code>@Override
public String toString() {
    return String.format("%s(id=%d, name='%s', status=%s)",
            this.getClass().getSimpleName(),
            this.getId(),
            this.getName(),
            this.getStatus());
}
</code></pre>

<p>For hashCode() and equals() keep in mind that Hibernate often uses proxy classes. So my equals() usally looks like this:</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;

    Class&lt;AbstractEntity&gt; c1 = Hibernate.getClass(this);
    Class&lt;AbstractEntity&gt; c2 = Hibernate.getClass(obj);
    if (!c1.equals(c2)) return false;

    final AbstractEntity other = (AbstractEntity) obj;
    if (this.getId() == null) {
        if (other.getId() != null) return false;
    }
    else if (!this.getId().equals(other.getId())) return false;

    return true;
}
</code></pre>

<p>And as others already stated... be careful with accessing lazy loaded properties! A simple toString() or even log.debug(entity) might cause huge activity if cascading into several lazy loaded objects and properties.</p>
