<p>You can also use below code to achieve StickyListHeaders,</p>

<p><strong>MainActivity.java</strong></p>

<pre><code>public class MainActivity extends Activity implements AbsListView.OnScrollListener {
     ListView list; 
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.fragment_main);
        list = (ListView) findViewById(R.id.list);
        list.setAdapter(new Adapter(this));        
        list.setOnScrollListener(this); 
    }

    @Override
    public void onScroll(AbsListView view, int firstVisibleItem,
            int visibleItemCount, int totalItemCount) {     
        //the listview has only few children (of course according to the height of each child) who are visible
        for(int i=0; i &lt; list.getChildCount(); i++){
            View child = list.getChildAt(i);
            ViewHolder holder = (ViewHolder) child.getTag();

            //if the view is the first item at the top we will do some processing
            if(i == 0){             
                boolean isAtBottom = child.getHeight() &lt;= holder.header.getBottom();
                int offset = holder.previousTop - child.getTop();
                if(!(isAtBottom &amp;&amp; offset &gt; 0)){                    
                    holder.previousTop = child.getTop();
                    holder.header.offsetTopAndBottom(offset);                   
                    holder.header.invalidate();
                }
            } //if the view is not the first item it "may" need some correction because of view re-use
            else if (holder.header.getTop() != 0) {
                int offset = -1 * holder.header.getTop(); 
                holder.header.offsetTopAndBottom(offset);
                holder.previousTop = 0;
                holder.header.invalidate();
            }
        }
    }

    @Override
    public void onScrollStateChanged(AbsListView view, int scrollState) {}

    private static class Adapter extends ArrayAdapter&lt;String&gt; {
        public Adapter(Context context) {
            super(context, R.layout.activity_main, R.id.header);
            for(int i=0; i &lt; 50; i++){
                add(Integer.toString(i));
            }
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            if(convertView == null){
                convertView = LayoutInflater.from(getContext()).inflate(R.layout.activity_main, parent, false);
                ViewHolder holder = new ViewHolder();
                holder.header = (TextView) convertView.findViewById(R.id.header);
                convertView.setTag(holder);             
            }
            ViewHolder holder = (ViewHolder) convertView.getTag();
            holder.header.setText(getItem(position));
            return convertView;
        }
    }

    private static class ViewHolder {
        TextView header;
        int previousTop = 0;
    }


}
</code></pre>

<p>As you can see above android's <code>AbsListView.OnScrollListener</code> interface is used by implementing its  <code>onScroll()</code> to listen  the scrolling of the list.<code>onScroll()</code>will be called after the scroll has completed.There is an adapter which uses <code>ViewHolder</code> to store the <code>header view</code> and also a variable <code>previousTop</code> to keep track of the change in the scroll for each successive scroll events .This is because of the fact that <code>offsetTopAndBottom()</code> changes offset of the view related to the previous location of it.</p>

<p>Coming to the <code>Adapter</code> class, <code>add(Integer.toString(i));</code> is used just to add integer values to an <code>ArrayList</code> which in turn used to show as a header. As a result you can see 50 headers in the <code>ListView</code>. <code>void android.widget.ArrayAdapter.add(String object)</code>
 Adds the specified object at the end of the array.</p>

<p><strong>fragment_main.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

    &lt;ListView
        android:id="@+id/list"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent" &gt;
    &lt;/ListView&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>The xml below contains a <code>TextView</code> which is for Header and an <code>ImageView</code> which is for the content part.You can use any view for it as per your need.</p>

<p><strong>activity_main.xml</strong></p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" android:background="#FFFFFF"&gt;

    &lt;ImageView
        android:id="@+id/content"
        android:layout_width="fill_parent"
        android:layout_height="300dp"
        android:scaleType="centerCrop" 
        android:src="@drawable/ic_launcher"
        android:background="#aaaaff" 
        android:layout_marginTop="40dp"/&gt;

    &lt;TextView
        android:id="@+id/header"
        android:layout_width="fill_parent"
        android:layout_height="40dp"
        android:padding="12dp"
        android:text="Deneme Row"
        android:textColor="#000000" 
        android:background="#99ffffff"/&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>The code is pretty self explanatory.Still if you need any explanation, I will explain.</p>

<p>You can also refer the following,</p>

<p><a href="http://sriramramani.wordpress.com/2012/10/17/instagram-list-view/" rel="nofollow">http://sriramramani.wordpress.com/2012/10/17/instagram-list-view/</a></p>

<p><a href="https://bitbucket.org/ashish2py/instagramheader/downloads" rel="nofollow">https://bitbucket.org/ashish2py/instagramheader/downloads</a></p>

<p><strong>Note</strong>: <em>I have copied this code from somewhere I don't remember. If anyone can provide me the link to this code, I will add the reference here.Sorry for not giving the credit to the original author.</em></p>
