<p>I assume that you are using the Criteria API.</p>

<p>If you check the source code of Hibernate you can find the problem here:</p>

<pre><code>CriteriaQueryTranslator#createAssociationPathCriteriaMap()

private void createAssociationPathCriteriaMap() {
        Iterator iter = rootCriteria.iterateSubcriteria();
        while ( iter.hasNext() ) {
            CriteriaImpl.Subcriteria crit = ( CriteriaImpl.Subcriteria ) iter.next();
            String wholeAssociationPath = getWholeAssociationPath( crit );
            Object old = associationPathCriteriaMap.put( wholeAssociationPath, crit );
            if ( old != null ) {
                throw new QueryException( "duplicate association path: " + wholeAssociationPath );
            }
            int joinType = crit.getJoinType();
            old = associationPathJoinTypesMap.put( wholeAssociationPath, new Integer( joinType ) );
            if ( old != null ) {
                // TODO : not so sure this is needed...
                throw new QueryException( "duplicate association path: " + wholeAssociationPath );
            }
        }
    }
</code></pre>

<p>I'm using Hibernate 3.3.2. </p>

<p>What happens internally is that When you are adding <code>Criteria</code>s to your root <code>Criteria</code> Hibernate creates <code>SubCriteria</code>s and later fills a <code>Map</code> (check the code below) with all the paths you are trying to use and if it finds a duplication it will throw an exception.</p>

<p>So for example if you are trying to join: <code>entity0.entity1</code> and later you try to join that again you will get an <code>Exception</code>. It won't work even with an alias because Hibernate doesn't care about them here.</p>

<p>You can work around this if you don't join something twice OR you can use HQL/JPQL. You may check out newer versions of Hibernate but I'm not sure if they fixed this quasi-bug.</p>
