<p>Without an external library, you can do the following. It will consume significantly less memory for big ranges than the current accepted answer, as there is no array created.</p>

<p>Have a class like this:</p>

<pre><code>class Range implements Iterable&lt;Integer&gt; {

    private int limit;

    public Range(int limit) {
        this.limit = limit;
    }

    @Override
    public Iterator&lt;Integer&gt; iterator() {
        final int max = limit;
        return new Iterator&lt;Integer&gt;() {

            private int current = 0;

            @Override
            public boolean hasNext() {
                return current &lt; max;
            }

            @Override
            public Integer next() {
                if (hasNext()) {
                    return current++;   
                } else {
                    throw new NoSuchElementException("Range reached the end");
                }
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException("Can't remove values from a Range");
            }
        };
    }
}
</code></pre>

<p>and you can simply use it like this:</p>

<pre><code>    for (int i : new Range(5)) {
        System.out.println(i);
    }
</code></pre>

<p>you can even reuse it:</p>

<pre><code>    Range range5 = new Range(5);

    for (int i : range5) {
        System.out.println(i);
    }
    for (int i : range5) {
        System.out.println(i);
    }
</code></pre>

<hr>

<p>As <a href="http://stackoverflow.com/users/2069350/henry-keiter">Henry Keiter</a> pointed out in the comment below, we could add following method to the <code>Range</code> class (or anywhere else):</p>

<pre><code>public static Range range(int max) {
    return new Range(max);
}
</code></pre>

<p>and then, in the other classes we can </p>

<pre><code>import static package.name.Range.range;
</code></pre>

<p>and simply call</p>

<pre><code>for (int i : range(5)) {
    System.out.println(i);
}
</code></pre>
