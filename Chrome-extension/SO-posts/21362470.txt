<p>at least i found solution.i should pay attention to entity name.and it should be same as the server.</p>

<pre><code>            DefaultHttpClient httpClient = new DefaultHttpClient();
        HttpPost httpPost = new HttpPost(mUrl);
        File file = new File(mFileAdrress);
        FileInputStream fileInputStream = new FileInputStream(file);
        httpClient.getParams().setParameter(CoreProtocolPNames.USER_AGENT,
                System.getProperty("http.agent"));
        InputStreamBody inputStreamBody = new InputStreamBody(
                fileInputStream, file.getName());

        MultipartEntityBuilder multipartEntity = MultipartEntityBuilder
                .create();
        multipartEntity.setMode(HttpMultipartMode.BROWSER_COMPATIBLE);
        multipartEntity.addPart("file", inputStreamBody); // file should be same as server
        final HttpEntity myEntity = multipartEntity.build();
        class ProgressiveEntity implements HttpEntity {
            @Override
            public void consumeContent() throws IOException {
                myEntity.consumeContent();
            }

            @Override
            public InputStream getContent() throws IOException,
                    IllegalStateException {
                return myEntity.getContent();
            }

            @Override
            public Header getContentEncoding() {
                return myEntity.getContentEncoding();
            }

            @Override
            public long getContentLength() {
                return myEntity.getContentLength();
            }

            @Override
            public Header getContentType() {
                return myEntity.getContentType();
            }

            @Override
            public boolean isChunked() {
                return myEntity.isChunked();
            }

            @Override
            public boolean isRepeatable() {
                return myEntity.isRepeatable();
            }

            @Override
            public boolean isStreaming() {
                return myEntity.isStreaming();
            }

            @Override
            public void writeTo(OutputStream outstream) throws IOException {

                class ProxyOutputStream extends FilterOutputStream {

                    public ProxyOutputStream(OutputStream proxy) {
                        super(proxy);
                    }

                    public void write(int idx) throws IOException {
                        out.write(idx);
                    }

                    public void write(byte[] bts) throws IOException {
                        out.write(bts);
                    }

                    public void write(byte[] bts, int st, int end)
                            throws IOException {
                        out.write(bts, st, end);
                    }

                    public void flush() throws IOException {
                        out.flush();
                    }

                    public void close() throws IOException {
                        out.close();
                    }
                }
                class ProgressiveOutputStream extends ProxyOutputStream {
                    public ProgressiveOutputStream(OutputStream proxy) {
                        super(proxy);
                    }

                    public void write(byte[] bts, int st, int end)
                            throws IOException {
                        writed += end;
                        out.write(bts, st, end);
                        mProgress = (int) ((mSoFarLength * 100) / (mTotalLength));
                    }
                }

                myEntity.writeTo(new ProgressiveOutputStream(outstream));
            }

        }
        ProgressiveEntity progressiveEntity = new ProgressiveEntity();
        httpPost.setEntity(progressiveEntity);
        HttpResponse httpResponse = httpClient.execute(httpPost);
        HttpEntity httpEntity = httpResponse.getEntity();
        String state = EntityUtils.toString(httpEntity);
</code></pre>
