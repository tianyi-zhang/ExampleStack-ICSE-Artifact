<blockquote>
  <p>I am trying to refresh my JTextPane from another class,</p>
</blockquote>

<p>As for updating a field in another class, you should give the class that holds the field a public method that other classes can call that changes the state of that field. For instance if you want to allow another class to change the text in a <code>JTextField</code>, then give your class a method like:</p>

<pre><code>public void setMyTextFieldText(String text) {
    myTextField.setText(text);

    // or if a JTextPane by inserting text into its Document here
}
</code></pre>

<p>This has nothing to do with Swing or GUI's and all to do with basic Java and object oriented coding. For a JTextPane you'd need to do more then just setText, I believe, but I don't use them much.</p>

<blockquote>
  <p>and when I do it from my main class it works, but any other classes it doesnt. I heard you need to use threads to do it, but I have yet to actually see someone implement it. I have provided my code below as simply as possible. </p>
</blockquote>

<p>The threading issue comes in if you are making changes to your Swing GUI off of the EDT (event dispatch thread) which is the main Swing thread. If this occurs, then yes you should queue your Swing calls onto the Swing event thread by putting it into a Runnable and putting on the Swing event queue:</p>

<pre><code>SwingUtilities.invokeLater(new Runnable() {
  public void run() {
    // your swing calls go here
  }
});
</code></pre>

<hr>

<p><strong>Edit 1</strong><br>
Note, this method of yours does nothing of use:</p>

<pre><code>// you should rename this setText(String passedText)
public void SetText (String PassedText)
{
    name = PassedText;           
    // you need to change your JTextPane's Document in here *****
}
</code></pre>

<p>All it does is change the text referred to by the name String field, but that won't change any displayed text. You will have to change the JTextPane text by calling JTextPane methods, by inserting text into the JTextPane's Document.</p>

<hr>

<p><strong>Edit 2</strong><br>
Please learn about and use Java naming conventions so as not to confuse folks who might want to understand your code and help you. Class names should begin with an upper-case letter and variable and field names with a lower-case letter. Your naming appears to be backwards.</p>

<hr>

<p><strong>Edit 3</strong><br>
You know that you have two completely independent TextBox objects here:</p>

<pre><code>public TextBox textbox = new TextBox();
Thread t1 = new Thread(new TextBox());
</code></pre>

<p>Changing the state of one will have no effect on the other.</p>

<p>Also, why are you having your component classes implement Runnable and then putting them in Threads. That makes little sense. To understand Swing threading, please read <a href="http://docs.oracle.com/javase/tutorial/uiswing/concurrency/" rel="nofollow">Concurrency in Swing</a>.</p>

<hr>

<p><strong>Edit 4</strong><br>
An example of an <a href="http://sscce.org" rel="nofollow">sscce</a>:</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.*;
import javax.swing.text.*;

public class TextBoxTest {
   private JPanel mainPanel = new JPanel();
   private MyTextBox myTextBox = new MyTextBox();
   private JTextArea textArea = new JTextArea(20, 30);

   @SuppressWarnings("serial")
   public TextBoxTest() {
      JScrollPane scrollPane = new JScrollPane(textArea);
      scrollPane.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder("JTextArea"),
            scrollPane.getBorder()));

      JPanel centerPanel = new JPanel(new GridLayout(1, 0));
      centerPanel.add(myTextBox.getMainComponent());
      centerPanel.add(scrollPane);

      JPanel bottomPanel = new JPanel();
      bottomPanel.add(new JButton(new AbstractAction("Submit Text") {
         {
            putValue(MNEMONIC_KEY, KeyEvent.VK_S);
         }

         @Override
         public void actionPerformed(ActionEvent e) {
            try {
               myTextBox.setText(textArea.getText());
            } catch (BadLocationException e1) {
               e1.printStackTrace();
            }
         }
      }));
      bottomPanel.add(new JButton(new AbstractAction("Append Text") {
         {
            putValue(MNEMONIC_KEY, KeyEvent.VK_A);
         }

         @Override
         public void actionPerformed(ActionEvent e) {
            try {
               myTextBox.appendText(textArea.getText() + "\n");
            } catch (BadLocationException e1) {
               e1.printStackTrace();
            }
         }
      }));      
      bottomPanel.add(new JButton(new AbstractAction("Append Red Text") {
         {
            putValue(MNEMONIC_KEY, KeyEvent.VK_R);
         }

         @Override
         public void actionPerformed(ActionEvent e) {
            try {
               myTextBox.appendTextInRed(textArea.getText() + "\n");
            } catch (BadLocationException e1) {
               e1.printStackTrace();
            }
         }
      }));

      mainPanel.setLayout(new BorderLayout());
      mainPanel.add(centerPanel, BorderLayout.CENTER);
      mainPanel.add(bottomPanel, BorderLayout.PAGE_END);
   }

   public JComponent getMainComponent() {
      return mainPanel;
   }

   private static void createAndShowGui() {
      TextBoxTest textBoxTester = new TextBoxTest();

      JFrame frame = new JFrame("TextBoxTest");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.getContentPane().add(textBoxTester.getMainComponent());
      frame.pack();
      frame.setLocationByPlatform(true);
      frame.setVisible(true);
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }
}

class MyTextBox {
   private JTextPane textPane = new JTextPane();
   private JScrollPane scrollPane = new JScrollPane(textPane);
   private String name = "This is your message!! Message  Message "
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!! Message  Message "
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!!\n\n Message \n\n Message \n\n";
   private StyledDocument doc = textPane.getStyledDocument();

   public MyTextBox() {
      addStylesToDocument(doc);
      textPane.setEditable(false);
      textPane.setFocusable(false);
      try {
         doc.insertString(0, name, doc.getStyle("regular"));
      } catch (BadLocationException e) {
         e.printStackTrace();
      }

      scrollPane.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder("JTextPane"),
            scrollPane.getBorder()));
   }

   private void addStylesToDocument(StyledDocument doc2) {
      Style def = StyleContext.getDefaultStyleContext().getStyle(
            StyleContext.DEFAULT_STYLE);

      Style regular = doc.addStyle("regular", def);
      StyleConstants.setFontFamily(def, "SansSerif");
      StyleConstants.setFontSize(regular, 16);

      Style s = doc.addStyle("red", regular);
      StyleConstants.setForeground(s, Color.red);

   }

   public JScrollPane getMainComponent() {
      return scrollPane;
   }

   public void setText(String text) throws BadLocationException {
      doc.remove(0, doc.getLength());
      doc.insertString(0, text, doc.getStyle("regular"));
   }

   public void appendText(String text) throws BadLocationException {
      doc.insertString(doc.getLength(), text, doc.getStyle("regular"));
   }

   public void appendTextInRed(String text) throws BadLocationException {
      doc.insertString(doc.getLength(), text, doc.getStyle("red"));
   }

}
</code></pre>

<hr>

<p><strong>Edit 5</strong><br>
To send from another thread, as I have noted elsewhere simply wrap the code into a Runnable and queue it onto the EDT via <code>SwingUtilities.invokeLater(myRunnable)</code>.</p>

<p>For instance, I can give the MyTextBox class a method that does all this, and any outside class can call it:</p>

<pre><code>public void appendTextOffEdt(final String text) {
  // first make sure that we're in fact off of the EDT
  if (SwingUtilities.isEventDispatchThread()) {
     try {
        appendTextInRedBold(text);
     } catch (BadLocationException e) {
        e.printStackTrace();
     }
  } else {
     SwingUtilities.invokeLater(new Runnable() {
        public void run() {
           try {
              appendTextInRedBold(text);
           } catch (BadLocationException e) {
              e.printStackTrace();
           }
        }
     });
  }
}
</code></pre>

<p>For example:</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.*;
import javax.swing.text.*;

public class TextBoxTest {
   private JPanel mainPanel = new JPanel();
   private MyTextBox myTextBox = new MyTextBox();
   private JTextArea textArea = new JTextArea(20, 30);
   private SendTextOffEdt sendTextOffEdt = new SendTextOffEdt(myTextBox);

   @SuppressWarnings("serial")
   public TextBoxTest() {
      JScrollPane scrollPane = new JScrollPane(textArea);
      scrollPane.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder("JTextArea"),
            scrollPane.getBorder()));

      JPanel centerPanel = new JPanel(new GridLayout(1, 0));
      centerPanel.add(myTextBox.getMainComponent());
      centerPanel.add(scrollPane);

      JPanel bottomPanel = new JPanel();

      new Thread(sendTextOffEdt).start();

      bottomPanel.add(new JButton(new AbstractAction("Append Text") {
         {
            putValue(MNEMONIC_KEY, KeyEvent.VK_A);
         }

         @Override
         public void actionPerformed(ActionEvent e) {
            try {
               myTextBox.appendText(textArea.getText() + "\n");
            } catch (BadLocationException e1) {
               e1.printStackTrace();
            }
         }
      }));
      bottomPanel.add(new JButton(new AbstractAction("Append Blue Text") {
         {
            putValue(MNEMONIC_KEY, KeyEvent.VK_B);
         }

         @Override
         public void actionPerformed(ActionEvent e) {
            try {
               myTextBox.appendTextInBlue(textArea.getText() + "\n");
            } catch (BadLocationException e1) {
               e1.printStackTrace();
            }
         }
      }));
      bottomPanel.add(new JButton(new AbstractAction("Exit") {
         {
            putValue(MNEMONIC_KEY, KeyEvent.VK_X);
         }

         @Override
         public void actionPerformed(ActionEvent e) {
            Window win = SwingUtilities.getWindowAncestor(mainPanel);
            win.dispose();
         }
      }));

      mainPanel.setLayout(new BorderLayout());
      mainPanel.add(centerPanel, BorderLayout.CENTER);
      mainPanel.add(bottomPanel, BorderLayout.PAGE_END);
   }

   public JComponent getMainComponent() {
      return mainPanel;
   }

   private static void createAndShowGui() {
      TextBoxTest textBoxTester = new TextBoxTest();

      JFrame frame = new JFrame("TextBoxTest");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.getContentPane().add(textBoxTester.getMainComponent());
      frame.pack();
      frame.setLocationByPlatform(true);
      frame.setVisible(true);
   }

   public static void main(String[] args) {
      SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            createAndShowGui();
         }
      });
   }
}

class SendTextOffEdt implements Runnable {
   private static final long SLEEP_TIME = 3000;
   private static final String TEXT = "Sent off of EDT\n";
   private MyTextBox myTextBox;

   public SendTextOffEdt(MyTextBox myTextBox) {
      this.myTextBox = myTextBox;
   }

   @Override
   public void run() {
      while (true) {
         myTextBox.appendTextOffEdt(TEXT);
         try {
            Thread.sleep(SLEEP_TIME);
         } catch (InterruptedException e) {
         }
      }
   }
}

class MyTextBox {
   public static final String REGULAR = "regular";
   public static final String BLUE = "blue";
   public static final String RED_BOLD = "red bold";
   private JTextPane textPane = new JTextPane();
   private JScrollPane scrollPane = new JScrollPane(textPane);
   private String name = "This is your message!! Message  Message "
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!! Message  Message "
         + "This is your message!!\n\n Message \n\n Message \n\n"
         + "This is your message!!\n\n Message \n\n Message \n\n";
   private StyledDocument doc = textPane.getStyledDocument();

   public MyTextBox() {
      addStylesToDocument(doc);
      textPane.setEditable(false);
      textPane.setFocusable(false);
      try {
         doc.insertString(0, name, doc.getStyle("regular"));
      } catch (BadLocationException e) {
         e.printStackTrace();
      }

      scrollPane.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createTitledBorder("JTextPane"),
            scrollPane.getBorder()));
   }

   private void addStylesToDocument(StyledDocument doc2) {
      Style def = StyleContext.getDefaultStyleContext().getStyle(
            StyleContext.DEFAULT_STYLE);

      Style regular = doc.addStyle(REGULAR, def);
      StyleConstants.setFontFamily(def, "SansSerif");
      StyleConstants.setFontSize(regular, 16);

      Style s = doc.addStyle(BLUE, regular);
      StyleConstants.setForeground(s, Color.blue);

      s = doc.addStyle(RED_BOLD, regular);
      StyleConstants.setBold(s, true);
      StyleConstants.setForeground(s, Color.red);

   }

   public JScrollPane getMainComponent() {
      return scrollPane;
   }

   public void setText(String text) throws BadLocationException {
      doc.remove(0, doc.getLength());
      doc.insertString(0, text, doc.getStyle(REGULAR));
   }

   public void appendText(String text) throws BadLocationException {
      doc.insertString(doc.getLength(), text, doc.getStyle(REGULAR));
   }

   public void appendTextInBlue(String text) throws BadLocationException {
      doc.insertString(doc.getLength(), text, doc.getStyle(BLUE));
   }

   public void appendTextInRedBold(String text) throws BadLocationException {
      doc.insertString(doc.getLength(), text, doc.getStyle(RED_BOLD));
   }

   public void appendTextOffEdt(final String text) {
      // first make sure that we're in fact off of the EDT
      if (SwingUtilities.isEventDispatchThread()) {
         try {
            appendTextInRedBold(text);
         } catch (BadLocationException e) {
            e.printStackTrace();
         }
      } else {
         SwingUtilities.invokeLater(new Runnable() {
            public void run() {
               try {
                  appendTextInRedBold(text);
               } catch (BadLocationException e) {
                  e.printStackTrace();
               }
            }
         });
      }
   }
}
</code></pre>

<hr>

<p>As for tutorials:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/components/index.html" rel="nofollow">Swing Tutorial</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/uiswing/concurrency/" rel="nofollow">Event Dispatch Thread Tutorial</a></li>
<li><a href="http://docs.oracle.com/javase/tutorial/reallybigindex.html" rel="nofollow">Java Tutorials Really Big Index</a></li>
</ul>
