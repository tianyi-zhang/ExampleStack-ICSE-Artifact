<p>Set the ImageView to show the image in SD Card</p>

<pre><code>ImageView imageView;
Bitmap bmp = BitmapFactory.decodeFile(imagePath);
imageView.setImageBitmap(bmp);
</code></pre>

<p>But if you want to display the ImageView in the ListView, you have to define your own adapter for the ListView, and it would be better to use the View Holder pattern to improve the performance.</p>

<pre><code>public class MyArrayAdapter extends ArrayAdapter&lt;String&gt; {
    private final Activity context;
    private final String[] names;

    public MyArrayAdapter(Activity context, String[] names) {
        super(context, R.layout.rowlayout, names);
        this.context = context;
        this.names = names;
    }

    // static to save the reference to the outer class and to avoid access to
    // any members of the containing class
    static class ViewHolder {
        public ImageView imageView;
        public TextView textView;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // ViewHolder will buffer the assess to the individual fields of the row
        // layout

        ViewHolder holder;
        // Recycle existing view if passed as parameter
        // This will save memory and time on Android
        // This only works if the base layout for all classes are the same
        View rowView = convertView;
        if (rowView == null) {
            LayoutInflater inflater = context.getLayoutInflater();
            rowView = inflater.inflate(R.layout.rowlayout, null, true);
            holder = new ViewHolder();
            holder.textView = (TextView) rowView.findViewById(R.id.label);
            holder.imageView = (ImageView) rowView.findViewById(R.id.icon);
            rowView.setTag(holder);
        } else {
            holder = (ViewHolder) rowView.getTag();
        }

        holder.textView.setText(names[position]);
        // Change the icon for Windows and iPhone
        String s = names[position];

        Bitmap bmp = BitmapFactory.decodeFile(imagePath);
        holder.imageView.setImageBitmap(bmp);           

        return rowView;
    }
}
</code></pre>

<p>Check out <a href="http://www.vogella.de/articles/AndroidListView/article.html" rel="nofollow">this tutorial</a> about how to use View Holder pattern.</p>

<p>Hope this helps.</p>
