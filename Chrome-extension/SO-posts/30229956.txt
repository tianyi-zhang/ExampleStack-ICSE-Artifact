<p>I guess, you cannot write a consistent <code>hashCode</code> in your case, because your <code>equals</code> breaks the contract of <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals%28java.lang.Object%29" rel="nofollow"><code>Object.equals</code></a> method, namely transitivity:</p>

<blockquote>
  <p>It is <em>transitive</em>: for any non-null reference values <code>x</code>, <code>y</code>, and <code>z</code>, if <code>x.equals(y)</code> returns <code>true</code> and <code>y.equals(z)</code> returns <code>true</code>, then <code>x.equals(z)</code> should return <code>true</code>. </p>
</blockquote>

<p>Suppose you have this code:</p>

<pre><code>Employee a = new Employee(1, "John");
Employee b = new Employee(1, "James");
Employee c = new Employee(2, "James");
</code></pre>

<p>In this case with your equals operation <code>a.equals(b)</code> and <code>b.equals(c)</code>, but not <code>a.equals(c)</code>.</p>

<p>I'd suggest to rethink the implementation of <code>equals</code>. Probably your <code>Employee</code> has either <code>eId</code> or <code>eName</code> defined, so it might be better to add a <code>boolean</code> field which says whether <code>eId</code> or <code>eName</code> should be used. This way you can easily implement <code>equals</code> and <code>hashCode</code>. This way the implementation might be like this (assuming for simplicity that <code>eName</code> cannot be <code>null</code>):</p>

<pre><code>class Employee {
    boolean useName;
    int eId = 0;
    String eName;

    Employee(int id) {
        this.eId = id;
        this.useName = false;
    }

    Employee(String name) {
        this.eName = name;
        this.useName = true;
    }

    @Override
    public int hashCode() {
        return useName ? eName.length() * 1337 : eId * 7331;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Employee other = (Employee) obj;
        if (useName != other.useName)
            return false;
        if (useName) {
            if (eName.length() != other.eName.length())
                return false;
        } else {
            if (eId != other.eId)
                return false;
        }
        return true;
    }
}
</code></pre>
