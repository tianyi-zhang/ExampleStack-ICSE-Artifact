<p>Thanks to Mocialov Boris for the tip, here's the full answer for reference:</p>

<p>While it's not possible to update the mapping of a <code>SimpleAdapter</code>, you can extend <code>BaseAdapter</code> and manually implement the mapping. We provide a <code>setFromMapping()</code> method which updates the mapping between the data structure and the columns, and calls <code>notifyDataSetChanged()</code>. The new class <code>MultiColumnListAdapter</code> is then just used in the same way that a <code>SimpleAdapter</code> is used:</p>

<pre><code>public class MultiColumnListAdapter extends BaseAdapter {
    private List&lt;? extends Map&lt;String, ?&gt;&gt; mData;
    private int mResource;
    private String[] mFrom;
    private int[] mTo;
    private LayoutInflater mInflater;


    public MultiColumnListAdapter(Context context, List&lt;? extends Map&lt;String, ?&gt;&gt; data, int resource,
            String[] from, int[] to) {            
        mData = data;
        mResource = resource;
        mFrom = from;
        mTo = to;
        mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    }


    public View getView(int position, View convertView, ViewGroup parent) {
        // Get the main container view if it doesn't already exist, and call bindView
        View v;            
        if (convertView == null){
            v = mInflater.inflate(mResource, parent, false);
            final int count = mTo.length;
            final View[] columns = new View[count];
            for (int i = 0; i &lt; count; i++) {
                columns[i]=v.findViewById(mTo[i]);
            }
            v.setTag(columns);                
        } else {
            v = convertView;
        }
        bindView(position, v);
        return v;
    }

    private void bindView(int position, View v) {
        // Draw the content in the columns
        View[] columns = (View[]) v.getTag();
        final Map dataSet = mData.get(position);
        for (int i = 0; i &lt; mTo.length; i++) {
            TextView col = (TextView) columns[i];
            col.setText((String) dataSet.get(mFrom[i]));
        }           
    }

    public void setFromMapping(String[] from){
        mFrom = from;
        notifyDataSetChanged();
    }

    public String[] getFromMapping(){
        return mFrom;
    }        

    @Override
    public int getCount() {
        return mData.size();
    }


    @Override
    public Object getItem(int position) {
        return mData.get(position);
    }


    @Override
    public long getItemId(int position) {
        return position;
    }
}
</code></pre>
