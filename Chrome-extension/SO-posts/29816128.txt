<p>An efficient solution could be to use <a href="http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes" rel="nofollow">Sieve of Eratosthenes</a> to find out which number is prime below 2,000,000 (or any other number), and than post-process and sum them all:</p>

<pre><code>    int n = 2000000;
    boolean[] isPrime = new boolean[n];
    //preprocess - set up the array
    for (int i = 2; i&lt;n;i++) isPrime[i] = true;
    //run sieve:
    for (int i = 2; i &lt; (int) Math.sqrt(n) + 1; i++) { 
        if (isPrime[i]) {
            for (int j = 2; j*i &lt; n; j++) isPrime[i*j] = false;
        }
    }
    //sum primes:
    long sum = 0;
    for (int i = 2; i &lt; n; i++) { 
        if (isPrime[i]) sum+=i;
    }
    System.out.println(sum);
</code></pre>

<p>As opposed to checking for each number at a time if it is prime or not (which takes <code>O(sqrt(n))</code> - and by doing it for all numbers you get <code>O(nsqrt(n))</code>, in here you aggregate knowledge from previous iterations, effectively lowering the complexity to <code>O(nloglog(n))</code>, which is significantly faster for large enough values of <code>n</code>.
<br>This comes at a cost of <code>O(n)</code> additional space.</p>
