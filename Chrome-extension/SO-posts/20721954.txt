<p>No!<br>
But you can provide two PendigIntents that will be fired when message is sent and delivered.<br>
When calling sendTextMessage pass these PendigIntents:  </p>

<pre><code>//Get SmsManager
smsManager = SmsManager.getDefault();

//Define PendingIntent for sent
PendingIntent piSent = PendingIntent.getBroadcast(context, 0,new Intent("com.yourApp.SMS_SENT"),
                PendingIntent.FLAG_UPDATE_CURRENT);

//Define PendingIntent for delivered
PendingIntent piDelivered = PendingIntent.getBroadcast(context, 0,new Intent("com.yourApp.SMS_DELIVERED"),
                PendingIntent.FLAG_UPDATE_CURRENT);

//Send the message
smsManager.sendTextMessage(phoneNumber, null, messageText, piSent, piDelivered);  
</code></pre>

<p>Define two BroadcastReceivers to handle the PendingIntents:  </p>

<p><strong>BroadcastReceiver for Sent:</strong></p>

<pre><code>public class SentReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {

        switch (getResultCode()){
            case Activity.RESULT_OK:
                Toast toast = Toast.makeText(context, "Message Sent",Toast.LENGTH_SHORT);
                toast.show();
            break;
            case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
                toast = Toast.makeText(context, "Generic failure",Toast.LENGTH_LONG);
                toast.show();
            break;
            case SmsManager.RESULT_ERROR_NO_SERVICE:
                toast = Toast.makeText(context, "No service",Toast.LENGTH_LONG);
                toast.show();
            break;
            case SmsManager.RESULT_ERROR_NULL_PDU:
                toast = Toast.makeText(context, "Null PDU", Toast.LENGTH_LONG);
                toast.show();
            break;
            case SmsManager.RESULT_ERROR_RADIO_OFF:
                toast = Toast.makeText(context, "Radio off", Toast.LENGTH_LONG);
                toast.show();
            break;
        }
    }
}  
</code></pre>

<p><strong>BroadcastReceiver for Delivered:</strong>  </p>

<pre><code>public class DeliveredReceiver extends BroadcastReceiver {

    @Override
    public void onReceive(Context context, Intent intent) {

        switch (getResultCode()){

            case Activity.RESULT_OK:
                Toast toast = Toast.makeText(context, "Message Delivered", Toast.LENGTH_SHORT);
                toast.show();
            break;
            case Activity.RESULT_CANCELED:
                toast = Toast.makeText(context, "Message not Delivered", Toast.LENGTH_LONG);
                toast.show();
            break;
        }
    }
}  
</code></pre>

<p>Now only need to register these receivers for use them.</p>
