<p>Two things I can see. One, since glulookat is defined as <code>
gluLookAt   (    eyeX , eyeY , eyeZ , centerX , centerY , centerZ , upX , upY , upZ )</code></p>

<p>Your call should be changed to be <code>GLU.gluLookAt(gl, xrot, yrot, 0.0f, 0.0f, xrot, yrot, 0.0f, 1.0f, 0.0f);
</code>
Notice the new up vector '0.0, 1.0, 0.0'. Basically says the y-axis is where you want 'up' to be.</p>

<p>Also, you seem to be using rotation values for the rest of the call. The first triplet should be the position of where you are looking, and the second vector should be a reference position, normally where your viewer is. Look at <a href="http://developer.android.com/reference/android/opengl/GLU.html" rel="nofollow">http://developer.android.com/reference/android/opengl/GLU.html</a></p>

<p>Second issue, if you call loadIdentity after a glulookat call, I am pretty sure since it is loading the identity matrix, you will loose the transform that glulookat performs. So try adding glulookat after you have placed your geometry.</p>

<p>Here is what I am basically saying in code:</p>

<pre><code>public void onDrawFrame(GL10 gl) {

//cleaned up the reset code
gl.glMatrixMode(GL10.GL_MODELVIEW);     
gl.glLoadIdentity();                    
gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);    

//Check if the light flag has been set to enable/disable lighting
if(light) {
    gl.glEnable(GL10.GL_LIGHTING);
} else {
    gl.glDisable(GL10.GL_LIGHTING);
}

//Check if the blend flag has been set to enable/disable blending
if(blend) {
    gl.glEnable(GL10.GL_BLEND);         //Turn Blending On ( NEW )
    gl.glDisable(GL10.GL_DEPTH_TEST);   //Turn Depth Testing Off ( NEW )

} else {
    gl.glDisable(GL10.GL_BLEND);        //Turn Blending On ( NEW )
    gl.glEnable(GL10.GL_DEPTH_TEST);    //Turn Depth Testing Off ( NEW )
}

//Drawing
gl.glTranslatef(0.0f, 0.0f, z);         //Move z units into the screen
gl.glScalef(0.8f, 0.8f, 0.8f);          //Scale the Cube to 80 percent, otherwise it would be too large for the screen

//Rotate around the axis based on the rotation matrix (rotation, x, y, z)
gl.glRotatef(xrot, 1.0f, 0.0f, 0.0f);   //X
gl.glRotatef(yrot, 0.0f, 1.0f, 0.0f);   //Y

//change the perspective matrix to look at the rotating cube (0,0,z), from (0,0,0)
//with (0,1,0) as the up vector
GLU.gluLookAt(gl, 0.0f, 0.0, z, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);
cube.draw(gl, filter);                  //Draw the Cube 



//Change rotation factors
xrot += xspeed;
yrot += yspeed;


 }
</code></pre>
