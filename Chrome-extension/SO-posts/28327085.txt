<p>Simple Trick! User <code>VerticalSeekBar</code>:</p>

<pre><code>public class VerticalSeekBar extends SeekBar {
    /**
     * 
     */
    private OnSeekBarChangeListener onChangeListener = null;
    /**
     * 
     */
    private int lastProgress = 0;

    /**
     * 
     * @param context
     */
    public VerticalSeekBar(Context context) {
        super(context);
    }

    /**
     * 
     * @param context
     * @param attrs
     * @param defStyle
     */
    public VerticalSeekBar(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    /**
     * 
     * @param context
     * @param attrs
     */
    public VerticalSeekBar(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    /**
     * 
     */
    @Override
    protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
        super.onSizeChanged(height, width, oldHeight, oldWidth);
    }

    /**
     * 
     */
    @Override
    protected synchronized void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        super.onMeasure(heightMeasureSpec, widthMeasureSpec);

        this.setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());
    }

    /**
     * 
     */
    protected void onDraw(Canvas c) {
        c.rotate(-90);
        c.translate(-getHeight(), 0);

        super.onDraw(c);
    }

    /**
     * 
     */
    @Override
    public void setOnSeekBarChangeListener(OnSeekBarChangeListener onChangeListener){
        this.onChangeListener = onChangeListener;
    }

    /**
     * 
     */
    @SuppressLint("ClickableViewAccessibility")
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        if (!isEnabled()) {
            return false;
        }

        switch (event.getAction()) {
        case MotionEvent.ACTION_DOWN:
            this.onChangeListener.onStartTrackingTouch(this);

            this.setPressed(true);
            this.setSelected(true);

            break;
        case MotionEvent.ACTION_MOVE:
            super.onTouchEvent(event);

            int progress = getMax() - (int) (getMax() * event.getY() / getHeight());
            if(progress &lt; 0) { progress = 0; }
            if(progress &gt; getMax()) { progress = getMax(); }

            this.setProgress(progress);

            if(progress != this.lastProgress) {
                this.lastProgress = progress;
                this.onChangeListener.onProgressChanged(this, progress, true);
            }

            this.onSizeChanged(getWidth(), getHeight() , 0, 0);
            this.setPressed(true);
            this.setSelected(true);

            break;
        case MotionEvent.ACTION_UP:
            this.onChangeListener.onStopTrackingTouch(this);

            this.setPressed(false);
            this.setSelected(false);

            break;
        case MotionEvent.ACTION_CANCEL:
            super.onTouchEvent(event);

            this.setPressed(false);
            this.setSelected(false);

            break;
        }

        return true;
    }

    /**
     * 
     * @param progress
     */
    public synchronized void setProgressAndThumb(int progress) {
        this.setProgress(progress);
        this.onSizeChanged(getWidth(), getHeight() , 0, 0);

        if(progress != this.lastProgress) {
            this.lastProgress = progress;
            this.onChangeListener.onProgressChanged(this, progress, true);
        }
    }

    /**
     * 
     * @return
     */
    public synchronized int getMaximum() {
        return this.getMax();
    }

    /**
     * 
     * @param maximum
     */
    public synchronized void setMaximum(int maximum) {
        this.setMax(maximum);
    }
}
</code></pre>
