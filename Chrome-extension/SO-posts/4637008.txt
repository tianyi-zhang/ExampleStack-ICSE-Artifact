<p>What it basically does is calling the <code>SQLiteQueryBuilder#buildQueryString</code> static method, so you can try to call that method passing the correct parameters. <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/2.3_r1/android/database/sqlite/SQLiteQueryBuilder.java#SQLiteQueryBuilder.buildQueryString%28boolean%2Cjava.lang.String%2Cjava.lang.String%5B%5D%2Cjava.lang.String%2Cjava.lang.String%2Cjava.lang.String%2Cjava.lang.String%2Cjava.lang.String%29" rel="nofollow">This</a> is how the method looks like:</p>

<pre><code>public static String buildQueryString(
        boolean distinct, String tables, String[] columns, String where,
        String groupBy, String having, String orderBy, String limit) {
    if (TextUtils.isEmpty(groupBy) &amp;&amp; !TextUtils.isEmpty(having)) {
        throw new IllegalArgumentException(
                "HAVING clauses are only permitted when using a groupBy clause");
    }
    if (!TextUtils.isEmpty(limit) &amp;&amp; !sLimitPattern.matcher(limit).matches()) {
        throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);
    }

    StringBuilder query = new StringBuilder(120);

    query.append("SELECT ");
    if (distinct) {
        query.append("DISTINCT ");
    }
    if (columns != null &amp;&amp; columns.length != 0) {
        appendColumns(query, columns);
    } else {
        query.append("* ");
    }
    query.append("FROM ");
    query.append(tables);
    appendClause(query, " WHERE ", where);
    appendClause(query, " GROUP BY ", groupBy);
    appendClause(query, " HAVING ", having);
    appendClause(query, " ORDER BY ", orderBy);
    appendClause(query, " LIMIT ", limit);

    return query.toString();
}
</code></pre>
