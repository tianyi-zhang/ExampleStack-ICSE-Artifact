<p>There are different way to check if the application is build using debug or release certificate, but the following way seems best to me.</p>

<p>According to the info in Android documentation  <a href="http://developer.android.com/tools/publishing/app-signing.html">Signing Your Application</a>, debug key contain following subject distinguished name:  "<strong>CN=Android Debug,O=Android,C=US</strong>".  We can use this information to test if package is signed with debug key without hardcoding debug key signature into our code.</p>

<p>Given:</p>

<pre><code>import android.content.pm.Signature;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
</code></pre>

<p>You can implement an isDebuggable method this way:</p>

<pre><code>private static final X500Principal DEBUG_DN = new X500Principal("CN=Android Debug,O=Android,C=US");
private boolean isDebuggable(Context ctx)
{
    boolean debuggable = false;

    try
    {
        PackageInfo pinfo = ctx.getPackageManager().getPackageInfo(ctx.getPackageName(),PackageManager.GET_SIGNATURES);
        Signature signatures[] = pinfo.signatures;

        CertificateFactory cf = CertificateFactory.getInstance("X.509");

        for ( int i = 0; i &lt; signatures.length;i++)
        {   
            ByteArrayInputStream stream = new ByteArrayInputStream(signatures[i].toByteArray());
            X509Certificate cert = (X509Certificate) cf.generateCertificate(stream);       
            debuggable = cert.getSubjectX500Principal().equals(DEBUG_DN);
            if (debuggable)
                break;
        }
    }
    catch (NameNotFoundException e)
    {
        //debuggable variable will remain false
    }
    catch (CertificateException e)
    {
        //debuggable variable will remain false
    }
    return debuggable;
}
</code></pre>
