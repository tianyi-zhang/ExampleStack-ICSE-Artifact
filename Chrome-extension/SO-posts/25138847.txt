<p>Finally this is the code that worked with the help of MysticMagic and Nishanthi Grashia</p>

<pre><code>Set setA;
setA = new HashSet();

public void getCallLog() {

        try {
            final String[] projection = null;
            final String selection = null;
            final String[] selectionArgs = null;
            final String sortOrder = "DATE DESC";
            final Cursor cursor = this.getContentResolver().query(
                    Uri.parse("content://call_log/calls"), projection,
                    selection, selectionArgs, sortOrder);
            if (cursor != null) {
                // Loop through the call log.
                while (cursor.moveToNext()) {
                    // Common Call Log Items
                    String callNumber = cursor
                            .getString(cursor
                                    .getColumnIndex(android.provider.CallLog.Calls.NUMBER));

                    setA.add(callNumber);

                }

                generateList();
            }

        } catch (Exception e) {

        }

    }

    @SuppressLint("NewApi")
    private void generateList() {
        // TODO Auto-generated method stub
        try {
            Object[] calllist = new String[setA.size()];

            calllist = setA.toArray();
            String scalllist[] = Arrays.copyOf(calllist, calllist.length,
                    String[].class);
            for (int i = 0; i &lt; scalllist.length; i++) {
                scalllist[i] = scalllist[i] + "  "
                        + getContactName(this, scalllist[i]);
            }
            final Dialog d = new Dialog(this);
            d.setContentView(R.layout.dialog1);
            d.setTitle("Choose from Call Log...");

            final ListView lv1 = (ListView) d.findViewById(R.id.listView1);
            ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this,
                    android.R.layout.simple_list_item_1, android.R.id.text1,
                    scalllist);

            lv1.setAdapter(adapter);
            lv1.setOnItemClickListener(new OnItemClickListener() {

                @Override
                public void onItemClick(AdapterView&lt;?&gt; arg0, View arg1,
                        int arg2, long arg3) {
                    // TODO Auto-generated method stub
                    String clickednumber[] = (lv1.getItemAtPosition(arg2)
                            .toString()).split("  ");
                    usernumber.setText(clickednumber[0]);
                    try {
                        username.setText(clickednumber[1]);
                    } catch (ArrayIndexOutOfBoundsException e) {
                        username.setText(" ");
                    }
                    d.dismiss();
                }
            });
            d.show();
        } catch (Exception e) {

        }
    }
private String getContactName(Context context, String number) {

        String name = null;
        try {

            // define the columns I want the query to return
            String[] projection = new String[] {
                    ContactsContract.PhoneLookup.DISPLAY_NAME,
                    ContactsContract.PhoneLookup._ID };

            // encode the phone number and build the filter URI
            Uri contactUri = Uri.withAppendedPath(
                    ContactsContract.PhoneLookup.CONTENT_FILTER_URI,
                    Uri.encode(number));

            // query time
            Cursor cursor = context.getContentResolver().query(contactUri,
                    projection, null, null, null);

            if (cursor != null) {
                if (cursor.moveToFirst()) {
                    name = cursor
                            .getString(cursor
                                    .getColumnIndex(ContactsContract.PhoneLookup.DISPLAY_NAME));

                } else {
                    name = "  ";
                }
                cursor.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return name;

    }
</code></pre>
