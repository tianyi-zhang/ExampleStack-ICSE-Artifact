<pre><code>public class ZoomableImageView extends View {
    private static final String TAG = "ZoomableImageView";     float trans=80; 

    public static Bitmap imgBitmap = null;

  Boolean zom=false;
    private static WeakReference&lt;Context&gt; mContext;

    //Matrices will be used to move and zoom image
    Matrix matrix = new Matrix();    
    Matrix savedMatrix = new Matrix();   

    PointF start = new PointF();      



    //We can be in one of these 3 states
    static final int NONE = 0;
    static final int DRAG = 1;
    static final int ZOOM = 2;
    int mode = NONE;

    //For animating stuff  


    float easing = 0.2f;  
    boolean isAnimating = false;int flag=0;

    float scaleDampingFactor = 0.5f;
    private WeakReference&lt;Bitmap&gt; resizedBitmap,mBitmap;
    //For pinch and zoom
    float oldDist = 1f;  
    PointF mid = new PointF();Bitmap bms;

    private Handler mHandler = new Handler();      

    float minScale;
    float maxScale = 8.0f;
    public static int index=1000; 
    float wpRadius = 25.0f;
    float wpInnerRadius = 20.0f;


    public static final int DEFAULT_SCALE_FIT_INSIDE = 0;
    public static final int DEFAULT_SCALE_ORIGINAL = 1;  



    public int getDefaultScale() {
        return defaultScale;
    }

    public void setDefaultScale(int defaultScale) {
        this.defaultScale = defaultScale;
    }

    public ZoomableImageView(Context context) {

        super(context); 

        con=context;
        setFocusable(true);
        setFocusableInTouchMode(true);



      File file = new File(HomePage.sdfile + "/" + index+".jpg");  


  Options options = new BitmapFactory.Options();
  try{

      options.inScaled = false;
      options.inDither = false;
      options.inPreferredConfig = Bitmap.Config.ARGB_8888;

   imgBitmap=decodeFile(file);  
              }
   catch(OutOfMemoryError e){ 
       System.out.println("out of memory");
       flag=1;

           System.out.println("clearing bitmap????????????");
           if (imgBitmap!=null) { 
           this.setBackgroundResource(0);
           this.clearAnimation();
       imgBitmap.recycle(); 
        imgBitmap = null;}




   }


        screenDensity = context.getResources().getDisplayMetrics().density;

        initPaints();
        gestureDetector = new GestureDetector(new MyGestureDetector());        
    }

    public ZoomableImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
      System.out.println("zoomableimageview");
        screenDensity = context.getResources().getDisplayMetrics().density;      
        initPaints();
        gestureDetector = new GestureDetector(new MyGestureDetector());

        defaultScale = ZoomableImageView.DEFAULT_SCALE_FIT_INSIDE; 
    }

    private void initPaints() {
        background = new Paint();
        System.out.println("initPaints");
    }

    @Override
    protected void onSizeChanged(int width, int height, int oldWidth, int oldHeight) {
        super.onSizeChanged(width, height, oldWidth, oldHeight);
        System.out.println("onsizechanged");

        //Reset the width and height. Will draw bitmap and change
        containerWidth = width;
        containerHeight = height;

        if(imgBitmap != null) {
            int imgHeight = imgBitmap.getHeight();
            int imgWidth = imgBitmap.getWidth();

            float scale;
            int initX = 0;
            int initY = 0;          

            if(defaultScale == ZoomableImageView.DEFAULT_SCALE_FIT_INSIDE) {              
                if(imgWidth &gt; containerWidth) {          
                    scale = (float)containerWidth / imgWidth;          
                    float newHeight = imgHeight * scale;          
                    initY = (containerHeight - (int)newHeight)/2;

                    matrix.setScale(scale, scale);
                    matrix.postTranslate(0, initY);
                    System.out.println("scale"+scale);
                }
                else {          
                    scale = (float)containerHeight / imgHeight; 
                    float newWidth = imgWidth * scale;
                    initX = (containerWidth - (int)newWidth)/2;

                    matrix.setScale(scale, scale);
                    matrix.postTranslate(initX, 0);
                }

                curX = initX;
                curY = initY;

                currentScale = scale;
                minScale = scale;
                System.out.println("scale"+scale);
            }
            else {
                if(imgWidth &gt; containerWidth) {                                  
                    initY = (containerHeight - (int)imgHeight)/2;                  
                    matrix.postTranslate(0, initY);
                }
                else {                              
                    initX = (containerWidth - (int)imgWidth)/2;                  
                    matrix.postTranslate(initX, 0);
                }

                curX = initX;
                curY = initY;

                currentScale = 1.0f;
                minScale = 1.0f;  


            }
            System.out.println("currentscale"+currentScale);

            System.out.println("minscale"+minScale);


            invalidate();          
        }
    }

    @Override
    protected void onDraw(Canvas canvas) { 
        System.out.println("ondraw");

        if(imgBitmap != null &amp;&amp; canvas != null)
        {                                          
            canvas.drawBitmap(imgBitmap, matrix, background);     
            System.out.println("image not null---------------------");

        }
        if(flag==1){
            System.out.println("image null*************************");
            Intent intent = new Intent(Intent.ACTION_MAIN);
           intent.addCategory(Intent.CATEGORY_HOME);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

            con.startActivity(intent);
            System.exit(0);
        }

    }

    //Checks and sets the target image x and y co-ordinates if out of bounds
    private void checkImageConstraints() {
        System.out.println("checkimageconstans");
        if(imgBitmap == null) {
            return;
        }

        float[] mvals = new float[9];
        matrix.getValues(mvals);

        currentScale = mvals[0];

        if(currentScale &lt; minScale) {                              
            float deltaScale = minScale / currentScale;                  
            float px = containerWidth/2;
            float py = containerHeight/2;          
            matrix.postScale(deltaScale, deltaScale, px, py);
            invalidate();
        }      

        matrix.getValues(mvals);
        currentScale = mvals[0];
        curX = mvals[2];
        curY = mvals[5];

        int rangeLimitX = containerWidth - (int)(imgBitmap.getWidth() * currentScale);
        int rangeLimitY = containerHeight - (int)(imgBitmap.getHeight() * currentScale);


        boolean toMoveX = false;
        boolean toMoveY = false;  

        if(rangeLimitX &lt; 0) {
            if(curX &gt; 0) {
                targetX = 0;
                toMoveX = true;
            }
            else if(curX &lt; rangeLimitX) {
                targetX = rangeLimitX;
                toMoveX = true;
            }
        }
        else {
            targetX = rangeLimitX / 2;
            toMoveX = true;
        }

        if(rangeLimitY &lt; 0) {
            if(curY &gt; 0) {
                targetY = 0;
                toMoveY = true;
            }
            else if(curY &lt; rangeLimitY) {
                targetY = rangeLimitY;
                toMoveY = true;
            }
        }
        else {
            targetY = rangeLimitY / 2;
            toMoveY = true;
        }

        if(toMoveX == true || toMoveY == true) {
            if(toMoveY == false) {
                targetY = curY;
            }
            if(toMoveX == false) {
                targetX = curX;
            }          

            //Disable touch event actions
            isAnimating = true;
            //Initialize timer          
            mHandler.removeCallbacks(mUpdateImagePositionTask);
            mHandler.postDelayed(mUpdateImagePositionTask, 100);
        }
    }      


    @Override
    public boolean onTouchEvent(MotionEvent event) {  
        System.out.println("onTouch");
        flag=0;
        if(gestureDetector.onTouchEvent(event)) {
            return true;
        }

        if(isAnimating == true) {
            return true;
        }

        //Handle touch events here      
        float[] mvals = new float[9];
        switch(event.getAction() &amp; MotionEvent.ACTION_MASK) {
        case MotionEvent.ACTION_DOWN:
            if(isAnimating == false) {
                savedMatrix.set(matrix);
                start.set(event.getX(), event.getY());          
                mode = DRAG;              
            }
        break;

        case MotionEvent.ACTION_POINTER_DOWN:
            oldDist = spacing(event);          
            if(oldDist &gt; 10f) {
                savedMatrix.set(matrix);
                midPoint(mid, event);
                mode = ZOOM;
            }
        break;

        case MotionEvent.ACTION_UP:
        case MotionEvent.ACTION_POINTER_UP:
            mode = NONE;

            matrix.getValues(mvals);
            curX = mvals[2];
            curY = mvals[5];
            currentScale = mvals[0];

            if(isAnimating == false) {                                      
                checkImageConstraints();
            }
        break;

        case MotionEvent.ACTION_MOVE:          
            if(mode == DRAG &amp;&amp; isAnimating == false) {
                matrix.set(savedMatrix);
                float diffX = event.getX() - start.x;
                float diffY = event.getY() - start.y;

                matrix.postTranslate(diffX, diffY);

                matrix.getValues(mvals);
                curX = mvals[2];
                curY = mvals[5];
                currentScale = mvals[0];
            }
            else if(mode == ZOOM &amp;&amp; isAnimating == false) {
                System.out.println("for zooming");
                zom=true;
                float newDist = spacing(event);              
                if(newDist &gt; 10f) {
                    matrix.set(savedMatrix);
                    float scale = newDist / oldDist;                  
                    matrix.getValues(mvals);
                    currentScale = mvals[0];

                    if(currentScale * scale &lt;= minScale) {
                        matrix.postScale(minScale/currentScale, minScale/currentScale, mid.x, mid.y);
                    }                  
                    else if(currentScale * scale &gt;= maxScale) {
                        matrix.postScale(maxScale/currentScale, maxScale/currentScale, mid.x, mid.y);
                    }
                    else {
                        matrix.postScale(scale, scale, mid.x, mid.y);  
                    }


                    matrix.getValues(mvals);
                    curX = mvals[2];
                    curY = mvals[5];
                    currentScale = mvals[0];   
                   trans=scale;
                }
            }

        break;                              
        }

        //Calculate the transformations and then invalidate
        invalidate();

        return true;
    }

    private float spacing(MotionEvent event) {
        System.out.println("spacing");
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
        return FloatMath.sqrt(x * x + y * y);
    }

    private void midPoint(PointF point, MotionEvent event) {
        System.out.println("midpoint");
        float x = event.getX(0) + event.getX(1);
        float y = event.getY(0) + event.getY(1);
        point.set(x/2, y/2);
    }

    public void setImageBitmap(Bitmap b) {   
        System.out.println("setImageBitmap");
        if(b != null) {
            imgBitmap = b;              

            containerWidth = getWidth();
            containerHeight = getHeight();

            int imgHeight = imgBitmap.getHeight();
            int imgWidth = imgBitmap.getWidth();

            float scale;
            int initX = 0;
            int initY = 0;

            matrix.reset();

            if(defaultScale == ZoomableImageView.DEFAULT_SCALE_FIT_INSIDE) {              
                if(imgWidth &gt; containerWidth) {          
                    scale = (float)containerWidth / imgWidth;          
                    float newHeight = imgHeight * scale;          
                    initY = (containerHeight - (int)newHeight)/2;

                    matrix.setScale(scale, scale);
                    matrix.postTranslate(0, initY);
                }
                else {          
                    scale = (float)containerHeight / imgHeight;
                    float newWidth = imgWidth * scale;
                    initX = (containerWidth - (int)newWidth)/2;

                    matrix.setScale(scale, scale);
                    matrix.postTranslate(initX, 0);
                }

                curX = initX;
                curY = initY;

                currentScale = scale;
                minScale = scale;
            }
            else {
                if(imgWidth &gt; containerWidth) {
                    initX = 0;
                    if(imgHeight &gt; containerHeight) {                      
                        initY = 0;
                    }
                    else {                      
                        initY = (containerHeight - (int)imgHeight)/2;
                    }

                    matrix.postTranslate(0, initY);
                }
                else {                              
                    initX = (containerWidth - (int)imgWidth)/2;
                    if(imgHeight &gt; containerHeight) {
                        initY = 0;
                    }
                    else {
                        initY = (containerHeight - (int)imgHeight)/2;
                    }
                    matrix.postTranslate(initX, 0);
                }

                curX = initX;
                curY = initY;

                currentScale = .5f;
                minScale = .5f;              
            }

            invalidate();          
        }
        else {
            Log.d(TAG, "bitmap is null");
        }
    }

    public Bitmap getPhotoBitmap() { 

        System.out.println("getphotobitmap");
        return imgBitmap;
    }


    private Runnable mUpdateImagePositionTask = new Runnable() {
        public void run() { 
            //zoomout();
             if(zom==true &amp;&amp; trans&lt;1.0f)
             {PageCurlView.zoom=0;

               Intent i = new Intent();
                i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                i.setClass(getContext(), StandaloneExample.class);   
                getContext().startActivity(i);

                zoomout();

                if(imgBitmap!=null){
                imgBitmap.recycle();
                imgBitmap = null;}
//                  
                try {
                    this.finalize();
                } catch (Throwable e) {
                    // TODO Auto-generated catch block
                    System.out.println("finalizer problem");   
                    e.printStackTrace();
                }

//                  


             } 
            System.out.println("run");
            float[] mvals;

            if(Math.abs(targetX - curX) &lt; 5 &amp;&amp; Math.abs(targetY - curY) &lt; 5) {
                isAnimating = false;
                mHandler.removeCallbacks(mUpdateImagePositionTask);

                mvals = new float[9];
                matrix.getValues(mvals);

                currentScale = mvals[0];
                curX = mvals[2];
                curY = mvals[5];

                //Set the image parameters and invalidate display
                float diffX = (targetX - curX);
                float diffY = (targetY - curY);

                matrix.postTranslate(diffX, diffY);
            }
            else {
                isAnimating = true;
                mvals = new float[9];
                matrix.getValues(mvals);

                currentScale = mvals[0];
                curX = mvals[2];
                curY = mvals[5];

                //Set the image parameters and invalidate display
                float diffX = (targetX - curX) * 0.3f;
                float diffY = (targetY - curY) * 0.3f;

                matrix.postTranslate(diffX, diffY);              
                mHandler.postDelayed(this, 25);              
            }

            invalidate();          
        }
    };

    private Runnable mUpdateImageScale = new Runnable() {
        public void run() {  
            System.out.println("run2");
            float transitionalRatio = targetScale / currentScale;          
            float dx;
            if(Math.abs(transitionalRatio - 1) &gt; 0.05) {
                isAnimating = true;              
                if(targetScale &gt; currentScale) {                                      
                    dx = transitionalRatio - 1;
                    scaleChange = 1 + dx * 0.2f;

                    currentScale *= scaleChange;

                    if(currentScale &gt; targetScale) {
                        currentScale = currentScale / scaleChange;
                        scaleChange = 1;
                    }
                }
                else {                                  
                    dx = 1 - transitionalRatio;                  
                    scaleChange = 1 - dx * 0.5f;
                    currentScale *= scaleChange;

                    if(currentScale &lt; targetScale) {
                        currentScale = currentScale / scaleChange;
                        scaleChange = 1;
                    }
                }


                if(scaleChange != 1) {
                    matrix.postScale(scaleChange, scaleChange, targetScaleX, targetScaleY);              
                    mHandler.postDelayed(mUpdateImageScale, 15);
                    invalidate();
                }
                else {
                    isAnimating = false;
                    scaleChange = 1;                  
                    matrix.postScale(targetScale/currentScale, targetScale/currentScale, targetScaleX, targetScaleY);
                    currentScale = targetScale;
                    mHandler.removeCallbacks(mUpdateImageScale);
                    invalidate();
                    checkImageConstraints();
                }              
            }
            else {
                isAnimating = false;
                scaleChange = 1;              
                matrix.postScale(targetScale/currentScale, targetScale/currentScale, targetScaleX, targetScaleY);
                currentScale = targetScale;
                mHandler.removeCallbacks(mUpdateImageScale);
                invalidate();
                checkImageConstraints();
            }                              
        }
    };

   /** Show an event in the LogCat view, for debugging */
   private void dumpEvent(MotionEvent event) {
       System.out.println("dumpevent");
      String names[] = { "DOWN", "UP", "MOVE", "CANCEL", "OUTSIDE", "POINTER_DOWN", "POINTER_UP", "7?", "8?", "9?" };
      StringBuilder sb = new StringBuilder();
      int action = event.getAction();
      int actionCode = action &amp; MotionEvent.ACTION_MASK;
      sb.append("event ACTION_").append(names[actionCode]);
      if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {
         sb.append("(pid ").append(action &gt;&gt; MotionEvent.ACTION_POINTER_ID_SHIFT);
         sb.append(")");
      }
      sb.append("[");

      for (int i = 0; i &lt; event.getPointerCount(); i++) {
         sb.append("#").append(i);
         sb.append("(pid ").append(event.getPointerId(i));
         sb.append(")=").append((int) event.getX(i));
         sb.append(",").append((int) event.getY(i));
         if (i + 1 &lt; event.getPointerCount())
            sb.append(";");
      }
      sb.append("]");
   }

   class MyGestureDetector extends SimpleOnGestureListener {

        @Override
        public boolean onDoubleTap(MotionEvent event) {  
            System.out.println("simpleOnGestureListener");
            if(isAnimating == true) {
                return true;
            }

            scaleChange = 1;
            isAnimating = true;
            targetScaleX = event.getX();
            targetScaleY = event.getY();

            if(Math.abs(currentScale - maxScale) &gt; 0.1) {          
                targetScale = maxScale;
            }
            else {
                targetScale = minScale;
            }
            targetRatio = targetScale / currentScale;
            mHandler.removeCallbacks(mUpdateImageScale);
            mHandler.post(mUpdateImageScale);          
            return true;
        }

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            System.out.println("onfling");
            return super.onFling(e1, e2, velocityX, velocityY);
        }

        @Override
        public boolean onDown(MotionEvent e) {
            System.out.println("ondown");
            return false;
        }



   }
   public Bitmap decodeFile(File f) {

        try {
            // decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            o.inDither=false;                     //Disable Dithering mode
            o.inPurgeable=true;                   //Tell to gc that whether it needs free memory, the Bitmap can be cleared
            o.inInputShareable=true; 
            o.inPreferredConfig = Bitmap.Config.ARGB_8888;
            //Which kind of reference will be used to recover the Bitmap data after being clear, when it will be used in the future
            o.inTempStorage=new byte[16*1024]; 

            BitmapFactory.decodeStream(new FileInputStream(f), null, o); 

            // Find the correct scale value. It should be the power of 2.
             int REQUIRED_SIZE = 300;

            int width_tmp = o.outWidth, height_tmp = o.outHeight; 

            if(REQUIRED_SIZE  &gt; width_tmp)
            REQUIRED_SIZE  = width_tmp;
            int scale = 1;
            while (true) {
                if (width_tmp / 2 &lt; REQUIRED_SIZE
                        || height_tmp / 2 &lt; REQUIRED_SIZE) 
                    break; 
                width_tmp /= 2;
                height_tmp /= 2;
                scale *= 2;
                System.out.println(scale+"______________________________-");  
            }

            // decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();

            o2.inDither=false;
            o2.inScaled = false;

            o2.inPurgeable=true;                   //Tell to gc that whether it needs free memory, the Bitmap can be cleared
            o2.inInputShareable=true; 
            //Which kind of reference will be used to recover the Bitmap data after being clear, when it will be used in the future
            o2.inTempStorage=new byte[24*1024]; 
            o2.inSampleSize = 2; 
            o2.outWidth = width_tmp;
            o2.outHeight = height_tmp;
            o2.inPreferredConfig = Bitmap.Config.ARGB_8888;
            try {
                BitmapFactory.Options.class.getField("inNativeAlloc").setBoolean(o2,true);    

                } catch (IllegalArgumentException e) {
                    e.printStackTrace();
                } catch (SecurityException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {  
                    e.printStackTrace();
                } catch (NoSuchFieldException e) {
                    e.printStackTrace();
                }


            o2.inJustDecodeBounds = false;
            return BitmapFactory.decodeStream(new FileInputStream(f), null,  
                    o2);
        } 

        catch (FileNotFoundException e) {
            System.out.println("file not found");
        }
        return null;

    }
//   @Override
//protected void onDetachedFromWindow() {
//  // TODO Auto-generated method stub
//     System.out.println("ondetatched from wind");
//  super.onDetachedFromWindow();
//  if (imgBitmap != null) {
//  imgBitmap.recycle();
//  imgBitmap=null;}
//  
//}
   public void zoomout(){
       if(zom==true &amp;&amp; trans&lt;1.0f)
       {PageCurlView.zoom=0;

//         Intent i = new Intent();
//          i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
//          i.setClass(getContext(), StandaloneExample.class);   
//          getContext().startActivity(i);


            if(imgBitmap!=null){
                this.setBackgroundResource(0);
                this.clearAnimation();
                this.setBackgroundResource(0);
                   this.clearAnimation();
            imgBitmap.recycle();
            imgBitmap = null;}
//          
            try {
                this.finalize();
            } catch (Throwable e) {
                // TODO Auto-generated catch block
                System.out.println("finalizer problem");   
                e.printStackTrace();
            }



       } 
   }

}
</code></pre>

<p>you can include this class to your package and replace  in your xml file with </p>
