<p>This seems like homework (or an interview question?). If that's the case and you are required to use arrays rather than the built in methods with the Java Collection Objects, (or even if not, really), the answer is the <a href="http://en.wikipedia.org/wiki/Fisher-Yates_shuffle" rel="nofollow">Fisher-Yates Shuffle algorithm</a> </p>

<p>The modern in-place shuffle is:</p>

<pre><code>To shuffle an array a of n elements (indexes 0..n-1):
for i from n ? 1 downto 1 do
   j ? random integer with 0 ? j ? i
   exchange a[j] and a[i]
</code></pre>

<p>(I'd have to check, but  I suspect this is what Java uses under the hood for its <code>shuffle()</code> methods).</p>

<p><strong>Edit because it's fun to implement algorithms:</strong></p>

<p>In java, this would be:</p>

<pre><code>public static void main(String[] args) {

    int[] a = new int[15];
    for (int i = 1; i &lt;= 15; i++)
    {
        a[i-1] = i;
    }

    Random rg = new Random();
    int tmp;
    for (int i = 14; i &gt; 0; i--)
    {
        int r = rg.nextInt(i+1);
        tmp = a[r];
        a[r] = a[i];
        a[i] = tmp;
    }

    for (int i = 0; i &lt; 15; i++)
        System.out.print(a[i] + " ");

    System.out.println();


}
</code></pre>

<p>And ... this can be further optimized using the inside-out version of the algo since you're wanting to insert a known series of numbers in random order. <strong>The following is the best way to achieve what you stated as wanting to do as there are no extra copies being made such as when creating an <code>ArrayList</code> and having it copy back out to an array</strong>. </p>

<pre><code>a = new int[15];
Random rg = new Random();
for (int i = 0; i &lt; 15; i++)
{
    int r = rg.nextInt(i+1);
    a[i] = a[r];
    a[r] = i+1;
}
</code></pre>
