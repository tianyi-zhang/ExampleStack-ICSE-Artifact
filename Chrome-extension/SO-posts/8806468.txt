<p>I slightly modified and repaired solution from <strong><a href="http://stackoverflow.com/a/5742763/492624">Thomas Fankhauser</a></strong></p>

<p>Whole system consists from two files, <strong>SwipeInterface</strong> and <strong>ActivitySwipeDetector</strong></p>

<hr>

<p><em>SwipeInterface.java</em></p>

<pre><code>import android.view.View;

public interface SwipeInterface {

    public void bottom2top(View v);

    public void left2right(View v);

    public void right2left(View v);

    public void top2bottom(View v);

}
</code></pre>

<hr>

<p><em>Detector</em></p>

<pre><code>import android.util.Log;
import android.view.MotionEvent;
import android.view.View;

public class ActivitySwipeDetector implements View.OnTouchListener {

    static final String logTag = "ActivitySwipeDetector";
    private SwipeInterface activity;
    static final int MIN_DISTANCE = 100;
    private float downX, downY, upX, upY;

    public ActivitySwipeDetector(SwipeInterface activity){
        this.activity = activity;
    }

    public void onRightToLeftSwipe(View v){
        Log.i(logTag, "RightToLeftSwipe!");
        activity.right2left(v);
    }

    public void onLeftToRightSwipe(View v){
        Log.i(logTag, "LeftToRightSwipe!");
        activity.left2right(v);
    }

    public void onTopToBottomSwipe(View v){
        Log.i(logTag, "onTopToBottomSwipe!");
        activity.top2bottom(v);
    }

    public void onBottomToTopSwipe(View v){
        Log.i(logTag, "onBottomToTopSwipe!");
        activity.bottom2top(v);
    }

    public boolean onTouch(View v, MotionEvent event) {
        switch(event.getAction()){
        case MotionEvent.ACTION_DOWN: {
            downX = event.getX();
            downY = event.getY();
            return true;
        }
        case MotionEvent.ACTION_UP: {
            upX = event.getX();
            upY = event.getY();

            float deltaX = downX - upX;
            float deltaY = downY - upY;

            // swipe horizontal?
            if(Math.abs(deltaX) &gt; MIN_DISTANCE){
                // left or right
                if(deltaX &lt; 0) { this.onLeftToRightSwipe(v); return true; }
                if(deltaX &gt; 0) { this.onRightToLeftSwipe(v); return true; }
            }
            else {
                Log.i(logTag, "Swipe was only " + Math.abs(deltaX) + " long, need at least " + MIN_DISTANCE);
            }

            // swipe vertical?
            if(Math.abs(deltaY) &gt; MIN_DISTANCE){
                // top or down
                if(deltaY &lt; 0) { this.onTopToBottomSwipe(v); return true; }
                if(deltaY &gt; 0) { this.onBottomToTopSwipe(v); return true; }
            }
            else {
                Log.i(logTag, "Swipe was only " + Math.abs(deltaX) + " long, need at least " + MIN_DISTANCE);
                v.performClick();
            }
        }
        }
        return false;
    }

}
</code></pre>

<hr>

<p>it is used like this:</p>

<pre><code>ActivitySwipeDetector swipe = new ActivitySwipeDetector(this);
LinearLayout swipe_layout = (LinearLayout) findViewById(R.id.swipe_layout);
swipe_layout.setOnTouchListener(swipe);
</code></pre>

<hr>

<p>And in implementing <code>Activity</code> you need to implement methods from <strong>SwipeInterface</strong>, and you can find out on which View the <em>Swipe Event</em> was called.</p>

<pre><code>@Override
public void left2right(View v) {
    switch(v.getId()){
        case R.id.swipe_layout:
            // do your stuff here
        break;
    }       
}
</code></pre>
