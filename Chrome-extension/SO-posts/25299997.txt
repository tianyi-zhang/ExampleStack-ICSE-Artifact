<p>Hope this answer will help you.</p>

<p>Take A new Picture Code:</p>

<pre><code>import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import android.app.Activity;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Log;

public class CameraUtil  extends Activity {

    private final static int REQUEST_TAKE_PHOTO=200;
    private final String TAG = "Camera";

    String mCurrentPhotoPath;
    String path;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if(! isDeviceSupportCamera()){
            Log.e(TAG,"Camera Not Supported");
            Intent returnFromCameraIntent = new Intent();
            setResult(RESULT_CANCELED,returnFromCameraIntent);     
            finish();
        }
        else{
            dispatchTakePictureIntent();
        }

    }

     private void dispatchTakePictureIntent() {
        Log.i(TAG,"Dispatch Take Picture Intent");

        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        // Ensure that there's a camera activity to handle the intent       
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            // Create the File where the photo should go      
                File photoFile = null;
                try{
                    photoFile = createImageFile();
                }catch (IOException ex) {
                    // Error occurred while creating the File
                    ex.printStackTrace();
                    Log.i(TAG,"Error occurred while creating the File");
                }
                // Continue only if the File was successfully created
                if (photoFile != null) {
                    //  fileUri = getOutputMediaFileUri(MEDIA_TYPE_IMAGE);  
                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(photoFile));
                    startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);
                }       
        }
     }


        @Override
        protected void onActivityResult(int requestCode, int resultCode, Intent data) {
            super.onActivityResult(requestCode, resultCode, data);
            Log.i(TAG,"On Activity Result");
            File file= new File(path);  

            if (requestCode == REQUEST_TAKE_PHOTO  &amp;&amp; resultCode == RESULT_OK &amp;&amp; path!=null &amp;&amp; file.length()&gt;0) {
                        Intent returnFromCameraIntent = new Intent();
                        returnFromCameraIntent.putExtra("picturePath",path);
                        setResult(RESULT_OK,returnFromCameraIntent);  
                        finish();
                        Log.i(TAG,"Camera Closed");
                }else{
                    Log.i(TAG,"On Result CANCEL");
                    // cancelled Image capture
                    try{
                    /*delete Temperory created file*/  
                        file.delete();
                    }catch(Exception e){
                        e.printStackTrace();
                    }
                    Intent returnFromCameraIntent = new Intent();
                    setResult(RESULT_CANCELED,returnFromCameraIntent);     
                    finish();
                    Log.i(TAG,"Image Capture Cancelled");
           }
           galleryAddPic();
     }

     private File createImageFile() throws IOException {
            String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss",Locale.getDefault()).format(new Date());
            String imageFileName = "CAMERA_" + timeStamp + "_WA0001";

            File root = new File(Environment.getExternalStorageDirectory()
                     + File.separator + "MyApp"+ File.separator);

            if(!root.exists()){
                    root.mkdirs();  
            }

           // File storageDir = Environment.getExternalStoragePublicDirectory(
           //         Environment.DIRECTORY_PICTURES);
            File image = File.createTempFile(
                imageFileName,  /* prefix */
                ".jpg",         /* suffix */
                root      /* directory */
            );
            // Save a file: path for use with ACTION_VIEW intents
            mCurrentPhotoPath = "file:" + image.getAbsolutePath();
            path=""+image.getAbsolutePath();
            return image;
    }

     private void galleryAddPic() {
            Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
            File f = new File(mCurrentPhotoPath);
            Uri contentUri = Uri.fromFile(f);
            mediaScanIntent.setData(contentUri);
            this.sendBroadcast(mediaScanIntent);
     }

     private boolean isDeviceSupportCamera() {
            if (getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)) {
                // this device has a camera
                return true;
            } else {
                // no camera on this device
                return false;
            }
     }
}
</code></pre>

<p>Choose Existing Picture Code:</p>

<pre><code>import java.io.File;
import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;

public class GalleryUtil extends Activity{
    private final static int RESULT_LOAD_GALLERY=100;
    public static final int MEDIA_TYPE_IMAGE = 1;
    private static final String TAG = "Gallery_Image";

    String mCurrentPhotoPath;
    File photoFile = null;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try{
            Intent i = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            startActivityForResult(i, RESULT_LOAD_GALLERY); 
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
         Log.i(TAG,"On Activity Result");        
         if (requestCode == RESULT_LOAD_GALLERY &amp;&amp; resultCode == RESULT_OK &amp;&amp; null != data) {
            Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };
            Cursor cursor = getContentResolver().query(selectedImage,
                    filePathColumn, null, null, null);
            cursor.moveToFirst();
            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();

                Intent returnFromGalleryIntent = new Intent();
                returnFromGalleryIntent.putExtra("picturePath",picturePath);
                setResult(RESULT_OK,returnFromGalleryIntent);     
                finish();

           }else{
                Log.i(TAG,"Image Capture Cancelled");
                Intent returnFromGalleryIntent = new Intent();
                setResult(RESULT_CANCELED,returnFromGalleryIntent);     
                finish();
           }
    }
}
</code></pre>

<p>Convert Image to Base64 String:</p>

<pre><code>public class Base64Utils {

    private static final String TAG = "Base64Utils";
    private String picturePath;
    private String base64;

    public Base64Utils(String picturePath) {
        this.picturePath = picturePath;
    }

    public String getPicturePath() {
        return picturePath;
    }
    public void setPicturePath(String picturePath) {
        this.picturePath = picturePath;
    }

    public String getBase64() {
        FileInputStream fis11=null;
            try {
                fis11 = new FileInputStream(picturePath);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            ByteArrayOutputStream bos11 = new ByteArrayOutputStream();
            byte[] buf = new byte[8096];
            try {
                for (int readNum; (readNum = fis11.read(buf)) != -1;) {
                    bos11.write(buf, 0, readNum); 
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        bytes = bos11.toByteArray();
        base64 = Base64.encodeToString(bytes, Base64.DEFAULT);  
        return base64;
    }

    public void setBase64(String base64) {
        this.base64 = base64;
    }
}
</code></pre>

<p>Main Activity Code: Choose or Take Picture, convert it to base64 string and Send Base64 String to Server.</p>

<pre><code>public class CapatureImage extends Activity implements View.OnClickListener {

    private final String TAG = "CapatureImage";
    String picturePath;
    String base64 = null,   
    private ImageButton image;
    // for popup
    private PopupWindow pop;

    private final int GALLERY_ACTIVITY_CODE = 200;
    private final int CAMERA_ACTIVITY_CODE = 300;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.CapatureImage);
        configureComponent();
    }

    private void configureComponent() {
        image = (ImageButton) findViewById(R.id.image);
        image.setOnClickListener(this);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
        case R.id.image:
            initiatePopupWindow();
            break;
        case R.id.button_camera_dialog:
            Intent camera_Intent = new Intent(this.getApplicationContext(),
                    CameraUtil.class);
            pop.dismiss();
            this.startActivityForResult(camera_Intent, CAMERA_ACTIVITY_CODE);
            break;

        case R.id.button_gallery_dialog:
            Intent gallery_Intent = new Intent(this.getApplicationContext(),
                    GalleryUtil.class);
            pop.dismiss();
            this.startActivityForResult(gallery_Intent, GALLERY_ACTIVITY_CODE);
            break;

        case R.id.button_cancel_dialog:
            pop.dismiss();
            break;

        case R.id.button_remove_dialog:
            Log.i(TAG, "Remove Picture");
            image.setImageResource(R.drawable.icon_781q);
            picturePath=null;
            pop.dismiss();
            break;
        }
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data) {

        if (requestCode == GALLERY_ACTIVITY_CODE) {
            if (resultCode == RESULT_OK) {
                picturePath = data.getStringExtra("picturePath");   
                base64 = new Base64Utils(picturePath).getBase64();   
                //send this base64 string to server
            }
            if (resultCode == RESULT_CANCELED) {
                // Write your code if there's no result
            }
        }
        if (requestCode == CAMERA_ACTIVITY_CODE) {
            if (resultCode == RESULT_OK) {
            //  Log.i("Camera_Activity", data.toString());
                picturePath = data.getStringExtra("picturePath");
                base64 = new Base64Utils(picturePath).getBase64(); //send this base64 to server
            }
            if (resultCode == RESULT_CANCELED) {
                // Write your code if there's no result
            }
        }
    }// onActivityResult

    public void initiatePopupWindow() {
        try {
            // We need to get the instance of the LayoutInflater
            LayoutInflater inflater = (LayoutInflater) EngineerStatus_Update.this
                    .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            View layout = inflater.inflate(R.layout.dialoge_choosephoto,
                    (ViewGroup) findViewById(R.id.photo_popup));
            if (picturePath != null &amp;&amp; !picturePath.isEmpty()) {
                Log.i(TAG, "Image Exist..Add Remove Button");
                remove = (Button) layout
                        .findViewById(R.id.button_remove_dialog);
                remove.setOnClickListener(this);
                remove.setVisibility(View.VISIBLE);
                pop = new PopupWindow(layout,
                        ViewGroup.LayoutParams.WRAP_CONTENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT, true);
            } else {
                Log.i(TAG, "No Image..remove  Remove Button");
                remove = (Button) layout
                        .findViewById(R.id.button_remove_dialog);
                remove.setOnClickListener(this);
                remove.setVisibility(View.GONE);
                pop = new PopupWindow(layout,
                        ViewGroup.LayoutParams.WRAP_CONTENT,
                        ViewGroup.LayoutParams.WRAP_CONTENT, true);
            }

            // component for popup
            gallery = (Button) layout.findViewById(R.id.button_gallery_dialog);
            gallery.setOnClickListener(this);
            camera = (Button) layout.findViewById(R.id.button_camera_dialog);
            camera.setOnClickListener(this);
            cancel = (Button) layout.findViewById(R.id.button_cancel_dialog);
            cancel.setOnClickListener(this);
            pop.showAtLocation(layout, Gravity.CENTER, 0, 0);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void displayImage(String path) {
        File imgFile = new File(path);
        if(imgFile.exists()){
            Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
            image.setImageBitmap(myBitmap);
            image.setScaleType(ScaleType.CENTER_CROP);
        }   
   }
}
</code></pre>
