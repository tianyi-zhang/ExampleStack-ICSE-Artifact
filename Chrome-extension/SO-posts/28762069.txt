<p>this is a simple implement,</p>

<pre><code> public static String replace(String old  ,int begin, int end ,char oldChar ,char newChar ){
    if (oldChar != newChar) {
    char array[] = old.toCharArray();
    for(int i = begin;i&lt;end;i++){
        if(old.charAt(i)==oldChar){
            array[i] = newChar;
        }
    }

    return new String(array);
    }
    return old;
}
</code></pre>

<p>it creates a new char array ,then updates each item in the array if needed.
The sad thing is ,it copies the char array again when building a new String.
But ,at least,the local array will be cleaned by GC.I think this is good enough,since the origin code of JDK1.6 String replace(char oldChar,char newChar) also creates
a local array as below,</p>

<pre><code>public String replace(char oldChar, char newChar) {
if (oldChar != newChar) {
    int len = count;
    int i = -1;
    char[] val = value; /* avoid getfield opcode */
    int off = offset;   /* avoid getfield opcode */

    while (++i &lt; len) {
    if (val[off + i] == oldChar) {
        break;
    }
    }
    if (i &lt; len) {
    char buf[] = new char[len];
    for (int j = 0 ; j &lt; i ; j++) {
        buf[j] = val[off+j];
    }
    while (i &lt; len) {
        char c = val[off + i];
        buf[i] = (c == oldChar) ? newChar : c;
        i++;
    }
    return new String(0, len, buf);
    }
}
return this;
}  
</code></pre>

<p>If you read the code in StringBuffer ,you can see a lot arrayCopy,so I think the
performance is not good.</p>
