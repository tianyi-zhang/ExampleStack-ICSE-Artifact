<p>Here is another approach that takes <strong>43 ms</strong>.</p>

<p>It is based on the following approach:</p>

<p>1) The primes &lt;= 1000000 are generated using a sieve</p>

<p>2) It iterates in <strong>O(n<sup>2</sup>)</strong> through all numbers and it counts the consecutive primes. The first loop changes the first element of the sequence, the second one takes the elements starting from that position and adds them to a sum. If the sum is prime and it consists of the biggest number of primes, than it is kept in a variable.</p>

<pre><code>import java.util.ArrayList;
import java.util.List;

public class P50 {

    private final static int N = 1_000_000;

    public static void main(String[] args) {
        boolean primes[] = generatePrimes(N);
        List&lt;Integer&gt; primeIntegers = new ArrayList&lt;Integer&gt;();
        for (int i = 0; i &lt; primes.length; i++) {
            if (primes[i]) {
                primeIntegers.add(i);
            }
        }
        int count = 0;
        int sum = 0;
        int finalSum = 0;
        int finalCount = 0;
        int totalPrimes = primeIntegers.size();
        for (int start = 0; start &lt; totalPrimes; start++) {
            sum = 0;
            count = 0;
            for (int current = start; current &lt; totalPrimes; current++) {
                int actual = primeIntegers.get(current);
                sum += actual;
                if ( sum &gt;= N ) {
                    break;
                }
                if ( primes[sum] ) {
                    if ( count &gt; finalCount ) {
                        finalCount = count;
                        finalSum = sum;
                    }
                }
                count++;
            }
        }
        System.out.println(finalSum);
    }

    private static boolean[] generatePrimes(int n) {
        boolean primes[] = new boolean[n];
        for (int i = 0; i &lt; n; i++) {
            primes[i] = true;
        }
        primes[0] = false;
        primes[1] = false;
        // i = step
        for (int i = 2; i * i &lt; n; i++) {
            if (primes[i]) {
                for (int j = i * i; j &lt; n; j += i) {
                    primes[j] = false;
                }
            }
        }
        return primes;
    }

}
</code></pre>
