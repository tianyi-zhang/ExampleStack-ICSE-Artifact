<p><sub>Someone voted to close this question as "too broad". I'm not sure whether this is the appropriate close reason here, but it might be, because one could consider this question (which is a follow up to <a href="http://stackoverflow.com/questions/26702103/bcel-get-class-name-element-names-and-method-names">your previous question</a>) as just asking others to do some work for you.</sub></p>

<p>However, to answer the basic question of <strong>how to detect references between classes in a single JAR file with BCEL</strong>:</p>

<p>You can obtain the list of <code>JavaClass</code> objects from the <code>JarFile</code>. For each of these <code>JavaClass</code> objects, you can inspect the <code>Method</code> objects and their <code>InstructionList</code>. Out of these instructions, you can select the <code>InvokeInstruction</code> objects and examine them further to find out which method on which class is actually invoked there. </p>

<p>The following program opens a JAR file (for obvious reasons, it's the <code>bcel-5.2.jar</code> - you'll need it anyhow...) and processes it in the way described above. For each <code>JavaClass</code> of the JAR file, it creates a map from all referenced <code>JavaClass</code> objects to the list of the <code>Method</code>s that are invoked on these classes, and prints the information accordingly: </p>

<pre><code>import java.io.IOException;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import org.apache.bcel.classfile.ClassFormatException;
import org.apache.bcel.classfile.ClassParser;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.InvokeInstruction;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.ReferenceType;
import org.apache.bcel.generic.Type;

public class BCELRelationships
{
    public static void main(String[] args) throws Exception
    {
        JarFile jarFile = null;
        try
        {
            String jarName = "bcel-5.2.jar";
            jarFile = new JarFile(jarName);
            findReferences(jarName, jarFile);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if (jarFile != null)
            {
                try
                {
                    jarFile.close();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }
    }

    private static void findReferences(String jarName, JarFile jarFile) 
        throws ClassFormatException, IOException, ClassNotFoundException
    {
        Map&lt;String, JavaClass&gt; javaClasses = 
            collectJavaClasses(jarName, jarFile);

        for (JavaClass javaClass : javaClasses.values())
        {
            System.out.println("Class "+javaClass.getClassName());
            Map&lt;JavaClass, Set&lt;Method&gt;&gt; references = 
                computeReferences(javaClass, javaClasses);
            for (Entry&lt;JavaClass, Set&lt;Method&gt;&gt; entry : references.entrySet())
            {
                JavaClass referencedJavaClass = entry.getKey();
                Set&lt;Method&gt; methods = entry.getValue();
                System.out.println(
                    "    is referencing class "+
                    referencedJavaClass.getClassName()+" by calling");
                for (Method method : methods)
                {
                    System.out.println(
                        "        "+method.getName()+" with arguments "+
                        Arrays.toString(method.getArgumentTypes()));
                }
            }
        }
    }

    private static Map&lt;String, JavaClass&gt; collectJavaClasses(
        String jarName, JarFile jarFile) 
            throws ClassFormatException, IOException
    {
        Map&lt;String, JavaClass&gt; javaClasses =
            new LinkedHashMap&lt;String, JavaClass&gt;();
        Enumeration&lt;JarEntry&gt; entries = jarFile.entries();
        while (entries.hasMoreElements())
        {
            JarEntry entry = entries.nextElement();
            if (!entry.getName().endsWith(".class"))
            {
                continue;
            }

            ClassParser parser = 
                new ClassParser(jarName, entry.getName());
            JavaClass javaClass = parser.parse();
            javaClasses.put(javaClass.getClassName(), javaClass);
        }
        return javaClasses;
    }

    public static Map&lt;JavaClass, Set&lt;Method&gt;&gt; computeReferences(
        JavaClass javaClass, Map&lt;String, JavaClass&gt; knownJavaClasses) 
            throws ClassNotFoundException
    {
        Map&lt;JavaClass, Set&lt;Method&gt;&gt; references = 
            new LinkedHashMap&lt;JavaClass, Set&lt;Method&gt;&gt;();
        ConstantPool cp = javaClass.getConstantPool();
        ConstantPoolGen cpg = new ConstantPoolGen(cp);
        for (Method m : javaClass.getMethods())
        {
            String fullClassName = javaClass.getClassName();
            String className = 
                fullClassName.substring(0, fullClassName.length()-6);
            MethodGen mg = new MethodGen(m, className, cpg);
            InstructionList il = mg.getInstructionList();
            if (il == null)
            {
                continue;
            }
            InstructionHandle[] ihs = il.getInstructionHandles();
            for(int i=0; i &lt; ihs.length; i++) 
            {
                InstructionHandle ih = ihs[i];
                Instruction instruction = ih.getInstruction();
                if (!(instruction instanceof InvokeInstruction))
                {
                    continue;
                }
                InvokeInstruction ii = (InvokeInstruction)instruction;
                ReferenceType referenceType = ii.getReferenceType(cpg);
                if (!(referenceType instanceof ObjectType))
                {
                    continue;
                }

                ObjectType objectType = (ObjectType)referenceType;
                String referencedClassName = objectType.getClassName();
                JavaClass referencedJavaClass = 
                    knownJavaClasses.get(referencedClassName);
                if (referencedJavaClass == null)
                {
                    continue;
                }

                String methodName = ii.getMethodName(cpg);
                Type[] argumentTypes = ii.getArgumentTypes(cpg);
                Method method = 
                    findMethod(referencedJavaClass, methodName, argumentTypes);
                Set&lt;Method&gt; methods = references.get(referencedJavaClass);
                if (methods == null)
                {
                    methods = new LinkedHashSet&lt;Method&gt;();
                    references.put(referencedJavaClass, methods);
                }
                methods.add(method);
            }
        }
        return references;
    }

    private static Method findMethod(
        JavaClass javaClass, String methodName, Type argumentTypes[])
            throws ClassNotFoundException
    {
        for (Method method : javaClass.getMethods())
        {
            if (method.getName().equals(methodName))
            {
                if (Arrays.equals(argumentTypes, method.getArgumentTypes()))
                {
                    return method;
                }
            }
        }
        for (JavaClass superClass : javaClass.getSuperClasses())
        {
            Method method = findMethod(superClass, methodName, argumentTypes);
            if (method != null)
            {
                return method;
            }
        }
        return null;
    }
}
</code></pre>

<p>Note, however, that this information might not be complete in every sense. For example, due to polymorphism, you might not always detect that a method is called on an object of a certain class, because it is "hidden" behind the polymorphic abstraction. For example, in a code snippet like</p>

<pre><code>void call() {
    MyClass m = new MyClass();
    callToString(m);
}
void callToString(Object object) {
    object.toString();
}
</code></pre>

<p>the call to <code>toString</code> actually happens on an instance of <code>MyClass</code>. But due to polymorphism, it can only be recognized as a call to this method on "some <code>Object</code>". </p>
