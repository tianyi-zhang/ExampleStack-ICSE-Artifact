<p>There are some logical problem here . </p>

<ol>
<li>You overwriting your main List <code>rList</code>. You need to declare a separate suggestion list for that.</li>
<li>you declare the nlist as the same size of your main list .  <code>final ArrayList&lt;AccountDetails&gt; nlist = new ArrayList&lt;AccountDetails&gt;(originalData.size());</code></li>
<li>you using the index <code>i</code> which should not be the valid position. <code>originalData.get(i)</code>;</li>
</ol>

<p>So it will be like this . </p>

<p><strong><em>Solution</em></strong> </p>

<p><strong>1st</strong> </p>

<p>Declear a new <code>ArrayList</code> of <code>AccountDetails</code>. <code>ArrayList&lt;AccountDetails&gt; suggArray= new ArrayList&lt;AccountDetails&gt;();</code> Al replace <code>rList</code> by <code>suggArray</code> for everywhere in the adapter(Except the Constructor).</p>

<p><strong>2nd</strong> </p>

<p><code>ArrayList&lt;AccountDetails&gt; suggArray= new ArrayList&lt;AccountDetails&gt;();</code></p>

<p><strong>3rd</strong></p>

<p>Cahnge the loop like this way. </p>

<pre><code>for (AccountDetails accountDetails : rList ) {
      filterableString = accountDetails.getaName().toString();
      if (filterableString.toLowerCase().contains(filterString)) {
            nlist.add(new AccountDetails(accountDetails.getaName().toString(),accountDetails.getuName().toString(),
                    accountDetails.getPwd().toString(),accountDetails.getwSite().toString(),accountDetails.getDesc().toString()));
      }
 }
</code></pre>

<p>Finally it looks like this . </p>

<pre><code>public class RemainderAdapter extends BaseAdapter implements Filterable{
    private Context context;
    private ArrayList&lt;AccountDetails&gt; rList;
    private TextView aName,uName;
    ArrayList&lt;AccountDetails&gt; suggArray= new ArrayList&lt;AccountDetails&gt;();
    private ArrayList&lt;AccountDetails&gt; originalData = null;
    RemainderAdapter(Context context, ArrayList&lt;AccountDetails&gt; rList) {
        this.context = context;
        this.rList = rList;
        this.suggArray = rList;
        this.originalData=rList;
    }

    @Override
    public int getCount() {
        return suggArray.size();
    }

    @Override
    public Object getItem(int position) {
        return suggArray.get(position);
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(final int position, View convertView, final ViewGroup parent) {
        if (convertView == null) {
            LayoutInflater inflater = (LayoutInflater) context.getSystemService(context.LAYOUT_INFLATER_SERVICE);
            convertView = inflater.inflate(R.layout.list_item, parent, false);
            aName = (TextView) convertView.findViewById(R.id.aName);
            uName = (TextView) convertView.findViewById(R.id.uName);
        }
        aName.setText(suggArray.get(position).getaName().toString());
        uName.setText(suggArray.get(position).getuName().toString());
        return convertView;
    }

    public Filter getFilter() {
        return mFilter;
    }

    public Filter mFilter  = new Filter() {
    @Override
    protected FilterResults performFiltering(final CharSequence constraint) {

        String filterString = constraint.toString().toLowerCase();

        FilterResults results = new FilterResults();

        final ArrayList&lt;AccountDetails&gt; nlist = new ArrayList&lt;AccountDetails&gt;();

        String filterableString ;

        for (AccountDetails accountDetails : rList ) {
            filterableString = accountDetails.getaName().toString();
            Log.e("Values","Model Value : "filterableString +"  , String Value : "+constraint); // Check Here
            if (filterableString.toLowerCase().contains(filterString)) {
                nlist.add(accountDetails);
            }
        }

        results.values = nlist;
        results.count = nlist.size();

        return results;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void publishResults(CharSequence constraint, FilterResults results) {
        suggArray = (ArrayList&lt;AccountDetails&gt;) results.values;
        notifyDataSetChanged();
    }
  };
}
</code></pre>
