<p>Avoid loading the image each time it is rendered. Make it a class variable and load it only once. Like this:</p>

<pre><code>import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.Color;

import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Dimension;
import java.awt.Graphics;

import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.URL;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

public class Game extends Canvas implements Runnable {
    private static final long serialVersionUID = 1L;

    public static final String NAME = "PokeCraft PRE-ALPHA";
    public static final int HEIGHT = 720;
    public static final int WIDTH = HEIGHT * 16 / 9;
    public static final int SCALE = 1;

    private int fps = 0;
    private int tps = 0;
    private Image img = null;

    private boolean running;
    private int tickCount;

    public void start() {
        running = true;
        new Thread(this).start();
    }

    public void stop() {
        running = false;

    }

    public void render() {
        BufferStrategy bufferStrategy = getBufferStrategy();
        if (bufferStrategy == null) {
            this.createBufferStrategy(3);
            return;
        }

        /* render function */

        Graphics g = (Graphics) bufferStrategy.getDrawGraphics();
        g.clearRect(0, 0, super.getWidth(), super.getHeight());

        if (img == null) {
            try {
                String imgPath = "data/MF.png";
                img = ImageIO.read(getClass().getResourceAsStream(imgPath));
            } catch (Exception e) {
                System.out.println(e);
            }
        }

        g.drawImage(img, tickCount, 0, null);
        Font font = new Font("Verdana", 0, 11);
        g.setFont(font);
        g.setColor(Color.RED);
        g.drawString(NAME + " / " + fps + " fps, " + tps + "tps", 5, 15);
        g.dispose();
        bufferStrategy.show();
    }

    public void run() {
        long lastTime = System.nanoTime();
        double unprocessed = 0;
        double nsPerTick = 1000000000.0 / 60.0;
        int frames = 0;
        int ticks = 0;
        long lastTimer1 = System.currentTimeMillis();

        while (running) {
            long now = System.nanoTime();
            unprocessed += (now - lastTime) / nsPerTick;
            lastTime = now;
            boolean shouldRender = false;
            while (unprocessed &gt;= 1) {
                ticks++;
                tick();
                unprocessed -= 1;
                shouldRender = true;
            }
            if (shouldRender) {
                frames++;
                render();
            }

            if (System.currentTimeMillis() - lastTimer1 &gt; 1000) {

                lastTimer1 += 1000;
                System.out.println(ticks + " ticks, " + frames + " fps");
                fps = frames;
                tps = ticks;
                ticks = 0;
                frames = 0;
            }
        }
    }

    public void tick() {
        tickCount++;
    }

    public static void main(String[] args) {
        Game game = new Game();
        game.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
        game.setMinimumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
        game.setMaximumSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));

        JFrame frame = new JFrame(Game.NAME);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.add(game);
        frame.pack();
        frame.setResizable(true);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        game.start();
    }
}
</code></pre>

<p>Same goes for the font, although that may not be impacting performance as much as the image loading.</p>
