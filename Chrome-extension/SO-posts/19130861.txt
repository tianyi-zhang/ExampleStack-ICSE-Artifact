<p>To speed up things in most mobile apps (Android iOS ...) cells of lists are usually recycled. This spares memory especially for long lists. Therefore you have to get the data of a new displayed cell. When the cell goes outside the screen, its layout/view is destroyed. In your case you have to save the text of the edit text somewhere. That's what you are trying to do with the hashmap.</p>

<p>I don't see any particular mistake in your code.</p>

<p>If the question is about the "workaround" of using the hashmap, I confirm that for me it is up to you to save the states of the edit text. Using a hashmap is one way of doing it.</p>

<p>By the way <code>getItem(position).id</code> can be replaced by <code>getItemId(position)</code> which is here for that purpose.</p>

<p>Not sure if all this answers your question.</p>

<p><strong>EDIT</strong></p>

<p>Now that I understood your question correctly I can provide some code. I must say that I am not fully happy with the solution found but at least it is working.</p>

<p>The problem with the TextWatcher is that you have no access to the context and of the corresponding view.</p>

<p>Using setOnFocusChangeListener solved the problem. So here is the code I finally got working.</p>

<pre><code>public final class PointVerificationAdapter extends BaseAdapter {
    List&lt;BasicNameValuePair&gt; mObjects;
    Context mContext;
    LayoutInflater mInflater;
    HashMap&lt;Integer, String&gt; mReponsesActuel;
    ArrayList&lt;String&gt; myItems = new ArrayList&lt;String&gt;();

    public PointVerificationAdapter(
            Context context,
            List&lt;BasicNameValuePair&gt; listObjets
            ) {

        this.mInflater = LayoutInflater.from(context);
        this.mContext = context;
        this.mObjects = listObjets;

        for (int i = 0; i &lt; 30; i++) {
            myItems.add(Integer.toString(i));
        }
    }

    @Override
    public int getCount() {
        return mObjects.size();
    }

    @Override
    public BasicNameValuePair getItem(int position) {
        return mObjects.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    static class ViewHolder {
        EditText yourEditText;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        ViewHolder holder = null;

        if (convertView == null)
        {
            holder = new ViewHolder();
            convertView = mInflater.inflate(R.layout.intervention_reponses_controle_nombre, parent, false);
            convertView.setId(position);
            holder.yourEditText = (EditText) convertView.findViewById(R.id.edValeur);

            convertView.setTag(holder);
        }
        else
        {
            holder = (ViewHolder) convertView.getTag();
        }

        ((TextView) convertView.findViewById(R.id.tvNom)).setText(Integer.toString(position));

        holder.yourEditText.setText(myItems.get(position));
        holder.yourEditText.setId(position);
        holder.yourEditText.setOnFocusChangeListener(new OnFocusChangeListener() {
            public void onFocusChange(View view, boolean hasFocus) {
                if (!hasFocus){
                    final int position = view.getId();
                    final EditText editText = (EditText) view;
                    myItems.set(position, editText.getText().toString());
                }
            }
        });

        return convertView;
    }

}
</code></pre>

<p><strong>FINAL EDIT</strong></p>

<p>The previous code is working but I wasn't happy with it because you asked for <code>addTextChangedListener</code>and not for <code>onFocusChange</code>.</p>

<p>So here is the solution :</p>

<pre><code>public final class PointVerificationAdapter extends BaseAdapter {
    List&lt;BasicNameValuePair&gt; mObjects;
    Context mContext;
    LayoutInflater mInflater;
    HashMap&lt;Integer, String&gt; mReponsesActuel;
    ArrayList&lt;String&gt; myItems = new ArrayList&lt;String&gt;();

    public PointVerificationAdapter(
            Context context,
            List&lt;BasicNameValuePair&gt; listObjets
            ) {

        this.mInflater = LayoutInflater.from(context);
        this.mContext = context;
        this.mObjects = listObjets;

        for (int i = 0; i &lt; 30; i++) {
            myItems.add(Integer.toString(i));
        }
    }

    @Override
    public int getCount() {
        return mObjects.size();
    }

    @Override
    public BasicNameValuePair getItem(int position) {
        return mObjects.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    static class ViewHolder {
        EditText yourEditText;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        ViewHolder holder = null;

        if (convertView == null)
        {
            holder = new ViewHolder();
            convertView = mInflater.inflate(R.layout.intervention_reponses_controle_nombre, parent, false);
            convertView.setId(position);
            holder.yourEditText = (EditText) convertView.findViewById(R.id.edValeur);
            holder.yourEditText.setId(position);
            holder.yourEditText.addTextChangedListener(new GenericTextWatcher(holder.yourEditText));
            convertView.setTag(holder);
        }
        else
        {
            holder = (ViewHolder) convertView.getTag();
            holder.yourEditText.setId(position);
        }

        ((TextView) convertView.findViewById(R.id.tvNom)).setText(Integer.toString(position));

        holder.yourEditText.setText(myItems.get(position));

        return convertView;
    }

    private class GenericTextWatcher implements TextWatcher{

        private View view;
        private GenericTextWatcher(View view) {
            this.view = view;
        }

        public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {}
        public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {}

        public void afterTextChanged(Editable editable) {
            final int position = view.getId();
            final EditText editText = (EditText) view;
            myItems.set(position, editText.getText().toString());
        }
    }
}
</code></pre>
