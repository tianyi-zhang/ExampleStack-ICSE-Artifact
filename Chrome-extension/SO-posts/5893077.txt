<p>You need to use <code>onSensorChanged(SensorEvent event)</code> callback of the interface <code>SensorEventListener</code> </p>

<p>Get the details of the <code>SensorEvent</code> class here: <a href="http://developer.android.com/reference/android/hardware/SensorEvent.html" rel="nofollow">http://developer.android.com/reference/android/hardware/SensorEvent.html</a></p>

<p>There's an example on the IBM's developerWorks page: <a href="http://www.ibm.com/developerworks/opensource/library/os-android-sensor/index.html" rel="nofollow">http://www.ibm.com/developerworks/opensource/library/os-android-sensor/index.html</a></p>

<hr>

<p><strong>From the android reference pages:</strong></p>

<blockquote>
  <p>public final float[] </p>
  
  <p>values Since: API
  Level 3</p>
  
  <p>The length and contents of the values
  array depends on which sensor type is
  being monitored (see also SensorEvent
  for a definition of the coordinate
  system used).
  Sensor.TYPE_ACCELEROMETER: All values
  are in SI units (m/s^2)</p>
  
  <p><code>values[0]</code>: Acceleration minus Gx on the x-axis</p>
  
  <p><code>values[1]</code>: Acceleration minus Gy on the y-axis</p>
  
  <p><code>values[2]</code>: Acceleration minus Gz on the z-axis</p>
  
  <p>A sensor of this type measures the
  acceleration applied to the device
  (Ad). Conceptually, it does so by
  measuring forces applied to the sensor
  itself (Fs) using the relation: Ad = -
  ?Fs / mass</p>
  
  <p>In particular, the force of gravity is
  always influencing the measured
  acceleration: Ad = -g - ?F / mass</p>
  
  <p>For this reason, when the device is
  sitting on a table (and obviously not
  accelerating), the accelerometer reads
  a magnitude of g = 9.81 m/s^2</p>
  
  <p>Similarly, when the device is in
  free-fall and therefore dangerously
  accelerating towards to ground at 9.81
  m/s^2, its accelerometer reads a
  magnitude of 0 m/s^2.</p>
  
  <p>It should be apparent that in order to
  measure the real acceleration of the
  device, the contribution of the force
  of gravity must be eliminated. This
  can be achieved by applying a
  high-pass filter. Conversely, a
  low-pass filter can be used to isolate
  the force of gravity.</p>
</blockquote>

<pre><code> public void onSensorChanged(SensorEvent event)
 {
      // alpha is calculated as t / (t + dT)
      // with t, the low-pass filter's time-constant
      // and dT, the event delivery rate

      final float alpha = 0.8;

      gravity[0] = alpha * gravity[0] + (1 - alpha) * event.values[0];
      gravity[1] = alpha * gravity[1] + (1 - alpha) * event.values[1];
      gravity[2] = alpha * gravity[2] + (1 - alpha) * event.values[2];

      linear_acceleration[0] = event.values[0] - gravity[0];
      linear_acceleration[1] = event.values[1] - gravity[1];
      linear_acceleration[2] = event.values[2] - gravity[2];
 }
</code></pre>
