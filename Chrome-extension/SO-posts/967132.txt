<p>There is no class called <code>Pair</code> in Java; but there is the <code>Map.Entry&lt;K,V&gt;</code> interface, and there are two public implementations of it: <a href="http://java.sun.com/javase/6/docs/api/java/util/AbstractMap.SimpleEntry.html" rel="nofollow"><code>AbstractMap.SimpleEntry</code></a> and <a href="http://java.sun.com/javase/6/docs/api/java/util/AbstractMap.SimpleImmutableEntry.html" rel="nofollow"><code>AbstractMap.SimpleImmutableEntry</code></a>.</p>

<p>If you find it ugly to use nested classes directly in your code, you could always create a Pair class:</p>

<pre><code>public class Pair&lt;Type1, Type2&gt; extends AbstractMap.SimpleEntry&lt;Type1, Type2&gt; {
    public Pair(Type1 t1, Type2 t2) {
        super(t1, t2);
    }
}
</code></pre>

<p>Or you could write your own like this:</p>

<pre><code>public final class Pair&lt;Type1, Type2&gt; {
    public final Type1 first;
    public final Type2 second;

    public Pair(Type1 first, Type2 second) {
        this.first = first;
        this.second = second;
    }

    /**
     * Factory method to ease the pain of generics.
     */
    public static &lt;T1, T2&gt; Pair of(T1 first, T2 second) {
        return new Pair&lt;T1, T2&gt;(first, second);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        final Pair other = (Pair) obj; // no generics needed here
        if (this.first != other.first &amp;&amp;
            (this.first == null || !this.first.equals(other.first)))
            return false;
        if (this.second != other.second &amp;&amp;
            (this.second == null || !this.second.equals(other.second)))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + (this.first != null ? this.first.hashCode() : 0);
        hash = 37 * hash + (this.second != null ? this.second.hashCode() : 0);
        return hash;
    }
}
</code></pre>
