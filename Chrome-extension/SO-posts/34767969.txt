<p>For completing @CommonsWare answer, you can check if the device is rooted, then do the methods or something else.</p>

<p>Here is an example,</p>

<p><strong>Taken from</strong> : <a href="http://www.stealthcopter.com/blog/2010/01/android-requesting-root-access-in-your-app/" rel="nofollow">http://www.stealthcopter.com/blog/2010/01/android-requesting-root-access-in-your-app/</a></p>

<pre><code>Process p; 
try { 
   // Preform su to get root privledges
   p = Runtime.getRuntime().exec("su"); 

   // Attempt to write a file to a root-only 
   DataOutputStream os = new DataOutputStream(p.getOutputStream()); 
   os.writeBytes("echo \"Do I have root?\" &gt;/system/sd/temporary.txt\n");

   // Close the terminal
   os.writeBytes("exit\n"); 
   os.flush(); 
   try { 
      p.waitFor(); 
           if (p.exitValue() != 255) { 
              // TODO Code to run on success
              toastMessage("root");
           } 
           else { 
               // TODO Code to run on unsuccessful
               toastMessage("not root");    
           } 
   } catch (InterruptedException e) { 
      // TODO Code to run in interrupted exception
       toastMessage("not root"); 
   } 
} catch (IOException e) { 
   // TODO Code to run in input/output exception
    toastMessage("not root"); 
}
</code></pre>

<p>Or you can take a look at : </p>

<blockquote>
  <p><a href="http://su.chainfire.eu/#how" rel="nofollow">http://su.chainfire.eu/#how</a> </p>
  
  <p><a href="https://github.com/Chainfire/libsuperuser" rel="nofollow">https://github.com/Chainfire/libsuperuser</a></p>
</blockquote>

<p>and also, use the following permission in your manifest too:</p>

<pre><code>&lt;uses-permission android:name="android.permission.ACCESS_SUPERUSER" /&gt;
</code></pre>

<p>Or a good example is available on Github:</p>

<p><a href="https://github.com/mtsahakis/RootChecker" rel="nofollow">https://github.com/mtsahakis/RootChecker</a></p>
