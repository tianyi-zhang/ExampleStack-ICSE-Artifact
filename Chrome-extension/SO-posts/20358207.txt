<p>I've been trying to use the Reflections library, but had some problems using it, and there were too many jars I should include just to simply obtain the classes on a package.</p>

<p>I'll post a solution I've found in this duplicate question: <a href="http://stackoverflow.com/questions/15519626/how-to-get-all-classes-names-in-a-package">How to get all classes names in a package?</a></p>

<p>The <a href="http://stackoverflow.com/questions/15519626/how-to-get-all-classes-names-in-a-package/15519745#15519745">answer was written by sp00m</a>; I've added some corrections to make it work:</p>

<pre><code>import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;

public final class ClassFinder {

    private final static char DOT = '.';
    private final static char SLASH = '/';
    private final static String CLASS_SUFFIX = ".class";
    private final static String BAD_PACKAGE_ERROR = "Unable to get resources from path '%s'. Are you sure the given '%s' package exists?";

    public final static List&lt;Class&lt;?&gt;&gt; find(final String scannedPackage) {
        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        final String scannedPath = scannedPackage.replace(DOT, SLASH);
        final Enumeration&lt;URL&gt; resources;
        try {
            resources = classLoader.getResources(scannedPath);
        } catch (IOException e) {
            throw new IllegalArgumentException(String.format(BAD_PACKAGE_ERROR, scannedPath, scannedPackage), e);
        }
        final List&lt;Class&lt;?&gt;&gt; classes = new LinkedList&lt;Class&lt;?&gt;&gt;();
        while (resources.hasMoreElements()) {
            final File file = new File(resources.nextElement().getFile());
            classes.addAll(find(file, scannedPackage));
        }
        return classes;
    }

    private final static List&lt;Class&lt;?&gt;&gt; find(final File file, final String scannedPackage) {
        final List&lt;Class&lt;?&gt;&gt; classes = new LinkedList&lt;Class&lt;?&gt;&gt;();
        if (file.isDirectory()) {
            for (File nestedFile : file.listFiles()) {
                classes.addAll(find(nestedFile, scannedPackage));
            }
        //File names with the $1, $2 holds the anonymous inner classes, we are not interested on them. 
        } else if (file.getName().endsWith(CLASS_SUFFIX) &amp;&amp; !file.getName().contains("$")) {

            final int beginIndex = 0;
            final int endIndex = file.getName().length() - CLASS_SUFFIX.length();
            final String className = file.getName().substring(beginIndex, endIndex);
            try {
                final String resource = scannedPackage + DOT + className;
                classes.add(Class.forName(resource));
            } catch (ClassNotFoundException ignore) {
            }
        }
        return classes;
    }

}
</code></pre>

<p>To use it just call the find method as sp00n mentioned in this example:
I've added the creation of instances of the classes if needed.</p>

<pre><code>List&lt;Class&lt;?&gt;&gt; classes = ClassFinder.find("com.package");

ExcelReporting excelReporting;
for (Class&lt;?&gt; aClass : classes) {
    Constructor constructor = aClass.getConstructor();
    //Create an object of the class type
    constructor.newInstance();
    //...
}
</code></pre>
