<pre><code>//DOC to .jpeg

package org.doc;

import java.io.File;

import com.aspose.words.Document;
import com.aspose.words.ImageSaveOptions;
import com.aspose.words.SaveFormat;

public class DocToImage {

    public static void main(String[] args) {

        try {
                String sourcePath = "D://G.doc";
               Document doc = new Document(sourcePath);  
               ImageSaveOptions options = new ImageSaveOptions(SaveFormat.JPEG);  
               options.setJpegQuality(100);  
               options.setResolution(100);  
               options.setUseHighQualityRendering(true);  
               for (int i = 0; i &lt; doc.getPageCount(); i++) {  
                    String imageFilePath = "E://"+ "images" + File.separator + "img_" + i + ".jpeg";  
                    options.setPageIndex(i);  
                    doc.save(imageFilePath, options);  
               }  
               System.out.println("Done...");
          } catch (Exception e) {  
               e.printStackTrace();  
          }  
    }

}


/*Here is the link from where we can download latest Aspose word jar.
http://www.aspose.com/java/word-component.aspx*/


//PDF to .png

package org.pdf;

import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Transparency;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

import com.sun.pdfview.PDFFile;
import com.sun.pdfview.PDFPage;

public class PdfToImage {

    public static void main(final String[] args) throws Exception {

            String storagePath = "E://dd.pdf";

            //Image Save Directory
            String realPathtopdfImageSaveDir = "E://uploads/";

            RandomAccessFile raf = new RandomAccessFile(storagePath, "r");
            FileChannel channel = raf.getChannel();
            ByteBuffer buf = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel.size());
            PDFFile pdffile = new PDFFile(buf);

            int numPgs = pdffile.getNumPages();

            for (int i = 0; i &lt; numPgs; i++) {
                PDFPage page = pdffile.getPage(i);

                Rectangle rect = new Rectangle(0, 0, (int) page.getBBox().getWidth(), (int) page.getBBox().getHeight());

                Image img = page.getImage(rect.width, rect.height, rect, null, true, true);

                // save it as a file
                BufferedImage bImg = toBufferedImage(img);
                File yourImageFile = new File(realPathtopdfImageSaveDir +File.separator + "page_" + i + ".png");

                ImageIO.write(bImg, "png", yourImageFile);
            }

    }

    public static BufferedImage toBufferedImage(Image image) {
        if (image instanceof BufferedImage) {
            return (BufferedImage) image;
        }

        image = new ImageIcon(image).getImage();

        BufferedImage bimage = null;
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        try {
            int transparency = Transparency.OPAQUE;

            GraphicsDevice gs = ge.getDefaultScreenDevice();
            GraphicsConfiguration gc = gs.getDefaultConfiguration();
            bimage = gc.createCompatibleImage(image.getWidth(null), image.getHeight(null), transparency);
        } catch (HeadlessException e) {
            System.out.println("The system does not have a screen");
        }

        if (bimage == null) {
            int type = BufferedImage.TYPE_INT_RGB;
            bimage = new BufferedImage(image.getWidth(null), image.getHeight(null), type);
        }

        Graphics g = bimage.createGraphics();

        g.drawImage(image, 0, 0, null);
        g.dispose();

        return bimage;
    }
}

// jar required pdf-renderer.jar
</code></pre>
