<p>if the two view "simple_list_item_multiple_choice" and "simple_list_item_1" are just different based on the checkbox, then you can just use the "simple_list_item_multiple_choice" where you can make the checkbox hidden on very startup and when the data is loaded you can make the checkbox visible. Or you can show a activity-indicator when the data is loading and after loading the data you can directly port the custom ListView, think this one is better. Some sample code is provided with explanation.</p>

<p>First of all a custom adapter for the listView. This adapter is for each item of the ListView.</p>

<pre><code>//Custom Adapter
private class DataAdapter extends BaseAdapter {

    @Override
    public int getCount() {
        if (channelListTitles.size()&gt;0){
            return dataArrayList.size(); //dataArrayList is a ArrayList&lt;String&gt;
        }
        else {
            return 0;
        }
    }

    @Override
    public Object getItem(int position) {
        return null;
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        if (convertView==null){
            convertView = getActivity().getLayoutInflater().inflate(R.layout.item_view,null); //item_view is the custom view for the items of the ListView
        }
        if (convertView != null) {
            ((TextView)convertView.findViewById(R.id.item_view_title)).setText(channelListTitles.get(position)); //item_view_title is the TextView

            if(isDataLoaded){ //isDataLoaded is a bool value to indicate if data is loaded
                CheckBox checkBox = (CheckBox)convertView.findViewById(R.id.checkbox);
                checkBox.setVisibility(View.VISIBLE);
            }
        }

        return convertView;
    }
}
</code></pre>

<p>Now the item_view for each list-item:</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;

&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:orientation="horizontal" android:layout_width="match_parent"
android:layout_height="match_parent"&gt;
&lt;CheckBox
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:id="@+id/checkbox"
    android:visibility="invisible"/&gt;
    &lt;TextView
        android:layout_height="wrap_content"
        android:layout_width="wrap_content"
        android:id="@+id/item_view_title"
        android:layout_gravity="center_vertical"/&gt;
&lt;/LinearLayout&gt;
</code></pre>

<p>Now finally declare a listView on which the upper custom view will be ported. Posting the whole code of the OnCreateView() for better understanding. Here I am using Fragment, you need to change the corresponding methods if you are using Activity:</p>

<pre><code>@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View rootView = inflater.inflate(R.layout.fragment_main, container, false);
    if (rootView != null) {
        ListView listView = (ListView) rootView.findViewById(R.id.item_list);
        DataAdapter itemDataAdapter = new DataAdapter();
        listView.setAdapter(itemDataAdapter);
        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
                // OnItemClickListener goes here
            }
        });
    }
    return rootView;
}
</code></pre>

<p>Now the fragment_main:</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
tools:context=".MainActivity$PlaceholderFragment"&gt;

&lt;ListView
    android:layout_height="wrap_content"
    android:layout_width="wrap_content"
    android:id="@+id/item_list"/&gt;
&lt;/RelativeLayout&gt;
</code></pre>

<p>The Adapter is an important factor when you want to load data on dynamically. Basically Adapter is the bridge between data and view. Once you have the data you can call the adapter to update the view by using <code>itemDataAdapter.notifyDataSetChanged();</code>.</p>
