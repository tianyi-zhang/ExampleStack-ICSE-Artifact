<p>To know the position in an ArrayAdapter you can use the <code>adapter.getPosition(view)</code>
<a href="http://developer.android.com/reference/android/widget/ArrayAdapter.html#getPosition%28T%29" rel="nofollow">http://developer.android.com/reference/android/widget/ArrayAdapter.html#getPosition(T)</a>.</p>

<p>You can use a TouchListener with a onListItemClick in your adapter to handle the swipe action and the click action (to open a detail for example).</p>

<p>Also using a TouchListener you can use something similar to Roman Nurik code to retrieve the position by the view clicked.</p>

<p><a href="https://github.com/romannurik/Android-SwipeToDismiss/blob/master/src/com/example/android/swipedismiss/SwipeDismissListViewTouchListener.java" rel="nofollow">https://github.com/romannurik/Android-SwipeToDismiss/blob/master/src/com/example/android/swipedismiss/SwipeDismissListViewTouchListener.java</a></p>

<pre><code>// Find the child view that was touched (perform a hit test)
Rect rect = new Rect();
int childCount = mListView.getChildCount();
int[] listViewCoords = new int[2];
mListView.getLocationOnScreen(listViewCoords);
int x = (int) motionEvent.getRawX() - listViewCoords[0];
int y = (int) motionEvent.getRawY() - listViewCoords[1];
View child;
for (int i = 0; i &lt; childCount; i++) {
    child = mListView.getChildAt(i);
    child.getHitRect(rect);
    if (rect.contains(x, y)) {
         mDownView = child;
         break;
    }
}

if (mDownView != null) {
    mDownX = motionEvent.getRawX();
    mDownY = motionEvent.getRawY();
    mDownPosition = mListView.getPositionForView(mDownView);
 }
</code></pre>
