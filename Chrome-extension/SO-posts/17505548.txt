<p>Here is my Java code for computing segments of primes:</p>

<pre><code>/**
 * Computes the primes in a range using the sieve of Eratosthenes.
 * The size of the range must not exceed Integer.MAX_VALUE.
 *
 * @param start  The start index of the prime sieve.
 * @param limit  Primes will be sieved up to but not including this limit.
 *
 * @return  A bit set representing the integer range from start to limit.
 *     Each bit in this set is set to true if and only if
 *     the corresponding integer is prime.
 */
public static BitSet computePrimes(long start, long limit)
{
    if (limit - start &gt; Integer.MAX_VALUE)
    {
        throw new IllegalArgumentException();
    }

    final long sqrtLimit = sqrtCeil(limit);
    final BitSet primes = computePrimes((int) sqrtLimit);

    final BitSet segment = new BitSet();
    if (0 - start &gt;= 0)
    {
        segment.set((int) (0 - start), false);
    }
    if (1 - start &gt;= 0)
    {
        segment.set((int) (1 - start), false);
    }
    segment.set((int) (Math.max(0, 2 - start)), (int) (limit - start), true);
    for (int d = 2; d &lt; sqrtLimit; d++)
    {
        if (primes.get(d))
        {
            final int remainder = (int) (start % d);
            final long mStart = start - remainder + (remainder == 0 ? 0 : d);
            for (long m = Math.max(mStart, d * d); m &lt; limit; m += d)
            {
                segment.clear((int) (m - start));
            }
        }
    }
    return segment;
}
</code></pre>

<p>It needs a standard sieve to compute the primes for sieving segments (it computes it anew for every segment, you should change that):</p>

<pre><code>/**
 * Computes the primes using the sieve of Eratosthenes.
 *
 * @param limit  Primes will be sieved up to but not including this limit.
 *
 * @return  A bit set where exactly the elements with prime index
 *     are set to true.
 */
public static BitSet computePrimes(int limit)
{
    final BitSet primes = new BitSet();
    primes.set(0, false);
    primes.set(1, false);
    primes.set(2, limit, true);
    for (int d = 2; d &lt; sqrtCeil(limit); d++)
    {
        if (primes.get(d))
        {
            for (int m = d * d; m &lt; limit; m += d)
            {
                primes.clear(m);
            }
        }
    }
    return primes;
}
</code></pre>

<p>Note that wheel factorization can speed this up by a factor of three. See also <a href="http://stackoverflow.com/a/1043247/49246">this answer</a>, the basic sieve is the same.</p>
