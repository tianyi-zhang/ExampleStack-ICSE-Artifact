<p>There are many string functions you can use to compare strings, for example</p>

<pre><code>   if (result.equals("hello")) {
         doSomething();
   }
</code></pre>

<p>compares two strings</p>

<pre><code>   result.startsWith("search for") {
         doSomething()
   }
</code></pre>

<p>checks the beginning of the result</p>

<pre><code>   result.matches("yes|sure") {
         doSomething()
   }
</code></pre>

<p>checks result with regular expression.</p>

<p>You can find all that in a Java textbook. See for example</p>

<p><a href="https://docs.oracle.com/javase/tutorial/java/data/comparestrings.html" rel="nofollow">https://docs.oracle.com/javase/tutorial/java/data/comparestrings.html</a></p>

<p>If you want to use Levenshtein distance you can insert the following function in your code:</p>

<pre><code>public int LevenshteinDistance (String s0, String s1) {                          
    int len0 = s0.length() + 1;                                                     
    int len1 = s1.length() + 1;                                                     

    // the array of distances                                                       
    int[] cost = new int[len0];                                                     
    int[] newcost = new int[len0];                                                  

    // initial cost of skipping prefix in String s0                                 
    for (int i = 0; i &lt; len0; i++) cost[i] = i;                                     

    // dynamically computing the array of distances                                  

    // transformation cost for each letter in s1                                    
    for (int j = 1; j &lt; len1; j++) {                                                
        // initial cost of skipping prefix in String s1                             
        newcost[0] = j;                                                             

        // transformation cost for each letter in s0                                
        for(int i = 1; i &lt; len0; i++) {                                             
            // matching current letters in both strings                             
            int match = (s0.charAt(i - 1) == s1.charAt(j - 1)) ? 0 : 1;             

            // computing cost for each transformation                               
            int cost_replace = cost[i - 1] + match;                                 
            int cost_insert  = cost[i] + 1;                                         
            int cost_delete  = newcost[i - 1] + 1;                                  

            // keep minimum cost                                                    
            newcost[i] = Math.min(Math.min(cost_insert, cost_delete), cost_replace);
        }                                                                           

        // swap cost/newcost arrays                                                 
        int[] swap = cost; cost = newcost; newcost = swap;                          
    }                                                                               

    // the distance is the cost for transforming all letters in both strings        
    return cost[len0 - 1];                                                          
}
</code></pre>
