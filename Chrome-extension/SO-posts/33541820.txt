<p>In reply to Espinosa's comment, here is a solution when "<em>the original xml is not already (partially) indented or contain new lines</em>".</p>

<p><strong>Background</strong></p>

<p>Excerpt from the article (see <em>References</em> below) inspiring this solution:</p>

<blockquote>
  <p><em>Based on the DOM specification, whitespaces outside the tags are perfectly valid and they are properly preserved. To remove them, we can use XPathâ€™s normalize-space to locate all the whitespace nodes and remove them first.</em></p>
</blockquote>

<p><strong>Java Code</strong></p>

<pre><code>public static String toPrettyString(String xml, int indent) {
    try {
        // Turn xml string into a document
        Document document = DocumentBuilderFactory.newInstance()
                .newDocumentBuilder()
                .parse(new InputSource(new ByteArrayInputStream(xml.getBytes("utf-8"))));

        // Remove whitespaces outside tags
        XPath xPath = XPathFactory.newInstance().newXPath();
        NodeList nodeList = (NodeList) xPath.evaluate("//text()[normalize-space()='']",
                                                      document,
                                                      XPathConstants.NODESET);

        for (int i = 0; i &lt; nodeList.getLength(); ++i) {
            Node node = nodeList.item(i);
            node.getParentNode().removeChild(node);
        }

        // Setup pretty print options
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        transformerFactory.setAttribute("indent-number", indent);
        Transformer transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");

        // Return pretty print xml string
        StringWriter stringWriter = new StringWriter();
        transformer.transform(new DOMSource(document), new StreamResult(stringWriter));
        return stringWriter.toString();
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
</code></pre>

<p><strong>Sample usage</strong></p>

<pre><code>String xml = "&lt;root&gt;" + //
             "\n   "  + //
             "\n&lt;name&gt;Coco Puff&lt;/name&gt;" + //
             "\n        &lt;total&gt;10&lt;/total&gt;    &lt;/root&gt;";

System.out.println(toPrettyString(xml, 4));
</code></pre>

<p><strong>Output</strong></p>

<pre><code>&lt;root&gt;
    &lt;name&gt;Coco Puff&lt;/name&gt;
    &lt;total&gt;10&lt;/total&gt;
&lt;/root&gt;
</code></pre>

<p><strong>References</strong></p>

<ul>
<li><a href="http://myshittycode.com/2014/02/10/java-properly-indenting-xml-string/" rel="nofollow">Java: Properly Indenting XML String</a> published on <em>MyShittyCode</em></li>
<li><a href="http://stackoverflow.com/a/33936257/363573">Save new XML node to file</a></li>
</ul>
