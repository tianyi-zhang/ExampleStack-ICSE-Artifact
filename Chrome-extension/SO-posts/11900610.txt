<p>1)Create an activity. </p>

<pre><code>public class GraphView1 extends Activity {
@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    float[] values = new float[] { "your values"};
    String[] verlabels = new String[] { "your values" };
    String[] horlabels = new String[] { "your values"
    GraphView graphView = new GraphView(this, values,"GraphView",horlabels, verlabels, GraphView.BAR);
    setContentView(graphView);
}
} 
</code></pre>

<p>2)Then create another class extends View:   </p>

<pre><code>public class GraphView2 extends View{


public static boolean LINE = true;

private Paint paint;
private float[] values;
private String[] str;
private String[] verlabels;
private String title;
private boolean type;
Context context;


public GraphView(Context context, float[] values, String title, String[] str,String[] verlabels, boolean type) {

    super(context);
    if (values == null)
        values = new float[0];
    else
        this.values = values;
    if (title == null)
        title = "";
    else
        this.title = title;
    if (str == null)
        this.str = new String[0];
    else
        this.str = str;
    if (verlabels == null)
        this.verlabels = new String[0];
    else
        this.verlabels = verlabels;
    this.type = type;
    paint = new Paint();
}

@Override
protected void onDraw(final Canvas canvas) {
    context=getContext();
    float border = 15;
    float horstart = border * 2;
    float height = getHeight();
    float width = getWidth();
    float max = getMax();
    Log.w("max", ""+max);
    float min = getMin();
    Log.w("min", ""+min);
    float diff = max - min;
    float graphheight = height - (2 * border);
    float graphwidth = width - (2 * border);

    paint.setTextAlign(Align.LEFT);
    int vers = verlabels.length;
    for (int i = 0; i &lt; verlabels.length; i++) {
        paint.setColor(Color.DKGRAY);
        float y = ((graphheight / vers) * i) + border;
        canvas.drawLine(horstart, y, width, y, paint);
        paint.setColor(Color.WHITE);
        paint.setTextSize(10);
        canvas.drawText(verlabels[i], 0, y, paint);
    }
    int hors = values.length;
    for (int i = 0; i &lt; str.length; i++) {
        paint.setColor(Color.DKGRAY);
        float x = ((graphwidth / hors) * i) + horstart;
        canvas.drawLine(x, height - border, x, border, paint);
        paint.setTextAlign(Align.LEFT);
        if (i==str.length)
            paint.setTextAlign(Align.RIGHT);
        if (i==0)
            paint.setTextAlign(Align.LEFT);
        paint.setColor(Color.WHITE);
        paint.setTextSize(9);
        canvas.drawText( str[i], x, height - 4, paint);
    }

    paint.setTextAlign(Align.CENTER);
    canvas.drawText(title, (graphwidth / 2) + horstart, border - 4, paint);



    if (max != min) {
        paint.setColor(Color.BLUE);
        paint.setStyle(Paint.Style.FILL);

        if (type == BAR) {
            float datalength = values.length;
            float colwidth = (width - (2 * border)) / datalength;
            for (int i = 0; i &lt; values.length; i++) {
            //  float val = values[i] - min;

            //  float rat = val / diff;
            //  float h = graphheight * rat;
            //  canvas.drawRect((i * colwidth) + horstart, (border - h) + graphheight, ((i * colwidth) + horstart) + (colwidth - 1), height - (border - 1), paint);                     
                float graph_h = getHeight()-(border*2); 
                 // Log.e("", "graph_h &gt; "+graph_h);

                float ind_h = graph_h/7; 
                  //Log.e("", "ind_h &gt; "+ind_h);

                float t = values[i]/5;

                float top = (graph_h - ind_h*(t)); 
                 // Log.e("", " &gt; "+i+1);
                 // Log.e("", "top &gt; "+top);

                //for values between 0 and 5 ,vice versa
                //Log.e("", " values[i] &gt; "+values[i]);
                float acc = ind_h/5;
                acc = acc * (values[i]%5);

              //  Log.e("", " acc &gt; "+acc);

                canvas.drawRect((i * colwidth) + horstart, top+border-acc , ((i * colwidth) + horstart) + (colwidth - 1), graph_h+border, paint);                       
            }
        } else {
            float datalength = values.length;
            float colwidth = (width - (2 * border)) / datalength;
            float halfcol = colwidth / 2;
            float lasth = 0;
            for (int i = 0; i &lt; values.length; i++) {
                float val = values[i] - min;
                float rat = val / diff;
                float h = graphheight * rat;
                if (i &gt; 0)
                    canvas.drawLine(((i - 1) * colwidth) + (horstart + 1) + halfcol, (border - lasth) + graphheight, (i * colwidth) + (horstart + 1) + halfcol, (border - h) + graphheight, paint);
                lasth = h;
            }
        }
    }
}



private float getMax() {
    float largest = Integer.MIN_VALUE;
    for (int i = 0; i &lt; values.length; i++)
        if (values[i] &gt; largest)
            largest = values[i];
    return largest;
}

private float getMin() {
    float smallest = Integer.MAX_VALUE;
    for (int i = 0; i &lt; values.length; i++)
        if (values[i] &lt; smallest)
            smallest = values[i];
    return smallest;
}


}   
</code></pre>
