<p>Normally what we do to extract a color which is exactly equal or nearly equal to a color is take a threshold.</p>

<p>Here is your code with little modifications :</p>

<pre><code>// Take another parameter i.e. threshold
public static Image makeColorTransparent(BufferedImage im, final Color color, float threshold) {
    ImageFilter filter = new RGBImageFilter() {
        public float markerAlpha = color.getRGB() | 0xFF000000;
        public final int filterRGB(int x, int y, int rgb) {
            int currentAlpha = rgb | 0xFF000000;           // just to make it clear, stored the value in new variable
            float diff = Math.abs((currentAlpha - markerAlpha) / markerAlpha);  // Now get the difference
            if (diff &lt;= threshold) {                      // Then compare that threshold value
                return 0x00FFFFFF &amp; rgb;
            } else {
                return rgb;
            }
        }
    };
    ImageProducer ip = new FilteredImageSource(im.getSource(), filter);
    return Toolkit.getDefaultToolkit().createImage(ip);
}
</code></pre>

<p>Then call the function as <code>makeColorTransparent(image, color, 0.05f);</code><br>
But there is a problem in your image. The color of pixels on the corners of oval is exactly equal to the colors of pixel inside (<em>at bottom right</em>) of the oval. So algo is also removing those pixels. </p>

<p>And sadly you cannot include those pixels. I tried to do it with different threshold values. But either the corners are included or some pixels of oval are getting removed. What you can do for this is to use <code>0.05f</code> as threshold and then paint the areas where you want by hand (<em>Using photoshop or any simple image editor</em>).</p>

<p><a href="http://i.stack.imgur.com/q29UQ.jpg"><img src="http://i.stack.imgur.com/q29UQ.jpg" alt="enter image description here"></a></p>
