<p>Use property access instead of the default field access. This means the JPA provider will retrieve values from the <code>get</code> methods, instead of accessing them directly from the fields. Note also that since an <code>IntegerProperty</code> cannot wrap a <code>null</code> value, you should use <code>int</code> as the property type, not <code>Integer</code>:</p>

<pre><code>@Embeddable
@Access(AccessType.PROPERTY)
public class Destination implements Serializable {

    StringProperty city;
    StringProperty pincode;
    IntegerProperty destId;

    public Destination(){
        this.city = new SimpleStringProperty();
        this.pincode = new SimpleStringProperty();
        this.destId = new SimpleIntegerProperty();
    }

    public Destination(Integer destId,String city,String pincode){
        this();
        this.destId.set(destId);
        this.city.set(city);
        this.pincode.set(pincode);  
    }

    public IntegerProperty destIdProperty(){
        return destId;
    }

    public final int getDestId(){
        return destIdProperty().get();
    }

    public final void setDestId(int destId){
        destIdProperty().set(destId);
    }

    public StringProperty cityProperty(){
        return city;
    }

    public String getCity() {
        return cityProperty().get();
    }

    public void setCity(String city) {
        cityProperty().set(city); 
    }

    public StringProperty pincodeProperty(){
        return pincode;
    }

    public String getPincode() {
        return pincodeProperty().get();
    }

    public void setPincode(String pincode) {
        pincodeProperty().set(pincode); 
    }

    @Override
    public int hashCode(){
        final int prime = 31;
        int result = 1;

        result = prime * result
        + ((city == null) ? 0 : city.hashCode())
                + ((pincode == null) ? 0 : pincode.hashCode())
                + ((destId == null) ? 0 : destId.hashCode());   
        return result;
    }

    @Override
    public boolean equals(Object obj){
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Destination other = (Destination) obj;
        if (city == null) {
            if (other.city != null)
                return false;
        } else if (!city.equals(other.city))
            return false;
                if(pincode != other.pincode)
                    return false;
        if (destId != other.destId)
            return false;
        return true;

    }   

}
</code></pre>

<p>There is a good discussion of this on <a href="http://svanimpe.be/blog/properties-jpa.html" rel="nofollow">Steven van Impe's blog</a>.</p>
