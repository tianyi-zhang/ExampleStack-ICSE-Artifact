<p>The main reason the multi-thread version is faster is that you don't wait for the loop to finish.  You only wait for the threads to start.</p>

<p>You need to add after start();</p>

<pre><code>    t1.join();
    t2.join();
</code></pre>

<p>Once you do this you note that starting the threads takes so long at it's quite a bit slower.  If you make your test 100x longer, the cost of starting the threads is not so important.</p>

<p>The single threaded example takes longer to be JItted properly.  You need to make sure you run the test for at least 2 seconds, repeatedly</p>

<p>My multiple threaded version is</p>

<pre><code>public class Main {
    private long res1 = 0;
    public long p0, p1, p2, p3, p4, p5, p6, p7;
    private long res2 = 0;

    public static void main(String[] args) throws InterruptedException {
        Main m = new Main();

        for (int i = 0; i &lt; 10; i++) {
            long startTime = System.nanoTime();
            m.func();
            long endTime = System.nanoTime();

            long duration = endTime - startTime;
            System.out.println("duration: " + duration);
        }
        assert m.p0 + m.p1 + m.p2 + m.p3 + m.p4 + m.p5 + m.p6 + m.p7 == 0;
    }

    public void func() throws InterruptedException {
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 0; i &lt; 1000000000; i++) {
                    res1++;
                }
            }
        });

        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                for (int i = 1000000000; i &lt; 2000000000; i++) {
                    res2++;
                }
            }
        });

        t1.start();
        t2.start();
        t1.join();
        t2.join();
        System.out.println(res1 + res2);
    }
}
</code></pre>

<p>prints the following for multi-threaded tests.</p>

<pre><code>2000000000
duration: 179014396
4000000000
duration: 148814805
.. deleted ..
18000000000
duration: 61767861
20000000000
duration: 72396259
</code></pre>

<p>For the single threaded version I comment out one thread and get</p>

<pre><code>2000000000
duration: 266228421
4000000000
duration: 255203050
... deleted ...
18000000000
duration: 125434383
20000000000
duration: 125230354
</code></pre>

<p>As expected, when run long enough two threads are almost twice as fast as one.</p>

<p>In short, </p>

<ul>
<li><p>multi-threaded code can have smaller delays for the current thread if you don't wait for those operation to complete e.g. asynchronous logging and messaging.</p></li>
<li><p>single threaded coding can be much faster (and simpler) than multi-threaded code unless you have a significant CPU bound tasks to perform (or you can do concurrent IO)</p></li>
<li><p>Running the test repeatedly in the same JVM can give different results</p></li>
</ul>
