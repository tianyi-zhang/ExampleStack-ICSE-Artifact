<pre><code>public class FrontpageActivity extends ListActivity 
</code></pre>

<p>In <code>activity_frontpage.xml</code> you should have  coz your activity extends <code>ListActivity</code> and you have  <code>setContentView(R.layout.activity_frontpage)</code> in <code>onCreate</code></p>

<pre><code>&lt;ListView android:id="@android:id/list"
</code></pre>

<p>Edit:</p>

<p>If you need <code>ListView</code> in <code>Fragment</code>. You got it all wrong. <code>Fragment</code> is hosted by a <code>Activity</code>. You need to move all your code to fragment and use a asynctask for gettign xml from server. Rest all is self explanatory i guess.</p>

<p>Links you should check</p>

<p><a href="http://developer.android.com/training/basics/network-ops/xml.html" rel="nofollow">http://developer.android.com/training/basics/network-ops/xml.html</a>
<a href="http://developer.android.com/reference/android/app/ListActivity.html" rel="nofollow">http://developer.android.com/reference/android/app/ListActivity.html</a>
<a href="http://developer.android.com/reference/android/os/AsyncTask.html" rel="nofollow">http://developer.android.com/reference/android/os/AsyncTask.html</a></p>

<pre><code>public class FrontpageActivity  extends Activity {
    @Override
    protected void onCreate(Bundle savedInstanceState)  {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_frontpage);
        ActionBar actionBar = getActionBar();
        actionBar.setDisplayUseLogoEnabled(true);
        getFragmentManager().beginTransaction()
                    .add(R.id.container, new MyFragment())
                    .commit();

    }
}
</code></pre>

<p>MyFragment</p>

<pre><code>public class MyFragment extends ListFragment {
       static final String URL = "http://blog.codetech.de/rss";
        // XML node keys
        static final String KEY_ITEM = "item"; // parent node
        static final String KEY_TITLE = "title";
        static final String KEY_LINK = "link";
        private static final String ns = null;
        ListView lv;
        List&lt;Entry&gt; all = new ArrayList&lt;Entry&gt;();
        ProgressDialog pd;

            @Override
            public View onCreateView(LayoutInflater inflater, ViewGroup container,
                    Bundle savedInstanceState) {
                View rootView = inflater.inflate(R.layout.my_fragment1, container, false);
                pd = new ProgressDialog(getActivity());
                pd.setMessage("Getting xml and parsing...");
                return rootView;
            }

            @Override
            public void onActivityCreated(Bundle savedInstanceState) {
                // TODO Auto-generated method stub
                super.onActivityCreated(savedInstanceState);
                 lv = getListView();
                 new TheTask(getActivity()).execute();
            }
            class TheTask extends AsyncTask&lt;Void,ArrayList&lt;Entry&gt;,ArrayList&lt;Entry&gt;&gt;
            {
             Context context;
             TheTask(Context context)
             {
                 this.context = context;
             }
                @Override
                protected void onPostExecute(ArrayList&lt;Entry&gt; result) {
                    // TODO Auto-generated method stub
                    super.onPostExecute(result);
                    pd.dismiss();
                    CustomAdapter cus = new CustomAdapter(context,result);
                    lv.setAdapter(cus);
                    lv.setOnItemClickListener(new OnItemClickListener(){

                        @Override
                        public void onItemClick(AdapterView&lt;?&gt; arg0, View arg1,
                                int arg2, long arg3) {
                            // TODO Auto-generated method stub
                            Toast.makeText(context, "text", Toast.LENGTH_LONG).show();
                        }

                    });
                }

                @Override
                protected void onPreExecute() {
                    // TODO Auto-generated method stub
                    super.onPreExecute();
                    pd.show();
                }

                @Override
                protected ArrayList&lt;Entry&gt; doInBackground(Void... params) {
                    // TODO Auto-generated method stub
                    try
                    {
                     HttpClient httpclient = new DefaultHttpClient();
                     httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);
                     HttpGet request = new HttpGet(URL);
                     HttpResponse response = httpclient.execute(request);
                     HttpEntity resEntity = response.getEntity();
                     String _respons=EntityUtils.toString(resEntity);
                     InputStream is = new ByteArrayInputStream(_respons.getBytes());
                     XmlPullParser parser = Xml.newPullParser();
                     parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
                     parser.setInput(is, null);
                     parser.nextTag();
                     all =readFeed(parser);
                    }catch(Exception e)
                    {
                        e.printStackTrace();
                    }
                    return (ArrayList&lt;Entry&gt;) all;
                }

            }
            private List&lt;Entry&gt;  readFeed(XmlPullParser parser) throws XmlPullParserException, IOException {
                List&lt;Entry&gt; all = null ;
                parser.require(XmlPullParser.START_TAG, ns, "rss");
                while (parser.next() != XmlPullParser.END_TAG) {
                    if (parser.getEventType() != XmlPullParser.START_TAG) {
                        continue;
                    }
                    String name = parser.getName();
                    // Starts by looking for the entry tag
                    if (name.equals("channel")) {

                       all= readItem(parser);
                    } else {
                        skip(parser);
                    }
                }  
               return all;
            }
            private List&lt;Entry&gt; readItem(XmlPullParser parser) throws XmlPullParserException, IOException {
                List&lt;Entry&gt; entries = new ArrayList&lt;Entry&gt;();
                parser.require(XmlPullParser.START_TAG, ns, "channel");
                while (parser.next() != XmlPullParser.END_TAG) {
                    if (parser.getEventType() != XmlPullParser.START_TAG) {
                        continue;
                    }
                    String name = parser.getName();
                    // Starts by looking for the entry tag
                    if (name.equals("item")) {

                        entries.add(readEntry(parser));
                    } else {
                        skip(parser);
                    }
                }  
                return entries;
            }

            private Entry readEntry(XmlPullParser parser) throws XmlPullParserException, IOException {
                parser.require(XmlPullParser.START_TAG, ns, "item");
                String title = null;
                String link = null;
                while (parser.next() != XmlPullParser.END_TAG) {
                    if (parser.getEventType() != XmlPullParser.START_TAG) {
                        continue;
                    }
                    String name = parser.getName();
                    if (name.equals("title")) {
                        title = readTitle(parser);
                    } else if (name.equals("link")) {
                        link = readLink(parser);
                    } else {
                        skip(parser);
                    }
                }
                return new Entry(title, link);
            }

            // Processes title tags in the feed.
            private String readTitle(XmlPullParser parser) throws IOException, XmlPullParserException {
                parser.require(XmlPullParser.START_TAG, ns, "title");

                String title = readText(parser);
                parser.require(XmlPullParser.END_TAG, ns, "title");
                Log.i("..............",title);
                return title;
            }

            // Processes link tags in the feed.
            private String readLink(XmlPullParser parser) throws IOException, XmlPullParserException {
                String link = "";
                parser.require(XmlPullParser.START_TAG, ns, "link");

//              String tag = parser.getName();
                link =readText(parser);
//              String relType = parser.getAttributeValue(null, "rel");  
//              if (tag.equals("link")) {
//                  if (relType.equals("alternate")){
//                      link = parser.getAttributeValue(null, "href");
//                      parser.nextTag();
//                  } 
//              }
                parser.require(XmlPullParser.END_TAG, ns, "link");
                Log.i("..............",link);
               // map.put(KEY_LINK, link);
                return link;
            }

            // For the tags title and summary, extracts their text values.
            private String readText(XmlPullParser parser) throws IOException, XmlPullParserException {
                String result = "";
                if (parser.next() == XmlPullParser.TEXT) {
                    result = parser.getText();
                    parser.nextTag();
                }
                return result;
            }


 private void skip(XmlPullParser parser) throws XmlPullParserException, IOException {
        if (parser.getEventType() != XmlPullParser.START_TAG) {
            throw new IllegalStateException();
        }
        int depth = 1;
        while (depth != 0) {
            switch (parser.next()) {
            case XmlPullParser.END_TAG:
                depth--;
                break;
            case XmlPullParser.START_TAG:
                depth++;
                break;
            }
        }
     }
 }
</code></pre>

<p>my_fraagment1.xml</p>

<pre><code>&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="com.iklikla.codetechblog.FrontpageActivity$PlaceholderFragment"
    &gt;

    &lt;ListView
    android:id="@android:id/list"
    android:layout_width="fill_parent"
    android:layout_height="wrap_content"
/&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>Entry.java</p>

<pre><code>public class Entry {
    public final String title;
    public final String link;

    Entry(String title, String link) {
        this.title = title;
        this.link = link;
    }
}
</code></pre>

<p>CustomAdapter</p>

<pre><code>public class CustomAdapter extends BaseAdapter {


    private LayoutInflater minflater;
    ArrayList&lt;Entry&gt; entry;
    public CustomAdapter(Context context, ArrayList&lt;Entry&gt; result) {
        // TODO Auto-generated constructor stub
        minflater = LayoutInflater.from(context);
        this.entry=result;
    }

    @Override
    public int getCount() {
        // TODO Auto-generated method stub
        return entry.size();
    }

    @Override
    public Object getItem(int position) {
        // TODO Auto-generated method stub
        return position;
    }

    @Override
    public long getItemId(int position) {
        // TODO Auto-generated method stub
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        // TODO Auto-generated method stub
        ViewHolder holder;
        if(convertView==null)
        {
            convertView =minflater.inflate(R.layout.list_item, parent,false);
            holder = new ViewHolder();
            holder.tv1 = (TextView) convertView.findViewById(R.id.textView1);
            holder.tv2 = (TextView) convertView.findViewById(R.id.textView2);
            convertView.setTag(holder);
        }
        else
        {
            holder= (ViewHolder) convertView.getTag();
        }
        holder.tv1.setText(entry.get(position).title);
        holder.tv2.setText(entry.get(position).link);
        return convertView;
    }
static class ViewHolder
{
    TextView tv1,tv2;
}
}
</code></pre>

<p>list_item.xml</p>

<pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
android:layout_width="match_parent"
android:layout_height="match_parent" &gt;

    &lt;TextView
        android:id="@+id/textView1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:layout_marginTop="43dp"
        android:text="TextView" /&gt;

    &lt;TextView
        android:id="@+id/textView2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignRight="@+id/textView1"
        android:layout_below="@+id/textView1"
        android:layout_marginTop="38dp"
        android:text="TextView" /&gt;

&lt;/RelativeLayout&gt;
</code></pre>

<p>Snap Shot</p>

<p><img src="http://i.stack.imgur.com/7bMte.png" alt="enter image description here"></p>
