<p>You can use GestureDetector for this. This is very simple to use :</p>

<p>Create A class RecyclerTouchListener : </p>

<pre><code>public class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {

    private GestureDetector gestureDetector;
    private ClickListener clickListener;

    public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) {
        this.clickListener = clickListener;
        gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
            @Override
            public boolean onSingleTapUp(MotionEvent e) {
                return true;
            }

            @Override
            public void onLongPress(MotionEvent e) {
                View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                if (child != null &amp;&amp; clickListener != null) {
                    clickListener.onLongClick(child, recyclerView.getChildAdapterPosition(child));
                }
            }
        });
    }

    @Override
    public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {

        View child = rv.findChildViewUnder(e.getX(), e.getY());
        if (child != null &amp;&amp; clickListener != null &amp;&amp; gestureDetector.onTouchEvent(e)) {
            clickListener.onClick(child, rv.getChildPosition(child));
        }
        return false;
    }

    @Override
    public void onTouchEvent(RecyclerView rv, MotionEvent e) {
    }

    @Override
    public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {

    }


    public interface ClickListener {

        void onClick(View view, int position);

        void onLongClick(View view, int position);
    }

}
</code></pre>

<p>and you can use this class as follow : </p>

<pre><code>rvFilterOptions = (RecyclerView) rootView.findViewById(R.id.rvCommon);
        rvFilterOptions.setHasFixedSize(true);
        rvFilterOptions.addItemDecoration(new DividerItemDecoration(getActivity(),
                DividerItemDecoration.VERTICAL_LIST));
        LinearLayoutManager mLayoutManager = new LinearLayoutManager(getActivity());
        rvFilterOptions.setLayoutManager(mLayoutManager);


        rvFilterOptions.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), rvFilterOptions, new RecyclerTouchListener.ClickListener() {
            @Override
            public void onClick(View view, int position) {

// Perform click operation  and you can get post item from array using position
            }

            @Override
            public void onLongClick(View view, int position) {

// Perform Long click operation 
            }
        }));
</code></pre>

<p>Note : Concept is taken from <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.OnItemTouchListener.html" rel="nofollow">LINK</a></p>
