<p>The problem with your code is that you are using the wrong class to read raw data from the file. As the <code>BufferedReader</code> documentation says:</p>

<blockquote>
  <p><code>public int read() throws IOException</code></p>
  
  <p>Reads a single character.</p>
  
  <p>Returns: The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached</p>
</blockquote>

<p>So each call to the <code>read()</code> method of <code>BufferedReader</code> actually consumes one or two bytes (based on character encoding) from the input stream, which is not what you want. This also explains why you get a lot of -1: the stream ended much earlier than you thought.</p>

<p>Since PGM contains values as ASCII decimal, it is easy to parse using the <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Scanner.html" rel="nofollow">Scanner</a> class.</p>

<p>Here's an <em>almost untested</em> code that shows how to read a PGM image assuming that:</p>

<ul>
<li>it contains a single comment after the magic number (i.e. it does not have lines that start with a # except the second one)</li>
<li>the PGM file is exactly 4 lines long.</li>
</ul>

<p>Here's the code:</p>

<pre><code>String filePath = "image.pgm";
fileInputStream = new FileInputStream(filePath);
Scanner scan = new Scanner(fileInputStream);
// Discard the magic number
scan.nextLine();
// Discard the comment line
scan.nextLine();
// Read pic width, height and max value
int picWidth = scan.nextInt();
int picHeight = scan.nextInt();
int maxvalue = scan.nextInt();

fileInputStream.close();

 // Now parse the file as binary data
 fileInputStream = new FileInputStream(filePath);
 DataInputStream dis = new DataInputStream(fileInputStream);

 // look for 4 lines (i.e.: the header) and discard them
 int numnewlines = 4;
 while (numnewlines &gt; 0) {
     char c;
     do {
         c = (char)(dis.readUnsignedByte());
     } while (c != '\n');
     numnewlines--;
 }

 // read the image data
 int[][] data2D = new int[picHeight][picWidth];
 for (int row = 0; row &lt; picHeight; row++) {
     for (int col = 0; col &lt; picWidth; col++) {
         data2D[row][col] = dis.readUnsignedByte();
         System.out.print(data2D[row][col] + " ");
     }
     System.out.println();
 }
</code></pre>

<p>Need to implement: support for comment lines, values for each element should be divided by <code>maxvalue</code>, error checking for malformed files, exception handling. I tested it on a PGM file using UNIX end-of-lines, but it should work on Windows too.</p>

<p>Let me stress that <strong>this is not a robust nor complete implementation of a PGM parser</strong>. This code is intended just as proof of concept that maybe accomplishes just enough for your needs.</p>

<p>If you really need a robust PGM parser, you may use the tools provided by <a href="http://netpbm.sourceforge.net/" rel="nofollow">Netpbm</a>.</p>
