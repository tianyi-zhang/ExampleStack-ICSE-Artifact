<p>Some guidelines how to achieve this with custom <code>TextView</code>:</p>

<ol>
<li>Extend <code>TextView</code> component</li>
<li>Create <code>Bitmap</code> and <code>Canvas</code> where you draw background and text</li>
<li>Draw wanted background color into allocated <code>Canvas</code>(e.g. <code>Color.argb(80, 255, 255, 255)</code>)</li>
<li>Draw the text with <code>Paint</code> having mode <code>PorterDuffXfermode(Mode.CLEAR)</code> (Remember: Only allocate <code>Bitmap</code> and <code>Canvas</code> once) since you draw it into <code>Bitmap</code></li>
<li>Draw the <code>Bitmap</code> into <code>TextViews</code> canvas</li>
</ol>

<p>Here is some sample code to get started with:</p>

<pre><code>public class TransparentTextView extends TextView {

    private Paint mTextPaint;
    private Bitmap mBitmapToDraw;

    public TransparentTextView(Context context) {
        super(context);

        setup();
    }

    public TransparentTextView(Context context, AttributeSet attrs) {
        super(context, attrs);

        setup();
    }

    public TransparentTextView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);

        setup();
    }

    private void setup() {
        mTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        mTextPaint.setTextSize(getTextSize());
        mTextPaint.setStyle(Paint.Style.FILL);
        mTextPaint.setXfermode(new PorterDuffXfermode(Mode.CLEAR));
    }

    @Override
    protected void onDraw(Canvas canvas) {
        if (mBitmapToDraw == null) {
            mBitmapToDraw = Bitmap.createBitmap(getWidth(), getHeight(),
                    Bitmap.Config.ARGB_8888);

            if (mBitmapToDraw != null) {
                Canvas c = new Canvas(mBitmapToDraw);

                c.drawColor(Color.argb(80, 255, 255, 255));

                c.drawText(getText().toString(), getPaddingLeft(),
                        getPaddingTop(), mTextPaint);
            }
        }

        if (mBitmapToDraw != null) {
            canvas.drawBitmap(mBitmapToDraw, 0, 0, null);
        } else {
            super.onDraw(canvas);
        }
    }
}
</code></pre>

<p>If you are setting text dynamically, you will need to reset <code>mBitmapToDraw</code> in order to get it refreshed.</p>
