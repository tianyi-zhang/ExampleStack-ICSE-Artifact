<p>Without seeing more of your code I can't be sure what it is you want to do with the data, but I can give you a basic example of how to use an AsyncTask. First you won't need any of that Thread stuff in getUrl(), so lets get rid of it. getUrl() should look something like this:</p>

<pre><code>public static String getUrl(String url) {

    final StringBuilder sb = new StringBuilder();


    try 
    {
        InputStream is = (InputStream) new URL(url).getContent();
        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
        String result, line = reader.readLine();
        result = line;
        while((line=reader.readLine())!=null){
            result+=line;
        }

        sb.append(result);


    } catch (Exception e)
    {
    // TODO: handle exception
        e.printStackTrace();
    }


    String result = sb.toString();

    return result;

}
</code></pre>

<p>Next lets wrap your call to WebApi.getData in an AsyncTask, so that it runs in the background.</p>

<pre><code>        new AsyncTask&lt;Void, Void, JSONObject&gt;(){

        @Override
        protected JSONObject doInBackground(Void... params) {
            JSONObject data = WebApi.getData(id);
            return data;
        }
        @Override
        protected void onPostExecute(JSONObject result){
            //here you can do something with result
        }

    }.execute();
</code></pre>

<p>AsynTask will execute whatever code is in doInBackground() in a background thread, and then return the result to onPostExecute(), which will be run on the UI thread. Please note id will have to be declared final in the example I gave above.</p>

<p>As has already been said, you should probably read the <a href="http://developer.android.com/reference/android/os/AsyncTask.html" rel="nofollow">documentation</a> on AsyncTask.</p>
