<p>Hopefully it isn't too late to help!  I have ran into this issue, I think a lot of people are unaware of it because they don't have many devices to test across. Anyway, here is the solution I have found  by looking into the classes of this crop lib <a href="https://github.com/jdamcd/android-crop" rel="nofollow">https://github.com/jdamcd/android-crop</a> which is based on AOSP. This is a copy paste job so it should all be very easy to get into your project. Apologies for the formatting, I wrestled with this comment box and lost.</p>

<pre><code>Intent intent = new Intent();
intent.setAction(Intent.ACTION_GET_CONTENT);
intent.setType("image/*");
startActivityForResult(Intent.createChooser(intent,"whatever you want",1);

@Override
public void onActivityResult(int requestCode, int resultCode, Intent data)
{
    super.onActivityResult(requestCode, resultCode, data);
    switch (requestCode)
    {
        case 1:
        if (resultCode == RESULT_OK)
        {
            Uri selectedImage = data.getData();
            int rotationInDegrees = getRotationInDegrees(selectedImage);
        }
        break;
    }
 }

private int getRotationInDegrees(Uri uri)
{
     return ImageOrientationUtil
    .getExifRotation(ImageOrientationUtil
    .getFromMediaUri(
        this,
        getContentResolver(),
        uri));


}
</code></pre>

<p>ImageOrientationUtil.class</p>

<pre><code>import android.content.ContentResolver;
import android.content.Context;
import android.database.Cursor;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.ParcelFileDescriptor;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import java.io.Closeable;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;


public class ImageOrientationUtil
{

    private static final String SCHEME_FILE = "file";
    private static final String SCHEME_CONTENT = "content";

    public static void closeSilently(@Nullable Closeable c) {
        if (c == null) return;
        try {
            c.close();
        } catch (Throwable t) {
       // Do nothing
     }
   }

   public static int getExifRotation(File imageFile) {
       if (imageFile == null) return 0;
       try {
           ExifInterface exif = new ExifInterface(imageFile.getAbsolutePath());
    // We only recognize a subset of orientation tag values
    switch (exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_UNDEFINED)) {
        case ExifInterface.ORIENTATION_ROTATE_90:
            return 90;
        case ExifInterface.ORIENTATION_ROTATE_180:
            return 180;
        case ExifInterface.ORIENTATION_ROTATE_270:
            return 270;
        default:
            return ExifInterface.ORIENTATION_UNDEFINED;
    }
    } catch (IOException e) {
  //  Log.e("Error getting Exif data", e);
    return 0;
   }
}

@Nullable
public static File getFromMediaUri(Context context,
ContentResolver  resolver,  Uri uri) {
if (uri == null) return null;
if (SCHEME_FILE.equals(uri.getScheme())) {
     return new File(uri.getPath());
   } else if (SCHEME_CONTENT.equals(uri.getScheme())) {
    final String[] filePathColumn = { MediaStore.MediaColumns.DATA,   MediaStore.MediaColumns.DISPLAY_NAME };
    Cursor cursor = null;
    try {
        cursor = resolver.query(uri, filePathColumn, null, null, null);
        if (cursor != null &amp;&amp; cursor.moveToFirst()) {
            final int columnIndex = (uri.toString().startsWith("content://com.google.android.gallery3d")) ?
                cursor.getColumnIndex(MediaStore.MediaColumns.DISPLAY_NAME) :
                cursor.getColumnIndex(MediaStore.MediaColumns.DATA);
            // Picasa images on API 13+
            if (columnIndex != -1) {
                String filePath = cursor.getString(columnIndex);
                if (!TextUtils.isEmpty(filePath)) {
                    return new File(filePath);
                }
            }
        }
    } catch (IllegalArgumentException e) {
        // Google Drive images
        return getFromMediaUriPfd(context, resolver, uri);
    } catch (SecurityException ignored) {
        // Nothing we can do
    } finally {
        if (cursor != null) cursor.close();
    }
}
return null;
}

private static String getTempFilename(Context context) throws IOException {
    File outputDir = context.getCacheDir();
    File outputFile = File.createTempFile("image", "tmp", outputDir);
    return outputFile.getAbsolutePath();
}

@Nullable
private static File getFromMediaUriPfd(Context context, ContentResolver    resolver, Uri uri) {
if (uri == null) return null;

FileInputStream input = null;
FileOutputStream output = null;
try {
    ParcelFileDescriptor pfd = resolver.openFileDescriptor(uri, "r");
    FileDescriptor fd = pfd.getFileDescriptor();
    input = new FileInputStream(fd);

    String tempFilename = getTempFilename(context);
    output = new FileOutputStream(tempFilename);

    int read;
    byte[] bytes = new byte[4096];
    while ((read = input.read(bytes)) != -1) {
        output.write(bytes, 0, read);
    }
    return new File(tempFilename);
   } catch (IOException ignored) {
    // Nothing we can do
  } finally {
    closeSilently(input);
    closeSilently(output);
  }
  return null;
  }
}
</code></pre>
