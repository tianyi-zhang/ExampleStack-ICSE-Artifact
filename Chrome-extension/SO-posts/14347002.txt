<p>I changed <code>NetCanvas</code> to draw a shape look like second image in your question:</p>

<pre><code>public class NetCanvas1 extends View {

    Path path0 = new Path();
    private Paint p0;
    private int points_Num = 20;
    private int first_Points_Num = 5;

    public NetCanvas1(Context context) {
        super(context);
        p0 = new Paint();
        p0.setShader(new LinearGradient(0, 0, 230, getHeight(), Color.GREEN,
                Color.RED, Shader.TileMode.CLAMP));
        p0.setStyle(Style.STROKE);

    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {

        float x0 = event.getX();
        float y0 = event.getY();

        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            path0.moveTo(x0, y0);
            path0.lineTo(x0, y0);

        } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
            path0.lineTo(x0, y0);
        } else if (event.getAction() == MotionEvent.ACTION_UP) {
            path0.lineTo(x0, y0);
            invalidate();
        }
        return true;
    }

    @Override
    public void onDraw(Canvas canvas) {
        canvas.drawPath(path0, p0);
        FlaotPoint[] pointArray = getPoints();
        try {
            for (int i = 0; i &lt; first_Points_Num; i++) {
                for (int j = i; j &lt; pointArray.length; j++) {
                    canvas.drawLine(pointArray[i].getX(), pointArray[i].getY(),
                            pointArray[j].getX(), pointArray[j].getY(), p0);
                }
            }
            path0.reset();
        } catch (Exception e) {
        }
    }

    private FlaotPoint[] getPoints() {
        FlaotPoint[] pointArray = new FlaotPoint[points_Num];
        PathMeasure pm = new PathMeasure(path0, false);
        float length = pm.getLength();
        float distance = 0f;
        float speed = length / points_Num;
        int counter = 0;
        float[] aCoordinates = new float[2];

        while ((distance &lt; length) &amp;&amp; (counter &lt; points_Num)) {
            // get point from the path
            pm.getPosTan(distance, aCoordinates, null);
            pointArray[counter] = new FlaotPoint(aCoordinates[0],
                    aCoordinates[1]);
            counter++;
            distance = distance + speed;
        }

        return pointArray;
    }

    class FlaotPoint {
        float x, y;

        public FlaotPoint(float x, float y) {
            this.x = x;
            this.y = y;
        }

        public float getX() {
            return x;
        }

        public float getY() {
            return y;
        }
    }
}
</code></pre>

<p>Result depends on values of <code>points_Num</code>, <code>first_Points_Num</code> and order of points that are connected with lines in for loops:</p>

<pre><code>for (int i = 0; i &lt; first_Points_Num; i++) {
                for (int j = i; j &lt; pointArray.length; j++) {
                    canvas.drawLine(pointArray[i].getX(), pointArray[i].getY(),
                            pointArray[j].getX(), pointArray[j].getY(), p0);
                }
            }
</code></pre>

<p>You can change value of each variable or order of points to change result.Result may be looks like these:</p>

<p><img src="http://i.stack.imgur.com/vY0cB.png" alt="enter image description here">   <img src="http://i.stack.imgur.com/pOyns.png" alt="enter image description here"></p>

<p>My idea is simple: <strong><em>Get points from path and connect them with lines</em></strong>.If you want to see more details in about getting points from path,that is done in <code>getPoints()</code> method,you can see <strong><a href="http://stackoverflow.com/a/14346276/1043882">this answer</a></strong> and it's references.I <em>hope</em> this help you.</p>
