<p>The problem is that you put a <code>ListView</code> in a <code>ScrollView</code>. The Android API says you should never ever put a scrollable element in another scrollable element. </p>

<p>If you need to to this anyway, you can solve the problem by subclassing the <code>ListView</code> and overwriting the <code>onMeasure()</code> method.</p>

<ul>
<li><a href="http://stackoverflow.com/questions/3495890/how-can-i-put-a-listview-into-a-scrollview-without-it-collapsing">How can I put a ListView into a ScrollView without it collapsing?</a></li>
<li><a href="http://nex-otaku-en.blogspot.de/2010/12/android-put-listview-in-scrollview.html" rel="nofollow">http://nex-otaku-en.blogspot.de/2010/12/android-put-listview-in-scrollview.html</a></li>
</ul>

<p>Edit: You use the following code to create a fully expanded list. Also it's worth to notice, that this might be a horrible idea for large list, due to performance reasons. </p>

<pre><code>public class FullExpandedListView extends ListView {

    public FullExpandedListView(Context context) {
        super(context);
    }

    @Override
    protected void onMeasure(int a, int b) {
        super.onMeasure(a, b);

        setListViewHeightBasedOnChildren();
    }

    private void setListViewHeightBasedOnChildren() {

        SwfListAdapter listAdapter = (SwfListAdapter) getAdapter();

        if (listAdapter == null) {

            return;
        }

        int totalHeight = 0;
        int desiredWidth = MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST);

        for (int i = 0; i &lt; listAdapter.getCount(); i++) {

            View listItem = listAdapter.getView(i, null, listControl);
            listItem.measure(desiredWidth, MeasureSpec.UNSPECIFIED);
            totalHeight += listItem.getMeasuredHeight();
        }

        ViewGroup.LayoutParams params = listControl.getLayoutParams();
        params.height = totalHeight + (listControl.getDividerHeight() * (listAdapter.getCount() - 1));
        setLayoutParams(params);
    }
}
</code></pre>
