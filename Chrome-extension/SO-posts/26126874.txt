<p>The classical Javanese "object oriented" approach for this is to use a dedicated class storing a pair of values (<code>int</code> values, in this case), and sort them, as already pointed out in most of the other answers. However, I'd recommend to <strong>not</strong> make this class <code>Comparable</code>. Instead, a <code>Comparator</code> could be used, which would make it much easier to introduce new sorting orders. Particularly, there could be <code>Comparator</code> implementations for sorting in ascending/descending order, based on the first/second value, respectively. Only then, object orientation plays out its advantages, compensating the "disadvantage" of having to create such a pair of <code>int</code> values as a "dummy data structure" in the first place...</p>

<p>However, I wanted to try to find a solution for the original question as well, namely, sorting two arrays "in sync". Despite the task of sorting seemingly being trivial, one can dedicate a lot of work to <em>doing it right</em> (see <a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming" rel="nofollow">Chapter 3 of TAOCP</a>). A bubble sort is simple but inefficient even for medium-sized arrays. Implementing a quick- or merge sort can be fiddly when trying to get the indices right. However, one solution can be obtained by simply taking the existing <code>sort</code> method from <code>java.lang.Arrays</code>, and factoring out the most elementary building block: The <code>swap</code> function:</p>

<pre><code>public class ArraySort
{
    public static void main(String[] args)
    {
        final int A[] = new int[4];
        final int B[] = new int[4];
        A[0] = 2;  B[0] = 3;
        A[1] = 9;  B[1] = 11;
        A[2] = 5;  B[2] = 6;
        A[3] = 3;  B[3] = 10;

        Swapper swapper = new Swapper()
        {
            @Override
            public void swap(int array[], int i0, int i1)
            {
                ArraySort.swap(A, i0, i1);
                ArraySort.swap(B, i0, i1);
            }
        };
        sort(A, 0, A.length, swapper);

        for (int i=0; i&lt;A.length; i++)
        {
            System.out.println("("+A[i]+","+B[i]+")");
        }
    }

    interface Swapper
    {
        void swap(int array[], int i0, int i1);
    }

    public static void swap(int array[], int i0, int i1)
    {
        int t = array[i0];
        array[i0] = array[i1];
        array[i1] = t;
    }

    // The following methods are copied from java.util.Arrays:
    public static void sort(int x[], int off, int len, Swapper swapper)
    {
        if (len &lt; 7)
        {
            for (int i = off; i &lt; len + off; i++)
            {
                for (int j = i; j &gt; off &amp;&amp; x[j - 1] &gt; x[j]; j--)
                {
                    swapper.swap(x, j, j - 1);
                }
            }
            return;
        }

        int m = off + (len &gt;&gt; 1);
        if (len &gt; 7)
        {
            int l = off;
            int n = off + len - 1;
            if (len &gt; 40)
            { 
                int s = len / 8;
                l = med3(x, l, l + s, l + 2 * s);
                m = med3(x, m - s, m, m + s);
                n = med3(x, n - 2 * s, n - s, n);
            }
            m = med3(x, l, m, n);
        }
        int v = x[m];

        int a = off, b = a, c = off + len - 1, d = c;
        while (true)
        {
            while (b &lt;= c &amp;&amp; x[b] &lt;= v)
            {
                if (x[b] == v)
                {
                    swapper.swap(x, a++, b);
                }
                b++;
            }
            while (c &gt;= b &amp;&amp; x[c] &gt;= v)
            {
                if (x[c] == v)
                {
                    swapper.swap(x, c, d--);
                }
                c--;
            }
            if (b &gt; c)
            {
                break;
            }
            swapper.swap(x, b++, c--);
        }

        int s, n = off + len;
        s = Math.min(a - off, b - a);
        vecswap(x, off, b - s, s, swapper);
        s = Math.min(d - c, n - d - 1);
        vecswap(x, b, n - s, s, swapper);

        if ((s = b - a) &gt; 1)
        {
            sort(x, off, s, swapper);
        }
        if ((s = d - c) &gt; 1)
        {
            sort(x, n - s, s, swapper);
        }
    }

    private static void vecswap(int x[], int a, int b, int n, Swapper swapper)
    {
        for (int i = 0; i &lt; n; i++, a++, b++)
        {
            swapper.swap(x, a, b);
        }
    }

    private static int med3(int x[], int a, int b, int c)
    {
        return (x[a] &lt; x[b] ? (x[b] &lt; x[c] ? b : x[a] &lt; x[c] ? c : a)
            : (x[b] &gt; x[c] ? b : x[a] &gt; x[c] ? c : a));
    }

}
</code></pre>

<hr>

<h2>Notes</h2>

<p>This is not a solution that I would recommend. It's just an attempt to answer the question</p>

<blockquote>
  <p>or it can be done straight. [sic!]</p>
</blockquote>

<p>And the answer is: Yes, it is possible, although the solutions that are introducing some sort of an <code>IntPair</code> are more idiomatic. </p>

<p>Apart from that, it would probably be more efficient to "inline" the <code>Swapper#swap</code> calls to directly swap elements of two arrays that are stored in instance variables, or passed as method parameters. However, I liked the genericity of such a <code>Swapper</code> interface. Additionally, it would be nice to generalize this even further, by passing in something like a </p>

<pre><code>interface IntArrayEntryComparator {
    int compare(int array[], int i0, int i1);
}
</code></pre>

<p>But the latter would go beyond what I wanted to test/demonstrate with this class.</p>
