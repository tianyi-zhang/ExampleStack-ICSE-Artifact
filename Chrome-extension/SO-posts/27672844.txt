<p>Adneal's answer is great and I was using it until recently. But then I wanted my app to make use of material design and thus <code>Theme.AppCompat.*</code> style and <code>android.support.v7.widget.Toolbar</code>.  </p>

<p>Yes, it stopped working and I was trying to fix it by setting <code>Your.Theme</code>'s parent to <code>@style/Widget.AppCompat.ActionButton.Overflow</code>. It worked by propertly setting <code>contentDescription</code> but then it failed when casting to <code>ImageButton</code>. It turned out <strong>in latest <code>(version 23) android.support.v7</code>class <a href="http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/5.0.0_r1/android/support/v7/widget/ActionMenuPresenter.java#ActionMenuPresenter.OverflowMenuButton" rel="nofollow"><code>OverflowMenuButton</code></a> extends from <code>AppCompatImageView</code></strong>. Changing casting class was enought to make it work with Toolbar on Nexus 5 running Lollipop.</p>

<p>Then I ran it on Galaxy S4 with KitKat and no matter what I tried I couldn't set overflow's <code>contentDescription</code> to my custom value. But in <a href="https://chromium.googlesource.com/android_tools/+/8fe116f93f350dcf73c6fe70db893985bf1b91d5/sdk/extras/android/support/v7/appcompat/res/values/styles_base.xml#80" rel="nofollow">AppCompat styles</a> I found it already has default value:</p>

<pre><code>&lt;item name="android:contentDescription"&gt;@string/abc_action_menu_overflow_description&lt;/item&gt;
</code></pre>

<p>So why not use it? Also by Hannes idea (in comments) I implemented listener, to get rid of some random time for delay in <code>postDelayed</code>. And as overflow icon is already in AppCompat library, then I would use it as well - I am applying color filter, so I don't need any icon resource on my own.</p>

<p>My code based on Adneal's work with Android Lollipop improvements:</p>

<pre><code>public static void setOverflowButtonColor(final Activity activity) {
    final String overflowDescription = activity.getString(R.string.abc_action_menu_overflow_description);
    final ViewGroup decorView = (ViewGroup) activity.getWindow().getDecorView();
    final ViewTreeObserver viewTreeObserver = decorView.getViewTreeObserver();
    viewTreeObserver.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
        @Override
        public void onGlobalLayout() {
            final ArrayList&lt;View&gt; outViews = new ArrayList&lt;View&gt;();
            decorView.findViewsWithText(outViews, overflowDescription,
                    View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION);
            if (outViews.isEmpty()) {
                return;
            }
            AppCompatImageView overflow=(AppCompatImageView) outViews.get(0);
            overflow.setColorFilter(Color.CYAN);
            removeOnGlobalLayoutListener(decorView,this);
        }
    });
}
</code></pre>

<p>and as per <a href="http://stackoverflow.com/a/23741481/2707179">another StackOverflow answer</a>:</p>

<pre><code>public static void removeOnGlobalLayoutListener(View v, ViewTreeObserver.OnGlobalLayoutListener listener) {
    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) {
        v.getViewTreeObserver().removeGlobalOnLayoutListener(listener);
    }
    else {
        v.getViewTreeObserver().removeOnGlobalLayoutListener(listener);
    }
}
</code></pre>

<p>of course instead of <code>Color.CYAN</code> you can use your own color - <code>activity.getResources().getColor(R.color.black);</code></p>

<p>EDIT:
Added support for latest AppCompat library (23), which uses AppCompatImageView
For AppCompat 22 you should cast overflow button to TintImageView </p>
