<p>The Method onPostExecute() is used to update the UI , so no need to run a background thread to do this. </p>

<p><strong>UPDATE - Created you a custom Adapter so try changing onPostExecute() as follows and add this class ProductsAdapter to your Project</strong></p>

<p><strong>Update 2 -->> All of my Code to Now use a Product Class instead of a HashMap, I don't see the need for you to be using a HashMap here So try this code. Hopefully this is all you need now</strong></p>

<p>If all Else Fails the best way to handle anything is build it custom </p>

<p>onPostExecute() Method to this:</p>

<pre><code>/**
 * After completing background task Dismiss the progress dialog
 * **/
protected void onPostExecute(String file_url) {
    // dismiss the dialog after getting all products
    pDialog.dismiss();

     if(productsList.size() &gt; 0){
            /**
             * Updating parsed JSON data into ListView
             * */

           // Added a Custom Adapter instead of SimpleAdapter
            ProductsAdapter adapter = new ProductsAdapter(getBaseContext(), productsList);

            if(getListView() != null){

               // updating listview
              setListAdapter(adapter);
           }else{
               Log.d("ListView-Reference", "ListView is null");
           }
      }else{
                Log.d("Product List", "Products list is empty");
          }
   }
</code></pre>

<p>Custom Adapter Class</p>

<pre><code>public class ProductsAdapter extends BaseAdapter {


private Arraylist&lt;Product&gt; m_productsList = null;
private LayoutInflater mInflater = null;

private class Row{

    TextView mTextViewPID;
    TextView mTextViewName;
    TextView mTextViewPrice;


}


public ProductsAdapter(Context context, Arraylist&lt;Product&gt; productsList){
    this.mInflater = LayoutInflater.from(context);
    this.m_productsList = productsList;

}


// --------------------------------------------------
// BaseAdapter Overrides
// --------------------------------------------------

@Override
public int getCount() {
    int count = 0;

    if((m_productsList !=null) &amp;&amp; (m_productsList.size() &gt;= 1)){

        count = m_productsList.size();

    }

    return count;
}

@Override
public Object getItem(int position) {
    // TODO Auto-generated method stub
    return m_productsList.get(position);
}

@Override
public long getItemId(int position) {
    // TODO Auto-generated method stub
    return position;
}

@Override
public View getView(int position, View convertView, ViewGroup parent) {

    Row theRow;

    // If ConvertVIew is null
    if(convertView == null){

        theRow = new Row();

        convertView = mInflater.inflate(R.layout.activity_display_requested, null);

        theRow.mTextViewPID         = (TextView) convertView.findViewById(R.id.pid);
        theRow.mTextViewName        = (TextView) convertView.findViewById(R.id.name);
        theRow.mTextViewPrice       = (TextView) convertView.findViewById(R.id.budget);


        convertView.setTag(theRow);

    }else{

        theRow = (Row) convertView.getTag();
    }


    theRow.mTextViewPID.setText(m_productsList.get(position).pid);
    theRow.mTextViewName.setText(m_productsList.get(position).name);
    theRow.mTextViewPrice.setText(m_productsList.get(position).budget);



    return convertView;
}
</code></pre>

<p>Add a Product Class</p>

<pre><code>public class Product{

 // Simple Variables for this Item
 public int pid = -1;
 public String name = null;
 public String budget = null;

} 
</code></pre>

<p>I am not sure why you want to use a HashMap for these Values instead of an Object But this is what i would do</p>

<p>Then Instead of Using a HashMap just use ArrayList as follows:</p>

<p>Use an ArrayList Of Product Objects instead of Hashmap</p>

<p><code>ArrayList&lt;Product&gt; productsList = new ArrayList&lt;Product&gt;();</code></p>

<p>New doInBackground() Method</p>

<pre><code>  /**
 * getting All products from url
 * */
protected String doInBackground(String... args) {
    // Building Parameters
    List&lt;NameValuePair&gt; params = new ArrayList&lt;NameValuePair&gt;();
    // getting JSON string from URL
    JSONObject json = jParser.makeHttpRequest(url_all_products, "GET", params);

    // Check your log cat for JSON reponse
    Log.d("All Products: ", json.toString());

    try {
        // Checking for SUCCESS TAG
        int success = json.getInt(TAG_SUCCESS);

        if (success == 1) {
            // products found
            // Getting Array of Products
            products = json.getJSONArray(TAG_PRODUCTS);

            // looping through All Products
            for (int i = 0; i &lt; products.length(); i++) {
                JSONObject c = products.getJSONObject(i);

                // Storing each json item in variable
                String id = c.getString(TAG_PID);
                String name = c.getString(TAG_NAME);
                String budget = c.getString(TAG_BUDGET);

                // Create a new Product Obect, set its Values
                Product mProduct = new Product();
                mProduct.pid = id;
                mProduct.name = name;
                mProduct.budget = budget;

                // adding Product to ArrayList
                productsList.add(mProduct);
            }
        } else {
            // no products found
            // Launch Add New product Activity
            Intent i = new Intent(getApplicationContext(),
                    MainMenu.class);
            // Closing all previous activities
            i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            startActivity(i);
        }
    } catch (JSONException e) {
        e.printStackTrace();
    }

    return null;
}
</code></pre>
