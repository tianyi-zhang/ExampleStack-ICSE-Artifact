<p>You can do it in code with <a href="https://developer.android.com/reference/android/support/v4/view/PagerTabStrip.html#setDrawFullUnderline%28boolean%29" rel="nofollow">PagerTabStrip.setDrawFullUnderline(boolean drawFull)</a>.</p>

<p>Here's a post on styling the PagerTabStrip.</p>

<p><a href="http://blog.stylingandroid.com/archives/1378" rel="nofollow">http://blog.stylingandroid.com/archives/1378</a></p>

<p><strong>Update:</strong>
Looking at the source for PagerTabStrip, it doesn't appear this is possible. The onDraw() method calls to the super class, which draws the text, then PagerTabStrip draws the indicator at the bottom of the view.  To change the background of the text that is currently selected you would need to draw the indicator at full height before the text was drawn.</p>

<p>This would require a custom class, probably using the code from PagerTabStrip and it's super class, and customizing the onDraw method for your needs.</p>

<p>The code for onDraw() from PagerTabStrip is below.</p>

<pre><code>@Override
protected void onDraw(Canvas canvas) {
    super.onDraw(canvas);

    final int height = getHeight();
    final int bottom = height;
    final int left = mCurrText.getLeft() - mTabPadding;
    final int right = mCurrText.getRight() + mTabPadding;
    final int top = bottom - mIndicatorHeight;

    mTabPaint.setColor(mTabAlpha &lt;&lt; 24 | (mIndicatorColor &amp; 0xFFFFFF));
    canvas.drawRect(left, top, right, bottom, mTabPaint);

    if (mDrawFullUnderline) {
        mTabPaint.setColor(0xFF &lt;&lt; 24 | (mIndicatorColor &amp; 0xFFFFFF));
        canvas.drawRect(getPaddingLeft(), height - mFullUnderlineHeight,
                getWidth() - getPaddingRight(), height, mTabPaint);
    }
}
</code></pre>
