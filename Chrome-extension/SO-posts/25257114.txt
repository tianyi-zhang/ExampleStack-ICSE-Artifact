<p>An <strong>advanced pull to refresh</strong> will help you to provide <code>modern approach</code> in your app.
It is very <code>smooth and easy</code> to implement. And it will support for the lower versions also (from v2.3). The below screen shot will recall the new kind of refresh.</p>

<p>UI part</p>

<p>Create an Android from your eclipse or Android studio.</p>

<p>In your activity layout add the SwipeRefreshLayout.</p>

<p></p>

<pre><code>&lt;ScrollView
    android:layout_width="match_parent"
    android:layout_height="match_parent"&gt; 
    &lt;TextView
        android:text="@string/hello_world"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:gravity="center"/&gt;
&lt;/ScrollView&gt;
</code></pre>

<p>
Note : It has only View inside the layout. Add the scrollView inside the SwipeRefresh layout to support pull to refresh. For ListView and GridView no need to add ScrollView inside SwipeRefreshLayout.</p>

<p>code part</p>

<p>Add the following lines in onCreate method of your Activity.</p>

<p>public class SwipeActivity extends Activity implements OnRefreshListener {
    SwipeRefreshLayout swipeLayout; </p>

<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_swipe);
     swipeLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_container);
    swipeLayout.setOnRefreshListener(this);
</code></pre>

<p>swipeLayout.setColorScheme(android.R.color.holo_blue_bright, android.R.color.holo_green_light, android.R.color.holo_orange_light, android.R.color.holo_red_light);
    }</p>

<pre><code>@Override
    public void onRefresh() {
        // TODO Auto-generated method stub
        new Handler().postDelayed(new Runnable() {
            @Override public void run() {
                swipeLayout.setRefreshing(false);
            }
        }, 5000);
    }
</code></pre>

<p>}<br>
<code>swipeLayout.setOnRefreshListener(this);</code> sets Refresh listener for your layout.</p>

<p>Loading color schemes are adding using</p>

<pre><code>swipeLayout.setColorScheme(android.R.color.holo_blue_bright, android.R.color.holo_green_light,  android.R.color.holo_orange_light, android.R.color.holo_red_light);
To stop the loading progress swipeLayout.setRefreshing(false);.
</code></pre>

<p>Thats it. Run your appplicaton you also did the new pull to refresh.</p>

<p>SWIPE TO REFRESH WITH LISTVIEW</p>

<p>Here I add an example of pull to refresh with listview. Then you will know how easy it is to integrate.</p>

<p>Create a new Activity in your application, add the listview in your SwipeRefreshLayout.</p>

<pre><code>&lt;android.support.v4.widget.SwipeRefreshLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/swipe_container"
    android:layout_width="match_parent"
    android:layout_height="match_parent" &gt;
    &lt;ListView
        android:id="@+id/listview"
        android:layout_width="match_parent"
        android:layout_height="match_parent" &gt;
    &lt;/ListView&gt;
&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;
</code></pre>

<p>Declare and initialze variables for listview, adapter, String array for list items. Below codes will add the list items from array when you do pull to refresh.</p>

<pre><code>public class SwipeActivity extends ActionBarActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_swipe);


        if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                    .add(R.id.container, new PlaceholderFragment())
                    .commit();
        }
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {

        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.swipe, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    /**
     * A placeholder fragment containing a simple view.
     */
    public static class PlaceholderFragment extends Fragment implements OnRefreshListener {
        SwipeRefreshLayout swipeLayout; 
        ListView listView;
        ArrayAdapter adapter;
        ArrayList&lt; String&gt; arrayList;
        String [] array = new String[]{"Apple","Batman","captain America","darkknight"};

        public PlaceholderFragment() {
        }

        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                Bundle savedInstanceState) {
            View rootView = inflater.inflate(R.layout.fragment_swipe, container, false);
            swipeLayout = (SwipeRefreshLayout) rootView.findViewById(R.id.swipe_container);
            swipeLayout.setOnRefreshListener(this);
            swipeLayout.setColorScheme(android.R.color.holo_blue_bright, 
                    android.R.color.holo_green_light, 
                    android.R.color.holo_orange_light, 
                    android.R.color.holo_red_light);
            listView= (ListView) rootView.findViewById(R.id.listview);


            adapter = new ArrayAdapter(getActivity(),android.R.layout.simple_list_item_1, appendData());
            listView.setAdapter(adapter);


            return rootView;
        }

        @Override
        public void onRefresh() {
            // TODO Auto-generated method stub
            new Handler().postDelayed(new Runnable() {
                @Override public void run() {
                    appendData();
                    adapter.notifyDataSetChanged();
                    swipeLayout.setRefreshing(false);
                }
            }, 5000);
        }



        private ArrayList appendData(){
            if(arrayList==null)
                arrayList =  new ArrayList();

            for (String items : array) {
                arrayList.add(items);
            }
            return arrayList;
        }
    }

}
</code></pre>

<p>Note: I have used appcompat library to support the Actionbar for lower versions. So My Activity extends ActionBarActivity. In updated ADT version of eclipse and studio, your application will be created with fragment concepts. So application is created with instant fragment concepts.</p>

<p>I guess you like this example. Try it yourself and get practiced.</p>

<p>Happy coding :-).</p>

<p>And resultant screen, see this:</p>

<p><img src="http://i.stack.imgur.com/nbXEY.png" alt="enter image description here"></p>

<p>And for your existing program, use <a href="http://jmsliu.com/1529/rss-reader-android-app-tutorial-4-drag-to-refresh-in-listview-android-example.html" rel="nofollow">this</a> link</p>
