<p>Here's a rough attempt at my map suggestion.</p>

<pre><code>import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class PeopleCarrier implements Iterable&lt;Person&gt;{

    private Map&lt;PersonKey, Person&gt; storage = new HashMap&lt;PersonKey, Person&gt;();

    public void add(Person p) {
        PersonKey pk = new PersonKey(p);
        storage.put(pk, p);     
    }

    public boolean contains(Person p) {
        return storage.containsKey(new PersonKey(p));
    }

    @Override
    public Iterator&lt;Person&gt; iterator() {
        return new Iterator&lt;Person&gt;() {

            private Iterator&lt;PersonKey&gt; i = storage.keySet().iterator();

            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }

            @Override
            public Person next() {
                return storage.get(i.next());               
            }

            @Override
            public boolean hasNext() {
                return i.hasNext();
            }
        };
    }

    private class PersonKey {
        private String firstname;
        private String lastname;
        public PersonKey(Person p) {
            this.firstname = p.getFirstname();
            this.lastname = p.getLastname();
        }
        /* (non-Javadoc)
         * @see java.lang.Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + getOuterType().hashCode();
            result = prime * result
                    + ((firstname == null) ? 0 : firstname.hashCode());
            result = prime * result
                    + ((lastname == null) ? 0 : lastname.hashCode());
            return result;
        }
        /* (non-Javadoc)
         * @see java.lang.Object#equals(java.lang.Object)
         */
        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (!(obj instanceof PersonKey))
                return false;
            PersonKey other = (PersonKey) obj;
            if (!getOuterType().equals(other.getOuterType()))
                return false;
            if (firstname == null) {
                if (other.firstname != null)
                    return false;
            } else if (!firstname.equals(other.firstname))
                return false;
            if (lastname == null) {
                if (other.lastname != null)
                    return false;
            } else if (!lastname.equals(other.lastname))
                return false;
            return true;
        }
        private PeopleCarrier getOuterType() {
            return PeopleCarrier.this;
        }   

    }
}
</code></pre>
