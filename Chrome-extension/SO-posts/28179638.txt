<p>I've made review of sending "fhateva" in "body" tag of soap request. Ie i think about sending in body, xml that we provide as string.
That shall usually be bad idea to do such things, but - sometimes it's really best way to do something ugly but resource efficient - fe. Your xml-string parsing, changing to serializables and serializing seems also not very nice.</p>

<p>Below i've included three classes, that are modifications of SoapSerializationEnvelope, HttpTransportSE and KXmlSerializer. Two of them needed only small changes, that could be added throuh inheriting classes. But needs class HttpTransportSE that is included in ksoap2-android-assembly-3.4.0-jar-with-dependencies becouse of method "getPrefixes". Modifying another transport classes is up to You :P
<a href="https://github.com/mosabua/ksoap2-android/blob/master/ksoap2-base/src/main/java/org/ksoap2/SoapEnvelope.java" rel="nofollow">https://github.com/mosabua/ksoap2-android/blob/master/ksoap2-base/src/main/java/org/ksoap2/SoapEnvelope.java</a>
<a href="https://github.com/mosabua/ksoap2-android/blob/master/ksoap2-base/src/main/java/org/ksoap2/transport/Transport.java" rel="nofollow">https://github.com/mosabua/ksoap2-android/blob/master/ksoap2-base/src/main/java/org/ksoap2/transport/Transport.java</a></p>

<p>Unfortunately KXmlSerializer hides everyhing what isn't XmlSerializer infarface, so - there You have a bit modified full class from
<a href="https://code.google.com/r/thibautcastanie-j2objc/source/browse/jre_emul/android/libcore/xml/src/main/java/org/kxml2/io/KXmlSerializer.java" rel="nofollow">https://code.google.com/r/thibautcastanie-j2objc/source/browse/jre_emul/android/libcore/xml/src/main/java/org/kxml2/io/KXmlSerializer.java</a> that is same or almost same as classes You use programming Android.</p>

<p>I WARN everybody that have to use "that thing" - its real kind of terrorism and try to use it only regarding cost of maintenance that will be set on You or Your collegues. Second side - KXmlSerializer is relatively old and isn't changed very often.</p>

<p>Example of using "that thing":</p>

<pre><code>TerroSerializationEnvelope envelope = new TerroSerializationEnvelope(SoapEnvelope.VER11);
envelope.dotNet = true;
envelope.setOutputSoapObject(Request);
String src="&lt;BankObject&gt;&lt;RID&gt;string1&lt;/RID&gt;&lt;ID&gt;string1&lt;/ID&gt;&lt;ShortName&gt;strin1g&lt;/ShortName&gt;&lt;Name&gt;strin1g&lt;/Name&gt;&lt;Address&gt;stri1ng&lt;/Address&gt;&lt;BankTypeID&gt;s1tring&lt;/BankTypeID&gt;&lt;Note&gt;strin1g&lt;/Note&gt;&lt;CreatorUserID&gt;st1ring&lt;/CreatorUserID&gt;&lt;OranizationLogo&gt;ba1se64Binary&lt;/OranizationLogo&gt;&lt;/BankObject&gt;";
envelope.setOutputString(src);

TerroHttpTransportSE androidHttpTransport = new TerroHttpTransportSE(URL);
try
{
    androidHttpTransport.debug=true;
    androidHttpTransport.call(SOAP_ACTION, envelope);
    SoapObject response = (SoapObject)envelope.getResponse();
}
catch(Exception e)
{   ...
</code></pre>

<p>and modified classes:</p>

<pre><code>/** 
 * Copyright (c) 2006, James Seigel, Calgary, AB., Canada
 * Copyright (c) 2003,2004, Stefan Haustein, Oberhausen, Rhld., Germany
 * 
 * For full licences see links that are included in post above
**/
class TerroKXmlSerializer implements XmlSerializer {

    //    static final String UNDEFINED = ":";

    // BEGIN android-added
    /** size (in characters) for the write buffer */
    private static final int WRITE_BUFFER_SIZE = 500;
    // END android-added

    // BEGIN android-changed
    // (Guarantee that the writer is always buffered.)
    private BufferedWriter writer;
    // END android-changed

    private boolean pending;
    private int auto;
    private int depth;

    private String[] elementStack = new String[12];
    //nsp/prefix/name
    private int[] nspCounts = new int[4];
    private String[] nspStack = new String[8];
    //prefix/nsp; both empty are ""
    private boolean[] indent = new boolean[4];
    private boolean unicode;
    private String encoding;

    private final void check(boolean close) throws IOException {
        if (!pending)
            return;

        depth++;
        pending = false;

        if (indent.length &lt;= depth) {
            boolean[] hlp = new boolean[depth + 4];
            System.arraycopy(indent, 0, hlp, 0, depth);
            indent = hlp;
        }
        indent[depth] = indent[depth - 1];

        for (int i = nspCounts[depth - 1]; i &lt; nspCounts[depth]; i++) {
            writer.write(' ');
            writer.write("xmlns");
            if (!nspStack[i * 2].isEmpty()) {
                writer.write(':');
                writer.write(nspStack[i * 2]);
            }
            else if (getNamespace().isEmpty() &amp;&amp; !nspStack[i * 2 + 1].isEmpty())
                throw new IllegalStateException("Cannot set default namespace for elements in no namespace");
            writer.write("=\"");
            writeEscaped(nspStack[i * 2 + 1], '"');
            writer.write('"');
        }

        if (nspCounts.length &lt;= depth + 1) {
            int[] hlp = new int[depth + 8];
            System.arraycopy(nspCounts, 0, hlp, 0, depth + 1);
            nspCounts = hlp;
        }

        nspCounts[depth + 1] = nspCounts[depth];
        //   nspCounts[depth + 2] = nspCounts[depth];

        writer.write(close ? " /&gt;" : "&gt;");
    }

    private final void writeEscaped(String s, int quot) throws IOException {
        for (int i = 0; i &lt; s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\n':
                case '\r':
                case '\t':
                    if(quot == -1)
                        writer.write(c);
                    else
                        writer.write("&amp;#"+((int) c)+';');
                    break;
                case '&amp;' :
                    writer.write("&amp;amp;");
                    break;
                case '&gt;' :
                    writer.write("&amp;gt;");
                    break;
                case '&lt;' :
                    writer.write("&amp;lt;");
                    break;
                default:
                    if (c == quot) {
                        writer.write(c == '"' ? "&amp;quot;" : "&amp;apos;");
                        break;
                    }
                    // BEGIN android-changed: refuse to output invalid characters
                    // See http://www.w3.org/TR/REC-xml/#charsets for definition.
                    // No other Java XML writer we know of does this, but no Java
                    // XML reader we know of is able to parse the bad output we'd
                    // otherwise generate.
                    // Note: tab, newline, and carriage return have already been
                    // handled above.
                    boolean valid = (c &gt;= 0x20 &amp;&amp; c &lt;= 0xd7ff) || (c &gt;= 0xe000 &amp;&amp; c &lt;= 0xfffd);
                    if (!valid) {
                        reportInvalidCharacter(c);
                    }
                    if (unicode || c &lt; 127) {
                        writer.write(c);
                    } else {
                        writer.write("&amp;#" + ((int) c) + ";");
                    }
                    // END android-changed
            }
        }
    }

    // BEGIN android-added
    private static void reportInvalidCharacter(char ch) {
        throw new IllegalArgumentException("Illegal character (" + Integer.toHexString((int) ch) + ")");
    }
    // END android-added

    /*
        private final void writeIndent() throws IOException {
            writer.write("\r\n");
            for (int i = 0; i &lt; depth; i++)
                writer.write(' ');
        }*/

    public void docdecl(String dd) throws IOException {
        writer.write("&lt;!DOCTYPE");
        writer.write(dd);
        writer.write("&gt;");
    }

    public void endDocument() throws IOException {
        while (depth &gt; 0) {
            endTag(elementStack[depth * 3 - 3], elementStack[depth * 3 - 1]);
        }
        flush();
    }

    public void entityRef(String name) throws IOException {
        check(false);
        writer.write('&amp;');
        writer.write(name);
        writer.write(';');
    }

    public boolean getFeature(String name) {
        //return false;
        return (
            "http://xmlpull.org/v1/doc/features.html#indent-output"
                .equals(
                name))
            ? indent[depth]
            : false;
    }

    public String getPrefix(String namespace, boolean create) {
        try {
            return getPrefix(namespace, false, create);
        }
        catch (IOException e) {
            throw new RuntimeException(e.toString());
        }
    }

    private final String getPrefix(
        String namespace,
        boolean includeDefault,
        boolean create)
        throws IOException {

        for (int i = nspCounts[depth + 1] * 2 - 2;
            i &gt;= 0;
            i -= 2) {
            if (nspStack[i + 1].equals(namespace)
                &amp;&amp; (includeDefault || !nspStack[i].isEmpty())) {
                String cand = nspStack[i];
                for (int j = i + 2;
                    j &lt; nspCounts[depth + 1] * 2;
                    j++) {
                    if (nspStack[j].equals(cand)) {
                        cand = null;
                        break;
                    }
                }
                if (cand != null)
                    return cand;
            }
        }

        if (!create)
            return null;

        String prefix;

        if (namespace.isEmpty())
            prefix = "";
        else {
            do {
                prefix = "n" + (auto++);
                for (int i = nspCounts[depth + 1] * 2 - 2;
                    i &gt;= 0;
                    i -= 2) {
                    if (prefix.equals(nspStack[i])) {
                        prefix = null;
                        break;
                    }
                }
            }
            while (prefix == null);
        }

        boolean p = pending;
        pending = false;
        setPrefix(prefix, namespace);
        pending = p;
        return prefix;
    }

    public Object getProperty(String name) {
        throw new RuntimeException("Unsupported property");
    }

    public void ignorableWhitespace(String s)
        throws IOException {
        text(s);
    }

    public void setFeature(String name, boolean value) {
        if ("http://xmlpull.org/v1/doc/features.html#indent-output"
            .equals(name)) {
            indent[depth] = value;
        }
        else
            throw new RuntimeException("Unsupported Feature");
    }

    public void setProperty(String name, Object value) {
        throw new RuntimeException(
            "Unsupported Property:" + value);
    }

    public void setPrefix(String prefix, String namespace)
        throws IOException {

        check(false);
        if (prefix == null)
            prefix = "";
        if (namespace == null)
            namespace = "";

        String defined = getPrefix(namespace, true, false);

        // boil out if already defined

        if (prefix.equals(defined))
            return;

        int pos = (nspCounts[depth + 1]++) &lt;&lt; 1;

        if (nspStack.length &lt; pos + 1) {
            String[] hlp = new String[nspStack.length + 16];
            System.arraycopy(nspStack, 0, hlp, 0, pos);
            nspStack = hlp;
        }

        nspStack[pos++] = prefix;
        nspStack[pos] = namespace;
    }

    public void setOutput(Writer writer) {
        // BEGIN android-changed
        // Guarantee that the writer is always buffered.
        if (writer instanceof BufferedWriter) {
            this.writer = (BufferedWriter) writer;
        } else {
            this.writer = new BufferedWriter(writer, WRITE_BUFFER_SIZE);
        }
        // END android-changed

        // elementStack = new String[12]; //nsp/prefix/name
        //nspCounts = new int[4];
        //nspStack = new String[8]; //prefix/nsp
        //indent = new boolean[4];

        nspCounts[0] = 2;
        nspCounts[1] = 2;
        nspStack[0] = "";
        nspStack[1] = "";
        nspStack[2] = "xml";
        nspStack[3] = "http://www.w3.org/XML/1998/namespace";
        pending = false;
        auto = 0;
        depth = 0;

        unicode = false;
    }

    public void setOutput(OutputStream os, String encoding)
        throws IOException {
        if (os == null)
            throw new IllegalArgumentException("os == null");
        setOutput(
            encoding == null
                ? new OutputStreamWriter(os)
                : new OutputStreamWriter(os, encoding));
        this.encoding = encoding;
        if (encoding != null &amp;&amp; encoding.toLowerCase(Locale.US).startsWith("utf")) {
            unicode = true;
        }
    }

    public void startDocument(String encoding, Boolean standalone) throws IOException {
        writer.write("&lt;?xml version='1.0' ");

        if (encoding != null) {
            this.encoding = encoding;
            if (encoding.toLowerCase(Locale.US).startsWith("utf")) {
                unicode = true;
            }
        }

        if (this.encoding != null) {
            writer.write("encoding='");
            writer.write(this.encoding);
            writer.write("' ");
        }

        if (standalone != null) {
            writer.write("standalone='");
            writer.write(
                standalone.booleanValue() ? "yes" : "no");
            writer.write("' ");
        }
        writer.write("?&gt;");
    }

    public XmlSerializer startTag(String namespace, String name)
        throws IOException {
        check(false);

        //        if (namespace == null)
        //            namespace = "";

        if (indent[depth]) {
            writer.write("\r\n");
            for (int i = 0; i &lt; depth; i++)
                writer.write("  ");
        }

        int esp = depth * 3;

        if (elementStack.length &lt; esp + 3) {
            String[] hlp = new String[elementStack.length + 12];
            System.arraycopy(elementStack, 0, hlp, 0, esp);
            elementStack = hlp;
        }

        String prefix =
            namespace == null
                ? ""
                : getPrefix(namespace, true, true);

        if (namespace != null &amp;&amp; namespace.isEmpty()) {
            for (int i = nspCounts[depth];
                i &lt; nspCounts[depth + 1];
                i++) {
                if (nspStack[i * 2].isEmpty() &amp;&amp; !nspStack[i * 2 + 1].isEmpty()) {
                    throw new IllegalStateException("Cannot set default namespace for elements in no namespace");
                }
            }
        }

        elementStack[esp++] = namespace;
        elementStack[esp++] = prefix;
        elementStack[esp] = name;

        writer.write('&lt;');
        if (!prefix.isEmpty()) {
            writer.write(prefix);
            writer.write(':');
        }

        writer.write(name);

        pending = true;

        return this;
    }

    public XmlSerializer attribute(
        String namespace,
        String name,
        String value)
        throws IOException {
        if (!pending)
            throw new IllegalStateException("illegal position for attribute");

        //        int cnt = nspCounts[depth];

        if (namespace == null)
            namespace = "";

        //        depth--;
        //        pending = false;

        String prefix =
            namespace.isEmpty()
                ? ""
                : getPrefix(namespace, false, true);

        //        pending = true;
        //        depth++;

        /*        if (cnt != nspCounts[depth]) {
                    writer.write(' ');
                    writer.write("xmlns");
                    if (nspStack[cnt * 2] != null) {
                        writer.write(':');
                        writer.write(nspStack[cnt * 2]);
                    }
                    writer.write("=\"");
                    writeEscaped(nspStack[cnt * 2 + 1], '"');
                    writer.write('"');
                }
                */

        writer.write(' ');
        if (!prefix.isEmpty()) {
            writer.write(prefix);
            writer.write(':');
        }
        writer.write(name);
        writer.write('=');
        char q = value.indexOf('"') == -1 ? '"' : '\'';
        writer.write(q);
        writeEscaped(value, q);
        writer.write(q);

        return this;
    }

    public void flush() throws IOException {
        check(false);
        writer.flush();
    }
    /*
        public void close() throws IOException {
            check();
            writer.close();
        }
    */
    public XmlSerializer endTag(String namespace, String name)
        throws IOException {

        if (!pending)
            depth--;
        //        if (namespace == null)
        //          namespace = "";

        if ((namespace == null
            &amp;&amp; elementStack[depth * 3] != null)
            || (namespace != null
                &amp;&amp; !namespace.equals(elementStack[depth * 3]))
            || !elementStack[depth * 3 + 2].equals(name))
            throw new IllegalArgumentException("&lt;/{"+namespace+"}"+name+"&gt; does not match start");

        if (pending) {
            check(true);
            depth--;
        }
        else {
            if (indent[depth + 1]) {
                writer.write("\r\n");
                for (int i = 0; i &lt; depth; i++)
                    writer.write("  ");
            }

            writer.write("&lt;/");
            String prefix = elementStack[depth * 3 + 1];
            if (!prefix.isEmpty()) {
                writer.write(prefix);
                writer.write(':');
            }
            writer.write(name);
            writer.write('&gt;');
        }

        nspCounts[depth + 1] = nspCounts[depth];
        return this;
    }

    public String getNamespace() {
        return getDepth() == 0 ? null : elementStack[getDepth() * 3 - 3];
    }

    public String getName() {
        return getDepth() == 0 ? null : elementStack[getDepth() * 3 - 1];
    }

    public int getDepth() {
        return pending ? depth + 1 : depth;
    }

    //-------mmprog modify for terro serialize-----------------------------------
    private boolean writeUnescaped = false;

    public void setWriteUnescaped(boolean wu){
        writeUnescaped = wu;
    }

    public XmlSerializer text(String text) throws IOException {
        check(false);
        indent[depth] = false;

        if(!writeUnescaped){
            writeEscaped(text, -1);
        }else{
            writer.write(text);
        }
        return this;
    }
    //-----------------------------------------------------------------------------

    public XmlSerializer text(char[] text, int start, int len)
        throws IOException {
        text(new String(text, start, len));
        return this;
    }

    public void cdsect(String data) throws IOException {
        check(false);
        // BEGIN android-changed: ]]&gt; is not allowed within a CDATA,
        // so break and start a new one when necessary.
        data = data.replace("]]&gt;", "]]]]&gt;&lt;![CDATA[&gt;");
        char[] chars = data.toCharArray();
        // We also aren't allowed any invalid characters.
        for (char ch : chars) {
            boolean valid = (ch &gt;= 0x20 &amp;&amp; ch &lt;= 0xd7ff) ||
                    (ch == '\t' || ch == '\n' || ch == '\r') ||
                    (ch &gt;= 0xe000 &amp;&amp; ch &lt;= 0xfffd);
            if (!valid) {
                reportInvalidCharacter(ch);
            }
        }
        writer.write("&lt;![CDATA[");
        writer.write(chars, 0, chars.length);
        writer.write("]]&gt;");
        // END android-changed
    }

    public void comment(String comment) throws IOException {
        check(false);
        writer.write("&lt;!--");
        writer.write(comment);
        writer.write("--&gt;");
    }

    public void processingInstruction(String pi)
        throws IOException {
        check(false);
        writer.write("&lt;?");
        writer.write(pi);
        writer.write("?&gt;");
    }
}

//-----------------------------------------------------------------------------------------

class TerroSerializationEnvelope extends SoapSerializationEnvelope {

    private String myXmlString = null;

    public TerroSerializationEnvelope(int version) {
        super(version);
    }

    public void setOutputString(String o){
        myXmlString = o;
    }

    @Override
    public void writeBody(XmlSerializer writer) throws IOException {
        if (encodingStyle != null) {
            writer.attribute(env, "encodingStyle", encodingStyle);
        }

        if(myXmlString==null){
            ((Node) bodyOut).write(writer);
        }else{
            ((TerroKXmlSerializer)writer).setWriteUnescaped(true);
            writer.text(myXmlString);
            ((TerroKXmlSerializer)writer).setWriteUnescaped(false);
        }
    }
}

//-----------------------------------------------------------------------------------------

class TerroHttpTransportSE extends HttpTransportSE {

    private int bufferLength = ServiceConnection.DEFAULT_BUFFER_SIZE;
    private String myXmlVersionTag="";

    public TerroHttpTransportSE(String url) {
        super(url);
    }

    @Override
    public void setXmlVersionTag(String tag) {
        myXmlVersionTag = tag;
        super.setXmlVersionTag(tag);
    }

    @Override
    protected byte[] createRequestData(SoapEnvelope envelope, String encoding)
            throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream(bufferLength);
        byte result[] = null;
        bos.write(myXmlVersionTag.getBytes());
        XmlSerializer xw = new TerroKXmlSerializer();

        final Iterator keysIter = getPrefixes().keySet().iterator();

        xw.setOutput(bos, encoding);
        while (keysIter.hasNext()) {
            String key = (String) keysIter.next();
            xw.setPrefix(key, (String) getPrefixes().get(key));
        }
        envelope.write(xw);
        xw.flush();
        bos.write('\r');
        bos.write('\n');
        bos.flush();
        result = bos.toByteArray();
        xw = null;
        bos = null;
        return result;
    }

}
</code></pre>
