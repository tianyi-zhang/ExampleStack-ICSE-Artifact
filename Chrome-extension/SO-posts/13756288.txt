<p>I would suggest to implement your own Comparator. See this post: <a href="http://thilosdevblog.wordpress.com/2010/09/15/sorting-ip-addresses-in-java/" rel="nofollow">Sorting IP addresses in Java</a>  </p>

<p>Copy paste only for you:</p>

<pre><code>/**
 * LGPL
 */
public class InetAddressComparator implements Comparator {
    @Override
    public int compare(InetAddress adr1, InetAddress adr2) {
        byte[] ba1 = adr1.getAddress();
        byte[] ba2 = adr2.getAddress();

        // general ordering: ipv4 before ipv6
        if(ba1.length &lt; ba2.length) return -1;
        if(ba1.length &gt; ba2.length) return 1;

        // we have 2 ips of the same type, so we have to compare each byte
        for(int i = 0; i &lt; ba1.length; i++) {
            int b1 = unsignedByteToInt(ba1[i]);
            int b2 = unsignedByteToInt(ba2[i]);
            if(b1 == b2)
                continue;
            if(b1 &lt; b2)
                return -1;
            else
                return 1;
        }
        return 0;
    }

    private int unsignedByteToInt(byte b) {
        return (int) b &amp; 0xFF;
    }
}
</code></pre>
