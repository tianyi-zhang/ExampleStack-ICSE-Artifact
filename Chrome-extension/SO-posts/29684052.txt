<p>In the class NewCar and UsedCar you make one recursive class.</p>

<p>Caused by error.</p>

<p>Remove the:</p>

<pre><code>NewCar new1 = new NewCar(8000.33, "silver");
NewCar new2 = new NewCar(8000.33, "silver")
</code></pre>

<p>and</p>

<pre><code>UsedCar used1 = new UsedCar(2500, 100000);
UsedCar used2 = new UsedCar(2500, 100000);
</code></pre>

<p>In your costructor you used</p>

<pre><code>color = this.color;
</code></pre>

<p>when in fact you should used</p>

<pre><code>this.color = color.
</code></pre>

<p>In the method equals you implemented so incorect.</p>

<p>It is correct:</p>

<pre><code>@Override
public boolean equals(Object obj) {
    if (this == obj)
        return true;
    if (!super.equals(obj))
        return false;
    if (getClass() != obj.getClass())
        return false;
    NewCar other = (NewCar) obj;
    if (color == null) {
        if (other.color != null)
            return false;
    } else if (!color.equals(other.color))
        return false;
    return true;
}
</code></pre>

<p>Correct Class</p>

<p>Car.java</p>

<pre><code>public class Car {

    private Double price;
    private String color;

    public Car(String color, Double cost) {
        this.color = color;
        this.price = cost * 2;
    }

    public Double getPrice() {
        return price;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((color == null) ? 0 : color.hashCode());
        result = prime * result + ((price == null) ? 0 : price.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Car other = (Car) obj;
        if (color == null) {
            if (other.color != null)
                return false;
        } else if (!color.equals(other.color))
            return false;
        if (price == null) {
            if (other.price != null)
                return false;
        } else if (!price.equals(other.price))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "Car: \nColor:" + color + "\nPrice: " + price;
    }

    public void display() {
        System.out.println(toString());
    }

}
</code></pre>

<p>NewCar.java</p>

<pre><code>public class NewCar extends Car {

    private String color = "silver";

    public NewCar(String color, Double coast) {
        super(color, coast);
        this.color = color;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((color == null) ? 0 : color.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        NewCar other = (NewCar) obj;
        if (color == null) {
            if (other.color != null)
                return false;
        } else if (!color.equals(other.color))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return super.toString() + "\nType: New\nMileage:0\n";
    }
}
</code></pre>

<p>UsedCar.java</p>

<pre><code>public class UsedCar extends Car {

    private double mileage;
    private String color = "silver";

    public UsedCar(String color, double price, double mileage) {
        super(color, price);
        this.mileage = mileage;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = super.hashCode();
        result = prime * result + ((color == null) ? 0 : color.hashCode());
        long temp;
        temp = Double.doubleToLongBits(mileage);
        result = prime * result + (int) (temp ^ (temp &gt;&gt;&gt; 32));
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!super.equals(obj))
            return false;
        if (getClass() != obj.getClass())
            return false;
        UsedCar other = (UsedCar) obj;
        if (color == null) {
            if (other.color != null)
                return false;
        } else if (!color.equals(other.color))
            return false;
        if (Double.doubleToLongBits(mileage) != Double.doubleToLongBits(other.mileage))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return super.toString() + "\nType: Used\nMileage: " + mileage + "\n";
    }

}
</code></pre>

<p>CarDriver.java</p>

<pre><code>public class CarDriver {

    public static void main(String[] args) {
        Car new1 = new NewCar("silver", 8000.33);
        Car new2 = new NewCar("silver", 8000.33);
        if (new1.equals(new2)) {
            new1.display();
        }

        Car used1 = new UsedCar("silver", 2500, 100000);
        Car used2 = new UsedCar("silver", 2500, 100000);
        if (used1.equals(used2)) {
            used1.display();
        }
    }
}
</code></pre>
