<p>Thanks to the <strong>Sam</strong> (<a href="http://stackoverflow.com/a/13391689/4226207">http://stackoverflow.com/a/13391689/4226207</a>), problem solved.</p>

<p>I just created a new class <strong>ArrayAdapter.java</strong> in my app and override the <strong>getFilter()</strong> method, just the section below <strong>performFiltering()</strong>. Then I remove the</p>

<pre><code>import android.widget.ArrayAdapter;
</code></pre>

<p>Now the search is perfect. Here is the section that I changed in the ArrayAdapter class:</p>

<pre><code>@Override
protected FilterResults performFiltering(CharSequence prefix) {
    FilterResults results = new FilterResults();

    if (mOriginalValues == null) {
        synchronized (mLock) {
            mOriginalValues = new ArrayList&lt;T&gt;(mObjects);
        }
    }

    if (prefix == null || prefix.length() == 0) {
        ArrayList&lt;T&gt; list;
        synchronized (mLock) {
            list = new ArrayList&lt;T&gt;(mOriginalValues);
        }
        results.values = list;
        results.count = list.size();
    } else {
        String prefixString = prefix.toString().toLowerCase();

        ArrayList&lt;T&gt; values;
        synchronized (mLock) {
            values = new ArrayList&lt;T&gt;(mOriginalValues);
        }

        final int count = values.size();
        final ArrayList&lt;T&gt; newValues = new ArrayList&lt;T&gt;();

        for (int i = 0; i &lt; count; i++) {
            final T value = values.get(i);
            final String valueText = value.toString().toLowerCase();

            // First match against the whole, non-splitted value
            if (valueText.startsWith(prefixString)) {
                newValues.add(value);
            } else {
                final String[] prefixes = prefixString.split(" ");
                final int prefixCount = prefixes.length;

                    int loc;
                    if(valueText.startsWith(prefixes[0]) || (loc = valueText.indexOf(' ' + prefixes[0])) &gt; -1)
                        loc = valueText.indexOf(prefixes[0]);

                    for (int j = 1; j &lt; prefixCount &amp;&amp; loc &gt; -1; j++) 
                        loc = valueText.indexOf(' ' + prefixes[j], loc + 2);

                    if(loc &gt; -1)
                        newValues.add(value);
            }
        }

        results.values = newValues;
        results.count = newValues.size();
     }

    return results;
}
</code></pre>
