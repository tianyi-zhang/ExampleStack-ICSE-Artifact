<p>I guess you want to sort by value. It this case you can do something like this:</p>

<pre><code>public Map&lt;String, Double&gt; sortMap(Map&lt;String, Double&gt; unsortMap) {

    List&lt;Map.Entry&lt;String, Double&gt;&gt; list = new LinkedList&lt;Entry&lt;String, Double&gt;&gt;(
            unsortMap.entrySet());

    // sort list based on comparator
    Collections.sort(list, new Comparator&lt;Object&gt;() {
        @SuppressWarnings("unchecked")
        public int compare(Object o1, Object o2) {
            return ((Map.Entry&lt;String, Double&gt;) o1).getValue().compareTo(
                    ((Map.Entry&lt;String, Double&gt;) o2).getValue());
        }
    });

    // put sorted list into map again
    Map&lt;String, Double&gt; sortedMap = new LinkedHashMap&lt;String, Double&gt;();
    for (Iterator&lt;Entry&lt;String, Double&gt;&gt; it = list.iterator(); it.hasNext();) {
        Map.Entry&lt;String, Double&gt; entry = it.next();
        sortedMap.put(entry.getKey(), entry.getValue());
    }
    return sortedMap;
}
</code></pre>

<p>However, if you want to sort by key change:</p>

<pre><code>    return ((Map.Entry&lt;String, Double&gt;) o1).getValue().compareTo(
                    ((Map.Entry&lt;String, Double&gt;) o2).getValue());
</code></pre>

<p>to </p>

<pre><code>     return ((Map.Entry&lt;String, Double&gt;) o1).getKey().compareTo(
                    ((Map.Entry&lt;String, Double&gt;) o2).getKey());
</code></pre>
