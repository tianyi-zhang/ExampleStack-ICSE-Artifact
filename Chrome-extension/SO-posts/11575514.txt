<p>I have written a class for it .</p>

<pre><code>   public class BitmapSizeHelper
{

    public static enum ScalingLogic
        {
            CROP, FIT
        }

    public static Bitmap getBitmapFromResources(Resources res, int resId, int dstWidth, int dstHeight, ScalingLogic scalingLogic)
        {
            Options options = new Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeResource(res, resId, options);
            options.inJustDecodeBounds = false;
            options.inSampleSize = calculateSampleSize(options.outWidth, options.outHeight, dstWidth, dstHeight, scalingLogic);
            Bitmap unscaledBitmap = BitmapFactory.decodeResource(res, resId, options);

            return unscaledBitmap;

        }

    public static Bitmap getBitmapFromPath(int targetW, int targetH, String photopath, int dstWidth, int dstHeight, ScalingLogic scalingLogic)
        {

            Options options = new Options();
            options.inJustDecodeBounds = true;
            BitmapFactory.decodeFile(photopath, options);
            options.inJustDecodeBounds = false;
            options.inSampleSize = calculateSampleSize(options.outWidth, options.outHeight, dstWidth, dstHeight, scalingLogic);
            Bitmap bitmap = BitmapFactory.decodeFile(photopath, options);

            return bitmap;

        }

    public static int calculateSampleSize(int srcWidth, int srcHeight, int dstWidth, int dstHeight, ScalingLogic scalingLogic)
        {
            if (scalingLogic == ScalingLogic.FIT)
                {
                    final float srcAspect = (float) srcWidth / (float) srcHeight;
                    final float dstAspect = (float) dstWidth / (float) dstHeight;

                    if (srcAspect &gt; dstAspect)
                        {
                            return srcWidth / dstWidth;
                        }
                    else
                        {
                            return srcHeight / dstHeight;
                        }
                }
            else
                {
                    final float srcAspect = (float) srcWidth / (float) srcHeight;
                    final float dstAspect = (float) dstWidth / (float) dstHeight;

                    if (srcAspect &gt; dstAspect)
                        {
                            return srcHeight / dstHeight;
                        }
                    else
                        {
                            return srcWidth / dstWidth;
                        }
                }
        }

    public static Bitmap createScaledBitmap(Bitmap unscaledBitmap, int dstWidth, int dstHeight, ScalingLogic scalingLogic)
        {
            Rect srcRect = calculateSrcRect(unscaledBitmap.getWidth(), unscaledBitmap.getHeight(), dstWidth, dstHeight, scalingLogic);
            Rect dstRect = calculateDstRect(unscaledBitmap.getWidth(), unscaledBitmap.getHeight(), dstWidth, dstHeight, scalingLogic);
            Bitmap scaledBitmap = Bitmap.createBitmap(dstRect.width(), dstRect.height(), Config.ARGB_8888);
            Canvas canvas = new Canvas(scaledBitmap);
            canvas.drawBitmap(unscaledBitmap, srcRect, dstRect, new Paint(Paint.FILTER_BITMAP_FLAG));

            return scaledBitmap;
        }

    public static Rect calculateSrcRect(int srcWidth, int srcHeight, int dstWidth, int dstHeight, ScalingLogic scalingLogic)
        {
            if (scalingLogic == ScalingLogic.CROP)
                {
                    final float srcAspect = (float) srcWidth / (float) srcHeight;
                    final float dstAspect = (float) dstWidth / (float) dstHeight;

                    if (srcAspect &gt; dstAspect)
                        {
                            final int srcRectWidth = (int) (srcHeight * dstAspect);
                            final int srcRectLeft = (srcWidth - srcRectWidth) / 2;
                            return new Rect(srcRectLeft, 0, srcRectLeft + srcRectWidth, srcHeight);
                        }
                    else
                        {
                            final int srcRectHeight = (int) (srcWidth / dstAspect);
                            final int scrRectTop = (int) (srcHeight - srcRectHeight) / 2;
                            return new Rect(0, scrRectTop, srcWidth, scrRectTop + srcRectHeight);
                        }
                }
            else
                {
                    return new Rect(0, 0, srcWidth, srcHeight);
                }
        }

    public static Rect calculateDstRect(int srcWidth, int srcHeight, int dstWidth, int dstHeight, ScalingLogic scalingLogic)
        {
            if (scalingLogic == ScalingLogic.FIT)
                {
                    final float srcAspect = (float) srcWidth / (float) srcHeight;
                    final float dstAspect = (float) dstWidth / (float) dstHeight;

                    if (srcAspect &gt; dstAspect)
                        {
                            return new Rect(0, 0, dstWidth, (int) (dstWidth / srcAspect));
                        }
                    else
                        {
                            return new Rect(0, 0, (int) (dstHeight * srcAspect), dstHeight);
                        }
                }
            else
                {
                    return new Rect(0, 0, dstWidth, dstHeight);
                }
        }

}`
</code></pre>
