<p>First marshal just turn the jaxb object into xml input stream.</p>

<pre><code>&lt;marshal&gt;
     &lt;jaxb contextPath="org.ben.camel.spareparts.model" ignoreJAXBElement="false"/&gt;
  &lt;/marshal&gt;
</code></pre>

<p>Second, camel can tell the message type by looking up the body instance.</p>

<pre><code>protected JmsMessageType getJMSMessageTypeForBody(Exchange exchange, Object body, Map&lt;String, Object&gt; headers, Session session, CamelContext context) {
    JmsMessageType type = null;
    // let body determine the type
    if (body instanceof Node || body instanceof String) {
        type = Text;
    } else if (body instanceof byte[] || body instanceof WrappedFile || body instanceof File || body instanceof Reader
            || body instanceof InputStream || body instanceof ByteBuffer || body instanceof StreamCache) {
        type = Bytes;
    } else if (body instanceof Map) {
        type = Map;
    } else if (body instanceof Serializable) {
        type = Object;            
    } else if (exchange.getContext().getTypeConverter().tryConvertTo(File.class, body) != null
            || exchange.getContext().getTypeConverter().tryConvertTo(InputStream.class, body) != null) {
        type = Bytes;
    }
    return type;
}
</code></pre>

<p>If you want to send the Object message to the ActiveMQ, you need to make sure the message body is instance of Serializable, otherwise camel will turn it into a input stream with the help of JAXB fallback converter even you umarshall the xml into Java object.</p>
