<p>Gladnick: In case you are planning to use the default <strong>TextInputFormat</strong>, there would be atleast as many mappers at the number of input files (or more depending on the file size). So just <strong>put 2 files into your input directories</strong> so that you can get 2 mappers running. (Advising this solution, because you plan to run this as a test case). </p>

<p>Now that you have asked for 2 reducers, all you need to do is <strong>job.setNumReduceTasks(2)</strong> in your main befor submiting the job.</p>

<p>After that just prepare a jar of your application and run that in <strong>hadoop pseudo cluster</strong>. </p>

<p>In case you need to specify which word to go to which reducer, you can specify that in the Partitioner class.</p>

<pre><code>            Configuration configuration = new Configuration();
        // create a configuration object that provides access to various
        // configuration parameters
        Job job = new Job(configuration, "Wordcount-Vowels &amp; Consonants");
        // create the job object and set job name as Wordcount-Vowels &amp;
        // Consonants
        job.setJarByClass(WordCount.class);
        // set the main class
        job.setNumReduceTasks(2);
        // set the number of reduce tasks required
        job.setMapperClass(WordCountMapper.class);
        // set the map class for the job
        job.setCombinerClass(WordCountCombiner.class);
        // set the combiner class for the job
        job.setPartitionerClass(VowelConsonantPartitioner.class);
        // set the partitioner class for the job
        job.setReducerClass(WordCountReducer.class);
        // set the reduce class for the job
        job.setOutputKeyClass(Text.class);
        // set the output type of key (the word) expected from the job, Text
        // analogous to String
        job.setOutputValueClass(IntWritable.class);
        // set the output type of value (the count) expected from the job,
        // IntWritable analogous to int
        FileInputFormat.addInputPath(job, new Path(args[0]));
        // set the input directory for fetching the input files
        FileOutputFormat.setOutputPath(job, new Path(args[1])); 
</code></pre>

<p>This should be the structure of your main program. You may include the combiner and the partitioner in case needed. </p>
