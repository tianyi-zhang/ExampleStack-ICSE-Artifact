<p><code>convertView</code> in <code>getView</code> is previously used <code>View</code> with previous data! So you need to fill your <code>View</code> with correct data each time in <code>getView</code>. In your code I don't see where you set state of <code>checkbox</code>. You should do it. As you do for <code>TextView</code> <code>holder.tv.setText(arrayList.get(position));</code></p>

<p><strong>Update</strong></p>

<p>Here is code sample. Take a look at <code>getView</code>. Other things like creation of initial data or data structure are simplified.</p>

<pre><code>public class CustomAdapter extends BaseAdapter {

    private List&lt;String&gt; arrayList = new ArrayList&lt;&gt;(30);
    private boolean[] mItemChecked = new boolean[30];
    private Context mContext;

    public CustomAdapter(Context context) {
        mContext = context;
        for (int i = 0; i &lt; 30; i++) {
            arrayList.add("text: " + i);
            mItemChecked[i] = false;
        }
    }

    public int getCount() {
        return arrayList.size();
    }

    @Override
    public Object getItem(int position) {
        return arrayList.get(position);
    }

    @Override
    public long getItemId(int position) {
        return 0;
    }

    public boolean itemIsChecked(int position) {
        return mItemChecked[position];
    }

    @Override
    public View getView(final int position, View convertView, ViewGroup parent) {
        final ViewHolder holder;
        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        if (convertView == null) {
            convertView = inflater.inflate(R.layout.list_item, parent, false);
            holder = new ViewHolder();
            holder.tv = (TextView) convertView.findViewById(R.id.nameTV);
            holder.cb = (CheckBox) convertView.findViewById(R.id.cb);
            convertView.setTag(holder);
        } else {
            holder = (ViewHolder) convertView.getTag();
        }
        holder.tv.setText(arrayList.get(position));
        //Important to remove previous listener before calling setChecked
        holder.cb.setOnCheckedChangeListener(null);
        holder.cb.setChecked(mItemChecked[position]);
        holder.cb.setTag(position);
        holder.cb.setOnCheckedChangeListener(
                new CompoundButton.OnCheckedChangeListener() {
                    @Override
                    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                        mItemChecked[position] = isChecked;
                    }
                });
        return convertView;
    }

    private class ViewHolder {
        TextView tv;
        CheckBox cb;

    }
}
</code></pre>

<p><code>ListView</code> recycles its view in the <code>getView()</code> method. Add these two methods to solve:</p>

<pre><code>public int getViewTypeCount() {                 
    return getCount();
}

@Override
public int getItemViewType(int position) {
    return position;
}
</code></pre>
