<p>try this link
<a href="http://www.androidhive.info/2013/11/android-sliding-menu-using-navigation-drawer/" rel="nofollow">http://www.androidhive.info/2013/11/android-sliding-menu-using-navigation-drawer/</a>
android actionbarcompat is supported library for below android versions.In this you should do some modifications in code.I am giving some sample code with supported library</p>

<p>code:</p>

<pre><code>public class SliderScreen extends ActionBarActivity {

    private DrawerLayout mDrawerLayout;
    private ListView mDrawerList;
    private ActionBarDrawerToggle mDrawerToggle;
    int checkboxValue=0;
    // nav drawer title
    private CharSequence mDrawerTitle;
    private int selectedPosition=0;
    private int currentpos=0;
    // used to store app title
    private CharSequence mTitle;
    ProgressDialog progress_dialog;
    // slide menu items
    private String[] navMenuTitles;
    private TypedArray navMenuIcons;
    public static String letter = "";
    private ArrayList&lt;NavDrawerItem&gt; navDrawerItems;
    private NavDrawerListAdapter adapter;
    ActionBarActivity activity;
    MDatabase mdatabaseHelper;
    String contact_id = "";
    Cursor contactsCursor = null, databaseCursor = null,
            messageDatabaseCursor = null,imageDatabaseCursor=null;
    String contactCursorValue = "0";
    int contactCursorRead = 0, messageCursorRead = 0,imageCursorRead=0;
    int messageProgressValue = 0, contactProgressValue = 0,imageProgressValue=0;
     AlertDialog d;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.slide_screen);

        mTitle = mDrawerTitle = getTitle();
        // activity=(ActionBarActivity) Context.getApplicationContext();

        // load slide menu items
        navMenuTitles = getResources().getStringArray(R.array.nav_drawer_items);

        // nav drawer icons from resources
        navMenuIcons = getResources()
                .obtainTypedArray(R.array.nav_drawer_icons);

        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
        mDrawerList = (ListView) findViewById(R.id.list_slidermenu);

        progress_dialog = new ProgressDialog(SliderScreen.this);
        progress_dialog.setMessage("please wait  ");

        Builder build=new Builder(SliderScreen.this);
        build.setTitle("");
        build.setMessage("Do you want to signout ? ");
        build.setPositiveButton("Yes",new OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

                finish();

            }
        });
        build.setNegativeButton("No",new OnClickListener() {

            @Override
            public void onClick(DialogInterface dialog, int which) {

                d.dismiss();

            }
        });
        d=build.create();

        // Database retrieval

        mdatabaseHelper = new MDatabase(SliderScreen.this, null, null, 1);
        mdatabaseHelper.getWritableDatabase();
        navDrawerItems = new ArrayList&lt;NavDrawerItem&gt;();
        // adding nav drawer items to array
        // Home
        navDrawerItems.add(new NavDrawerItem(navMenuTitles[0], navMenuIcons
                .getResourceId(0, -1)));
        // Find People
        navDrawerItems.add(new NavDrawerItem(navMenuTitles[1], navMenuIcons
                .getResourceId(1, -1), true, 0));

        navDrawerItems.add(new NavDrawerItem(navMenuTitles[2], navMenuIcons
                .getResourceId(2, -1), true, 0));
        // Photos
        navDrawerItems.add(new NavDrawerItem(navMenuTitles[3], navMenuIcons
                .getResourceId(3, -1), true,0));
        // Communities, Will add a counter here
        navDrawerItems.add(new NavDrawerItem(navMenuTitles[4], navMenuIcons
                .getResourceId(4, -1), true, getMusicFilesCount()));
        // Pages
        navDrawerItems.add(new NavDrawerItem(navMenuTitles[5], navMenuIcons
                .getResourceId(5, -1)));
        // What's hot, We will add a counter here

        // Recycle the typed array
        navMenuIcons.recycle();

        mDrawerList.setOnItemClickListener(new SlideMenuClickListener());

        // setting the nav drawer list adapter
        adapter = new NavDrawerListAdapter(getApplicationContext(),
                navDrawerItems);
        mDrawerList.setAdapter(adapter);

        // enabling action bar app icon and behaving it as toggle button
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        getSupportActionBar().setHomeButtonEnabled(true);

        mDrawerToggle = new ActionBarDrawerToggle(this, mDrawerLayout,
                R.drawable.listbulletes, // nav menu toggle icon
                0, // nav drawer open - description for accessibility
                0 // nav drawer close - description for accessibility
        ) {
            public void onDrawerClosed(View view) {
                getSupportActionBar().setTitle(mTitle);
                if(currentpos!=selectedPosition)
                {
                    currentpos=selectedPosition;
                    displayView(selectedPosition);
                }

            }


            public void onDrawerOpened(View drawerView) {
                getSupportActionBar().setTitle(mDrawerTitle);

                // calling onPrepareOptionsMenu() to hide action bar icons

                // ActivityCompat.invalidateOptionsMenu(getParent());
                // invalidateOptionsMenu();
            }

        };
        mDrawerLayout.setDrawerListener(mDrawerToggle);

        if (savedInstanceState == null) {
            // on first time display view for first nav item
            displayView(1);
        }



    }


    }

    /**
     * Slide menu item click listener
     * */
    private class SlideMenuClickListener implements
            ListView.OnItemClickListener {
        @Override
        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position,
                long id) {
            if(currentpos!=position)
            {
                Fragment fragment=new DefaultFragment();
                if (fragment != null) {
                    FragmentManager fragmentManager = getSupportFragmentManager();
                    fragmentManager.beginTransaction()
                            .replace(R.id.frame_container, fragment).commit();

                    // update selected item and title, then close the drawer

                    setTitle(" ");
                } else {
                    // error in creating fragment
                    Log.e("MainActivity", "Error in creating fragment");
                }
            }

            selectedPosition=position;
            mDrawerLayout.closeDrawer(mDrawerList);
            /*
            // display view for selected nav drawer item
            if(selectedPosition==position)
            {
                 mDrawerLayout.closeDrawer(mDrawerList);
            }
            else
            {
                displayView(position);
                selectedPosition=position;
            }

        */}
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // toggle nav drawer on selecting action bar app icon/title
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }
        // Handle action bar actions click
        switch (item.getItemId()) {
        case R.id.action_settings:
            return true;
        default:
            return super.onOptionsItemSelected(item);
        }
    }

    /* *
     * Called when invalidateOptionsMenu() is triggered
     */
    @Override
    public boolean onPrepareOptionsMenu(Menu menu) {
        // if nav drawer is opened, hide the action items
        boolean drawerOpen = mDrawerLayout.isDrawerOpen(mDrawerList);
        menu.findItem(R.id.action_settings).setVisible(!drawerOpen);
        return super.onPrepareOptionsMenu(menu);
    }

    /**
     * Diplaying fragment view for selected nav drawer list item
     * */
    private void displayView(int position) {
        // update the main content by replacing fragments
        Fragment fragment = null;
        switch (position) {
        case 0:
            fragment = new HomeFragment();
            break;
        case 1:

                fragment = new ContactsFragment();

            break;
        case 2:

                fragment = new MessagesFragment();

            break;
        case 3:

                fragment = new ImageFragment();

            break;
        case 4:
            fragment = new MusicFragment();
            break;
        case 5:
            fragment = new SettingsFragment();
            break;

        default:
            break;
        }

        if (fragment != null) {
            FragmentManager fragmentManager = getSupportFragmentManager();
            fragmentManager.beginTransaction()
                    .replace(R.id.frame_container, fragment).commit();

            // update selected item and title, then close the drawer
            mDrawerList.setItemChecked(position, true);
            mDrawerList.setSelection(position);
            setTitle(navMenuTitles[position]);
            mDrawerLayout.closeDrawer(mDrawerList);
        } else {
            // error in creating fragment
            Log.e("MainActivity", "Error in creating fragment");
        }
    }

    private void showProgressDialog() {

        progress_dialog.show();

    }

    @Override
    public void setTitle(CharSequence title) {
        mTitle = title;
        getSupportActionBar().setTitle(mTitle);
    }

    /**
     * When using the ActionBarDrawerToggle, you must call it during
     * onPostCreate() and onConfigurationChanged()...
     */

    @Override
    protected void onPostCreate(Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);
        // Sync the toggle state after onRestoreInstanceState has occurred.
        mDrawerToggle.syncState();
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // Pass any configuration change to the drawer toggls
        mDrawerToggle.onConfigurationChanged(newConfig);
    }



}
</code></pre>
