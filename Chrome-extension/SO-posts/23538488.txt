<p>The adapter's data references (ArrayList, array, etc.), tend to get lost pretty easily. In that case the notfiyDataSetChanged() method will not work. If you are adamant on using this method I suggest you check the references to the adapter's source again. If that is not the case this is the approach I've used in my project. A small warning in advance, the formatting and the closing of brackets is poorly executed, but the approach is still clear enough.</p>

<pre><code>public class MyFragment extends ListFragment {

// For populating the list view.
SomeAdapter adapter;

public MyFragment() {
}

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    String[] parameters = {"url for request"};
    new GetRequestTask().execute(parameters);

}

// The async task to make the HTTP GET requests.
class GetRequestTask extends AsyncTask&lt;String, String, String&gt;{

    @Override
    protected String doInBackground(String... uri) {
        HttpClient httpclient = new DefaultHttpClient();
        HttpResponse response;
        String responseString = null;
        try {
            response = httpclient.execute(new HttpGet(uri[0]));
            StatusLine statusLine = response.getStatusLine();
            if(statusLine.getStatusCode() == HttpStatus.SC_OK){
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                response.getEntity().writeTo(out);
                out.close();
                responseString = out.toString();
            } else{
                //Closes the connection.
                response.getEntity().getContent().close();
                throw new IOException(statusLine.getReasonPhrase());
            }
        } catch (ClientProtocolException e) {
            Log.e("GetRequestTask", "Client protocol exception.");
            e.printStackTrace();
        } catch (IOException e) {
            Log.e("GetRequestTask", "IO exception.");
            e.printStackTrace();
        }

        return responseString;
    }

    @Override
    protected void onPostExecute(String result) {
        super.onPostExecute(result);
            // Update UI with the new response.
    new UpdateUITask().execute(result);
        }
    }
}

// The async task to update the UI.
class UpdateUITask extends AsyncTask&lt;String, String, ArrayList&lt;Something&gt;&gt;{

    @Override
    protected ArrayList&lt;Something&gt; doInBackground(String... input) {
        ArrayList&lt;Something&gt; someArray = new ArrayList&lt;Something&gt;();
        try{
            // Do some JSON magic to parse the data.
        }
        catch(JSONException je){
            Log.e("UpdateUITask", "JSON parsing error occured.");
            je.printStackTrace();
        }

        return someArray;
    }

    @Override
    protected void onPostExecute(ArrayList&lt;Something&gt; result) {
        super.onPostExecute(result);
        Log.i("UpdateUITask", "Updating UI.");
        adapter = new SomeAdapter(getActivity(), R.layout.some_list_item, restOfTheParameters);
        setListAdapter(adapter);
    }
}


    }
}
</code></pre>
