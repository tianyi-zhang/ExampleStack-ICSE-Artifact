<p>The method <code>put</code> in the HashMap class is the one in charge of adding the elements into the HashMap and it does it by calling a method named addEntry which code is as follows:</p>

<pre><code>   void addEntry(int hash, K key, V value, int bucketIndex) {
        Entry&lt;K,V&gt; e = table[bucketIndex];
        table[bucketIndex] = new Entry&lt;K,V&gt;(hash, key, value, e);
        if (size++ &gt;= threshold)
            resize(2 * table.length);
    } 
</code></pre>

<p>As you can see in this method is where the HashMap is resized if the threshold has been exceeded, so I would try extending the class HashMap and writing my own methods for <code>put</code> and <code>addEntry</code> in order to remove the resizing. Something like:</p>

<pre><code>package java.util;

public class MyHashMap&lt;K, V&gt; extends HashMap {


    private V myPutForNullKey(V value) {
        for (Entry&lt;K, V&gt; e = table[0]; e != null; e = e.next) {
            if (e.key == null) {
                V oldValue = e.value;
                e.value = value;
                e.recordAccess(this);
                return oldValue;
            }
        }
        modCount++;
        myAddEntry(0, null, value, 0);
        return null;
    }

    public V myPut(K key, V value) {
        if (key == null)
            return myPutForNullKey(value);
        if (size &lt; table.length) { 
            int hash = hash(key.hashCode());
            int i = indexFor(hash, table.length);
            for (Entry&lt;K, V&gt; e = table[i]; e != null; e = e.next) {
                Object k;
                if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {
                    V oldValue = e.value;
                    e.value = value;
                    e.recordAccess(this);
                    return oldValue;
                }
            }

            modCount++;
            myAddEntry(hash, key, value, i);
        }
        return null;
    }

    void myAddEntry(int hash, K key, V value, int bucketIndex) {
        Entry&lt;K, V&gt; e = table[bucketIndex];
        table[bucketIndex] = new Entry&lt;K, V&gt;(hash, key, value, e);
        size++;
    }
}
</code></pre>

<p>You would need to write your own methods since <code>put</code> and <code>addEntry</code> cannot be overriding and you would also need to do the same for <code>putForNullKey</code> since it is called inside <code>put</code>. A validation in <code>put</code> is required to verify that we are not trying to put an object if the table is full.</p>
