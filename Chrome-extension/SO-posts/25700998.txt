<p>As noted in another answer, if you don't care about the order, you might do best to change the interface so it doesn't care about the order.</p>

<p>If order matters in the code but not in a specific test, you can use the <code>ArgumentCaptor</code> as you did.  It clutters the code a bit.</p>

<p>If this is something you might do in multiple tests, you might do better to use appropriate <a href="http://docs.mockito.googlecode.com/hg/latest/org/mockito/Matchers.html">Mockito Matchers</a> or <a href="http://hamcrest.org/JavaHamcrest/javadoc/1.3/org/hamcrest/Matchers.html">Hamcrest Matchers</a>, or roll your own (if you don't find one that fills the need).  A hamcrest matcher might be best as it can be used in other contexts besides mockito.</p>

<p>For this example you could create a hamcrest matcher as follows:</p>

<pre><code>import org.hamcrest.BaseMatcher;
import org.hamcrest.Description;
import org.hamcrest.Matcher;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class MyMatchers {
    public  static &lt;T&gt; Matcher&lt;List&lt;T&gt;&gt; sameAsSet(final List&lt;T&gt; expectedList) {
        return new BaseMatcher&lt;List&lt;T&gt;&gt;(){
            @Override
            public boolean matches(Object o) {
                List&lt;T&gt; actualList = Collections.EMPTY_LIST;
                try {
                    actualList = (List&lt;T&gt;) o;
                }
                catch (ClassCastException e) {
                    return false;
                }
                Set&lt;T&gt; expectedSet = new HashSet&lt;T&gt;(expectedList);
                Set&lt;T&gt; actualSet = new HashSet&lt;T&gt;(actualList);
                return actualSet.equals(expectedSet);
            }

            @Override
            public void describeTo(Description description) {
                description.appendText("should contain all and only elements of ").appendValue(expectedList);
            }
        };
    }
}
</code></pre>

<p>And then the verify code becomes:</p>

<pre><code>verify(mockClassB).sendEvent(argThat(MyMatchers.sameAsSet(expectedFileList)));
</code></pre>

<p>If you instead created a mockito matcher, you wouldn't need the <code>argThat</code>, which basically wraps a hamcrest matcher in a mockito matcher.</p>

<p>This moves the logic of sorting or converting to set out of your test and makes it reusable.</p>
