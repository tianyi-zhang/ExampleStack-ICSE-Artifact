<p>Using negative position values stands <strong>very</strong> far from natural order of ViewPager usage and is not the Adapter issue at all. Please have a look into the source code of ViewPager in the support package source in Android SDK. For example, here is a setCurrentItemInternal private implementation:</p>

<pre><code>void setCurrentItemInternal(int item, boolean smoothScroll, boolean always, int velocity) {
    if (mAdapter == null || mAdapter.getCount() &lt;= 0) {
        setScrollingCacheEnabled(false);
        return;
    }
    if (!always &amp;&amp; mCurItem == item &amp;&amp; mItems.size() != 0) {
        setScrollingCacheEnabled(false);
        return;
    }

    if (item &lt; 0) {
        item = 0;
    } else if (item &gt;= mAdapter.getCount()) {
        item = mAdapter.getCount() - 1;
    }
    final int pageLimit = mOffscreenPageLimit;
    if (item &gt; (mCurItem + pageLimit) || item &lt; (mCurItem - pageLimit)) {
        // We are doing a jump by more than one page.  To avoid
        // glitches, we want to keep all current pages in the view
        // until the scroll ends.
        for (int i=0; i&lt;mItems.size(); i++) {
            mItems.get(i).scrolling = true;
        }
    }
    final boolean dispatchSelected = mCurItem != item;
    populate(item);
    scrollToItem(item, smoothScroll, velocity, dispatchSelected);
}
</code></pre>

<p>As you can see, ViewPager <strong>explicitly</strong> assumes no negative position values.</p>
