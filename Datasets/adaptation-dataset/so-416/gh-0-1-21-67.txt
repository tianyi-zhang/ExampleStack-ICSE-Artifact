package com.example.utility;

import android.content.Context;
import android.content.SharedPreferences;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

import java.io.UnsupportedEncodingException;
import java.util.UUID;


// source: http://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id
public class DeviceUUIDFactory
{
	protected static final String PREFS_FILE = "device_id.xml";
	protected static final String PREFS_DEVICE_ID = "device_id";

	protected volatile static UUID sUuid;


	public DeviceUUIDFactory(Context context)
	{
		if(sUuid == null)
		{
			synchronized(DeviceUUIDFactory.class)
			{
				if(sUuid == null)
				{
					final SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE, 0);
					final String id = prefs.getString(PREFS_DEVICE_ID, null);

					if(id != null)
					{
						// use the ids previously computed and stored in the prefs file
						sUuid = UUID.fromString(id);
					}
					else
					{
						final String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);

						// Use the Android ID unless it's broken, in which case fallback on deviceId,
						// unless it's not available, then fallback on a random number which we store to a prefs file
						try
						{
							if(!"9774d56d682e549c".equals(androidId))
							{
								sUuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
							}
							else
							{
								// requires android.permission.READ_PHONE_STATE 
								final String deviceId = ((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
								sUuid = deviceId != null ? UUID.nameUUIDFromBytes(deviceId.getBytes("utf8")) : UUID.randomUUID();
							}
						}
						catch(UnsupportedEncodingException e)
						{
							throw new RuntimeException(e);
						}

						// write the value out to the prefs file
						prefs.edit().putString(PREFS_DEVICE_ID, sUuid.toString()).commit();
					}
				}
			}
		}
	}


	/**
	 * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
	 * to be unique across all Android devices. Much more so than ANDROID_ID is.<br><br>
	 * <p>
	 * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
	 * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
	 * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
	 * usable value.<br><br>
	 * <p>
	 * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
	 * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
	 * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
	 * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.<br><br>
	 * <p>
	 * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
	 * change after a factory reset. Something to be aware of.<br><br>
	 * <p>
	 * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.<br><br>
	 * <p>
	 * Requires Permission: {@link READ_PHONE_STATE}<br><br>
	 *
	 * @return a UUID that may be used to uniquely identify your device for most purposes.
	 * @see http://code.google.com/p/android/issues/detail?id=10603
	 */
	public UUID getDeviceUUID()
	{
		return sUuid;
	}
}
